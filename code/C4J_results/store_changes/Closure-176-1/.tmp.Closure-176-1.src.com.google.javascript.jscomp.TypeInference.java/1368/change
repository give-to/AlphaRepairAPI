scope = narrowScope(scope, n,  narrowed);
 return narrowed;
scope = narrowScope(scope,  narrowed);
 scope = narrowed;
scope  = narrowed
scope = narrowScope(scope);
scope = narrowScope(scope, n, narrowed, propName);
scope =  narrowed ; break ;
scope = narrowScope(scope, n, propName);
 extend(n, narrowed);
scope = narrowScope(scope, n, narrowed) ; scope = narrowed ;
scope = narrowScope(scope, propName, narrowed);
scope = narrowScope(type, scope, n, narrowed);
 scope = scope. restrictByNotNullOrUndefined ( ) ;
 scope.narrowScope(scope, n, narrowed);
scope = narrowScope ( narrowed )
scope = narrowScope ( scope, narrowed, n ) ;
 scope = narrowScope(scope, n, narrowed); } else {
scope = narrowScope ( scope, narrowed ) ; scope = narrowed ;
 scope = FlowScope.narrowScope(scope, n, narrowed);
 scope = scope. restrictByNotNullOrUndefined ( narrowed ) ;
 scope = scope. restrictByNotNullOrUndefined ( narrowed ) ;
scope =  scope. restrictByNotNullOrUndefined ;
 extend(scope, narrowed);
 scope = SyntacticScope.narrowScope(scope, n, narrowed);
 scope = narrowScope(scope, n); } else { scope = scope ; } else {
scope = narrowScope(scope, n, narrowed, type);
 scope = scope. restrictByNotNullOrUndefined ( narrowed )
 scope = narrowScope(scope, n); } else { scope = narrowed ;
scope = narrowScope(objType, scope, n, narrowed);
 extend(scope, n, narrowed);
scope =  dereferencePointer(scope, n, narrowed);
 scope = narrowScope(scope, n); } else { scope = narrowScope(scope, n); } if ( type!= narrowed ) {
 scope. restrictByNotNullOrUndefined ( narrowed ) ;
 scope. add ( narrowed ) ;
 scope.scope= narrowScope(scope, n, narrowed);
scope =  scope. restrictByNotNullOrUndefined();
 scope = narrowScope(scope, n, narrowed); } } else {
 scope = scope ; narrowed = type;
 scope = narrowScope(scope, n); } } else { if (type!= narrowed) {
 scope = narrowScope(scope, n); } else { scope = narrowScope(scope, n); } if ( narrowed!= null ) {
scope = narrowScope ( scope, narrowed )
 scope = narrowScope(scope, n); } else { scope = narrowScope(scope, n); } if ( narrowed!= null)
 scope = scope. narrowScope ( scope, n, narrowed ) ;
scope = narrowScope(scope, type, narrowed);
 scope = narrowScope(scope, n); } else { scope = type ;
 narrowed = type. restrictByNotNullOrUndefined ( narrowed ) ;
 narrowed = type.restrictByNotNullOrUndefined();
 scope = narrowScope(scope, n); } else { scope = n ;
 scope = scope. restrictByNotNullOrUndefined ( )
 scope = narrowScope(scope, n, narrowed); } else { scope = type ;
 scope = narrowScope(scope, n); } else { if (type == narrowed) {
 scope = narrowScope(scope, n); } if ( type!= narrowed ) { scope. restrictByNotNull ( narrowed ) ;
 scope = syntacticScope.narrowScope(scope, n, narrowed);
scope = narrowScope(scope, type, propName);
 scope = narrowScope(scope, type);
 scope = narrowScope(scope, n); } else { scope = narrowScope(scope, n); } else { scope = n ;
 scope = narrowScope(scope, n); } else if (type == null) {
scope = narrowScope ( scope, narrowed, type ) ;
 scope = narrowScope(scope, n); } } else { if ( type!= objType ) {
scope = narrowScope(scope, n, narrowed) ; scope = narrowed ; break ;
 scope = narrowScope(scope, n); } else if (type == n) {
 scope. restrictByNotNullOrUndefined ( narrowed )
 scope = narrowScope(scope, n); } else if (type == null || narrowed == null) {
 narrowed = narrowed. restrictByNotNullOrUndefined();
 scope = narrowScope(scope, n); } else { scope = scope ; } } else {
 scope = narrowScope(scope, n); } else { scope = scope. clone ( ) ;
 scope = narrowScope(scope, n); } } else { if (n!= n, narrowed) {
 scope. restrictByNotNullOrUndefined ( narrowed. type ) ;
scope =  scope. getScope ( narrowed ) ;
scope . restrictByNotNullOrUndefined ( )
 scope = narrowScope(scope, n); } else { scope = narrowScope(scope, n); } if ( narrowed!= n )
 scope = narrowScope(scope, n); } else if (type == null || narrowed!= null) {
 scope = narrowScope(scope, n); } else if (type == n, narrowed) {
scope = narrowScope ( narrowed ) ;
 narrowed = type.restrictByNullOrUndefined();
 scope = scope ; narrowed = narrowed;
 scope.replace(type, narrowed);
 scope = narrowScope(scope, n); } } else { if (n!= objType) {
scope =  scope. restrictByNotNullOrUndefined
scope = narrowScope(scope, narrowed, propName);
 scope = narrowScope(scope, n); } if ( type!= narrowed ) { scope. restrictByNotNullOrUndefined();
 scope = narrowScope(scope, n); } } else { if (type!= narrowed)
scope = narrowScope ( scope, narrowed ) ; narrowed = type ;
 scope = narrowScope(scope, n); } else if (type == null || type == undefined) {
 scope = narrowScope(scope, n, narrowed); } else { if (type == narrowed) {
 scope = narrowScope(scope, n); } else if (type == null || narrowed!= null)
 scope.addPointer(narrowed);
 scope. restrictByNotNullOrUndefined();
 scope = scope. narrowScope ( scope, narrowed ) ;
 scope = narrowScope(scope, n); } else if (type == null || narrowed == null)
scope = narrowScope ( scope, narrowed ) ; return narrowed ;
 scope = narrowScope(scope, n); } else if (type == null) { scope = n ;
scope = narrowScope(scope, type, n, narrowed);
 scope = scope. restrictByType ( narrowed ) ;
 scope = _narrowScope(scope, n, narrowed);
 narrowed = type.restrictByNotNullOrUndefined(); }
 scope = narrowScope(scope, n); } if ( type!= narrowed ) { scope. restrictByNull ( narrowed ) ;
 scope.add(type);
scope = narrowScope ( scope, narrowed, n )
 scope = scope. restrictByNotNullOrUndefined ( narrowed ) ; } else { scope = narrowScope (scope);
 scope = narrowScope(scope, n); } if ( type!= narrowed ) { scope = scope, narrowed ; } else {
 scope = narrowScope(scope, n); scope= narrowScope(scope, n, narrowed);
 scope = narrowed ; narrowed = type;
 scope = scope ; } else {
 scope = narrowScope(scope, n); } else if (type == null || narrowed == null) { scope = n ;
 scope. restrictByNotNullOrUndefined;
 scope. push ( narrowed ) ;
 scope = narrowScope(scope, n); } else if (type == null || narrowed == null) { scope = narrowed ;
 scope = scope. restrictByNotNull(type);
scope = narrowScope(scope, narrowed); break;
 narrowed = narrowed. restrictByNotNullOrUndefined(); }
scope =  scope. merge ( narrowed ) ;
scope = narrowScope(scope, type, propName, narrowed);
 scope. setPointer ( narrowed ) ;
scope =  narrowed ; return narrowed ;
 scope. restrictByNotNullOrUndefined ( narrowed, scope ) ;
 scope = scope. replacePointer(n, narrowed);
 scope. restrictByNotNullOrUndefined();
 scope = scope ; return narrowed;
 scope. restrictByNotNullOrUndefined = narrowed
 scope = scope. narrowScope ( scope ) ;
scope = narrowScope(objType, n, narrowed);
 narrowed = type. restrictByNotNullOrUndefined();
scope = narrowScope(objType, type, scope, n, narrowed);
scope = narrowScope(scope, narrowed); scope. extend ( narrowed ) ;
 scope. restrictByNotNullOrUndefined ( narrowed. type )
scope = narrowScope(scope, narrowed); scope = narrowed ; break ;
scope = narrowScope(scope, scope, n, narrowed);
scope =  scope. restrictByNullOrUndefined ;
 scope.matchConstraint(narrowed);
 scope. remove ( narrowed ) ;
 scope = narrowScope(scope, n); } if ( type!= narrowed ) { scope. restrictByNotNullOrUndefined =
scope = narrowScope ( scope, narrowed, type )
scope = narrowScope(scope.getScope(), narrowed);
scope = narrowScope(scope, n); scope. restrictByNotNullOrUndefined
 scope. addScope ( narrowed ) ;
scope = narrowScope(scope, narrowed); scope. shrink ( ) ;
 scope = narrowScope(scope, narrowed);
scope = narrowScope(scope, n,  narrowed); scope. shrink ( ) ;
 scope.replace(n, narrowed);
 scope = narrowScope(scope, n); } else if (type!= narrowed) { scope = narrowed; }
scope =  scope. addScope ( narrowed ) ;
 scope = narrowScope(scope, n, narrowed); } else
 scope.getScope(qualifiedName)= narrowScope(scope, n, narrowed);
scope = narrowScope(scope, n); scope. restrictByNotNull ( narrowed )
 scope = narrowScope(scope, type); scope= narrowScope(scope, n, narrowed);
 scope = scope. restrictByNotNullOrUndefined ;
 scope = narrowScope(scope, n); } if ( type!= narrowed ) { scope = narrowScope(scope, n); }
 scope.push(type);
scope = narrowScope(scope,  narrowed); scope. setType ( narrowed ) ;
 scope = narrowScope(scope, n); } else if (type == null) { scope = narrowed; }
 scope = scope. dereferencePointer(n, narrowed);
scope = narrowScope(scope, n); scope. add ( narrowed ) ;
 scope. restrictByNotNullOrUndefined --;
 scope = narrowScope(scope); scope= narrowScope(scope, n, narrowed);
 scope = narrowScope(scope, n); } else { scope = narrowScope(scope, n); } else { scope = narrowed ; }
 scope. add ( narrowed ) ; scope = narrowed ;
 scope = narrowScope(scope, n); } if ( type!= narrowed ) { scope. restrictByNotNullOrUndefined ;
 scope = narrowScope(scope, scope); scope= narrowScope(scope, n, narrowed);
scope = narrowScope(scope,  narrowed); scope. setScope ( narrowed ) ;
scope = narrowScope(scope, scope.getScope(type));
scope = narrowScope(scope, scope.getScope(), narrowed);
scope = narrowScope(scope, n,  narrowed); scope. add ( narrowed ) ;
 scope = narrowScope(scope, n); } else { scope = narrowScope(scope, n); } else { scope = n ; }
scope =  scope. restrictByType ( narrowed )
 scope[propName]= narrowScope(scope, n, narrowed);
scope = narrowScope(scope, scope, type, propName);
scope = narrowScope(scope, n,  narrowed); scope = scope. restrict ( narrowed )
 narrowed = type.restrictByNotNullOrUndefined;
scope = narrowScope(scope, n, narrowed) ; } else { scope = scope ; break ;
scope = narrowScope(scope, n, narrowed) ; scope = scope. getScope ( ) ;
scope = narrowScope ( scope, narrowed ) ; }
scope = narrowScope(scope, n, narrowed) ; } else { scope = scope || n ;
scope = narrowScope(scope, n); scope. extend ( narrowed ) ;
scope = narrowScope(scope, n); scope. setType ( narrowed ) ;
scope = narrowScope(scope, n, narrowed) ; return narrowed ;
scope = narrowScope(scope, n,  narrowed); scope = scope. narrowScope ;
 scope = scope.replace(type, narrowed);
scope = narrowScope(scope, type, narrowed, n);
scope =  scope. add ( narrowed ) ;
scope = narrowScope(scope, n, type, propName);
scope = narrowScope(scope, n, narrowed); scope = scope. merge ( narrowed ) ;
scope = narrowScope ( scope, narrowed, n, scope ) ;
scope = narrowScope(scope, n,  narrowed); break;
scope = narrowScope ( scope ) ; scope = narrowed ; break ;
 scope = new FlowScope(objType, scope, n, narrowed);
scope = narrowScope(scope, scope, narrowed, propName);
scope =  scope. restrictByNotNull ( narrowed )
scope = narrowScope(scope, n, narrowed) ; } else { scope = narrowed ;
 scope = scope. clone ( ) ;
 scope. addType ( narrowed ) ;
 scope = scope. restrictByType ( narrowed )
scope = narrowScope(scope,  narrowed); scope. addScope ( narrowed ) ;
 scope. extend ( narrowed ) ;
scope =  scope. resolve ( narrowed ) ;
 scope. addProperty ( narrowed ) ;
scope = narrowScope(scope, scope, narrowed, type);
 scope. restrictByNotNullOrUndefined(); }
scope = narrowScope(scope, n); scope = narrowed ;
 scope. removePointer ( narrowed ) ;
 scope. addNode ( narrowed ) ;
scope = narrowScope(scope, scope, propName);
scope = narrowScope(scope, n, narrowed) ; scope. setType ( narrowed ) ;
scope = narrowScope(scope, narrowed); scope. narrow ( ) ;
scope =  scope. restrictByType ( narrowed ) ;
 scope.setSlot(n, narrowed);
 scope. restrictByNotNullOrUndefinedInnarrowScope(scope, n, narrowed);
 extend scope, narrowed);
scope = narrowScope(scope, n,  narrowed); scope. addScope ( scope ) ;
 scope = scope. restrictByNotNullOrEmpty;
scope = narrowScope(scope, narrowed); scope = narrowed
 scope = scope. restrictByNullOrUndefined(scope, n, narrowed);
scope = narrowScope(scope, n, narrowed); } else { scope = scope ( ) ;
 scope = narrowScope(scope, n); } else if (type!= narrowed) { scope = narrowed; else
 scope = scope. setJSType(n, narrowed);
 scope.addProperty(n, narrowed);
 scope. restrictByType ( narrowed ) ;
scope = narrowScope(scope, narrowed); scope. add ( narrowed ) ;
 scope = narrowScope(scope, n); } else if (type == null) { scope = narrowed; else
scope = narrowScope(scope, narrowed); scope = narrowed ; }
 scope. add ( narrowed ) ;
scope = narrowScope(scope, n, narrowed) ; break ; } else { scope = narrowed ;
scope = narrowScope(scope, scope.getType(type));
 scope.getScope(n)= narrowScope(scope, n, narrowed);
 scope. detach ( narrowed ) ;
scope = narrowScope(scope, n, narrowed) ; break ; } else { scope = n ;
 scope.replace(type, n, narrowed);
 scope. restrictByNotNullOrUndefined ++;
 scope. restrict ( narrowed )
 scope = narrowScope(scope, n); } else { scope = narrowed; }
 scope.setPointer(n, narrowed);
 scope. add ( narrowed ) ; narrowed = type;
scope = narrowScope(scope, n,  narrowed); scope = scope. merge ( narrowed )
scope =  narrowed ; break ; }
 scope.setPointer(type);
scope = narrowScope(scope, scope.getType(type);
scope = narrowScope(scope, n, narrowed) ; scope = narrowed ; }
 scope = scope. restrictByNotNullOrUndefined ( narrowed ) ; } else { scope = narrowScope (scope));
scope =  scope. restrictByNullOrUndefined();
scope = narrowScope(scope, n); } else { scope = scope ( ) ;
 scope = scope. restrictByType ( narrowed;
 scope = narrowScope(scope, n); } } else { if (n!= n) { scope = n; }
scope = narrowScope(scope, n,  narrowed); scope = scope. narrow ( narrowed )
 scope. remove ( narrowed ) ;
scope = narrowScope(scope, narrowed); scope. narrow ( narrowed);
scope =  narrowed ; scope = narrowed ;
scope = narrowScope(scope, n, narrowed) ; narrowed = type ;
scope = narrowScope(scope, n, narrowed) ; scope. detach ( ) ;
scope =  scope. restrictBy ( narrowed )
 scope.scope.scope= narrowScope(scope, n, narrowed);
scope = narrowScope ( scope, narrowed ) ; break ; }
 scope = narrowScope(scope, narrowed); scope= narrowScope(scope, n, narrowed);
scope = narrowScope(scope, narrowed); scope. add ( n ) ;
 scope.addType(type);
 scope = narrowScope(scope, n); } else if (type!= narrowed) { scope = narrowed; *
 scope = scope ; break ; } return narrowed;
 scope. restrictByNotNullOrUndefined (());
 scope.addConstraint(narrowed);
 return narrowed);
scope = narrowScope(scope, n, narrowed) ; } else { scope = narrowScope ;
 narrowed = type. restrictBy ( narrowed);
 scope = scope. restrictByType(type);
 scope = scope. narrowScope ( ).narrowScope(scope, n, narrowed);
 scope.replacePointer(n, narrowed);
scope = narrowScope ( scope ) ; scope = narrowed. scope ;
scope = narrowScope(scope, narrowed); scope = scope. narrowScope ;
 scope.remove(type);
 scope. restrictByNotNull = narrowed;
scope =  narrowed. scope ;
scope = narrowScope(scope, n, narrowed) ; } else { scope = undefinedScope ;
 scope. add ( narrowed )
scope = narrowScope(scope, n, narrowed) ; } else { scope = n ;
scope = narrowScope(scope, n,  narrowed); scope. narrow ( ) ;
 scope.add(n, narrowed);
scope = narrowScope(scope, n, narrowed, type, propName);
 scope. restrictByNotNullOrUndefined ( narrowed ) ; } }
 scope = scope. getScope ( );
scope = narrowScope(scope, scope.getScope(type);
 scope.scopeScope= narrowScope(scope, n, narrowed);
 scope = scope. restrictByNotNullOrUnknown;
scope = narrowScope(scope, n); scope. shrink ( ) ;
 scope. removePointer ( n ) ;
scope = narrowScopeOf ( scope, narrowed ) ;
 scope = scope. replace ( propName, narrowed);
 scope. restrictByNotNull ( narrowed )
 scope. add ( narrowed ) ; return narrowed;
scope = narrowScope(scope, n, narrowed) ; } else { scope = narrowed ; }
scope = narrowScope(scope, scope, type, narrowed, n);
 scope.addPointer(type);
scope = narrowScope(scope, n, type, narrowed);
 scope = scope. detach ( ) ;
scope = narrowScope(scope, scope, type, narrowed);
scope = narrowScope(scope, n); scope. restrictByType ( narrowed )
scope = narrowScope(scope, narrowed); scope. narrow ( narrowed )
scope = narrowScope(scope); scope. add ( narrowed ) ;
scope =  scope. restrict ( narrowed )
 extend(type, narrowed);
 scope.scope = narrowed;
scope = narrowScope ( scope, narrowed, true ) ;
 scope. restrictByType = narrowed;
 scope. add ( narrowed ) ; break;
scope =  scope. mergeScope ( narrowed ) ;
 scope. detach ( narrowed);
 scope = narrowScope(scope, type); } else
scope =  scope. restrictByNotNull ( narrowed ) ;
 scope.edge(type, narrowed);
 scope = new FlowScope(scope, type, n, narrowed);
scope = narrowScope(scope, n); scope. narrow = narrowed ;
 scope = narrowedScope;
 scope = setJSType(scope, n, narrowed);
scope = narrowScope(scope, n); scope. restrictByNotNull ( narrowed);
scope = narrowScope(scope, n,  narrowed); scope. narrow ( narrowed )
scope = narrowScope(scope, narrowed); scope = scope ; narrowed = type
 scope = scope. restrictByNotNullOrnarrowScope(scope, n, narrowed);
 scope.set(n, narrowed);
 scope. addType ( narrowed )
scope =  scope. restrictByNonNullOrUndefined ;
 narrowed = type. narrow ( ) ;
 scope.getScope(shortName)= narrowScope(scope, n, narrowed);
 scope = scope. restrictByNotNullOrUndefined ; }
 scope.addSymbol(narrowed);
scope = narrowScope(scope, narrowed) break;
 scope.edge(n, narrowed);
scope = narrowScope(scope, scope, narrowed);
scope = narrowScope(scope, type, n, scope, narrowed);
 scope = scope. restrictByNotNullOrUndefined(); *
scope = narrowScope(scope, n, narrowed); } else { scope = scope ( n )
 scope = narrowScope(scope, n); } else { scope = scope ; } }
scope = narrowScope(scope, n); scope. narrow ( narrowed);
 scope = scope. replaceJSType(n, narrowed);
 scope = scope. add ( type, propName, narrowed);
scope = narrowScope ( scope, narrowed ;
 scope. detach ( ) ;
scope = narrowScope(scope, * narrowed);
scope = narrowScope(scope,  narrowed); scope = scope. narrow ( narrowed )
 scope. restrictByNotNullOrUndefined.narrowScope(scope, n, narrowed);
 scope. restrictByNotNullOrUndefinedAndnarrowScope(scope, n, narrowed);
 scope = new FlowScopeImpl(objType,scope, n, narrowed);
 scope. narrowed = narrowed;
 scope = narrowScope(scope, n); } } else { if (n!= n) { scope = n; *
 scope.addProperty(type, n, narrowed);
scope = narrowScope(scope, n, narrowed) ; } else { scope = narrowed
 scope = scope. addPropertyType ( propName, narrowed);
 scope = scope. narrow ( ) ; scope= narrowScope(scope, n, narrowed);
 scope = scope.withType(type);
 scope. setJSType(n, narrowed);
scope = narrowScope(scope, narrowed, type, n);
scope = narrowScope(scope, n,  narrowed); scope = narrowed ; break ; }
 scope. restrictByNotNullOrUndefined().narrowScope(scope, n, narrowed);
 scope = type.narrowScope(scope, n, narrowed);
 scope.addInferredProperty(narrowed);
 scope = scope. addProperty ( propName, narrowed);
 scope = scope. restrictByNotNullOrUndefined ( narrowed ) ; } else { scope = narrowed ; } *
 scope = scope. replace ( type, propName, narrowed);
 scope = scope.getScope(type);
 scope = narrowScope(scope, n, narrowed); } else { *
scope = narrowScope(scope, n,  narrowed); scope = scope ; narrowed = type
scope = narrowScope(scope, n, narrowed, type, constraint);
 scope = new FlowScopeImpl(scope, type, n, narrowed);
scope = narrowScope(scope, scope, narrowed, type, n);
scope = narrowScope(scope, n,  narrowed); scope = narrowed
 scope. restrictByNotNullOrUndefinedTonarrowScope(scope, n, narrowed);
 scope = narrowed ; } else { scope= narrowScope(scope, n, narrowed);
 scope = scope. restrictByNotNullOrUndefined(); }
 scope = scope. dereferencePointer(scope, n, narrowed);
scope = narrowScope(scope, n); scope. restrictByType ( narrowed);
scope = narrowScope(scope, scope, narrowed, n, type);
 scope. setPointer = narrowed;
 scope = scope. restrictByNotNullOrUndefined ( narrowed ) ; } else { scope = scope ; } *
scope = narrowScope(scope, type narrowed);
scope = narrowScope(scope, type, scope, n, narrowed);
 scope = scope. restrictByNotNullOrUndefined ( narrowed ) ; } else { scope = narrowed ; } }
scope = narrowScope(type, narrowed, scope, n, narrowed);
 scope.replaceType, narrowed);
scope = narrowScope(scope, n); scope. restrictBy ( narrowed )
 scope = scope. restrictByNotNullOrUndefined ( narrowed ) ; } else { scope = null ; } *
 scope.matchConstraint(type);
 scope = scope. inferPropertyTypesTonarrowScope(scope, n, narrowed);
 scope = scope. restrictByNonNull(type);
 scope = JSType.narrowScope(scope, n, narrowed);
scope = narrowScope(scope, type, narrowed, true);
 scope.getScope(type); scope= narrowScope(scope, n, narrowed);
 scope = (FlowScope) type.narrowScope(scope, n, narrowed);
 scope.addProperty (propName, n, narrowed);
 scope = scope. restrictByNotNullOrUndefined ( narrowed
 scope = scope. restrictByNotNullOrUndefined ( narrowed ) ; } else { scope = undefined ; } *
 scope.add(type, narrowed);
scope = narrowScope(scope, scope, propName, narrowed);
scope = narrowScope(scope,  narrowed); } else { scope = narrowed ; }
 scope = scope. addProperty ( propName, n, narrowed);
scope = narrowScope ( scope, narrowed ) ; } } }
 scope.addInferredPropertyType(narrowed);
 scope.addScope(n, narrowed);
 scope = scope. replace ( propName, n, narrowed);
scope = narrowScope(scope, n, narrowed) ; scope = narrowed. scope ;
 scope = scope. addReferenced ( n, narrowed);
 scope = (FlowScope) _narrowScope(scope, n, narrowed);
 scope.set(type, narrowed);
 scope.addSlice(n, narrowed);
 scope = scope. setPointer(n, narrowed);
 scope = scope.unwrap(type);
 scope.addProperty(type);
 scope.addProperty (propName, narrowed);
 extend(narrowed);
scope = narrowScope(scope, n, narrowed) || scope = narrowed ;
 scope = new FlowScope(objType.scope, n, narrowed);
 scope.replace(0, n, narrowed);
 scope = scope.replace (n, narrowed);
 scope = scope.replacePointer(narrowed);
scope = narrowScope(type, scope, scope, n, narrowed);
scope = narrowScopeOfType ( narrowed ) ;
 scope = narrowScope(scope, n); } else { scope = narrowed; *
scope = narrowScope(scope, n,  narrowed.getType ( ));
 scope.setType(type);
 scope = new FlowScope ( scope ) ; extend(scope, n, narrowed);
scope = narrowScopeScope ( scope ) ;
 scope = SyntacticScope#narrowScope(scope, n, narrowed);
 scope.scope(n)= narrowScope(scope, n, narrowed);
 scope = new FlowScope(scope, n, narrowed);
 scope = scope. setSlot(n, narrowed);
 scope. type = narrowed;
 scope = scope ; break ; } break;
 scope.addExpression(type);
 scope.pushPointer(narrowed);
 scope = scope. restrictByNotNullOrUnknown(scope, n, narrowed);
scope = narrowScope(scope, propName);
 scope = scope.replaceScope(type, narrowed);
 scope.addPropertyType(n, narrowed);
scope = narrowScopeScope ;
scope = narrowScope(scope, & narrowed);
 scope = new JSType(scope, n, narrowed);
 scope = scope. inferPropertyTypesInnarrowScope(scope, n, narrowed);
 scope = scope.addScope(type);
 scope. getScope ( )= narrowScope(scope, n, narrowed);
 scope.addExpression(n, narrowed);
scope = narrowScope(scope, scope, type, n, narrowed);
 scope = scope. addPointer(n, narrowed);
 scope = new FlowScope(scope, scope, n, narrowed);
 scope.addInferredType(narrowed);
 scope.addProperty(type, narrowed);
 scope = new FlowScopeImpl(objType, n, narrowed);
 scope.addRef(n, narrowed);
 scope = scope. replaceNode(n, narrowed);
 scope = scope. restrictByTypeInferred(narrowed);
 scope.addInferredProperty(n, narrowed);
 scope.addExpression(narrowed);
 scope. add ( narrowed ) ; return;
scope = narrowScope(scope, n, narrowed) scope = narrowed ;
 scope = new DereferencePointer(scope, n, narrowed);
scope = narrowScope(scope, type.name ( ), narrowed);
 scope = getJSTypeScope(scope, n, narrowed);
 scope. add ( type ) ; dereference(n, narrowed);
 setType(n, narrowed);
 scope = scope. restrictByNonNullOrEmpty(scope, n, narrowed);
 scope = new FlowScopeImpl(objType.scope, n, narrowed);
 scope = scope. replaceWith(n, narrowed);
 scope.setPointer(type, n, narrowed);
 scope.addNode(n);
 scope.addScope(scope); scope *= narrowScope(scope, n, narrowed);
 scope = scope. restrictByNonNullOrUnknown(scope, n, narrowed);
 scope = new FlowScope(type, scope, n, narrowed);
 scope = scope ; break outer;
scope . removeType();
scope = narrowScope(scope, n, narrowed) ; scope = scope ; break ; }
 scope = type ; scope = _narrowScope(scope, n, narrowed);
 scope.add (type, n, narrowed);
 scope.getScope(type)= narrowScope(scope, n, narrowed);
 scope = narrowScope(scope, n); } else { scope = n ; }
 scope.bind(n, narrowed);
 scope = scope.replace(type);
 scope = scope. applyDereferencePointer(scope, n, narrowed);
 scope.addScope(type);
 scope.scope(narrowed);
 scope.setType(narrowed);
 scope = scope.addPointer(narrowed);
scope = narrowScope(scope, n, propName, narrowed);
 scope.addScope(scope); scope |= narrowScope(scope, n, narrowed);
 scope = scope.withNarrowed(narrowed);
 scope = new FlowScopeImpl(type,scope, n, narrowed);
 scope = scope. setSlot(type, narrowed);
 scope.addMember(n, narrowed);
 scope. restrictBy = narrowed;
 scope.addPointer(type, n, narrowed);
scope = narrowScope(scope, narrowedType);
 scope.defineProperty(type, n, narrowed);
 scope.addReferencedProperty(narrowed);
 scope.addNode(n, narrowed);
 scope.append(type);
 extend(type);
scope =  extend(scope, n, narrowed);
 scope = scope. restrictBySymbol(narrowed);
scope = narrowScope(slider);
 scope = new DereferencePointerScope(scope, n, narrowed);
 setType(narrowed);
 scope.addSymbolRef(narrowed);
 extendPropertyTypes(scope, n, narrowed);
 scope = new FlowScope(this.scope, n, narrowed);
 scope = FlowScope#narrowScope(scope, n, narrowed);
 scope.push(_);
 scope = narrowScope(scope, n); narrowed= narrowScope(scope, n, narrowed);
 scope.remove(_);
 scope = scope. resolve ( propName, type, n, narrowed);
 scope = scope. replaceByPointer(n, narrowed);
 scope = narrowed ;
 scope.setProperty(type, n, narrowed);
 scope = scope. narrowScope ( )#narrowScope(scope, n, narrowed);
scope =  narrowed ; } break ;
scope = narrowScope(scope, n, narrowed) || scope;
scope = narrowScope(scope, narrowed); *
 scope. add ( type ) ; setType(n, narrowed);
 scope = new FlowScopeImpl(scope, n, narrowed);
scope = narrowScope(scope, n, type, narrowed, scope);
 scope = narrowedType;
 Scope scope = FlowScope.narrowScope(scope, n, narrowed);
 scope = IR.narrowScope(scope, n, narrowed);
 scope(type);
 scope = scope. addDereferencePointer(scope, n, narrowed);
 return dereferencePointer(scope, n, narrowed);
 scope = scope. narrowScope ( ) ;narrowScope(scope, n, narrowed);
 scope = new FlowScope(type, scope.scope, n, narrowed);
scope . detach ( )
 scope = scope. restrictByNullOrUnknown(narrowed);
 scope.add(_);
 scope = (FlowScope) unnarrowScope(scope, n, narrowed);
scope = narrowScope(scope,  scope, narrowed); break;
 scope = scope. restrictByNotNullAndnarrowScope(scope, n, narrowed);
 scope = scope. add ( propName, n, narrowed);
 scope = type. dereferencePointer(scope, n, narrowed);
 scope = scope. restrictByNonNulls(narrowed);
 scope = flowScope.narrowScope(scope, n, narrowed);
scope = narrowScope(scope, n,  narrowed), narrowed;
 scope.setType, narrowed);
 scope = scope. replacePointer(type, narrowed);
scope = narrowScope(scope, n, narrowed, type, scope);
 scope.set (type, n, narrowed);
 scope.addMember(type, n, narrowed);
scope = narrowScope(type, scope, narrowed, scope, n, narrowed);
 scope = new FlowScopeImpl(this.scope, n, narrowed);
 scope = scope. restrictByNonNullable(narrowed);
 scope = scope.withNewScope(narrowed);
 scope = scope.addInferredProperty(narrowed);
scope . remove ( )
 f(type);
 scope.append(narrowed);
scope = narrowScope(scope, n); scope = narrowed ; }
 scope = scope.withSlice(n, narrowed);
scope = narrowScope(scope, n,  narrowed).then(scope);
 scope = scope. addPropertyType ( n, narrowed);
scope = narrowScope(scope, n, narrowed, true);
scope = narrowScope(scope, n,  narrowed).break;
 scope = Utils.narrowScope(scope, n, narrowed);
 scope = Util.narrowScope(scope, n, narrowed);
 scope =! narrowed;
scope = narrowScopeScope ( scope, narrowed )
 scope[0]= narrowScope(scope, n, narrowed);
 scope.addScope(scope); scopeScope= narrowScope(scope, n, narrowed);
 scope = scope. replaceWithSlice(n, narrowed);
scope = narrowScope(scope, n, narrowed) || narrowed;
 scope = new ConditionalFlowScope(scope, n, narrowed);
 extendJSType(scope, n, narrowed);
scope = narrowScopeScope ( scope, narrowed);
scope =  scope ; break ; }
 scope = scope. restrictByTypeReference(narrowed);
 scope = scope. addInferredPropertyType(scope, n, narrowed);
scope = narrowScope ( scope, narrow ) ;
 scope = extendPointer(scope, n, narrowed);
 scope.break(_);
 scope = setJSTypeScope(scope, n, narrowed);
 scope = scope. replaceInferredPropertyTypes(scope, n, narrowed);
scope = narrowScope(scope, n, narrowed, type, narrowed);
scope . push narrowed ;
 scope. add ( type ) ; setScope(n, narrowed);
scope = narrowScope(objType, scope, scope, n, narrowed);
 scope. getScope ( narrowed )= narrowScope(scope, n, narrowed);
 scope = scope. replace ( type + ".", narrowed);
scope = narrowScope(scope, n, narrowed, scope);
scope = narrowScope(scope, node, propName, narrowed);
 scope = extendJSType(scope, n, narrowed);
 scope = Type.narrowScope(scope, n, narrowed);
scope = narrowScope(scope, n, narrowed) ; scope = narrowScope ;
 extendScope(scope, n, narrowed);
scope = narrowScope(scope, narrowed
 scope = new FlowScope(type.scope, n, narrowed);
 scope = (FlowScope) newnarrowScope(scope, n, narrowed);
 scope = (FlowScope) getnarrowScope(scope, n, narrowed);
 scope = Reflect.narrowScope(scope, n, narrowed);
scope = narrowScope(jstype, type, scope, n, narrowed);
 scope. add ( type ). setType(n, narrowed);
 scope *= narrowScope(scope, n, narrowed);
 scope = newScope;
scope = narrowScope(scope, objType, n, narrowed);
 scope.throw(_);
 scope = scope. inferPropertyTypesFromnarrowScope(scope, n, narrowed);
 scope = scope. replaceWith ( type, n, narrowed);
 scope = scope. inferPropertyTypesFornarrowScope(scope, n, narrowed);
scope = narrowScope(scope, objType, narrowed);
scope = narrowScope(scope.getScope(type);
 scope[n]= narrowScope(scope, n, narrowed);
 scope = narrowScope(scope); *
 scope = mergePropertyTypes(scope, n, narrowed);
 extendPointer(scope, n, narrowed);
 extendType(scope, n, narrowed);
 scope = extendPropertyTypes(scope, n, narrowed);
 scope = new FlowScope(type, narrowed.scope, n, narrowed);
 scope = scope. setScope ( type,!narrowed);
 scope = narrowScope(scope); }
scope = narrowScope(scope, type, constraint, n, narrowed);
scope =  narrowed ; }
scope = narrowScope(scope, n, narrowed) || scope. narrowScope ;
 scope = scope. replaceInferredPropertyType(scope, n, narrowed);
 scope.scope()= narrowScope(scope, n, narrowed);
 scope.(narrowed);
 scope = new FlowScope(type, narrow_scope, n, narrowed);
scope = narrowScope(scope, scope.scope ( ), narrowed);
 scope.add (, narrowed);
scope = narrowScope(scope, propName, n, narrowed);
scope = narrowScope ( scope )
scope = narrowScope(scope, - narrowed);
 scope = - 1;
 scope(narrowed);
 scope = createDereferencePointer(scope, n, narrowed);
scope = narrowScope(scope, n, narrowed, true, false, true);
scope = narrowScope(scope, n, narrowed, true, false, false);
scope = narrowScope(scope, n), narrowed;
scope = narrowScope(scope), narrowed;
scope = narrowScope(scope, n) ;
 scope = scope. replaceNode(type, n, narrowed);
 scope = new DereferenceFlowScope(scope, n, narrowed);
scope = narrowScope(type, narrowed);
scope = narrowScope(type, objType, scope, n, narrowed);
 return getPropertyType(scope, n, narrowed);
scope = narrowScope(scope), narrowed);
scope = narrowScope(scope, n, narrowed, type.getType());
 scope |= narrowScope(scope, n, narrowed);
 setType(scope, n, narrowed);
 scope = narrowed; } scope= narrowScope(scope, n, narrowed);
 scope = scope. replace ( type. nameofn, narrowed);
scope = narrowScope(type, propName, scope, n, narrowed);
 setJSType(scope, n, narrowed);
scope = narrowScope(type, propName, n, narrowed);
 scope = unnarrowScope(scope, n, narrowed);
scope = narrowScope(scope, n, narrowed); }
 return scope, n, narrowed);
scope = narrowScope(scope, n, narrowed, false);
scope =  narrowed. owner ;
 scope = narrowed ; } else
 scope = new UnnarrowScope(scope, n, narrowed);
 scope = new DereferenceSymbolScope(scope, n, narrowed);
scope = narrowScope(scope, n, narrowed) ; break ; }
 scope = extendPointers(scope, n, narrowed);
scope = narrowScope(type, scope, scope, scope, n, narrowed);
scope = narrowScope(scope, n, narrowed, propName, type);
 scope.add(", narrowed);
scope =  narrowed ; return ;
scope = narrowScope(scope, n, narrowed, type); }
 scope = new FlowExpression(scope, n, narrowed);
 return extend(scope, n, narrowed);
scope = narrowScope(scope, n, narrowed, type.name ( ));
scope = narrowScope(scope, n, scope, narrowed);
scope = narrowScope(scope, n, type, constraint, narrowed);
scope = narrowScope(scope, n, narrowed) + narrowed;
 return (type);
scope = narrowScope(scope, n, narrowed) || scope. narrowScope();
scope =  extendScope(scope, n, narrowed);
scope = narrowScope ( narrow ) ;
 merge(scope, narrowed);
 merge(scope, n, narrowed);
scope = narrowScope(scope, n, narrowed, type.length ( ));
 scope = dereferenceSymbolProperty(scope, n, narrowed);
 JSType
scope = narrowScope(scope), narrowed
scope = narrowScope(scope, n, narrowed); *
 return type.narrowScope(scope, n, narrowed);
scope = narrowScope(scope, n, scope, propName);
scope = narrowScope(scope, n, narrowed) || scope = narrowed ; }
 scope.scopeContext= narrowScope(scope, n, narrowed);
 extendPropertyType(scope, n, narrowed);
 extendScope(n, narrowed);
scope = narrowScope(scope, n, narrowed, true, false);
scope = narrowScope(scope, n, narrowed, true, true);
 scope = new Scope(scope, n, narrowed);
scope = narrowScope(scope, n, narrowed, propName, scope);
scope = narrowScope(type, scope, n, scope, n, narrowed);
 scope = narrowed; }
scope = narrowScope(scope, n) || narrowed;
scope = narrowScope(scope,  narrowed); scope = narrowed; *
 extendProperties(scope, n, narrowed);
scope = narrowScope(scope, n, narrowed, propName, constraint);
 scope = scope ; } else
scope = narrowScope(scope, n, narrowed, propName, true);
scope = narrowScope(flowScope, scope, n, narrowed);
 scope = narrowed; else
 extend(type, n, narrowed);
 extendType(n, narrowed);
scope = narrowScope(scope, n, narrowed) break;
 break; } else {
 scope = new DereferencePointerImpl(scope, n, narrowed);
 return scope; }
 scope.addProperty(scope, n, narrowed);
 break; }
 rewrite(scope, n, narrowed);
 scope = newnarrowScope(scope, n, narrowed);
scope = narrowScope(scope, n), narrowed);
 scope = narrowed ; } }
scope = narrowScope ( expanded ) ;
 merge(type, narrowed);
scope = narrowScope ( narrowed));
scope = narrowScope(flowScope, n, narrowed);
 inferType(scope, n, narrowed);
 inferProperty(scope, n, narrowed);
 extendPointers(scope, n, narrowed);
 scope.replace(, n, narrowed);
 scope &= narrowScope(scope, n, narrowed);
 scopeScope(narrowed);
scope = narrowScope(slided);
 return new FlowScope(scope, n, narrowed);
scope = narrowScope(scope, scope, objType, narrowed);
 definePropertyType(scope, n, narrowed);
 assignType(n, narrowed);
scope = narrowScope(n, narrowed);
 pushScope(narrowed);
scope = narrowScope ( )
 return inferPropertyTypes(scope, n, narrowed);
scope = narrowScope(scope, null, n, narrowed);
scope = narrowScope(scope); *
 extendScope, narrowed);
 scope.addnarrowed);
 extendScope, n, narrowed);
 expand(narrowed);
 extend type, narrowed);
scope = narrowScope(scope); }
 addProperty(n, narrowed);
scope = narrowScope(scope, n); break;
scope = narrowScope(scope, n, narrowed, refs);
scope = narrowScope(type, scope);
 scope.owner= narrowScope(scope, n, narrowed);
 return inferPropertyType(scope, n, narrowed);
 scope = extendPropertyScope(scope, n, narrowed);
 scope = scope ; } }
scope = narrowScope(scope, n) break;
 scope = __narrowScope(scope, n, narrowed);
 expand(scope, n, narrowed);
 type = narrowed;
scope =  mergeScope(scope, n, narrowed);
scope = narrowScope(scope narrowed);
scope = narrowScope ; }
 scope =
 return type, n, narrowed);
scope =  expandScope(scope, n, narrowed);
 dereference(scope, n, narrowed);
 scope.prototype= narrowScope(scope, n, narrowed);
 narrow(scope, n, narrowed);
 return type, narrowed);
 scope.parent= narrowScope(scope, n, narrowed);
 resolve(narrowed);
 widen(scope, n, narrowed);
 extend scope, n, narrowed);
 return (narrowed);
scope =  narrowed break ;
scope = narrowScope(span, narrowed);
 (scope, n, narrowed);
 type.narrowScope(scope, n, narrowed);
scope = narrowScope(slaned);
 expand(n, narrowed);
 shrink(scope, n, narrowed);
scope = narrowScope(slashed);
 extend (, narrowed);
scope = narrowScope(opScope, n, narrowed);
 rewrite(n, narrowed);
 scope = narrowed ; *
scope =  narrowScope ;
scope = narrowScope(scope, type);
scope  = narrowed();
 Scope.narrowScope(scope, n, narrowed);
 merge(n, narrowed);
scope = narrowScope scope ;
scope = narrowScopeImpl ;
 shrink(n, narrowed);
scope = narrowScope(scope, n, type narrowed);
 shrink(_);
scope = narrowScope(scope, n, narrowed
 break;);
scope =  extendPropertyType(scope, n, narrowed);
scope = narrowScope(scope, propertyName, narrowed);
scope = narrowScope(scope, n, objType);
scope = narrowScope(scope, n, propertyType);
scope =  narrowed. scope
scope = narrowScope(scope, n, propertyName);
scope = narrowScope(scope, n); }
 break; } *
 break(_);
scope =  narrowed ; break
 extend(_);
 scope = narrow;
scope = narrowScope(scope, n); *
 scope.
 varScope= narrowScope(scope, n, narrowed);
 builder.narrowScope(scope, n, narrowed);
scope = narrowScope(scope, n, narrowed, objType);
 var = narrowed;
scope = narrowScope(fScope, n, narrowed);
 expandScope(scope, n, narrowed);
scope  += narrowed ;
scope = narrowScope(scope, refScope, narrowed);
scope = narrowScope(factory, scope, n, narrowed);
 return ; }
 this.
scope =  merge(scope, n, narrowed);
scope = narrowScope(scope, n, narrowedType);
 break;
scope =  narrow(scope, n, narrowed);
scope = narrowScope(type);
scope = narrowScope(jScope, n, narrowed);
scope = narrowScope(refs, scope, n, narrowed);
scope  += narrowed
 JSTree
scope = narrowScope(refScope, scope, n, narrowed);
scope = narrowScope(scope, typeName, narrowed);
scope = narrowScope(scope, n, narrowed, propertyType);
scope = narrowScope(scope, n, narrowed, propertyName);
scope  -= narrowed
scope = narrowScope(scope, n, narrowed) return;
scope  = narrow
 return narrow;
scope = narrowScope(Scope);
scope = narrowScope(scope, n,  narrow);
scope = narrowScope(scope, n,  type);
scope  narrowed ;
 return type;
scope =  rewrite(scope, n, narrowed);
scope = narrowScope(scope, n,  narrowed;
scope =  expand(scope, n, narrowed);
 throw narrowed;
scope = narrowScope(Type, scope, n, narrowed);
scope =  widened ;
scope = narrowScope(scope, node, narrowed);
scope = narrowScope(type, n, narrowed);
 break outer;
scope = narrowScope(scope, n, narrowed, null);
 *
scope = narrowScope(Scope, n, narrowed);
scope = narrowScope(scope, null, narrowed);
scope = narrowScope(this, scope, n, narrowed);
scope = narrowScope(span);
scope = narrowScope(root, n, narrowed);
scope = narrowScope(scope, n, widened);
scope && narrowScope(scope, n, narrowed);
scope = narrowScope(scope, n, narrower);
scope -> narrowScope(scope, n, narrowed);
 #
