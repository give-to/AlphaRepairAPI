case SYNTHETIC_BLOCK_PROP: return "synthetic";
case SYNTHETIC_BLOCK_PROP: return  "block";
 case IS_SYNTHETIC_BLOCK_PROP: return "synthetic";
 case SYnthetic: return "synthetic";
 case SYnthetic_PROP: return "synthetic";
 case Synthetic: return "synthetic";
 case SYnthetic_NAME: return "synthetic";
 case SYNTHETIC_PROP: return "synthetic";
 case SYNTAX_PROP: return "synthetic";
 case Symbol: return "synthetic";
 case SYNTHETIC_SYNTHETIC_BLOCK_PROP: return "synthetic";
case SYNTHETIC_BLOCK_PROP: return  "syntotic_block";
 case SYNTAX: return "synthetic";
 case SYNTHON_PROP: return "synthetic";
 case SYNETIC_PROP:return "synthetic";
 case SYNTHETIC_NAME: return "synthetic";
 case SYNTHETIC_OR_SYNTHETIC_BLOCK_PROP: return "synthetic";
 case SYNTHETETIC_SYNTHETIC_BLOCK_PROP: return "synthetic";
case SYNTHETIC_BLOCK_PROP: return  "synthic_block";
 case _SYNTHETIC_BLOCK_PROP: return "synthetic";
 case SYNCHRONOUS_PROP: return "synthetic";
 case synthetic: return"synthetic";
case SYNTHETIC_BLOCK_PROP: return  "symbol";
 case SYNTAX_NAME: return "synthetic";
 case SYNTHETIC:return "synthetic";
 case SYnthetic_PROPERTY: return "synthetic";
case SYNTHETIC_BLOCK_PROP: return  "syntoticblock";
case SYNTHETIC_BLOCK_PROP: return  "syntaxblock";
 case SYNTHONIC_PROP: return "synthetic";
 case SYNCHRONIC_NAME: return "synthetic";
 case SYNTAX_PROPERTY: return "synthetic";
case SYNTHETIC_BLOCK_PROP: return  "syntoticic_block_name";
case SYNTHETIC_BLOCK_PROP: return  "synthotic_block_props";
 case SIDE_EFFECT_SYNTHETIC_BLOCK_PROP: return "synthetic";
 case SYNCHRONOUS_PROPERTY: return "synthetic";
 case SYNCHRONIC_PROP: return "synthetic";
case SYNTHETIC_BLOCK_PROP: return  "synthologic_block_name";
case SYNTHETIC_BLOCK_PROP: return  "synthetic_block_props";
case SYNTHETIC_BLOCK_PROP: return  "syntolicblock";
case SYNTHETIC_BLOCK_PROP: return  "syntactic_block";
case  EMPTY:
 case SYNETIC_NAME: return "synthetic";
 case SYNTHIC_SYNTHETIC_BLOCK_PROP: return "synthetic";
case SYNTHETIC_BLOCK_PROP: return  "synthotic_block_properties";
case SYNTHETIC_BLOCK_PROP: return  "synthotic_block_name";
 case SYNTAX_SYNTAX: return "synthetic";
case SYNTHETIC_BLOCK_PROP: return  "syntholicblock";
case  BLOCK:
 case SYNTHONIZED: return "synthetic";
case SYNTHETIC_BLOCK_PROP: return  "synchronized";
 case IS_SYNTHETIC:return "synthetic";
 case SYNTHETIC_AND_SYNTHETIC_BLOCK_PROP: return "synthetic";
 case SYNCHRONIC_PROPERTY: return "synthetic";
 case SYNTHONYMIC_SYNTHETIC_BLOCK_PROP: return "synthetic";
 case Symbol_PROP:return "synthetic";
 case SYNETIC:return "synthetic";
 case DEFAULT_SYNTHETIC_BLOCK_PROP: return "synthetic";
 case EMPTY_NAME;
 case SIDE_EFFECTIVE_SYNTHETIC_BLOCK_PROP: return "synthetic";
 case IS_SYnthetic: return "synthetic";
 case SYNTHONETIC_SYNTHETIC_BLOCK_PROP: return "synthetic";
 case IS_SYNTHETIC_SYNTHETIC_BLOCK_PROP: return "synthetic";
 case SYNTHETETIC: return "synthetic";
 case COMPUTED_PROP: return "computed";
 case SYNETIC_SYNETIC: return "synthetic";
 case SIDE_EFFECTED_SYNTHETIC_BLOCK_PROP: return "synthetic";
 case SYNThetic:return "synthetic";
case SYNTHETIC_BLOCK_PROP: return  "synonyms";
case  IS_BLOCK:
 case SYNTHON_SYNTHETIC_BLOCK_PROP: return "synthetic";
 case COMMENTING_PROP: return "commenting";
 case SYN_PROP: return "synthetic";
 case STRING_PROP: case IS_SYNTHETIC_BLOCK_PROP: return "synthetic";
 case STRING_PROP: return "string";
 case SYNIC:return "synthetic";
case  NAME_PROP:
 case SYNC:return "synthetic";
 case SYntheticPROP: return "synthetic";
case  EMPTY_STRING: return "empty";
 case SYNOPS:return "synthetic";
 case SYNTHON_SYNTHON: return "synthetic";
case SYNTHETIC_BLOCK_PROP: return  "symbolblock";
 case EXTENDED_PROP: return "extended";
 case NAME_PROP:
 case SYNTHONIC_OR_SYNTHETIC_BLOCK_PROP: return "synthetic";
 case SYNONYM: return "synthetic";
 case SYNETIC_PROPS:return "synthetic";
 case SYNETIC_STRING: return"synthetic";
 case COMMENTED_PROP: return "commented";
 case SYNTHETIC_BLOCK_SYNTHETIC_BLOCK_PROP: return "synthetic";
 case STRING_PROP:
 case STRING_PROP: return "strings";
 case CLASS_NAME:
case  EMPTY_PROP: return "empty";
case  STRING_PROP:
 case BLOCK:
 default: return "unknown_property";
 case COMMENTING_PROP: return "comment";
 case COMPUTED_PROP: return "comp";
 return "opt_arg_name;
 case SYNTHETIC: case _SYNTHETIC_BLOCK_PROP: return "synthetic";
 case SCRIPT_PROP: case IS_SYNTHETIC_BLOCK_PROP: return "synthetic";
 case STRING: return "string;
 case SYNOPSIS: return "synthetic";
 case SYNETIC_PROP: #"synthetic";
 case Synthesized: return "synthetic";
 case SIDEEFFECT_SYNTHETIC_BLOCK_PROP: return "synthetic";
case SYNTHETIC_BLOCK_PROP: return  "symblock";
 case EXTENDED_PROP: return "extended_props";
 case ANONYMOUS_SYNTHETIC_BLOCK_PROP: return "synthetic";
 case STRING:
 case EXTENDED_PROP: return "extended_prop";
 default: return "unknown_props";
 case EMPTY;
case SYNTHETIC_BLOCK_PROP: return  "synthblock";
 case COMPUTED_PROP: return "compute_props";
 case COMMENT: return "comment;
 case SYntheticNAME: return "synthetic";
 case EXTENDED_PROP: return "extended_property";
case  EMPTY_STRING_PROP:
 case CLASS_PROP:
 case SYNTIC: return"synthetic";
case  EMPTY_PROP:
 case COMMENT_PROP: return "comment_property";
 case COMPUTED_PROP: return "compute_properties";
 case COMPUTED_PROP: return "computeable";
 case COMPUTED_PROP: return "computed_props";
case SYNTHETIC_BLOCK_PROP: return  "cyclic";
 case EXTENSION_SYNTHETIC_BLOCK_PROP: return "synthetic";
case SYNTHETIC_BLOCK_PROP: return "synthetic" or "empty_block";
 case SYNTHETICSYNTHETIC_BLOCK_PROP: return "synthetic";
 case COMPUTED_PROP: return "compute";
case SYNTHETIC_BLOCK_PROP: return "synthetic" or "no_synthetic";
 case COMPUTED_PROPS: return "compute_properties";
 case EMPTY_STRING: return "empty;
 case EXTENDED_BLOCK:
 default: return "unknown property";
 case COMPUTED_PROP: return "compute_property";
 case COMPUTED_PROP: return "compute_prop";
 case SUPPORTED_SYNTHETIC_BLOCK_PROP: return "synthetic";
 case COMMENTING_PROP: return "commenting_props";
case  EMPTY_STRING:
 case EMPTY_NAME: return "empty;
 case NULL: return "null;
case SYNTHETIC_BLOCK_PROP: return "synthetic" block_properties;
 default: return "unknown_prop";
case SYNTHETIC_BLOCK_PROP: return "synthetic" or "synthetic_block";
 case EXTENDED_PROP: return "ended";
 case EMPTY_LIST;
 case EMPTY_STR;
case SYNTHETIC_BLOCK_PROP: return "synthetic" or "no_synthetic_block";
 case SYnthetic:
 case SYNTICES: return"synthetic";
case SYNTHETIC_BLOCK_PROP: return "synthetic" case "block" :
case  COMMENTING_PROP:
case  IS_BLOCK: return "block";
 case EMPTY_GROUP: return "empty;
 case EMPTY_TEXT;
case  EMPTY_NAME: return "empty";
 case TYPE_NAME:
case SYNTHETIC_BLOCK_PROP: return  "syncblock";
 case EMPTY_STR: return "empty;
 case BLOCK_NAME;
 case COMPUTED_BLOCK_PROP:
 case EXTENDED: return "extended";
 case SYNTHETIC_CALL_SYNTHETIC_BLOCK_PROP: return "synthetic";
case SYNTHETIC_BLOCK_PROP: return "synthetic" + "synthetic_block";
 default: return "unknown_proto";
 case EXTENDED_PROP: return "extended_property_name";
 case SYNTHETIC.SYNTHETIC_BLOCK_PROP: return "synthetic";
 case SYNETIC_STRING: #"synthetic";
case SYNTHETIC_BLOCK_PROP: return "synthetic" or "no_block";
 case SYNTHETIC_CODE_SYNTHETIC_BLOCK_PROP: return "synthetic";
 case EXTENDED_PROP: return "extended_prop_name";
 default: return "unknown_type";
 case SYnthetic_PROPS:return "synthetic";
 case COMPUTED_PROPS: return "compute_properties";
 case SYnthetic_PROP: #"synthetic";
 case COMPUTED_PROP: return "compute_procedure";
 case SYNTHETIC,SYNTHETIC_BLOCK_PROP: return "synthetic";
case  EXTENDED: return "extended";
 case SYNTHETIC|SYNTHETIC_BLOCK_PROP: return "synthetic";
 case STRING_PROP: return "str";
case  STRICT_BLOCK:
 case EXTENDED_PROP: return "extended_props";
case SYNTHETIC_BLOCK_PROP: return "blocks";
 case EMPTY_LINE: return "empty;
 case MEMBER_SYNTHETIC_BLOCK_PROP: return "synthetic";
case  EMPTY_NAME_PROP:
 case COMPUTED_PROP: return "computed_prop"; case COMPUTED_PROP: return "computed";
 case COMPUTED_PROP: return "compute_properties";
 case COMPUTED_PROP: return "computed_prop"; case COMPUTED_STRING: return "string";
case  NAME:
 case COMPUTED_PROP: return "compute_props";
 case DEFAULTS_SYNTHETIC_BLOCK_PROP: return "synthetic";
 case STRING_PROPS: return "string";
 case EXTENDED_BLOCK: return "extended_block";
case SYNTHETIC_BLOCK_PROP: return "synthetic" block_property;
 case SYNTHETIC_PROP::return "synthetic";
 case COMPUTED_PROP: return "computed_property"; default: return "unknown_property";
case SYNTHETIC_BLOCK_PROP: return "sync";
 case COMPUTED_PROP: return "computed_property"; case COMPUTED_PROP: return "computed";
case SYNTHETIC_BLOCK_PROP: return "synthetic" + "block_name";
 case STRING_NAME:
 case EMPTY:return "synthetic";
 case COMPUTED_BLOCK: return "compute_block";
 case COMPUTED_PROP: return "compute_prop_name";
 case COMPUTED_PROP: return "computed_props";
 case COMPUTED_PROP: return "computed_property"; default: return "unknown property";
 case EXTENDED_PROP: return "extended_prop";
 case EXTENDED_PROP: return "extended_props"; default: return "unknown_props";
 case COMPUTED_PROP: return "computed_prop"; case EXTENDED_PROP: return "extended_prop";
 case COMPUTED_PROP: return "computed_prop"; case COMPUTED_PROP: return "computedprop";
 case COMPUTED_PROP: return "computed_prop"; default: return "unknown_prop";
 case COMPUTED_PROP: return "compute_prop";
 case SINGLE_SYNTHETIC_BLOCK_PROP: return "synthetic";
 case COMPUTED_PROP: return "computed_prop"; default: return "unknown property";
 case COMPUTED_PROP: return "computed_property"; case COMPUTED_PROP: return "property";
 case OPTION_SYNTHETIC_BLOCK_PROP: return "synthetic";
 case COMPUTED_PROP: return "computed_property"; case COMPUTED_PROP: return "computedproperty";
case  EMPTY_NAMESPACE:
 case EMPTY_STRING;
 case COMPUTED_PROP: return "computed_prop"; case COMPUTED_PROP: return "computeprop";
 default: return "unknown_name";
 case COMPUTED_PROP: return "computed_prop"; case COMPUTED_PROP: return "prop";
 case SYnthetic_PROP::return "synthetic";
 case COMPUTED_PROP: return "computed_property"; case COMPUTED_PROPS: return "properties";
case SYNTHETIC_BLOCK_PROP: return "synthetic" case "blocked";
 case COMPUTED_PROPS: return "computeproperties";
 case COMPUTED_BLOCK_NAME:
case  NO_BLOCK:
 case COMPUTED_PROP: return "computed_prop"; default : return "unknown_props";
case SYNTHETIC_BLOCK_PROP: return "synthetic" or "synthetic_block_name";
 case COMPUTED_PROP: return "computed_prop"; case COMPUTED_PROPS: return "properties";
 case COMPUTED_PROP: return "computed_prop"; default: return "unknown_property";
 case COMPUTED_PROP: return "computed_property"; case COMPUTED_PROP: return "computedprop";
case  EMPTY_STRING_NAME:
 case EXTENDED_SYNTHETIC_BLOCK_PROP: return "synthetic";
 case COMPUTED_PROP: return "computed_prop"; case COMPUTED_PROPS: return "computed";
 case EXTENDED_PROP: return "extended_property";
case SYNTHETIC_BLOCK_PROP: return  block;
 case COMPUTED_PROP: return "computed_property"; case COMPUTED_PROPS: return "computed";
 case EMPTY_CHAR: return "char;
 else return "unknown_arg";
 case COMPUTED_PROP: return "computed_prop"; case COMPUTED_PROP: return "compute";
 case EXTENDED_PROP: return "extended_prop"; case COMPUTED_BLOCK_PROP:
 case COMPUTED_PROP: return "computed_property"; case COMPUTED_BLOCK_NAME:
 case COMPUTED_BLOCK: return "computed_blocked";
case  COMPUTED_NAME: return "component";
 case EXTENDED_PROP: return "extended_props"; case COMPUTED_BLOCK_NAME:
 case EXTENDED_PROP: return "extended_prop"; case COMPUTED_PROP: return computed;
 default: return "unknown";
case  EMPTY_NAME:
 case EXTENDED_PROP: return "extended_prop"; case BLOCK:
 case EMPTY_NAME: return "emptyname;
 case EMPTY_GROUP: return "emptygroup;
case  EMPTY_PROP: return empty;
 case EXTENDED_NAME: return "extended;
 case EXTENDED_PROP: return "extended_property"; case CLASS_NAME:
 case EXTENDED_PROP: return "extended_prop"; case EXTENDED_PROP: return "ext";
 case STRICT:return "synthetic";
case  EMPTY_PROPS:
 case EXTENDED_PROP: return "extended_property"; case BLOCK:
case  COMPUTED_NAME: return "name";
 case STRING_TYPE:
 case EXTENDED_PROP: return "extended_prop"; case CLASS_NAME:
case  STRING:
 case DEFAULTED_SYNTHETIC_BLOCK_PROP: return "synthetic";
case  COMPUTED_NAME: return "comp";
 case COMPUTED_PROP: return "computed_props"; case COMPUTED_BLOCK_NAME:
 case COMPUTED_PROPS: { return "computed_properties"; } return "computedproperties";
 case COMPUTED_PROP: return "computed_property"; case COMPUTED_PROPERTY_NAME:
 case empty_arg;
case  COMMENTING_BLOCK:
 case SyntheticName: return "synthetic";
 case PROP:
case SYNTHETIC_BLOCK_PROP: return "blocking";
 case EXTENDED_PROP: return "extended_prop"; case STRING:
 case COMPUTED_PROP: return "compute_prop"; case BLOCK:
case SYNTHETIC_BLOCK_PROP: return "synthetic"block_name";
 case EXTENDED_PROP: return "extended_prop_name";
 case EXTENDED_PROP: return "extended_prop"; default: return "unknown";
 case COMPUTED_PROP: return "computed_prop"; default: return "unknown";
 case SYnthetic_PROP: returns"synthetic";
 case NAME_NAME:
 case EMPTY_PROP;
 return "opt_arg_name";
 case EXTENDED_PROP: return "extended_property"; case TYPE_NAME:
 case EXTENDED_PROP: return "extended_property"; case STRING:
case  NEWBLOCK:
case  EMPTY_STRING: return "";
 case EXTENDED_PROP: return "extended_property"; case STRICT_MODE:
 case COMPUTED_PROP: return "compute_prop; case BLOCK:
 case COMPUTED_PROP: return "computed_property"; default: return "unknown property";
 case EXTENDED_PROP: return "extended_property"; case STRING_TYPE:
 case COMPUTED_PROP: return "computed_property"; case STRING_TYPE:
 case EMPTY_SET: return "emptyset;
 case STRICT:
 case COMPUTED_PROP: { return "computed_property"; } return "computed property";
 case STRICT: return "strrict;
 case COMPUTED_PROP: return "computed_prop"; default: return "unknown property";
 case STRING:return "synthetic";
case SYNTHETIC_BLOCK_PROP: return  "";
 case COMPUTED_PROP: return "computed_property"; case COMPUTED_PROP: return computed;
 case COMPUTED_PROP: return "computed_property"; case EMPTY_PROP:
 case EXTENDED_PROP: return "extended_property"; case STRING_NAME:
 case COMPUTED_PROP: return "computed_prop"; case COMPUTED_PROP: return computed;
 case EXTENDED_PROP: return "extended_prop"; case STRICT:
 case COMPUTED_PROP: { return "computed_property"; } return "computedProperty";
case  EMPTY_STRING_LIST:
 case COMPUTED_PROPS: { return "computed_properties"; } return "computeproperties";
 case COMPUTED_PROPS: return "compute_all_props";
case  EXTENDED_NAME_NAME:
 case COMPUTED_PROP: return "computed_property"; case STRING_NAME:
 case STRING: return "strings;
 case STRICT: return "str;
case SYNTHETIC_BLOCK_PROP: return "synthetic" or "no_synthetic_blocks";
 case COMPUTED_PROP: return "computed_property"; case EMPTY_STRING:
 case COMPUTED_PROP: return "compute_procedure";
 case EXTENSIONS_SYNTHETIC_BLOCK_PROP: return "synthetic";
case SYNTHETIC_BLOCK_PROP: return  null;
 case COMPUTED_PROP: return "computed_prop_name";
 return "opt_argname;
 case STRING: return "str;
case  NO_NAME:
 case COMPUTED_PROP: return "compute_policies";
 case SYNTHETIC::return "synthetic";
 case BLOCK;
 default: return "unknown";
 case NAME_TYPE:
 case COMPUTED_PROP: return "computed_prop"; default: return "unknown type";
 case EMPTY_PROP: break;
case  STRING_NAME:
 case COMPUTED_PROP: return "computed_property"; case EMPTY_NAME:
 case COMPUTED_PROP: return "compute_prop"; case EMPTY:
 case NON_SYNTHETIC_BLOCK_PROP: return "synthetic";
 case STATIC:
case SYNTHETIC_BLOCK_PROP: return "synthetic" or "block_name";
 case COMPUTED_PROP: return "computed_prop"; default: return "unknown";
case SYNTHETIC_BLOCK_PROP: : return "syntotic_block";
case SYNTHETIC_BLOCK_PROP: return  "syntoticic_block_name;
 case COMPUTED_PROP: return "computed_property"; default: return "unknown";
 case COMPUTED_PROP: return "computed_prop"; case EMPTY_NAME:
 case COMPUTED_PROP: return "computed_property"; case EMPTY_CLASS:
 case COMPUTED_PROP: return "comp",
 case COMPUTED_PROP: return "computed_prop"; default : return "unknown"; }
 case COMPUTED_PROP: return "compute_property"; case EMPTY:
case  CASE:
case SYNTHETIC_BLOCK_PROP: return "synthicblock";
case  NAME_NAME:
 case EMPTY_STRING_NAME;
 case COMPUTED_PROP: return "computed_property"; default: return "unknown_property");
 case empty_string;
 case COMPUTED_PROP: return "compute_prop; case EMPTY:
case SYNTHETIC_BLOCK_PROP: return "synthetic" + "block_properties";
 case COMPUTED_PROP: return "compute_proto_proto";
 case EXTENDED_PROP: return "extended_props"; default : return "unknown_props;
 case NAME: return"synthetic";
case SYNTHETIC_BLOCK_PROP: return "synthetic" + "synthetic_blocks";
case SYNTHETIC_BLOCK_PROP: return  symbol;
case SYNTHETIC_BLOCK_PROP: return  "synthotic_block_name;
 case COMPUTED_PROP: return "computed_property"; case COMPUTED_PROP: return computed();
 case COMPUTED_PROP: return "computed_prop"; default : # fall through.
 default: return "";
case SYNTHETIC_BLOCK_PROP: : return "synthic_block";
 case COMPUTED_PROP: return "compute_prop"; case BLOCK:
 case Synthetic: #"synthetic";
case SYNTHETIC_BLOCK_PROP: return  "synthotic_block_properties;
 case COMPUTED_BLOCK_TYPE:
 case COMPUTED_PROP: return "compute;";
 case empty_name;
 case COMPUTED_PROP: return "compute_procedure;"
 case COMPUTED_PROP: return "compute;",
 case COMPUTED_PROP: return "compute_prop(props);
 case COMPUTED_BLOCK: return "computed_block"; case NULL:
 case empty_args;
 case SYNETIC: return +"synthetic";
 case SYNETIC: return '"synthetic";
case  IS_NULL:
 case SYnthetic: return '"synthetic";
case SYNTHETIC_BLOCK_PROP: return  "synthotic_block_properties;"
 case SYnthetic: #"synthetic";
 case COMPUTED_PROPS: return "compute_all_procs";
 case COMPUTED_PROP: return "compute_procedure;
 case COMPUTED_PROP: return "compute_prop"; case NO_OP:
case  STRICT:
 case COMPUTED_BLOCK: return "computed_block"; case None:
 case COMPUTED_PROPS: return "computeproperties;
 case COMPUTED_PROP: return "compute_prop_name;"
 case SYNTAX: return +"synthetic";
 case SYNTICES: #"synthetic";
 case COMPUTED_PROP: return "compute_props;
 case SYnthetic: returns"synthetic";
case SYNTHETIC_BLOCK_PROP: { return "syntoticblock";
 case ISSYNTHETIC_BLOCK_PROP: return "synthetic";
 case synthetic: #"synthetic";
 case Synthetic: returns"synthetic";
case  UNKNOWN:
 case USE_SYNTHETIC_BLOCK_PROP: return "synthetic";
 default: break;
case SYNTHETIC_BLOCK_PROP: return "synthetic" or "no_synthetic_block");
 default : return "unknown_property"; }
 case STRING;
case SYNTHETIC_BLOCK_PROP: return "synthetic" or "no_synthetic_block".
 case ISNULL: return "synthetic";
case SYNTHETIC_BLOCK_PROP: return  "syntotic_block;"
case SYNTHETIC_BLOCK_PROP: return  "syntotic_block;
case SYNTHETIC_BLOCK_PROP:  : return "syntoticblock";
 case CLASS:return "synthetic";
 default: #return "synthetic";
 case COMPUTED_PROP: return "compute_policies;
 case COMPUTED_PROP: return "compute_procedure;
 case OPT_SYNTHETIC_BLOCK_PROP: return "synthetic";
 case SYSTEM: return "synthetic";
case SYNTHETIC_BLOCK_PROP: return "synthetic" or "no_synthetic");
 default : return "unknown"; }
 case SYNC return"synthetic";
 case __SYNTHETIC_BLOCK_PROP: return "synthetic";
case  TEXT:
 case Symbol:
case  NULL:
 case EXT_SYNTHETIC_BLOCK_PROP: return "synthetic";
case SYNTHETIC_BLOCK_PROP: return  empty;
 default: #"synthetic";
case  COMMENTING_BLOCK;
case SYNTHETIC_BLOCK_PROP:  return "private";
 case SPECIAL:return "synthetic";
 default: return "unknown_props"; }
case  CODE:
 case COMPUTED_BLOCK_NAME;
case SYNTHETIC_BLOCK_PROP: return "synthetic" case "block" {
 case COMPUTED_PROP: return "compute_prop"; case NO_OP;
 case COMPUTED_PROP: return "compute_prop"; case NO_OP,
 case UNSYNTHETIC_BLOCK_PROP: return "synthetic";
 case CLASS:
 case COMPUTED_PROP: return "compute_prop"; case NO_OP":
 case *SYNTHETIC_BLOCK_PROP: return "synthetic";
 case Symbol::"synthetic";
case SYNTHETIC_BLOCK_PROP: return  "syntoticblock;"
 case NAME:
case SYNTHETIC_BLOCK_PROP: return "synthetic" in block;
case SYNTHETIC_BLOCK_PROP: return  "syntoticblock;
case SYNTHETIC_BLOCK_PROP: return "synthetic" case "blocked":
case  COMMENTING_BLOCK,
case SYNTHETIC_BLOCK_PROP: return  "syntotic_block"; or
case SYNTHETIC_BLOCK_PROP: return  "synthetic_block"; or
case SYNTHETIC_BLOCK_PROP: return  "synthic_block"; or
 case Symbol:"synthetic";
case SYNTHETIC_BLOCK_PROP: return "synthetic" case "blocked");
case SYNTHETIC_BLOCK_PROP: return "synthetic" or "synthetic_block"; or
case SYNTHETIC_BLOCK_PROP: return  "synthomatic_block"; or
case SYNTHETIC_BLOCK_PROP: : return "syntotic_block;"
case SYNTHETIC_BLOCK_PROP: : return "syntotic_block",
case SYNTHETIC_BLOCK_PROP: return  "synthotic_block"; or
case SYNTHETIC_BLOCK_PROP: : return "syntotic_block;
 # break;
case SYNTHETIC_BLOCK_PROP: return "synthetic" property;
case SYNTHETIC_BLOCK_PROP: return "synthetic" or "synthetic_block" or
case SYNTHETIC_BLOCK_PROP: {break};
 case!"synthetic";
case SYNTHETIC_BLOCK_PROP: return "synthetic" or "empty_block"; or
case SYNTHETIC_BLOCK_PROP_NAME:
 # default;
case  IS_NULL;
case SYNTHETIC_BLOCK_PROP: return "synthetic" if "empty_block"; or
case SYNTHETIC_BLOCK_PROP: return "synthetic" if "empty_block"; else
 case null;
case SYNTHETIC_BLOCK_PROP: return "synthetic" if "empty_block"; otherwise
case SYNTHETIC_BLOCK_PROP:  : return "synthetic_block"; #
 # switch;
case SYNTHETIC_BLOCK_PROP: return "synthetic" or "no_block"; or
case SYNTHETIC_BLOCK_PROP:  return "syntoticic_block"; or
case SYNTHETIC_BLOCK_PROP:  : return "synthomatic_block"; #
case SYNTHETIC_BLOCK_PROP:  : return "synthotic_block"; #
case SYNTHETIC_BLOCK_PROP: return "synthetic" in case:
case SYNTHETIC_BLOCK_PROP(s):
case SYNTHETIC_BLOCK_PROP: return "synthetic" properties;
 case :"synthetic";
 case syntheticreturn "synthetic";
 case non"synthetic";
case SYNTHETIC_BLOCK_PROP: return "synthetic" in case;
case SYNTHETIC_BLOCK_PROP(...):
 break;
 case not"synthetic";
case SYNTHETIC_BLOCK_PROP(.*):
 case Symbolreturn "synthetic";
case SYNTHETIC_BLOCK_PROP: return "synthetic" in case of
case SYNTHETIC_BLOCK_PROP(name);
 break; }
 #...return "synthetic";
case SYNTHETIC_BLOCK_PROP: return "synthetic" properties,
case SYNTHETIC_BLOCK_PROP: {
case SYNTHETIC_BLOCK_PROP: return "synthetic" properties.
case SYNTHETIC_BLOCK_PROP: #
case SYNTHETIC_BLOCK_PROP: return "synthetic" properties:
case SYNTHETIC_BLOCK_PROP: -
case SYNTHETIC_BLOCK_PROP:  {}
case SYNTHETIC_BLOCK_PROP:  {};
case SYNTHETIC_BLOCK_PROP:  {},
 },
 break:
case SYNTHETIC_BLOCK_PROP, return "synthetic";
case SYNTHETIC_BLOCK_PROP(): return "synthetic";
 }
