reportCodeChange ( ) ;
 return n;
reportCodeChange(n, arrayNode, foldedSize);
reportCodeChange(n);
reportCodeChange() return n;
reportCodeChange(n, foldedStringNode);
reportCodeChange(n, foldedSize);
 else { arrayFoldedChildren = null;
reportCodeChange(n, arrayNode, foldedSize ) ; }
reportCodeChange(n, arrayNode, foldedStringNode);
reportCodeChange() ( n, arrayNode, foldedSize ) ;
reportCodeChange(n, arrayNode);
 n = node;
 else { arrayFoldedChildren = arrayNode;
 arrayFoldedChildren = null;
 if (arrayNode == null) {
 else { arrayFoldedChildren. remove ( );
 else { arrayFoldedChildren. remove(0);
 else { arrayNode.removeChild(n);
 if (foldedSize > originalSize) break;
 originalSize = 0;
 arrayNode = null;
reportCodeChange(n, arrayNode, foldedSize, right);
 if (arrayFoldedChildren.size() == arrayNode.getChildCount()) { return n;
 if ( foldedSize > originalSize )
 n. detach ( ) ;
reportCodeChange(n, arrayNode, right);
 if (arrayFoldedChildren.size() == arrayNode.getChildCount()) {
 else { arrayFoldedChildren = [ ];
 else { arrayNode.remove(0);
 arrayNode.detachChildren();
 if (n == arrayNode) { return n;
 if (arrayFoldedChildren.size() == originalSize)
 if (arrayFoldedChildren.size() == 0)
 if (arrayFoldedChildren. isEmpty ( ) ) { n. setParent ( null ) ;
 if (arrayFoldedChildren. isEmpty ( ) ) { n. removeChild ( ) ;
 if (arrayFoldedChildren. isEmpty ( ) ) { n. detach ( ) ;
 return n);
reportCodeChange(n, arrayNode); if (continue) {
 if (arrayFoldedChildren. hasNext ( ) ) { arrayFoldedChildren.
 if (foldedSize == 0)
 if (arrayFoldedChildren. hasNext ( ) ) { arrayFoldedChildren = arrayNode ;
 if (arrayFoldedChildren.size() > originalSize)
reportCodeChange(n, arrayNode, foldSize);
 else { arrayNode.removeChild(node);
 if (arrayFoldedChildren.size() == arrayNode.getChildCount()) { n =
 if (arrayFoldedChildren == null) break;
 if (arrayFoldedChildren.size() == originalSize) {
 if (foldedSize > 0)
 if (arrayFoldedChildren. hasNext ( ) ) { arrayFoldedChildren = [ ] ;
 else { arrayNode.detachChildren();
 else { arrayFoldedChildren. remove(0;
 if (arrayFoldedChildren == null) { n = arrayNode ;
 if (arrayFoldedChildren.size() == arrayNode.getChildCount()) return n;
 if (arrayFoldedChildren. isEmpty ( ) ) { n. setParent ( arrayNode ) ;
 if (foldedSize < 0)
 if (arrayFoldedChildren) return n;
 if (arrayFoldedChildren.size() == arrayNode.getChildCount()) { n;
 if (n == arrayNode) return n;
 if (arrayFoldedChildren. isEmpty ( ) ) { n. removeChild ( arrayNode ) ;
 if (arrayFoldedChildren.size() == arrayNode.getChildCount()) { n.
 else { n. removeChild ( n ) ; n. detach ( ) ;
 if (arrayNode == null)
 if (arrayFoldedChildren.size() == arrayNode.size())
 if (foldedSize) { return n;
 else { n. removeChild ( n ) ; n. remove ( ) ;
 if (break) {
 if (arrayFoldedChildren == arrayNode)
 else { n. removeChild ( n ) ; } n. detach ( ) ;
 if (arrayFoldedChildren. isEmpty ( ) ) { n. removeChild ( ) ; } else {
 } else { n. removeChild ( n ) ; } } else { n. removeChild ( n ) ; n. remove ( ) ;
 if (arrayFoldedChildren. isEmpty ( ) ) { n. setParent ( null, null ) ;
 if (arrayFoldedChildren == null) { return n;
 } else { n. removeChild ( n ) ; } } else { n. removeChild ( n ) ; n. detach ( ) ;
 else { arrayFoldedChildren. add( n);
 if (arrayFoldedChildren.size() == arrayNode.getChildCount()); n.
reportCodeChange(n, arrayNode); return n;
 if (arrayFoldedChildren.size() == arrayNode.getChildren())
 if (arrayFoldedChildren.size() == arrayNode.getChildCount()); n =
 if (arrayFoldedChildren. isEmpty ( ) ) { n. setParent ( null, n ) ;
 if ( n == arrayNode ) {
 if (arrayFoldedChildren. isEmpty ( ) ) { n. setParent ( null, arrayNode ) ;
 if (arrayFoldedChildren == null) {
 if (arrayFoldedChildren.size() == arrayNode.getChildCount() {
 else { n. removeChild ( n ) ; n. removeParent ( ) ;
 else { arrayNode.addChild(n);
 if (arrayFoldedChildren.size() == originalSize) { return n ; }
reportCodeChange() ( n, foldedSize ) ;
 else { n. removeChild ( n ) ;
 else { n. addChildToBack ( node ) ; } } else { n. addChildToBack ( ) ;
 if (arrayFoldedChildren == arrayNode.children)
 } else { n. removeChild ( n ) ; } } else { n. removeChild ( n ) ; } } else { n.
 } else { n. removeChild ( n ) ; n. detach ( ) ;
reportCodeChange(n, arrayNode ) ; }
 if (arrayFoldedChildren. isEmpty ( ) ) { n. setParent ( null ) ; } else {
 if (arrayFoldedChildren. isEmpty ( ) ) { n. setParent ( null ) ; return n ;
 else { arrayNode.remove(n);
 if (arrayFoldedChildren == null) { n. detach ( ) ;
 else { n. addChildToBack ( node ) ; } } else { n. removeChildFromBack ( ) ;
 if (foldedSize > originalSize;
 if (arrayFoldedChildren!= null) {
 if (arrayFoldedChildren.size == 0)
 if (arrayFoldedChildren.size() == arrayNode.length)
 if (n == arrayNode)
 if (arrayNode!= null) {
 } else { n. addChildToBack ( node ) ; } } else { n. addChildToBack ( arg1 ) ;
 if (foldedSize) {
 n. removeChild ( ) ;
 if (n == arrayNode) { return n();
 else { arrayNode.addChildBack(n);
 if ( n == arrayNode ) { n = arg1 ;
 if (arrayFoldedChildren. isEmpty ( ) ) { n. removeChild ( ) ; return n ;
 if (arrayFoldedChildren!= null) { arrayFoldedChildren;
 else { arrayFoldedChildren.remove(n);
 else { n. addChildToBack ( n. clone ( ) ) ; }
 else { arrayNode.remove(node);
 else { n. removeChild ( ) ;
 if (arrayFoldedChildren.size() > 0)
 if (arrayFoldedChildren!= null) { arrayFoldedChildren.
 else { n. removeChild ( n ) ; n. removeChild ( ) ;
reportCodeChange(n, arrayNode, foldedSize));
reportCodeChange(n, arrayNode); } }
 } else { return n ; } } else { n = n. clone ( ) ; if ( n == null ) return null ;
 if (arrayFoldedChildren == arrayNode.getChildren()) {
 if (n == null) {
 if ( n!= null ) {
 else { n. addChildToBack ( node ) ; } if ( n == null ) { n = new Node();
 else { n. addChildToBack ( node ) ; } } else { n. addChildToBack ( n);
 else { arrayFoldedChildren.clear();
 } else { n. addChildToBack ( node ) ; } } else { n. addChildToBack ( node ) ; }
 else { arrayNode.removeChildFromBack();
 else { n. addChildToBack ( node ) ; } } else { n. addChildToBack ( node )
 n.setParent(null);
 n = arrayFoldedChildren;
 if (arrayFoldedChildren == arrayNode.getChildren() {
reportCodeChange(); if (break) {
 else { return n ; } } else { n = n. clone ( ) ; if ( n == null ) { return null ;
 if (arrayFoldedChildren == null);
 } else { return n ; } } else { n = n. clone ( ) ; } if ( n!= null ) {
 if (foldedSize > originalSize);
 n. remove ( ) ;
 if (arrayFoldedChildren == null) { return n; }
 if (arrayNode!= null) { n.
 } else { return n ; } } else { n = n. clone ( ) ; } if ( n == null ) {
reportCodeChange() ( n, arrayNode, foldSize ) ;
 if (arrayFoldedChildren == arrayNode) {
 if (arrayFoldedChildren. isEmpty ( ) ) { n. removeChild ( ) ; n.
 else { arrayNode.removeChildToBack();
 else { arrayFoldedChildren = arrayNode);
reportCodeChange(); if (continue) {
reportCodeChange() return arrayNode; default:
 if (arrayFoldedChildren == arrayNode.children) {
 n. getParent();
 } else { return n ; } } else { n = n. clone ( ) ; if ( n == n ) return n ;
 else { return n ; } } else { n = n. clone ( ) ; if ( n == n ) { return n ;
 foldedSize = 0;
 arrayNode.removeChild(n);
 if (arrayFoldedChildren == arrayNode.getChildrenCount()); n =
reportCodeChange(n, foldedArrayNode);
 if (arrayFoldedChildren == arrayNode.children())
 } else { return n ; } } else { n = n. clone ( ) ; if ( n == n ) return null ;
 if (arrayNode!= null) n.
 if (arrayFoldedChildren == null) n =
 n. setParent ( null ) ;
 if (! fold ) {
reportCodeChange() return n ; case 2: case 3:
 else { arrayNode.removeChild();
 if (arrayNode == null);
 else { arrayFoldedChildren.unlink();
 else { arrayNodes.remove(n);
 if (n == null)
 if (arrayFoldedChildren. isEmpty ( ) ) { n. setParent ( null ) ; }
reportCodeChange() return arrayNode.getParent();
 } else { n. removeChild ( n ) ; } } else { n. removeChild ( n ) ; } } else { n =
reportCodeChange() return n ; } else { break ; }
 if (continue) {
 if (arrayFoldedChildren. isEmpty ( ) ) { n. removeChild ( ) ; } }
 if (true) {
 arrayNode.detach();
 arrayNode.remove(0);
reportCodeChange(); return n;
 n = arrayNode ;
 if (foldedSize > 0);
 if (arrayNode == null) {
 if (arrayFoldedChildren) break;
 } else { n. removeChild ( n ) ; } } else { n. removeChild ( n ) ; } } } } }
 if ( n == arrayNode )
 n.remove();
 if (arrayFoldedChildren == null) n.
reportCodeChange(); return arrayNode ; default :
 if (n == arrayNode) break;
 if (arrayNode == null) break;
 n.break();
 } else { n. addChildToBack ( node ) ; } } else { n. addChildToBack ( arg1 ) }
reportCodeChange() ( n, arrayNode, mergedSize )
 n. setParent ( null )
 arrayNode.addChild(n);
reportCodeChange() return arrayNode ; case 2: case 3:
 n = null;
 arrayNode.remove();
 node. detach ( ) ;
 n.setParent(n);
reportCodeChange() return n; }
 arrayNode.cleanUp();
reportCodeChange() return arrayNode ; case 2: default:
 else { arrayNode = arrayNode;
 if (! collapse ) {
 if (arrayFoldedChildren == null) n;
 else { arrayFolded = null;
reportCodeChange(n, foldedStringNode); }
 if (break)
 else { arrayN.detachChildren();
 } else { n. removeChild ( n ) ; } } else { n. addChild ( n ) ; } } } } }
 arrayNode.detachAllChildren();
 while (true)
 else { arrayFoldedChildren.removeLast();
 if (arrayFoldedChildren. isEmpty ( ) ) { n. setParent ( null ) ; return n.
 n.detachChildren();
 arrayFoldedChildren --;
 node.getParent = null;
 if (continue)
 if (n == arrayNode) { return();
 n.getParent = null;
reportCodeChange(n, foldSize);
 n.detachAllChildren();
reportCodeChange(arrayFoldedChildren);
 if (n!= null) n.
 if (arrayNode) return n;
reportCodeChange() return originalSize;
 else { arrayNode.detach();
 if (true) { return n;
 arrayNode.removeChildren();
 else {
 if (done)
 if (foldedSize < 0);
 else { arrayFoldedChildren --;
 n.addChild(node);
 else { arrayFoldedChildren = array.children();
reportCodeChange() return arrayNode ; case 2 : break ; }
 else { n. removeChild ( n )
 if (n == n)
reportCodeChange() ( n, arrayNode, folded ) ; }
 if (! folding ) {
 n.remove(0);
reportCodeChange() return arrayNode ; case 2: {
reportCodeChange(n, unfoldedSize);
 if (n == arrayNode).break();
 else { arrayFoldedChildren = array.reverse();
 arrayNode.removeChild();
 n.push(node);
 arrayNode.setChildCount();
 n.detachFirstChild();
 } else { return n ; } } else { n = n. clone ( ) ; if ( n!= null ) { }
 if (found) {
 } else { return n ; } } else { n = n. clone ( ) ; if ( n == null ) { }
 else { arrayFoldedChildren = null ; clear();
reportCodeChange(); return n; }
 n = n. getParent();
 if (foldedSize > original);
 return fold(n);
 n.setParent();
 if (true)
 if ( result!= null )
 } else { return n ; } } else { n = n. clone ( ) ; if ( n == null ) { #
 n.popNode();
reportCodeChange ( ) ; default :
 return(n);
 else { arrayNode.clearChildren();
 if (end) {
 while (true);
 } else {
 if (n == null);
reportCodeChange() return arrayNode;
 n = right;
 n.append(right);
 arrayFolded = false;
reportCodeChange(n, foldedSize); }
reportCodeChange(newArrayNode);
 else { arrayNode.removeChildren();
 n = arrayFoldedNode;
reportCodeChange ( n, arrayNode ) ; } else
reportCodeChange() return arrayNode; }
 assertCodeChange(();
reportCodeChange ( ) ; }
 n = r;
 foldSize = 0;
 n.recycle();
 arrayNode.clear();
 n.
 foldedSize += 1;
reportCodeChange(); return n ; } }
 n.append(left);
 n. removeNode();
 arrayFoldedChildren clear;
reportCodeChange() return arrayNode ; } }
 if (continue)
reportCodeChange(arrayNode); }
 while (true)
 n. detachChild();
reportCodeChange(); return arrayNode ; } }
reportCodeChange() return n ; case 2 : { }
reportCodeChange(n); }
(n);
 n = root;
 n.pop();
reportCodeChange(n, result);
reportCodeChange() return arrayNode ; } default : {
 foldedSize ++;
 n.reset();
reportCodeChange() return null;
 assert(true);
reportCodeChange ( ) ; } }
reportCodeChange() return n; } }
reportCodeChange() return originalSize ; }
 arrayNode;
reportCodeChange() return arrayNode ; case 2 : }
reportCodeChange(); } else {
reportCodeChange(); return n ; } default : {
 break; }
reportCodeChange() return n ; } default : {
 node.
 if (success)
 if (!continue)
reportCodeChange() return n ; } default : }
reportCodeChange() return arrayNode.getParent;
 return fold(node);
reportCodeChange() break;
 reportChange();
 assertCodeChange();
reportCodeChange() } else {
 n;
 if (emptyNode);
reportCodeChange() break; }
 } }
 arrayNode.
reportCodeChange(false); } }
reportCodeChange(true); } }
 } n.
 n =
 } } }
reportCodeChange(true);
reportCodeChange(node);
reportCodeChange ( true )
 default :
reportCodeChange(node); }
reportCodeChange(true); }
 while (true){
reportCodeChange ( n )
reportCodeChange() } }
 reportChanges();
(node);
reportCodeChange(false); }
 updateCost();
reportCodeChange() } else
 (break);
reportCodeChange(false);
 closeNode();
 return node;
 } else
 ++ i;
 checkChildren();
 ++ n;
 } break;
reportCodeChange(); else
 }
reportCodeChange() }
 else
reportCodeChange ( )
 }
 ;
 else
;
