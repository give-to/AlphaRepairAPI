for (Node node : arrayFoldedChildren) {
for (Node node ) {
 for (node : arrayFoldedChildren) {
for (Node  node)
for (Node node :  arrayNode) {
for (Node node :  arrayNode. getChildren ( ) ) {
for (Node node : arrayFoldedChildren)  { if (node) {
 if (arrayNode!= null) {
for (Node node : arrayFoldedChildren)  { if (node!= null) {
for (Node node : arrayFoldedChildren)  { if (node!= null)
 for ( AstNode node : arrayFoldedChildren) {
for (Node node : arrayFoldedChildren ) { if ( node!= n ) {
 if (arrayNode.addChildToBack) {
for (Node node : arrayFoldedChildren ) { if ( node!= n )
for (Node node : arrayFoldedChildren)  { if (node)
 if (arrayNode.hasChild(node)){
 case 2: for(Node node : arrayFoldedChildren) {
for (Node node: arrayNode.nodes) {
for  ( Node node : arrayNodes ) {
 if (arrayNode.hasChild(node) {
 return n; case 2: Node arrayFoldedChildren = arrayNode.remove(0); if (arrayFoldedChildren!= null) {
 return n; case 2: Node arrayFoldedChildren = arrayNode.remove(0); if (arrayFoldedChildren!= null)
 if (arrayFoldedChildren!= null) for(Node node : arrayFoldedChildren) {
for (Node  node of arrayFoldedChildren) {
 if (node!= null) {
 if (arrayFoldedChildren!= null) {
 if (arrayFoldedChildren.size() > originalSize) {
for (Node node :  arrayNode. getChildList ( ) ) {
 return n; case 2: Node arrayFoldedChildren = arrayNode.remove(0); if (arrayFoldedChildren) {
for (Node node : arrayFoldedChildren)  { if (node instanceof ArrayNode) {
for (Node node :  arrayFoldedChildren)
 if (arrayNode.addChildToBack()) {
 if (arrayFoldedChildren.size > 0) {
for (Node node :  arrayNode. children ( ) ) {
 if (arrayFoldedChildren.size() > originalSize) { return n; }
 return n; case 2: Node arrayFoldedChildren = arrayNode.remove(0);
 return n; case 2: Node arrayFoldedChildren = arrayNode.remove(0); if (arrayFoldedChildren)
 if (arrayFoldedChildren.size() > 0) {
 return n ; case 2: Node arrayFoldedChildren = arrayNodes.remove(0); if (arrayFoldedChildren) {
for (Node node :  arrayNode ) { if ( node!= n )
 if (arrayNode.hasChild(node))){
 if (arrayNode!= null) { n =
 if (arrayFoldedChildren) { for(Node node : arrayFoldedChildren) {
 if (arrayFoldedChildren.size() == originalSize) { return n; }
 if (arrayFoldedChildren) {
 return n ; case 2: Node arrayFoldedChildren = arrayNodes.remove(0); if (arrayFoldedChildren)
 if (arrayNode instanceof Node) {
 if (arrayNode!= null) { return n;
for (Node node : arrayFoldedChildren ) { arrayNode. remove ( node ) ;
for (Node node : arrayFoldedChildren)  { if (node instanceof ArrayNode)
 if (arrayFoldedChildren.size() > originalSize) {
 if (arrayFoldedChildren.size() == originalSize) {
 synchronized (arrayFoldedChildren) {
 return n; case 2: Node arrayFoldedChildren = arrayNode.getChildren().remove(0); if (arrayFoldedChildren)
 if (foldedSize > originalSize) { return n; }
 if (arrayFoldedChildren.size() == originalSize) {
 if (arrayNode!= null && arrayNode!= n) {
 if (arrayNode!= null) { return n; }
for (Node node of arrayNode.getChildren ( )) {
for (Node node: arrayNode.getChildren(...)) {
for (Node node : arrayFoldedChildren ) { if ( node == arrayNode ) {
 return n; case 2: Node arrayFoldedChildren = arrayNode.getChildren(0);
 if (arrayFoldedChildren!= null)
 if (arrayFoldedChildren.size() == 0) {
 } else{
 if (arrayFoldedChildren.size() > originalSize) return n;
for (Node node :  arrayNodes) { if (node) {
 if (arrayFoldedChildren.size() > 0)
 if (foldedSize > originalSize for (Node node : arrayFoldedChildren) {
 return n ; case 2: Node arrayFoldedChildren = arrayNode.remove(0); case 3:
for (Node node : arrayFoldedChildren)  { if (node!= null) break;
for (Node node : arrayFoldedChildren)  { if (node!= null) { n =
for (Node node of arrayNode.getChildren(...)) {
for (Node node :  arrayNode. getChildNodes ( ))
for (Node  node: arrayNode.getChildren())) {
 if (arrayFoldedChildren!= null?node : arrayFoldedChildren) {
 if (arrayNode.getChildren()==arrayFoldedChildren) {
 break; default: for(Node node : arrayFoldedChildren) {
 while (arrayFoldedChildren.size() > 0) {
 break; for(Node node : arrayFoldedChildren) {
 return n ; case 2: Node arrayFoldedChildren = arrayNode.remove(0); if (arrayNode) {
 if (arrayFoldedChildren.size() == originalSize) return n;
 if (arrayFoldedChildren) {
 return n; case 2: Node arrayFoldedChildren = arrayNode.children();
 if (arrayFoldedChildren.size() > originalSize) { return n;
 if (arrayFoldedChildren.size() > 0) {
for (Node  node: arrayNode.children())) {
 while (arrayFoldedChildren.size() > 0)
 if (arrayFoldedChildren.size() == originalSize) { return
for (Node node: arrayNode) if (node!= n) {
 if (arrayFoldedChildren)
 if (arrayFoldedChildren.size() == originalSize) { return n;
 if (foldedSize > originalSize) for(Node node : arrayFoldedChildren) {
 if (arrayNode!= null) { if (arrayNode)
 if (arrayNode instanceof Branch){
 return n ; case 2: Node arrayFoldedChildren = arrayNodes.remove(0); if (arrayNode) {
for (Node node : n) {
for (Node node : arrayFoldedChildren)  { arrayNode.removeChild(node);
for (Node node : arrayFoldedChildren ) { if ( node == n ) {
for (Node node of arrayNode.nodes) {
for (Node  node: arrayNode)
 return n; case 2: Node arrayFoldedChildren = arrayNode.getChildren();
for (Node  node : nodes) {
 return n ; } else { arrayFoldedChildren = arrayNode. getChildren ( ) ;
for (Node node : arrayFoldedChildren)  { if (node instanceof String) {
for (Node node: arrayNode.children(...)) {
 case 2:
 return n; case 2: Node arrayFoldedChildren = arrayNode.remove(0, n);
 if (arrayFoldedChildren.size() == 0)
 return n ; case 2 : Node arrayFoldedChildren = arrayNode. remove ( ) ;
 if (arrayFoldedChildren.size() < originalSize) {
 if (arrayFoldedChildren.size() == 1)
for (Node  node : array) {
 if (arrayFoldedChildren.size == 1) {
 if (arrayNode.isChildOfBack()) {
 if (arrayNode.addToBack) {
for  ( Node node : arrayNodeList ) {
 for ( final AstNode node : arrayFoldedChildren) {
for (Node node : arrayFoldedChildren ) { arrayNode. detach ( ) ;
for (Node node: arrayNode.childList) {
 return n; case 2: Node arrayFoldedChildren = arrayNode.remove(0, originalSize);
 if (arrayFoldedChildren == null) { return n; } else {
 if (arrayNode.addChild()) {
 while (node!= null){
for (Node node :  arrayNode ) { if ( node ) {
 return n ; case 2: Node arrayFoldedChildren = arrayFoldedChildren;
 break; case 2: Node arrayNode; for(Node node : arrayFoldedChildren) {
 if (arrayFoldedChildren) for(Node node : arrayFoldedChildren) {
for (Node node : arrayFoldedChildren ) { if ( node instanceof Node ) {
 return n ; case 2: Node arrayFoldedChildren = arrayNode.remove(0); case 3: {
for (Node node of arrayNode.childList) {
 break; case 2: Node arrayNode = n;
 if (arrayFoldedChildren.size() > originalSize) { return
for (Node node of arrayNode.children(...)) {
 if (foldedSize > originalSize &&!arrayFoldedChildren) {
 if (foldedSize > 0) {
 break; default:
 return n ; case 2: Node arrayFoldedChildren = arrayNode.remove(0, 1);
 return n ; case 2: Node arrayFoldedChildren = arrayNode;
 if (arrayNode.hasChild())){
 return n ; case 2: Node arrayFoldedChildren = arrayNode.remove(0); if (true) {
for (Node node :  arrayNode. getChildren ( ))
 if (arrayNode!= null && arrayNode!= n)
 return n ; case 2: Node arrayFoldedChildren = arrayNode.remove(0); if (arrayNode)
for (Node node : arrayNode.getChildList(...)) {
for (Node node of arrayNode.getChildList ( )) {
for (Node node of arrayNode.getChildList(...)) {
for (Node node :  arrayNodes) { if (node)
 if (arrayNode.addChildToBack())
 if (arrayNode.childToBack) {
 return n ; case 2: Node arrayFoldedChildren = arrayNodes.remove(0, n);
 if (arrayNode.hasChilds) {
 break; case 2: for (Node node: arrayFoldedChildren) {
for (Node  node of arrayNode) {
 if (arrayFoldedChildren.isEmpty(0)) {
 while (arrayNode!= null) {
for (Node node : arrayNode.getChildren(n)) {
 break; case 2: Node arrayNode = arrayNode;
 if (arrayNode!= null) { node =
 return n ; case 2: Node arrayFoldedChildren = arrayNode.remove(0); {
 if (arrayNode.hasChildren())){
 if (foldedSize) { for(Node node : arrayFoldedChildren) {
 return n; case 2: Node arrayFoldedChildren = arrayFoldedChildren.remove(0); case 3: {
 return n ; case 2: Node arrayNode = n;
 if (arrayFoldedChildren!= null && ArrayNode node : arrayFoldedChildren) {
 if (arrayNode.isChild (node) {
 if (arrayNode instanceof ArrayNode){
for (Node node in arrayFoldedChildren) {
 if (arrayFoldedChildren.size() == 1) {
 if (arrayNode.addChildToBack)
 if (arrayNode.getChildCount()==arrayFoldedChildren) {
 return n ; case 2: Node arrayNode = arrayNode;
 return n; case 2: Node arrayFoldedChildren = arrayNode.getChildren().remove(0) ;
for (Node node : arrayFoldedChildren)  { if (node!= null) { node =
 if (foldedSize > originalSize?node : arrayFoldedChildren) {
 if (arrayNode instanceof Array){
for (Node node : arrayFoldedChildren)  { if (node == n) break; else
for ( Node node : arrayNodes ) { n =
 if (foldedSize < originalSize for (Node node : arrayFoldedChildren) {
for (Node arrayNode) {
 break; } for ( AstNode node : arrayFoldedChildren) {
 if (arrayNode!= null)
 if (foldedSize > originalSize && (node : arrayFoldedChildren) {
 if (arrayNode.hasChildCount()){
 if (arrayNode instanceof List){
 if (arrayNode!= null) { return
 if (foldedSize > originalSize? null: arrayFoldedChildren) {
 } } for ( AstNode node : arrayFoldedChildren) {
 if (arrayFoldedChildren.size() > originalSize) { break }
 if (arrayFoldedChildren == null?node : arrayFoldedChildren) {
 if (arrayFoldedChildren.size() > originalSize) { break };
 if (foldedSize > originalSize? n: arrayFoldedChildren) {
 if (arrayNode instanceofarrayFoldedChildren) {
 if (node!= null)
 if (arrayNode.hasChild (node))
 if (arrayNode.hasChild()) {
for  (Node node: n)
 if (arrayFoldedChildren!= null) break;
 if (arrayFoldedChildren.size()) {
 break; case 2: Node arrayNode = null;
 if (foldedSize < originalSize) for(Node node : arrayFoldedChildren) {
 } } for (Node node: arrayFoldedChildren) {
 return n ; case 2: Node arrayFoldedChildren = n;
 return n ; case 2: Node arrayFoldedChildren = arrayNode.getChildren().remove(0); {
 if (append) {
 if (arrayNode.getChildren()!=arrayFoldedChildren) {
 for (Node arrayNode:arrayFoldedChildren) {
 return n; case 2: Node arrayFoldedChildren = arrayNode.getChildren().remove(0); default:
 case 2: default: for(Node node : arrayFoldedChildren) {
 if (arrayFoldedChildren.remove(node : arrayFoldedChildren) {
for (Node node : arrayFoldedChildren. values ( ) ) {
 if (node instanceofarrayFoldedChildren) {
 if (arrayFoldedChildren.isEmpty?node : arrayFoldedChildren) {
 return n; } for(Node node : arrayFoldedChildren) {
 if (foldedSize > 0 for (Node node : arrayFoldedChildren) {
 break; }
for  (Node node : nodes)
 if (arrayNode!=arrayFoldedChildren) {
 while (node!= null)
 break; case 2: Node arrayNode;
 return n ; case 2: Node arrayFoldedChildren = null;
 if (foldedSize > 0) for(Node node : arrayFoldedChildren) {
 if (arrayFoldedChildren!= null? null: arrayFoldedChildren) {
 for ( Node fnode : arrayFoldedChildren) {
 if (arrayFoldedChildren!= null? subnode : arrayFoldedChildren) {
 if (arrayFoldedChildren!= null && AstNode node : arrayFoldedChildren) {
 case 2: default:
 if (arrayNode!= null) { if (array) {
 } for ( final AstNode node : arrayFoldedChildren) {
 if (arrayFoldedChildren!= null? arraynode : arrayFoldedChildren) {
 if (arrayNode.getChild (0)arrayFoldedChildren) {
 if (arrayFoldedChildren).for(Node node : arrayFoldedChildren) {
 if (arrayFoldedChildren.size() > originalSize) { }
 for (FoldedNode node: arrayFoldedChildren) {
 if (foldedSize > originalSize for node: arrayFoldedChildren) {
 return n ; case 2: Node arrayFoldedChildren = arrayNode();
 if (arrayNode.children==arrayFoldedChildren) {
 if (arrayNode!= null) {
 break; case 2:
 break; case 2: Node arrayNode = [];
 if (node!= null) { n =
 return n; case 2: for(Node node : arrayFoldedChildren) {
 break; case 2: Case 3:
 if (arrayNode.getParent()==arrayFoldedChildren) {
for (Node node : arrayFoldedChildren)  { if (node!= null) { n +=
 if (arrayNode){
for  (Node node: array)
 break; case 2: Node arrayNode:
 if (node!=arrayFoldedChildren) {
 case 2: Case 3: for(Node node : arrayFoldedChildren) {
 return n; case 2: case 3:
 if (foldedSize) for(Node node : arrayFoldedChildren) {
 break; case 2: Node arrayNode {
 if (foldedSize < 0 for (Node node : arrayFoldedChildren) {
 if (foldedSize > original) for(Node node : arrayFoldedChildren) {
 return n; for ( AstNode node : arrayFoldedChildren) {
for (Node  node in arrayNode) {
 if (foldedSize > originalSize.arrayFoldedChildren) {
 break; case 2: case 3:
 } } } for (Node node: arrayFoldedChildren) {
 if (arrayFoldedChildren.size() == originalSize) { }
 if (node!= null) { return
 return n ; case 2: Node arrayNode {
 if (arrayFoldedChildren.remove(Node node : arrayFoldedChildren) {
 if (n!=arrayFoldedChildren) {
 break; case 2: default:
 return n ; case 2: Node arrayNode;
 if (newNode!= null) {
for (ArrayNode node: arrayNodes) {
 if (foldedSize { for(Node node : arrayFoldedChildren) {
 return n; default: for(Node node : arrayFoldedChildren) {
 return n; case 2: Node arrayFoldedChildren = arrayNode.children(); {
for  (node) {
 while (arrayNode){
for (Node node : arrayFoldedChildren.values())) {
 case 2: case 3:
 break; } for(Node node : arrayFoldedChildren) {
 if (foldedSize > originalSize) { return n; } }
for (Node node : arrayFoldedChildren)  { while (node) {
for (ArrayNode node : arrayNode) {
 if (arrayFoldedChildrenAdded?node : arrayFoldedChildren) {
 if (foldedSize < 0? null: arrayFoldedChildren) {
 if (arrayFoldedChildren!= null?Node node : arrayFoldedChildren) {
 if (foldedSize > 0? node: arrayFoldedChildren) {
 } for (Node node: arrayFoldedChildren) {
 } for ( AstNode node : arrayFoldedChildren) {
for (Node node : arrayFoldedChildren.toArray(n)) {
 if (foldedSize > originalSize?: arrayFoldedChildren) {
 if (arrayNode.addChild(arrayFoldedChildren) {
 } } for ( Node fnode : arrayFoldedChildren) {
 return n ; case 2: Node arrayNode:
 for (final Node node: arrayFoldedChildren) {
 if (arrayNode instanceof Node)){
for ( Node node : arrayNodes ) { n.
for (Node  node : arrayChildren) {
for (Node node : arrayFolded) {
 case 2: if (Node arrayNode: arrayFoldedChildren) {
 if (arrayFoldedChildren==?node : arrayFoldedChildren) {
 if (arrayNode.children()==arrayFoldedChildren) {
 if (node.getParent().arrayFoldedChildren) {
for (Node node :  arrayNode. children) {
 return n; }
for (Node node : children) {
 if (arrayNode.getChildren().arrayFoldedChildren) {
 if (foldedSize < 0?node : arrayFoldedChildren) {
 if (node instanceof Node){
 } case 2: for (Nodenode : arrayFoldedChildren) {
 if (array!= null){
 break; for ( AstNode node : arrayFoldedChildren) {
 if (foldedSize + 1 <arrayFoldedChildren) {
 } } else{
 case 2: Case 3:
 for (Expression node: arrayFoldedChildren) {
 if (foldedSize > originalSize) { return n; } else
 if (arrayFoldedChildren.remove(): arrayFoldedChildren) {
 case 2: for (Node arrayNode: arrayFoldedChildren) {
 break;
for (Node node :  arrayNode. getChildren ( )))
 return n; case 2: { for(Node node : arrayFoldedChildren) {
 break; } else{
 for (...node : arrayFoldedChildren) {
 if (node instanceof Array) {
 if (folded) for(Node node : arrayFoldedChildren) {
 case 3: for(Node node : arrayFoldedChildren) {
for (Node node :  arrayFoldedChildren)) {
 if (newNode!= null)
for (Node node : arrayFoldedChildren) { node =
 if (arrayFoldedChildren); for(Node node : arrayFoldedChildren) {
for (Node node : node) {
 } } for ( final AstNode node : arrayFoldedChildren) {
 for ( ASTNode node : arrayFoldedChildren) {
 if (foldedSize==arrayFoldedChildren) {
for (Node node : arrayFoldedChildren)  { while (node)
for (Node node : arrayFoldedChildren) { n =
 if (node.children==arrayFoldedChildren) {
 if (node!= arrayNode){
 if (originalSize) {
 break ; } } for ( AstNode node : arrayFoldedChildren) {
 if (foldedSize++; case 2: arrayFoldedChildren) {
for (Node node : foldedChildren) {
for (node in array)
 for (ChildNode node: arrayFoldedChildren) {
 for ( Node newnode : arrayFoldedChildren) {
 for ( Node subnode : arrayFoldedChildren) {
for (Node node : arrayFoldedChildren)  { if ()
 if (arrayNode instanceof Node)
 if (branch) {
 return n; } } for ( AstNode node : arrayFoldedChildren) {
for (node : nodes) {
 for (!node : arrayFoldedChildren) {
 } for ( Node fnode : arrayFoldedChildren) {
 while (true){
 if (hasBack){
for (node)
 if (useBack){
 case 2: for (Node fnode : arrayFoldedChildren) {
for ( Node node : arrayNodes ) { n +=
 break; case 2: Default:
 if (arrayFoldedChildrenInlineNode node : arrayFoldedChildren) {
 case 2: arrayFoldedChildren) {
 if (addToBack) {
for (Node node :  arrayFoldedChildren()) {
 if (foldedSize > 0?Node node : arrayFoldedChildren) {
 for ( Node rnode : arrayFoldedChildren) {
 if (arrayNode)
 for ( Node [][]node : arrayFoldedChildren) {
 if (arrayNode!= null?Node node : arrayFoldedChildren) {
 } } for ( Node subnode : arrayFoldedChildren) {
 } } for ( Node rnode : arrayFoldedChildren) {
 if (arrayFolded)
 break; } }
 if (foldedSize)
for (true)
 } } } for ( Node fnode : arrayFoldedChildren) {
 case 2: for (Node []node : arrayFoldedChildren) {
 for (?node : arrayFoldedChildren) {
 break; } for ( final AstNode node : arrayFoldedChildren) {
 if (arrayNode.children!=arrayFoldedChildren) {
for  (n) {
 case 2: for (Node rnode : arrayFoldedChildren) {
 while (node!= n){
 if (newArray) {
for (Node node : arrayFoldedChildren)  { if (node).
 case 2: Node for ( AstNode node : arrayFoldedChildren) {
for (Node node : arrayFoldedChildren)  { if (!empty)
 case 2: Node arrayNode for (: arrayFoldedChildren) {
 } } for ( Node newnode : arrayFoldedChildren) {
 case 2: Node arrayNode = (: arrayFoldedChildren) {
 if (foldedSize < narrayFoldedChildren) {
for (Node  node: arrayNode.children()) { return
 if (foldedSize < 0?Node node : arrayFoldedChildren) {
for ( Node node : arrayFoldedChildren ) { {
for (node : n) {
 if (foldedSize < 0&&Node node : arrayFoldedChildren) {
 if (foldedNodeNode!=arrayFoldedChildren) {
for (Node node : arrayFoldedChildren)  { if (!)
 case 2: for (FoldingNode node : arrayFoldedChildren) {
for  (child) {
 } } for ( ASTNode node : arrayFoldedChildren) {
 if (add) {
for (Node childNode) {
for (node: n)
 } for ( Node rnode : arrayFoldedChildren) {
 } for ( Node subnode : arrayFoldedChildren) {
 while (true)){
for (inlined) {
 for (FoldingNode node : arrayFoldedChildren) {
 if (node!= null) { n.
 if (ArrayNode arrayNode: arrayFoldedChildren) {
for (Node node : arrayFoldedChildren) { if (node instanceof ArrayNode())
for  loop {
 } for ( ImmutableNode node : arrayFoldedChildren) {
 for (Node folded_node : arrayFoldedChildren) {
for (Node node : arrayFoldedChildren)) { node =
 if (array){
 if (node!= n) {
for (Node  node : arrayFoldedChildren) { return
 for (node node: arrayFoldedChildren) {
for (Node  node: arrayNodes) { return
for (true){
 for (ExpressionNode node : arrayFoldedChildren) {
for (Node node : arrayFoldedChildren)) { n =
 if (arrayNode.children(): arrayFoldedChildren) {
 if (arrayFoldedChildren).
for (node : array) {
 return n; } }
 if (reverse) {
for (n)
for (Node node :  arrayFoldedChildren())
for  (inline)
 if () {
 if (loop) {
 } } for (node node: arrayFoldedChildren) {
 if (pushBack) {
for (Node node :  arrayNode)) {
for (Node node : arrayFoldedChildren)  { if node {
for (Node node :  originalChildren) {
 } for ( ASTNode node : arrayFoldedChildren) {
 if (hasChildren) {
for (Node node : arrayFoldedChildren)  { if (null
 } else { return n ; }
 if (!arrayFoldedChildren) {
for (Node node :  children)
for (Node  child) {
 case 0:
 } }
 } if (arrayFoldedChildren) {
 for ( StringNode node : arrayFoldedChildren) {
 if (node: arrayFoldedChildren) {
for (Node node :  node)
for (child)
 continue; for(Node node : arrayFoldedChildren) {
for (Node  n) {
 } synchronized (arrayFoldedChildren) {
 if (node node: arrayFoldedChildren) {
 if (+) {
for Each {
 if (*) {
for ( {
 if (!!arrayFoldedChildren) {
for (false)
 if (!) {
for (Node  node) {}
for  now,
 for (: arrayFoldedChildren) {
for (inArray) {
for (in loop) {
for (Node node : arrayFoldedChildren)  { n +=
for (...
for (in array) {
for (Node node : arrayFoldedChildrenList) {
for (inverse) {
for (Node node : arrayFoldedChildren)  { node.
 break; else{
 }
 } finally{
 } } finally{
 while (arrayFoldedChildren) {
 default:
for (while)
 case 3: arrayFoldedChildren) {
 synchronized (!arrayFoldedChildren) {
for (Node  child)
for (loop) {
for (Node  n)
 } catch: arrayFoldedChildren) {
 } #{
 for ((node : arrayFoldedChildren) {
for (this) {
for (Node node ): {
for (Node node ++) {
for (Node node : arrayFoldedChildren)) { return
 for ((Node node : arrayFoldedChildren) {
for (Node node : arrayFoldedChildren)) {...
for (false) {
 while (node : arrayFoldedChildren) {
 fore (Node node : arrayFoldedChildren) {
 while (Node node : arrayFoldedChildren) {
for (all) {
for (Node node : arrayFoldedChildren)  {} {
for (Node node : arrayFoldedChildren)  {} return
 } For(Node node : arrayFoldedChildren) {
 else
 } fore(Node node : arrayFoldedChildren) {
