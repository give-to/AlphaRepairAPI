 return n;
 return foldedStringNode ;
 }
 return arrayNode ;
return n ; } return n ; }
return  new Node ( n, foldedStringNode ) ;
 } }
return n.replaceChild(n, foldedStringNode);
 return new Node ( n ) ;
return n ; }
return  new Node ( arrayNode ) ;
return  new Node ( n, arrayNode ) ;
 break ;
return n. replaceChild ( n, arrayNode ) ;
return n. replaceChild ( n, foldedNode ) ;
 return new Node ( ) ;
 break ; }
return n. cloneNode ( ) ; }
 return arrayFoldedChildren;
return n. replaceChild ( n, foldedStringNode )
 return foldStringNode ;
 } returnn;
 else { return n ; } } return n;
return n ; } return n ;
 if (arrayFoldedChildren. size() == arrayNode.getChildCount())) {
 if (arrayFoldedChildren. size ( ) == 0) {
return n. clone ( ) ; }
return n ; } return null ;
return n ; } return null ; }
 } } }
 if ( n!= null ) {
return n. clone ( ) ;
 else { return n ; } return n;
 if ( n == null ) { return n ; } if ( arg1 == null ) {
 else { return n ; } } } return n;
return  arrayNode. clone ( ) ; }
return n ; } else { return n ; } }
 else { return n ; } break;
return  new Node ( n, originalSize ) ;
return n ; break ; }
 return arrayNode ; } ;
 if ( n == null ) { return n ; } if ( n!= null ) {
 reportCodeChange();
 if (n!= null && n. isCall ( ) ) {
return n ; } } return n ; }
 if ( n == null ) { return null ; } if ( n!= null ) {
return  new Node ( n, foldStringNode ) ;
return  arrayNode. clone ( ) ;
return  new Node ( n, foldedNode ) ;
return  new Node ( n, foldedSize ) ;
return n. replaceChild ( n, node ) ;
 if (arrayFoldedChildren. isEmpty ( ) ) {
 if (arrayFoldedChildren. size() == arrayNode.getChildCount()) {
return  new Node ( n, foldedArrayNode ) ;
 if ( n!= null && n. getType ( ) == Token. CALL )
 return foldedArrayNode ;
return n ; } ;
 if (n!= null && n. getType ( ) == Token. CALL ) {
 if ( result == 0 ) {
 if (n!= null && n. isFunction ( ) ) {
 if (n!= null && n. getType ( ) == Token.NULL) {
 return arrayNode ; } } ;
return  arrayNode ; } return n ; }
return n. replaceChild ( n, replacement ) ;
 if (n!= null && n. getType ( ) == Node. CALL)
 else { return n ; } } return null;
 return arrayNode ; break ; }
 if (arrayFoldedChildren. size ( ) > 0) {
 } if ( n!= null ) {
 if (arrayFoldedChildren. size ( ) == arrayNode. getChildren ( ) )
 return originalNode ;
 if (n!= null && n. getType ( ) == Token.NULL)
return n ; } else { return null ; } }
 break ; default :
 return originalSize ;
 if ( n!= null && n. getType ( ) == CALL ) {
 else { return n ; } return foldedStringNode;
return  arrayNode ; } return n ;
 if ( n!= null ) { n. setParent ( n ) ;
 if ( n == null ) {
return n.getParent(); return n;
 if (n!= null && n. getType ( )!= Token) {
return n. cloneNode ( ) ; } ;
 if (n!= null && n. getParent ( ) == n ) {
 else { return n ; } } break;
 if (n!= null && n. getType ( ) == Token) {
 if (n!= null && n. isCall ( ) )
return  n. clone ( ) ; } return n ;
 return arrayNode ; } }
 else { return foldedStringNode;
 if ( n!= null ) { n. setParent ( this ) ;
 else { return n ; } return null;
 if (arrayFoldedChildren. length == 0) {
 else { return n ; } } } } returnn;
 return originalSize ; }
return n. cloneNode ( originalNode ) ;
 if (n!= null && n. isFunction ( ) )
 if (arrayFoldedChildren. size ( ) ) {
 return n ; } break ; }
 } else { return n ; } } return n;
 else { return n ; } } return arrayNode;
 if (arrayFoldedChildren. size ( ) == 0)
 else { return n ; } } } return null;
return n.getParent();
 if (arrayFoldedChildren == arrayNode) {
return n.getParent(); break;
return n. cloneNode ( ) ; } }
return  new Node ( n, result ) ;
 if ( n == null ) { reportCodeChange();
 else { return arrayFoldedChildren;
 if ( n == null ) { reportCodeChange(); }
 if ( n!= null && n. getType ( ) == CALL )
return n. clone ( ) ; } ;
 if ( n == arrayNode ) {
 return n ; } break ; default :
return n ; } } ;
return n ; } } return null ; }
 if (n!= null && n. getType ( ) == 0)
 else { return null ; } return n;
 else { return n ; } break ; } returnn;
 break ; } }
 } if ( n instanceof Call ) {
return n. cloneNode ( ) ; } } ;
 if (arrayFoldedChildren!= arrayNode) {
return n. cloneNode ( ) ; break ;
return n ; } }
return  new Node ( n ) ; } ;
 else { return n ; } } else { returnn;
 else { return originalStringNode;
 } if ( n == null ) { return null }
 if ( n == null ) { return null }
 else { return null ; } break;
 return originalSize ; } ;
 } else { return n ; } } } returnn;
return n. clone ( ) ; break ; }
 return originalSize ; }
 } return arrayNode;
 return originalNode ; } ;
 else { return n ; } return arrayNode;
 if (n!= null && n. isCall ) {
 if ( returnN ) {
 } } return n;
 if ( n == null ) { break ; }
 return n ; } catch ( ) {
return n ; break ; } }
 } reportCodeChange();
 if ( n == n ) { break ; }
 else { return arrayNode;
 if (n!= null && n!= orig) {
 return (Node)n;
 return new Node(n);;
 assert n!= null ;
 else { return null ; } } returnn;
 }
 else { return n;
 } break ; }
return n ; break ; } ;
return n ; break ;
 if ( n!= null ) { break ; }
 else { return n ; } } } break;
 return n ; } } }
 return foldedStringNode ;
 return new Node(n;
 if (! folding ) {
 if (n!= null && returnNodes)
 if ( n. isCall ( ) )
 if ( returnNode ) {
 else { return originalSize;
 if ( n. isFunction ( ) )
 return originalSize + 1;
 return arrayNode ; } break;
 } if ( n instanceof Node ) {
 if (! fold ) {
return n ; } ) ;
 } } } }
 return ((Node))n;
 return n ; } } } }
 if (n!= null) { } }
 return new Node(null)n;
 return new Node(String)n;
 return (CallNode)n;
 return foldStringNode.n;
 return (Node) cn;
 } break ;
 else { return n ; } return ln;
 return arrayNode; } } returnn;
 } } } returnn;
 return null;
 return (Node) nn;
 else { return nn;
 } } } } } ; return n ; } } ; if ( n instanceof Call ) {
 } }
 return n ;
 else { return orig_n;
 return arrayNode.n;
 return n ; } } } returnn;
 return nn;
 } } } } } ; return n ; } } ; if ( n instanceof Node ) {
 } } } } } } } } } } } } } } else { return n ; } } if ( n!= null ) {
 } } } } } ; return n ; } } else { return n ; } } ; }
 } return null;
 } } } } } } } } } } } } } } else { return n ; } } if ( n == null ) {
 } } } } } } ; return n ; } } ; } else { return n ; } } ; } else {
 } } } } } ; return n ; } } else { return n ; } } } }
 } } } } } } } } } } } } ; return n ; } else { if ( n == null ) { break ; }
 } } } } } } } } } } } } } } else { if ( n == null ) { return null ; } }
 } } } } ; return n ; } } ; } else { return n ; } } ; }
 } } } } } ; return n ; } } else { return n ; } } } ;
 } } } } } } } } } } } } ; return n ; } else { if ( n == null ) { return null }
 } } } } } } } } } } } } ; return n ; } else { if ( n == null ) { return null ;
 } } } } } } } } } } } } } } else { if ( n == null ) { return n ; } }
 } } } } } } } } } } } } } } else { return n ; } } else { if ( ignore ) {
 return cn;
 } } } } ; return n ; } } ; } else { return n ; } } } }
 } } } } } } } } } } } } } else { if ( n!= null ) { return n ; } }
 } } } } } ; return n ; } } ; } else { return n ; } } ; }
 } } } } } } } } } } } } ; return n ; } else { return n ; } } else { } else {
 } } } } } } ; return n ; } } ; } else { return n ; } } ; } } }
 } } } } } } ; return n ; } } ; } else { return n ; } } ; } ; }
 } } } } } } } } } } } } } else { if ( n == null ) { return null ; } }
 } } } } } } } } } } } } } } else { if ( n == null ) { return null }
 } } } } ; return n ; } } ; } else { return n ; } } } ;
 return originalSize-n;
 } } } } } } } } } } } } } } else { if ( n == null ) { break ; }
 return orig_n;
 } } } } } } ; return n ; } } ; } else { return n ; } } ; } }
 } } } } } } } } } } } } ; if ( n == null ) { return null }
 } } } } } } } } } } } } ; return n ; } else { return n ; } } ; } } ; }
 } } } } } } ; return n ; } } ; } else { return n ; } } ; } } ;
 } } } } } } ; return n ; } } ; } else { return n ; } } else { } }
 } } } } } } } } } } } } } else { if ( n == null ) { return n ; } }
 return originalFn;
 } } } } } } } } } } } } } else { if ( n == null ) { throw new RuntimeException();
 } } } } } } } } } } } } ; if ( n == null ) { return null ;
 } } } } } ; return n ; } } ; } else { return n ; } } } }
 } } } } } } } } } } } } } else { if ( n == null ) { throw new RuntimeException ;
 return node ;
 } } } } } } } } } } } } ; if ( n == null ) { break ; }
 return ln;
 return origFn;
 } } } } } ; return n ; } } ; } else { return n ; } } } ;
 } } } } } } } } } } } } } } else { if ( n == null ) { return null ;
 } } } } ; return n ; } } ; return n ; } } ; } } ; }
 } } } } ; return n ; } } ; } else { return n ; } } } else
 } } } } } } ; return n ; } } ; } else { return n ; } } } ; }
 } } } } } } ; return n ; } } ; } else { return n ; } } ; } ;
 } } } } } } } } } } } } ; if ( n!= null ) { break ; }
 } } } } } } ; return n ; } } ; } else { return n ; } } ) ; }
 } } } } } } ; return n ; } } ; } else { return n ; } } ; } else
 } } } } } } } } } } } } ; if ( n!= null ) { return n ;
 } } } } } ; return n ; } } ; } else { return n ; } } } else
 } } } } } ; return n ; } } ; return n ; } } ; } } ; }
 break ;
 } } } } } } } } } } } } } } else { return n ; } } } } } } }
 } } } } } } } } } } } } } } else { return n ; } } } else { } }
 return _n;
 return n
 } ;
 finally {
 } else
 return root;
 return r;
return n. }
 });
return n); }
 else
