 return n;
 arrayFoldedChildren = [ ] ;
 break;
 arrayFoldedChildren = null;
 if (node == n) { return n;
 if (node!= null) { n. replaceChild ( node ) ;
 if (node!= null) { n. replaceChild(node, foldedStringNode);
 } else { arrayFoldedChildren. add ( n ) ;
 if (node == originalNode) { return n;
 } else { arrayFoldedChildren = arrayNode. remove ( ) ;
 if (node == null) { return n ; } else { n. replaceChild ( n, node ) ;
 if (node == null) { return n ; } if ( node == n ) { return n ;
 if (node == null) { return n ; } else { n. replaceChild ( node ) ;
 if ( node == null ) { return n ; } if ( node!= n ) { n. replaceChild ( node ) ;
 if (node == null) { return n ; } if ( node!= null ) { n. replaceChild ( node ) ;
 if (node!= null) { n. removeChild ( node);
 if (node!= null) { n. replaceChild ( node, foldedSize ) ;
 if ( node == null ) { return n ; } if ( node!= n ) { n. replaceChild ( node, n )
 if (node == null) { return n ; } } else { n. removeChild ( ) ;
 if (node == arrayNode) { return n;
 if (node!= null) { n. replaceChild(node, arrayNode);
 if (node == null) { return n ; } if ( node!= node ) { n. replaceChild ( node ) ;
 if (node == originalNode) { return n ; } } }
 if (node == null) { return n ; } if ( node == n ) { return n ; }
 if ( node == n ) { return n ; } else { n. removeChild ( node )
 if (node == null) { return n ; } if ( node!= n ) { n. remove ( ) ;
 if (node == null) { return n ; } } else { n. replaceChild ( n, node ) ;
 if (node == originalNode) { return n ; } }
 } else { arrayFoldedChildren. add ( n ) ; }
 if (node == n) { return n ; } } }
 if (node == null) { return n ; } if ( node!= node ) { n. remove ( ) ;
 if (node == null) { return n ; } if ( node!= node ) { n. replaceChild ( node, node ) ;
 if (node == null) { return n ; } if ( node!= null ) { n. replaceChild ( node, foldedSize ) ;
 if (node == null) { return n ; } else { n. replaceChild ( node, arrayNode ) ; }
 } else { arrayFoldedChildren = arrayNode. detachChildren ( )
 if (node!= null) { n. replaceChild ( node, n )
 if (node == n) { return n ; } else { n. remove ( ) ;
 if (node == n) { return n ; } } else { return n ;
 if (node == n) { return n ; } }
 if ( node == null ) { return n ; } if ( node!= n ) { n. replaceChild ( node, foldedNode ) ;
 if (node == null) { return n ; } else { n. replaceChild ( node, n )
 if (node == n) { return n ; } } else { n. removeChild ( ) ;
 if ( node == n ) { return n ; } else { n. replaceChild ( node, n )
 if ( node == n ) { return n ; } if ( node == n ) { return n ; } } else { return n ;
 if (node == null) { return n ; } if ( node!= node ) { n. replaceChild ( node, node )
 if (node == null) { return n ; } if ( node!= node ) { n. removeChild ( node )
 if (node!= null) { n. remove ( node);
 if (node == null) { return n ; } else { n. replaceChild ( node, foldedStringNode);
 if (node == null) { return n ; } else { n. replaceChild ( node, foldedStringNode )
 if (node == null) { return n ; } if ( node!= null ) { n. replaceChild ( node, n ) ;
 if ( node == null ) { return n ; } if ( node!= n ) { n. replaceChild ( node, n ;
 if (node == n) { return n ; } } else { return n ; }
 if (node == null) { return n ; } } else { n. replaceChild ( node ) ;
 if (node == null) { return n ; } if ( node == n ) { return n ; } }
 if (node == null) { return n ; } if ( node!= node ) { n. replaceChild ( node, foldedNode ) ;
 if (node!= null) { n. replaceChild ( node, foldedNode ) ;
 if (node == null) { return n ; } } else { n. remove ( ) ;
 if (node!= null) { n. replaceChild ( node, foldedSize ) ; }
 if (node == null) { return n ; } else { n. replaceChild ( node, arrayNode )
 if (node == null) { return n ; } if ( node!= n ) { n = node ; }
 node.setParent(arrayNode);
 } return n ;
 if (node == null) { return n ; } } else { n. replaceChild ( n, foldedStringNode);
 if (node!= null) { n. replaceChild ( node, n);
 if (node == null) { return n ; } if ( node!= n ) { n. removeChild ( node )
 if ( node == n ) { return n ; } } else { n. remove ( ) ;
 if (node == originalNode) { return n; }
 if ( node == n ) { return n ; } if ( node == n ) { return n ; } else { return n ; }
 if (node == null) { return n ; } } else { n. replaceChild ( n, foldedStringNode )
 if (node == originalNode) { return n ; } } } }
 if (node == null) { return n ; } if ( node == n ) { return node ;
 if (node == n) { return n ; } } } }
 arrayFoldedChildren. remove ( node);
 if (node!= null) { n. replaceChild ( n, node);
 if (node == originalNode) { return n ; } } break ;
 if ( node == n ) { return n ; } if ( node == n ) { return n ; } else { break ; } }
 if (node == null) { return n ; } if ( node!= null ) { n. replaceChild ( node, foldedStringNode )
 if ( node == n ) { return n ; } } else { n. replaceChild ( n, arrayFoldedChildren )
 if (node!= null) { n. replaceChild ( node, n ;
 if (node!= null) { return node; }
 } else { arrayFoldedChildren = [ ] ; }
 node. setParent ( n ) ;
 if (node == n) { break;
 if (node == n) { return n ; }
 n. removeChild ( node);
 if (node == n) { return n ; } } break ;
 } else { arrayFoldedChildren. remove ( 0);
 if (node == n) { continue;
 n. remove ( ) ;
 arrayFoldedChildren = arrayNode ;
 if (node!= null) { n. replaceChild ( node, null);
 return arrayNode;
 if (node == arrayNode) { return n; }
 if (node!= null) { return n;
 if (node!= null) { return node;
 n. setParent ( arrayNode ) ;
 if (node!= null) { n. replaceChild ( node, arrayNode )
 } else { arrayNode. remove ( ) ;
 node. remove ( ) ;
 } return arrayNode ;
 n.getParent();
 if (node == n) { return node;
 } foldedSize ++ ;
 } foldedSize = 0 ;
 return n; }
 arrayFoldedChildren = null
 } n.
 n = arrayNode ;
 } return n ; }
 return node;
 arrayFoldedChildren clear [];
 } if (continue)
 node.removeChild();
 } n =
 } node.
 if (hasChildren)
 } if (!continue)
 node.
 if (continue)
 if (!continue)
 } arrayNode =
 } arrayNode.
 } arrayNode;
 node;
 } n;
 break; }
 } }
 continue;
 }
 n.
 node();
 }
...
 };
