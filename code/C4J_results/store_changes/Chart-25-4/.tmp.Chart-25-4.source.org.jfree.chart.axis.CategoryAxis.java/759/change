 tickLabelWidth= state.getMax();
 state.getMax();
 tickLabelWidth = state.getMax;
 tickLabelWidth = state.getMax);
 tickLabelWidth = getMax();
 tickLabelWidth = -state.getMax();
 tickLabelWidth;
 tickLabelWidth = state.max();
 tickLabelWidth++;
 tickWidth = state.getMax();
 tickLabelWidth = state.getMax(); } else if (edge == RectangleEdge.LEFT) {
 tickLabelWidth = state.getMax(); } else if (edge == RectangleEdge) {
 tickLabelWidth = state.max;
 tickLabelWidth = -1;
 tickLabelWidth = state.getMax(); } else if (edge == RectangleEdge.LEFTRight) {
 tickLabelHeight = state.getMax();
 tickLabelWidth = state.getMax(); } else if (edge == RIGHT) {
 tickLabelWidth = state.getMax(); } else if (edge == RectangleEdge.TOP) {
 tickLabelWidth = state.getMax(); } else {
 tickLabelWidth = state.getMax(); } else if (edge == CENTER) {
 width=state.getMax();
 tickLabelWidth = state.getMax(); } else if (edge == RectangleEdge.LEFTRIGHT) {
 tickLabelHeight = state.getMax(); } else if (edge == RIGHT) {
 tickLabelWidth = state.getMax(edge);
 tickLabelWidth = state.getMax(); } else if (edge == RectangleEdge.RIGHT) { tickLabelHeight =
 tickLabelWidth = (int)state.getMax();
 tickLabelWidth = state.getMax(); } else if (edge == RectangleEdge.DOWN)
 tickLabelWidth = state.getMax(); } else if (edge == RectangleEdge.LEFT) { tickLabelHeight =
 tickLabelHeight =
tickLabelWidth = state.getMax(); } else { tickLabelWidth = 0 ;
 tickLabelHeight = state.getMax(); } else {
 tickLabelWidth = state.getMax(); } else if (edge == RectangleEdge.TOP)
 labelWidth= state.getMax();
 tickLabelWidth = state.getMax(); } else if (edge == RectangleEdge.RIGHT) { tickLabelHeight = 0;
 tickLabelWidth = 0;
 tickLabelWidth = state.getMax(); } else if (edge == RectangleEdge.DOWN) {
 tickLabelWidth = state.getMax(); } else if (edge == RectangleEdge.RIGHTLEFT) {
 tickLabelWidth = state.getMax(); } else
tickLabelWidth = state.getMax(); } else { tickLabelWidth = 0
 tickLabelHeight = state.getMax(); } else if (edge == RIGHT)
 tickLabelHeight = 0.0;
 tickLabelWidth = state.getMax(); } else if (edge == RectangleEdge.LEFT) { tickLabelHeight = 0;
 tickLabelHeight = state.getMax(); } else if (edge == RectangleEdge) {
 tickLabelWidth = state.getMax(); } else if (edge == RectangleEdge.UP) {
 tickLabelWidth = state.getMax(); } else if (edge == RectangleEdge.RIGHT) {
 tickLabelWidth = state.getMax(); } else if (edge == RectangleEdge.RIGHT) { tickLabelHeight --;
 tickLabelWidth = 0
 tickLabelHeight = state.getMax(); } else
 tickLabelHeight = state.getMax(); } else if (edge == CENTER) {
 tickLabelWidth = state.getMax(); } else if (edge == RectangleEdge.RIGHT) { tickLabelHeight ++;
 tickLabelWidth = state.getMax(); } else if (edge == RIGHT)
 tickLabelWidth = state.getMax(); } else if (edge == RectangleEdge.LEFT)
 tickLabelWidth = state.getMin(); } else if (edge == RectangleEdge.LEFT) {
 tickLabelWidth = state.getMax(); } else if (edge == RectangleEdge.Right) {
 tickLabelWidth = state.getMax(); } else if (edge == RectangleEdge.RIGHT) { tickLabelWidth = 0;
 tickLabelWidth *= state.getMax();
tickLabelWidth = state.getMax() } else { tickLabelWidth = 0.0
 tickLabelHeight = state.getMax(); } else if (left) {
 tickLabelWidth = state.getMax(); } else if (edge == RectangleEdge.CENTER) {
tickLabelWidth = state.getMax() } else { tickLabelWidth = 0 ;
 tickLabelWidth = state.getMax(); } else if (edge == RectangleEdge.UP)
 tickLabelHeight = state.getMax(); } else if (edge == RectangleEdge.LEFT) {
tickLabelWidth = state.getMax() } else { tickLabelWidth = 0
 tickLabelHeight = 0;
 tickLabelWidth = state.getMin(); } else if (edge == RectangleEdge) {
 tickLabelWidth = state.getMin(); } else if (edge == RectangleEdge.LEFTRight) {
 tickLabelWidth = state.getMax(); } else if (edge == RectangleEdge.RIGHT) { tickLabelHeight = 1;
 tickLabelWidth = state.getMax(); } else if (edge == TOP) {
 tickLabelHeight = state.getMax(); } else if (edge == RectangleEdge.LEFTRight) {
tickLabelWidth = state.getMax(); } else { tickLabelWidth++;
 tickLabelWidth = state.getMax(); } else if (edge == RectangleEdge.LEFT) { tickLabelHeight ++;
 tickLabelWidth = state.getMax(); } else if (edge == RectangleEdge.LEFT) { tickLabelHeight +
 tickLabelWidth = state.getMin(); } else if (edge == RectangleEdge.LEFTRIGHT) {
 tickLabelHeight = state.getMax(); } else if (edge) {
 tickLabelWidth = state.getMax(); } else if (edge == RectangleEdge.LEFT) { tickLabelHeight++; }
 tickLabelWidth = state.getMax(); } else if (edge == RectangleRight) {
 tickLabelWidth = state.getMax(); } else if (edge == RectangleEdge.RIGHT) { tickLabelHeight +
 tickLabelHeight = state.getMax(); } else if (edge == RectangleEdge.LEFTRIGHT) {
 tickLabelWidth = state.getMax(); } else if (edge == RectangleEdge.RIGHT) { tickLabelWidth = 1;
 tickLabelHeight = state.getMax(); } else if (edge == RectangleEdge.RIGHT) { tickLabelHeight =
 tickLabelWidth = 0; tickLabelHeight= state.getMax();
 tickLabelWidth = state.getMax(); } else if (edge == RectangleEdge.LE){
 tickLabelWidth = state.getMax(); } else if (edge == TOP)
 tickLabelWidth = state.getMax(); } else if (edge == RectangleEdge.LEFT-RIGHT) {
 tickLabelWidth = state.getMax(); } else if (edge == RectangleLeft) {
 tickLabelHeight = state.getMax(); } else if (edge == TOP)
 tickWidth = 0;
tickLabelWidth = state.getMax(); } else { tickLabelWidth = 1 ;
 tickLabelHeight = state.getMax(); } else if (center) {
 tickLabelWidth = state.getMax(););
 tickLabelWidth = state.getMin(); } else if (edge == RIGHT) {
 tickLabelWidth = state.getMax(); } else if (bottom) {
 tickLabelWidth = state.getMax(); } else if (edge == RectangleEdge.LEFT|Right) {
 tickLabelWidth = state.getMin(); } else if (edge == CENTER) {
tickLabelWidth = state.getMin(); } else { tickLabelWidth++;
 tickLabelWidth = state.getMax(); } else if (edge == RectangleEdge.LEFT+RIGHT) {
 tickLabelHeight = state.getMax(); } else if (bottom) {
 tickLabelWidth = state.getMax(); } else if (edge == RectangleEdge.LEFT(plotArea)) {
 tickLabelHeight = state.getMax(); }
 tickLabelHeight = state.getMax(); } else if (edge == TOP) {
 tickLabelWidth = state.getMax(); } else if (edge == RectangleEdge.LEFT right) {
 tickLabelWidth = state.max);
 tickLabelWidth = state.getMax(); } else if (edge == RectangleEdge.RIGHT) { } else {
 tickLabelWidth = state.getLeftOrBottom();
tickLabelWidth = state.width
 tickLabelWidth();
 tickLabelWidth = state.getMax(); }
 tickLabelWidth = max();
 tickLabelWidth = state.getMax(); } } else {
 return space;
 tickLabelWidth = (double)state.getMax();
 tickLabelWidth = state.get();
 tickLabelWidth = state.getMax - state.getMax();
 tickLabelWidth = state.getMax(2);
 tickLabelWidth = state.getMax(); } else if (bottom)
 tickLabelWidth = state.getMax(); state.getMax();
 tickLabelWidth = state.getMax(); } else if (edge == RectangleEdge.LEFT) { } else {
 tickLabelWidth = state.getMax();
tickLabelWidth = state.getMax() } else { tickLabelWidth = 1 ;
 tickLabelWidth = state.getMax(-1;
tickLabelWidth = state.getMax() } else { tickLabelWidth++;
 tickLabelHeight = state.getMax(); } else if (center)
 tickLabelWidth = state.getMax(); } else if (edge == "DOWN") {
 tickLabelHeight = state.getMax(); } } else {
tickLabelWidth = state.getMax(); } else { tickLabelHeight++;
tickLabelWidth = state.getMax(); } else { tickLabelWidth = ;
 tickLabelHeight = state.getMax(); } else if (bottom)
 tickLabelWidth = 0();
 tickLabelWidth = state.getMinWidth();
 tickLabelWidth = 0.5 * state.getMax();
 tickLabelWidth = state.getMax(); } else if (center)
 tickLabelWidth = state.getMax + state.getMax();
 tickLabelWidth = state.getMin(); } else {
 tickLabelWidth = -1);
 tickLabelHeight = -1;
 tickLabelWidth = (-1);
 tickLabelWidth = state.getMax(); } else if (edge == "Right") {
 tickLabelWidth = 0.0
 tickLabelWidth = state.getMin(); } else
 tickLabelWidth = state.getMin - state.getMax();
 tickLabelWidth = state.getMax(); } else if (bottom {
 tickLabelWidth = state.getMin(edge);
 tickLabelWidth = state.getMax(1);
 tickLabelWidth = state.getLeftMax();
 tickLabelWidth = state.getMin + state.getMax();
tickLabelWidth = state.getMax() } else { tickLabelWidth = -1;
 = state.getMax();
 tickLabelHeight = state.getMax(); } else if else {
 tickLabelWidth = state.getMax());
 tickLabelWidth = state(max);
 tickLabelWidth = state.getMax(); } else if (! {
tickLabelWidth = state.getMax(); } else { tickLabelWidth = 1
 tickLabelWidth = state.getMaxWidth();
 return state.getMax();
 tickWidth = max();
 tickLabelWidth = state.left + state.getMax();
tickLabelWidth = state.getMin(); } else { tickLabelHeight++;
 tickLabelWidth = state.getLeftOrRight();
 tickLabelWidth = -1 * state.getMax();
 tickLabelWidth = 1;
 tickLabelWidth = state.getMax(-);
 tickLabelWidth = state.getMax(plotArea);
 tickLabelWidth = state.getMax(\);
 tickLabelWidth = state.getMax-1;
 tickLabelWidth = state.getMax(-1);
 tickWidth = 0();
 tickLabelHeight = state.getMax(); } else if ( {
 tickLabelWidth = state.getMinWidth;
 tickLabelWidth = 0; } tickLabelWidth= state.getMax();
 tickLabelWidth = 0.0 + state.getMax();
 tickLabelWidth = 0.5 + state.getMax();
tickLabelWidth = state.getMax() + 1;
 tickLabelWidth = state.getMax(2;
tickLabelWidth = state.getMax() } else { tickLabelWidth = 1
 tickLabelWidth = 0.0;
 tickLabelWidth = state.getMin();
 tickLabelWidth = state.getMax+1;
 tickLabelWidth = state.state.getMax();
 tickLabelWidth = state.getLMax();
tickLabelWidth = state.getMax() } else { tickLabelHeight++;
tickLabelWidth = state.getMax(tickLabelHeight);
 tickLabelWidth = state.getMax(); break;
 tickLabelWidth = state.left - state.getMax();
 tickLabelWidth = 0.0; labelHeight= state.getMax();
 tickLabelHeight = 0.5;
 tickLabelWidth = state.getMax(); } else if ( {
 tickLabelWidth = state.min();
tickLabelWidth = state.getMax() + this.categoryLabelPositionOffset;
 tickLabelWidth = state.getTicks();
 tickLabelWidth = 2*state.getMax();
 tickLabelHeight = state.getMin(); } else {
tickLabelWidth = state.getMax() ; tickLabelHeight = state.getMax();
 tickLabelWidth = state.getMin();
 tickLabelWidth = state.getMax(); } return space ;
 tickLabelWidth = -1; tickLabelHeight= state.getMax();
 tickLabelWidth = state.getMax(); return g2;
 tickLabelWidth = state.getLonLat();
 tickLabelWidth = 0; tickLabelWidth= state.getMax();
 tickLabelWidth = state.getMaxLines();
tickLabelWidth = state.getMax() } else { tickLabelWidth = 1.0
 tickWidth = 1;
tickLabelWidth = state.getMax(); } else { tickLabelWidth = 2 ;
 tickLabelHeight = 0; tickLabelWidth= state.getMax();
 tickLabelHeight = state.getMin();
 tickLabelHeight --;
 tickLabelHeight = state.getMax(); } else if (...)
 tickLabelWidth = (double|float)state.getMax();
 tickLabelWidth *== state.getMax();
 tickLabelWidth = 0.state.getMax();
tickLabelWidth = state.getMax(); } else { return space ;
 tickLabelWidth = state.getLMax;
tickLabelWidth = state.getMin(); } else { tickLabelWidth ;
 tickLabelWidth = 0;
 tickLabelWidth = state.getLonMax();
 tickLabelHeight = state.getMin(); } else
 tickLabelWidth = state.getMax(); } break ; }
 tickLabelHeight ++ ;
 tickLabelWidth = state.label.getMax();
 tickLabelWidth = state.getMax(); } break;
 tickLabelWidth = 0.0; labelWidth= state.getMax();
 tickLabelHeight = 0.1;
 tickLabelWidth = state.getLeftMax;
tickLabelWidth = state.getMax(); } else { tickLabelWidth = null ;
 tickLabelWidth = (1);
 tickLabelWidth --;
 tickLabelHeight = 0.0 tickLabelWidth= state.getMax();
 tickLabelWidth = 1
 tickLabelWidth = 0.0 *= state.getMax();
 tickLabelWidth(1);
 tickLabelWidth = state.width;
 tickLabelWidth = 1 ; tickLabelHeight= state.getMax();
 tickLabelWidth = state+state.getMax();
 tickLabelWidth = (int|float)state.getMax();
tickLabelWidth = state.getMax(); } else { tickLabelWidth ;
 tickLabelWidth = state.getMax(); } else {
 tickLabelWidth = state.getMax(); }
 tickLabelWidth = (float)state.getMax();
tickLabelWidth = state.getMax(); } else { tickLabelWidth();
 tickLabelHeight = 1;
tickLabelWidth = state.getMax(); } else { tickLabelWidth =
 tickLabelWidth = state.min;
 tickLabelWidth(0);
 tickLabelHeight = 1.0;
 tickLabelWidth = (int) (float)state.getMax();
tickLabelWidth = state.getMax() + this.categoryLabelPositionOffset
tickLabelWidth = state.getMin(); } else { return space ;
tickLabelWidth = state.getMax(); } else { tickLabelHeight = 0
tickLabelWidth = state.getMax() } else { tickLabelWidth = 2 ;
 tickLabelWidth = (double) -state.getMax();
 tickLabelWidth = (double) (float)state.getMax();
tickLabelWidth = state.getMax( } else { tickLabelWidth = -1;
 tickLabelWidth = this.state.getMax();
 tickLabelWidth = state.getMax; } else {
 tickLabelWidth=();
 tickLabelHeight = 0; }
 tickLabelWidth = (int) -state.getMax();
 tickLabelWidth = tickLabelHeight= state.getMax();
 tickLabelWidth = labelHeight *= state.getMax();
tickLabelWidth = state.getMax() } else { tickLabelWidth = null ;
 tickLabelWidth = state.right.getMax();
 tickLabelWidth = 1-state.getMax();
 tickLabelWidth = 0.0-state.getMax();
tickLabelWidth =  state.getMax(); } else { break ;
 tickLabelWidth = 0; labelHeight= state.getMax();
tickLabelWidth = state.getMax( } else { tickLabelWidth = 0.0
 tickLabelWidth = 1();
 tickLabelWidth = 0 + state.getMax();
 tickLabelWidth = 0);
 tickLabelWidth = state.getMax(axisWidth);
 tickLabelWidth = state.getMax(); else
 tickLabelWidth = 0.5 *= state.getMax();
 tickLabelWidth = state.width();
 tickLabelWidth=(0);
 tickLabelWidth = $(1);
 tickLabelWidth = 0 - state.getMax();
 tickLabelWidth = 0xstate.getMax();
 tickLabelWidth = 0; labelWidth= state.getMax();
 tickLabelWidth = 0; width= state.getMax();
tickLabelWidth = state.getMax( ) ; tickLabelHeight = 0.0;
tickLabelWidth = state.getMax() + this.categoryLabelPositionOffset();
tickLabelWidth = state.getMax() } else { tickLabelHeight = 0
 tickLabelWidth = state.get ().getMax();
 tickLabelWidth = state.getMin()+state.getMax();
tickLabelWidth = state.getMax() } else { tickLabelWidth();
tickLabelWidth =  state.getMax(); } else { continue;
 tickLabelWidth = state(min);
 tickLabelWidth = state.getMax();...
tickLabelWidth =  state.getMax(); } else { return ;
 tickLabelWidth = 0.0 <= state.getMax();
 tickLabelWidth = min();
 tickLabelWidth = state.getMin);
tickLabelWidth = state.getMax(); } else { break ; }
 tickLabelWidth = state.getMin(); else
 tickLabelHeight = state.getMin(); }
 tickLabelHeight = state.getMax(); } {
 tickLabelWidth = 0.0;
 tickLabelWidth = (double|int)state.getMax();
 tickLabelWidth = getMin();
 tickLabelWidth = state.getMin;
 tickLabelWidth = state.getMin(); }
tickLabelWidth = state.getMax() + this.categoryLabelPosition;
 tickLabelWidth = -2;
 tickLabelWidth = -1 *= state.getMax();
 tickLabelWidth = ;
 tickLabelWidth = 1;
 tickLabelWidth = labelWidth *= state.getMax();
 tickLabelWidth =);
 tickLabelWidth = state.(max);
tickLabelWidth = state.getMax() + this.categoryMax();
 tickLabelWidth =
 tickLabelWidth = state.width);
 tickLabelWidth = state.getMin()-state.getMax();
 tickLabelWidth = maxWidth;
tickLabelWidth = state.getMax() + 2;
 tickLabelWidth state.getMax();
 tickLabelWidth = state.getMin();-state.getMax();
 tickLabelWidth =!state.getMax();
 tickLabelHeight = 0.0
 tickLabelWidth ++ ;
tickLabelWidth = state.getMax() + tickLabelHeight;
 tickWidth = 1();
 labelWidth state.getMax();
 tickLabelWidth * 2 *= state.getMax();
 tickLabelWidth = edge *= state.getMax();
 tickLabelWidth = ' '= state.getMax();
 tickLabelHeight +
tickLabelWidth = state.getMax( ) ; tickLabelHeight = -1;
tickLabelWidth = state.getMax(edge); } else { tickLabelWidth++;
 tickLabelLeft = -state.getMax();
 tickLabelWidth = state.MAX;
 tickLabelWidth = width();
 tickLabelWidth + 1 *= state.getMax();
 tickLabelWidth = state.(getMax);
 tickLabelWidth = 100;
 label = state.getMax();
 tickLabelWidth = +state.getMax();
tickLabelWidth = state.getMax() + 'px';
 tickLabelWidth = 2;
 tickLabelWidth = 0.0d*state.getMax();
 tickLabelWidth = ((int)state.getMax();
 tickWidth = min();
tickLabelWidth = state.getMax() } { tickLabelHeight++;
tickLabelWidth = state.getMax() + this.categoryWidth;
 tickLabelWidth = 0.0d+state.getMax();
tickLabelWidth = state.getMax() } else { return space;
 tickLabelWidth = state.getMax(); } else {...
tickLabelWidth = state.getMax() + edge.width();
 tickLabelWidth = 0; }
tickLabelWidth = state.getMax() - 1;
tickLabelWidth = state.getMax(edge) + tickLabelHeight;
 tickLabelWidth = -5;
 tickLabelHeight = state.getMax;
 tickLabelWidth = 100
 tickLabelWidth = state.size();
tickLabelWidth = state.getMax() + 1.0;
tickLabelWidth = state.getMax() + tickLabelHeight
tickLabelWidth = state.getMax(); } { tickLabelHeight++;
 left = state.getMax();
 tickWidth = 2;
 tickLabelWidth = -3;
tickLabelWidth = state.getMax(edge); } else { return space;
 tickLabelWidth + *= state.getMax();
 tickLabelWidth = --state.getMax();
 tickLabelWidth = state(getMax);
tickLabelWidth = state.getMax(); } return g2;
 tickLabelWidth);
 tickWidth=(1);
 tickLabelWidth = null;
tickLabelWidth = state.getMax() + this.max();
 tickLabelLw = state.getMax();
 tickLabelWidth *>= state.getMax();
tickLabelWidth = state.getMax( ) + this.categoryLabelPosition();
 tickLabelWidth = 1 *= state.getMax();
tickLabelWidth = state.getMax(labelLabelHeight);
tickLabelWidth = state.getMax(); else { tickLabelHeight++;
 tickWidth = width();
tickLabelWidth = state.getMax() + "px";
tickLabelWidth = state.getMax() + this.width;
 tickLabelWidth +== state.getMax();
 tickLabelWidth = getWidth();
 tickLabelHeight = state.getMax();
tickLabelWidth = state.getMax(edge).getMax();
 labelWidth = 0;
 tickLabelWidth =
tickLabelWidth = state.getMax(axisLabelWidth);
 labelLabelWidth = state.getMax;
 tickLabelHeight = state.getMax;
 labelLabelWidth = state.getMax();
tickLabelWidth = state.getMax(edge) + 'px';
tickLabelWidth = state.getMax(axisLabelHeight);
tickLabelWidth = state.getMax(edge).getWidth();
tickLabelWidth = state.getMax(edge) + this.width;
tickLabelWidth = state.getMax(edge).getWidth(); }
tickLabelWidth = state.getMax() + ' ';
 tickLabelLeft = state.getMax();
 tickLabelWidth *-= state.getMax();
tickLabelWidth = state.getMax() + -1;
 tickLabelWidth = setMax();
tickLabelWidth = state.getMax() + 1
tickLabelWidth = state.getMax( ) + this.categoryLabel;
 tickLabelHeight +=
tickLabelWidth = state.getMax() - 2;
 tickLabelHeight and
 tickLabelWidth ||= state.getMax();
tickLabelWidth = state.getMax(tickLabelHeight); }
tickLabelWidth = state.getMax( ) + this.categoryWidth();
 tickLeft = state.getMax();
tickLabelWidth = state.getMax(edge).getMax(); }
tickLabelWidth = state.getMax(1.0);
tickLabelWidth = state.getMax() + 4;
 tickLabelWidth += -state.getMax();
 edge = state.getMax();
 tick =Width();
tickLabelWidth = state.getMax(plotArea, edge); }
 position = state.getMax();
 return space();
tickLabelWidth = state.getMax(geom.width());
 tickLabelWidth += state.getMax();
 tickLabel =
 --state.getMax();
 } else {
tickLabelWidth = state.getMax(geom.width);
 tickWidth =
tickLabelWidth = state.getMax(tickLabel);
tickLabelWidth = state.getMax(8);
 tickLabelWidth
 print(state);
 tickLabelWidth |= state.getMax();
tickLabelWidth = state.getMax(2px);
 update(state);
 tick(state);
 printLabelWidth);
 barWidth = state.getMax();
 tickLabelLeft();
 tickLabel &&
 tick =Left();
tickLabelWidth  = state.setMax();
tickLabelWidth = state.max
tickLabelWidth = state.length
 updateMax();
 setMax();
 printLabelWidth();
tickLabelWidth = state.getMax(true);
tickLabelWidth = stateMax();
tickLabelWidth = state.getMax() + 2
tickLabelWidth = state.;
 tickLabelX = state.getMax();
 tickLabelHeight;
tickLabelWidth = State.getMax();
 labelWidth ++;
 tickLabelHeight *= state.getMax();
 tickLabelLeft;
 return space);
 tickWidth ++;
 tickLabel();
 tickWidth();
 ++ state.getMax();
 tickLabelWidth>state.getMax();
 width ++;
 size ++;
 })();
 tickLabelWidth=(state.getMax();
 resize();
 return null;
 size=state.getMax();
 reset($);
 reset();
tickLabelWidth = state.getMax() + 3
 else {
 width --;
 } else
tickLabelWidth = state.getMax() + 4
 axisWidth= state.getMax();
 ticklabelWidth= state.getMax();
 } {
 } }
 states.getMax();
 else?
 this.getMax();
 state#getMax();
 -
 double
 +
tickLabelWidth -= state.getMax();
tickLabelWidth is state.getMax();
