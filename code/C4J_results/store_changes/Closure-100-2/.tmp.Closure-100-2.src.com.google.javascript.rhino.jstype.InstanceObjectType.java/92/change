return super.defineProperty(name, type, inferred, inExterns);
return super.defineProperty(name, type,  inferred);
return super.defineProperty(name,  type);
return super.defineProperty(name);
return  defineProperty(name, type, inferred, inExterns);
 return true;
 else { return true;
 else {
return super. defineProperty ( name, type, inferred )
return super. defineProperty ( name, type )
 define(name, type, inferred, inExterns);
 return type, inferred, inExterns);
 super.defineProperty(name, type, inferred, inExterns);
return super.defineProperty(name, JSType type, inferred, inExterns);
 return type(inferred, inExterns);
return super. defineProperty ( name )
 defineProperty(name, type, inferred, inExterns);
return super.defineProperty(name, type, inferred, false);
return super.defineProperty(name, type, inferred, inExterns, false);
 return inferred, inExterns);
return super.defineProperty(name, type, inferred, inExterns, true);
return super.defineProperty(name, type, boolean inferred, inExterns);
return super.defineProperty(name, type, inferred, inExternsOnly);
return super.defineProperty(name, type, inferred, inExternal);
return super.defineProperty(name, type, inferred, true);
return super.defineProperty(name, type, inferred, inExtern);
return  proto. getOwnDeclaredProperty(name, type, inferred, inExterns);
return super.defineProperty(Name, type, inferred, inExterns);
return  define(name, type, inferred, inExterns);
 else { return super.defineProperty(name, type, inferred, inExterns);
return super.defineProperty(name, type, inferred, inExternals);
 return inferred(inExterns);
 return define(type, inferred, inExterns);
 super(type, inExterns);
return  type. defineProperty ( name ) ;
 super.define(name, type, inferred, inExterns);
return super.defineProperty(name, type,! inferred);
return super. define ( ) ;
return super.defineProperty();
return super.defineProperty(name, type,  inferred, inExterns); return true;
return  type. defineProperty ( name, inferred ) ;
 else { return super.toString;
return super.defineProperty(name, type, inferred, inExtern());
 return defineProperty(type, inferred, inExterns);
 else { return super. defineProperty ( name, type ) ;
 else { return super. defineProperty ( name, type, inferred ) ;
 else { return super. defineProperty ( name, type )
return super.defineProperty(name, type, inferred, inExports);
 else { return super. defineProperty ( name, type ) ; }
return super.defineProperty(name, type,  inferred, inExterns)!= null;
return super.defineProperty(name,  type, inferred, inExterns); }
 else { super. defineProperty ( name, type, inferred ) ; }
return super.defineProperty(name, type, inferred, in);
return super.defineProperty(Name, type, inferred, inExterns, false);
 else { return super. defineProperty ( name, type, inferred ) ; }
return super. defineProperty ;
return  type. defineProperty ( name, inferred )
return super.defineProperty(Name, type, inferred, inExterns, true);
 else { super. defineProperty ( name, type, inferred ) ;
 else { return super.defineProperty(name, inferred, inExterns);
 else { super. defineProperty ( name, type ) ; }
 else { super. defineProperty ( name, type, inferred, inExterns )
 else { super. defineProperty ( name, type, inferred, in ) ;
return super.defineProperty(String name, type, inferred, inExterns);
return super.defineProperty(name, type, inferred, inExterns? true : false);
 else { super. defineProperty ( name, type, inferred, inExterns ) ;
 else { super. defineProperty ( name, type ) ;
return super ( type ) ;
 else { return super. defineProperty ( name, type, inferred, in ) ;
 else { return super.defineProperty(name);
return super.defineProperty(name, type, boolean inferred);
return super.defineProperty(name, type, inferred, inExterns || false);
 define(type, inferred, inExterns);
return super.defineProperty(name, type, inferred, inExterns) ; return false;
return super.defineProperty(name, type, inferred,  inExterns) ; } return false ;
return super.defineProperty(name, type, inferred, inInterns);
return super.defineProperty(name, type, inferred, inExterns, constructor, registry);
 else { return super. defineProperty ( name, type, inferred, inExterns )
return super.defineProperty(name, type, inferred, inExterns2);
return super ( ) ;
 else { super. defineProperty ( name, type, inferred, inExterns ) ; }
return super.defineProperty(Name, type, inferred, inExternsOnly);
return super.defineProperty(name, type, inferred, inExterns, true, false);
 else { return super.defineProperty(name, inExterns);
 return super.define(name, type, inferred, inExterns);
 else { return super.defineProperty(inferred, inExterns);
return super.defineProperty(name, type, inferred, inPrototypes);
return super.defineProperty(name, JSType. class, type, inferred, inExterns);
return super.defineProperty(name, type, inferred, inExterns, false, false);
 defineProperty(type, inferred, inExterns);
 super(type, inferred, inExterns);
return super.defineProperty(name, type,  inferred, inExterns) == false;
return super.defineProperty(registry, name, type, inferred, inExterns);
return super. defineProperty ( name, type, inferred ;
return super.defineProperty(name, type, inferred, inExterns, proto, false);
 return super.defineProperty(name, inExterns);
 else { return defineProperty(name, type, inferred, inExterns);
return super.defineProperty(name, type, inferred,  inExterns) ; } return true ;
 super.defineProperty(type, inferred, inExterns);
return super.defineProperty(name, type, inferred, inClass);
return super.defineProperty(name, type, inferred); }
 else { return super.define(name, type, inferred, inExterns);
 return type. defineProperty ( name, inferred,inExterns);
return super.defineProperty(name, JSType type, null, inferred, inExterns);
return super.defineProperty(name, JSType type, false, inferred, inExterns);
return super.defineProperty(name, type, inferred, inExterns &&! inferred);
 super(inferred, inExterns);
return  type. defineProperty ( name )
return super.defineProperty(name, type); }
 else { super. defineProperty ( name, type, inferred, inExternals )
return super.defineProperty(name, JSType type, true, inferred, inExterns);
 return super.defineProperty(name, inferred, inExterns);
 else { return super.define(type,inferred, inExterns);
return super.defineProperty(name, type, inferred,  inExterns); else { return false;
 return defineProperty(type, inExterns);
 else { return super. defineProperty ( name, type, inferred, inExternals )
 return super.defineProperty(inferred, inExterns);
 super.define(type, inferred, inExterns);
 if (super.defineProperty(name)) {
return super.defineProperty ( name, type, inferred, in )
 else { super. defineProperty ( name, type, inferred, in ) ; }
return super.defineProperty(name, type, inferred, inExterns, ".");
return super.defineProperty(name, type, inferred, inExterns) ; } return super. defineProperty ;
 return super(type, inferred, inExterns);
return super.defineProperty(name, type, inferred, inExternsFlag);
 if (type!= null) { return super.defineProperty(name, type, inferred); } if (inExterns!= null)
 else { return super.defineProperty(this.name, type, inferred, inExterns);
return super.defineProperty(name, type, inferred, inExterns1);
 else { return super. defineProperty ( name, type, inferred )
 else { return super.toString(inExterns);
 else { super. defineProperty ( name, type, inferred, inExterns ) ; } }
 else { super. defineProperty ( name, type, inferred ) ; } return inExterns ;
 else { return super. defineProperty ( name ) ; }
 else { return super. defineProperty ( name, type, inferred, in ) ; }
 super.defineProperty(name, inferred, inExterns);
 if (type!= null) { return super.defineProperty(name, type, inferred, inExterns); }
return super.defineProperty(name, type, inferred, inExterns, nativeType);
 if (type == null) { return inferred ; } else { return true ;
 else { super. defineProperty ( name, type, inferred ) ; } return true ; }
return super.defineProperty(name, type, inferred, inStatic);
 else { return super.defineProperty(type, inferred, inExterns);
 super(type);
 else { super. defineProperty ( name, type, inferred ) ; } return true ;
 else { return defaultValue;
return super.defineProperty(name, type, inferred, inExternal());
return super.defineProperty(name, type, inferred,  inExterns); else { return true;
return super.defineProperty(name, type, inferred, inExterns,! inferred);
return  proto. defineDeclaredProperty(name, type, inferred, inExterns);
 return defineProperty(name, type, inExterns);
 else { super. defineProperty ( name, type, inferred ) ; return true ;
return super.defineProperty(name, type, inferred, inExterns) ; } return super. defineProperty ( ) ;
 super.defineProperty(name, inExterns);
 return super.define(type);
 if (type!= null) { return super.defineProperty(name, type, inferred); } else if (inExterns) {
 this.defineProperty(name, type, inferred);
 if (type == null) { return inferred ; } else { return true ; }
 return type. defineProperty(inferred, inExterns);
return super.defineProperty(name, type, inferred, inExterns, superClass);
return super.defineProperty ( name, type, inferred, false )
 return defineProperty(inferred, inExterns);
return super.defineProperty(Name, type, inferred, inExternal);
 return super(type, inExterns);
return  proto. setDeclaredProperty(name, type, inferred, inExterns);
 else { super. defineProperty ( name, type, inferred ) ; } }
 if (inExterns) { return inferred;
 else { return false ; } return true;
return super.defineProperty(name, JSType. class, inferred, inExterns);
 else { return defineProperty(type, inferred, inExterns);
return super. defineProperty ( name, type ;
 else { return false;super.defineProperty(name, type, inferred, inExterns);
 if (super.defineProperty(name, type)) {
 else { super. defineProperty ( name, type, inferred ) ; } return inExterns
return super.defineProperty(name, JSType type, proto, inferred, inExterns);
 else { return super.toString(type);
return  proto. hasOwnDeclaredProperty(name, type, inferred, inExterns);
 return super.defineProperty(name, type, inExterns);
return  proto. get ( ). defineProperty(name, type, inferred, inExterns);
 else { return super.create(type);
return  type. defineProperty ( name, declared ) ;
return  type. defineProperty ( name, type ) ;
return super.definedProperty(name, type, inferred);
 else { super. defineProperty ( name, type, inferred, inExterns, false ) ;
return super.defineProperty(name, type, inferred, inList);
return super.defineProperty(Name, type, inferred);
 return super.define(type,inferred, inExterns);
 return type.define(inferred, inExterns);
return super.defineProperty(name); }
 if (inExterns) { return true;
return super. define ( type )
 return true);
 else { super. defineProperty ( name, type ) ; } return true ;
return  proto. getDeclaredProperty(name, type, inferred, inExterns);
 else { return defineProperty(name, inExterns);
 else { return super.define(name);
 else { super. defineProperty ( name, type, inferred, inExterns, true ) ;
 return type(super,inExterns);
return super.defineProperty(Name, type, inferred, false);
return  proto. getOwner ( ). define(name, type, inferred, inExterns);
 else { return super.defineOwnProperty(name, type, inferred, inExterns);
return super.defineProperty(name, type, inferred, inExterns) ; } else { return false ; }
 if (type!= null) { return super.defineProperty(name, type, inferred) ; } if (inExterns) {
 if (type == null) { return inferred ; } else { return type. name ; }
return super.defineProperty(String name, JSType.class, type, inferred, inExterns);
 else { super. defineProperty ( name, );
return super.defineProperty(name, type), inferred, inExterns);
return super.defineProperty(name, JSType type, descriptor, inferred, inExterns);
return super.defineProperty(name, type, inferred, inPlace);
 return defineProperty(name, inExterns);
 else { super. defineProperty ( name, type ) ; return true ;
 else { super.defineProperty(name, type;
return super.defineProperty(name, type, inferred, inScope);
 else { return true ; } return false;
 if (super!= null) {super.defineProperty(name, type, inferred, inExterns);
return  true ; }
 if (super.defineProperty(name, type, inferred)) {
 else { return defineProperty(inferred, inExterns);
 else { super. defineProperty ( name, type, inferred, inExterns, proto ) ;
 this(registry, proto, type, inferred);
 super.defineProperty(name, type, inExterns);
 else { return super. defineProperty ( name, type, inferred, inExtern )
return super.defineProperty(Name, Type, inferred, inExterns);
 else { return defineProperty(name, inferred, inExterns);
return  type. defineProperty ( name, declared )
 else { super. defineProperty ( name, type, inferred )
return super. define ( name, type ) ;
 if (type!= null) { return super.defineProperty(name, type, inferred); } else { if (inExterns)
 if (type!= null && type. hasOwnProperty ( name ) ) {
 return defineProperty(name, type, boolean inferred, inExterns);
 else { return super.definePropertyImpl(name, type, inferred, inExterns);
 return type. defineProperty ( name,!inExterns);
 else { return super.define(type);
 else { return super(type);
 return type. defineProperty(name,inExterns);
 return super.define(name);
 if (type == null) { return false; } if (super!= null) {
 else { return super.define(type, inExterns);
 else { return super(type, inferred, inExterns);
 return defineProperty(name, supertype, inferred, inExterns);
 if (super.hasOwnProperty(name, type, inferred)) {
return super.defineProperty(name, type, inferred, inExterns); else { return false ; }
 return defineProperty(Name, type, inferred, inExterns);
 else { return super.define (name, type);
 else { return define(type, inferred, inExterns);
 return super(type, inferred);
 if (super.hasOwnProperty(name, type)) {
return  proto. getOwnDeclaredPropertyImpl(name, type, inferred, inExterns);
return super.toString();
 if (type == null) { return inferred ; } return inExtern
return super.defineProperty(Name, type, inferred, true);
 if (inExterns) return true;
 if (type!= null) { return super.toString();
return  proto. defineProperty ( name ) ;
 return defineProperty(Name name,type, inferred, inExterns);
return super.defineProperty(name, type, inferring);
 if (super.definedProperty(name, type)) {
 if (super.hasOwnProperty(name)) {
 if (super!= null) {
 else { return Reflector.defineProperty(name, type, inferred, inExterns);
return super.defineProperty(name, JSType ) type, inferred, inExterns);
return super.defineProperty(name, type, inferred, inExterns, proto);
return super.defineProperty(String name, JSType, type, inferred, inExterns);
 else { return -1;
 else { return super.defineProperties(name, type, inferred, inExterns);
return super.defineProperty(Name, JSType. class, type, inferred, inExterns);
return super.defineProperty(name, type, inferred, false, inExterns);
 else { proto = null ; } proto.defineProperty(name, type, inferred, inExterns);
 if (super!= null) { return _super.defineProperty(name, type, inferred, inExterns);
 this(registry, proto, inferred);
return super.defineProperty(name type);
 else { return super.definePropertyImpl(type, inferred, inExterns);
 else { super.defineProperty(name, type, inExterns);
 if (type!= null && type. hasOwnProperty ( name)) { return false; }
return super.defineProperty(name, type, inferred, inExterns());
 else { super. defineProperty ( name, type, inferred, inExterns ) }
 else { return define(name, type, inferred, inExterns);
 else { return super.toString(name);
return super. defineProperty ( name ;
 this(registry, type, inferred);
return  type. getProperty ( name ) ;
return  proto. getProperty ( ). put(name, type, inferred, inExterns);
 return type. defineProperty ( name, type,inferred, inExterns);
 else { return inferred ; } return true;
 if (type!= null && type. hasOwnProperty ( name)) { return false; } else {
 if (super.defineProperty() ) {
 if (type!= null) { return super.defineProperty(name, type, inferred); } if (inExterns!= null){
 } else { return super.defineProperty(name, type, inferred, inExterns); } } else {
return super.defineProperty(name, JSType { }, inferred, inExterns);
 if (type!= null && type. isOwnProperty ( name ) ) {
 else { super. defineProperty ( name, type, inferred ) ; } } return true ; }
 else { return super.define ( name, type, inExterns);
 else { super.defineProperty(name,inferred, inExterns);
 else { return proto. defineDeclaredProperty(name, type, inferred, inExterns);
 } else { return super.defineProperty(name, type, inferred, inExterns); } else {
 else { super. defineProperty ( name, type, inferred, ) ;
return super.defineProperty(name, JSType, type, inferred, inExterns);
 if (type!= null) { return super.defineProperty(name, type, inferred, inExtterns); }
 else { return super.toObject(type);
 if (type!= null && type instanceof JSType) {
 if (super.hasOwnProperty(name, type, inExterns)) {
 if (type!= null && type instanceof ObjectType) {
 return super.defineProperty(this.name, type, inferred, inExterns);
 else { return proto. getOwnDeclaredProperty(name, type, inferred, inExterns);
 if (super.definedProperty(name)) {
 if (inExterns!= null && inExterns) {
 if (type == null) { return false; } if (super.defineProperty() ) {
 else { return (ObjectType) super.defineProperty(name, type, inferred, inExterns);
 return defineProperty(name, _type, inferred, inExterns);
return  type. defineProperty ( name, infer ) ;
 return defineProperty(name, this.type, inferred, inExterns);
 else { return super.defineProperties(type, inferred, inExterns);
 if (inExterns!= null && inExterns!= proto) {
return super.defineProperty(name, type, inferred, inExterns); else { return true ; }
 super(type, name, inferred, inExterns);
 else { return super.toString(inferred, inExterns);
 else { return super.definePrototype(type, inferred, inExterns);
 if (type!= null && type. hasOwnProperty ( name, inferred)) {
 else { super. defineProperty ( name, type, inferred ) ; } return true ; } }
return  super. defineProperty ( ). put(name, type, inferred, inExterns);
 else { return true ; } return inferred;
 return super.defineProperty(name,!inExterns);
 } else { super. defineProperty(name, type, inferred, inExterns); } } else {
 else { super.defineProperty(this.name, type, inferred, inExterns);
 super.defineProperty(this.name, type, inferred, inExterns);
return  super. defineDeclaredProperty(name, type, inferred, inExterns);
 else { proto = null ; } return proto.defineProperty(name, type, inferred, inExterns);
 else { return ObjectType.defineProperty(name, type, inferred, inExterns);
 if (super.hasOwnProperty(name))
 else { return type. defineProperty(name,inferred, inExterns);
 return super. defineProperty ( name, null, type, inferred, inExterns);
 else { super. defineProperty ( name, type, inferred ) ; } return super. prototype ;
 if (type == null) { return false; } if (super.defineProperty!= null) {
 return defineProperty(name);
 else { return super.define(inferred, inExterns);
 else { return super.definePropertyImpl(name, inferred, inExterns);
 else { return true ; } return super.defineProperty(name, type, inferred, inExterns);
return super.defineProperty(name, JSType type, null, null, inferred, inExterns);
 else { return super.hasDeclaredProperty(name, type, inferred, inExterns);
 else { return infer(type, inExterns);
return super.defineProperty(name, type, inferred, inExterns); return super. defineProperty ( name ) ;
 if (type!= null) { return super.defineProperty(name, type, inferred, inExterns)); }
 else { return super.create(inferred, inExterns);
return super. define ( name, type, inferred )
return super.defineProperty(name, JSType type, false, false, inferred, inExterns);
 return super().defineProperty(name, type, inferred, inExterns);
return super.defineProperty(name, type, inferred, inExterns) ; } return super ( registry ) ;
 return type. define ( name,inferred, inExterns);
return super.defineProperty(name, type, inferred, inExterns) ; return super. defineProperty ;
return super.defineProperty(name, type, inferred, inExterns) ; } else { return true ; }
 else { return super.defineDeclaredProperty(name, type, inferred, inExterns);
 else { return super.create(type, inExterns);
return super.defineProperty(Name, JSType, type, inferred, inExterns);
 return defineProperty(name, inferred, inExterns);
 else { return super.toString);
 if (type!= null) { return super.defineProperty(name, type, inferred); } if (super) {
return super.defineProperty(name, type, inferred, inExterns); else { return super.defineProperty();
return super.defineProperty(name, type, inferred, inExterns, proto.getName ( ));
return super.defineProperty(String name, null, type, inferred, inExterns);
 if (type!= null && type instanceof Class) {
return super.defineProperty(name,  type, inferred, inExterns); {
 if (type!= null && type. hasOwnProperty ( name)) { return false;
 else { return true;super.defineProperty(name, type, inferred, inExterns);
return  type. get ( ) ;
 else { return type!= null;
return super.defineProperty(name, JSType { type, inferred, inExterns);
 else { return super().defineProperty(this.name, type, inferred, inExterns);
return  type. getProperty ( name )
 if (type!= null && type. hasOwnProperty ( name)) { return true; } else {
return super.defineProperty(name, type, boolean inferred, false, inExterns);
 return definePropertyImpl(name, type, inferred, inExterns);
 return defineProperty(String name, type, inferred, inExterns);
return super.defineProperty(name), type, inferred, inExterns;
 return define(type, inExterns);
 if (type!= null) { return super.defineProperty(name, type, inferred, inExternals); } else
 else { return super.definePrototype(name, type, inferred, inExterns);
 return null);
 return name, type, inferred, inExterns);
 if (type!= null && type. hasOwnProperty ( name)) { return true; }
 else { return defineProperty(name, supertype, inferred, inExterns);
return super. defineProperty ( type ) ;
return super.defineProperty(name, type, inferred, inExterns)? true : false;
return super.defineProperty(name, type, inferred, inExterns) ; return super. defineProperty ( name )
 if (type!= null && type. hasOwnProperty ( name)) { return true;
 super.defineProperty(name);
 if (type == null) { return false; } if (super.defineProperty(name)) {
 if (type!= null && type. isMemberOf ( proto)) { return false; } else {
 return type.create(inferred, inExterns);
 return super.definePropertyImpl(name, type, inferred, inExterns);
return super ( registry, type, inferred, false )
 else { return proto. get ( ).defineProperty(name, type, inferred, inExterns);
 if (inExterns!= null && inExterns!= proto)
 if (super!= null) { return proto.super.defineProperty(name, type, inferred, inExterns);
 return defineProperty(name, type,! inferred, inExterns);
 else { proto = null ; } proto. define(name, type, inferred, inExterns);
 if (type!= null && type. hasOwnProperty ( name, type)) {
 return super.define(type, inExterns);
return super.defineProperty(name, type, isNativeType, inferred, inExterns);
return super.defineProperty(name, type, inferred, inExterns) ; } return super. define ( ) ;
 if (super!= null) { super.super.defineProperty(name, type, inferred, inExterns);
 else { return "null";
return super.defineProperty(name, type, inferred, inExterns, proto.getOwnDeclaredProperty());
 else { return defineProperty(String name, type, inferred, inExterns);
return super.definedProperty(name, type);
 else { return proto ; } return super.defineProperty(name, type, inferred, inExterns);
 return super ( type, name, inferred, inExterns);
return super.defineProperty(Name, null, type, inferred, inExterns);
 else { proto = getConstructor(); } proto.defineProperty(name, type, inferred, inExterns);
 else { return inferred ; } return false;
 return super. defineProperty ( name, this.type, inferred, inExterns);
return super.defineProperty(name, type, inferred, inExterns) ; } return super. defineProperty ( name )
 else { return false ; } } return true;
 else { return inferred(inExterns);
 } else { super. defineProperty (name, type, inferred, inExterns); } else {
return super.defineProperty(String name, JSType type, type, inferred, inExterns);
return super.defineProperty(name, type, inferred, true, inExterns);
 else { super. toString ( ) ; super.defineProperty(name, type, inferred, inExterns);
 else { proto = null ; proto.defineProperty(name, type, inferred, inExterns);
return super.defineProperty(name, type, inferred, inExterns) ; } else { return false ;
return super.defineProperty(name, type, false,! inferred, inExterns);
 if (super!= null) { return false;super.defineProperty(name, type, inferred, inExterns);
 } else { return super.defineProperty(name, type, inferred, inExterns); } else
 } else { return super.defineProperty(name, type, inferred, inExterns); } }
return super.defineProperty(name, JSType type, proto, false, inferred, inExterns);
return super.defineProperty(name, type, inferred = inferred);
 if (super.isOwnProperty(name)) {
 else { return super(type,inExterns);
 else { return super.(name);
return super.defineProperty(name, JSType type, proto, null, inferred, inExterns);
return super.defineProperty(name, type,! inferred, inExterns);
 else { return true ; } super.define(type, inferred, inExterns);
 defineName, type, inferred, inExterns);
return super.defineProperty(name, type, inferred, inExterns) ; } return super. defineProperty ; }
 else { return super.definePrivateProperty(name, type, inferred, inExterns);
return super.defineProperty(name, type, inferred, inExterns, registry, constructor, false);
 if (type!= null && type. isInstanceType ( ) ) { return false ; }
 if (inExterns) return inferred;
 if (type!= null && type. hasOwnProperty ( name )!= null)
 return proto. defineProperty(this.name, type, inferred, inExterns);
 else { return super.create(type, inferred, inExterns);
 return defineProperty(name, type, inferred,inferred, inExterns);
 if (super!= null) { super = super.defineProperty(name, type, inferred, inExterns);
 else { return (ObjectType) registry.defineProperty(name, type, inferred, inExterns);
 else { return defineProperty(type, inExterns);
 else { return super.toObject(type,inExterns);
 else { return type = super;
return super ( type )
 else { return proto. defineOwnDeclaredProperty(name, type, inferred, inExterns);
return super.defineProperty(name, type, inferred, inExterns) ; } return super. create ( ) ;
 else { return super.definePropertyName(type, inferred, inExterns);
 else { return super.class;
 return type. defineProperty ( name, (inExterns);
 return defineProperty(name, super.type, inferred, inExterns);
 if (type!= null && type. isInstanceOf ( proto)) {
 return defineProperty(name,! inferred, inExterns);
 return super ( type, inferred,inferred, inExterns);
 else { proto = getImplicitPrototype(name, type, inferred, inExterns);
 else { return JSType.defineProperty(name, type, inferred, inExterns);
 return super.defineProperty(name, _type, inferred, inExterns);
 return super ( type, inferred,!inExterns);
return super.defineProperty(name, type, inferred, inExterns) ; } else { return super. defineProperty ;
 else { return (Object) super.defineProperty(name, type, inferred, inExterns);
return super.defineProperty(name, type, inferred, inExterns) ; return super. defineProperty();
 return super.defineProperty(type, inferred, inExterns);
return super.defineProperty(name, type, inferable);
 else { return _super.defineProperty(name, type, inferred, inExterns);
return  super.defineOwnProperty(name, type, inferred, inExterns);
return super.defineProperty(name, type, inferred, proto.getName ( ), inExterns);
 else { return definePropertyImpl(name, type, inferred, inExterns);
 if (!inExterns);
 else { super(type, inExterns);
return super.defineProperty(name, type, inferred) ; super.define(name, inExterns);
return  type. create ( ) ;
 return definePropertyInternal(name, type, inferred, inExterns);
 else { return true ; } return Reflector.defineProperty(name, type, inferred, inExterns);
 return super. defineProperty ( name, ".", type, inferred, inExterns);
 if (super.isProperty(name)) {
 return definePropertyImpl(type, inferred, inExterns);
 else { return defaultType;
 if (inExterns) {
return super. define ( name )
return super.definePropertyName(name);
return super.defineProperty(name, type, boolean inferred, true, inExterns);
 else { super.defineProperty(name, _type, inferred, inExterns);
 super.definePropertyImpl(name, type, inferred, inExterns);
 return type.defineProperty(inExterns);
 return super.defineProperty(inExterns);
 super.defineProperty(name,! inferred, inExterns);
return  type. defineProperty ;
return super.defineProperty(name, type, false, inferred, false, false, inExterns);
return super.defineProperty(String name, JSType descriptor, type, inferred, inExterns);
 super.defineOwnProperty(name, type, inferred, inExterns);
 return defineProperty(Name, null, type, inferred, inExterns);
return super. define ( name, type )
 if (type!= null && type. hasOwnProperty ( name)) { return false; } else
 else { super.defineProperty(name);;
 else { return true ; } super ( ).defineProperty(name, type, inferred, inExterns);
return super. defineProperty ( )
 else { return super.defineProperty(prototype.name, type, inferred, inExterns);
 else { return super ( ).defineProperty(name, type, inferred, inExterns);
return super.defineProperty(String name, JSType constructor, type, inferred, inExterns);
return super.defineProperty(name, type, inferred, inExterns) ; } return super. constructor ;
 else { return getConstructor().defineProperty(name, type, inferred, inExterns);
 else { super.defineProperty(name);
 else { return false ; } return super.defineProperty(name, type, inferred, inExterns);
 if (super!= null) { return!!super.defineProperty(name, type, inferred, inExterns);
 if (type!= null && type. hasOwnProperty ( name)) { return true; } else
 else { super.defineProperty(name, supertype, inferred, inExterns);
 } else { return super. defineProperty(name, type, inferred, inExterns); } } public String toString() {
return super.defineProperty(name, type, inferred, inExterns); else { return false ; } }
return super.defineProperty(java.lang.Object, name, type, inferred, inExterns);
return super.defineProperty(ObjectType. class, name, type, inferred, inExterns);
 else { return super.defineProperty(String name, type, inferred, inExterns);
 if (type!= null && type. hasOwnProperty ( name)) { return false; } }
 else { super(type, inferred, inExterns);
return super.defineProperty(name, type, inferred, inExterns) ; } else { return false ; } }
 else { return false ; } return Reflector.defineProperty(name, type, inferred, inExterns);
return super.defineProperty(name, type, false, inferred, false, inExterns);
 else { return type(inferred, inExterns);
 else { } return true;
return super.defineProperty(Name name, JSType. class, type, inferred, inExterns);
 super.defineProperties(name, type, inferred, inExterns);
 return (type);
return super.defineProperty(name, type, inferred, inExterns) ; return true ; }
 return (type, inExterns);
 } else { return super. defineProperty(name, type, inferred, inExterns); } if (inferred) {
 else { return superdefineProperty(name, type, inferred, inExterns);
 else { super.defineOwnProperty(name, type, inferred, inExterns);
return super.defineProperty(name, JSType, inferred, inExterns);
return super.defineProperty(name, type, inferred, inExterns, inExterns);
return super.defineProperty(name, type, false, false,! inferred, inExterns);
 } else { return super. defineProperty(name, type, inferred, inExterns); } if (inExterns)
 else { return this.defineProperty(this.name, type, inferred, inExterns);
 return infer(type, inExterns);
 return defineProperty(name, null, type, inferred, inExterns);
 super.define(inferred, inExterns);
 else { super.define(name, type, inferred, inExterns);
 return proto. defineProperty ( "name, type, inferred, inExterns);
return super.defineProperty(name, type, inferred, inExterns, proto.getOwnProperty(name);
return super.defineProperty(name, type, inferred, inExterns, proto.getClass ( ));
return super.defineProperty(Name name, JSType, type, inferred, inExterns);
 else return true;
 else { return super.defineProperty(name type);
 else { proto = getConstructor ( ).defineProperty(name, type, inferred, inExterns);
return super.toString(name);
return super.defineProperty(name, type, inferred, inExterns, proto).getOwnProperty(name);
 else { return super.getName);
 } else { return super. defineProperty ( name, type, inferred, inExterns ) ; } } public String name() {
 if (super!= null) { return this.super.defineProperty(name, type, inferred, inExterns);
 super.define ( name, type, inExterns);
 else { return super.create();
 return type.prototype(inferred, inExterns);
return super ( registry, type, inferred )
 else { super.definePropertyImpl(name, type, inferred, inExterns);
 return super. defineProperty ( name, constructor, type, inferred, inExterns);
 if (super!= null) { return true;super.defineProperty(name, type, inferred, inExterns);
return super.defineProperty(name, type,  inferred, inExterns); ;
 return def(type, inExterns);
return  super. definePrototype(name, type, inferred, inExterns);
 else { return super.definePropertyImplicit name, type, inferred, inExterns);
 if (super!= null) { returnsuper.defineProperty(name, type, inferred, inExterns);
 else { return true ; } super.defineProperty(name, type, inferred, inExterns);
 return true ; } else {
 else { return defineProperty(Name, null, type, inferred, inExterns);
 else { return true ; } return super. _defineProperty(name, type, inferred, inExterns);
 else { return ".";
return super.defineProperty(name, type, inferred, inExterns, this.constructor, false);
 else { return this.prototype.defineProperty(name, type, inferred, inExterns);
return super.defineProperty(name,! inferred);
 else { return infer(inExterns);
 return type. defineProperty ( name,!inferred, inExterns);
 super(name, type, inferred, inExterns);
 else { return super.__defineProperty(name, type, inferred, inExterns);
 else { return Constructor.defineProperty(name, type, inferred, inExterns);
 else { return this. super.defineProperty(name, type, inferred, inExterns);
 if (super.defineProperty!= null)
 super.definePropertyImpl(type, inferred, inExterns);
return super.defineProperty(String name, JSType.class, name, type, inferred, inExterns);
return super.defineProperty(name, type); ;
 else { return defineProperty(name, null, type, inferred, inExterns);
return super. definePropertyName ( name )
 else { return super().defineProperty(String name, type, inferred, inExterns);
 return defineProperty(String name, null, type, inferred, inExterns);
return super.defineProperty(JSType. class, name, type, inferred, inExterns);
 else { return type == null;
 defineProperty(Name, type, inferred, inExterns);
return super.defineProperty(name, type, inferred, inExterns) == true;
return super.defineProperty(name, type, false, false, inferred, false, inExterns);
return super.defineProperty(name, type, false, inferred, true, inExterns);
return super.defineProperty(name, type, inferred, inExterns, registry, serialVersionUID, false);
 else { return false ; } super.defineProperty(name, type, inferred, inExterns);
 } else { return super. defineProperty(name, type, inferred, inExterns); } if (inExternalType) {
return super.defineProperty(name, type, inferred, inExterns) ; } return constructor ; }
 } else { return super. defineProperty ( name, type, inferred, inExterns ) ; } } } else {
 if (super.defineProperties()) {
return super.defineProperty(name,...args);
 } else { return super. defineProperty ( name, type, inferred, inExterns ) ; } } else { return false ;
 return super. defineProperty ( "name, type, inferred, inExterns);
 return super.(name);
return super.defineProperty(JSType registry, name, type, inferred, inExterns);
 type.define(inferred, inExterns);
return super.defineProperty(String name, null, null, type, inferred, inExterns);
return super.defineProperty(name, type, inferred, inExterns, super.toString);
 else { proto = getImplicitPrototypeOf(name, type, inferred, inExterns);
return super.defineProperty(name, type, inferred, inExterns, proto.getType ( ));
 if (type == null) { return false; } if (super!= null) { {
return super.defineProperty(name, type, inferred);(this, name, type, inferred, inExterns);
 else { return ObjectUtils.defineProperty(name, type, inferred, inExterns);
 else { return objectType.defineProperty(name, type, inferred, inExterns);
return super.defineProperty(name, type, inferred, inExterns, proto) ; } return super(name);
return super.defineProperty(name, type, inferred, inExterns, registry, constructor, nativeType);
 return Reflector.defineProperty(name, type, inferred, inExterns);
return super.defineProperty(name, JSType registry, Object type, inferred, inExterns);
return super.defineProperty(name, type, inferred, inExterns, this.constructor, registry, constructor);
return super.defineProperty(name, type, inferred, name, name, type, inferred, inExterns);
 else { if (super!= null)super.defineProperty(name, type, inferred, inExterns);
return super.createProperty(name);
 else { return (type);
return  type. defineProperty();
 else { return deflate(inExterns);
 else { proto = null ; } proto. put(name, type, inferred, inExterns);
 } else { return super. defineProperty (name, type, inferred, inExterns ) ; } } else
 } else { return super. defineProperty ( name, type, inferred, inExterns ) ; } return true ; default :
return super.defineProperty(name, type, inferred, proto.getType ( ), inExterns);
return super.defineProperty(name, type, proto, inferred, inExterns);
return super.defineProperty(name, type,  inferred || inExterns);
 return super(name);
return super.defineProperty(name, type, inferred, inExterns++);
return super.defineProperty(Name, type, inferred);(this, name, type, inferred, inExterns);
return super.defineProperty(name, type, inferred, proto.getClass ( ), inExterns);
 else { return (null);
return super.defineProperty(name, type, false, inferred, false, true, inExterns);
 else { return true ; } return this. super.defineProperty(name, type, inferred, inExterns);
 return type(name);
return super.defineProperty(String name, constructor, type, inferred, inExterns);
 return defineProto(type, inferred, inExterns);
return super.defineProperty(name, type,  inferred = inExterns);
 else { infer(inExterns);
 else { return type.create(inExterns);
return super.toString(type);
return super.defineProperty(name, type, false, inferred, true, false, inExterns);
return super.defineProperty(name, type, inferred, inExterns, proto.getOwnProperties(name);
 else { super.toString(name);super.defineProperty(name, type, inferred, inExterns);
return super.defineProperty(name, null, null, type, inferred, inExterns);
return super.defineProperty(name, type, inferred, inExterns) ; } return null ; } ;
 else { super. toString ( ) = registry.defineProperty(name, type, inferred, inExterns);
return super.defineProperty(name, type, inferred, inExterns, this.constructor, registry, false);
return super.defineProperty(name, type, inferred, inExterns, proto.getPrototype ( ));
 return true(inExterns);
return super.defineProperty(name, type), inferred;
 if (type!= null && type. hasOwnProperty(name)) { }
 if (super.defineProperty(name, type) { }
return super.defineProperty(name, type, inferred, inExterns, this.constructor, nativeType);
return super.defineProperty(name,... arguments);
 else { return super.create(inExterns);
 return infer(inExterns);
 else { return true ; } super.prototype.defineProperty(name, type, inferred, inExterns);
 else { return this.reflector.defineProperty(name, type, inferred, inExterns);
 if (super!= null) { _super.defineProperty(name, type, inferred, inExterns);
return super.defineProperty(Constructor.class, name, type, inferred, inExterns);
 return! inferred;
return  super. definePropertyInPrototype(name, type, inferred, inExterns);
 else { return this.builder.defineProperty(name, type, inferred, inExterns);
return super.addProperty(name);
 else { return "unknown property.";
 else { return proto.super.defineProperty(name, type, inferred, inExterns);
 return type(super);
 return super. defineProperty ( name,!inferred, inExterns);
 return type(inExterns);
 else { return "unknown property";
 else { inferred(inExterns);
 if (super.hasOwnProperty(name, type, inferred)) { }
return super.defineProperty(name, this.prototype, type, inferred, inExterns);
return super.defineProperty(Name, type, inferred, name, name, type, inferred, inExterns);
return super.defineProperty(Name, type, inferred; return null, name, type, inferred, inExterns);
 else { return "Unknown property.";
 if (type!= null && type. hasOwnProperty ( name )!= null))
return super.defineProperty(this.prototype, name, type, inferred, inExterns);
return super.defineProperty(name, type, inferred, inExterns, registry, constructor, true);
 return super ( type, name,!inferred, inExterns);
 return ObjectType.defineProperty(name, type, inferred, inExterns);
 if (inExterns)
 return super().define(name, type, inferred, inExterns);
 super().define(name, type, inferred, inExterns);
 if (super.hasOwnProperty(name, type) { }
 if (type!= null) {
 } else { return super. defineProperty ( name, type, inferred, inExterns ) ; } } else { }
 else { return false;
 else { proto = null ; super.defineProperty(name, type, inferred, inExterns);
 else { return defaultValue(inExterns);
return super.defineProperty(this, registry, name, type, inferred, inExterns);
 proto.define(name, type, inferred, inExterns);
 else { return (void) super.defineProperty(name, type, inferred, inExterns);
return super.defineProperty(name, type, true, inferred, false, inExterns);
 else { return true ; } return _super.defineProperty(name, type, inferred, inExterns);
 super.set(name, type, inferred, inExterns);
return super.defineProperty(Name, JSType. class, name, type, inferred, inExterns);
return super.defineProperty(name, JSType (type), null, inferred, inExterns);
return super.defineProperty(Name, type);
 super.property(name, type, inferred, inExterns);
 if (super!= null) { return!super.defineProperty(name, type, inferred, inExterns);
return super.defineProperty(Name, type, inferred; return super, name, type, inferred, inExterns);
 return define(type);
return super.class;
 else { super.super.defineProperty(name, type, inferred, inExterns);
return super.defineProperty(name, *type);
return super.defineProperty(ClassType. class, name, type, inferred, inExterns);
return super.defineProperty(ObjectType.class, registry, name, type, inferred, inExterns);
 if (super.defineProperty) {
return super.defineProperty(name), type, inferred;
 else { return "unknown property!";
return super.defineProperty(name, JSType type, type, inferred, inExterns);
return super.defineProperty(name, type, inferred, inExterns) || return false;
 else { super(inferred, inExterns);
 } else { return super. defineProperty(name, type, inferred, inExterns); } return false ; } }
return super.defineProperty(name, type, inferred, proto, name, type, inferred, inExterns);
 return false ; } else {
return  type = super ;
 if (super.hasOwnProperty(name)) { }
 if (super instanceof ObjectType)
 } else { return super. defineProperty(name, type, inferred, inExterns); } } else { } }
return super.defineProperty(Name, constructor, type, inferred, inExterns);
 return create(type, inferred, inExterns);
 if (super.hasOwnProperty(name, type)) { }
 } else { return super. defineProperty(name, type, inferred, inExterns); } return false ; } else
 if (super.defineProperty(name, type) { {
return super.defineProperty(name, JSType constructor, type, inferred, inExterns);
 else { proto = super.defineProperty(name, type, inferred, inExterns);
 return getConstructor().defineProperty(name, type, inferred, inExterns);
return super.defineProperty(name, type, boolean inferred, null, inExterns);
 proto. defineProperty(name, type, inferred, inExterns);
 super().defineProperty(name, type, inferred, inExterns);
 else { return m_builder.defineProperty(name, type, inferred, inExterns);
return super.defineProperty(name, propertyType);
return super.defineProperty(name, type, inferred, inExterns, proto, false, false);
 else { return super.definePropertyFromClass(name, type, inferred, inExterns);
 else { return true ; } return "super.defineProperty(name, type, inferred, inExterns);
return super ; }
 else { proto = registry.defineProperty(name, type, inferred, inExterns);
 else { return true ;
return super.defineProperty(name, type, false, false, boolean inferred, inExterns);
return  proto. getOwnDeclaredField(name, type, inferred, inExterns);
return super.defineProperty(name, type, false, boolean inferred, inExterns);
 else { return "(null);
 return true ; } else {super.defineProperty(name, type, inferred, inExterns);
return super.defineProperty(Name, name, type, inferred, inExterns);
 if (inExterns);
return super.defineProperty(java.lang.String, name, type, inferred, inExterns);
 define(type, inExterns);
return  proto. getOwnDeclaredMethod(name, type, inferred, inExterns);
 else { return registry.defineProperty(name, type, inferred, inExterns);
 if (super.defineProperty(name)) { }
 else { return (!inExterns);
return  superdefineProperty(name, type, inferred, inExterns);
return super.createProperty();
 return super.__defineProperty(name, type, inferred, inExterns);
return super.defineProperty(Name); }
 if (super.definedProperty(name)) { }
return super.defineProperty(Name.getInstance ( ), name, type, inferred, inExterns);
return super.defineProperty(name, type, inferred); {
 return (ObjectType)super.defineProperty(name, type, inferred, inExterns);
 if (inferred) {
return super.defineProperty(name, { type});
return super.defineProperty(name, type, inferred, inExterns) || false;
 return super. _defineProperty(name, type, inferred, inExterns);
 } else {
return super. default ;
 super.properties(type, inferred, inExterns);
 else { return "Unknown(inExterns);
 setProperty(name, type, inferred, inExterns);
 super.add(type, inferred, inExterns);
 return (true);
return super.defineProperty(); }
return super.defineProperty(Object.class, name, type, inferred, inExterns);
return super.defineProperty(Name.STRING, type, inferred, inExterns);
return super.defineProperty(Name, ".", type, inferred, inExterns);
return  type = constructor ;
return  super. definePropertyInner(name, type, inferred, inExterns);
return super.defineProperty(name, type, inferred, inExterns, false, true);
 return this.prototype.defineProperty(name, type, inferred, inExterns);
return super. true ;
 if (isNativeType) {
return super.defineProperty(ObjectType.class.NAME, name, type, inferred, inExterns);
return super. false ;
return  registry. defineProperty(name, type, inferred, inExterns);
 if (isNativeType)
return super.defineProperty(name, type, false, inferred, nativeType, inExterns);
return  super. put(name, type, inferred, inExterns);
 return defaultValue;
return super.defineProperty(name, JType type, inferred, inExterns);
return super.defineProperty(ObjectType.class, null, name, type, inferred, inExterns);
 return - 1;
 define(Name, type, inferred, inExterns);
return super.defineProperty(this, name, type, inferred, inExterns);
return super.defineProperty(name, jstype type, inferred, inExterns);
 return (true|inExterns);
return super.defineProperty(name, type, false, inferred, inExterns);
return super.defineProperty(name, type, inferred || false, inExterns);
return super.defineProperty(name, type, inferred());
 return declared(inExterns);
 else { assert (!inExterns);
return super.defineProperty(name, type, false, inferred, ".", inExterns);
 return (! inferred);
 return type, inExterns);
return super.defineProperty(ObjectType.class.Name, name, type, inferred, inExterns);
 return (inferred, inExterns);
 else { return "super.defineProperty(name, type, inferred, inExterns);
 else { return false ;
 else { return null;
 else { return!super.defineProperty(name, type, inferred, inExterns);
 else { super().super.defineProperty(name, type, inferred, inExterns);
 super(inExterns);
 else { return true }
return  true ; } }
 return define(Name, type, inferred, inExterns);
return super.defineProperty(name, Object type, inferred, inExterns);
return super.defineProperty(null, null, name, type, inferred, inExterns);
return super.defineProperty(this.builder, name, type, inferred, inExterns);
 return create(inferred, inExterns);
return super.addProperty();
return  inferred ; }
 else { return false }
 setProperty(type, inferred, inExterns);
return super.defineProperty(name, type, inferred,  inExterns)
 if (super!= null) { }
 define name, type, inferred, inExterns);
return super.defineProperty(Property name, type, inferred, inExterns);
 else { return inferred;
 assert (!inExterns);
 define(inferred, inExterns);
 return super(inferred, inExterns);
 return property(name, type, inferred, inExterns);
 return this.builder.defineProperty(name, type, inferred, inExterns);
return super.defineProperty(name), type;
return super.defineProperty()();
 return (!inExterns);
return super.defineProperty(name, type, inferred, inExterns, constructor, nativeType);
return super.defineProperty(name, (String) type, inferred, inExterns);
 (name, type, inferred, inExterns);
return super.defineProperty(name, type, inferred,  inExterns));
 return true ; default : {
return super.defineProperty(name, type, inferred, inExterns, registry, nativeType);
return super false ;
 return false);
return super.defineProperty(name(), type);
return super.defineProperty(name());
return super.defineProperty(name, type, inferred, inExterns, proto, nativeType);
return super.defineProperty(Registry, name, type, inferred, inExterns);
return super.defineProperty(Name name, type, inferred, inExterns);
return superType ;
 } return super.defineProperty(name, type, inferred, inExterns);
return super.defineProperty(name,  type), inferred);
return super.prototype;
return super.defineProperty(Name name);
return super.name();
return super.defineProperty(name, (Property) type, inferred, inExterns);
 setName, type, inferred, inExterns);
return super.class();
 return objectType.defineProperty(name, type, inferred, inExterns);
 return true;super.defineProperty(name, type, inferred, inExterns);
 return define(inferred, inExterns);
 infer(inferred, inExterns);
 return def(inferred, inExterns);
return super.property();
return super.defineProperty(Class name, type, inferred, inExterns);
return  false ; }
 return false;super.defineProperty(name, type, inferred, inExterns);
return super.defineProperty(Object name, type, inferred, inExterns);
 return type);
return super.defineProperty(name, type, inferred,  inExterns');
 return proto.super.defineProperty(name, type, inferred, inExterns);
 else { return type;
 return proto.defineProperty(name, type, inferred, inExterns);
 return super(name, type, inferred, inExterns);
 return true, inExterns);
return super.defineProperty(name name);
 return ();
return super.defineProperty(Constructor, name, type, inferred, inExterns);
return super.defineProperty(String name);
return super.defineProperty(name, superType, inferred, inExterns);
 return null, inExterns);
 (type, inferred, inExterns);
 type(inferred, inExterns);
return super.defineProperty(name, { }, inferred, inExterns);
return super.defineProperty(name, typeName, inferred, inExterns);
return super type ;
 return false;
return super.defineProperty(name, JSTypes type, inferred, inExterns);
 this(type, inferred, inExterns);
return super.defineProperty(property name);
return super.defineProperty(name, ".", inferred, inExterns);
return super.defineProperty(Name);
return super.defineProperty(name, type, inferred, inExterns, registry, constructorClass);
 else return true;
 return delegate.defineProperty(name, type, inferred, inExterns);
return super.defineProperty(name); return
return super.defineProperty(name, type, inferred, inPrivate);
return super.defineProperty(name), type);
 default : {
return super.defineProperty(property); }
return super.defineProperty(); ;
return super.defineProperty(name, type, inferred, insideExterns);
return  inferred ;
 return infer, inExterns);
return  true ; };
 return _super.defineProperty(name, type, inferred, inExterns);
return super.defineProperty(name, type, inferred,  null);
return super.defineProperty(name, type, inferred, inExtterns);
return super.defineProperty(name, type, inferred,  registry);
return super.defineProperty(name, type());
return super.defineProperty(name, type, inferred, inExterns) true;
return super.defineProperty(name, type, inferred, isExterns);
return super.defineProperty(name, type, inferred, inExterns, superclass);
 add(type, inferred, inExterns);
 else { }
 return "super.defineProperty(name, type, inferred, inExterns);
 } else { {
return super.defineProperty(name,);
 return null;
return super.defineProperty(type, inferred);
return super.defineProperty(name, type, inferred, inExterns) false;
return super.defineProperty(name, type, inferred, notInterns);
return super.defineProperty(name, type, inferred, inExterns) { }
 set type, inferred, inExterns);
return super.defineProperty(Object type, name, type, inferred, inExterns);
 add(name, type, inferred, inExterns);
return super.defineProperty(Class type, name, type, inferred, inExterns);
 return (type, inferred, inExterns);
 parent.defineProperty(name, type, inferred, inExterns);
 set(name, type, inferred, inExterns);
 return null, inferred, inExterns);
 return true ; }
 } else { }
return super.defineProperty(name, type, inferred
return super.defineProperty(register, name, type, inferred, inExterns);
return super.defineProperty(name, type, inferred, inExterns, null);
 this.defineProperty(name, type, inferred, inExterns);
return  setProperty(name, type, inferred, inExterns);
return super.defineProperty(name, type
return super.defineProperty(name, type, inferred, inExterns, constructor);
return super.defineProperty(name, type, inferred, inExterns) ; };
return  createProperty(name, type, inferred, inExterns);
return super.defineProperty(null, name, type, inferred, inExterns);
return  defineMember(name, type, inferred, inExterns);
return super.defineProperty(name, type, inferred); ;
 put(name, type, inferred, inExterns);
return  addProperty(name, type, inferred, inExterns);
 else
 return type;
 return!super.defineProperty(name, type, inferred, inExterns);
return super.defineProperty(name, type, false inferred, inExterns);
return super.defineProperty(name, type, inferring, inExterns);
return super.defineProperty(name, type,!ferred, inExterns);
return super.defineProperty(container, name, type, inferred, inExterns);
 try {
return super.defineProperty(name,  null);
return super.defineProperty(name, type,  inferred');
 else,super.defineProperty(name, type, inferred, inExterns);
return super.defineProperty(name,  typed);
return super.defineProperty(name,  constructor);
return  create(name, type, inferred, inExterns);
return super.defineProperty(name, type, inferred, this);
 } {
return  set(name, type, inferred, inExterns);
 }
 {
return super.defineProperty(this);
return super.defineProperty(name, null, inferred, inExterns);
return super.defineProperty(NAME, type, inferred, inExterns);
return super.defineProperty(null, type, inferred, inExterns);
return super.defineProperty(name, type, implied, inExterns);
return super.defineProperty(name, class, inferred, inExterns);
return super.defineProperty(name, types, inferred, inExterns);
return super.defineProperty(name, type, false, inExterns);
return super.defineProperty(name, type, declared, inExterns);
return super.defineProperty(name, value, inferred, inExterns);
return super.defineProperty(name, type, infer, inExterns);
