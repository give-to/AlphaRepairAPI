ObjectType proto = getImplicitPrototype();
 super.getImplicitPrototype();
ObjectType  proto = getPrototype ( ) ;
 JSType proto = getConstructor().getImplicitPrototype();
ObjectType proto = getImplicitPrototype(type, inferred, inExterns);
ObjectType proto = getImplicitPrototype(type, inExterns);
 ObjectType proto = constructor.getImplicitPrototype();
ObjectType  proto = getType ( ) ;
 return super. defineProperty(name, type, inferred, inExterns);
ObjectType proto = getImplicitPrototype ( type ) ;
 super.defineProperty(name, type, inferred, inExterns);
 return super. defineProperty(name, type, inferred, inExtern);
 return super. defineProperty(name, type, inferred, inExterns); } public
 ObjectType proto = super.getImplicitPrototype();
ObjectType  proto = getPrototype ( registry ) ;
 public boolean defineProperty(String name, JSType type, boolean inferred) {
 return super. defineProperty(name, type, inferred, inExterns); } final
ObjectType proto = getImplicitPrototype ( registry, type, inferred ) ;
 super.defineProperty(name, type, inferred);
 return super. defineProperty(name, type, inferred, inExterns); }
 Proto proto = getImplicitPrototype();
 public boolean defineProperty(String name, JSType type, boolean inferred) { final
ObjectType  proto;
ObjectType proto = getImplicitPrototype(type, inferred, inExtern);
ObjectType  proto = getPrototypeType ( ) ;
ObjectType  proto = (ObjectType) getConstructor();
 return super.defineProperty(name, type, inferred);
 return super. defineProperty(name, type, inferred, inExterns); final
 public boolean defineProperty(String name, JSType type) { final
ObjectType  proto = registry. getPrototype ( ) ;
ObjectType  proto = getPrototypeOf ( type ) ;
ObjectType  proto = (ObjectType) type;
 super.defineProperty(name, type, inferred, false);
 return super. defineProperty(name, type, inferred, inExterns); } static
 super(name, type);
 super.defineProperty(name, type, inferred, inExternal);
 ObjectType proto = getConstructor().getImplicitPrototype();
ObjectType proto = getImplicitPrototype ( registry, type, inExterns )
 super.defineProperty(name, type);
ObjectType proto = getImplicitPrototype(). getPrototype ( ) ;
ObjectType  proto = this;
 return super. defineProperty(name, type, inferred, inExports);
 return true;
 return super. defineProperty(name, type, inferred, inExterns); } private final
 Proto proto = getConstructor().proto();
ObjectType proto = getImplicitPrototypeOf ( type, inExterns ) ;
 Proto proto = this;
 super.defineProperty(name, type, inferred); final
 JSType proto = (Object) super.getImplicitPrototype();
 public boolean defineProperty(String name, JSType proto) {
 return super. defineProperty ( name, type, inferred, inExterns )
ObjectType proto = getImplicitPrototype(type, inferred, false);
 return super. defineProperty(name, type, inferred, inExterns); public
 JSTypePrototype proto= getImplicitPrototype();
ObjectType proto = getImplicitPrototype(Type, inferred, inExterns);
ObjectType proto = getImplicitPrototype(type, inferred, inExternals);
ObjectType proto =  registry. getPrototypeOf ( type ) ;
 Object proto = constructor.getImplicitPrototype();
ObjectType proto = getImplicitPrototype ( registry, type, inExterns);
 public boolean defineProperty(String name, JSType type) {
 return super. defineProperty(name, type, inferred, inExterns); } public static
ObjectType  proto = getPrototype ( type ) ;
 return super.defineProperty(name, type);
 if (type == null) { return false; } final
 Proto proto = super.getImplicitPrototype();
 super.defineProperty(name, type, inferred); }
 return this. defineProperty ( name, type, inferred, inExterns ) ; } public
 return super.defineProperty(name, type, inferred); }
ObjectType proto = getImplicitPrototype ( registry ) ;
 return super. defineProperty ( name, type, inferred, inExterns ) ; } else {
 if (inExterns) {
ObjectType proto = getImplicitPrototypeOf ( type, inferred ) ;
ObjectType  proto = this.prototype;
 ObjectType proto = Constructor.getImplicitPrototype();
 public boolean defineProperty(String name, JSType type, boolean inferred) { public final
 super.defineProperty(name, type); final
 ObjectType _proto = getImplicitPrototype();
 super.defineProperty(name, type, inferred, true);
 return super.defineProperty(name, type, inferred); } final
 Proto proto = getProtocol();
 Object proto = super.getImplicitPrototype();
 return super.defineProperty(name, type, inferred); } public
ObjectType proto  = registry. getPrototype ( type ) ;
ObjectType proto = getImplicitPrototype ( registry, type, inferred, false ) ;
ObjectType  proto = get ( ) ;
ObjectType  proto = type;
ObjectType  proto = getPrototypeOf ( ) ;
 Proto proto = getConstructor().getPrototype();
 return constructor.getImplicitPrototype();
 Proto proto = super.proto();
 if (inExterns)
 return super. defineProperty(name, type, inferred, inExternal);
 return super. defineProperty(name, type, inferred, inExtern());
 public boolean defineProperty(String name, JSType type, boolean inferred) { private final
 JSType proto = Constructor.getImplicitPrototype();
ObjectType proto = getImplicitPrototype(). getPrototype ( type ) ;
 return this. defineProperty ( name, type, inferred, inExterns ) ; } else {
 Proto proto = getPrototype();
ObjectType proto = getImplicitPrototype ( type, inferred ) ;
ObjectType proto  = registry. getPrototypeType ( ) ;
 if (type == null) { return false; }
 JSType proto = (Object) constructor.getImplicitPrototype();
 return super. defineProperty(name, type, inferred, inEx);
 JSType proto = registry.getPrototype();
 boolean proto = this;
 return super.defineProperty(name, type, inferred); final
ObjectType proto = getImplicitPrototype(type, inferred, true);
 Proto proto = super.getPrototype();
 return this. defineProperty ( name, type, inferred, inExterns ) ; } private final
ObjectType  proto = getProto ( ) ;
ObjectType proto  = registry. getPrototypeOf ( ) ;
 Proto proto = getConstructor().protocol();
 super().defineProperty(name, type);
 return super.defineProperty();
 JSType _proto = getImplicitPrototype();
 return super.defineProperty(name, type); }
 public boolean definesProperty(String name, JSType proto) {
 super.defineProperty(name, type, inferred); } public
 Proto proto = System.proto();
 Class <? extends JSType>proto = getImplicitPrototype();
 JSType proto = (Type) super.getImplicitPrototype();
 boolean proto = proto();
 Proto proto = constructor.getImplicitPrototype();
 return super. defineProperty(name, type, inferred, inExterns); } else { return false ; }
 if (type == null) { return false; } else
ObjectType proto = getImplicitPrototype(type, inferred, inInterns);
ObjectType proto = getImplicitPrototype(this, registry, type, inferred, false);
 ObjectType proto = (ObjectType) super.getImplicitPrototype();
 JSTypePrototype proto = super.getImplicitPrototype();
ObjectType proto = getImplicitPrototype(). getPrototypeOf ( type ) ;
 JSType proto = (Type) type;
ObjectType proto = getImplicitPrototypeOf ( type ) ;
 super(registry, name, type, inferred);
 public boolean definesProperty(String name, JSType type) {
 Proto protto = getImplicitPrototype();
 super.defineProperty(name, type); }
ObjectType proto = getImplicitPrototype(type, inferred, inExports);
 Proto proto = registry;
 return super. defineProperty(name, type, inferred, inExterns); } else { return false;
 JSType proto = (String) super.getImplicitPrototype();
 JSType proto = constructor.getImplicitPrototype();
 ObjectType proto = getConstructor().getType();
 return super. defineProperty(name, type, inferred, inExterns); } else { super. defineProperty ( name ) ;
ObjectType proto = getImplicitPrototype ( registry, serialVersionUID ) ;
 super(registry, type);
 public boolean defineProperty(String name, JSType proto);
 proto = super.proto();
 JSType proto = ObjectType.getImplicitPrototype();
 Proto proto = registry.getProtocol();
 Proto proto = this.getProtocol();
ObjectType proto =  getPrototypeOf ( "prototype" ) ;
 return super. defineProperty(name, type, inferred, inExterns) ; } public boolean hasOwnDeclaredProperty() { final
 if (type == null) { return false; }
 Proto proto = this.getPrototype();
 return false();
 if (getImplicitPrototype()!= null) {
 Proto proto = super.protocol();
 Proto protto = getConstructor().protocol();
ObjectType  proto = registry;
ObjectType proto = getImplicitPrototype(Type, inExterns);
ObjectType proto = getImplicitPrototypeOf ( registry, type, inferred ) ;
 return super.defineProperty(name, type); final
 Class <? extends ObjectType>proto = getImplicitPrototype();
ObjectType proto =  getPrototypeOf ( type, inferred ) ;
 if (inExtern)
 super(registry, name, inferred);
 final JSTypePrototype proto= getImplicitPrototype();
 return super. defineProperty(name, type, inferred, inExterns); } else { return super. toString(); } public
 return super. defineProperty(name, type, inferred, inExterns); } else { return super. defineProperty ( name ) ;
 JSTypePrototype proto = constructor.getImplicitPrototype();
 return super. defineProperty(name, type, inferred, inExterns); } else { return super. defineProperty(name); }
 return super. defineProperty(name, type, inferred, inExterns); } else { return super. defineProperty ( name ) }
ObjectType proto = getImplicitPrototype ( registry, type ) ;
 return super. defineProperty(name, type, inferred, inExterns); } else { return super. toString(); } final
 return true();
 super().defineProperty(name, type); final
 return super.getImplicitPrototype();
 Proto proto = getConstructor().getProtocol();
 JSType proto = super.getImplicitPrototype();
 if (isExterns) { final
 public boolean defineProperty(String name, JSType proto)
 boolean proto = registry;
 return super. defineProperty(name, type, inferred, inExterns); } else { return false ; } private final
 Proto proto = getProtocol(); ObjectType super= getImplicitPrototype();
ObjectType proto = getImplicitPrototypeOf ( "prototype" ) ;
 Prototype proto = super.getImplicitPrototype();
 return super. defineProperty(name, type, inferred, inExterns) ; } public boolean hasOwnProperty(String name);
 JSTypePrototype proto == getImplicitPrototype();
 final JSTypePrototype proto == getImplicitPrototype();
 super.defineProperty(name); final
 JSType proto = super.prototype.getImplicitPrototype();
 super().defineProperty(name, type); }
 ObjectType proto = type.getImplicitPrototype();
 return super. defineProperty(name, type, inferred, inExterns) ; } public boolean hasOwnProperty() { final
 return super. defineProperty(name, type, inferred, inExterns); } else { return ; }
 JSType proto = (ObjectType) type;
 if (inExterns
 return super. defineProperty(name, type, inferred, inExterns) ; } public boolean hasOwnProperty() {
 JSTypePrototype proto |= getImplicitPrototype();
ObjectType  proto = getProtocol ( ) ;
ObjectType proto = getImplicitPrototype ( "prototype" ) ;
 ProtoProto;
 return super. defineProperty(name, type, inferred, inExterns); } else { return false ; } final
 Class < JSType >proto = getImplicitPrototype();
 JSType protoType = constructor.getImplicitPrototype();
ObjectType proto = getImplicitPrototype(type, inferred, inExterns); }
 if (super!= null) {
 Proto protto = getProtocol ( );
 Proto proto = getProtocol(); ObjectType proto= getImplicitPrototype();
 public boolean defineProperty(String name, JSType type);
 return super. defineProperty(name, type, inferred, inExterns); } else { return false ; } public final
 return super. defineProperty(name, type, inferred, inExterns); } else { return false ; } public
ObjectType proto = getImplicitPrototype(). getPrototypeType ( ) ;
 return super. defineProperty(name, type, inferred, inExterns); } else { return true ; }
 if (type == null) { return true; } else
 return super. defineProperty(name, type, inferred, inExterns); } else { return true;
 Proto proto = getProto();
 return false; } else
ObjectType proto = getImplicitPrototype(type, inferred, inExtern());
 super(registry, null);
ObjectType proto =  getPrototype ( registry, "prototype" )
 return super. defineProperty(name, type, inferred, inExterns); } else { return false ; } public static
 Proto proto = new Proto(type, inferred);
 return super. defineProperty(name, type, inferred, inExterns); } else { super. toString(); } public
 JSTypePrototype proto *= getImplicitPrototype();
 JSTypePrototype proto &= getImplicitPrototype();
ObjectType proto = getImplicitPrototype() getPrototype();
 return super. defineProperty(name, type, inferred, inExterns); } else { super. defineProperty ( name ) ; }
 JSType proto = this.prototype;
ObjectType proto = getImplicitPrototypeType ( ) ;
 Proto proto = getPrototypeOf();
 return super.defineProperty(name); }
 JSType superproto = getImplicitPrototype();
 return super.defineProperty(name);
 ObjectType proto = registry.getImplicitPrototype();
 return super. defineProperty(name, type, inferred, inExterns); } else { return false ; } private static
 if (type == null) { return true; }
 JSType proto = getPrototype;
 return super. defineProperty(name, type, inferred, inExterns); } else { super. toString(); } final
 return super. defineProperty(name, type, inferred, inExterns); } else { return false };
ObjectType proto = getImplicitPrototypeOf ( type, inExterns )
 ObjectType protto= getImplicitPrototype();
 Class protto = getPrototypeClass ( ) ;
 JSTypePrototype <? > proto == getImplicitPrototype();
 JSType proto = this;
 public boolean defineProperty(String name, JSType proto {
ObjectType proto = getImplicitPrototype ( registry, "prototype" )
 return super. defineProperty(name, type, inferred, inExterns); } else { super. defineProperty ( ) ;
ObjectType proto = getImplicitPrototype(). getPrototypeOfType(type) ;
ObjectType proto = getImplicitPrototypeType ( type ) ;
 Class <? extends JSType,? >proto = getImplicitPrototype();
ObjectType proto = getImplicitPrototype(type, inferred, registry);
 final ObjectType proto = type; proto &= getImplicitPrototype();
 if (inExterns) { ObjectTypeproto = getImplicitPrototype();
 Proto proto = get ( ) ;
 JSType proto = getPrototype ( );
 JSType.proto = getImplicitPrototype();
 super(registry, null); ObjectTypeproto = getImplicitPrototype();
ObjectType proto = getImplicitPrototype(). getPrototypeOfClass ( type ) ;
ObjectType  proto = (ObjectType) getConstructor;
 return super.define(name);
 if (super!= null) {
 return super. defineProperty(name, type, inferred, inExterns); } else { super. toString(); } private
 Proto proto = getProtocol(type, inferred);
 Proto proto = getProtocolObject();
ObjectType proto = getImplicitPrototype(). getPrototypeForName(name) ;
ObjectType proto = getImplicitPrototype(). getType ( ) ;
 final ObjectType proto = type; proto |= getImplicitPrototype();
 Proto proto = getProtocolFor(type);
 final ObjectType proto = constructor.getImplicitPrototype();
 Class proto = getPrototypeClass ( ) ;
 return true; } else
 public boolean defineProperty(String name, Type proto, boolean inferred);
 Proto proto = getProtocol(type);
ObjectType  protto = getPrototype() ;
 JSTypePrototype <? > proto|= getImplicitPrototype();
 Class protto = getPrototypeOf ( type ) ;
ObjectType proto = getImplicitPrototype(type, inExtern);
 if (! inferred);
 Proto proto = getConstructor().getClass();
 Proto proto = getConstructor().getPackage();
 JSType proto = constructorImpl.getImplicitPrototype();
 if (type == null) { return false};
 super.defineProperty(name); }
ObjectType proto  := getPrototype ( ) ;
 Proto proto = getProtocolOf(type);
 Proto proto = getProtocol ( registry ) ;
 final JSType _proto = getImplicitPrototype();
ObjectType proto = getImplicitPrototype ( type, inExterns )
 Proto proto = getPrototype(type, inferred);
ObjectType  proto = constructor;
 JSTypePrototypeImplicit proto= getImplicitPrototype();
 return super. defineProperty ( name, type, inferred, inExterns ) ; } } else {
 Proto proto = getProtocol(();
 Proto proto = getProtocolForType(type);
 super(registry); final
 Proto protto = getProtocolInstance ( );
 ObjectType proto = getPrototype;
ObjectType proto = getImplicitPrototype(type, inferred, inExterns); else
 final ObjectType proto = type; proto= getImplicitPrototype();
 Proto proto = new Proto(registry, null);
 ProtoProto = this;
 Class <? extends JSTypeType>proto = getImplicitPrototype();
ObjectType proto = getImplicitPrototype() ; return proto. isNative ( ) ;
 JSType proto!= getImplicitPrototype();
 return false;
 JSType proto = type;
 Proto proto = new Proto(registry, constructor);
 final ObjectType proto= getImplicitPrototype();
 Proto proto = getProtocol(); ObjectType impl= getImplicitPrototype();
 Proto proto = Proto. get ( ) ;
 Proto protto = getPrototype();
ObjectType proto = getImplicitPrototype() ; return proto!= null ; } else
 proto = super.prototype();
ObjectType proto = getImplicitPrototype ( constructor ) ;
 Object typeproto = getImplicitPrototype();
 Proto proto = getPrototypeOf(type);
 super(registry, name);
 super(registry, type); final
 return super. defineProperty ( name, type, inferred, inExterns ) ; } else { final
 super(registry, null, null); Objectproto = getImplicitPrototype();
 JSType proto = super.prototype;
 Class protto = getPrototype ( type ) ;
 JSType proto = registry;
 super(registry, null, null).proto = getImplicitPrototype();
 prototype = constructor.getImplicitPrototype();
 super(registry, type);
 if (inExterns) { Object typeproto = getImplicitPrototype();
 JSTypePrototypePrototype proto == getImplicitPrototype();
 ObjectType proto!= getImplicitPrototype();
ObjectType proto = getImplicitPrototype() if (super!= null) {
 if (!inExterns
 proto = constructor.getImplicitPrototype();
 Object type proto = type.getImplicitPrototype();
 JSType proto *= getImplicitPrototype();
 proto = getPrototype();
 if (type == null) { return true};
 proto = super.getImplicitPrototype();
 JSTypePrototypePrototype proto|= getImplicitPrototype();
 super(registry, name); ObjectTypeproto = getImplicitPrototype();
 super(registry, name); final
 final JSTypePrototype proto2= getImplicitPrototype();
ObjectType proto = getImplicitPrototype ( registry, "prototype" );
 JSType proto &= getImplicitPrototype();
 Proto proto = getProtocol(register);
 if (inExterns) { Objectproto = getImplicitPrototype();
 super(registry, name);
 Proto protto = getPrototype;
 Proto proto = getPrototype(type);
ObjectType proto = getImplicitPrototype(this, registry, type);
 proto = getPrototypeOf(type);
 Proto protto = getProtocolObject ( );
 JSType proto = getPrototype(...);
 Class <? extends JSType#proto = getImplicitPrototype();
 Proto proto = proto;
 Proto protto = (Protocol) super;
 ObjectType proto2= getImplicitPrototype();
 Proto proto = (Proto) super;
 JSType proto |= getImplicitPrototype();
 if (inferred)
 Proto proto = getProtocol(this);
 proto = getPrototype(type);
 Proto proto = new Proto(this);
 JSTypeImplicitproto = getImplicitPrototype();
 Class <? extends PrototypeObjectType>proto = getImplicitPrototype();
 final PrototypeObjectType proto;
 ProtoProto=getImplicitPrototype();
 super(registry, this.proto = getImplicitPrototype();
 proto = proto();
 ProtoType proto = this;
 Proto proto = new Proto(type);
 final JSTypePrototype proto |= getImplicitPrototype();
 Proto proto = (Protocol) super;
 return super. defineProperty ( name, type, inferred, inExterns ) ; } } { final
 super(registry, null);
 return super(name, type);
 if (isNativeType)
 boolean proto = getProxy();
ObjectType  proto = (ObjectType) type
ObjectType proto = getImplicitPrototype() ; return true; } else
 ProtoProto = registry;
 Class < JSType > _proto = getImplicitPrototype();
ObjectType proto = getImplicitPrototype ( "prototype" )
 super(registry, null).proto = getImplicitPrototype();
 Prototype proto= getImplicitPrototype();
 ObjectType superproto = getImplicitPrototype();
 proto = this;
 return false; } public
 final ObjectType _proto = getImplicitPrototype();
 return super. defineProperty ( name, type, inferred, inExterns ) ; } else { static
 Object proto = this;
 String proto = proto();
ObjectType  proto = (ObjectType) constructor
 return true; } public
 if (!inExtern)
 JSType proto = superclass;
 ProtoPrototype = proto;
 super(name);
 JSType proto = superType;
 Proto = this;
 JSTypeProtocol proto= getImplicitPrototype();
 final JSTypeImplicitproto = getImplicitPrototype();
ObjectType proto = getImplicitPrototypeOf ( ) ;
ObjectType proto = getImplicitPrototype() ; return false ; } else
ObjectType proto = getImplicitPrototype() ; return proto!= null ; }
 Class <? extends Object>proto = getImplicitPrototype();
ObjectType proto = getImplicitPrototype(type, inferred, inExterns)
ObjectType proto = getImplicitPrototype() || { } ;
 return super.define();
 JSTypeType proto == getImplicitPrototype();
ObjectType proto = getImplicitPrototype() == null;
 Class<ObjectType>proto = getImplicitPrototype();
 final ObjectType proto = super= getImplicitPrototype();
 return false; } final
 JSType proto = super;
 final JSType.proto = getImplicitPrototype();
 return super.toString();
 final ObjectType proto = constructor= getImplicitPrototype();
 if (inExtern)
 final JSType superproto = getImplicitPrototype();
 if (!inferred)
 super.defineProperty();
 if (true);
ObjectType proto = getImplicitPrototype(type, inferred, inExterns));
ObjectType proto = getImplicitPrototypeOf ( "prototype" )
 boolean proto = getType();
 Proto proto = _getImplicitPrototype();
ObjectType proto = getImplicitPrototype(). getPrototypeOf(type); }
 if (inExterns
 ObjectType.proto = getImplicitPrototype();
 if (type == null);
 checkNull(type);
 super(name, inferred);
 assert(type!= null);
ObjectType  proto = getImplicitPrototype(); }
 return isNativeType();
ObjectType  proto = this
 proto = registry;
ObjectType proto = getImplicitPrototype() || null;
 Object type2= getImplicitPrototype();
 checkNull(name);
 final
ObjectType proto = getImplicitPrototype() ; return proto!= null ; } {
 Proto type = type;
 if (!initialized);
 proto = getPrototype(); }
ObjectType proto = getImplicitPrototype(). getPrototypeOfType(type); }
ObjectType proto = getImplicitPrototype(). getPrototypeOf ( type ) ; else
ObjectType proto = getImplicitPrototype(type, inExterns));
 assertNull(name);
ObjectType proto = getImplicitPrototype() (this);
 return false;
 Object type!= getImplicitPrototype();
 super(this, type);
 Object proto= getImplicitPrototype();
ObjectType proto = getImplicitPrototype() ; return true;
 assertNull(type);
 super.init();
 Proto = registry;
ObjectType proto = getImplicitPrototype(type, inferred); }
 return type.getImplicitPrototype();
 return true;
 return isNative();
 if (!);
ObjectType  proto = this; else
 if (!return inferred);
ObjectType proto = getImplicitPrototype() ; return true; }
ObjectType proto = getImplicitPrototype() ; return false; }
 Proto proto &= getImplicitPrototype();
ObjectType  protto;
 return false);
ObjectType proto = getImplicitPrototype() as prototype;
 private final
ObjectType proto = getImplicitPrototype() - registry;
ObjectType proto = getImplicitPrototype(type, inferred); else
ObjectType proto = getImplicitPrototype(this);
ObjectType  proto = this; }
 Object type|= getImplicitPrototype();
 return prototype.getImplicitPrototype();
 boolean proto = this; else
 super.build();
 boolean result;
 super.create();
 boolean result();
 Proto proto = this; else
 prototype = supergetImplicitPrototype();
ObjectType proto = getImplicitPrototype(types);
ObjectType  proto = this; {
 constructor.getImplicitPrototype();
ObjectType  proto = type; else
ObjectType proto = getImplicitPrototype(Type, inferred); }
ObjectType  proto();
 boolean proto;
 Object tproto = getImplicitPrototype();
ObjectType proto = getImplicitPrototype(protocol); }
ObjectType proto = getImplicitPrototype(type); }
 ObjectTproto = getImplicitPrototype();
 Object<proto = getImplicitPrototype();
ObjectType proto = getImplicitPrototype(registry); }
 prototype |= getImplicitPrototype();
ObjectType proto = getImplicitPrototype(class);
ObjectType proto = getImplicitPrototype(parent);
 proto.getImplicitPrototype();
ObjectType proto Type ;
 prototype &= getImplicitPrototype();
 super().getImplicitPrototype();
 public final
ObjectType proto = getImplicitPrototype(registry); {
ObjectType proto = getImplicitPrototype(proto); }
 prototype.getImplicitPrototype();
 ClassType _proto = getImplicitPrototype();
 boolean true();
 Object type.proto = getImplicitPrototype();
ObjectType proto  = prototype
ObjectType proto = getImplicitPrototype(type); {
ObjectType proto ; {
 return true);
ObjectType proto  = null
 boolean true;
 if ();
 boolean return();
 { return false;
ObjectType proto = getImplicitPrototype()();
 { return true;
 return ; }
ObjectType proto = getImplicitPrototype(types); }
 return {};
 return ();
 private static
 public static
 { return ; }
ObjectType proto = getImplicitPrototype() ; {
ObjectType proto = getImplicitPrototype() ) ;
ObjectType  prototype ;
 { return false;}
 private synchronized
ObjectType proto = getImplicitPrototype() ) (
 public
 static
ObjectType proto := getImplicitPrototype();
ObjectType proto: getImplicitPrototype();
ObjectType proto, getImplicitPrototype();
