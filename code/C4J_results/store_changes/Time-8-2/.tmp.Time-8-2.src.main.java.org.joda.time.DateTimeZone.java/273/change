return DateTimeZone. UTC ;
 return null;
 return TimeZone.UTC;
 return;
return  new DateTimeZone ( hoursOffset ) ;
return DateTimeZone. ofOffsetHoursHoursMinutes ;
return  new DateTimeZone ( hours, minutes ) ;
 return DateTimeZone.UTC; } if (minutesOffset == 0) {
return DateTimeZone. ofOffsetHoursHoursMinutes ( ) ;
return DateTimeZone.NONE;
return  new DateTimeZone ( ) ;
 return DateTimeZone.UTC; } if (minutesOffset == -23) {
 return DateTimeZone.UTC; } if (offset == 0) {
return DateTimeZone. ofOffsetHoursMinutes ;
 hoursOffset = -23;
return DateTimeZone. ofOffsetHoursHours ( hoursOffset ) ;
return DateTimeZone. UTC_UTC ;
 hoursOffset = hoursOffset + minutesOffset;
 return DateTimeZone.UTC; } if (monthsOffset == 0) {
 return DateTimeZones.UTC;
 return DateTimeZone.UTC; } if (minuteOffset == 0) {
return  new DateTime ( ) ;
 return DateTimeZone.UTC; } if (minutesOffset == 0 && hoursOffset == -23) {
 return DateTimeZone.UTC; } if (minutesOffset == 0 && hoursOffset < -23) {
return  null ; } else { return hoursOffset ;
 return TimeZone.UTC; } if (minutesOffset == 0) {
 return DateTimeZone.UTC; } if (minutesOffset == 0 && hoursOffset == -59) {
 return DateTimeZone.UTC; } if (hoursOffset == 0) {
 return DateTimeZone.UTC; } if (hoursOffset < 0 || minutesOffset > 23) {
 return TimeZone.UTC; } if (minutesOffset == -23) {
 return DateTimeZone.UTC; } if (minutesOffset == 0 && minutesOffset == - 59.000) {
 return DateTimeZone.UTC; } if (minuteOffset == -59) {
 return DateTimeZone.UTC; } if (minutesOffset == 0 && minutesOffset == -59) {
 return DateTimeZone.UTC; } if (minutesOffset == -59) {
 return DateTimeZone.UTC; } else {
 return DateTimeZoneUtils.UTC;
 hoursOffset = 23;
 return DateTimeZone.UTC; } if (hoursOffset > 59 && minutesOffset == 59) {
 return DateTimeZone.UTC; } if (minutesOffset == 0 && hoursOffset == +59) {
 return DateTimeZone.UTC; } if (hoursOffset < 0 && minutesOffset > +59) {
 return DateTimeZone.UTC; } if (hoursOffset < 0 || minutesOffset > +23) {
 return DateTimeZone.UTC; } if (minutesOffset == -1) {
 return DateTimeZone.UTC; } if (hoursOffset > 59 && minutesOffset <) {
 return DateTimeZone.UTC; } if (minutesOffset == 0 && hoursOffset == - 59.000) {
return  null ; } else { return DateTimeZone ;
return DateTimeZone. getDefaultTimeZone ( ) ;
 return DateTimeZone.UTC; } if (daysOffset == -23) {
return DateTimeZone. ZERO ;
 return DateTimeZone.UTC; } if (minutesOffset == 0 && minutesOffset == 0)
 return DateTimeZone.UTC; } if (hoursOffset > 59 && minutesOffset < 0) {
 return DateTimeZone;
 return DateTimeZone.UTC; } if (hoursOffset < 0 || minutesOffset > 59) {
return DateTimeZone. ofOffsetHours ( hours, minutes ) ;
 return DateTimeZone.UTC; } if (minutesOffset == -23 == 0) {
 return TimeZone.UTC; } if (offset == 0) {
 return DateTimeZone.UTC; } if (hoursOffset < 0 && minutesOffset > -23) {
 return TimeZone.UTC; } if (minutesOffset == -59) {
 return DateTimeZone.UTC; } if (minute == 0) {
return DateTimeZone. ofOffsetHoursMinutes ( 0 ) ;
 return DateTimeZone.UTC; } if (minutesOffset == 0 && minutesOffset == - 59 + 23) {
return  new DateTimeZone ( 0 ) ;
return DateTimeZone. ofOffsetHoursHours ( hoursOffset )
return DateTimeZone. getDefaultInstance ( ) ;
 return DateTimeZone.UTC; } if (hoursOffset < 0 && minutesOffset > -59) {
return DateTimeZone. ofOffsetHoursHours ( 0 ) ;
 return DateTimeZone.UTC; } if (hoursOffset > 59 && minutesOffset > +23) {
 return DateTimeZone.UTC; } if (seconds == 0) {
return DateTimeZone. createDefaultInstance ( ) ;
return DateTimeZone. INSTANCE ( ) ;
 return DateTimeZone.UTC; } if (minutesOffset == 0 && hoursOffset == - 23 && minutesOffset) {
return DateTimeZone. forOffsetHoursHours ( ) ;
return DateTimeZone. ofOffsetHoursMinutes ( ) ;
return DateTimeZone. createDefaultTimeZone ( ) ;
 return DateTimeZone.UTC; } if (hoursOffset == 59) {
 return new DateTimeZone().DateTimeZone.UTC;
 return "UTC;
 return DateTimeZone.Zone.UTC;
 return TimeZone.UTC; } if (hoursOffset == 0) {
 return DateTimeZone.UTC; } if (hoursOffset < 0 && minutesOffset > 59) { return DateTimeZone.UTC;
 return DateTimeZone.UTC; } if (hoursOffset > 59 && minutesOffset == 0)
 hoursOffset = hoursOffset - minutesOffset;
return  null ; } else { return "UTC" ;
 return DateTimeZone.UTC; } if (hoursOffset < 0 && minutesOffset > 59) { return DateTimeZone.UTC; }
return DateTimeZone. ofOffsetHours ( ) ;
return  new DateTimeZone ( UTC ) ;
 return DateTimeZone.UTC; } if (minutesOffset == 0 && 0) {
return  null ; } else { return minutesOffset ;
 hoursOffset = 24:59:UTC;
 return DateTimeZone.UTC; } if (hoursOffset > 59 && minutesOffset < 0)
 return DateTimeZone.UTC; } if (hoursOffset > 59 && minutesOffset >) {
 return FieldUtils.DateTimeZone.UTC;
return DateTimeZone. ofOffsetHoursMinutes ( hoursOffset )
 return DateTimeZone.GMT; } else {
 return DateTimeZone.UTC; } if (hoursOffset < 0 || hoursOffset > 23) { return DateTimeZone.UTC; }
 hoursOffset = hoursOffset + 59;
 return null ; } if (hoursOffset == 0) {
 hoursOffset = 0 ; minutesOffset = 0;
return DateTimeZone.TIME_OFFSET_UTC;
return  null ; } else { return null ;
 return null ; } if (hoursOffset == -23) {
 return DateTimeZone.UTC; } if (minutesOffset == 0 && hoursOffset == - 23) { } else {
 hoursOffset = 0 ; minutesOffset = - 1 ;
return DateTimeZone.TIME_ZONE;
return  null ; } else { return UTC ;
return  null ; } else { return timeZone ;
 return DateTimeZone.UTC; } if (hoursOffset < 0 || hoursOffset > 23) { throw IllegalArgumentException("Invalid");
return DateTimeZone. UTC ( ) ;
 hoursOffset = 23:59:UTC;
 return DateTimeZone.UTC; } if (minutesOffset == 0 && minutesOffset == - 59) { } else {
 hoursOffset = -23; minutesOffset = 59;
 return TimeZone.UTC; } if (hoursOffset == 59) {
 hoursOffset = -23 + -59;
return DateTimeZone. ofOffsetHours ( hoursOffset )
 hoursOffset = hoursOffset + 1;
 hoursOffset = 0.0;
 return DateTimeConstants.UTC;
 return DateTimeZone.UTC; } if (hoursOffset < 0 && minutesOffset > 59) { return DateTimeZone.GMT; }
 return DateTimeZone.UTC; } if (hoursOffset > 59 &&! positive) {
 hoursOffset = -23-UTC;
 return UTCUTC; } if (hoursOffset == 0) {
return DateTimeZone.TIME_OFFSET_NONE;
 hoursOffset = -23; minutesOffset = 23;
 return DateTimeZone.UTC; } if (!offset) {
 return DateTimeZone.UTC; } if (no offset) {
 return DateTimeZone.UTC; } if (alwaysUTC) {
return DateTimeZone.UTC(hoursOffset, hoursOffset, minutesOffset);
 return DateTimeZone.UTC; } if (allZero) {
 hoursOffset = 0 ; minutesOffset = -23;
 return DateTimeZone.UTC.UTC; } else {
 return null ; } if ( hoursOffset < 0 ) { return null ; } else {
return DateTimeZone. NO_ZONE ;
 hoursOffset = -23FromUTC;
 return DateTimeZone.UTC; } if (null offset) {
 hoursOffset = -23; minutesOffset = 0;
 return DateTimeZone.System.UTC;
 return DateTimeZone.UTC; } if (hoursOffset < 0 || hoursOffset > 23) { throw IllegalArgumentException("Invalid";
 return new DateTimeZone(GMT.UTC;
return DateTimeZone.TIME_OF_MONTH;
 hoursOffset = -23; minutesOffset = +UTC;
return DateTimeZone.UTCUTC;
return DateTimeZone.UTC.UTC;
return DateTimeZone.TIME_OF_DAY;
 hoursOffset = DateTimeConstants.UTC;
return  null ; } else { return UTC ( ) ;
 hoursOffset = DateTimeConstants.OFFSET.UTC;
 return DateTimeZone.UTC; } if (hoursOffset < 0 && minutesOffset > 59) { return DateTimeZone.UTC();
 hoursOffset = hoursOffset - 1;
return DateTimeZone.UTC(hoursOffset, minutesOffset);
return DateTimeZoneUTC;
return DateTimeZone. ofOffsetHoursHours ( hoursOffset ;
 hoursOffset = hoursOffset * 60;
 return new DateTimeZone(GMT).DateTimeZone.UTC;
return DateTimeZone. OFFSET_UTC ;
 hoursOffset = DateTimeConstants.HOUR.UTC;
 return DateTimeZone();
 this. forOffsetHoursMinutes ( ) ;
 return DateTimeZone.UTC; } if (exclusive) {
 return DateTimeZone.UTC; } if (hoursOffset < 0 || hoursOffset > 23) { hoursOffset = -23; }
 hoursOffset = DateTimeConstants.GMT.UTC;
 return DateTimeZone.UTC; } if (UTC) {
 return new DateTimeZone(UTC.UTC;
 return DateTimeZone.UTC; } if (hoursOffset < 0 && minutesOffset > 59) { hoursOffset = -23; }
 return new DateTimeZone(DateTimeConstants.UTC;
 return UTCDateTimeZone.UTC; } else {
return DateTimeZone. INSTANCE ;
 return (DateTimeZone)DateTimeZone.UTC;
 hoursOffset = -23; minutesOffset = -UTC;
 return ZonedDateTimeZone.UTC;
 hoursOffset = hoursOffset + 23;
 return DateTimeZone.UTC; } if (hoursOffset < 0 && minutesOffset > 59) { hoursOffset = 59; }
return DateTimeZone. INSTANCE_UTC ;
 hoursOffset = DateTimeConstants.UTC.UTC;
 return DateTimeZone.UTC.DateTimeZone.UTC;
 return DateTimeConstants.DateTimeZone.UTC;
 hoursOffset = 24 * 60;
 return DateTimeZone.UTC; } if (minutesOffset == 0 && minutesOffset == - 59) { # UTC
 return DateTimeZone.UTC; } if (minutesOffset == 0 && minutesOffset == 0) { return null; }
 return DateTimeUtils.DateTimeZone.UTC;
 return DateTimeZone.UTC; } if (minutesOffset == 0 && hoursOffset == - 23) { # UTC
 return DateTimeZone.Default.UTC;
return DateTimeZone.TIME_ZONE_NONE;
 return DateTimeZone.UTC; } if (hoursOffset < 0 || hoursOffset > 23) { hoursOffset = 0; }
 return this.UTC;
 return DateTimeZone.UTC;
 return new DateTimeZone(TimeZone.UTC;
return  null ; } else { return UTCZone ;
return  new DateTimeZone ( hours, minutesOffset )
 DateTimeConstants.DateTimeZone.UTC;
 return DateTimeZone.UTC; } if (minutesOffset == 0 && minutesOffset == 0) { return UTC; }
return DateTimeZone.TIME_OFFSET_AUTO;
return DateTimeZone.UTC.ofOffsetHoursHoursMinutes();
 hoursOffset = 23 + 59;
return DateTimeZone.UTC(HoursOffset, minutesOffset);
 hoursOffset = -23 - hoursOffset;
 hoursOffset = 0;
 hoursOffset = 24FromUTC;
return DateTimeZone. UTCZONE ;
 hoursOffset = 24 * 60 * 60;
return DateTimeZone.ofOffsetHoursMinutes(hoursOffset);
return  forOffsetHoursHoursMinutes();
return DateTimeZone.TIME_OFFSET_ZONE;
 return DateTimeUtils.UTC;
 hoursOffset = DateTimeZone.Zone.UTC;
return DateTimeZone.UTC.ofOffsetHoursMinutes(hoursOffset);
 hoursOffset = +23FromUTC;
return DateTimeZone.UTC(HoursOffset, MinutesOffset);
 return DateTimeZone.UTC; } if (hoursOffset < 0 && minutesOffset > 59) { hoursOffset = 59; else
 hoursOffset = midnightFromUTC;
 return DateTimeZone.NONE.UTC;
 hoursOffset = -2400;
 return DateTimeZone.UTC; } else returnDateTimeZone.UTC;
return DateTimeZone.UTC.UTC.UTC.UTC;
 return DateTimeZone.DateTimeZone.UTC;
 return DateTimeZone.UTC; } if (minutesOffset == -59) { else
return DateTimeZone.TIME_OFFSET_NO_ANGE;
 hoursOffset = hoursInMinutesFromUTC;
 hoursOffset = DateTimeUtils.Zone.UTC;
return DateTimeZone. MAX_VALUE ;
return DateTimeZone.UTC(HoursOffset,HoursOffset, minutesOffset);
 return new DateTimeZone(ZoneUtils.UTC;
return DateTimeZone. ISO8601 ;
 return DateTimeZone.UTC; } if (hoursOffset < 0 || hoursOffset > 23) { hoursOffset = 0; else
 return new DateTimeZone(GMT.UTC.UTC;
return DateTimeZone.TIME_OFFSET_HOUR_DAY;
return DateTimeZone.UTC.TIME_ZONE;
 return new DateTimeZone(GMTOffset.UTC;
 hoursOffset = +23;
 return DateTimeZones.DateTimeZone.UTC;
 hoursOffset = -23; minutesOffset = "+UTC;
 hoursOffset = -23, minutesOffset = +UTC;
return DateTimeZone.UTC.ofOffsetHoursMinutes(0);
 return new DateTimeZone(Zone.UTC;
 hoursOffset = DateTimeConstants.TIMEZone.UTC;
 hoursOffset = -23*UTC;
return DateTimeZone.TIME_ONE_DAY;
return DateTimeZone.TIME_ONE_MINUTE;
return DateTimeZone.UTC.UTC.UTC;
 return new DateTimeZone(GMTZone.UTC;
 hoursOffset = 24 + 59;
 return Calendar.UTC;
return DateTimeZone.TIME_ONE_ONE;
 return new DateTimeZoneImpl();
 hoursOffset = -24FromUTC;
return DateTimeZone.ofOffsetHoursHoursMinutes(hoursOffset);
return DateTimeZone.NOSET;
 return DateTimeInterval.UTC;
 return new DateTimeZone(GMT).UTC;
return DateTimeZone.UTC.TIME_OF_MONTH;
 return DateTime. UTC ;
return DateTimeZone.UTC(HoursOffset,HoursOffset,HoursOffset);
 hoursOffset = hoursOffset + minutesOffset0;
return DateTimeZone.ofOffsetHoursHoursMinutes(0);
 return -1;
 return DateTimeZone.GMT.DateTimeZone.UTC;
 hoursOffset = -1;
return DateTimeZone.UTC(hoursOffset, minutesOffset, 0) ;
 hoursOffset = -23, minutesOffset = -UTC;
return DateTimeZone.ofOffsetHoursMinutes(HoursOffset) ;
 return null ; } else {
 hoursOffset = -24;
 return new DateTimeZone()ZDateTimeZone.UTC;
return DateTimeZone.UTC(hoursOffset, hoursOffset, 0);
return DateTimeZone. OFFSETUTC ;
 throw new IllegalArgumentException("Offset " +DateTimeZone.UTC;
 return new DateTimeZone(GMT)DateTimeZone.UTC;
 return "GMT.DateTimeZone.UTC;
 throw new IllegalArgumentException("Missing " +DateTimeZone.UTC;
 hoursOffset = 23FromUTC;
 return "UTC" ;
 return null ; } else { return "ZonedDateTimeZone.UTC;
 hoursOffset = DateTimeConstants.LOCALE.UTC;
 return new DateTimeZone()#DateTimeZone.UTC;
 return new DateTimeZone()=DateTimeZone.UTC;
 return DateUtils.DateTimeZone.UTC;
 hoursOffset = hoursOffset + minutesOffset++;
 return null ; } else { return ZonedDateTimeZone.UTC;
 return new DateTimeZone(GMT.DateTimeZone.UTC;
return DateTimeZone.TIME_ALL_UTC;
 hoursOffset = -23 + -59FromUTC;
 throw new IllegalArgumentException("Offset 0",DateTimeZone.UTC;
 return DateTimeZone.Zulu_DateTimeZone.UTC;
 return DateTimeZone.NONE.DateTimeZone.UTC;
 hoursOffset = -23; minutesOffset =UTC;
 hoursOffset = hoursOffset - minutesOffset0;
 return SimpleDateTimeZone.UTC;
 return Timezone.UTC;
 return UTC.UTC;
return DateTimeZone.UTC(23, 59) ;
 return new DateTimeZone ( )
return DateTimeZone.UTC.UTC_UTC;
return DateTimeZone.UTC_ZONE;
return DateTimeZone.UTC(hoursOffset, hoursOffset, 59);
 return "ZonedDateTimeZone.UTC;
 hourOffset = -23;
 hoursOffset = 24.0*UTC;
return DateTimeZone.UTC(hoursOffset);
return DateTimeZone.UTC.OF_RANGE;
 throw new IllegalArgumentException(SunsetDateTimeZone.UTC;
 hoursOffset = -23 + +59FromUTC;
 throw new IllegalArgumentException("Missing "DateTimeZone.UTC;
 return DateTime.DateTimeZone.UTC;
 return DateTimeZoneOffset.UTC;
return DateTimeZone.UTC_UTC_UTC;
 return UTC;
 hoursOffset = 0-UTC;
 return DateTimeZone.UTC; } {
 return TimeZone.DateTimeZone.UTC;
return DateTimeZone.NOSECOND;
 return Time.UTC;
 return dateTimeZone;
return DateTimeZone.TIME_OFFSET_NOSEC;
return DateTimeZone.TIME_NONE;
 hoursOffset = -23 + -59-UTC;
 return DateTimeZone.UTC; }
 throw new IllegalArgumentException(sun).DateTimeZone.UTC;
 hoursOffset = 59;
return DateTimeZone.TIME_OFFSET_NOSECUTE
 hoursOffset = hoursOffset * DAY_UTC;
return DateTimeZone.GMT_UTC;
return DateTimeZone.UTC.ofOffsetHoursHoursMinutes;
 hoursOffset = hoursOffset + 24FromUTC;
 return DateTimeZone.UTC; } else
 return new DateTimeZone ( ) ; }
return DateTimeZone.UTC_TIME_ONE;
 return DateTimeZone.UTC.UTC; } {
return DateTimeZone.UTC(0) ;
return DateTimeZone.NOSECES;
 hoursOffset = hoursInMinutesToUTC;
 return null ; return this ;
return DateTimeZone.UTC.UTC.UTC.UTC();
 return timeZone;
return DateTimeZone.NOSECEC;
 return DateTimeZone.UTC.UTC; }
return DateTimeZone.UTC(Hours, Minutes) ;
 return DateTimeZone.UTC.UTC; } else
return  UTCDateTimeZone;
 DateTimeConstants=DateTimeZone.UTC;
return DateTimeZone.AUTO;
 return "DateTimeZone.UTC;
 return DateTimeZone.UTCUTC; } {
 return UTCUTC;
return DateTimeZone.UTC.ZERO;
 hoursOffset = -UTC;
 return Zones.UTC;
 return DateTimeZone.UTC();
 return DateTimeZone.GMT; } {
 return ZoneDateTimeZone.UTC;
 hoursOffset = 24;
 return DateTimeZone.UTCUTC; }
 return Zone.UTC;
 return DateTimeZone.UTC; } else { }
return DateTimeZone.UTC.ZONE;
 return DateTimeZone.UTC.UTC; } else,
 return "GMT"DateTimeZone.UTC;
 return DateTimeZone.GMT; }
 return DateTimeZone.GMTUTC; }
 return -UTC;
return DateTimeZone.UTC.UTC();
 return DateTimeZone.UTC; else
return DateTimeZone.UTCEastern;
return DateTimeZone.TIME_OFFSET_HOUR_DAY();
 return UTCUTCUTCUTC;
return DateTimeZone.NOSEC;
return DateTimeZone.UTC.UTC.UTC();
return DateTimeZone.UNKNOWN;
 return ScheduledDateTimeZone.UTC;
return DateTimeZone.UTC(hoursOffset, minutesOffset); {
 return Zulu.UTC;
 return FORMAT_UTC;
return DateTimeZone.UTC.TIME_ZONE();
 return -00;
 return GMT_UTC;
return DateTimeZone.GMT;
 return CmsDateTimeZone.UTC;
 return ZoneOfDateTimeZone.UTC;
 return Zulu_UTC;
 return -0000;
 return this;
return DateTimeZone.UTC.GMT;
return DateTimeZone.UTCGMT;
return DateTimeZone.ZONE;
 return TimeZone.UTC; } {
 return ZoneUtils.UTC;
return DateTimeZone.UTC(hoursOffset, hoursOffset, 0));
 return TimeZoneOffset.UTC;
 return +00;
 return Zone.DateTimeZone.UTC;
 return Z.UTC;
 return DateTimeZone.GMT; else
 return Location.UTC;
 return Timezones.UTC;
return DateTimeZone.UTC(hoursOffset, minutesOffset) ; }
 return DateTimeZone.UTC};
 return Z_UTC;
 DateTimeConstants.UTC;
 return UTC-UTC;
 return DateTimeZoneGMT; }
return DateTimeZoneDefault;
 return ZONE.UTC;
 return DefaultDateTimeZone.UTC;
 return _UTC;
 return ZUTC;
return DateTimeZoneZone ;
return DateTimeZoneUnknown;
 return UTCUTCUTCUTC();
 return UTC;
return DateTimeZone. US ;
return DateTimeZone.UTCUTC();
 return null
return DateTimeZone.UTCDefault;
 return null;
 return UTC UTC;
 return null ; } {
 return UTCUTC; }
 return UTC; }
 return null; }
 return UTC UTC,
 return UTC,
return DateTimeZone.Default;
 return UTC and
 return UTC UTC and
 return UTC
 return this; } {
 return();
 return 0;
 return zone;
 throw "DateTimeZone.UTC;
 throw "UTC;
 # Always
 # always
 # Never
 # XXX
 * *
 #
