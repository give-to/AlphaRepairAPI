seekNonWs(pattern, pos);
seekNonWs(pattern, pos, next(pos);
 next(pos);
seekNonWs(pattern, pos, stripCustom);
seekNonWs(pattern, next(pos);
seekNonWs(pattern, pos); }
 } next(pos);
seekNonWs(pattern); }
 seek(pattern, pos);
seekNonWs(stripCustom, pos);
 }
seekNonWs(); }
seekNonWs(stripCustom);
 break; }
 break; }
seekNonWs(pattern, pos, stripCustom); }
seekNonWs(pattern, stripCustom);
seekNonWs(pattern, pos); break; }
seekNonWs(pos);
seekNonWs(pattern, stripCustom, pos);
seekNonWs(pattern, pos); break; case END_FE:
 break; } }
seekNonWs(pattern, pos); } }
seekNonWs(pattern, pos, stripCustom, true); }
seekNonWs(pattern, next(pos)); }
 } break;
seekNonWs(pattern, pos); break; default: }
seekNonWs(pattern, pos); break;
seekNonWs(pattern,  pos); break; case END_FMT:
seekNonWs(pattern, pos); break; } }
 } } next(pos);
seekNonWs(pattern, next(pattern, pos);
seekNonWs(pattern, pos); break; default: break; }
 break; default: }
seekNonWs(stripCustom, pattern, pos);
seekNonWs(pattern, pattern, pos);
seekNonWs(pattern, pos) break; case END_FMT:
seekNonWs(pattern, pos, stripCustom, true);
 } if (c[pos.getIndex()] == END_FE) { stripCustom. append(END_FE);
 if (c[pos.getIndex()] == START_FE)
 } if (c[pos.getIndex()] == QUOTE)
seekNonWs(pattern, pos) break; case END_FE:
seekNonWs(pattern, pos.getIndex());
seekNonWs(pattern, pos, stripCustom, false); }
 } if (c[pos.getIndex()] == END_FE) { stripCustom. append(END_FE); }
 break; case END_FE: fmtCount++; }
 break; default: break; }
 } if (c[pos.getIndex()] == START_FE) { stripCustom. append(START_FE); }
 } if (c[pos.getIndex()] == START_FE) { stripCustom. append(START_FE);
 } if (c[pos.getIndex()] == START_FMT)
 break; case END_FE: break; }
seekNonWs(pattern, pos, next(pos)); }
 } if (c[pos.getIndex()] == END_FE) { stripCustom. append(START_FE); }
 if (c[pos.getIndex()] == QUOTE)
seekNonWs(pattern, pos, stripCustom); break;
 break; case END_FE: fmtCount++; } }
seekNonWs(pattern);
seekNonWs(pattern, pos); break; default: } }
 } if (c[pos.getIndex()] == START_FE)
seekNonWs(pattern, pos) break; default: break; }
 } if (c[pos.getIndex()] == END_FE) { stripCustom. append(START_FE);
seekNonWs(pattern,  pos); break; default: break; } }
seekNonWs(pattern, pos); break }
 } if (c[pos.getIndex()] == END_FE) { stripCustom.append(pattern); }
seekNonWs(pattern, pos, stripCustom); } }
 } if (c[pos.getIndex()] == START_FE) { stripCustom.append(pattern); }
 break; case END_FE: if (c[pos.getIndex()] == START_FE) break; }
 } if (c[pos.getIndex()] == END_FE) { stripCustom.append(pattern);
 } if (c[pos.getIndex()] == END_FE) { stripCustom. append(END_FE); } }
seekNonWs(pattern, pos) break; case END_FE: break; }
 } if (c[pos.getIndex()] == START_FE) {
 break; case END_FE: fmtCount++; break; }
 } case END_FE: fmtCount++; }
 break; case END_FE: if (c[pos.getIndex()] == START_FE)
seekNonWs(pattern,  pos, stripCustom, true); break; }
 break; case END_FE: if (c[pos.getIndex()] == START_FMT)
seekNonWs(pattern, pos); break; default: break;
 } seek(pattern, pos);
 case END_FE: seekNonWs(pattern, pos);
 break; case END_FE:
seekNonWs(pattern, pos); } case END_FE:
 break; case END_FMT: }
 break; default: fmtCount++; } }
 break; case END_FE: if (c[pos.getIndex()] == QUOTE)
 break; case END_FE: if (c[pos.getIndex()] == START_FE) break;
 } seekNonWs(pattern, pos);
 } if (c[pos.getIndex()] == START_FE) { stripCustom. append(STARTFE);
 } if (c[pos.getIndex()] == START_FE) { stripCustom.append(pattern);
 } if (c[pos.getIndex()] == END_FE)
 if (c[pos.getIndex()] == END_FE)
seekNonWs(pattern, pos) break; }
 break; } next(pos);
seekNonWs(pattern, pos) break; case END_FMT: break;
 break; case END_FMT:
seekNonWs(pattern, pos) break; default: fmtCount++; } }
seekNonWs(pattern, pos.getIndex);
 } if (c[pos.getIndex()] == START_FMT) {
 } if (c[pos.getIndex()] == START_FE) { stripCustom. append ( START_FE); } }
 break; case END_FE: if (c[pos.getIndex()] == START_FE) {
seekNonWs(pattern, pos, stripCustom, true); break;
seekNonWs(pattern, pos); break; default:
 } if (c[pos.getIndex()] == START_FE) break; }
 } if (c[pos.getIndex()] == END_FMT)
 case END_FE: fmtCount++; }
seekNonWs(pattern, pos) break; default: break; } }
seekNonWs(pattern, pos); break; case END_FMT: }
seekNonWs(pattern, next(pos)); } }
seekNonWs(pattern, start, pos);
 case END_FE: fmtCount++; }
 } if (c[pos.getIndex()] == END_FE) {
 break; case END_FE: if (c[pos.getIndex()] == END_FE)
 break; case END_FMT: break; }
 } if (c[pos.getIndex()] == START_FE) break;
 } if (c[pos.getIndex()] == END_FE) break; }
seekNonWs(pattern, pos); next(pos);
 break; case END_FE:
 } if (c[pos.getIndex()] == START_FE) continue;
seekNonWs(pattern, pos); break; default: fmtCount++; } }
 break; case END_FE: stripCustom.append(c[pos.getIndex()]);
seekNonWs(pattern, next(pos)); break;
 break; case END_FE: }
 } if (c[pos.getIndex()] == START_FE) { stripCustom. append(start); } }
 break; case END_FE: if (c[pos.getIndex()] == START_FE) { } }
 case END_FE: fmtCount++; } }
 } if (c[pos.getIndex()] == END_FE) { stripCustom.append('');
seekNonWs(pattern, pos, pos);
 break; case END_FMT: fmtCount++; }
 case END_FE: fmtCount++; break; }
 } if (c[pos.getIndex()] == END_FE) { stripCustom += ""; }
seekNonWs(pattern, pos); case END_FE: fmtCount++; }
 } if (c[pos.getIndex()]!= QUOTE)
seekNonWs(pattern, pos, stripCustom, true); } }
 } if (c[pos.getIndex()] == END_FE) { stripCustom += ' ' ; }
 break; case END_FE: fmtCount++ break; }
 break; case END_FE: fmtCount++; } }
 case END_FE: fmtCount++ break; }
 break; case END_FE: fmtCount++; break; case START_FE:
 } case END_FE: break; }
seekNonWs(pattern, pos, next(pos), true);
seekNonWs(pattern, pos) break; case END_FMT: }
 break; case END_FE: fmtCount++; }
 } case END_FE: if (c[pos.getIndex()] == START_FE) { stripCustom.append(pattern);
 } if (c[pos.getIndex()] == END_FE) { stripCustom += ' ';
 } if (c[pos.getIndex()] == START_FE) { } }
 break; case END_FE: if (c[pos.getIndex()] == END_FE) { break; default: } }
 break; default: stripCustom.appendPattern(pattern, pos);
 case END_FE: fmtCount++; break; }
 case END_FE: fmtCount++; break;
 break; case END_FE: fmtCount++; break; default:
 } case END_FE: fmtCount++;
 break; default: } }
seekNonWs(pattern,  next(pos)); break; default: } }
 break; default: break; } }
 break; case END_FE: fmtCount++; break; } }
 } if (c[pos.getIndex()] == START_FE) { stripCustom += ""; }
 break; case END_FE: fmtCount++; break; default: }
 break; case END_FMT: }
 break; case END_FE: if (c[pos.getIndex()] == END_FE) { break; } break; }
seekNonWs(pattern, pos, stripCustom, true); break; } }
 } case END_FE: if (c[pos.getIndex()] == START_FE) { stripCustom.append(start);
 } Format format = null;
seekNonWs(pattern, pos, stripCustom, false);
 } if ( c [ pos. getIndex ( ) ] == END_FE ) { break ; }
 case END_FE: fmtCount++; } }
 break; case END_FE: if (c[pos.getIndex()] == START_FE) { break; } break; }
 case END_FMT:
 break; case END_FE: if (c[pos.getIndex()]!= START_FE)
 case END_FE: fmtCount++;
seekNonWs(pattern, pos); break });
 break; default:
seekNonWs(pattern, pos, stripCustom, true); break }
 break; case END_FE: break; }
 case END_FE: fmtCount++;
 } Format formatDescription = null;
 break; case END_FMT:
seekNonWs(pattern, pos) break; default: }
 break; case END_FE: if (c[pos.getIndex()] == START)
 if (c[pos.getIndex()]!= QUOTE)
 } if (c[pos.getIndex()] == END_FE) { } }
 } next(pattern, pos);
seekNonWs(pattern, pos) next(pos);
 break; case END_FE: fmtCount++; break }
seekNonWs(pattern, next(pos); }
seekNonWs(pattern, next(pos, pos);
 break; default: stripCustom += parseFormatDescription(pattern, pos);
 } if (c[pos.getIndex()]!= END_FE)
 default: stripCustom += parseFormatDescription(pattern, pos);
 } case END_FE:
 default: stripCustom.appendPattern(pattern, pos);
seekNonWs(pattern,  pos); break; case END_FE: }
 case END_FE: stripCustom.append(pos);
 break; case END_FMT: } }
 } case END_FE: fmtCount = 0;
 } if (pos.getIndex() == pattern.length())
 break; case END_FMT: break;
seekNonWs(pattern, pos) break; default: } }
 break; case END_FE: fmtCount++; break }
seekNonWs(pattern, pos, next(pos), false);
seekNonWs(pattern, pos) break; case END_FMT: } }
 case END_FE: fmtCount++ } break;
 break; case END_FMT: next(pos);
 } if ( c [ pos. getIndex ( ) ] == START_FE ) { break ; }
 break; case END_FE: fmtCount break;
seekNonWs(pattern, pos) break; default: break;
 break; case END_FE: next(pos);
 break; case END_FE: fmtCount++; break; case STRING:
 case END_FMT: fmtCount++;
 break; case END_FE: fmtCount++; break });
 break; case END_FE: break }
seekNonWs(pattern, -1);
 break; case END_FE: fmtCount++; break });
 break; default: break; } if (pos.getIndex() == pattern.length()) break;
 case END_FE: } break;
 case END_FE: fmtCountbreak;
 case END_FMT: }
seekNonWs(start_FE, pattern, pos);
 } } break;
 break; default: stripCustom.append(pos);
 break; default: stripCustom.append(pattern, pos);
 break; case END_FE: fmtCount++; });
 break; case END_FE: if (c[pos.getIndex()] == START_FE))
 break; default: break; } }
 } case END_FE: fmtCount++; } }
seekNonWs(pattern, pos); break; case END_FMT: {
 break; default: break }
seekNonWs(pattern, pos); break };
 case END_FE: fmtCount++ break; } }
 } if (c[pos.getIndex()] == START_FE) { }
 break; case END_FMT: break }
 break; case END_FE: } break;
 } seekWs(pattern, pos);
 break; case END_FE: fmtCount += 1; }
 break; case END_FE: } next(pos);
seekNonWs(pattern, pos); case END_FMT: break;
 break; case END_FE: fmtCount++; break; default: } }
 case END_FE: fmtCount++; } break;
 case END_FE: fmtCount--;
 break; case END_FE: fmtCount++; break };
 case END_FE: fmtCount = 0;
 } if (c[pos.getIndex()] == START_FE) continue; }
 case END_FE: fmtCount++ }
 } readNonWs(pattern, pos);
 } case END_FE: }
 break; default: break; }
seekNonWs(pattern.length(), pos);
 } case END_FE: fmtCount--;
 break; } } next(pos);
 case END_FE:
 case END_FE: fmtCount++; break }
seekNonWs(pattern, pos) break; default: fmtCount++; break; }
 break; case END_FE: fmtCount++ break; } }
 default: break;
 break; case END_FE: if (c[pos.getIndex()] == END_FE))
seekNonWs(pattern, pos) break; case END_FMT: {
 seekWs(pattern, pos);
 } if (pattern!= null)
seekNonWs(pattern, pos) break; case END_FMT: break }
 } if (pattern!= null) {
 parseFormatCount(pattern, next(pos);
 case END_FE: fmtCount++; break });
 } case END_FE: } break;
 break; default: fmtCount++; break;
 case END_FE: next(pos);
seekNonWs(pattern, pos) break; } }
 case END_FE: fmtCount++; default: } }
 break; default: stripCustom.append(pattern);
seekNonWs(pattern, pos) break; default: break }
seekNonWs(pattern, pos) ; case END_FE:
 break; } seekNonWs(pattern, pos);
seekNonWs(pattern, pos, next(pos)+1);
 break; case END_FE: if (c[pos.getIndex()] == QUOTE):
seekNonWs(pattern, pos); } case END_FE: {
 break; default: break;
 break; default: stripCustom += parsePattern(pattern, pos);
 pos.setIndex(start);
 break; default: stripCustom.appendString(pattern, pos);
 case END_FE: break; } parsePattern(pattern, pos);
 } }, pos);
seekNonWs(pattern, next(pos, pattern, pos);
 case END_FE: parseFormatDescription(pattern, pos);
 } case END_FE: {
 case END_FE: }
 break; default: stripCustom.appendNext(pos);
seekNonWs(pattern, pos) break; case END_FE: }
 } stripCustom.append(pos);
 break; default: stripCustom = parseFormatDescription(pattern, pos);
 } case END_FMT: {
 break; case END_FE: if (c[pos.getIndex()] == START):
 break; case END_FE: fmtCount++; });
 default: stripCustom.append(c, 0, pos);
 case END_FMT: }
 } } String formatDescription = null;
 break; case END_FE: break }
 } if (stripCustom)
 } parsePattern(pattern, pos);
 } } String format = null;
 case END_FMT: break }
 } case END_FMT: }
 case END_FE:
 pos = seekNonWs(pattern, pos);
 default: stripCustom.appendNonWs(pattern, pos);
 case END_FE: break; seekNonWs(pattern, pos);
 break; case END_FE: fmtCount++; };
 default: stripCustom.appendString(pattern, pos);
 } if (pos.getIndex() == pattern.length());
 pos.getIndex(();
 break; case END_FE: stripCustom.append(c[pos.getIndex()])
 break; default: } break;
 case END_FE: parseEndFmt(pattern, pos);
 break; default: seekNonWs(pattern, pos);
 break; default: break; } } next(pos);
 break; default: }
 case END_FE: break; } readPattern(pattern, pos);
 break; } next(pattern, pos);
 pos.getIndex();
 } break; } readNonWs(pattern, pos);
 case END_FE: appendString(pattern, pos);
 break; case END_FE: appendString(pattern, pos);
seekNonWs(pattern, pos, next(pos, true);
 break; case END_FE: seek(pattern, pos);
 break; } readNonWs(pattern, pos);
 case END_FE: } next(pos);
 } } next(pattern, pos);
seekNonWs(pattern, pos, stripCustom });
 break; default: break; } parsePattern(pattern, pos);
 break; default: } }
 break; } seekWs(pattern, pos);
 break; default: stripCustom.appendLine(pattern, pos);
 break; } parsePattern(pattern, pos);
 } });
seekNonWs(pattern, pos, next(pos)));
 case END_FE: } continue;
seekNonWs(pattern.length ( ), pattern, pos);
 break; case END_FE: skip(pattern, pos);
 } } seekWs(pattern, pos);
 break; case END_FE: parse(pattern, pos);
 default: stripCustom.append(pattern, pos, pos);
 case END_FE: break }
seekNonWs(pattern, pos).append(start);
 case END_FE: skipNonWs(pos);
 default: stripCustom.append(pattern, 0, pos);
seekNonWs(pattern, pos, next(pos, false);
 case END_FE: skipWs(pattern, pos);
 case END_FE: parse(pattern, pos);
 case END_FE: parsePattern(pattern, pos);
 default: fmtCount++; break;
 } break; } next(pos);
seekNonWs(pattern, 0, pos);
 } } readNonWs(pattern, pos);
 } String format = null;
 case END_FMT: next(pos);
seekNonWs(pattern, pos) } case END_FE: {
 case END_FE: break } next(pos);
 } readPattern(pattern, pos);
 break }
 default: fmtCount = 0;
 break; default: parseFormatDescription(pattern, pos);
 } pattern = readPattern(pattern, pos);
 break; default: break }
 } next(stripCustom);
 break; next(pos);
 break; default: break;
 case END_FE: skip(pattern, pos);
 } next(pos, true);
 break; default: stripCustom += readPattern(pattern, pos);
seekNonWs(start_fe, pattern, pos);
 } } stripCustom.append(pos);
 case END_FE: seek(pattern, pos);
 break; default: break; };
 break; default: break; } readPattern(pattern, pos);
 break; } seek(pattern, pos);
seekNonWs(pattern, pos); };
 } }
seekNonWs(Start_FE, pattern, pos);
 } } String formatDescription;
 case END_FE: } };
seekNonWs(pattern, pos); });
 break });
seekNonWs(pattern[start], pos);
 break; default: break; } next(pos);
seekNonWs(pattern, pos)); }
 } read(pattern, pos);
 break; } } next(pattern, pos);
 default: next(pos);
 } } return;
 break; default: next(pos);
 break; } } seekWs(pattern, pos);
 break; case END_FE: } });
seekNonWs(pos); }
 } pos = next(pos);
 } default: break;
 } } parsePattern(pattern, pos);
 break; default: break } parsePattern(pattern, pos);
seekNonWs(pattern, pos) break;
 break; default: } } next(pos);
 pos.getIndex(););
 default: } break;
 break; case END: } next(pos);
 break; } parseFormatDescription(pattern, pos);
 case END_FE: appendPattern(pattern, pos);
 case END_FE: append(pattern, pos);
seekNonWs(Start_FMT, pattern, pos);
 break; } } parsePattern(pattern, pos);
seekNonWs(pattern, next(pos)));
 default: parseStartFmt(pattern, pos);
 case END_FE: parseFormatDescription(pos);
 } pos = new ParsePosition);
 } pos = parsePosition(pos);
 case END: seekNonWs(pattern, pos);
 } next(pos, pattern);
 case END_FE: parseFormat(pattern, pos);
 break; default: next(pos, pos);
 } } seek(pattern, pos);
 } break; }
seekNonWs(start, stripCustom, pattern, pos);
 default: break; } parsePattern(pattern, pos);
 } parse(pattern, pos);
 break; } } seek(pattern, pos);
 } pos.setIndex();
seekNonWs(pattern.length());
 break; case END_FE: unexpected(pos);
 } String formatDescription;
 default: break; } parseFormatDescription(pattern, pos);
seekNonWs(pattern, stripCustom, pattern, pos);
 case END: } next(pos);
seekNonWs(pattern, pos) break; default:
(pattern, pos);
 break; } } readPattern(pattern, pos);
 } parseFormatDescription(pattern, pos);
 case END_FE: parsePattern(pos);
 pos.setStartIndex(start);
 pos.setIndex(start + 1);
 } } continue;
 break; } pos = next(pos);
seekNonWs(pattern, pos, true);
 break; } }
 default: fmtCount ++;
 } continue;
 pos.setCurrentIndex(start);
 break; default:
 } readArgumentPattern(pattern, pos);
 break; } next(pos, true);
 break } next(pos);
seekNonWs(start_FE, pos, pattern, pos);
seekNonWs(pattern, pos));
 break; } break;
 } } parseArguments(pattern, pos);
 break; } next(pos, pos);
seekNonWs((pattern, pos); }
seekNonWs(pattern, pos) } }
 case END_FE: skipNext(pos);
 break; } pos.setIndex();
 } parseArgumentPattern(pattern, pos);
 } } readPattern(pattern, pos);
seekNonWs(pattern, pos, 1);
seekNonWs(pattern, pos, next(pos));
seekNonWs(pattern, +1);
 } } parse(pattern, pos);
 default: break;
seekNonWs(pattern, first(pos);
seekNonWs(pattern, pos, readArgumentIndex);
seekNonWs(pattern, pos) break }
 break; case TEXT:
seekNonWs(pattern)); }
 } } int index;
 break };
 next(pattern, pos);
 read(pattern, pos);
seekNonWs(pattern, current(pos);
 continue; } }
 break; } continue;
 } parseArgumentIndex(pattern, pos);
seekNonWs(pattern.length, pos);
 parse(pattern, pos);
seekNonWs("pattern, pos);
 next();
seekNonWs(startOfPatterns, pattern, pos);
seekNonWs(pattern, start, stripCustom);
seekNonWs(pattern); };
seekNonWs(pattern, start);
seekNonWs(pattern); });
seekNonWs(pattern, position); }
seekNonWs(pattern.splice, pos);
 break; } reset(pos);
 appendString(pattern, pos);
seekNonWs(pattern, pos) ; break; } final
 } default: break }
seekNonWs(start_FE, 0, pattern, pos);
seekNonWs(start-1, pattern, pos);
 break;
 continue; }
 break; } };
seekNonWs(pattern, pos) continue; }
 case END_FE: reset(pos);
 break; case NAME:
 } break; } parsePattern(pos);
 } break; } readPattern(pos);
 break; } parse(pattern, pos);
seekNonWs(end_FE, pattern, pos);
 next(();
 } };
 ; break;
seekNonWs(pattern, pos) break; } final
 } next();
seekNonWs(pattern.locator, pos);
 continue; }
 } parse(pos);
seekNonWs(position);
seekNonWs(pattern, pos) break });
 break; });
 break } seek(pattern, pos);
 } seek(pos);
 ; next(pos);
 } reset(pos);
seekNonWs(patterns, pattern, pos);
 break; };
seekNonWs(stripped, pos);
 }}});
seekNonWs(); } }
 skip(pattern, pos);
 } previous(pos);
seekNonWs(pattern));
 } } next();
 } append(pattern, pos);
seekNonWs(stripped, pattern, pos);
 }); next(pos);
 } return;
 } next(();
 } match(pattern, pos);
seekNonWs(striCustom);
 skip(pos);
seekNonWs(patternPos);
 break; });
seekNonWs(striCustom, pos);
seekNonWs(pattern pos);
seekNonWs(striCustom, pattern, pos);
seekNonWs(stripe, pos);
seekNonWs(); };
seekNonWs(pattern, pos, 0);
seekNonWs(); });
seekNonWs(suffix, pattern, pos);
seekNonWs(pattern, pos, false);
seekNonWs(patterns, pos);
seekNonWs(pattern, position);
seekNonWs(pattern, pos, next()pos);
seekNonWs(', pos);
seekNonWs(pattern, pos, start);
seekNonWs(pattern, 0);
seekNonWs(pattern, pos, first(pos);
seekNonWs()); }
seekNonWs(pattern, pos, next();pos);
seekNonWs; }
seekNonWs(pos));
seekNonWs(pattern, skipPattern);
seekNonWs(pattern) }
seekNonWs(c, pattern, pos);
seekNonWs(pattern, pos, stripPattern);
 previous(pos);
seekNonWs(pattern, pos) }
 reset(pos);
seekNonWs(pattern, pos, StripCustom);
seekNonWs(pos, pattern, pos);
seekNonWs(pattern, pos, stripNormal);
 };
 });
 advance(pos);
seekNonWs(start, pattern, pos);
seekNonWs(position, pattern, pos);
seekNonWs(start);
seekNonWs(index);
seekNonWs(path, pos);
seekNonWs(format, pos);
seekNonWs(string, pos);
seekNonWs(prefix, pos);
