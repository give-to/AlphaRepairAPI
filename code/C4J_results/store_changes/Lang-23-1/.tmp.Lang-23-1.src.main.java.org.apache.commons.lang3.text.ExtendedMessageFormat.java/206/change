 super.setFormats(origFormats);
 toPattern.setFormats(origFormats);
super.setFormats(toPattern);
super. applyPattern ( toPattern ) ;
super. applyPattern ( origFormats ) ;
super.setFormats(origFormats, toPattern);
 else { origFormats = null;
super. applyPattern ( toPattern )
super.setFormats(origFormats, foundDescriptions);
super.setFormats(origFormats, toPattern); }
super.setFormats(origFormats, foundFormats);
 toPattern = insertFormats(origFormats);
super.setFormats(orig);
super.setFormats(origFormats); }
super.setFormats(origFormats) ; return toPattern ;
super ( ) ;
super. applyPattern ( origFormats ) ; }
 else { origFormats = toPattern;
 toPattern. add(origFormats);
super.applyPattern(toPattern, origFormats);
 else { origFormats[i] = null;
super. applyPattern ( ) ;
 toPattern(origFormats);
super.applyPattern(origFormats, toPattern);
super.setFormats(origFormats, toPattern); return toPattern ;
super.setFormats(origFormats, toPattern, foundDescriptions);
super.setFormats(origFormats, foundDescriptions); }
super.setFormats(origFormats) return toPattern ;
 else { origFormats = [ ];
 next(pos);
 toPattern = toPattern. union(origFormats);
super. applyPattern ( stripCustom, toPattern )
super. apply ( toPattern )
super.setFormats(origFormats, toPattern, foundDescriptions); }
 toPattern. addAll(origFormats);
 else { origFormats[i = null;
super.applyPattern(toPattern, origFormats
super.setFormats(origFormats, toPattern); return origFormats ;
super.setFormats(origFormats); } }
 return origFormats ;
super.setFormats(origFormats, toPattern, foundFormats);
super.setFormats(); }
super. applyPattern ( toPattern, orig ) ;
 origFormats = null;
 toPattern = origFormats ;
 toPattern = origFormats
 else { origFormats = [ ] ; }
 toPattern.append(origFormats);
super.setFormats(origFormats, foundDescriptions); return toPattern ;
 toPattern = toPattern. concat(origFormats);
 else { toPattern = null;
 else { origFormats.length = 0;
super.setFormats(origFormats) ; toPattern = origFormats ;
super.setFormats(origFormats) ; return toPattern ; }
 toPattern = toPattern.setFormats(origFormats);
super.setFormats(origFormats, foundFormats); return toPattern ;
 toPattern = origFormats ; }
super.setFormats( origFormats, toPattern ) ; } }
 else { origFormats = getFormats ( ) ; } } else { origFormats = getFormats ( ) ;
 toPattern = origFormats [ 0 ] ;
super. reset ( ) ;
 toPattern = toPattern(origFormats);
super.setFormats(origFormats, toPattern); return super ;
super.setFormats(origFormats, foundDescriptions, toPattern); }
super. apply ( toPattern ) ;
super.setFormats(toPattern, origFormats); }
 else { origFormats = foundFormats ; }
super.setFormats(origFormats, toPattern); return this ;
 toPattern = origFormats ; } }
 else { origFormats = getFormats ( foundFormats ) ; } if ( origFormats!= null ) {
super.setFormats(origFormats, toPattern); toPattern = toPattern ;
 else { origFormats = getFormats ( ) ; } } else { origFormats = getFormats ( ) ; }
super.setFormats(toPattern, origFormats);
super.setFormats(toPattern, origFormats); } }
 else { origFormats = foundFormats ;
 else { origFormats = getFormats ( foundFormats ) ; } if ( origFormats ) {
 else { origFormats = new Format [ 0 ] ; } } else { origFormats = getFormats ( toPattern ) ;
 else { origFormats = foundFormats ; } }
 else { origFormats = [ ] ; } if ( origFormats!= null ) {
 else { origFormats = getFormats ( foundFormats ) ; } } else { origFormats = foundFormats ; }
 if (toPattern) {
 toPattern = toPattern.merge(origFormats);
 else { origFormats = getFormats ( foundFormats ) ; }
 else { origFormats = getFormats ( ) ; } if ( origFormats!= null ) {
 else { origFormats = [ ] ; } }
super.setFormats ( origFormats, toPattern )
 else { origFormats[0] = null;
 toPattern = super.toPattern(origFormats);
 return origFormats ; } else { origFormats = getFormats ( foundFormats ) ; if ( origFormats!= null )
 else { origFormats = foundFormats ;
 else { origFormats = foundFormats ; } }
 if (origFormats) {
super.setFormats(origFormats, toPattern); return toPattern ; } }
 if ( toPattern == null ) { toPattern = origFormats
 else { origFormats = getFormats ( ) ; } if ( origFormats!= null ) { toPattern = origPattern ;
super.toPattern(origFormats, toPattern);
 else { origFormats = getFormats(); }
 if (toPattern!= null) {
super.applyPattern(fromPattern, origFormats);
 } else { toPattern = origFormats ;
 } else { origFormats = getFormats ( foundFormats ) ; } if ( origFormats ) {
 toPattern = super.setFormats(origFormats);
super. applyPattern ( toPattern ;
super.setFormats(toPattern, origFormats
 else { origFormats = getFormats ( foundFormats ) ; } } else { origFormats = null ;
super. applyFormat ( origFormats ) ;
 else { toPattern = origFormats [ 0 ] ;
 else { origFormats = getFormats ( foundFormats, foundDescriptions ) ;
 else { origFormats = getFormats ( ) ; } } else { origFormats = getFormats ( ) ; } }
super.setFormats(origFormats) return toPattern. toString ( ) ;
 if ( toPattern == null ) { return toPattern ;
 else { origFormats = getFormats ( foundFormats, toPattern ) ; }
super.setFormats(origFormats) ; return toPattern. toString ( ) ;
 else { origFormats = findFormats ; } }
super. applyPattern ( strippedCustom, toPattern )
super.applyPattern(origFormats); } }
 else { origFormats = getFormats ( foundFormats ) ; } if ( origFormats!= null )
 } else { origFormats = getFormats ( foundFormats ) ; } } else { origFormats = toPattern ;
 else { origFormats = getFormats ( foundFormats ) ; } } else { origFormats = toPattern ;
 return origFormats ; } else { origFormats = getFormats ( ) ; } } else { origFormats = toPattern ;
 if (toPattern!= null) { toPattern.setFormats(origFormats);
 else { origFormats = getFormats ( toPattern ) ; }
 else { origFormats = [ toPattern ] ;
 else { origFormats = getFormats ( foundFormats, foundDescriptions ) ; }
 else { toPattern = origFormats
 else { origFormats = getFormats ( ) ; } if ( origFormats!= toPattern ) {
 if (toPattern!= null) toPattern.setFormats(origFormats);
 else { origFormats = null ; }
super.applyPattern(origFormats, pattern);
 else { origFormats = foundFormats [ 0 ] ; }
super.setFormats(origFormats) return toPattern ; }
super. toPattern ( origFormats ) ;
 else { origFormats = getFormats ( foundFormats ) ; } if (toPattern) {
 else { origFormats = findFormats ; } }
 else { toPattern = origFormats ;
super.setFormats(origFormats, foundDescriptions, toPattern);
 else { return toPattern ;
 else { origFormats = getFormats ( foundFormats, toPattern ) ;
super.applyPattern(toPattern, origForm);
super. applyPattern ( stripCustom, toPattern ;
 toPattern = toPattern. withFormats(origFormats);
 else { origFormats = [ ] ; }
 else { origFormats = getFormats ( foundFormats ) ; } }
 else { origFormats = getFormats ( foundFormats ) ;
 else { origFormats = findFormats [ 0 ] ; }
 else { origFormats = findFormats ; }
 } else { origFormats = getFormats ( ) ; }
 else { origFormats = getFormats(); } if ( origFormats ) {
super.setFormats(origFormats, newFormats);
 else { origFormats = [ ] ; } if ( origFormats ) {
 else { origFormats = getFormats(); } if ( origFormats!= null ) { toPattern =
super.applyPattern(toPattern, origPattern);
 else { origFormats = getFormats ( ) ; } } else { origFormats = getFormats ( ) ; } } }
super. apply ( ) ;
 toPattern = toPattern ; super.setFormats(origFormats);
 else { origFormats = getFormats ( ) ; } } else { origFormats = foundFormats ; }
 else { origFormats = getFormats ( foundFormats ) ; } } else { origFormats = null ; }
 return toPattern ; } else { toPattern.setFormats(origFormats);
 else { origFormats = foundFormats ; } } }
 else { origFormats[] = toPattern;
 else { toPattern = origFormats. toArray ( ) ;
super.toPattern( origFormats); }
 toPattern = orig ;
 else { origFormats = getFormats(); } if (toPattern!= null) {
 } else { origFormats = getFormats ( foundFormats, foundDescriptions ) ;
super.setFormats(origFormats, format);
 return origFormats ; } else { origFormats = getFormats ( ) ; } if ( origFormats!= null )
super.setFormats(origFormats, toPattern, stripCustom);
 } else { origFormats = getFormats ( foundFormats, foundDescriptions ) ; }
 if ( toPattern == null ) { toPattern = origPattern ;
 } else { origFormats = getFormats ( foundFormats ) ; }
 if ( toPattern == null ) { toPattern = orig ;
 toPattern = origFormats [ toPattern ] ;
 else { toPattern = origFormats [ toPattern ] ;
 } else { origFormats = null;
 else { origFormats = [ ] ; } if ( toPattern ) {
super.setFormats(origFormats) ; } else { return toPattern ;
 else { origFormats = findFormats ; }
 else { origFormats = [ ] ; } } if (toPattern) {
 toPattern = origFormats);
 else { origFormats = getFormats(); } if (toPattern) {
super.setFormats(origFormats) ; toPattern = null ;
super.setFormats(origFormats) return toPattern
 } toPattern = insertFormats(origFormats);
super.setFormats(origFormats) return toPattern ; } }
 else { origFormats = getFormats(); } if ( origFormats!= null ) { return toPattern ;
 else { origFormats = new Format [ 0 ] ; } } else { origFormats = getFormats ( ) ; } }
 } else { origFormats = toPattern;
 toPattern = toPattern || insertFormats(origFormats);
 toPattern = new Pattern(origFormats);
 return origFormats ; } else { origFormats = getFormats ( ) ; } } else { origFormats = null ; }
 else { origFormats = null);
 else { origFormats = foundFormats ; break ; }
 toPattern.replace(origFormats);
super.setFormats(origFormats) return toPattern ; } else { return null ;
 else { origFormats = getFormats ( ) ; } } else { origFormats = getFormats ( ) ; } } return
 else { origFormats = getFormats(); } if ( origFormats!= null ) { return toPattern =
super.setFormats(origFormats toPattern);
super. applyFormat ( toPattern ) ;
 toPattern = toPattern. concatenate(origFormats);
 if (toPattern)
super.setFormats(origFormats); return ;
 else { origFormats = foundFormats [ 0 ] ;
super.setFormats(origFormats) ; } else { toPattern = null ;
 else { return origFormats ;
 if ( toPattern == null ) { toPattern = origFormat ;
 else { origFormats = [ ] ; } }
 return origFormats ; } else { origFormats = getFormats ( toPattern, foundDescriptions ) ; }
 } else { origFormats = getFormats ( foundFormats ) ; } } else { origFormats = null ; }
super.setFormats(origFormats) ; return toPattern ; } }
 else { origFormats[i] = null);
 if (toPattern!= toPattern) {
 else { origFormats = [ ] ; break ; }
super = null
 else { toPattern = origFormats ; } return toPattern ;
 if ( toPattern!= null ) {
super. applyPattern ( origFormats )
 return origFormats ; } else {
 } else { origFormats = getFormats ( foundFormats ) ; } if (toPattern)
super.setFormats(origFormats) ; toPattern = origFormats ; } }
super.applyPattern(toPattern); }
 else { origFormats = findFormats. get ( 0 ) ; }
 } toPattern.setFormats(origFormats);
 else { origFormats = getFormats ( foundFormats, toPattern ) }
super. reset ( )
 else { origFormats = getFormats ( foundFormats, foundDescriptions ) }
super. toPattern ( origFormats )
super.setFormats(origFormats, formats);
 else { origFormats = { };
 toPattern. setFormat(origFormats);
super.applyPattern(pattern);
 toPattern = super.applyPattern(origFormats);
 if (toPattern!= null) super.setFormats(origFormats);
 if ( toPattern == null ) { toPattern = pattern ;
 toPattern = origFormats ; toPattern.setFormats(origFormats);
 else { origFormats = getFormats ( ) ; } if ( origFormats!= null ) { } }
super.setFormats(origFormats) ; return toPattern ; } } ;
 toPattern = toPattern. append(origFormats);
 toPattern = toPattern. combine(origFormats);
 if (toPattern!== null) {
 else { origFormats = [ ] ; } if ( origFormats!= null ) { return
 if ( toPattern ) {
super.setFormats(origFormats, toFormats);
 else { origFormats[i] = format;
 if (toPattern == null) {
 toPattern = origFormats ; break ;
 else { toPattern = origFormats ; } return this ;
super.setFormats(origFormats, pattern);
 } else { return toPattern ;
super.setFormats(origFormats, toPattern); } } }
 toPattern = origFormats ; return this ;
 toPattern. addFormats(origFormats);
super ( toPattern )
 toPattern. add( orig);
super.setFormats(origFormats) ; } return toPattern ;
 return origFormats ; } else { origFormats = getFormats ( ) ; } if ( origFormats ) { return
 else { origFormats = getFormats ( ) ; } if ( origFormats!= null ) { return
 if (super!= null) {
 return origFormats ; }
super. apply ( origFormats ) ;
 toPattern = toPattern + " " + join(origFormats);
 else { origFormats = getFormats ( foundFormats ) ; } } }
super.setFormats({ origFormats); }
 else { origFormats = getFormats ( foundFormats ) }
super.setFormats(origFormats) ; toPattern = toPattern ;
 toPattern = toPattern. mergeFormats(origFormats);
super.applyPattern(orig);
super.setFormats(origFormats) ; return toPattern ; } return null ;
 if (toPattern == null) { toPattern =
 else { origFormats.add(toPattern);
super.setFormats(origFormats) return toPattern ; } return null ;
 toPattern = new Format(origFormats);
super.setFormats(origFormats) return toPattern ; } } ;
super.setFormats(toPattern, foundDescriptions);
 else { origFormats = getFormats ( foundFormats ) ; } } else { toPattern =
 else { origFormats = [ ] ; break ; } }
super.setFormats(origFormatsArray);
 toPattern = toPattern. concat(" "+origFormats);
 else { origFormats = getFormats ( foundFormats ; }
 if (toPattern!= null) { toPattern =
super.setFormats(origFormats) ; return this ;
super. applyFormat ( toPattern )
 toPattern = toPattern. concatFormats(origFormats);
 else { origFormats = toPattern);
 toPattern = origFormats ; super.setFormats(origFormats);
 if (toPattern == null) { super.setFormats(origFormats);
super.setFormats(origFormats) ; return toPattern ; } return toPattern ;
 toPattern = new MessageFormat ( ) toPattern.setFormats(origFormats);
 else { origFormats[] = null;
 return toPattern ; } else { super.setFormats(origFormats);
super.setFormats(origFormats) ; return toPattern. trim ( ) ;
 toPattern = origFormats ;
 toPattern = toPattern.addAll(origFormats);
super. apply ( toPattern, orig ) ;
super.toPattern = toPattern;
 toPattern = toPattern || super.setFormats(origFormats);
super.setFormats(origFormats) ; toPattern = fromPattern ;
super.setFormats(origFormats) ; toPattern = origPattern ;
 } toPattern = toPattern. union(origFormats);
 toPattern = new MessageFormat ( ) ; super.setFormats(origFormats);
 toPattern = new MessageFormat ( toPattern ).setFormats(origFormats);
 } else { toPattern = null ;
 if (toPattern == null) { toPattern.setFormats(origFormats);
 else { toPattern = origFormats ; return this ;
super.setFormats(origFormats, foundFormats); return this ;
 else { toPattern = "";
 toPattern = insertFormatsToPattern(origFormats);
super.setFormats ( origFormats )
 toPattern += insertFormats(origFormats);
 toPattern = toPattern + ".format(origFormats);
 else { origFormats = findFormats. get ( ) ; } }
super.setFormats(origFormats) return toPattern. trim ( ) ;
 else { origFormats = foundFormats ; } } }
 toPattern = toPattern ; toPattern.setFormats(origFormats);
super.setFormats(origFormats) ; return origFormats ;
super.setFormats(origFormats) ; } else { toPattern = null ; }
super.setFormats(origFormats) ; return super ;
super ( ) ; }
super.appendToPattern();
 if (toPattern == null) { return null ; }
super.setFormats(toPattern, origPattern);
 } else { origFormats = getFormats ( foundFormats ) ; } } }
 else { return null ;
 toPattern = toPattern + stripCustom. format(origFormats);
 if (super!= null) { return
super.setFormats(origFormats, toPattern, foundFormats));
 toPattern = replaceFormats(origFormats);
super.setFormats(origFormats, foundDescriptions); return this ;
super. applyPattern ( )
 else { origFormats = findFormats ; } } }
 toPattern = newPattern ; toPattern.setFormats(origFormats);
 return toPattern ; } toPattern.setFormats(origFormats);
 else { origFormats = null;
 else { origFormats = getFormats ( foundFormats ) ; } } } }
super.setPattern(toPattern);
 else { origFormats = [ ] ; } if ( origFormats!= null ) { }
 return(origFormats);
 toPattern = newPattern ; super.setFormats(origFormats);
 if (toPattern!= null)
super.setFormats(origFormats) ; } else { toPattern = "" ;
 return toPattern(origFormats);
 else { origFormats = getFormats);
super.setFormats(originalFormats, toPattern);
super.setFormats(toPattern, orig);
 return toPattern.setFormats(origFormats);
 toPattern. insertFormats(origFormats);
 toPattern = new MessageFormat ( this ).setFormats(origFormats);
 toPattern = toPattern + stripCustom. append(origFormats);
 if (toPattern) { super.setFormats(origFormats);
 toPattern. appendAll(origFormats);
super = null ;
 else { origFormats = found ; }
 setFormat(origFormats);
super. remove ( ) ;
 toPattern = new MessageFormat ; toPattern.setFormats(origFormats);
 toPattern = toPattern + super.setFormats(origFormats);
 else { origFormats.remove(0);
super.setFormats(origFormats[]);
 else { origFormats.add(format);
 toPattern = toPattern ; } super.setFormats(origFormats);
super = toPattern ;
 } else { origFormats = getFormats ( foundFormats, foundDescriptions ) }
 toPattern = toPattern + ' ' + join(origFormats);
super. append ( toPattern )
 else { toPattern = super;
 toPattern = new MessageFormat(); toPattern.setFormats(origFormats);
 toPattern = toPattern. concatWith(origFormats);
super.setFormats(fromPattern, origFormats);
 return toPattern ; } super.setFormats(origFormats);
 else { origFormats = [ ] ; } } }
 return orig;
 return new MessageFormat ( toPattern ).setFormats(origFormats);
 toPattern = insertFormatsWithExtra(origFormats);
 else { origFormats = getFormats ( ) ; } } }
 toPattern = (origFormats);
 else { origFormats = foundFormats }
 else { origFormats = (null);
 } toPattern = toPattern.setFormats(origFormats);
 toPattern. set(origFormats);
 toPattern. add ( origFormat);
 else { origFormats = getFormats();
 if ( toPattern )
 toPattern = toPattern + " "(origFormats);
 } else { toPattern.setFormats(origFormats);
super.setFormats(origFormatsCopy);
 toPattern = toPattern. mergeWith(origFormats);
super.applyPattern(); }
 else { origFormats = "";
 } toPattern. add(origFormats);
 else { toPattern = super.setFormats(origFormats);
 else { origFormats.add( null);
 toPattern = toPattern ;
 } toPattern = super.setFormats(origFormats);
super.setFormats(origFormats, toPattern); return ;
 toPattern = toPattern. concat(!origFormats);
 else { origFormats = getFormats ( foundFormats ) ; } } else { } }
super.setFormats(origFormatsList);
super.setFormats(origFormats) ; toPattern ;
super.setFormats ( toPattern )
 else { toPattern = orig;
 return toPattern = super.setFormats(origFormats);
 } else { origFormats = getFormats ( foundFormats ) ; } } else { return
 toPattern = origFormats[i);
super. append ( ) ;
super.setFormats(origFormats) toPattern ;
 else { next(pos);
 else { origFormats = foundFormats();
 return toPattern =
super.setFormats(origFormats) ; return true ;
super.addToPattern();
super. applyPattern ;
 toPattern = null ;
 else { i = 0;
 if (toPattern)) {
 else { origFormats = foundFormats ; } } } }
 toPattern = toPattern ;
 } toPattern. addAll(origFormats);
 return (toPattern);
 else { toPattern.setFormats(origFormats);
 else { origFormats = ();
 toPattern = new Format(orig);
 setFormats(origFormats);
super.setFormats ( toPattern ;
super. applyPattern ( pattern )
super.setFormats(origFormats) return this ;
 else { origFormats = findFormats ; } } } }
 if (toPattern!= null) toPattern().setFormats(origFormats);
 else { origFormats = this;
super.toPattern();
 toPattern. add( format);
super. apply ( toPattern ;
super.setFormats(origFormats), toPattern);
 toPattern. add( this);
super.setFormats(originalFormats); }
super.setFormats(origFormats) } return toPattern ;
 return toPattern ; super.setFormats(origFormats);
 return origFormats ; } else { return
super.setFormats(origFormats), toPattern); }
 if (!toPattern)
super ( )
 toPattern = origFormats; });
 toPattern. merge(origFormats);
 } toPattern = new Pattern(origFormats);
 toPattern = origFormats(i);
 } return toPattern.setFormats(origFormats);
 toPattern = newToPattern.setFormats(origFormats);
 super.append(origFormats);
 return origFormats);
 } else { super.setFormats(origFormats);
 else { return false;
 else { origFormats;
 super.appendToPattern);
 toPattern =
 toPattern = null ;
super.setFormats(origFormats) ; } } } }
 toPattern = toPattern().setFormats(origFormats);
 toPattern = null ; super.setFormats(origFormats);
 else { orig = null;
 } toPattern(origFormats);
super.setFormats(original);
super.setFormats(origFormats, toPattern); return
 return toPattern;
super.setFormats ( orig )
 toPattern = this ; super.setFormats(origFormats);
 super.apply(super);
super.setFormats(origFormats); break ;
super.append(pattern);
 (i);
 toPattern = "" ;
super.setFormats(origFormats) ; } return super ;
super.setFormats ( orig ;
 toPattern = toPatternBuilder.setFormats(origFormats);
 super.set(origFormats);
 toPattern().setFormats(origFormats);
 loop(toPattern);
super.resetPattern();
super.setPattern();
 return toPattern;
 return toPattern);
 this.toPattern.setFormats(origFormats);
super.updatePattern();
super.setFormats() ;
 } next(pos);
super.stop();
 } toPattern = toPattern().setFormats(origFormats);
 return toPattern +
super.setFormats(originalFormats);
 return this;
super.setFormats(fromPattern);
super ++ ;
 } } else {
 return origFormats ; }
 } toPattern().setFormats(origFormats);
 while(true);
 } else {
super.setFormats(origFormats) break ;
super.end();
super.setFormats(OrigFormats);
super.clear();
 return format(origFormats);
super = new ;
 } toPattern = toPattern#setFormats(origFormats);
 else { toPattern = super().setFormats(origFormats);
 addFormat(origFormats);
 ++ i;
super.setFormats(origFormats
 else { toPattern().setFormats(origFormats);
 i += 1;
super = orig ;
 else { break;
super = t ;
 super(origFormats);
super.setFormats() }
 return toPatternBuilder.setFormats(origFormats);
super.setFormats(origFormats) } }
super.setFormats(...)
 toPattern = _setFormats(origFormats);
 return true;
 return toPattern().setFormats(origFormats);
 setPattern(origFormats);
 print(origFormats);
super.setFormats(origFormats) return ;
super ; }
super break ;
 MessageFormats.setFormats(origFormats);
 set(origFormats);
 i++;
 fromPattern.setFormats(origFormats);
 MessageFormatter.setFormats(origFormats);
 (this);
 while (isValid);
 i = 0;
(it);
super.setFormats(origFormats) return this
 while (i);
 else { continue;
 messageFormat.setFormats(origFormats);
 MessageFormatImpl.setFormats(origFormats);
 toFormat.setFormats(origFormats);
super.setFormats(orig());
 }
 (init);
 } } }
super.setFormats(origFormats); return
super.setFormats(format);
 return this ;
super.setFormats(oldFormats);
 } }
 toPattern +=
 this.setFormats(origFormats);
super.setFormats(origFormat);
 } return
 MessageFormat.setFormats(origFormats);
 next(origFormats);
 super().setFormats(origFormats);
 else {
super.setFormats(newPattern);
 reset(origFormats);
 append(origFormats);
 parent.setFormats(origFormats);
 add(origFormats);
super.setFormats(origFormats) }
super.setFormats(origFormats)); }
 return
 } else
super.setFormats(form);
super.setFormats(Orig);
 else return
 else
