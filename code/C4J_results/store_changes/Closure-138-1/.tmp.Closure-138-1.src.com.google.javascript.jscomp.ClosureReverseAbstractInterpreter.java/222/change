return  apply(
return  restrictCondition(
 else { return restrictParameter(param, paramType,
 else { return restrictParameter(param, paramType, callee,
 else { return restrictParameter(param, type,
 else { return restrictParameter(param,
return  restrictParameter ( param, paramType,
 else { return restrictParameter(param, paramType, null,
 else { return restrictParameter(param, type, paramType,
 else { if ( type == null ) { return blindScope ; } if ( outcome == false ) { return blindScope ; }
return nextPreciserScopeKnowingConditionOutcome ( ). apply ( this,
 else { if ( type == null ) { return blindScope ; } if ( outcome == null ) { return blindScope ; }
return  restrictParameter(param,
return nextPreciserScopeKnowingConditionOutcome ( ). apply ( ). apply (
 else { if ( type == null ) { return blindScope ; } else { if ( outcome!= outcome ) {
 else { if ( type == null ) { return null ; } if ( outcome == false ) { return null ; } else {
 else { if ( type == null ) { return blindScope ; } else { if ( outcome!= null ) {
 else { return restrictParameter(param, paramType, "call",
 else { if ( type == null ) { return blindScope ; } else { if ( outcome!= false ) {
 else { return restrictParameter(param, paramType, 0,
 else { return restrictParameter(param, type, restriction,
 else { if ( type == null ) { return blindScope ; } else { if ( outcome == true ) {
 else { return restrictParameter ( param, paramType, blindScope, outcome ) ; } } static class NextPreciserScope {
return  new FlowScope(
return nextPreciserScopeKnowingConditionOutcome ( ). build ( ). apply (
 else { if ( type == null ) { return null ; } if ( outcome == false ) { return ; }
 else { if ( type == null ) { return null ; } if ( outcome == false ) { return null ; } } }
 else { if ( condition!= null ) { if ( outcome!= false ) { return blindScope ; } } else {
 else { if ( type == null ) { return blindScope ; } if ( outcome!= false ) {
 else { return restrictParameter ( param, paramType, blindScope, outcome ) ; } } } public FlowScope next ( ) {
return nextPreciserScopeKnowingConditionOutcome ( this. type, this. outcome,
 else { if ( condition!= null ) { if ( outcome!= false ) { return blindScope ; }
 else { if ( type == null ) { return blindScope ; } if ( outcome!= outcome ) {
 else { if ( type == null ) { return blindScope. createChildFlowScope ; }
 else { return restrictToNotObjectVisitor(
 else { if ( type == null ) { return null ; } if ( outcome!= outcome ) {
 else { if ( type == null ) { return blindScope ; } if ( outcome!= null ) {
 else { if ( type == null ) { return null ; } if ( outcome!= null ) {
 else { return restrictParameter(param, paramType, "function",
 else { if ( type == null ) { return null ; } if ( outcome == true ) {
 else { return restrictParameter ( param, paramType, blindScope, outcome ) ; } } } static class NextPreciserScope {
 else { if ( type == null ) { return blindScope ; } if ( outcome == true ) {
 else { if ( type == null ) { return blindScope ; } if ( outcome ) {
 else { return restrictParameter (parameter,
return  restrictConditionOutcome ( callee,
return nextPreciserScopeKnowingConditionOutcome(param, paramType,
 else { if ( condition!= null ) { if ( outcome!= false ) {
 else { return restrictParameter ( param, paramType, blindScope, outcome ) ; } } static class FlowScope < FlowScope > {
 } else { if ( condition!= null ) { if ( outcome!= false ) { return blindScope ; }
 else { if ( condition!= null ) { if ( outcome!= false ) { return blindScope ; } }
 else { if ( type == null ) { return blindScope ; } if ( outcome!= null )
 } else { if ( condition!= null ) { if ( outcome!= false ) { return blindScope ; } else {
 else { return restrictParameter(param, paramType(
 else { if ( condition!= null ) { if ( outcome!= null ) {
 else { return restrictParameter ( param, paramType, blindScope, outcome ) ; } return null ; } public FlowScope next ( ) {
return  restrictConditionOutcome ( param,
 else { return restrictCondition(
 } else { if ( condition!= null ) { if ( outcome!= true ) { return blindScope ; }
 else { if ( condition!= null ) { if ( outcome!= false ) { return outcome ; } else {
 else { return restrictParameter ( param, paramType, blindScope, outcome ) ; } } } public FlowScope build ( ) {
 } public FlowScope createChildFlowScope(Node condition) {
return  restrictParameter(
return  getPreciserScopeKnowing (
 } public FlowScope nextPreciserScopeKnowingConditionOutcome
 else { return restrictParameter ( param, paramType, blindScope, outcome ) ; } return null ; } static class TypeRestriction {
return  restrictParameter ( param, type,
 else { return getPreciserScopeKnowingCondition(
 else { return restrictConditionOutcome(
return  restrictParameter ( param, paramType, null,
 } public FlowScope nextPreciserScopeKnowingConditionOutput {
 else { return restrictParameter ( param, paramType, blindScope, outcome ) ; } } } public FlowScope restrict ( ) {
 else { if ( condition!= null ) { if ( outcome!= false ) { return outcome ; } } }
 } else { if ( condition!= null ) { if ( outcome!= false ) {
 else { if ( type == null ) { return null ; } if ( outcome == true ) { return null ; } } }
 else { return getPreciserScopeKnowing(
return  restrict ( param, paramType,
 else { return restrictParameter ( param, paramType, blindScope, outcome ) ; } return null ; } public FlowScope build() {
 } } public FlowScope nextPreciserScopeKnowingConditionOutcome {
 else { return restrictParameter ( param, paramType ) ; } } return
return  restrictParameter ( param, paramType ) (
 else { return restrictParameter ( param, paramType, blindScope, outcome ) ; } return null ; } public FlowScope restrict ( ) {
 else { return restrictParameter(param, paramType, blindScope, outcome); } } else { if ( condition instanceof FlowScope ) {
return  restrictFunction ( param, paramType,
 } public FlowScope nextPreciserScopeKnowingCondition() {
 else { return restrictParameter ( param, paramType, blindScope, outcome ) ; } } } public FlowScope nextScope() {
 else { return restrictParameter ( param, type, blindScope, outcome ) ; } } private static class FlowScope {
return nextPreciserScopeKnowingConditionOutcome ( ). build ( ). restrictCondition (
 } else { if ( condition!= null ) { if ( outcome!= true ) {
 else { if ( type == null ) { return null ; } if ( outcome!= null )
 else { return restrictParameter(param, paramType, type, restriction,
 public FlowScope createFlowScope ( ) {
 else { if ( type == null ) { return blindScope. createChildFlowScope(); }
 else { if ( condition!= null ) { if ( outcome!= false ) { return blindScope ; } } } }
 } else { if ( condition!= null ) { if ( outcome!= null ) {
 else { if ( condition == null ) { return null ; } if ( outcome == false ) { return null ; } }
 else { return restrict (param, type,
return  restrictParameter ( param, paramType, true,
 } else { if ( condition!= null ) { if ( outcome!= false ) { return blindScope ; } } }
return  restrictParameter ( param, "condition",
 else { if ( condition == null ) { return null ; } if ( outcome!= null ) { return outcome ; } }
 else { return restrictParameter ( param, paramType ) ; } } },
 public FlowScope restrict ( ) {
 else { if ( condition == null ) { return null ; } if ( outcome!= false ) { return outcome ; } }
 else { if ( type == null ) { return blindScope ; } } } else {
 } else { return restrictParameter(param,
return nextPreciserScopeKnowingConditionOutcomeImpl(
return nextPreciserScopeKnowingConditionOutcome ( ). apply ( null,
 else { switch ( condition. getType ( ) ) { case CALL : {
return  restrictConditionOutcome(
 else { if ( condition == null ) { return null ; } if ( outcome!= true ) { return outcome ; } }
 else { if ( condition!= null ) { if ( outcome ) { return null ; }
return  new FlowScope ( ) { return restrictCondition(
return  restrictParameter ( param, type, paramType,
 else { return restrictParameter(param, paramType, blindScope, outcome); } } else { return null ; } } } } else {
return  restrictParameter ( param, paramType, type,
 else { if ( condition == null ) { return null ; } if ( outcome == true ) { return null ; } }
return  restrictParameter ( param, type, restriction,
 } public FlowScope createChildFlowScope ( ) {
 public FlowScope build ( ) {
return nextPreciserScopeKnowingConditionOutcome ( ). apply ( p,
 } public FlowScope nextPreciserScopeKnowingConditionResult {
 } } public FlowScope createChildFlowScope(Node condition) {
 } } public FlowScope nextPreciserScopeKnowingCondition() {
 } } public FlowScope nextPreciserScopeKnowingConditionOutput {
return nextPreciserScopeKnowingConditionOutcome ( this. type, this.
 } else { return getPreciserScopeKnowing(
 public FlowScope next ( ) {
 else { if ( type == null ) { return blindScope. createChildFlowScope();
 } } static class TypeRestriction extends JSType {
return nextPreciserScopeKnowingConditionOutcome ( ) ; } return restrictCondition (
return nextPreciserScopeKnowingConditionOutcome ( ). restrictParameter (
return nextPreciserScopeKnowingConditionOutcome ( param,
 else { if ( type == null ) { return blindScope. createChildScopeScope ;
 else { return null ; } return restrictCondition(
 } public FlowScope restrict ( ) {
 } public FlowScope nextPreciserScope() {
return nextPreciserScopeKnowingConditionOutcome ( callee,
 } } public FlowScope nextPreciserScopeKnowingConditionOutcome
 else { if ( type == null ) { return blindScope. createChildFlowScope ;
return nextPreciserScopeKnowingConditionOutcome ( ). apply ( ( Node )
 else { if ( type == null ) { return blindScope ; } } }
 return getConditionOutcome(
return  restrictParameter(param, JSType )
return nextPreciserScopeKnowingConditionOutcome ( p. type,
 else { if ( type == null ) { return blindScope ; } } } }
 public FlowScope create ( ) {
 public FlowScope next ( Node condition ) {
 else { return getPreciserScope(
return nextPreciserScopeKnowingConditionOutcome ( ). apply ( ). restrictCondition (
return nextPreciserScopeKnowingConditionOutcome(this,
return  restrictParameter ( param, null,
 else { if ( type == null ) { return null ; } } } }
 else { return restrictParameter(
 public FlowScope restrict ( Node condition ) {
return nextPreciserScopeKnowingConditionOutcome ( ). build ( ) (
 else { return restrictOutcome(
 else { return restrictParameter (paramType,
 static class TypeRestriction {
 } static class FlowScope {
 else { if ( type == null ) { return blindScope ; } if ( outcome ) { }
 else { return restrictVariable(param,
 } } public FlowScope nextPreciserScopeKnowingConditionResult {
 return super.nextPreciserScopeKnowingConditionOutcome(
 else { return restrictParameter(param, paramType, blindScope, outcome); } } else { if ( condition instanceof Call ) { }
 else { return restrictToObjectVisitor(
 public FlowScope nextFlowScope() {
 } public FlowScope next ( ) {
return  createFlowScope(
return nextPreciserScopeKnowingConditionOutcome(this.type,
 } } { public FlowScope nextPreciserScopeKnowingCondition() {
return nextPreciserScopeKnowingConditionOutcome(param, type,
 } } public FlowScope createChildFlowScope ( ) {
return nextPreciserScopeKnowingConditionOutcome ( ). apply ( this ) (
 } } { public FlowScope nextPreciserScopeKnowingConditionOutcome
return nextPreciserScopeKnowingConditionOutcome ( ). apply ( ) ; } return
return nextPreciserScopeKnowingConditionOutcome ( ). restrictCondition (
return nextPreciserScopeKnowingConditionOutcome(condition,
 else { return restrictParameter (param, type )(
 } } public FlowScope nextPreciserScope() {
 } else { return restrictCondition(
 else { if ( type == null ) { return null ; } if ( outcome ) { }
 } } { public FlowScope nextPreciserScopeKnowingConditionOutput {
return nextPreciserScopeKnowingConditionOutcome ( ). apply ( ) ; },
 return resolveOutcome(
 } else {
 } } } public FlowScope nextPreciserScopeKnowingConditionOutcome
 public FlowScope restrict(...) {
 } public FlowScope create ( ) {
 else { if ( type == null ) { return blindScope ; } } } ;
 else { return getConditionOutcome(
 } static class Parameter extends JSType {
 else { return getPreciserScopeLearning(
 else { return restrictToConditionOutcome(
 else { return restrictParameter(param, apply(
return  getFlowScope(
 } public FlowScope nextFlowScope() {
 else { return inferOutcome(
return nextPreciserScopeKnowingConditionOutcome ( ). apply ( "{" +
 } public FlowScope createChildFlowScope(...) {
return  getPreciser(
 return FlowScope.nextPreciserScopeKnowingConditionOutcome(
return  restrictInScope ( param,
return  restrictConditionOutcomeImpl(
 else { return restrictToNotObjectType(
return  restrictOperation(
 } } public FlowScope restrict ( Node condition ) {
 } return restrictCondition(
 } } static class TypeRestriction extends TypeRestriction {
 else { return restrict (param,
 else { return restrictInScope(
 else { return restrictOperation(
 public FlowScope createFlowScope(...) {
 } } else {
 else { return getNativeType(
 else { return getCallOutcome(
return nextPreciserScopeKnowingConditionOutcome ( ). apply ( ) ; } },
return nextPreciserScopeKnowingConditionOutcomeImpl(this,
 } } public FlowScope restrict ( condition ) {
 } } public FlowScope createChildFlowScope(...) {
 return getPreciserScopeLearning(
return  restrictStatement(
 else { return getTypeInScope(
 } } public FlowScope restrictParameter ( ) {
return nextPreciserScopeKnowingConditionOutcome ( functionName,
 } public FlowScope nextPreciserScope() {}
 } return FlowScope.nextPreciserScopeKnowingConditionOutcome(
return nextPreciserScopeKnowingConditionOutcome ( this, { },
 else { return restrictToNotObjects(
 else { return restrictCallParameter(
return nextPreciserScopeKnowingConditionOutcome(caller,
 } } }
 else { return restrictFunction(
 else {
 return this.nextPreciserScopeKnowingConditionOutcome(
return nextPreciserScopeKnowingConditionOutcome ( function ) (
 } } } { private static FlowScope _nextPreciserScopeKnowingConditionOutcome(
 return null ; } }
return  restrictCall ( callScope,
return  restrictCondition ( "{" +
 } }
 } return super.nextPreciserScopeKnowingConditionOutcome(
 } else { return restrictOperation(
 return buildOutcome(
 } } } } { private static FlowScope _nextPreciserScopeKnowingConditionOutcome(
 }.build() }
 return restrictFunction(
 } } { return FlowScope.nextPreciserScopeKnowingConditionOutcome(
 } } } { return FlowScope.nextPreciserScopeKnowingConditionOutcome(
 return getConditionScope(
 } static class Parameter < Node > { {
 } { return super.nextPreciserScopeKnowingConditionOutcome(
 return null ; }
 } } return super.nextPreciserScopeKnowingConditionOutcome(
 } } } }
 } } } { private static FlowScope.nextPreciserScopeKnowingConditionOutcome(
 } } } } { private static FlowScope.nextPreciserScopeKnowingConditionOutcome(
 } ) ;
 } } } { private FlowScope _nextPreciserScopeKnowingConditionOutcome(
 } static class Parameter < Node > { }
 } } } } { private FlowScope _nextPreciserScopeKnowingConditionOutcome(
 return null ; } ;
 }
 return this ; } }
 } } { return super.nextPreciserScopeKnowingConditionOutcome(
return nextPreciserScopeKnowingConditionOutcome() (
 } return this.nextPreciserScopeKnowingConditionOutcome(
 } } } } { return super.nextPreciserScopeKnowingConditionOutcome(
 } } { return this.nextPreciserScopeKnowingConditionOutcome(
 } } } } } { private FlowScope _nextPreciserScopeKnowingConditionOutcome(
 } } } } { return this.nextPreciserScopeKnowingConditionOutcome(
 } } } { private static FlowScope #nextPreciserScopeKnowingConditionOutcome(
 } } } } }
 } } ;
 } { return this.nextPreciserScopeKnowingConditionOutcome(
 } } } } { private static FlowScope #nextPreciserScopeKnowingConditionOutcome(
 } } } { return super.nextPreciserScopeKnowingConditionOutcome(
 } } } { return this.nextPreciserScopeKnowingConditionOutcome(
 return flowScope.nextPreciserScopeKnowingConditionOutcome(
 } } } return super.nextPreciserScopeKnowingConditionOutcome(
 return this ; }
 } } } ;
 } } } { private FlowScope.nextPreciserScopeKnowingConditionOutcome(
 } } } static { return _nextPreciserScopeKnowingConditionOutcome(
 } return FlowScope#nextPreciserScopeKnowingConditionOutcome(
 return super().nextPreciserScopeKnowingConditionOutcome(
 } } { return FlowScope#nextPreciserScopeKnowingConditionOutcome(
 return FlowScope#nextPreciserScopeKnowingConditionOutcome(
 } } { return super().nextPreciserScopeKnowingConditionOutcome(
 } } static class { #nextPreciserScopeKnowingConditionOutcome(
.apply(
 return builder.nextPreciserScopeKnowingConditionOutcome(
 } return _nextPreciserScopeKnowingConditionOutcome(
return nextPreciserScopeKnowingConditionOutcomeInternal(
 return _nextPreciserScopeKnowingConditionOutcome(
return  restrict(
 return ; }
return  resolve(
 } apply(
 } ;
return  execute(
 } #nextPreciserScopeKnowingConditionOutcome(
 return "nextPreciserScopeKnowingConditionOutcome(
 #apply(
 }.nextPreciserScopeKnowingConditionOutcome(
 return #nextPreciserScopeKnowingConditionOutcome(
 else
