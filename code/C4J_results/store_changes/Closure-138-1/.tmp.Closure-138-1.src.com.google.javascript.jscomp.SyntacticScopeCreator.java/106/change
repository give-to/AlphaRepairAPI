scanVars(n, parent);
 scanVars(n, null);
scanVars(n, null, parent, null, n);
scanVars(n, parent, null, n);
scanVars(n, null, parent, n);
 return ; }
scanVars(n);
scanVars(n, parent, sourceName);
scanVars(n, null, parent);
scanVars ( )
scanVars(n, parent, parent, null, n);
 scope.setParent(null);
scanVars(n, null, parent, sourceName);
scanVars(n, parent, n);
 scope = n. getParent ( ) ;
 scope = n ; }
scanVars(n, parent, scope, null, n);
scanVars(n, null, scope, parent, null, n);
scanVars(n, scope, parent, null, n);
 scope. setParent ( parent ) ;
 scope. setParent ( n ) ;
 scope = n;
 scope. getParent ( );
 scope. setParent ( n, parent ) ;
scanVars(n, parent, null);
scanVars(n,  parent, parent, null, n); } }
scanVars(n, null, parent, null, n); } }
scanVars(n, null, parent, parent, null, n);
 scope = n ; } }
 scope = n. getFirstChild ( ) ;
scanVars(n, null) ; return ; }
scanVars(n,  parent, scope, null, n); } }
 scope.push(null);
scanVars(n, null, parent, null, n); }
scanVars(n, parent, scope);
 scope. setParent ( ) ;
 scope. setParent ( parent ) ; }
 scope = parent. getParent ( ) ;
scanVars(n, null, sourceName);
 scope = n. getParent ( ) ; }
scanVars ( n, parent ) ; }
 scope. setParent ( n ) ; }
scanVars(n,  scope, parent, null, n); } }
 scope. parent = parent;
scanVars(n, parent, null, n); }
scanVars(n, parent, null, n); } }
 return null, null);
scanVars(, n);
scanVars ( n, parent )
scanVars(n, null, parent, n, null, n);
 scope = parent. getParent ( ) ; }
scanVars(n, null, scope, n);
scanVars ( ) ;
 scope = parent ; }
 scope. setParent ( n ) ; return;
 scope = n. getParent ( ) ; return;
scanVars(n, parent, parent, null, n); }
scanVars(n, null) ; } }
scanVars(n, null) ; parent = n ; }
 scope = parent. getParent ( ) ; } }
scanVars(n, null, scope, parent, n);
scanVars(scope, n, null);
scanVars ( n )
scanVars(n, parent, scope, null, n); }
 scope = n ; return ; }
 scope. setParent ( n, parent ) ; }
 scope = n ; return;
 scope = n. getParent ( )
 declareScope(null);
scanVars(n, scope, parent, null, n); }
scanVars(n, null, parent, parent, null, n); }
 scope. setParent()(null);
scanVars(n,  parent, parent, null, n); return ;
 scope. setParent ( parent ) ; return;
 scope = parent ; } return;
 scope = n. getFirstChild ( ) ; }
scanVars(n, null, parent, null, n); return ;
 scope = parent. getParent ( ) ; return;
 scope = parent ; n = null;
scanVars(scope.getParent(), n);
scanVars(n, null, scope, parent, null, n); }
 scope. parent = n;
scanVars(n, null) ; }
 scope = parent. getParent ( ) ; return ; }
 scope = sourceName;
scanVars ( parent, n ) ;
 scope = n. getParent ( ) ; } }
 scope = ( Scope ) n. getParent ( ) ;
 scope. setParent ( parent )
scanVars(n,  parent, scope, null, n); return ;
scanVars ( n, parent, null, n )
 scope. setParent ( parent, n ) ;
scanVars(parent, n, null, n);
scanVars(n, parent, scope, n, null);
scanVars(scope, n, parent, n);
 scope = n ; parent = null;
scanVars(n, null) ; scope. setParent ( null ) ;
 scope. setParent ( parent, n ) ; }
 scope = n ; parent = parent;
scanVars(n, null) ; parent = n ; } }
scanVars(n, null, scope, sourceName);
scanVars(n, null) ; return ; } }
 scanVars(scope, null);
 scope = parent ; return;
scanVars(n, parent, null, n); } return ;
 scope = parent ; return ; }
scanVars(n, parent, null, n); return ;
scanVars(scope, n, parent, null);
scanVars(n, scope, parent, n);
scanVars(n, null) ; scope. setParent ( parent ) ; }
 scope. setParent ( n )
 declareVar(null);
scanVars ( parent, n ) ; }
 scope = n. getParentNode ( );
 scope = n. clone ( ) ;
scanVars(n, null, parent, n); }
 scope = parent. getParent ( ) ; } return ;
scanVars(n, null, scope, null, n);
scanVars(sourceName, null);
 scope. getParent ( ) = n;
 scope = n.getFirstChild(null);
 scope. setParent(n,null);
scanVars(n, parent, scope, null);
 this. scanVars ( scope. getParent ( ), n, parent, null, n ) ; } } else {
 scope. setParent ( n, parent ) ; } }
scanVars(n, null, parent, null, n, parent); }
 scope(null);
 this. scanVars ( scope. getParent ( ), n, parent, null, n ) ; } else {
 scope = parent. getParent ( ) ; } } }
scanVars(sourceName, n, null);
scanVars(n, null) ; scope. setParent ( null ) ; }
scanVars ( body, n ) ;
scanVars(n, null, scope, parent, n); }
scanVars(n, null) ; } return ;
scanVars(n, null, parent, n, null, n); }
scanVars(n, null) ; scope. setParent ( n ) ;
scanVars(n, null) ; parent = n. getParent ( ) ;
 scope. clear ( ) ;
scanVars(n, null) ; scope. setParent ( parent ) ;
 scope = parent ; } }
scanVars(root, n, parent);
 scope. getParent ( ) = parent;
scanVars(root, n, parent, n);
scanVars ( parent, n )
scanVars(scope, n, parent);
 parent = scope.getParent(n,null);
scanVars(n, null) ; parent = null ; return ; }
scanVars(n, scope, sourceName);
scanVars(n, null, parent, null, n, scope); }
scanVars(n, null, n);
 scope.push(n);
scanVars(n, null) ; scope. setParent ( null )
scanVars(n, parent, n, null);
 this. scanVars ( n, parent, null, n, null, n ) ; } } else { this.
scanVars(n, null) ; } return ; }
scanVars(n, null) ; } } else { return ; }
 scope = parent ; n = n ; }
scanVars ( parent ) ;
scanVars(sourceName, n);
scanVars(n, scope, parent, n); }
 parent = n ;
 scope = new Scope(n, parent);
 parent = n ; }
 this. scanVars ( scope. getParent ( ), n, parent, null, n ) ; this.
 scope. remove ( ) ;
 this. scanVars ( n, parent, null, n, null, n ) ; } } else {
 this. scanVars ( scope. getParent ( ), n, parent, null, n ) ; }
 scope(n);
 this. scanVars ( n, parent, null, n, null, n ) ; } } else { super.
scanVars(n, null) scope. setParent ( parent ) ; }
scanVars(scope.getParent(), n, parent); }
scanVars(n, null) ; parent = n ; return ; }
 this. scanVars ( scope. getParent ( ), n, parent, null, n ) ; parent.
scanVars(n, null) ; return ; } } else { return ; }
scanVars(n, null, scope);
scanVars(n, null) ; parent = null ; n = null ; }
 scope. setParent ( n, null, parent);
 scope. setParent ( n ) return;
 scanVars(ns, null);
 scope = getScope(n, parent);
scanVars(parent, n, sourceName);
scanVars(n, null) ; parent = null ; } }
 this. scanVars ( n, parent, null, n, null, n ) ; } else {
scanVars(n, parent, null, n, parent); }
scanVars(n, null) ; } } else { return ;
 this. scanVars ( n, parent, null, n ) ; } } else {
 declareVar(scope, n, parent, null, null);
scanVars(n, null) ; } return n ;
 scope = n);
scanVars ( scope ) ;
 this. scanVars ( scope. getParent ( ), n, parent, null, null, n ) ;
 if ( parent == null ) { return ; } if ( n!= null ) {
 scope. setParentNode(null);
scanVars(n, parent, null, n, null);
 scope = n.getParent()(null);
scanVars(n, null) ; scope. setParent ( ) ;
scanVars(parent, n, null, n); }
 this. scanVars(n, parent, null, n); } } else { this.
 this. scanVars(n, parent, null, n); } } else { super.
 scope. scanVars(n, null);
scanVars(n, null, scope, null, n); }
 this. scanVars ( scope. getParent ( ), n, parent, null, n ) ; else
 scope. setParent ( parent ) return;
scanVars(n, parent, scope); }
 this. scanVars ( scope. getParent ( ), n, parent, null, n ) ; } } } else {
 declareVar(sourceName, n, null);
 this. scanVars ( n, parent, null, n, n ) ; } } else {
scanVars(n, null, scope, parent);
 scope. setParent ( parent, sourceName);
 scope = n.getParentNode(null);
scanVars(n, null) ; parent = null ; return ; } }
scanVars(scope, n, parent, n); }
 scope. setParent ( sourceName);
 scope. setParentNode ( n);
 scan(n, null);
 declareScope(n, null);
 scope.init(null);
scanVars(n, scope, parent);
 scope = scanVars(n, null);
 scope=null);
scanVars(n, parent, parent, n);
 scope = new Scope(n, parent, null);
scanVars(root, n);
scanVars(parent, n, scope, null);
 scope = n.getNext(parent,null);
scanVars(n, null) ; return ; } return ;
scanVars ( body, n )
 parent = scope.getParentNode(null);
 scope. setParent ( n, parent, null, null);
 scope. setParent ( n, sourceName);
scanVars(n, scope, null, n);
 scope = parent.getParent().getParent(null);
 scope. setParent ( n, parent, n);
 this. scanVars ( scope. getParent ( ), n, parent, null, null, n ) ; }
scanVars(n, parent, null, null);
 if ( parent == null ) { return ; } if ( n!= parent ) {
scanVars(globalBlock, n);
scanVars(n, null) ; return ; } } return ;
 this. scanVars(n, parent, null, n); } } else { parent.
scanVars(n, parent, false);
scanVars(n, scope, null);
scanVars(globalBlock, n, null);
 this. scanVars ( n, parent, null, n, null, n ) ; if ( n!= null ) { } else {
scanVars(n, parent, scope, n); }
 this. scanVars ( scope. getParent ( ), n, parent, null, n ) ; } else
 scope(n, null);
 scope = parent.getParentScope(null);
scanVars(n, null, parent, n); } }
scanVars(scope, n, parent, null); }
scanVars(scope, n, parent, n, null);
scanVars(parent, n, body, n, null);
 this. scanVars ( scope. getParent ( ), n, parent, null, n ) ; } } else
 scope = (Scope) n.getParent(();
scanVars(n, sourceName, parent);
 this. scanVars ( n, parent, null, n, null, n ) ; if ( n!= null && parent!= null )
 scope = new ScopeImpl(n);
scanVars(n, null) ; scope = n ; }
 parent = scope.getParent().getParent(null);
 scope. getParent ( ). addChild(n, null);
scanVars(parent, scope, n, null);
 declareVar(scope, n, parent, null);
 scope = parent.getParent(n,null);
 scope. addNode(n, null);
scanVars(n, scope, parent) ; }
 scope = new ScopeImpl(n, null);
 scope = new Scope(n, null);
 this. scanVars ( scope. getParent ( ), n, parent, null, n ) ; } }
 parent = n ; return;
 scope. addBlock ( sourceName, n);
scanVars(n, null, scope, parent); }
scanVars(n, sourceName);
scanVars(n, null) ; parent = null ; }
 scanRoot(n);
scanVars(rootNode, n);
 scope. setParent(parent,null);
 scope. setParent ( n, null, n);
 scope = ( Scope ) n;
 this. scanVars ( scope. getParent ( ), n, parent, null, n ) ; } } else { return
 this. scanVars ( n, parent, null, n ) ; } } } else { this.
scanVars(parent, sourceName);
 this. scanVars ( n, parent, null, n ) ; } } } else { super.
 declareVar(n, parent, null);
 parent = scope.getParent(null,null);
 scope. setParent (null,null);
 this. scanVars ( n, parent, null, n, null, n, n ) ; } } } else { this.
 if ( parent == null ) { return ; } if ( n!= null )
scanVars(scope, n, parent); }
scanVars(n, null) ; return ; } return ; }
 scope. setParent ( parent ) ;
scanVars(n, scope);
 scope = ( Scope ) parent;
scanVars(n, null, parent); }
 declareVar(n, sourceName, n, null);
 parent = scope.getParentNode(n,null);
 declareVar(scope, n, parent, n, null);
scanVars(n, null, parent, scope);
 if ( parent == null ) { return ; } if ( n!= parent )
 Scope scope = parent;
 declareVar(n, scope, n, parent, null);
 this. scanVars ( scope. getParent ( ), n, parent, null, null, n ) ; } else
 if ( n == null ) { return ; } if ( parent == null ) { return
 scope = n. getParent ( parent );
scanVars(n, null) ; return ;
scanVars(ns, n);
 scope.set(null);
 scope. add ( n);
 scope = new GlobalBlock(n, null);
 scope. setParent ( n, parent, n, null);
 scanVars(root, null);
 this. scanVars ( scope. getParent ( ), n, parent, null, n ) ; } } } else
scanVars(parent, n, null, n, null);
 declareVar(scope, sourceName, n, null);
 declareVar(scope.getParent(), n, null);
 scope. getParent ( ).
 scope. append ( n);
 scope. setParent ( ) ; scanRoot(n, null);
scanVars(n, null) ; } } return ;
 this. scanVars ( scope. getParent ( ), n, parent, null, null, n ) ; } } else
scanVars(n, null) ; return ; } } }
 this. scanVars ( n, parent, null, n, null, n, n ) ; } } } else { super.
 declareVar(n, scope, null);
scanVars(n, null) ; parent = n ;
 this. scanVars ( scope. getParent ( ), n, parent, null, n ) ; } else { return
scanVars(n, null, scope, n); }
 return n);
 this. scanVars ( scope. getParent ( ), n, parent, null, null, n ) ; } }
 scope.parent(null);
scanVars(n, parent, parent, n); }
 scope.append(null);
 scanVars(parent, null);
scanVars(n, parent, n); }
scanVars(sourceName, scope, n, null);
scanVars(n, parent, scope); } }
scanVars(n, scope, n, null);
 declareVar(n, parent, sourceName, null);
 this. scanVars ( scope. getParent ( ), n, parent, null, null ) ; }
 scope. addChild(n, null);
 Scope scope = n;
 this. scanVars ( scope. getParent ( ), n, parent, null, n ) ; return
 scope. setParent ( sourceName, n, null);
 scope = parent ;
 scope. setParent ( ). declareVar(n, null);
 if ( parent == null ) { return ; } if ( n!= null ) { return
scanVars(n, null, parent, scope); }
 scanRoot(n, null);
 scope. getParent ( ). declareNode(n, null);
 scope = new Scope(sourceName, parent);
 scope. setParent ( parent ) ; } return;
 scope = new Scope(parent, n, null);
scanVars(parentNode, n, null);
 declareVar(n, parent, null, null);
 scope = new Scope(sourceName, n);
 this. scanVars ( n, parent, null, n, null, n ) ; } } else
 this. scanVars ( scope. getParent ( ), n, parent, null, n ) ; return ; } } else
 declareVar(n, parent, n, null);
 scope. getParent ( ). declareVar(n, null);
scanVars(n, parent, parent, null); }
scanVars(rootNode, n, null);
 scope. setParent ( ). declareNode(n, null);
scanVars(n, null, parent, null, parent); }
scanVars(n, null, scope, parent, null); }
 scope = parent.addScope(n, null);
scanVars(n, null) ; } } }
scanVars(n, null, parent, null); }
 scope. setParent ( n ) ;
 scope. getParent ( ). scanVars(n, null);
 this. scanVars ( scope. getParent ( ), n, parent, null, n ) ; } } } } else
 scope. setParentImpl ( n);
scanVars(root, n, parent); }
 this. scanVars ( n, parent, null, n, null, n ) ; if ( n!= null ) { } } else
scanVars(n, body, parent, n);
 scope = n. getParent ( ) ; break;
 scope. getParent ( ). addGlobalBlock(n, null);
scanVars(parent, n, parent); }
 this. scanVars ( sourceName,n, null);
 if ( n. isFunctionAnonymous ( n ) ) { return ; }
 scope. setParent ( parent, sourceName,n, null);
 scope = n.getNext(parent=null);
 scope = parent.getScope(n, null);
scanVars(n, null, parent, null);
 return ; } }
 scope. setParent ( sourceName, null);
 scope = parent. getParent(); scanRoot(n, null);
scanVars(parent, sourceName, n, null);
 scope = null;
 this. scanVars(n, parent, null, n); } } else { return
scanVars(n, parent, parent); }
 this. scanVars ( n, parent, null, n, null, n ) ; } } else { return ; } } else
 scope = new ScopeImpl(parent, null);
 this. scanVars ( n, parent, null, n, null, n ) ; if ( n!= null ) { } else return
 if ( parent == null ) { return ; } parent = n ; }
 declareScope(parent, null);
 scope = parent. getParent ( ) ; break;
 this. scanVars ( n, parent, null, n, null, n ) ; if ( n!= null ) { } } }
 if ( n == null ) { return ; } if ( parent == null ) return ;
 scope. setParent ( parent ) ; scanRoot(n, null);
 scope = scope. addScope(n, null);
 scope. getParent ( ). setGlobalBlock(n, null);
 this. scanVars ( n, parent, null, n, n ) ; } } else
scanVars(n, null, root, null, n);
 this. scanVars ( n, parent, null, n, n ) ; } } else { return
scanVars(parent, n, null);
 declareVar(n, null);
scanVars(scope, parent, n, null);
 declareScope(scope, null);
 if ( n. isFunctionAnonymous ( n ) ) return ;
 if ( parent == null ) { parent = scope ; }
 if ( n == null ) { return ; } if ( parent!= null ) { return
 if ( parent == null ) { return ; } if ( n!= null ) { parent
 scope. getParent ( ). addNewChild(n, null);
 scope. setParent ( n ) ; break;
 scope. getParent ( ). declareBlock(n, null);
 scope. addGlobalBlock(n, null);
 this. scanVars ( n, parent, null, n, n ) ; } else
 scope = scope. getParent(n, null);
 scope. setParent ( "global",n, null);
scanVars(n, null, parent, - 1);
 scope = parent.createNewScope(n, null);
scanVars(n, parent, null); }
scanVars(scope, n);
 this. scanVars ( n, parent, null, n, null, n, n ) ; } } else { return ; }
 this. scanVars ( n, parent, null, n, null, n ) ; } } } else { return ; } }
 this. scanVars ( n, parent, null, n ) ; } } } else
 scope. getParent ( ). appendChild(n, null);
 parent.setParent(null);
 declareScope(n);
 if ( parent == null ) { parent = n ; }
 if ( parent == null ) return ; if ( n!= null ) { parent.
 scope = parentNode;
scanVars(n, null, scope); }
 this. scanVars ( n, parent, null, n, n ) ; } }
 if ( n instanceof GlobalBlock ) {
 scope = parent.createScope(null,n, null);
 scope = parent.addNewScope(n, null);
 this. scanVars ( n, parent, null, n ) ; } } else { super ::
scanVars(n, null, null, n);
 if ( n!= null ) { parent = n ; } else {
 this. scanVars ( n, parent, null, n, n ) ; } else { return
 root(n, null);
 parent = scope.createNewScope(n, null);
 if ( n. isFunctionAnonymous ( n ) ) { return ; } else
 return n, null);
 parent = sourceName;
scanVars(n, n, parent, scope);
 if ( n. isFunctionAnonymous ( parent ) ) return ;
scanVars(sourceName, body, n, null);
scanVars(scope, body, n, null);
 if ( n. isFunctionAnonymous ( n ) ) { return
scanVars(globalBlock, scope, n, null);
 if ( n!= null ) { parent = n ; } else
 scope = (Scope)null);
scanVars(goto, n, null);
 root(n);
 declareRoot(n, null);
 scope. getParent ( ). add(n, null);
 Scope parent = scope. getParent(n, null);
 scope. getParent ( ). declare(n, null);
scanVars(parent.getParent, n, null);
 scope = parent.getParentScope(n, null);
 scope. getParent ( ). put(n, null);
scanVars(n, null) ; } } ;
scanVars(root, n, null);
 if ( n!= null ) { parent = n ; } else { }
 parseVars(n, null);
scanVars(n, null) return ; }
 if ( n. isFunctionAnonymous ( n ) ) { return ; } }
 if ( n. isFunctionAnonymous ( parent ) ) { return ; } else
 if ( n!= null ) { parent = n ; } else { return
 if ( n. isFunctionAnonymous ( n ) ) return ; else
 if ( parent == null ) { parent = scope ;
 if ( parent == null ) return ; if ( n!= null ) return ; else
 scope. setParent ( n, parent, "null);
 scope. setGlobalBlock(n, null);
 return false;
 scope. setParent ( n, null, "null);
 scope = sourceName);
 scope. declareNode(n, null);
 if ( parent == null ) { parent = root ; }
scanVars(n, scope, n);
 scope. getParent ( ). set(n, null);
 scope. getParent ( ). insert(n, null);
scanVars(n, null) ; break ; }
 declareScope(parent);
 scope = parent ; return scanRoot(n, null);
 scope. declareVar(n, null);
scanVars(n, sourceName, scope);
 if ( n!= null ) { parent = n ; } else return ;
 if ( parent == null ) { return ; } if ( n!= null ) return
scanVars(n, null, sourceName, parent);
 scan(scope, null);
 root = n;
 ignore(n);
 if ( parent == null ) { parent = n ;
 Scope parent = scope. getScope(n, null);
 if ( parent == null ) { return ; } else
scanVars(root, n); }
 Scope parent = scope. setParent(n, null);
 scope = parent ; } scanRoot(n, null);
 return n;
 if ( n. isFunctionAnonymous ( n ) ) { return ;
 if ( parent == null ) { return ; } else {
 declareRoot(null);
 return false);
 if ( parent == null ) { return ; } parent.
 if ( n. isFunctionAnonymous ( n ) ) return ; }
 declareBlock(n, null);
scanVars(scope, n); }
scanVars(n, sourceName, n);
 scan(ns, null);
 if ( parent == null ) { return ; } parent
scanVars(n, scope); }
 return null);
scanVars(n, null, scope, parentNode);
 return ; } scanRoot(n, null);
 parent = scope. addNode(n, null);
scanVars(n, parentNode);
scanVars(n, null, null, parent);
 scope = parent);
 if ( parent == null ) { break ; } }
 } return ;
 return ; } } else {
scanVars(n, n);
scanVars(n, null, n); }
scanVars(n, Node parent);
 break ; }
 scope = (Scope);
 scope. getParent ( ) ; }
scanVars(n, nodeName);
 declareGlobal(null);
scanVars(n, null, root);
 scanNodes(n, null);
 this. scope = parent ; } else {
scanVars(', n);
scanVars(n, null) ; break ;
 declareNode(null);
 scope. getParent ( ) ;
scanVars(n, null, - 1);
 if ( n!= null ) { } else {
 this. scope = parent ; }
 scope. setParent ( parent ).
 scope. getParent ( ) ; parent
 if (n!= null) { final Nodes
 if (n!= null) { final NodeBody
scanVars(n, null, p);
 scope.push(n, null);
 if (n!= null) { final parent.
scanVars n ;
scanVars(n); }
 this. scope = parent ; } } else
 return true;
 if (n!= null) { final Parent block
 scope.add(n, null);
 parent(null);
scanVars(, parent);
scanVars(", n);
scanVars(n, parentScope);
 if ( n!= null ) return ; else
 ignore(n, null);
scanVars(root);
scanVars(n, null, root); }
scanVars(ns);
 if (n) {
 scope = parent ; } } else
scanVars(parent); }
 } } }
 return false, null);
scanVars(n, root);
 parseGlobalBlock(n, null);
 return null;
scanVars(n, null, parentNode);
scanVars(n, null) return ;
 scope. declare(n, null);
 body(null);
scanVars(n, p);
 } } } else {
 scope = n ; } } else
 root(null);
 ( n, null);
 } } else {
scanVars(n, null, parentScope);
scanVars(n, Parent); }
 traverse(n, null);
scanVars(n, node); }
scanVars(globalBlock, null);
scanVars(globalScope, n, null);
scanVars(root); }
scanVars(parentNode, null);
scanVars(rootNode, null);
 scope = parent ; } }
scanVars(n, null) break ;
 scope = parent ; final Body
 } return);
 return true);
scanVars ( ;
 scope = n ; } }
 return ; } } } else
scanVars(goto, null);
 return ; } } else
 break ; }
 } } else { return
scanVars(n, );
 return ; } } }
 } else {
 } } } else
scanVars(body, n, null);
 return ; } }
 } } else
scanVars(n, parent
 } final NodeBody
 } final Node body
 final Scope.
scanVars(ns, n, null);
scanVars(n, null,);
 Global Block
scanVars(n, null) }
 } }
 } else
 Global block
 }
 else
 return
