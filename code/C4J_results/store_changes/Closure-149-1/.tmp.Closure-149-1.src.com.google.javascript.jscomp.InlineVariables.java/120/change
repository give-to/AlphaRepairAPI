private class IdentifyLocals implements Predicate<Var> {
private class IdentifyLocals implements Predicate<Var {
private class IdentifyLocals  implements Predicate {
 private class IdentifyConstants implements Predicate<Var> {
 private class Predicate<Var> {
 private class IdentifyConstants implements Predicate<Var> { }
 class <Var> {
 private class IdentifyConstants implements Predicate<Var>
private class IdentifyLocals  implements PredicateVar {
 private class IdentifyConstants {
private class  Local {
 private class NonGlobalVariables implementsPredicate<Var> {
private class IdentifyLocals  implements Predicate<Var> { {
 private class IdentifyConstants implements Predicate<Var>alwaysTrue ;
 private class IdentifyConstants implements Predicate ;
private class IdentifyLocals  implements Predicate<Var> alwaysTrue {
 private class IdentifyConstants implements Predicate<Var> { return true ; }
private class IdentifyLocals  implements Predicate<Var>alwaysTrue() {
 private class Non-implements Predicate<Var> {
 private class NonGlobal implements Predicate<Var> {
 private class IdentifyConstants implements Predicate<Var> { return false ; }
private class  IsLocalVar {
 private class NonGlobalPredicate<Var> {
 private class Filter<Var> {
 private class IdentifyConstants implements Predicate {
 private class LocalPredicate<Var> {
 private class IsLocal implements Predicate<Var> {
private class  IsLocal {
private class IdentifyLocals  implements Predicate<Locals> {
 public class IdentifyConstants implements Predicate<Var> {
 private class IsLocal <Var> {
 private class IdentifyVariables implements Predicate<Var> { }
 private class IdentifyGlobalVariables implements Predicate<Var> {
 private class IdentifyConstants implements Predicate<Var> { return null ; }
 private class IsLocal extends <Var> {
 private class IsLocalScope<Var> {
 public class IdentifyConstants implements Predicate<Var>
 private class IdentifyGlobalVariables implements Predicate<Var> { }
 private class IdentifyGlobalVariables implements Predicate<Var> { return false ; }
 private class NonGlobalVariable implements Predicate<Var> {
 private class IdentifyGlobalVariables implements Predicate<Var> { return true ; }
 private class NonGlobalVariables implements Predicate<Var> { {
 private class IdentifyConstants implements Predicate<Var> { return undefined ; }
 private class IdentifyConstants extends Predicate<Var> { }
 private class NonGlobalVar implements Predicate<Var> {
 private class IdentifyConstants extends Predicate<Var> {
 private class IsLocal extends Predicate<Var> {
private class IdentifyLocals  implements Predicate<Var> ( ) {
 private class IdentifyCalls implements Predicate<Var> {
 private class IdentifyConstants implements Predicate<Var>alwaysTrue();
 private class IdentifyConstants extends Predicate {
 class LocalPredicate<Var> {
private class IdentifyLocals  implements Predicate<Var> { }
 class Filter<Var> {
 private class IdentifyGlobalVariables implements Predicate<Var>
 public class IdentifyConstants {
 private class NonGlobal extends Predicate<Var> {
 private class IdentifyLocals<Var> {
 private class IdentifyConstant implements Predicate<Var>
 private class Non-GlobalVariables implementsPredicate<Var> {
 private class IdentifyConstants implements Predicate() {
 private class IdentifyConstants implements Predicate<Var> { return true }
 private class IsLocal implements Predicate<Var {
 private class NonGlobalVariables implements Predicate<NonGlobalVar> {
 private class IdentifyConstants implements Predicate<Var> { return IdentifyConstants ; }
 private class IdentifyConstants implements Predicate<Var> { } } {
private class IdentifyLocals  implements Predicate<Var> ( var ) {
private class IdentifyLocals implements Predicate<Var> { private class IdentifyConstants() {
 private class IdentifyConstants implements Predicate } {
 public class IdentifyConstants implements Predicate {
private class IdentifyLocals  implements Predicate<Var>alwaysFalse() {
private class IdentifyLocals  implements Predicate<Var><Var> {
 class IsLocal{
 private class NonGlobalReimplements Predicate<Var> {
 private class <Var> {
 private class IdentifyConstants extends Predicate<Var>
 private class IdentifyConstants } {
 private class IdentifyConstants implements Predicate<Var> { return false }
 private class NonGlobalVariable implements Predicate<NonGlobalVariable> {
private class IdentifyLocals  implements Predicate<Locale> {
private class IdentifyLocals  implements Predicate<Local> {
 private class IsLocal implements Predicate<Var> { {
 private class IdentifyConstants implements Predicate<Var> { public class IdentifyLocals implements Predicate<Var> {
 private class IdentifyConstants implements Predicate<>
 private class IdentifyConstants implements Predicate<Var> { } } ;
 private class IdentifyConstants() {
 private class IdentifyConstants implements Predicate<Var> { public class IdentifyConstants implements Predicate<Var> {
 private class NonGlobalVariables implements Filter<Var> {
 private class IsLocal implements <Var> {
 private class Non-Global implements Predicate<Var> {
private class IdentifyLocals implements  Predicate<Var> ( Locals ) {
 private class IdentifyConstants extends Predicate<Var> { return IdentifyConstants ; }
 private class NonGlobalVariables implements Predicate<NonGlobalVariables> {
 private class Scope<Var> {
 private class NonGlobalVar implements Predicate<NonGlobalVar> {
 private class NonGlobalVariables implements Predicate<NonGlobalVariable> {
 private class NonGlobalVariables implements NonGlobalVariables {
 private class IdentifyConstants implements Predicate<Var> { public class IdentifyConstants extends Predicate<Var> {
private class IdentifyLocals implements  boolean {
 private class IdentifyConstants implements Predicate<Var> { return true ; } }
 private class NonGlobalVar implements NonGlobalVar<Var> {
 private class IdentifyConstants implements Predicate<Var> { return true ;
 private class NonGlobalVariables implements Predicate<Var>, ReferenceCollection> {
 private class IdentifyConstants extends Predicate<Var> { public class IdentifyConstants extends Predicate<Var> { } }
 private class IdentifyConstant implements Predicate ;
 private class NonLocal implements Predicate<Var> {
 private class NonGlobalVariables implements Predicate<Var> < Var > {
 private class IdentifyConstants implements Predicate<Var> { return false ; } }
 private class IdentifyConstants extends Predicate<Var> { public class IdentifyConstants implements Predicate<Var> { } }
 private class NonGlobalVar extends Predicate<NonGlobalVar> {
 private class NonGlobalVariables implements Predicate<Var> ( ) {
private  class IsLocalVariable {
private  class NonGlobalVariableFilter {
 private class IdentifyLocals(){
 private class IdentifyConstants extends Predicate<Var> { return IdentifyConstants ( ) ; } static class IdentifyLocals {
 private class NonGlobalVariables implements Predicate<Var> { }
 private class NonGlobalVariables<Var> {
 private class IdentifyConstants implements Predicate<Var> { public class IdentifyLocals implements Predicate<Var>
 private class NonGlobalVariables implements NonGlobalScope<Var> {
 private class IdentifyGlobalVariables implements Predicate {
 private class IsLocal extends Predicate<Var> { {
 private class NonGlobalVariables implements Predicate<Var> ( var ) {
 private class IdentifyConstants implements Predicate<Var> { public boolean apply(Var var) { } }
 class IdentifyConstants {
private class IdentifyLocals implements Predicate<Var> { private class IsLocalVar {
private class IdentifyLocals  implements Predicate() {
 private class NonGlobalVarScope implementsPredicate<Var> {
private class IdentifyLocals implements Predicate<Var> { private boolean alwaysTrue ;
 private class NonLocalPredicate<Var> {
 protected class IdentifyConstants {
private class IdentifyLocals implements  Predicate<Var> ( Scope scope ) {
 private class Non-GlobalVariable implements Predicate<Var> {
 private class Non-GlobalVar implements Predicate<Var> {
 private class IdentifyConstants implements Predicate<Var> ; }
 private class IsLocal implements Filter<Var>{
 private class IdentifyConstants extends Predicate<Var> { public class IdentifyConstants extends Predicate<Var> ( ) {
 private class Non-GlobalReimplements Predicate<Var> {
 private class IdentifyConstants implements Predicate<Var> { return IdentifyConstants ;
 private class NonGlobalVariables implements Predicate{
private class IdentifyLocals implements Predicate<Var> { public class IdentifyConstants() {
private class IdentifyLocals  implements Predicate<Var>
 private class IsLocal implements Predicate<Var> { }
 <Var> {
 private class IdentifyGlobalVariables implements Predicate<Var> { return false ; } }
private class IdentifyLocals implements  Boolean {
private class IdentifyLocals  implements PredicateVar> {
private class IdentifyLocals implements Predicate<Var> { private final Var var ;
private  class NonGlobalVar { {
 private class NonGlobalVariables extends LocalPredicate<Var> {
 private class IdentifyConstants ;
 private class NonGlobalFilter<Var> {
 private class IdentifyConstants extends Predicate<Var> { public class IdentifyLocals extends Predicate {
 private class IsLocal implements Predicate(){
 private class IdentifyConstants extends Predicate<Var> { public class IdentifyConstants implements Predicate<Var> { } } {
 private class NonGlobal <Var>{
 private class IdentifyConstants extends Predicate<Var> { public class IdentifyConstants extends Predicate<Var> { } } {
private class IdentifyLocals  implements Predicate<?> {
 private class IdentifyConstants extends Predicate<Var> { public class IdentifyConstants implements Predicate<Var> { } } ;
 private class IsLocal implements Predicate<LocalVar> {
 private class IdentifyConstants extends Predicate<Var> { public class IdentifyConstants extends Predicate<Var> { } } ;
private class IdentifyLocals  implements Predicate<Var> { } {
 private class IsLocal implements Predicate<Var> ( ) {
 private Predicate<Var> {
 private class NonGlobalVariable implements Predicate<Var> { {
 private class IdentifyGlobalVariables implements Predicate<Var> { return true ; } }
private class IdentifyLocals implements Predicate<Var> { private class IsLocalCandidate {
 private class IdentifyConstants implements { superclass IdentifyLocals implements Predicate<Var> {
 private class IdentifyConstants implements Predicate<Var> { return undefined ; } }
 private class NonGlobalVariables implements Predicate<Var> ( Scope scope ) {
 private class IdentifyConstants extends Predicate<Var> { return IdentifyConstants. getFilterForMode ( ) ; }
private class IdentifyLocals implements Predicate<Var> { private boolean alwaysTrue() {
 private class Non-GlobalVariables extends LocalPredicate<Var> {
 private class NonGlobalVar extends NonGlobalScope<Var> {
 private class NonGlobalVariables implements Collection<Var> {
 private class IdentifyConstants implements Predicate ; }
 private class NonGlobalVariables implements Predicate<Var> { } {
 private class Non-GlobalPredicate<Var> {
 private class Non-GlobalVariables implements Filter<Var> {
 private class NonGlobalVariables implements NonGlobalPredicate<Var> {
 private class IdentifyConstants extends Predicate<Var> { public class IdentifyConstants extends Predicate<Var> { } ;
 private class NonGlobalVar implements Predicate<Var> { {
 private class IdentifyConstants extends Predicate<Var> { public class IdentifyConstants implements Predicate<Var> { } ;
private class IdentifyLocals implements Predicate<Var> { private final Scope scope ; {
 private class IdentifyConstants implements Predicate<Var> { public class IdentifyLocals implements Predicate ( ) {
 private class IsLocal implements Class<Var>{
 class Local{
private class IdentifyLocals implements  Predicate<Var> { private final var ;
 private class Non-globalReimplements Predicate<Var> {
 private Class IdentifyConstants {
 private class IdentifyConstants implements Predicate<Var> { return!!!!! }
 private class NonGlobalVar { private final Predicate<Var> {
 private class IdentifyConstants = { superclass IdentifyLocals implements Predicate<Var> {
 private class IdentifyConstants implements Pattern { superclass IdentifyLocals implements Predicate<Var> {
 private class IdentifyConstantsAll {
 private class IsLocalPredicate<Var> {
 private class NonGlobalVariables implements Predicate<Var> { private final var ;
private class IdentifyLocals implements Predicate<Var> { private final Scope var. scope ;
 private class IdentifyConstants extends Behavior {
 private class IdentifyConstants() { superclass IdentifyLocals implements Predicate<Var> {
 private class NonGlobalVariables extends ScopePredicate<Var> {
 private class IdentifyLocalVariables<Var> {
 private class IdentifyConstants implements Boolean ;
 private class IsLocalVariable<Var> {
 private class NonGlobalVars implementsPredicate<Var> {
 private class NonGlobalVariables implements LocalPredicate<Var> {
 private class IdentifyConstants implements Predicate<Var> { return IdentifyConstants }
 private class IdentifyConstants extends Predicate<Var> { return IdentifyConstants. getFilterForMode ( mode ) }
private  class NonGlobalVarFilter {
 private class IsLocal implements PredicateVar {
 private class IdentifyConstants } { superclass IdentifyLocals implements Predicate<Var> {
private class IdentifyLocals  extends Predicate<Var> {
 private class IdentifyConstants implements Predicate<Var> { public class IdentifyConstants extends Predicate<Var>
private class IdentifyLocals implements Predicate<Var> { private class IdentifyConstantsImpl {
 private class IdentifyConstants implements Predicate<Var> { public class IdentifyLocals implements Boolean ( ) {
 private class NonGlobalVariables implements PredicateVar {
 private class IdentifyConstants extends Predicate<Var> { public class IdentifyLocals extends Var> {
 private class IdentifyConstants implements Predicate<Var> { return!!!!!! }
 private class IdentifyConstants implements Function { superclass IdentifyLocals implements Predicate<Var> {
 private class NonGlobalCandidate implements Predicate<Var> { private final var ;
 private Class Predicate<Var> {
 private class IdentifyConstants implements Filter {
 private class Predicates<Var> {
 private class IdentifyConstants implements Predicate<Var> { public class IdentifyLocals implements Predicate<Var {
 private class NonGlobalVariables implements Predicate<Var> { private final Var ;
 private class Non-GlobalVariables extends ScopePredicate<Var> {
 private class IdentifyConstants extends Predicate<Var> { return IdentifyConstants ; } }
 public Predicate<Var> {
 private class IdentifyConstants extends Predicate<Var> { return IdentifyConstants. getFilterForMode ( mode ) ;
private class IdentifyLocals implements Predicate<Var> { public class IsLocalVar { }
 private class IdentifyConstants implements Predicate<Var> { return IdentifyConstants ; } }
 private class IsLocal implements PredicateVar> {
 private class NonGlobalVariables implements ScopePredicate<Var> {
 public class IdentifyConstants() {
 private class NonGlobalVariableReimplements Predicate<Var> {
 private class CheckConsts<Var> {
 class Predicate<Var> {
private class IdentifyLocals implements  Predicate<Var> { private final Var ;
 private Class NonGlobal implements Predicate<Var> {
 private class IdentifyConstants implements Predicate<Var> { public class IdentifyLocals = false ;
 private class IdentifyGlobalVariables implements Predicate<Var> { return false ; } private
private  class NonGlobalVar {
 private class IdentifyConstants { superclass IdentifyLocals implements Predicate<Var> {
 private class NonGlobalVariables implements NonGlobalVariable<Var> {
 private class NonGlobalVar extends Scope#implements Predicate<Var> {
private class IdentifyLocals implements Predicate<Var>  { private class IdentifyConstantsImplicit {
 private Class NonGlobalVariable implements Predicate<Var> {
 private class IsLocalVar<Var> {
 private class IdentifyConstants implements Predicate<Var> { public class IdentifyLocals implements } {
 private class IsLocal extends PredicateScope<Var> {
 private class IdentifyConstants implements Boolean {
 private class NonGlobalVar { private implements Predicate<Var> {
 private class IdentifyConstants implements Filter { superclass IdentifyLocals implements Predicate<Var> {
 private class NonGlobalVariable implements Predicate<Var> { }
 private class NonGlobalVariable<Var> {
 private class NonGlobalVariables { {
 private class IsLocal implements Predicate<VarScope> {
 private class IdentifyConstants implements Predicate<Var> { public class IdentifyLocals = true ;
 private class NonGlobalVar { private final boolean isPredicate<Var> {
 private class IdentifyConstants implements Subclass IdentifyLocals implements Predicate<Var> {
private class IdentifyLocals implements Predicate<Var> { private class IsLocalVar { }
 private class IdentifyConstants extends Predicate<Var> { return IdentifyConstants. create ( ) ; } } ;
 private class NonGlobalVariables implements Predicate(){
 private class NonGlobalVariables implements Predicate<Var> { private static boolean {
private class IdentifyLocals implements  Predicate<Var> { private final Scope ;
private class IdentifyLocals implements Predicate<Var> { private void alwaysTrue ;
 private class IdentifyConstants implements Predicate<Var> { public class IdentifyLocals implements boolean {
 private class IdentifyConstants extends Predicate<Var> { return IdentifyConstants ; } private
 private class CanIdentifyLocals implements Predicate<Var> {
 private class IdentifyConstants implements Predicate<Var> { return IdentifyConstants ; } private
 private class IdentifyNonGlobalReimplements Predicate<Var> {
 private class NonGlobalVar { private class Scope#implements Predicate<Var> {
 private Class Filter<Var> {
 private class NonGlobalVariables{
 private class Non-GlobalVariables<Var> {
 private class NonGlobalVariables implements <Var>{
 private class Identify <Var> {
 private class IdentifyConstants implements superclass IdentifyLocals implements Predicate<Var> {
 private class IdentifyConstants implements null ; privateclass IdentifyLocals implements Predicate<Var> {
 private class IdentifyConstants } private superclass IdentifyLocals implements Predicate<Var> {
 private class Reimplements Predicate<Var> {
 private class NonGlobalVariables implements Var { {
 private class Non-GlobalVariables implements LocalPredicate<Var> {
 private class NonGlobalVariables extendsPredicate<Var> {
private class IdentifyLocals implements Predicate<Var> { private boolean alwaysTrue; {
 private class NonGlobalVariables implements NonGlobalVariable {
private class IdentifyLocals implements Predicate<Var>  { private class IdentifyConstantsLocalVar {
 private class IdentifyConstants implements Predicate<Var> { public class IdentifyLocals implements Boolean ; }
 private class IdentifyConstants implements Boolean { superclass IdentifyLocals implements Predicate<Var> {
 private class NonGlobalScope<Var> {
 private class IdentifyConstants extends Predicate<Var> { return IdentifyConstants. create ( ) ; } } {
private class IdentifyLocals implements Predicate<Var> { private final Scope scope ;
 private class NonGlobalVariables extends NonGlobalPredicate<Var> {
 private class NonGlobalVariablePredicate<Var> {
 private class NonGlobalVar { private final LocalScopePredicate<Var> {
 private class IdentifyLocals implements private IIdentifyLocals implements Predicate<Var> {
 private class ShouldIdentifyLocals implements Predicate<Var> {
 private class IdentifyGlobalVariables implements Predicate<Var> { return true ; } } ;
private class IdentifyLocals implements Predicate<Var> { private final var var ;
 private class IdentifyConstants implements Predicate<Var> { public class IdentifyLocals implements Boolean } {
 private Class IsLocal <Var> {
 private class IdentifyConstants implements Predicate<Var> { public class IdentifyLocals implements Predicate } {
 private class IdentifyConstants and superclass IdentifyLocals implements Predicate<Var> {
 private class IsLocal extends Var{
 private class NonGlobalVariables implements NonGlobalVariablePredicate<Var> {
 private class NonGlobalVar { private final NonGlobalPredicate<Var> {
 private class NonGlobalScopePredicate<Var> {
 private class IdentifyConstants implements Predicate<Var> { public class IdentifyLocals implements Var { } }
 private class IsLocals<Var> {
 private class NonGlobalVarReimplements Predicate<Var> {
 private class Local <Var> {
 private class IsLocal implements Predicate { {
private  class NonGlobalVariable {
 private class Predicates.<Var> {
 private class MustIdentifyLocals implements Predicate<Var> {
private  class IsLocalVar { {
 private class NonGlobalVar { private final ScopeLocalPredicate<Var> {
private class IdentifyLocals implements Predicate<Var> { private boolean alwaysTrue ; }
 private class CheckConstsAndIdentifyLocals implements Predicate<Var> {
 private class IsLocal extends Var { {
 Rule<Var> {
 private Class <Var> {
 private class IdentifyConstants implements Predicate<Var> { public class IdentifyLocals implements boolean ;
 private class IdentifyConstants { privateclass IdentifyLocals implements Predicate<Var> {
 private class NonGlobalScopes implements Scope { {
 private class IdentifyAll {
 private class IdentifyConstants extends Predicate<Var> { return IdentifyConstants. filter ( var ) ; } } ;
 private class IdentifyLocals { {
 private class IdentifyConstants extends Predicate<Var> { return IdentifyConstants. getFilterForMode ( mode ) {
 private class NonGlobalVar { private class Reimplements Predicate<Var> {
 private class IsLocalFilter<Var> {
 private class NonGlobalVar { private class CanIdentifyLocals implements Predicate<Var> {
 implements Filter<Var> {
private class IdentifyLocals implements Predicate<Var>  { private class IdentifyConstants extends Var {
 private class LocalScopePredicate<Var> {
private class IdentifyLocals implements Predicate<Var>  { private class IdentifyConstants extends Builder {
 private class NonGlobalVariableAccessPredicate<Var> {
private class IdentifyLocals implements Predicate<Var> { private final Scope var. scope ; {
private  boolean local {
 private class NonGlobalVar { private final boolean canIdentifyLocals implements Predicate<Var> {
 private class Non-global variables { private class CanIdentifyLocals implements Predicate<Var> {
 private class NonGlobalVar { private class ShouldIdentifyLocals implements Predicate<Var> {
 private class IsGlobal<Var> {
 private class IsLocal implements Predicate*{
 private class NonGlobalVariable extends Scope#implements Predicate<Var> {
 class Local <Var> {
private  Class IsLocalVar {
 private class NonGlobalVar { private final boolean shouldIdentifyLocals implements Predicate<Var> {
 private Class isLocal(){
 private class Non-global variables { private classIdentifyLocals implements Predicate<Var> {
 private class NonGlobalVariableScopePredicate<Var> {
 private class GlobalScopePredicate<Var> {
 private class NonGlobalNamespacePredicate<Var> {
 private class IdentifyNonimplements Predicate<Var> {
 private class Non-global variables { private class ShouldIdentifyLocals implements Predicate<Var> {
 private class NonGlobalVariables implements Predicate { {
 private class NonGlobal implements Predicate(){
private class IdentifyLocals implements Predicate<Var> { private final Var var = this ; {
 private class IdentifyLocals implements private ClassIdentifyLocals implements Predicate<Var> {
 private class InlineAndIdentifyLocals implements Predicate<Var> {
 private class NonGlobal|implements Predicate<Var> {
 private class NonGlobalVariable { private class Reimplements Predicate<Var> {
 private class FilterNonGlobal <Var>{
 Class <Var> {
 class <> {
private  static {
 private class NonLocalReimplements Predicate<Var> {
 private class IdentifyConstantsWithNonIdentifyLocals implements Predicate<Var> {
 private class IsLocal(){
 private class NonGlobalVar { private class _implements Predicate<Var> {
 private class AlwaysTrue ;
 private class NonGlobalVar { private class #implements Predicate<Var> {
 private class FilterAndIdentifyLocals implements Predicate<Var> {
 private class IdentifyLocals-{
 private class NonGlobalVariables implements Class#implements Predicate<Var> {
 private class IdentifyLocals implements Behavior { #IdentifyLocals implements Predicate<Var> {
 private class NonGlobalScopes implements ScopeFilter{
 private class IsLocal implements Predicate { }
 private class NonGlobal { private class Reimplements Predicate<Var> {
 private class ScopeReimplements Predicate<Var> {
 Predicate<Var> {
 private class IsPredicate<Var> {
 private class IsLocal extends Predicate{
 private class NonGlobalVar { private class NonUnimplements Predicate<Var> {
 private class Non-GlobalVariablesIdentifyLocals implements Predicate<Var> {
 private class AlwaysTrue {
 private class AutoIdentifyLocals implements Predicate<Var> {
private  class NonGlobalVariable { {
 private class alwaysTrue ;
 private class NonGlobalVar { private class Non-implements Predicate<Var> {
private  class IsGlobal {
 static class Local {
private class IdentifyLocals  implements Predicate { {
private  static boolean {
 Filter<Var> {
private class IdentifyLocals  implements Predicate.<Var> {
 private class NonGlobalVariableFilter#implements Predicate<Var> {
 private class IsLocalScopePredicate<Var> {
 private class Unimplements Predicate<Var> {
 class Reimplements Predicate<Var> {
 class Unimplements Predicate<Var> {
 private class ScopePredicate<Var> {
 private class IdentifyLocalVar#implements Predicate<Var> {
 private class IdentifyLocalVar|implements Predicate<Var> {
private class IdentifyLocals  extends boolean {
private  boolean globalVar {
private class IdentifyLocals  implements Predicate<var> {
 private class isLocal{
 private class NonGlobalVarPredicate<Var> {
 public class Predicate<Var> {
 private class NonGlobalVariablesIdentifyLocals implements Predicate<Var> {
 private class NonGlobalMethodsPredicate<Var> {
 private class NonGlobalVarFilterAndIdentifyLocals implements Predicate<Var> {
private class  isLocalVar {
 private class IdentifyGlobal {
 private class IsLocalVar {
 private class NonIdentifyLocals implements Predicate<Var> {
 private class NonGlobalVar { private final class _implements Predicate<Var> {
 private class IdentifyConstantsAndMaybeIdentifyLocals implements Predicate<Var> {
 private class IdentifyLocalVarReimplements Predicate<Var> {
 private class InlineOrIdentifyLocals implements Predicate<Var> {
 private class NonGlobalVar { private final class Reimplements Predicate<Var> {
private  boolean global {
private  boolean localVar {
 private class Scope#implements Predicate<Var> {
 private class IdentifyConstantsWithOnlyIdentifyLocals implements Predicate<Var> {
 private boolean Filter<Var> {
 private class IdentifyLocal {
private class IdentifyLocals  extends PredicateVar {
private class IdentifyLocals  extends Boolean {
 public class IsLocal{
private  class LocalVar {
 private static class Local {
 private class NonGlobalVarDeclarationIdentifyLocals implements Predicate<Var> {
 private class ExplicitlyIdentifyLocals implements Predicate<Var> {
 private class NonLocal|implements Predicate<Var> {
 private class NonGlobal { private class _implements Predicate<Var> {
 private class NonGlobalVar { class #implements Predicate<Var> {
private  Class Local {
 private class CheckConsts. CanIdentifyLocals implements Predicate<Var> {
private class IdentifyLocals  implements Predicate<Variable> {
private class IdentifyLocals  implements BooleanFilter {
 private class IdentifyConstantsWithAndIdentifyLocals implements Predicate<Var> {
 <var> {
 private class IdentifyConstantsWithMaybeIdentifyLocals implements Predicate<Var> {
 private class InternalPredicate<Var> {
 static class IsLocal {
 private class LocalReimplements Predicate<Var> {
 private class NonGlobalVarDeclaredIdentifyLocals implements Predicate<Var> {
 private class NonGlobalVar { superclass IdentifyLocals implements Predicate<Var> {
 class <Variable> {
private class  Global {
 private Class LocalPredicate<Var> {
 private class Non-GlobalVarIdentifyLocals implements Predicate<Var> {
 Class Filter<Var> {
 private class CheckConsts.IdentifyLocals implements Predicate<Var> {
 private boolean local(){
 private class NotReimplements Predicate<Var> {
 private class CheckConstsToIdentifyLocals implements Predicate<Var> {
 private static class Subclass IdentifyLocals implements Predicate<Var> {
 private staticclass IdentifyLocals implements Predicate<Var> {
 private class Filter ( ) { privateclass IdentifyLocals implements Predicate<Var> {
 private class FilterNonIdentifyLocals implements Predicate<Var> {
 private static class Local { privateclass IdentifyLocals implements Predicate<Var> {
 private class GlobalVariablePredicate<Var> {
private class IdentifyLocals  extends Predicate {
 private class AllToIdentifyLocals implements Predicate<Var> {
private class  GlobalVar {
 private class NonGlobalVar { privateclass IdentifyLocals implements Predicate<Var> {
 private class NonGlobalVarIdentifyLocals implements Predicate<Var> {
 private class UnwrappedIdentifyLocals implements Predicate<Var> {
 private class Non-GlobalIdentifyLocals implements Predicate<Var> {
 private <Var> {
private class  LocalVariable {
 private static subclass IdentifyLocals implements Predicate<Var> {
private class IdentifyLocals  = {
 class Non-implements Predicate<Var> {
 private class AllAndIdentifyLocals implements Predicate<Var> {
 private class NonGlobalVar implements Subclass IdentifyLocals implements Predicate<Var> {
 private class NonGlobalVariable { superclass IdentifyLocals implements Predicate<Var> {
 private static superclass IdentifyLocals implements Predicate<Var> {
 class isLocal{
 class Boolean<Var> {
 private class _implements Predicate<Var> {
 private static class Local { superclass IdentifyLocals implements Predicate<Var> {
private class IdentifyLocals implements  Predicates<Var> {
 public <Var> {
private class IdentifyLocals  implements BooleanVar {
 private static abstractclass IdentifyLocals implements Predicate<Var> {
 private static class superclass IdentifyLocals implements Predicate<Var> {
 public static class Local { privateclass IdentifyLocals implements Predicate<Var> {
 private static class Scope { privateclass IdentifyLocals implements Predicate<Var> {
private  static final
 private class Local {
 private static Subclass IdentifyLocals implements Predicate<Var> {
 private class #implements Predicate<Var> {
 class LocalVar{
private class IdentifyLocals implements  Predicate { }
 public static class Local { superclass IdentifyLocals implements Predicate<Var> {
 private static class Local superclass IdentifyLocals implements Predicate<Var> {
 class ScopePredicate<Var> {
 static class Global {
 private ShouldIdentifyLocals implements Predicate<Var> {
 class IsPredicate<Var> {
 private static class { superclass IdentifyLocals implements Predicate<Var> {
 private static class local superclass IdentifyLocals implements Predicate<Var> {
 private static class Local
 private AutoIdentifyLocals implements Predicate<Var> {
 private static class Superclass IdentifyLocals implements Predicate<Var> {
 private static class Local privateclass IdentifyLocals implements Predicate<Var> {
 private abstractclass IdentifyLocals implements Predicate<Var> {
private class IdentifyLocals implements  bool {
 class LocalVariable{
 public static{
 static class Location {
private class IdentifyLocals implements Predicate<Var>  alwaysFalse {
 private CanIdentifyLocals implements Predicate<Var> {
 private static abstractSubclass IdentifyLocals implements Predicate<Var> {
 private final Subclass IdentifyLocals implements Predicate<Var> {
private class IdentifyLocals  implements Boolean { }
 private staticIdentifyLocals implements Predicate<Var> {
 Class LocalPredicate<Var> {
 class _implements Predicate<Var> {
 private static class Innerclass IdentifyLocals implements Predicate<Var> {
private class IdentifyLocals Interface {
 private superclass IdentifyLocals implements Predicate<Var> {
 class InternalPredicate<Var> {
 private static class global superclass IdentifyLocals implements Predicate<Var> {
private class IdentifyLocals implements Predicate<Var> * {
 public staticclass IdentifyLocals implements Predicate<Var> {
private class  Scope {
private class IdentifyLocals implements  BooleanSet {
 class Scope{
 class Scope<Var> {
 private subclass IdentifyLocals implements Predicate<Var> {
 <Variable> {
private class IdentifyLocals implements  Behavior {
private class IdentifyLocals implements  void {
 class Pimplements Predicate<Var> {
 public static
private class IdentifyLocals implements Predicate<> {
 <code> {
private class  Variable {
 class Variable{
 private static
private class  Internal {
private  boolean {
 } else {
private  void {
private class IdentifyLocals  { }
 static final
private class IdentifyLocals implements Predicate<Var>,
 static methods
 static method
 private #implements Predicate<Var> {
private class IdentifyLocals implements Predicate<Str> {
 } } ;
 } { }
 class ShouldIdentifyLocals implements Predicate<Var> {
 } ; }
 } } {
private  public {
 final
 static
 }
private class IdentifyLocals implements Predicate<Var>  {} }
private class IdentifyLocals implements Predicate<Var>) {
private class IdentifyLocals implements Predicate<Var>, {
private class IdentifyLocals implements Predicate<?Var> {
