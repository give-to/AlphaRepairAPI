 return Predicates.<Var>alwaysIdentifyLocals();
 return identifyConstants;
 return Predicates.<Var>alwaysFalse;
 return Predicates.<Var>IdentifyLocals();
 identifyConstants=new IdentifyLocals();
 return identifyConstants=new IdentifyLocals();
 return Predicates.<Var>alwaysFalse();
 return Predicates.IdentifyLocals();
 return Predicates.<Var>alwaysTrue(); case LOCALS_ALL:
 return Predicates.<Var>new IdentifyLocals();
 return Predicates.<Var>all;
 case ALL:
 return Predicates.<Var>alwaysFalse();
 return Predicates.<Var>alwaysTrue(); case LOCALS_ONLY:
 return Predicates.<Var>alwaysFalse);
return new IdentifyLocals(); default: throw new IllegalStateException();
 return Predicates.<Var>alwaysFalse(); default:
return new  Locals();
 return Predicates.<Var>alwaysFalse(); case ALL:
 return Predicates.<Var>alwaysTrue(); case LOCALS:
 return Predicates.<Var>alwaysFalse(); case LOCALS:
 return Predicates.<Var>alwaysFalse(); case LOCALS_ALL:
 return Predicates.<Var>alwaysFalse(); case LOCALS_ONLY: return Predicates.<Var>all();
 return Predicates.<Var>alwaysFalse(); case LOCALS_ONLY: return Predicates.<Var>
 return Predicates.<Var>alwaysTrue(); case LOCALS_ONLY: return Predicates.<Var>
 return Predicates.<Var>alwaysTrue(); case LOCALS_ONLY: return Predicates.<Var>all();
 return Predicates.<Var>all();
 return Predicates.<Var>all();
 return Predicates.<Var>alwaysTrue(); case ALL:
 return Predicates.<Var>alwaysFalse(); case LOCALS_ONLY:
 return Predicates.<Var>(all);
 return Predicates.<Var>always();
 return Predicates.alwaysIdentifyLocals();
 return Predicates.<Var>alwaysTrue(); default:
 return Predicates.<Var>;
 return Predicates.<Var>alwaysTrue();
 return Predicates.<Var>alwaysTrue(); case LOCALS_ONLY: case ALL:
 return Predicates.<Var>alwaysTrue();
 return Predicates.<Var>alwaysTrue(); case LOCAL:
 return Predicates.<Var>alwaysFalse(); case LOCALS_ONLY: case ALL:
 return Predicates.<Var>alwaysFalse(); case LOCALS_ONLY: return Predicates.<Var>alwaysAll(); case LOCALS:
return new IdentifyLocals(); default: throw IllegalStateException();
 return Predicates.<Var>alwaysTrue(); case LOCALS_ONLY: return Predicates.<Var>();
 return Predicates.<Var>alwaysFalse(); case LOCALS_ONLY: return Predicates.<Var>alwaysAll(); case ALL:
 return Predicates.<Var>alwaysFalse(); case LOCALS_ONLY: return Predicates.<Var>alwaysAll();
 return Predicates.<Locals>new IdentifyLocals();
 return Predicates.<Var>alwaysFalse(); }
 return Predicates.<Var>alwaysFalse(); case LOCALS_ONLY: return Predicates.<Var>();
 return Predicates.<Var>alwaysTrueIdentifyLocals();
return new IdentifyLocals(); default: throw new IllegalStateException(); }
 return Predicates.<Var>alwaysTrue(); case LOCALS_ONLY: case LOCAL:
 return Predicates.<Var>alwaysTrue(); case LOCALS_ONLY: return Predicates.<Var>alwaysFalse();
 return Predicates.<Var>alwaysTrue(); case LOCALS_ONLY: return Predicates.<Var>alwaysTrue();
 return Predicates.<Var>alwaysFalse(); case LOCALS_ONLY: return Predicates.<Var>alwaysAll(); }
 return Predicates.<Var>alwaysFalse(); case LOCALS_ONLY: case LOCAL:
 case LOCAL:
 return Predicates.<Var>alwaysFalse(); case LOCALS_ONLY: return Predicates.<Var>alwaysAll(); default:
 return Predicates.<Var>alwaysTrue(); case LOCALS_ONLY: return Predicates.<Var>alwaysFalse(); }
 return Predicates.<Var>alwaysTrue(); default: throw new IllegalStateException(); case ALL:
 return Predicates.<Var>alwaysTrue(); case LOCALS_ONLY: return Predicates.<Var>alwaysFalse(); default:
 return Predicates.<Var>(alwaysFalse);
 return Predicates.<Var>alwaysFalse(); case LOCAL:
 return Predicates.<Var>alwaysTrue(); case LOCALS_ONLY: return Predicates.<Var>;
 return Predicates.<Var>alwaysTrue(); case LOCALS_ONLY: return Predicates.<Var>ALL;
 return Predicates.<Var>alwaysTrue;
 return Predicates.<Var>alwaysTrueAndIdentifyLocals();
 return Predicates.<Var>alwaysTrue(); }
 return Predicates.<Var>alwaysFalse(); case LOCALS_ONLY: return Predicates.<Var>;
 return Predicates.<Locale>new IdentifyLocals();
 return Predicates.<Var>alwaysFalse(); case LOCALS_ONLY: return Predicates.<Var>all;
 return Predicates.<Var>alwaysTrue(); case LOCALS_ONLY: return Predicates.<Var>all;
 return Predicates.<Var>alwaysTrue(); default: throw new IllegalStateException(); case LOCALS:
 return Predicates.<Var>alwaysTrue(); case LOCALES:
 return Predicates.<Var>alwaysFalse(); default: throw new IllegalStateException(); case ALL:
 default:
 return Predicates.<Var>alwaysTrue(); case LOCALS_ONLY: return Predicates.<Var>alwaysAll(); }
 return Predicates.<Var>alwaysFalse(); default: throw new IllegalStateException(); } case LOCALS:
 return Predicates.<Var>alwaysTrue(); default: throw new IllegalStateException(); } case LOCALS:
 return Predicates.<Var>alwaysTrue(); case LOCALS_ONLY, ALL:
 return Predicates.<Var>alwaysLocals;
 return Predicates.<Var>alwaysFalse(); case LOCALS_ONLY: return Predicates.<Var>alwaysAll(); case LOCAL:
 return Predicates.<Var>alwaysLocale;
 return Predicates.<Var>all||new IdentifyLocals();
 return Predicates.<Var>alwaysLocals();
 return Predicates.<Var>alwaysTrue(); case LOCALS_ONLY: return identifyConstants();
 return Predicates.<Var>alwaysTrue(); case LOCAL ALL:
 return Predicates.<Var>alwaysFalse(); case LOCALS_ONLY: return identifyConstants();
 return Predicates.<Var>alwaysTrue(); case LOCALS_ONLY: case LOCALS:
 return Predicates.<Var>alwaysTrue(); case LOCALS_ONLY: return Predicates.<Var>alwaysAll(); default:
 return Predicates.<Var>alwaysFalse(); case LOCALS_ONLY: return Predicates.<Var>}
 return Predicates.<Var>(ALL);
 return Predicates.<Var>alwaysFalse(); case LOCALS_ONLY: return identifyConstants;
 return Predicates.<Var>alwaysFalse(); case LOCALS_ONLY: return Predicates.<Var>alwaysTrue();
 return Predicates.<Var>alwaysTrue(); case LOCALS_ONLY: return identifyConstants;
 return Predicates.<Var>alwaysFalse(); case LOCALS_ONLY, ALL:
 return Predicates.<Var>alwaysFalse(); case LOCALS_ONLY: return Predicates.<Var>alwaysTrue(); case LOCALS:
 return Predicates.<Var>alwaysFalse(); case LOCALES:
 return Predicates.<Var>alwaysFalse(); case LOCALS_ONLY: return Predicates.<Var>alwaysAll;
 return Predicates.alwaysTrue();
 return Predicates(ALL);
 return Predicates.<Var>alwaysTrue(); case LOCALS_ONLY: default:
 return Predicates.<Var>alwaysTrueWithIdentifyLocals();
 return Predicates.<Var>alwaysFalse;
 return Predicates.<Var>alwaysFalse(); case LOCALS_ONLY: return Predicates.<Var>alwaysLocal(); case LOCALS:
 return Predicates.<Var>alwaysTrue(); case LOCALS_ONLY: return Predicates.<Var>alwaysTrue(); }
 return Predicates.<Var>noLocals();
 return Predicates.<Locals>
 return Predicates.<Var>always();
return new  IdentifyLocals();
 return ALL;
return new IdentifyLocals() default: throw new IllegalStateException();
 return Predicates.<Var>alwaysFalse(); case LOCALS_ONLY: return Predicates.<Var>alwaysNone(); case LOCALS:
 return Predicates.<Var>alwaysFalse(); case LOCALS_ONLY: return Predicates.<Var>alwaysTrue(); case ALL:
 return Predicates.<Var>alwaysFalse(); case LOCALS_ONLY: return Predicates.<Var>alwaysLocal(); case ALL:
 return Predicates.<Var>alwaysFalse(); case LOCALS_ONLY: return Predicates.<Var>alwaysAll; }
 return Predicates.<Var>alwaysTrue(); default: throw new IllegalStateException(); } case LOCAL:
 return Predicates.<Var>inlineAllStrings();
 return Predicates.<Var>alwaysFalse(); case LOCALS_ONLY: return Predicates.<Var>alwaysNone(); case ALL:
 return Predicates.<Local>new IdentifyLocals();
 return Predicates.<Var>localsOnLY();
 return Predicates.<Var>inlineAllStrings;
 return Predicates.<Var>localsOnLY;
 return Predicates.<Var>alwaysFalse(); case LOCALS_ONLY: default:
 return Predicates.<Var>alwaysTrue+new IdentifyLocals();
 break;
 return Predicates.<Var>alwaysFalse(); case LOCALS_ONLY: return Predicates.<Var>alwaysAll; case ALL:
 return Predicates.<Var>alwaysTrue(); case LOCAL_ALL:
 return identifyConstants;
 return Predicates.<Var>always;
 return Predicates.<Var>();
 return Predicates.<Var>alwaysFalse; default:
 return identifyConstants();
 return Predicates.<Var>alwaysFalse(); default: return Predicates.<Var>all();
 return Predicates.<Var>alwaysTrue_new IdentifyLocals();
 return Predicates.<Var>alwaysTrue(new IdentifyLocals();
 return Predicates.<Var>noLocals;
return new  IdentifyLocals(); }
 return Predicates.ALL;
 return Predicates.<Var>();
return new IdentifyLocals() default: throw new IllegalStateException(); }
 return Predicates.<Var>all);
 return identifyConstants();
 return Predicates.<Var>alwaysLocale();
return new IdentifyLocals(); case LOCALS_ONLY:
 return Predicates.<Var>alwaysTrue()->IdentifyLocals();
 return Predicates.<Var>alwaysFalse(); case LOC:
 return Predicates.<Var>allLocals();
 return Predicates.alwaysFalse();
 return Predicates.<Var>alwaysFalse(); case LOCAL_ALL:
 return Predicates.<Var>alwaysTrue(); case LOC:
 return Predicates.<Var>(defineConstants);
 return Predicates.<Var>alwaysTrue||new IdentifyLocals();
 return Predicates.<Var>alwaysTrue(); default: throw new IllegalStateException(); }
 return Predicates.<>IdentifyLocals();
 return Predicates.<Var>alwaysFalse(); case ANY:
 return Predicates.<Var>localsOnly();
 return Predicates.<Var>(alwaysTrue);
 return Predicates.<Var>alwaysTrue(); default: return new IdentifyConstants(); }
 return Predicates(all);
return new  IdentifyLocals(all);
 return Predicates.<Var>alwaysTrue);
 return Predicates.<Var>alwaysTrue(); } case LOCALS_ALL:
 return Predicates.<Var>alwaysFalse||new IdentifyLocals();
 return Predicates.<Var>all
return new IdentifyLocals(); default: throw IllegalStateException;
 return Predicates.<Var>localsOnlyTrue();
return new IdentifyLocals() default: throw IllegalStateException();
 return Predicates.<Var>localsOnlyTrue;
 return Predicates.<Var>(allLocals);
 return Predicates.<Var>alwaysTrue(); default: case LOCAL ALL:
 return Predicates.<Var>alwaysFalse(); default: return Predicates.<Var>all;
 return Predicates.all();
 return Predicates.<Var>includeAllLocals();
 return Predicates.<Var>allLocals;
return new  Locals(); default: return identifyConstants();
 return Predicates.<Var>(locals_only);
 return Predicates.<Var>alwaysFalse(); }
return new IdentifyLocals(); default: return identifyConstants;
 return Predicates.<Var>alwaysTrue(); default: case LOCAL ONLY:
 return Predicates.<Var>always(new IdentifyLocals();
 return Predicates(locals);
 return Predicates.<Var>alwaysTrueForIdentifyLocals();
 return Predicates.<Var>alwaysTrue(); case LOCALS_ALL: default:
 return Predicates.locals();
 return Predicates.<Var>alwaysFalse; case LOCALS:
 return Predicates.<Var>includeAllStrings();
 return Predicates.<Var>all;
return new  Locals(); default: return identifyConstants;
 return Predicates.<Var>defineConstants||new IdentifyLocals();
 return Predicates.<Var>localsOnly;
 return Predicates.<Var>locals(all);
 return Predicates.<Var>
 return Predicates.<Var>allAndIdentifyLocals();
 return Predicates.<Var>alwaysTrue(); case LOCALS_ALL_FLAG:
return new IdentifyLocals() default: throw new IllegalStateException(); break;
 return Predicates.<Var>(inlineAllString);
 return Predicates.locals;
 case LOCALS_ALL:
 return Predicates.<Var>global();
return new IdentifyLocals(compiler, identifyConstants);
return new  Locals(); case IdentifyAllStrings:
return new  IdentifyLocals(root);
 return Predicates.<Var>alwaysTrue(); case LOCALS_ALL_AST:
 return Predicates.<Var>(localsOnlyTrue);
 return Predicates.<Var>alwaysFalse(();
 return new LocalsFilter();
 return Predicates.<Var>alwaysTrueOrIdentifyLocals();
return new  IdentifyConstants(locals); }
 return Predicates.<Var>onlyTrueIdentifyLocals();
 return Predicates.<Var>alwaysTrue;
 return Predicates.<Var>true();
 return Predicates.<Var>alwaysFalse; }
 return Predicates.<Var>alwaysTrue(); getIdentifyLocals();
 return null;
return new IdentifyLocals() case LOCALS_ONLY:
 return Predicates.<Var>defineConstants(new IdentifyLocals();
 return Predicates.<Var>alwaysAllFalse();
return new IdentifyLocals(); default: return alwaysTrue();
return new IdentifyLocals() case LOCALS_ONLY: return ALL;
 return Predicates.<Var>(locals|all);
 return Predicates.<Var>alwaysTrueAsIdentifyLocals();
 case LOCALS_ONLY:
return new  Locals(); case IdentifyConstants:
 return Predicates.<Locals();
 return Predicates.<Var>all+new IdentifyLocals();
 return Predicates.<Var>defineConstants.new IdentifyLocals();
return new IdentifyLocals(true); default: throw new IllegalStateException();
 return Predicates.<Var>defineConstants=new IdentifyLocals();
return new IdentifyLocals(); default: return identifyConstants();
 return Predicates.<Var>alwaysTrue(all);
 return new IdentifyAll();
 return Predicates.<Var>all|new IdentifyLocals();
return new IdentifyLocals() else: return Predicates.<Var>all();
 return Predicates.<Var>alwaysAllFalse;
 return Predicates.<Var>alwaysTrue().getIdentifyLocals();
return new IdentifyLocals(); case ALL: break;
return new IdentifyLocals(); default: throw IllegalStateException(); }
 return Predicates.always();
return new IdentifyLocals() default: return identifyConstants();
 return Predicates.<Locals();
return new IdentifyLocals() case LOCALS_ONLY: break;
 return Predicates.<Var>identifyAll=new IdentifyLocals();
 return Predicates.<Locals;
return new IdentifyLocals(); case LOCALS_ALL:
return new IdentifyLocals(); case LOCALS_ONLY: break;
return new  IdentifyConstants(locals);
 return Predicates.<Var>alwaysTrue(); #IdentifyLocals();
 return Predicates(alwaysFalse);
 return Predicates.<Var>all_new IdentifyLocals();
 return alwaysFalse;
 return new LocalConstants();
 return predicates.<Var>new IdentifyLocals();
return new IdentifyLocals(identifyConstants);
 return Predicates.<Var>global;
return new  IdentifyLocals(); break;
 return Predicates(alwaysTrue);
 return predicates.<Var>alwaysFalse();
 return Predicates.<Var>ALL;
 return Predicates.<Var>always);
 return Predicates.all;
return new IdentifyLocals(); default: throw new IllegalStateException;
 return alwaysFalse();
 return Predicates.<Var>true;
return new IdentifyLocals(this.compiler, identifyConstants);
return new IdentifyLocals; default: throw new IllegalStateException(); }
return new IdentifyLocals; default: throw new IllegalStateException();
return new IdentifyLocals(); case ALL: return ALL;
return new IdentifyLocals(compiler, mode, identifyConstants);
 return Predicates.<Var>alwaysTrue()#IdentifyLocals();
return new IdentifyLocals() case ALL: return identifyConstants();
 return Predicates.<Var>allLocalsOnly();
 return Predicates.<Locals);
 return identifyConstants.new IdentifyLocals();
return new  IdentifyLocals(); default: break;
 return Predicates.<Var>localsOnlyFalse;
 return Predicates.<Var>allLocalsTrue;
return new IdentifyLocals() case ALL: return Predicates.<Var>();
 return Predicates.<Var>.alwaysFalse(); }
 return Indicates.<Var>new IdentifyLocals();
return new  IdentifyLocals(); case ALL:
return new IdentifyLocals() case ALL: return alwaysTrue();
return new IdentifyLocals(); default: return alwaysFalse();
 return Predicates.<Var>allOrIdentifyLocals();
return new IdentifyLocals(); case ALL: return identifyConstants();
 return Predicates.<Var>.alwaysFalse();
return new IdentifyLocals() default: return identifyConstants;
 return Predicates.<Var>alwaysMatchIdentifyLocals();
 return Predicates.<Var>false;
 return Predicates.<Var>alwaysTrue(); case LOCALS_ONLY: }
return new  IdentifyConstants(); case ALL: break;
 return Predicates.<Var>.alwaysFalse();
return new IdentifyLocals() default: return alwaysTrue();
 return predicates.<Var>IdentifyLocals();
 return predicates(all);
return new IdentifyLocals() else: return new IdentifyConstants();
 return Predicates.alwaysTrue;
 return Predicates.<Var>localsOnLine();
return new  IdentifyLocals(all); }
 return identifyConstants||new IdentifyLocals();
 return alwaysIdentifyLocals();
 case LOCAL ALL:
 return alwaysTrue;
return new IdentifyLocals(compiler, mode, inlineAllStrings);
 return Predicates.<Var>(true);
return new IdentifyLocals(); default: return alwaysTrue;
return new IdentifyLocals(true); default: throw IllegalStateException();
 return Predicates.alwaysFalse;
 return Predicates.<Var>true;
 return Predicates.<Var>alwaysNone);
return new  IdentifyConstants(); case LOCALS:
return new IdentifyLocals() switch (mode) {
return new IdentifyLocals(); default: return Predicates.<Var>();
 return Predicates.<Var>alwaysAll;
return new IdentifyLocals(); default: return null;
return new  IdentifyConstants(); case LOCAL:
return new IdentifyLocals() break;
 return Predicates.allIdentifyLocals();
 return Predicates.<Var>empty();
return new IdentifyLocals() case ALL: return Predicates.<Var>all
return new  IdentifyLocals(root); }
 return alwaysTrue();
return new IdentifyLocals(); switch (mode) {
 return Predicates.noLocal();
 return Predicates.All;
 return Predicates.<Var>alwaysNone;
 Case LOCALS_ALL:
 return Predicates.<Var>allIdentifyLocals();
 return Predicates.<Var>.alwaysTrue();
 return predicates.<Var>alwaysFalse;
return new  IdentifyLocalConstants();
return new  Locals(all);
return new IdentifyLocals() else: return Predicates.<Var>all
return new IdentifyLocals(this, identifyConstants);
 return new OnlyIdentifyLocals();
 return (ALL);
return new IdentifyLocals() case ALL: return ALL;
return new IdentifyLocals(); case CUSTOM:
 return Predicates.<Var>everything();
 return Predicates.<IdentifyLocals();
 return Predicates.<Var>.IdentifyLocals();
 return Indicates.<Var>IdentifyLocals();
 return new LocationConstants();
return new IdentifyLocals(predicates.<Var>alwaysTrue); }
 return defineConstants;
 return defineConstants();
return new IdentifyLocals(identifyConstants); break;
return new IdentifyLocals(); switch (mode)
return new IdentifyLocals() default: return alwaysFalse();
 return Predicates.global();
return new IdentifyLocals() case LOCALS_ALL:
 return predicates.<Var>alwaysIdentifyLocals();
return new IdentifyLocals(compiler, identifyConstants); }
 return Predicates.<Var>.alwaysIdentifyLocals();
 case LOCALS:
return new IdentifyLocals(); default: return false;
 return this.new IdentifyLocals();
 return Predicates.<Var>*new IdentifyLocals();
 return Predicates.<Locally>new IdentifyLocals();
return new IdentifyLocals(this.compiler, mode);
 return Indicates.ALL;
return new IdentifyLocals() default: return null;
 return Predicates.noIdentifyLocals();
 return IdentifyConstants();
 return new AllLocals();
 return Predicates.noLocal;
return new IdentifyLocals() case ALL: break;
return new IdentifyLocals() case ALL: return identifyConstants;
return new IdentifyLocals() default: break;
 return new LocalConstants;
 return Predicates<Var>alwaysIdentifyLocals();
 return IdentifyConstants.IdentifyLocals();
 return Predicates.defaultIdentifyLocals();
return new IdentifyLocals(this.compiler, this.mode); }
 return findLocals();
return new  LocalFilter();
 return predicates(ALL);
return new IdentifyLocals(predicates.<Var>alwaysFalse); }
return new IdentifyLocals() default: throw new IllegalStateException;
return new  IdentifyLocals(); break; }
return new IdentifyLocals(); case LOCAL:
return new IdentifyLocals() default: return alwaysTrue;
return new IdentifyLocals(true); default: throw IllegalStateException(); }
 return new AllIdentifyLocals();
 return (all);
return new IdentifyLocals(); case LOCALS:
return new IdentifyLocals() case LOCALS_ALL: break;
 return Predicates.ALL();
return new IdentifyLocals(identifyConstants, root); }
 return true;
 return new Locals(); }
 return Predicates.new IdentifyLocals();
 return defineLocals();
return new IdentifyLocals(true); default: throw new IllegalStateException;
return new IdentifyLocals(this, identifyConstants); }
 return alwaysTrue();
 return new Local(all);
 return Predicates<Var>new IdentifyLocals();
return new IdentifyLocals() default: return false;
 return false;
return new IdentifyLocals(identifyConstants); }
return new IdentifyLocals(this.compiler, root); }
return new  IdentifyLocals() }
return new  LocalsFilter(); }
return new IdentifyLocals(this.compiler, mode); }
return new IdentifyLocals(true, identifyConstants); }
 return identifyConstants_new IdentifyLocals();
 case ALLLOCALS:
 return all();
 return identifyConstants(new IdentifyLocals();
 return identifiedConstants;
return new  IdentifyLocations(); }
 return new DefaultIdentifyLocals();
return new IdentifyLocals() default: return true;
 return predicates.IdentifyLocals();
 switch (locals)
return new IdentifyLocals(compiler, mode); }
 return ALL();
return new IdentifyLocals(this.compiler); }
 return alwaysTrue;
 return new (ALL);
 return (alwaysTrue);
 return new AlwaysIdentifyLocals();
 return (!all);
return new IdentifyLocals(compiler, root); }
 case LOCALE:
return new  Locals;
return new IdentifyLocals(); switch (mode):
 defineConstants=new IdentifyLocals();
 return find(all);
return new IdentifyLocals(allLocals); }
 return defaultIdentifyLocals();
 return new (all);
return new  Default();
 return Predicates<IdentifyLocals();
 return allLocal;
 return this;
return new IdentifyLocals(allLocals);
return new IdentifyLocals(identifyAll);
 return Predicates.<Var>(new IdentifyLocals();
return new IdentifyLocals(this);
 return "(ALL);
 return null);
 return ALL);
 return Predicates#IdentifyLocals();
 return Predicates=new IdentifyLocals();
 return new NoIdentifyLocals();
return new IdentifyLocals() case ALL:
return new IdentifyLocals(identifyFlags);
return new IdentifyLocals() break; break;
 return null();
 return;
return new IdentifyLocals() case LOCAL:
 return noLocal();
return new  Local();
return new IdentifyLocals(this); }
return new  LOCals();
return new IdentifyLocals(this, mode); }
return new IdentifyLocals(true, true); }
 return identityConstants;
return new  Map();
 return ALL||new IdentifyLocals();
return new IdentifyLocals(alwaysTrue); }
return new IdentifyLocals(this, root); }
 return undefined();
 case ANY:
return new IdentifyLocals(all) }
 return new All();
 return null||new IdentifyLocals();
 return getIdentifyLocals();
return new IdentifyLocals() break; }
return new  LocationFilter();
return new IdentifyLocals(true);
 return noLocal;
 return new Location();
 return filter=new IdentifyLocals();
 return findLocals;
 return allTrue;
 return false);
 case ALL }
 return *new IdentifyLocals();
 return true();
 return ();
 return ALL;
 return _new IdentifyLocals();
 (ALL);
 return all;
 return mode.new IdentifyLocals();
return new IdentifyLocals() default: }
 return noIdentifyLocals();
 return -new IdentifyLocals();
 break;
 continue;
return new IdentifyLocals(...) ;
return new IdentifyLocals() default; }
return new IdentifyLocals() break });
return new IdentifyLocals() break };
 default:new IdentifyLocals();
 } returnnew IdentifyLocals();
return new IdentifyLocalsImpl();
return new IdentifyLocals; }
 break }
 #
 }
