return MakeDeclaredNamesUnique.getContextualRenameInverter(compiler);
return MakeDeclaredNamesUnique(compiler);
return MakeDeclaredNamesUnique.getContextualRenameInverter(compiler); }
 return new InvertContextualRenaming(compiler);
 return invertContextualRenaming;
 return compiler;
return MakeDeclaredNamesUnique ( compiler, root ) ;
 return new Invert(compiler);
 return invertContextualRenaming(compiler);
 return compiler.getContextualRenameInverter(compiler);
return MakeDeclaredNamesUnique ( compiler, invertContextualRenaming
return MakeDeclaredNamesUnique.getContextualRenameInverter(compiler, root); }
 return new InvertContextualNameNormalization(compiler);
 return compiler);
 return invertContextualNames(compiler);
 return new CompilerPass ( compiler, invertContextualRenaming, root ) ;
return MakeDeclaredNamesUnique ( compiler, invertContextualRenaming);
return MakeDeclaredNamesUnique ( compiler, invertContextualRenaming )
 return new CompilerPass ( compiler, invertContextualRenaming, denormalize ) ;
 return InvertContextualRenaming(compiler);
 return new CompilerPass ( compiler, invertContextualRenaming ) ; }
 return new CompilerPass ( compiler, invertContextualRenaming ) ;
 return invertNames( compiler);
return  new CompilerPass ( compiler, invertContextualRenaming )(compiler);
return MakeDeclaredNamesUnique.getContextualRenameInverter(compiler, externs);
return MakeDeclaredNamesUnique.getContextualRenameInverter(compiler, options.anonymousFunctionNaming); }
return  new CompilerPass ( compiler, invertContextualRenaming(compiler);
return MakeDeclaredNamesUnique.getContextualRenameInverter(compiler) ; } };
 return invertContextualRenaming(compiler;
 return invertContextualRenaming.getContextualRenameInverter(compiler);
return MakeDeclaredNamesUnique.getContextualRenameInverter( compiler, options.anonymousFunctionNaming);
return MakeDeclaredNamesUnique.getContextualRenameInverter( compiler, invertContextualRenaming);
 return new InvertContextualRenaming(compiler, root); }
 return new CompilerPass ( compiler, invertContextualRenaming, denormalize )
 return InvertContextualRenaming.getContextualRenameInverter(compiler);
return  new CompilerPass ( compiler ) { return invertContextualRenaming(compiler);
return MakeDeclaredNamesUnique.getContextualRenameInverter ( compiler, root ) ;
 return invertContextual(compiler);
 return new CompilerPass(compiler, invertContextualRenaming, root); }
 return new InvertContextualNames(compiler);
 return new CompilerPass ( compiler, invertContextualRenaming ) ; } } ;
 return new InvertContextualRenaming(compiler, root);
 return new CompilerPass(compiler, invertContextualRenaming
return  invertNames(compiler); }
 return new CompilerPass ( compiler, invertContextualRenaming ( compiler ) ) ;
return  new CompilerPass ( compiler ) { return invertContextualNames(compiler);
 return new InvertNames(compiler);
return  invertContextualRenaming
 return new CompilerPass ( compiler, invertContextualRenaming, root )
return  invertContextualRenaming ; }
return MakeDeclaredNamesUnique(compiler); }
 return new CompilerPass ( compiler, options. anonymousFunctionNaming. getReservedCharacters ( ) ) ;
 return new CompilerPass ( compiler, invertContextualRenaming, renormalize ) ;
 return invertContextualNameNormalization(compiler);
 return new InvertNames( compiler, options.contextualRenaming);
 return new CompilerPass ( compiler, invertContextualRenaming ) ; } } ; }
 return new CompilerPass ( compiler, invertContextualRenaming, options ) ; } } ;
 return new CompilerPass ( compiler, invertContextualRenaming, root ) ; } } ;
 return new InvertNames( compiler, options.anonymousFunctionNaming); }
return  new CompilerPass ( compiler, invertContextual )(compiler);
 return new CompilerPass(compiler, invertContextualRenaming); }
 return invertContextualRenaming();
return MakeDeclaredNamesUnique.getContextualRenameInverter(compiler, compiler);
return  compiler ; }
return  new CompilerPass ( compiler ) { return invertNameNormalization(compiler);
 return invertContextualName(compiler);
 return invertNameNormalization(compiler);
return MakeDeclaredNamesUnique ( compiler, root )
return  new CompilerPass ( compiler, invertContextualRenaming ). process(compiler);
 return new InvertNameNormalization(compiler);
 return new InvertContextualRenaming(compiler, compiler);
return  new CompilerPass ( compiler, invertContextualName )(compiler);
 return InvertContextualRenaming(compiler;
return MakeDeclaredNamesUnique.getContextualRenameInverter(compiler, options.annonymousFunctionNaming); }
 return new InvertContextualRenaming( compiler;
 return invertContextual(compiler;
 return new CompilerPass ( compiler, invertContextualRenaming ) ; } }; return compiler ;
return MakeDeclaredNamesUnique.getContextualRenameInverter( compiler, invertContextualRenaming); }
return  invertContextualRenaming ( compiler )
return MakeDeclaredNamesUnique.getContextualRenameInverter(compiler). invertNames ( ) ;
 return invertNamesInternal(compiler);
 return new CompilerPass ( compiler, invertContextualRenaming, options. nameNormalization ) ;
 return new CompilerPass ( compiler, invertContextualRenaming ) ; } }; } } }
 return new InvertNames(compiler) {
 return new CompilerPass(compiler, invertContextualRenaming); } };
return MakeDeclaredNamesUnique.getContextualRenameInverter(compiler, options.invertContextualRenaming);
 return new CompilerPass(compiler, invertContextualRenaming);
 return new CompilerPass ( compiler, invertContextualRenaming, options. nameNormalizer ) ;
 return new InvertContextualRenaming(compiler, options);
 return new CompilerPass ( compiler, invertContextualRenaming ) ; } } } ;
 return _getContextualRenameInverter(compiler);
 return new CompilerPass ( compiler, invertContextualRenaming ) ; } } ; } } ;
return  new CompilerPass ( compiler ) { return new InvertNames(compiler);
 return new CompilerPass ( compiler, invertContextualRenaming )
 return new InvertNames( compiler, options.contextualNames);
return  new CompilerPass ( compiler, invertNames )(compiler);
 return new CompilerPass ( compiler, invertContextualRenaming, root ) ; } } ; }
 return new InvertNames( compiler, options.anonymousFunctionNaming);
return MakeDeclaredNamesUnique.getContextualRenameInverter(compiler, options.annonymousFunctionNaming);
 return new InvertContextualRenamingProperties(compiler);
 return new CompilerPass ( compiler, invertContextualRenaming ) ; } } } }
 return new CompilerPass ( compiler, invertContextualRenaming ) {
 return InvertContextualNameNormalization(compiler);
return  invertContextualRenaming(); }
return MakeDeclaredNamesUnique.getContextualRenameInverter ( compiler, invertContextualRenaming
return MakeDeclaredNamesUnique. call ( compiler, root ) ;
return  new CompilerPass ( compiler, options ) { return invertContextualNames(compiler);
 return new CompilerPass ( compiler, options. anonymousFunctionNaming. getReservedCharacters ( ) ) ;
return  new CompilerPass ( compiler, options ) { return invertContextualRenaming(compiler);
 return invertContextualNames;
return  new CompilerPass ( compiler ) { return invertContextualName(compiler);
 return new CompilerPass(compiler, options.anonymousFunctionNaming.getReservedCharacters()); } };
return  new CompilerPass ( compiler, options. invertContextualName )(compiler);
 return InvertNames(compiler);
 return InvertContextualRenaming;
return  new CompilerPass ( compiler, invertNameNormalization(compiler);
return  new InvertContextualRenaming ( options ). process(compiler);
return MakeDeclaredNamesUnique ( compiler, root ) ; }
 return new InvertContextualNamingProperties(compiler);
 return new CompilerPass ( compiler, invertContextualRenaming ) ; } } ; return passFactory ;
 return invertContextual;
 return InvertContextualNaming(compiler);
 return new CompilerPass(compiler, options.invertContextualRenaming); }
return MakeDeclaredNamesUnique.getContextualRenameInverter() ;
 return new InvertNames(compiler, root;
 return new CompilerPass ( compiler, invertContextualRenaming ) ; } } ( ) ; } }
return  new CompilerPass ( compiler, options ) { return invertNameNormalization(compiler);
return  invertNames ( compiler, root ) ;
 return new CompilerPass ( compiler, invertContextualRenaming, options ) {
return MakeDeclaredNamesUnique. create ( compiler, root ) ;
 return new CompilerPass ( compiler, invertContextualRenaming, root ) ; } }; } } ;
return  new CompilerPass ( compiler, invertContextualRenaming ). setCompiler(compiler);
 return new CompilerPass(compiler, options.invertContextualRenaming);
 return new CompilerPass ( compiler, invertContextualRenaming ) ; } } ; return buildPass ;
 return new InvertNames(compiler); } };
 return new CompilerPass(compiler, invertContextualRenaming); } }
 return CompilerPass.getContextualRenameInverter(compiler);
return MakeDeclaredNamesUnique.getContextualRenameInverter(compiler). invertContextualRenaming();
return  new CompilerPass ( compiler, invertContextualRenaming ) process(compiler);
 return new CompilerPass(compiler, options.anonymousFunctionNaming.getReservedCharacters()); }
 return new CompilerPass(compiler, options.invertContextualRenaming); } };
 return new InvertContextualNamedProperties(compiler);
return MakeDeclaredNamesUnique.getContextualRenameInverter( compiler, invertContextualRen );
 return new CompilerPass(compiler);
 return new InvertNames(compiler); }
 return new InvertNames( compiler, options.contextualName);
return  new CompilerPass ( compiler, options ) { return new InvertNames(compiler);
return MakeDeclaredNamesUnique ( compiler, invertContextualRenaming ;
 return new InvertNames(compiler, compiler;
 return invertNames( compiler;
 return invertName(compiler);
return  new CompilerPass ( compiler, invertContextualRenaming ). createInternal(compiler);
return MakeDeclaredNamesUnique.getContextualRenameInverter( compiler, options.anonymousFunctionName);
 return new InvertContextualName(this.compiler);
return MakeDeclaredNamesUnique.getContextualRenameInverter(compiler, options.contextualRename);
return MakeDeclaredNamesUnique. create ( compiler ) ;
 return new InvertContextualNamingPass(compiler);
return  new InvertNames( compiler, contextualRenaming(compiler);
 return new CompilerPass ( compiler, options. anonymousFunctionNaming. getReservedCharacters ( ) ) {
 return convert(compiler);
 return InvertNameNormalization(compiler);
 return InvertContextualRename.getContextualRenameInverter(compiler);
 return new CompilerPass() {
 return new CompilerPass ( compiler, invertContextualRenaming, false ) ;
 return new InvertContextualName(compiler);
 return new InvertContextualNames(this.compiler);
 return invertContextualRenaming(parser);
return  new CompilerPass ( compiler, invertContextualRenaming ) }(compiler);
return MakeDeclaredNamesUnique.getContextualRenameInverter ( compiler, invertContextualRenaming )
return  new CompilerPass ( compiler, options ) { return new InvertContextualRenaming(compiler);
 return invertContextualRenaming(config);
return MakeDeclaredNamesUnique.getContextualRenameInverter(compiler, invertContextualRenaming); } };
 return new CompilerPass(compiler, options.anonymousFunctionNaming.getReservedCharacters()); } }
return MakeDeclaredNamesUnique. create ( compiler, invertContextualRenaming
return  new CompilerPass ( compiler, invertContextualName(compiler);
return MakeDeclaredNamesUnique ( compiler, invertContextual ) ;
return  new CompilerPass ( compiler, options ) { return invertContextualName(compiler);
 return new InvertContextualRenamingPassImpl(compiler);
 return new InvertContextualNamingPassImpl(compiler);
 return invertContextualRenaming(comp);
 return new CompilerPass ( compiler, options. anonymousFunctionNaming. getReservedCharacters ( ), root ) ;
 return new InvertNames(compiler);;
return  new CompilerPass ( compiler, invertContextualRenaming ). invertNames(compiler);
 return new InvertNames(compiler, root);
 return new CompilerPass(compiler, options.invertContextualRenaming); } }
 return invertContextualRenaming() compiler;
 return new CompilerPass(compiler, InvertContextualRenaming); }
 return ( compiler);
return MakeDeclaredNamesUnique.getContextualRenameInverter( compiler, options.anonymousFunctionNames);
 return InvertContextualNames(compiler);
 return new InvertContextualNaming(compiler);
return  new CompilerPass ( compiler, invertContextualRenaming ). apply(compiler);
 return new CompilerPass(compiler, options.invertNames); } };
 return new CompilerPass( compiler) {
 return invertContextualName;
 return CompilerPass.MakeDeclaredNamesUnique.getContextualRenameInverter(compiler);
 return invertContextualRenamingInternal(compiler);
return MakeDeclaredNamesUnique. call ( compiler, invertContextualRenaming
 return new Convert(compiler);
 return new InvertContextualRenamingPass(compiler);
return  new CompilerPass ( compiler ) ; } } ; return new InvertContextual(compiler);
return MakeDeclaredNamesUnique.getContextualRenameInverter(compiler, options.invertContextualRen);
return MakeDeclaredNamesUnique. call ( compiler, invertContextual ) ;
return MakeDeclaredNamesUnique ( compiler, invertContextual )
 return new InvertContextualNames(options.compiler);
 return new InvertContextualRenaming ( ) {
 return InvertContextualNames.getContextualRenameInverter(compiler);
 return new CompilerPass(compiler, options.nameNormalization); }
return  invertNames ( compiler )
return MakeDeclaredNamesUnique.getContextualRenameInverter(compiler, options.annonymousFunctionName);
return MakeDeclaredNamesUnique ( compiler, invertContextualRenaming));
 return new InvertContextualRenaming( compiler) {
 return invertNames(compiler compiler);
return MakeDeclaredNamesUnique.getContextualRenameInverter(compiler). invertNames ( compiler ) ;
 return new CompilerPass ( compiler, options. anonymousFunctionNaming. getReservedCharacters ( ) ) }
return MakeDeclaredNamesUniquePass();
return MakeDeclaredNamesUnique ( compiler, options, root ) ;
 return InvertContextualRenamingMakeDeclaredNamesUnique.getContextualRenameInverter(compiler);
return MakeDeclaredNamesUnique.getContextualRenameInverter(compiler). invertContextualRenaming(); }
return  new CompilerPass ( compiler, invertContextualRenaming ) { return new Name(compiler);
 return new CompilerPass(compiler, options.nameNormalizer); }
return MakeDeclaredNamesUnique. call ( compiler ) ;
 return InvertName(compiler compiler);
return  new InvertContextualRenaming(false)(compiler);
 return new CompilerPass ( compiler, options. anonymousFunctionNaming. getReservedCharacters ( ), root ) {
 return new CompilerPass(compiler, invertContextualRenaming); } }; {
return MakeDeclaredNamesUnique.getContextualRenameInverterPass(compiler);
return  new InvertContextualRenaming(nameNormalize(compiler);
 return new CompilerPass(compiler, options.nameNormalization);
return MakeDeclaredNamesUnique. create ( compiler ) ; }
return  InvertNames ( compiler, root )
return MakeDeclaredNamesUnique ( compiler, options ) ; }
return MakeDeclaredNamesUnique.getContextualRenameInverterPass(compiler); }
return MakeDeclaredNamesUnique ( compiler, invertContextualRen )
 return new CompilerPass(compiler, invertNames); } };
return MakeDeclaredNamesUnique. create ( compiler, root )
 return invert( compiler);
 return new InvertNames(compiler)#getContextualRenameInverter(compiler);
return  new InvertContextualRenamingAndNormalization(compiler);
 return InvertNameNormalization.getContextualRenameInverter(compiler);
 return InvertContextual( compiler);
 return new CompilerPass(compiler, options.invertContextualRenaming); } }; {
 return InvertContextualRenamingPass.getContextualRenameInverter(compiler);
 return InvertContextualRenamingHelper.getContextualRenameInverter(compiler);
 return new InvertNames(compiler, options); } };
 return invertNames(options).getContextualRenameInverter(compiler);
return  new InvertContextualRenaming(name)(compiler);
 return new InvertContextualNameRenaming(compiler);
return MakeDeclaredNamesUnique.getContextualRenameInverter ( compiler, invertContextual ) ;
 return new InvertNames(compiler).getContextualRenameInverter(compiler);
return MakeDeclaredNamesUnique. call ( compiler, options, root ) ;
 return new CompilerPass(compiler, options.nameNormalizer);
 return new InvertNames(compiler),MakeDeclaredNamesUnique.getContextualRenameInverter(compiler);
 return new InvertNames(compiler); } }
 return invertNames();
 return new CompilerPass ( compiler, options. anonymousFunctionNaming. getReservedCharacters ( ), ) ;
 return new CompilerPass(compiler, options.invertContextualRenaming); } ;
return MakeDeclaredNamesUnique. call ( compiler ) ; }
return  new InvertContextualRenaming(true)(compiler);
return MakeDeclaredNamesUnique.getContextualRenameInverter( compiler, options.namesUnique);
return MakeDeclaredNamesUnique.getContextualRenameInverter(compiler, options, root); }
 return compiler.pass;
 return new InvertContextualNamedNames(compiler);
 return new CompilerPass ( compiler, options. anonymousFunctionNaming. getReservedCharacters ( ) ) ; } }; {
return MakeDeclaredNamesUnique.getContextualRenameInverter(compiler) ; } }; return invertContextualRenaming
return  new InvertContextualRenaming(null)(compiler);
 return new CompilerPass ( compiler, options. anonymousFunctionNaming. getReservedCharacters ( ) ) ; } }; }
return MakeDeclaredNamesUnique.getContextualRenameInverter(compiler). invertContextualRenaming ( compiler);
 return new InvertNames( compiler, options).MakeDeclaredNamesUnique.getContextualRenameInverter(compiler);
return MakeDeclaredNamesUnique. create ( compiler, invertContextual ) ;
return  new CompilerPass ( compiler, invertContextualRenaming ). setInternal(compiler);
 return InvertContextualRenamingUtils.getContextualRenameInverter(compiler);
return  new CompilerPass ( compiler, invertName )(compiler);
return MakeDeclaredNamesUnique.getContextualRenameInverter(compiler, options.contextualRename); }
 return new CompilerPass(compiler, options.anonymousFunctionNaming.getReservedCharacters()); } ;
return MakeDeclaredNamesUnique. call ( compiler, root )
 return new CompilerPass(compiler, options.invertContextualRenaming); } }; }
 return invertContextualRenamingPass.getContextualRenameInverter(compiler);
return MakeDeclaredNamesUnique.getContextualRenameInverter(compiler) ; } }; }
 return new CompilerPass(compiler, options.names); } };
 return new CompilerPass(compiler, options); } } ;
 return new CompilerPass ( compiler, options. anonymousFunctionNaming. getReservedCharacters ( ), false ) ; }
 return new InvertNames(compiler).MakeDeclaredNamesUnique.getContextualRenameInverter(compiler);
return MakeDeclaredNamesUnique. call ( compiler, options ) ; } } ;
 return new CompilerPass(compiler, invertContextualRenaming); } }; }
return MakeDeclaredNamesUnique ( compiler, options ) ; } };
 return new InvertNames(compiler, root); }
return MakeDeclaredNamesUnique ( compiler ) ; } } ;
 return new InvertNames(compiler), compiler.getContextualRenameInverter(compiler);
 return invertContextualName.getContextualRenameInverter(compiler);
 return new InvertNames(compiler, options) {
 return new InvertNames(compiler) { }
return MakeDeclaredNamesUnique.getContextualRenameInverter(compiler). invert ( compiler ) ;
 return InvertingContextualRenaming.getContextualRenameInverter(compiler);
 return InvertContextualRenamePass.getContextualRenameInverter(compiler);
return MakeDeclaredNamesUnique. call ( compiler, root ) ; }
return MakeDeclaredNamesUnique.getContextualRenameInverter( compiler, options.contextualName);
 return new CompilerPass(compiler, options); } }; {
 return invertNames(parser);
 return invertContextualRenaming().getContextualRenameInverter(compiler);
return MakeDeclaredNamesUnique.getContextualRenameInverter(compiler). convert ( compiler ) ;
 return new CompilerPass(compiler); } };
return MakeDeclaredNamesUnique.getContextualRenameInverter( compiler, options.nameNormalizer);
return  new CompilerPass ( compiler, invertContextualRenaming ) { return new Names(compiler);
return MakeDeclaredNamesUnique. create ( compiler, options, root ) ;
 return new CompilerPass(compiler, options.name); }
 return New InvertContextualRenaming(compiler);
 return invertNames(compiler).getContextualRenameInverter(compiler);
 return invertNames() compiler;
return MakeDeclaredNamesUnique. call ( compiler, options ) ; }
 return new InvertName(compiler) {
 return invertNames(comp);
return MakeDeclaredNamesUnique. create ( compiler, root ) ; }
return MakeDeclaredNamesUnique. createInternal(compiler);
return  new CompilerPass ( compiler, invertContextualRenaming ). setSource(compiler);
 return new CompilerPass ( compiler, options. anonymousFunctionNaming. getReservedCharacters ( ) ) {}
 return InvertNameNormalizationUtils.getContextualRenameInverter(compiler);
 return CompilerPass. createInternal ( compiler, invertContextualRenaming ) ; } }; {
 return new InvertNames( compiler, options.MakeDeclaredNamesUnique.getContextualRenameInverter(compiler);
 return invertContextualNames(this.compiler);
return  invertContextual();
 return InvertContextualRenaming.MakeDeclaredNamesUnique.getContextualRenameInverter(compiler);
return MakeDeclaredNamesUnique.getContextualRenameInverter ( compiler, options ) ; } };
return MakeDeclaredNamesUnique. apply(compiler);
 return CompilerPass. INSTANCE.MakeDeclaredNamesUnique.getContextualRenameInverter(compiler);
return MakeDeclaredNamesUnique. call ( compiler, options ) ; } }
return MakeDeclaredNamesUnique.getContextualRenameInverter(compiler). convertNames ( compiler ) ;
 return new InvertNames(compiler)->getContextualRenameInverter(compiler);
 return invertNames().getContextualRenameInverter(compiler);
 return InvertNames(compiler;
 return invertNaming.getContextualRenameInverter(compiler);
 return InvertNameNormalizationInverter.getContextualRenameInverter(compiler);
 return invertNaming(compiler);
return MakeDeclaredNamesUnique. createInternal(compiler); }
 return new InvertNames(compiler); compiler.getContextualRenameInverter(compiler);
return MakeDeclaredNamesUnique.getContextualRenameInverter(compiler, options.contextualNames);
 return invertName(options).getContextualRenameInverter(compiler);
return MakeDeclaredNamesUnique.getContextualRenameInverter(compiler). invertNames ( compiler, root ) ;
return MakeDeclaredNamesUnique.getContextualRenameInverter(compilerPass);
 return new InvertNames(compiler); } }; {
 return new InvertContextualRaming(compiler);
 return new InvertNames(compiler);
 return InvertContextualRenameUtils.getContextualRenameInverter(compiler);
 return new CompilerPass ( compiler, invertNames ) ; }
 return new InvertNames(compiler, options); } }
return MakeDeclaredNamesUnique.getContextualRenameInverter ( compiler, root )
 return InvertContextualRenameFactory.getContextualRenameInverter(compiler);
 return new InvertNames(compiler, compiler.getContextualRenameInverter(compiler);
return MakeDeclaredNamesUnique.getContextualRenameInverter(compiler) ; } }; } }
 return InvertedContextualRenaming.getContextualRenameInverter(compiler);
return MakeDeclaredNamesUnique.getContextualRenameInverter( compiler, options, root);
return MakeDeclaredNamesUnique.getContextualRenameInverter( compiler, options.contextual);
 return new Name( compiler);
 return invertRenaming.getContextualRenameInverter(compiler);
return MakeDeclaredNamesUnique. create ( compiler, options ) ; }
 return InvertNames ( compiler, options ).getContextualRenameInverter(compiler);
 return new CompilerPass(compiler, options); } }; }
return MakeDeclaredNamesUnique.getContextualRenameInverter(compiler). invertContextualRenaming ;
return MakeDeclaredNamesUnique.getContextualRenameInverter(); }
return MakeDeclaredNamesUnique. call ( compiler, options. name ) ;
 return invertNames(compiler), compiler.getContextualRenameInverter(compiler);
return MakeDeclaredNamesUnique.getContextualRenameInverter(compiler) ; } }; return new PassFactory ( ) ;
 return CompilerPassFactory.MakeDeclaredNamesUnique.getContextualRenameInverter(compiler);
 return new CompilerPass ( compiler, invertContextualRenaming ) ; } } ; private String convertName ( compiler ) {
 return invertContextualNames.getContextualRenameInverter(compiler);
return MakeDeclaredNamesUnique.getContextualRenameInverter(compiler). invertNames ( ) ; }
return MakeDeclaredNamesUnique ( compiler, contextual ) ;
 return new Transform(compiler);
return MakeDeclaredNamesUnique.getContextualRenameInverter(compiler). invertNames ( ) ; } };
 return new CompilerPass ( compiler, invertContextualRenaming, root ) ; } } ; return new Pass ( ) {
 return CompilerPass {
 return new CompilerPass ( compiler, invertContextualRenaming, root ) ; } } ; return new PassFactory() {
 return new InvertNames(compiler, options.getContextualRenameInverter(compiler);
return MakeDeclaredNamesUnique.getContextualRenameInverter(compiler). invertNameNormalization();
return MakeDeclaredNamesUnique.getContextualRenameInverter(compiler, options.annonymous);
return  compile ( compiler )
 return new InvertContextualRenaming( compiler) {}
 return CompilerPassImplicitMakeDeclaredNamesUnique.getContextualRenameInverter(compiler);
 return new CompilerPass ( compiler, invertContextualRenaming, root ) ; } } ; return new CompilerPass();
return MakeDeclaredNamesUnique.getContextualRenameInverter(compiler). invert ( ) ;
 return new InvertNames(compiler) compiler.getContextualRenameInverter(compiler);
 return invertNaming;
return MakeDeclaredNamesUnique.create() ;
 return CompilerPassMakeDeclaredNamesUnique.getContextualRenameInverter(compiler);
 return InvertContextualName.getContextualRenameInverter(compiler);
return MakeDeclaredNamesUnique.getContextualRenameInverter(compiler). invertNames ( compiler ) ; }
return MakeDeclaredNamesUnique.getContextualRenameInverter(compiler, root, compiler);
 return invertNameNormal(compiler);
return MakeDeclaredNamesUnique. call ( compiler, options ) ;
return MakeDeclaredNamesUnique.getContextualRenameInverter(compiler, options);
return  invertNames(); }
 return new CompilerPass(compiler, options.invertContextualRenaming); } }; } ;
 return new InvertNames(compiler);.getContextualRenameInverter(compiler);
return MakeDeclaredNamesUnique ( compiler )
return MakeDeclaredNamesUnique ( compiler, invertContextualRenouncing
 return invertNames(compiler, compiler.getContextualRenameInverter(compiler);
 process(compiler);
 return invertNormalization;
return  CompilerPass();
return MakeDeclaredNamesUnique.getContextualRenameInverter(compiler) ; } }; return new CompilerPass();
 return InvertAndMakeDeclaredNamesUnique.getContextualRenameInverter(compiler);
 return CompilerPassImpl.MakeDeclaredNamesUnique.getContextualRenameInverter(compiler);
 return new InvertNames(compiler);MakeDeclaredNamesUnique.getContextualRenameInverter(compiler);
 return PassFactory.getContextualRenameInverter(compiler);
 return new CompilerPass() {}
return MakeDeclaredNamesUnique.getContextualRenameInverter ( compiler, options ) ; } }
 return invertNames(compiler)->getContextualRenameInverter(compiler);
return MakeDeclaredNamesUnique.getContextualRenameInverter(compiler) ; } }; } ;
 return InvertNameNormalization.MakeDeclaredNamesUnique.getContextualRenameInverter(compiler);
 return new CompilerPass(compiler, options.invertContextualRenaming); } }; } }
 return new CompilerPass(); } };
 return new InvertNames ( compiler;
return MakeDeclaredNamesUnique.getContextualRenameInverter( compiler, root, options);
 return new CompilerPass(); }
 return invertRename.getContextualRenameInverter(compiler);
 return new InvertNames(compiler), AutoMakeDeclaredNamesUnique.getContextualRenameInverter(compiler);
 return new InvertNames(compiler)MakeDeclaredNamesUnique.getContextualRenameInverter(compiler);
 return InvertNameNormalizer.getContextualRenameInverter(compiler);
 return invertName();
 return CompilerPass. createInternal ( compiler, invertContextualRenaming ) ; } } ; }
 return new CompilerPass ( compiler, options. nameNormalization ) ; } } ; private final CallbackContextualRename converter() {
 return InvertNamesFactory.getContextualRenameInverter(compiler);
return MakeDeclaredNamesUnique.class;
return MakeDeclaredNamesUnique.getContextualRenameInverter( compiler, options.name);
 return new InvertNames( compiler, options )MakeDeclaredNamesUnique.getContextualRenameInverter(compiler);
 return InvertNames.getContextualRenameInverter(compiler);
 return InvertRename.getContextualRenameInverter(compiler);
 return NameNormalizer.getContextualRenameInverter(compiler);
return MakeDeclaredNamesUnique.getContextualRenameInverter(compiler) ; } }; } } }
return MakeDeclaredNamesUnique.getContextualRenameInverter(compiler, propertyMap);
return MakeDeclaredNamesUnique.getContextualRenameInverter(compilerContext);
return MakeDeclaredNamesUnique. call ( compiler, contextual ) ;
 return new CompilerPass ( compiler, options. nameNormalization ) ; } } ; private final CallbackContextualRename convert() {
 return InvertNamesPass.getContextualRenameInverter(compiler);
 return new CompilerPass ( compiler, options. nameNormalization ) ; } } ; private final CallbackContextualRename callback() {
 return CompilerPass. INSTANCE().MakeDeclaredNamesUnique.getContextualRenameInverter(compiler);
 return new CompilerPass ( compiler, options. nameNormalization ) ; } } ; private final TransformerContextualTransformer transformer;
 return InvertContextualRenamingAndMakeDeclaredNamesUnique.getContextualRenameInverter(compiler);
 return new InvertNames(compiler,MakeDeclaredNamesUnique.getContextualRenameInverter(compiler);
 return new Interpret(compiler);
 return new CompilerPass ( compiler, options. nameNormalization ) ; } } ; private final CallbackContextualRenameFactory factory {
 return new CompilerPass ( compiler, options. nameNormalization ) ; } } ; private final TransformerContextualTransformer transformer {
 return CompilerPass() {
 return InvertContextualAndMakeDeclaredNamesUnique.getContextualRenameInverter(compiler);
 return new Pass;
return MakeDeclaredNamesUnique.getContextualRenameInverter( compiler, invertRenaming);
 return InvertContextualToMakeDeclaredNamesUnique.getContextualRenameInverter(compiler);
 return new Normalize(compiler);
 return CompilerPassInvertAndMakeDeclaredNamesUnique.getContextualRenameInverter(compiler);
 return new CompilerPass ( compiler, options. nameNormalization ) ; } } ; private final CallbackContextualRenameFactory f {
return MakeDeclaredNamesUnique ( )
return MakeDeclaredNamesUnique.getContextualRenameInverter(compiler, options, compiler);
 return new CompilerPass ( compiler, options. nameNormalization ) ; } } ; private final TransformerContextualTransformer compiler;
 return new CompilerPass ( compiler, options. nameNormalization ) ; } } ; private final TransformerContextualTransformer compiler {
 return invert(config);
 if (options.unique) {
 return new CompilerPass ( compiler, options. nameNormalization ) ; } } ; private final TransformerContextualTransformer transformer
 return CompilerPassFactoryImpl.MakeDeclaredNamesUnique.getContextualRenameInverter(compiler);
 compiler.getContextualRenameInverter(compiler);
return MakeDeclaredNamesUnique.getContextualRenameInverter(config, compiler, root);
 return new Pass ( ) {
 return ContextualRenameMakeDeclaredNamesUnique.getContextualRenameInverter(compiler);
 return new PassPass() {
 return new CompilerPass();
 return CompilerMakeDeclaredNamesUnique.getContextualRenameInverter(compiler);
 return InvertNameNormalizationAndMakeDeclaredNamesUnique.getContextualRenameInverter(compiler);
return MakeDeclaredNamesUnique.getContextualRenameInverter(compiler) ; } } }
 return CompilerPassFactory.invertMakeDeclaredNamesUnique.getContextualRenameInverter(compiler);
return MakeDeclaredNamesUnique.getContextualRenameInverter(compiler) ; } } } ;
return MakeDeclaredNamesUnique.getContextualRenameInverter(compiler) ; } }
 return InvertContextualMakeDeclaredNamesUnique.getContextualRenameInverter(compiler);
return MakeDeclaredNamesUnique.getContextualRenameInverter(compiler, compiler); }
return  CompilerPass ;
return MakeDeclaredNamesUnique. create ( compiler )
 return new Import(compiler);
return MakeDeclaredNamesUnique.Pass();
 return new ConvertNames(compiler);
 return InvertNamesAndMakeDeclaredNamesUnique.getContextualRenameInverter(compiler);
 return Transformer.getContextualRenameInverter(compiler);
 return compiler; }
 return JsMakeDeclaredNamesUnique.getContextualRenameInverter(compiler);
return MakeDeclaredNamesUnique.getContextualRenameInverter(compiler, options.name); }
 return process( compiler);
 return convert(config);
 return Utils.getContextualRenameInverter(compiler);
 return invertNamesImpl(compiler);
 return CompilerPass {}
 return (this);
 return ContextualNames.getContextualRenameInverter(compiler);
 return - 1;
return MakeDeclaredNamesUnique.getContextualRenameInverter(compiler, inputMap);
 return (null);
 return convert(parser);
 return CompilerPass();
return MakeDeclaredNamesUnique.getContextualRenameInverter(compiler, options); }
 return new Indent(compiler);
 return CompilerPass()
return MakeDeclaredNamesUnique.getContextualRenameInverter(compiler) ( compiler ) ;
 return compilerPass;
 return compiler.process;
return  compile ( compiler);
 return AutoMakeDeclaredNamesUnique.getContextualRenameInverter(compiler);
 return nameNormalizer.getContextualRenameInverter(compiler);
 return new Pass( compiler );
 return Converter.getContextualRenameInverter(compiler);
 return InvertMakeDeclaredNamesUnique.getContextualRenameInverter(compiler);
 return interpret(compiler);
return MakeDeclaredNamesUnique.INSTANCE();
return  Compiler ;
return MakeDeclaredNamesUnique() ;
return MakeDeclaredNamesUnique.getContextualRenameInverter(compiler, sourceCode);
 return $( compiler);
 return compile ( );
 return ContextualName.getContextualRenameInverter(compiler);
 return compiler.config.getContextualRenameInverter(compiler);
 return compile ( compiler;
return MakeDeclaredNamesUnique.getContextualRenameInverter(compiler, null);
 return transform(compiler);
return MakeDeclaredNamesUnique.getContextualRenameInverter(compiler, true);
 return translate(compiler);
 return InvertOrMakeDeclaredNamesUnique.getContextualRenameInverter(compiler);
 return ContextualMakeDeclaredNamesUnique.getContextualRenameInverter(compiler);
 return null;
 return Converters.getContextualRenameInverter(compiler);
 return compiler.MakeDeclaredNamesUnique.getContextualRenameInverter(compiler);
 return options.getContextualRenameInverter(compiler);
return MakeDeclaredNamesUnique.getContextualRenameInverter(compilerImpl);
 return new TransformNames(compiler);
 return Js.getContextualRenameInverter(compiler);
 return InvertToMakeDeclaredNamesUnique.getContextualRenameInverter(compiler);
 return null);
 return NameNormalization.getContextualRenameInverter(compiler);
return MakeDeclaredNamesUnique.getContextualRenameInverter(config, compiler);
 return { compiler;
return MakeDeclaredNamesUnique.class; }
return MakeDeclaredNamesUnique.getContextualRenameInverter(compiler) + compiler;
 return { } ;
 return this.getContextualRenameInverter(compiler);
 convert(compiler);
return  compilePass();
 return InvertorMakeDeclaredNamesUnique.getContextualRenameInverter(compiler);
return  new Pass();
return MakeDeclaredNamesUnique.createPass();
return MakeDeclaredNamesUnique.createInternal();
 return context.getContextualRenameInverter(compiler);
 return null ; }
return MakeDeclaredNamesUnique.getContextualRenameInverter ( compiler));
 return null;
return MakeDeclaredNamesUnique.getContextualRenameInverterPass();
 return config.getContextualRenameInverter(compiler);
return MakeDeclaredNamesUnique.PASS();
 return GlobalMakeDeclaredNamesUnique.getContextualRenameInverter(compiler);
 return AbstractMakeDeclaredNamesUnique.getContextualRenameInverter(compiler);
 return Compiler.
 return compiler ;
 return ASTMakeDeclaredNamesUnique.getContextualRenameInverter(compiler);
return MakeDeclaredNamesUnique.getContextualRenameInverter(compiler) } };
return MakeDeclaredNamesUnique.getContextualRenameInverter(compiler) } } };
return MakeDeclaredNamesUnique.class();
 return inverse(compiler);
 return DefaultMakeDeclaredNamesUnique.getContextualRenameInverter(compiler);
return MakeDeclaredNamesUnique.getContextualRenameInverter(compiler) return } };
 initialize(compiler);
 return init(compiler);
 init(compiler);
return MakeDeclaredNamesUnique(Compiler);
return MakeDeclaredNamesUnique.getContextualRenameInverter() }
return MakeDeclaredNamesUnique.getContextualRenameInverter(comp);
 return configuration.getContextualRenameInverter(compiler);
return MakeDeclaredNamesUnique.getContextualRenameInverter(config);
return MakeDeclaredNamesUnique(compiler));
 $( compiler);
 ( compiler);
return MakeDeclaredNamesUnique.getContextualRenameInverter(this);
return MakeDeclaredNamesUnique.getContextualRenameInverter(compiler) } }
 return #getContextualRenameInverter(compiler);
 return this;
return MakeDeclaredNamesUnique.getContextualRenameInverter(compiler)
 return __getContextualRenameInverter(compiler);
 super.getContextualRenameInverter(compiler);
return MakeDeclaredNamesUnique.getContextualRenameInverter(compiler)); }
 return false;
 } };
return MakeDeclaredNamesUnique.getContextualRenameInverter(compiler) return };
return MakeDeclaredNamesUnique.getContextualRenameInverter(compiler) return }
 return compile;
 } }
return MakeDeclaredNamesUnique.getContextualRenameInverter(compiler) }
return MakeDeclaredNamesUnique.getContextualRenameInverter(parser);
 } ;
return MakeDeclaredNamesUnique.getContextualRenameInverter(Compiler);
return MakeDeclaredNamesUnique.getContextualRenameInverter(ciler);
return MakeDeclaredNamesUnique.getContextualRenameInverter(comiler);
return MakeDeclaredNamesUnique.getContextualRenameInverter(compile);
 }
 return
