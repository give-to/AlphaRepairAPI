 passes.add(renameVars);
.add(renameVars);
 passes.add(off); passes.add(renameVars);
 return passes;
 passes.add(off); } passes.add(renameVars);
 passes.add(variableRenaming);
passes.add();
 passes.add(variableRenamingPolicy.UNMAPPED);
 passes.add(variableRenamingPolicy.renameVars);
 passes.add(variableRenaming;
 passes.add(markOff);
 if (options.nameRenaming) { passes.add(renameVars);
 passes.add(off);
 passes.add(off).add(renameVars);
 options.variableRenaming = OFF; passes.add(renameVars);
 if (options.nameRenaming) passes.add(renameVars);
 if (options.names) { passes.add(renameVars);
 passes.add(variableRenamingPolicy.UNMAPP);
 if (options.renameVars) passes.add(renameVars);
 passes.add(unrenameVars);
 passes.add(markOff;
 passes.add(variantRenamingPolicy.OFF);
 options.variableRenaming = OFF passes.add(renameVars);
 passes.add(invertVariableRenaming);
 passes.add(invertVariableRenaming;
 passes.add(variantRenamingPolicy.UNMAPP);
 passes.add(off;
 passes.add(variantRenamingPolicy.renameVars);
 if (options.variable) { passes.add(renameVars);
 passes.add(invertVariableRenaming); }
 if (options.names) {
 passes.add(nameUnmappedVariableNames);
 options.variableRenaming. passes.add(renameVars);
 passes.remove;
 passes.add(nameUnmappedVariableNames;
 passes.add(variableRenaming); } else if (options.renameVars) {
 passes.add(variableRenaming, options.renameVars);
 passes.addOff();
 passes.add(variableRenaming); } if (options.nameRenaming == NameRenamingPolicy.UNMAPPED) {
 passes.add;
 passes.addOff;
 passes.add(nameUnmappedAnonymousFunctions);
 passes.add(markOff); }
 passes.add(variableRenamingPostrenameVars);
 if (options.rename) { passes.add(renameVars);
passes.add(renameVars); } else { passes.add(none);
 passes.add(variableRenaming); } if (options.nameRenaming == NameRenamingPolicy.UNMAPPED)
 passes.add(variableRenaming); } if (options.nameRenaming == NameRenamingPolicy.OFF) {
 passes.add(variableRenaming); } else if (options.nameRenaming == NameRenamingPolicy.UNMAPPED)
 passes.add(variableRenaming); } else if (options.nameRenaming!= VariableRenamingPolicy.OFF)
 passes.add(variableRenaming); } else if (options.names) {
 passes.add(variableRenaming); } if (options.nameRenaming!= VariableRenamingPolicy.OFF)
 passes.add(variableRenaming); } if (options.renameVars) {
 passes.add(variableRenaming); } else if (options.nameRenaming == VariableRenamingPolicy.OFF)
 if (options.names!= null) { passes.add(renameVars);
 passes.add(variableRenaming); } else if (options.nameRenaming == VariableRenamingPolicy.OFF) {
 passes.add(variableRenaming); } if (options.nameRenaming == NameRenamingPolicy.NONE) {
passes.add(renameVars) ; options.variableRenaming++;
 passes.add(variantRenamingPolicy.UNKNOWN);
 passes.add(variableRenaming); } else if (options.nameRenaming == NameRenamingPolicy.OFF) {
 passes.add(variableRenamingPolicy.UNKNOWN);
 passes.add(variableRenaming); } else if (options.renameVars!= null) {
 pass.add(off); pass.add(renameVars);
 passes.add(variableRenaming); } if (options.nameRenaming == VariableRenamingPolicy.OFF) {
 passes.add(noVariableRenaming);
 passes.add(invertContextualRenaming;
 passes.add(variableRenaming); } else if (options.nameRenaming == NameRenamingPolicy.UNMAPPED) {
 passes.add(variableRenaming); } if (options.nameRenaming == VariableRenamingPolicy.OFF)
 passes.add(invertContextualRenaming);
 passes.add(variableRenaming); } else if (options.names!= null) { passes.add(options.names); }
 passes.add(variableRenaming); } else if (options.nameRenaming!= VariableRenamingPolicy.OFF) {
 passes.add(variantRenaming); } else if (options.renameVars) {
passes.add(renameVars); } else { passes.add(mark);
 passes.add(variableRenaming); } if (options.names) {
passes.add(renameVars); } else { passes.addAll();
 passes.add(reset);
 passes.add(variantRenaming); } else if (options.renameVars)
 if (options.name) { passes.add(renameVars);
 passes.add(variableRenaming); } else if (options.nameRenaming == NameRenamingPolicy.NONE) {
 passes.add(variableRenaming); } else if (options.renameVars)
 passes.add(variableRenaming.renameVars);
 passes.add(offPass).add(renameVars);
 passes.add(off").add(renameVars);
passes.remove();
passes.add(renameVars); } else { passes.add(name);
 passes.add(variableRenaming); } else if (options.nameRenaming!= NameRenamingPolicy.UNMAPPED)
 passes.add(assignVariableDeclarations);
 if (options.variables) passes.add(renameVars);
 passes.add(variableRenaming); } else if (options.nameRenaming)
 passes.add(markUnnormalized); }
 passes.add(variantRenamingOff);
 passes.add(variableRenaming); } else if (options.name) {
 passes.add(variableRenaming); } else if (options.rename) {
 passes.add(nameUnmappedAnonymousFunction);
 passes.add(markUnnormalized);
 passes.add(variableRenaming); } if (names) {
 passes.add(variableRenamingPolicy.UNMapped);
 passes.add(variableRenaming); } else if (options.renameVar) {
 passes.add(variableRenaming); } else if (options.nameRenaming!= VariableRenamingPolicy) {
 passes.add(variantRenamingPreprocess);
 passes.add(variableRenaming); } if (options.nameRenaming!= VariableNamePolicy.OFF)
 passes.add(markUnmappedVariableNames;
 passes.add(variableRenaming); } else if (options.nameRenaming!= VariableNamePolicy.OFF)
 passes.add(none);
 passes.add(pass).add(renameVars);
 passes.add(variableRenaming); } else if (options.renameVars!= null)
 passes.add(variableRenaming); } if (options.nameRenaming!= VariableRenamingPolicy) {
 passes.add(variableRenaming); } else if (options.nameRenaming!= NameRenamingPolicy.NONE) {
 passes.add(variableRenaming); } else if (options.renameVariableDeclarations) {
 passes.add(nameUnmappedNames);
 passes.add(switchVariables);
 passes.add(variantRenaming); } else if (options.nameRenaming == NameRenamingPolicy.UNMAPPED)
 passes.add(variableRenaming); } if (options.nameRenaming == VariableRenamingPolicy) {
 passes.add(variableRenaming); } else if (options.nameRenaming) {
 passes.add(nameUnmappedVariables);
 passes.add(variableRenaming); } else if (options.nameRenaming == VariableNameRenaming) {
 passes.add(variantRenaming); } else if (options.nameRenaming)
 if (options.name) {
 options.variableRenamingPolicy = OFF; passes.add(renameVars);
 passes.add(variableRenaming); } else if (options.variables!= null) { if (options.names)
 passes.add(variableRenaming).add(renameVars);
 passes.add(variableRenaming); } else if (options.nameRenaming!= null) {
 passes.add(variableRenamingPreprocess.renameVars);
 passes.add(variantRenaming); } else if (options.names) {
 passes.add(nameUnmappedVariableDeclarations);
 passes.add(variableRenaming); } if (options.renameVar) {
 passes.add(noVariableRenaming;
 options.variantRenaming. passes.add(renameVars);
 passes.add(variableRenaming); } if (options.nameRenaming) { if (options.names) {
 passes.add(variantRenaming); } if (options.names) {
 passes.add(off passes.add(renameVars);
 passes.add(noVariableRenaming); }
 passes.add(variableRenaming); } if (options.nameRenaming == VariableNameRenaming) {
 passes.add(nameUnmappedVariable);
 passes.add(markUnnormalized;
 passes.add(nameUnmappedAnonymousFunction;
 passes.add(variantRenaming); } if (names) {
 passes.add(variableRenaming); } if (options.nameChanges) {
 passes.add(variableRenaming); } if (options.renameVariable) {
 options.variantRenaming = OFF passes.add(renameVars);
passes.add(renameVars); } else { passes = [ ] ;
 passes.add(mark);
 options.variableRenaming.add(renameVars);
 passes.add(unrollVariableDeclarations);
 passes.add(variableRenaming); } if (options.name) {
 passes.add(variableRenaming); } if (options.renameVariableDeclarations) {
 pass.add(variableRenaming); } else if (options.names) {
 passes.add(markUnmappedVariableNames);
 passes.add(variableRenaming); } else if (options.nameRenaming == NameRenamingPolicy.REGULAR) {
 passes.add(switchVariableRenaming); }
 passes.add(unmappedVariableNames;
 passes.add(variantRenaming); } else if (options.renameVar) {
 passes.add(variantRenamingPolicy.UNMapped);
 passes.add(variableRenaming); } else if (options.renameVars) { if (options.names) {
 passes.add(unmappedVariableDeclarations);
 passes.add(variableRenaming); } if (options.nameRenaming!= NameRenamingPolicy.OFF) { rename variables.
 passes.addAll();
 pass.add(variableRenaming); } if (options.names) {
 passes.add(variantRenaming); } else if (options.renameVars!= null)
 pass.add(off); } pass.add(renameVars);
 passes.add(variableRenaming); } else if (options.nameRenaming == OFF) {
 passes.add(ops).add(renameVars);
 passes.add(variableRenaming); } else if (options.renameVars!= void 0) {
 passes.add(variableRenaming); } if (options.nameRenaming!= Policy.OFF) {
passes.add(renameVars) if (options.groupSymbols)
 passes.add(switchVariableNames);
 passes.add(off) passes.add(renameVars);
 if (options.namespace) { passes.add(renameVars);
 add(renameVars);
 passes.add(nameUnmappedVariables;
 options.variableRenaming = passes.add(renameVars);
passes.add(renameVars); } else { passes.add(clear);
 passes.add(nameUnmappedVariableNames);
 passes.add(variables.renameVars);
 passes.add(variableRenaming); } else if (names) {
 passes.add(switch);
 passes.add(variableRenaming); } else if (options.nameRenaming!= NameRenamingPolicy.OFF) { rename variables.
 passes.add(variantRenaming); } else if (options.renameVariable) {
 passes.add(replaceVariableDeclarations);
 passes.add(markUnmappedVariableNames); }
 passes.add(variableRenaming); } else if (options.names!= null) { passes.add(names); } } else {
 passes.add(reset;
passes.add(renameVars); } else { passes.add(clean);
 passes.add(variableRenamingPrerenameVars);
 passes.add(_);
 passes.add(invertVariableNaming);
 passes.add(unmappedVariableDeclarations); }
 passes.add(variableRenaming); } else if (options.nameRenaming == NameRenamingPolicy.OFF) { rename variables.
 passes.add(variableRenaming); add(renameVars);
 if (options.variable) passes.add(renameVars);
 passes.add(variableRenamingPolicy.OFF); }
 passes.add(unmappedVariableNames); }
 passes.add(switchVariableNames); }
 passes.add(markUnmappedVariableDeclarations);
 passes.add(variantRenamingPolicy.OFF); }
 pass.add(variableRenaming); } if (names) {
 passes.add(variableRenaming); } if (options.variable) {
 passes.add(cleanVariableNames);
 passes.add(switchVariables); }
 passes.add(markUnnormalized);
 passes.add(cleanVariable);
 options.variantRenaming.add(renameVars);
 if (options.nameChanges) passes.add(renameVars);
 passes.add(variableRenamingPolicy.UNMAPP());
 passes.add(off_renameVars);
 if (options.names) passes.add(renameVars);
 passes.add(removeVariableDeclarations);
 if (options.variable) {
 passes.add(variableRenaming); } else if (options.renameVars == true) {
 pass.add(variableRenaming); } if (options.name) {
 passes.add(remove);
 passes.add(options.variables.renameVars);
 passes.add(none;
 options.variableRenaming && passes.add(renameVars);
passes.add(renameVars) ; } else { passes.add(empty);
 passes.add(variableRenaming); } if (name) {
 passes.add(nameUnmapped);
 passes.add(variablesToUnrenameVars);
 passes.add(variableRenaming); } else if (options.renameVars!= false) {
 if (options.replaceVariable) { passes.add(renameVars);
 passes.add(invertVariableNaming;
 passes.add(unrollVariableNames);
 passes.add(nameUnmappedLocalVariable);
 passes.add(replaceVariableDeclarations;
 passes.add(off'); } passes.add(renameVars);
 passes.add(off()); passes.add(renameVars);
passes.add(renameVars) ; } else { passes.add(switch);
 passes.add(noVariableNames);
 passes.add(replaceVariableDeclarations); }
 pass.add(off); } passes.add(renameVars);
passes.add(renameVars); } else { passes = null ;
 passes.add(variableRenaming); } if (name renaming)
 passes.add(removeVariableMarkers);
 passes.add(replaceVariableNames);
 passes.add(removeVariableDeclarations;
 pass.add(off); passes.add(renameVars);
 passes.add(switchVariables;
 pass.add(unrenameVars);
passes.add(renameVars, options.variableRenaming);
 passes.add(variantRenamingPolicy.UNMAPP());
 passes.add(variantRenamingPostrenameVars);
 passes.add(removeVariableMarkers;
 passes.add(variantRenaming); } if (name) {
 passes.add(variantRenaming.renameVars);
 options.variableRenaming!= OFF } passes.add(renameVars);
 passes.add(replaceVariableNames); }
 passes.add(renameNames); }
 if (options.replace) { passes.add(renameVars);
 passes.add(switchVariableNames);
 passes.add(variantRenaming); } else {
 if (variables) passes.add(renameVars);
 passes.add(variableRename);
 passes.add(unrollVariableNames); }
 passes.add(unmappedrenameVars);
 passes.add(switchVariableNames;
passes.add(renameVars) + options.variableRenaming;
 passes.add(unmap);
 passes.add(unmap;
 passes.add(off-renameVars);
passes.add(renameVars); } else { passes.removeAll();
 options.variablesRenaming.add(renameVars);
 passes.add(variablesPostrenameVars);
 passes.add(unmarkVariableNames);
 pass(renameVars);
 passes.remove(_);
 passes.removeAll;
 passes.add(off.renameVars);
 if (options.switch) {
 passList passes.add(renameVars);
 passes.removeAll();
 passes.add(variantRenamingPolicy.UNMAPP));
 passes.add(mark;
 pass.add(variableRenaming); } if (name) {
passes.add(renameVars); passes.add(groupVariableNames);
 passes.add(removeVariableMarker;
 pass.addAll(renameVars);
 if (options.global) passes.add(renameVars);
 passes.add(variantRenaming); } } else {
 passes.add(invertVariableRenaming); }
 this.variables.add(renameVars);
passes.add(renameVars) if (options.group)
 if (options) passes.add(renameVars);
 passes.add(variantNamingPostrenameVars);
 if (names) { passes.add(renameVars);
 passes.add(less).add(renameVars);
passes.add(variableRenamingPolicy.UNMATCH);
passes.add(renameVars) if (options.groupVariableNames)
 passes.add(unmappedVariableNames); } else {
 passes.add(variablesToRename); } else {
 options.variables.add(renameVars);
passes.add(renameVars); options.variableRenaming = null
 this.variableRenaming.add(renameVars);
 passes.add(switchNames);
 passes.add(variablesToRerenameVars);
 passes.add(remove;
 passList.add(options.renameVars);
 passes.add(noVariableNames;
 passes.add(removal;
passes.add(renameVars); } else { pass = null ;
 passPass.add(renameVars);
passes.add(renameVars); } else { pass = false ;
 passes.add(markUnknown);
passes.add(variableRenamingPolicy.OFFLY);
 passes.add(variableRenamer);
 passes.add(variableRenaming); } else if (names)
 passes.add(invertOrenameVars);
 passes.add(switchNames); }
passes.add(variableRenamingPolicy.OFFNaming);
 if (checkVars)
 options.variableRenamingOff.add(renameVars);
passes.add(variableRenamingPolicy.OFF_ALL);
 if (options.replace) {
 passes.add(markOffVariable);
 options.variableRenamingPass.add(renameVars);
passes.add(renameVars); options.variableRenaming --;
 pass.add(off_renameVars);
 passes.add(cleanVariable;
passes.add(renameVars); } else { passes.addAll;
 if (options). passes.add(renameVars);
 if (variables) {
passes.add(renameVars) ; options.variableRenaming
passes.add(renameVars) if (options.groupSyms)
 passes.add(variableRenaming); } if (name renaming {
 passes.add($);
passes.add(renameVars) if (options.groupAll)
passes.add(renameVars) ; } else { passes.add(); }
 if (names!= null)
 passes.addIgnore(renameVars);
passes.add(renameVars); } else { return passes ;
 passes.addAll;
 options.variableRenamingPolicy.add(renameVars);
 passes.add(pass); add(renameVars);
passes.add(renameVars) if (options.groupNames)
 passes.add(markOff) ;
passes.add(renameVars) ; return passes;
 if (names) {
 passes.add(unmark);
 passes(off);
 passes.remove($);
passes.add(renameVars) if (options.groupVariable)
 if (names changing) {
passes.add(renameVars); options.variableRenaming;
passes.add(renameVars, options.variables);
passes.add(renameVars) if (options.groups)
passes.clear();
passes.add(renameVarsPostprocess);
passes.add(renameVars, options.variableNames);
 passes.add(unmappedVariableRenaming); } else
 if (options.) passes.add(renameVars);
 passes.reset;
passes.add(renameVars) if (options.switch)
 if (names change) {
 if (options) {
passes.add(renameVars); } return passes ;
 passes.addRemaining(renameVars);
 passes.addInline(renameVars);
 passList.add(renameVars);
passes.add(renameVarsWithOldNames);
 } passes.add(renameVars);
passes.add(renameVarsWithNewNames);
passes.add(renameVarsForVariableRenaming);
passes --;
 passes.add(-renameVars);
 passes.markOff;
passes.add(renameVars) + 1;
 passes.addIfNeeded(renameVars);
 this.variables.each(renameVars);
 passes.clear;
 passes.addInOrder(renameVars);
 passes.addRemoval(renameVars);
passes.add(renameVars, options.variableName);
 passes.add(unmappedVariableRenaming); } }
passes.add(renameVars) ; passes.clear();
passes.add(renameVars) ; passes = null;
passes.add(renameVars) ; pass = null;
 if (true) passes.add(renameVars);
 this.variables.remove(renameVars);
 passes(reset);
 passes(renameVars);
 if (names changing)
passes.reset();
 pass(off);
 passes(none);
 this.pass.add(renameVars);
passes.add(renameVarsToNewNames);
passes.add(renameVarsAfterRenaming);
passes.add(renameVars); } return passes ; }
passes.sort();
passes.add(renameVarsWithNewName);
 passes.pop;
 passes(remove);
passes.add(renameVars); pass(options);
 if (switch) {
 switchVariableDeclarations.add(renameVars);
 if (names change)
passes.add(renameVars); }
 "off". passes.add(renameVars);
 options.variableRenaming().add(renameVars);
 options.variableNames.add(renameVars);
 pass.add(renameVars);
 this.ops.add(renameVars);
 passList(renameVars);
 "off" passes.add(renameVars);
 renameVars();
 reset ();
 options.pass.add(renameVars);
passes.add(renameVars, false);
passes.add(renameVarsInPlace);
 if (true)
 clear ();
passes.add(renameVars) ; break ; }
passes.add(renameVarsPerVariable);
passes.add(renameVars) } return passes;
.add(-renameVars);
 this.pass().add(renameVars);
passes.add(renameVars, options.variables));
 options.names.add(renameVars);
passes ++;
 return pass;
passes.add(renameVars) ; return pass;
 if (variable)
 if (false)
passes.add(renameVars) ; break;
 if (options)
 rename variables.
 fails.add(renameVars);
 for (...) passes.add(renameVars);
 finalPass.add(renameVars);
 - passes.add(renameVars);
passes.add(renameVars) + 2;
passes.add(renameVarsOnly);
 cleanup ();
 build(renameVars);
 forEach(); passes.add(renameVars);
 apply(renameVars);
 for now, passes.add(renameVars);
 for now. passes.add(renameVars);
 if necessary. passes.add(renameVars);
passes.add(renameVarsets);
 passes.add('renameVars);
 do nothing.
 globalVariables.add(renameVars);
 final. passes.add(renameVars);
 finalizePass.add(renameVars);
 finalVariablePass.add(renameVars);
 globalVariableNames.add(renameVars);
 return null;
 do nothing }
 return fails;
passes.add(renameVars) break;
 -pass.add(renameVars);
 if necessary.
 return false;
 if (...)
passes.add(renameVars; }
passes.add(renameVarsInPlace());
 final passes.add(renameVars);
 try {
 finalPass().add(renameVars);
 passed.add(renameVars);
 push(renameVars);
 do(renameVars);
.Add(renameVars);
 try:
 try...
 try {}
 } else
 } pass.add(renameVars);
passes.add(renameVars) break }
 finalize.add(renameVars);
 lines.add(renameVars);
 }
