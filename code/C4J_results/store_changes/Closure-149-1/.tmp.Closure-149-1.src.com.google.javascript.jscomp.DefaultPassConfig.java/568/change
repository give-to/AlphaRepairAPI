 passes.add(invertContextualRenaming);
 return passes;
 if (options.invertContextualRenaming)
 if (options.invertContextualRenaming) {
 if (options.invertContextualRenaming!= null) {
 if (options.invertContextual) {
 if (options.invertContextualRenaming!= null)
passes.add(markUnnormalized);
 if (options.contextual) passes.add(invertContextualRenaming);
passes.add();
 If (options.invertContextualRenaming) {
 If (options.invertContextualRenaming!= null) {
 If (options.invertContextualRenaming)
 if (options.invertContextualRenaming!= -1) {
 If (options.invertContextualRenaming!= null)
passes.add(invertContextualRenaming) ; return passes;
 if (options.ignoreContextual) { passes.add(invertContextualRenaming);
 if (options.invertContextualRenaming) { passes.add(invertContextualRenaming); }
 if (options.invertContextualRenaming!= void 0) {
 if (options.invertContextualRenaming) { passes.add(invertContextualRenaming);
 if (options.contextual) { passes.add(invertContextualRenaming);
 if (options.ignoreContextual) {
 if (options.invertContextualRenaming == true)
 if (options.ignoreContextual) passes.add(invertContextualRenaming);
 if (options.invertContextualRenaming) { passes.add(invertContextualRenaming); } else {
passes.add(markUnmappedLocalVariable);
 if (options.invertContextualRenaming) { passes.add(invertContextualRenaming); } } else {
 if (options.invertContextualRenaming!= null) { passes.add(invertContextualRenaming); }
 if (options.contextual)
 if (options.invertContextualRenaming!= null) { passes.add(invertContextualRenaming);
 if (options.invertContextualRenaming == true) {
 if (options.invertContextual)
 if (options.ignore) {
 if (options.contextual) {
passes.add(invertContextualRenamingMarkers);
passes.add(markUnmappedVariableDeclarations);
 if (options.useContextualRenaming) { passes.add(useContextualRenaming);
 if (options.invertContextual) passes.add(invertContextualRenaming);
 if (options.contextualRenaming) passes.add(invertContextualRenaming);
 if (options.contextualRenaming!= VariableRenamingPolicy.OFF)
 if (options.ignoreContextual)
 passes.add(options.invertContextualRenaming);
 if (options.invertContextualRenaming!= VariableRenamingPolicy.OFF)
 If (options.contextual) passes.add(invertContextualRenaming);
 if (options.ignore) { passes.add(invertContextualRenaming);
 If (options.invertContextual) {
passes.add(markUnmappedVariableNames);
 if (options.useContextualRenaming) { passes.add(useContextualRenaming); }
 if (options.contextualRenaming!= VariableRenamingPolicy.ON) {
 if (options.invertContextualRenaming) { pass.add(invertContextualRenaming); }
 If (options.invertContextualRenaming!= -1) {
 if (options.invertContextualRenaming) { pass.add(invertContextualRenaming);
 if (options.contextualRenaming!= VariableRenamingPolicy.OFF) {
 if (options.contextualRenaming == VariableRenamingPolicy.ON) {
 if (options.invertContextualRenaming) { passes.add(invertContextualRenaming); } else
 if (options.ignoreContextualRenaming)
 if (options.contextualRenaming)
 if (options.contextualRenaming == VariableRenamingPolicy.ON) { passes.add(invertContextualRenaming);
 if (options.contextualRenaming == VariableRenamingPolicy.ON) { if (options.invertContextual) {
 pass.add(options.invertContextualRenaming);
 if (options.useContextualRenaming) { passes.add(invertContextualRenaming); }
 If (options.invertContextualRenaming == true)
 If (options.ignoreContextual) { passes.add(invertContextualRenaming);
 if (contextual) { passes.add(invertContextualRenaming);
 if (options.contextualRenaming == VariableRenamingPolicy.ON) { pass.add(invertContextualRenaming);
 if (options.contextualRenaming == ContextualRenamingPolicy.ON) { passes.add(invertContextualRenaming);
 if (options.invertContextualRenaming!== false) {
 if (options.useContextualRenaming) { passes.add(useContextualRenaming); } else {
 pass.add(markUnnormalized);
 if (options.invertContextualRenaming) { pass.add(invertContextualRenaming); } else {
passes.removeAll();
 If (options.invertContextualRenaming == true) {
 if (options.contextualRenaming == ContextualRenamingPolicy.OFF) { passes.add(invertContextualRenaming);
 If (options.ignoreContextual) passes.add(invertContextualRenaming);
 if (options.invertContextualRenaming == VariableRenamingPolicy.OFF)
 if (options.invertContextualRenaming!= false) {
 If (options.contextual) { passes.add(invertContextualRenaming);
 if (options.useContextualRenaming) { passes.add(useContextualLearning);
passes.addAll();
 if (options.useContextualRenaming) { passes.add(useContextualRenaming); } if (options.inline) {
 if (options.invertContextualRenaming!= VariableRenamingPolicy) {
passes.add(undo);
 if (options.invert) { passes.add(invertContextualRenaming);
 if (options.useContextualRenaming) { passes.add(useContextualRenaming); } if (options.ignore) {
passes.add(markUnmappedLocalVariables);
 if (options.invertContextualRenaming == VariableRenamingPolicy.ON)
 if (contextual) passes.add(invertContextualRenaming);
 if (options.contextualRenaming!= VariableRenamingPolicy.ON)
 if (options.ignoreContextualRenaming) { passes.add(ignoreContextual);
 if (options.invertContextualRenaming!= "off") {
 if (options.invertContextualName)
 Passes.add(markUnnormalized);
 if (options.context) passes.add(invertContextualRenaming);
 if (!options.invertContextualRenaming) {
 if (options.switchContextual) { passes.add(invertContextualRenaming);
 if (options.contextualRenaming == VariableRenamingPolicy.ON) { passes.add(renameVars); }
 if (!options.invertContextualRenaming)
 if (options.contextualRenaming == VariableRenamingPolicy.ON) { if (options.contextualRenaming)
 if (options.invertContextualRenaming!= null) { passes.add(invertContextualRenaming); } else
 if (options.ignoreContextualRenaming) { passes.add(ignoreContextualLearning);
passes.add(cleanVariableNames);
 if (options.invertContextualRenaming
passes.add(markUnmappedLocalVariableDeclarations);
passes.add(markUnmappedVariableName);
 if (options.ignoreContextualRenaming) {
passes.add(markUnmappedVariableDeclaration);
passes.add(markUnmappedLocalVariableNames);
 if (options.invertContextualRenaming!= null) { passes.add(invertContextualNames);
 if (options.invertContextualRenaming) { passes.add(invertContextualRenaming); } else if (context)
 Pass.add(markUnnormalized);
 if (options.invertContextualRenaming!= null) { if (options.contextual)
 if (options.invertContextualRenaming!= null) { passes.add(invertContextualName);
 if (options.invertContextualRenaming) { passes.add(invertContextualRenaming); } else { }
passes.add(markUndoMarkers);
 if (options.contextualRenaming == VariableRenamingPolicy.OFF) {
 if (options.invertContextualRenaming!= VariableRenamingPolicy.ON)
passes.add(markUnmappedVariables);
 if (options.useContextualRenaming) { passes.add(useContextualNames);
passes.add(markUndoMarker);
 if (options.invertContextualRenaming) { passes.add(markContextual);
 If (contextual) passes.add(invertContextualRenaming);
 if (options.invertContextualRenaming) { passes.add(invertContextualNaming);
 if (options.invertContextualRenaming) { passes.add(invertCtx); }
passes.add(invertContextualRenamingMarker);
 if (options.useContextualRenaming) { passes.add(useContextualName);
 if (options.useContextualRenaming) { passes.add(useContextual);
 If (options.ignore) { passes.add(invertContextualRenaming);
 if (options.invertContextualRenaming) { pass.add(invertContextualRenaming); } else
 if (options.switchContextualRenaming) {
passes.remove();
 if (options.invertContextualRenaming) { passes.add(invertContextualRenaming); } if (context)
 if (options.contextualRenaming == VariableRenamingPolicy.ON) { if (options.invert) {
 if (options.ignore) passes.add(invertContextualRenaming);
passes.add(remarkUnnormalized);
 if (options.invert) passes.add(invertContextualRenaming);
 pass.add(markUnmappedVariableDeclarations);
 if (options.invertContextualRenaming) { passes.add(invertContextualNames);
 If (options.context) passes.add(invertContextualRenaming);
 pass.add(markUnmappedLocalVariable);
passes.add(undoMarkers);
 if (options.ignoreLocal) {
 if (options.invertContextualRenaming == "true" ) {
passes.add(remark);
passes.add(markUndoMarkers); return passes;
passes.add(removal);
 if (options.invertContextualRenaming!= null) { if (options.ignoreContextual)
passes.add(invertContextualRenaming) ; passes.add(cleanVariableDeclarations);
 if (options.invertContextualRenaming) { passes.add(invertContextualName);
 if (options.invertContextualRenaming!= "false" ) {
 pass.add(markUnnormalized;
 if (options.useContextualRenaming) { passes.add(markContextual);
 if (options.invertContextualRenaming) { passes.add(invertContextualRenaming); } else,
passes.add(markUndo);
 if (options.ignoreContextualRenaming!= null)
 if (options.context) { passes.add(invertContextualRenaming);
passes.add(remove);
passes.add(cleanVariableDeclarations);
passes.add(markUnmappedLocalVariableDeclaration);
passes.add(reset);
passes.add(markAll);
 if (options.useContextualRenaming) { passes.add(useContextualRenaming); } else
 if (options.invertContextualRenaming) { if (options.contextual)
 If (options.ignoreContextual) {
 passes.removeMarkers;
 if (options.invertContextualRenaming!= null) { if (options.ignoreContext)
passes.add(markUnmappedLocalVariableName);
 if (options.useContextual)
 If (contextual) { passes.add(invertContextualRenaming);
 if (options.invertContextualRenaming) { passes.add(invertNames); }
passes.add(invertContextualRenaming) ; passes.add(cleanVariableNames);
 pass.add(markUnmappedVariableNames);
passes.add(undoMarker);
 if (options.switchContextualRenaming!= null)
 if (options.invertContextualRenaming!= null) { if (options.ignore) {
passes.add(clear);
passes.add(markUnknown);
 Passes.add(markUnmappedVariableDeclarations);
 Passes.add(markUnmappedLocalVariable);
 pass.add(markUnmappedLocalVariableDeclarations);
 if (options.reverse) {
passes.add(invertContextualRenaming) ; passes.add(markUnnormalized);
 if (options.useContextualRenaming) { if (options.ignore) {
passes.add(unmarkVariableNames);
 pass.add(markUnmappedVariableDeclaration);
 if (options.contextualRenaming == VariableRenamingPolicy.ON) { passes.add(invertContextualRenaming());
passes.add(clean);
 if (options.contextualRenaming == VariableRenamingPolicy.ON) { pass.add(invertContextualRenaming());
passes.add(markUndoVariable);
passes.add(invertContextualRenaming) ; passes.add(renameVars);
 if (options.invertContextualRenaming) { passes.add(markAll);
 pass.add(markUnmappedLocalVariableDeclaration);
 Passes.add(markUnmappedVariableNames);
passes.add(cleanVariable);
passes.add(invertContextualRenaming) ; passes.add(removeMarkers);
 If (options.ignore) {
 if (invert) { passes.add(invertContextualRenaming);
 passes.add(markUnnormalized;
 if (options.contextualRenaming) add(invertContextualRenaming);
 if (options.invert) {
 if (options.contextual) {add(invertContextualRenaming);
 Passes.add(markUnnormalized;
 pass.add(markUnmappedLocalVariable;
 pass.add(markUnmappedVariableName;
 if (options.ignoreContextualNames)
 pass.add(markUnmappedVariableDeclarations); return pass;
passes.add(markUnused);
 pass.add(markUnmappedVariableDeclarations); return passes;
 pass.add(markUnmappedVariable);
 pass.add(marker.invertContextualRenaming);
passes.add(markUnmappedLocalVariable ($$1"));
passes.add(invertContextualRenaming) ; passes.add(cleanVariables);
 pass.add(markUnnormalizedVariable);
 if (options.ignoreContext)
passes.add(markUnmappedAnonymousFunctions);
 pass.add(markUnmappedVariableName);
 passes.add(removeMarker);
 if (options.contextualRenaming!= VariableRenamingPolicy.OFF),
 passes.add(none);
 pass.add(markUnmappedVariableName); return passes;
 pass.add(markUnmappedVariableName); return pass;
 Pass.add(markUnnormalized;
 if (invertContext)
passes.add(invertContextualRenaming) ; passes.add(renameVariables);
 passes.add(removeMarkers);
 if (contextual)
 pass.add(markUnmappedVariableNames;
passes.add(unmarkLocalVariable);
passes.add(markUnmappedLocalVar);
 pass.add(markUnmappedVariableDeclaration); return pass;
 pass.add(markUnmappedLocalVariableName); return pass;
 pass.add(markUnmappedLocalVariableName); return passes;
 if (options.invertContextualRenaming!= null),
 passes.add(remarkVariable);
 pass.add(removalMarker);
 pass.add(markUndoMarker);
passes.add(invertContextualRenaming) ; pass.add(cleanVariableNames);
 passes.add(remap);
 passes.add(markUnnormalizedVariable);
 if (options.ignoreContextual) { add(invertContextualRenaming);
passes.add(invertContextualRenaming (options.variableRenaming));
passes.add(invertContextualRenaming); passes.add(replaceMarkers);
 pass.removeMarkers;
passes.add(invertContextualRenaming) ; passes.add(removeMarker);
passes.add(markUnmappedLocalVariable ($$1));
passes.add(markUnmappedSymbolicFunctions);
passes.add(invertContextualRenamingMarkers); return passes;
 pass.add(removalMarker;
 pass.add(removalMarkers);
passes.add(markUnmappedLocalVarDeclarations);
 passes.add(markNewName);
 if (contextual) {
passes.add(invertContextualRenaming) ; passes.add(reset);
passes.add(markUnmappedLocalVariable());
 pass.add(markUnmappedLocalVar;
 pass.add(markers.invertContextualRenaming);
passes.add(markUnmappedVariableDeclarationsWithOldNames);
passes.add(invertContextualRenaming) ; passes.add(markAll);
 pass.add(markUnnormalized, _invertContextualRenaming);
 pass.removeMarker;
passes.add(markUnmappedVariableDeclarations); break;
passes.add(invertContextualRenaming) ; passes.add(cleanVariable);
passes.add(markUnmappedVariableDeclarationsWithNewNames);
passes.add(invertContextualRenamingMarker); return passes;
passes.add(invertContextualRenaming) ; passes.add(cleanup);
passes.add(invertContextualRenaming) ; pass. remove ( ) ;
passes.add(markUnmappedVariable);
 passes.add(markVariableNames);
passes.add(invertContextualRenaming); passes.add(unmarkVars);
 pass.add(markUnnormalized");
 add(invertContextualRenaming);
passes.add(invertContextualRenaming); passes.add(unmarkVariables);
 pass.add(marker;
passes.add(invertContextualRenaming) ; passes.add(remark);
passes.add(invertContextualRenaming) ; passes.add(undo);
passes.add(invertContextualRenaming) ; passes.add(markOriginal);
passes.add(markUnmappedLocalVarDeclaration);
passes.add(invertContextualRenaming); passes.add(cleanVars);
 pass.add(mark");
 passes.add(mark");
 if (invert) passes.add(invertContextualRenaming);
 passes.removeMarker;
 Pass.add(options.invertContextualRenaming);
 If (invert) passes.add(invertContextualRenaming);
 pass.undoMarkers;
passes.add(invertContextualRenaming) ; passes.add(mark);
 pass.add(markUnnormalized.invertContextualRenaming);
passes.add(markUnmappedLocalVariable ($$1)));
passes.add(markUnmappedLocalVariableDefinitions);
 pass.add(markUnnormalized,invertContextualRenaming);
 pass.add(markUnnormalized-invertContextualRenaming);
 pass.add(all); pass.add(invertContextualRenaming);
 if (options.invertContextual) add(invertContextualRenaming);
 Passes.add(markUnused);
 if (inspectContext)
 if (contextually) passes.add(invertContextualRenaming);
passes.add(markUnmappedLocalVariable ($$1);
 pass.add(invertContextualRenaming);
 if (options.contextualRenaming) push(invertContextualRenaming);
 passes.add(marker;
 passes.add(removal;
passes.add(markUnmappedLocalVariable (null));
 Passes.add(options.invertContextualRenaming);
 passes.add(remarkVariableNames);
 pass.add(markUnmappedVariableName); pass.remove()();
 If (contextual)
passes.add(invertContextualRenaming) ; passes.add(clear);
 pass.add(remark);
 pass.add(markUnmappedVariableName); pass.remove() ;
passes.add(markUnmappedVariableDeclarationMarker);
 pass.add(markUnmappedVariableNames); pass.remove()();
 pass.add(reset); pass.add(invertContextualRenaming);
 pass.add(markUnmappedUninvertContextualRenaming);
 pass.add(markUnmappedLocalVariable());
passes.add(invertContextualRenamingComments);
 if (all) {
passes.add(markUnmappedLocalVariable (this));
 pass.add(markUnnormalized, --invertContextualRenaming);
 pass.add(markUnnormalizedUninvertContextualRenaming);
passes.add({});
 if (this) {
 pass.add(markUnmappedVariableNames); pass.remove() ;
passes.add(invertContextualRenaming) ; break;
 pass.add(cleanVariableNames;
 If (context) passes.add(invertContextualRenaming);
 Pass.add(markUnnormalized, _invertContextualRenaming);
 If (all) passes.add(invertContextualRenaming);
 pass.add(removal);
 if (ignoreLocal) {
 Passes.add(markUnnormalized,invertContextualRenaming);
 This way, passes.add(invertContextualRenaming);
 pass.add("$$1").add(invertContextualRenaming);
 Passes.add(marker.invertContextualRenaming);
 This is fine. passes.add(invertContextualRenaming);
passes.add(invertContextualRenaming) ; } return passes;
 passes = null;
passes.add(markUnnormalized); }
 Pass.add(marker.invertContextualRenaming);
 Passes.add(markUnnormalized.invertContextualRenaming);
 pass.add(cleanVariableName;
.add(invertContextualRenaming);
 passes.add(uninvertContextualRenaming);
 if (context) passes.add(invertContextualRenaming);
 pass.add(removalMarkers;
 pass.add(markUnmappedVariableDeclarations); }
passes.add(markUndoMarkers());
 pass.addAll(invertContextualRenaming);
 if (contextualOnly)
passes.add(invertContextualRenaming) ; passes.add(cleanVariableDeclarations());
 if (all) passes.add(invertContextualRenaming);
passes.clear();
passes.add(markUnmappedVariableDeclarations); }
 Passes.add(markUnmappedVariableDeclarations());
 Passes.add(markUnnormalized());
passes ++ ;
 pass.add(cleanVariable);
 pass.add(mark).add(invertContextualRenaming);
 Passes.add(markUnmappedVariableDeclarations); }
passes.add(invertContextualRenaming) ; return passes.length;
 pass.add(mark);.add(invertContextualRenaming);
 pass.add(marking).add(invertContextualRenaming);
 passes.add;
 Passes.add(markers.invertContextualRenaming);
 Passes after this point.add(invertContextualRenaming);
 if (!all) passes.add(invertContextualRenaming);
 Pass.add(markers.invertContextualRenaming);
 pass.add(markUnnormalized); }
 pass.add(cleanVariableNames).add(invertContextualRenaming);
 pass.add(pass).add(invertContextualRenaming);
 options.invertContextualRenaming);
 pass.add(markAll).add(invertContextualRenaming);
 pass.setMarker(invertContextualRenaming);
passes.add(invertContextualRenaming) return passes;
 pass.add(this.invertContextualRenaming);
 pass.add(changes).add(invertContextualRenaming);
 pass.add(reset).add(invertContextualRenaming);
 pass.add(markUnmappedinvertContextualRenaming);
passes.add(invertContextualRenamingForLocalVariables);
passes.add(markUndoMarkers); return passes; }
passes.add(invertContextualRenaming (options)));
 Passes.add(invertContextualRenaming);
passes.add(invertContextualRenaming) ; continue;
 return passes.all;
 pass.add(assigner.invertContextualRenaming);
passes.add(renameVars);
 passes.remove;
 pass.undo;
 If this is true,
passes.add(invertContextualRenamingErrors);
passes.add(invertContextualRenaming) ; return passList;
passes.add(invertContextualRenaming) ; return passes; }
 This is fine.
passes.add(invertContextualRenaming) ; return pass;
passes.add(...)
 This way. passes.add(invertContextualRenaming);
 pass.addIf(invertContextualRenaming);
 pass.add(uninvertContextualRenaming);
 This behavior. passes.add(invertContextualRenaming);
passes.add(invertContextualRenamingScenarios);
 This is why passes.add(invertContextualRenaming);
 Passes.add(marker:invertContextualRenaming);
 This means that passes.add(invertContextualRenaming);
 Otherwise, passes.add(invertContextualRenaming);
 fails.add(invertContextualRenaming);
passes.add(invertContextualRenaming (variables)));
 pass.addMarker(invertContextualRenaming);
 This means: passes.add(invertContextualRenaming);
 clearMarkers);
passes.add(markUnmappedVariableDeclarations); } }
 undoMarkers);
 passes.add(-invertContextualRenaming);
 Marker(invertContextualRenaming);
 undoMarker();
passes.add(markUnmappedVariableDeclarations); } else
 return passes.empty;
passes.add(renameLocalNames);
 var names = null;
passes.add(invertContextualRenaming) ; return passes ; } }
 PassBuilder passes.add(invertContextualRenaming);
 if (all)
 pass(invertContextualRenaming);
passes.add(invertContextualRenamingSharks);
mark($1);
 If this happens,
passes++;;
 This is important.
 Marker.invertContextualRenaming);
passes.add(invertContextualRenaming(options)) ;
 pass = null;
 pass.removeMarker(invertContextualRenaming);
 Pass.add(invertContextualRenaming);
 undoMarker);
.markUnnormalized(invertContextualRenaming);
 removeMarker();
 If (all)
passes.add(invertContextualRenaming (variables)) ;
mark($2);
 This way passes.add(invertContextualRenaming);
 renameVariable(this);
 pass.addRemoval(invertContextualRenaming);
 removeMarker($);
. passes.add(invertContextualRenaming);
 undoMarker($);
passes.add(invertContextualRenaming) ; return passes ; } else
 This way,
passes.add(invertContextualRenamingCases);
 MarkAll ( );
 return pass;
 This is why
passes.undo();
 passes(invertContextualRenaming);
 Passes.addIgnore(invertContextualRenaming);
passes.add(invertContextualRenaming) ; pass (options); }
 return passes.remove;
passes.add(invertContextualRenamingRules);
 } else {
 mark(invertContextualRenaming);
 this.pass.add(invertContextualRenaming);
 Passes.addRemoval(invertContextualRenaming);
 This. passes.add(invertContextualRenaming);
 This means:
 This means passes.add(invertContextualRenaming);
clean($);
passes.reset();
 This works.
 markVariable(invertContextualRenaming);
clean();
passes.addAll;
passes.add(invertContextualRenaming) break;
 markChanges(invertContextualRenaming);
 clear();
mark($);
 passes.remove(invertContextualRenaming);
. pass.add(invertContextualRenaming);
 return fails;
 markAll(invertContextualRenaming);
 return null;
. fails.add(invertContextualRenaming);
 passed.add(invertContextualRenaming);
 This behavior passes.add(invertContextualRenaming);
passes.add(invertContextualRenaming) return;
 if(invertContextualRenaming);
.Pass.add(invertContextualRenaming);
 This way pass.add(invertContextualRenaming);
 This way
passes.add(invertContextualRenaming) ; }
passes.add(invertContextualRenamingComments());
 push(invertContextualRenaming);
 This means
 This behavior
 This.
. passed.add(invertContextualRenaming);
 matches.add(invertContextualRenaming);
.js
.
