 exportedNames=
boolean  exportedNames =
boolean preserveAnonymousFunctionNames =
 boolean preserveAnonymousFunctionNames |=
 exportedNames = [ ] ;
boolean  preserveAnonymousFunctionNames = (bool)
 boolean preserveAnonymousFunctionNames = preserveAnonymousFunctionNames=
boolean  exported =
 boolean preserveAnonymousFunctionNames = exportedNames |=
 exportedNames = null;
boolean  preserveAnonymousFunctionNames = preserveAnonymousFunctionNames &&
 boolean preserveAnonymousFunctionNames =!
 boolean preserveAnonymousFunctionNames = exportedNames=
 boolean preserveAnonymousFunctionNames = false &&
 exportedNames = [ ] ; final
 boolean preserveAnonymousFunction=
 boolean preserveAnonymousFunctionNames = true &&
 boolean preserveAnonymousFunctionName = exportedNames |=
boolean  preserveAnonymousNames =
 boolean preserveAnonymousFunctionName = preserveAnonymousFunctionName=
 preserveAnonymousFunctionNames =
 boolean preserveAnonymousFunctionNames exportedNames |=
 boolean preserveAnonymousFunctionNaming |=
boolean  preserveAnonymousFunctionNames =! reservedChars &&
 boolean preserveAnonymousFunctionNames exportedNames=
 final
 String[] exportedNames = preserveAnonymousFunctionNames &&
boolean  preserveAnonymousFunctionNames = (boolean)
 boolean preserveAnonymousFunctionNames = exportedNames &=
boolean  preserveAnonymousFunctionNames =! exportedNames &&
boolean  preserveAnonymousFunctionNames
 exportedNames
boolean  preserveAnonymousFunctionName = preserveAnonymousFunctionName &&
boolean  preserveAnonymousFunctionNames = exportedNames &&
boolean preserveAnonymousFunctionNames  = options.allowAnonymousFunctionNames &&
 int exportedNames = preserveAnonymousFunctionNames &&
 boolean preserveAnonymousFunctionNames = preserveAnonymousNames |=
 boolean options.preserveAnonymousFunctionNames =
boolean preserveAnonymousFunctionNames  = options.useAnonymousFunctionNames &&
 exportedNames = getNames ( root ) ;
boolean  preserveAnonymousFunctionName = (bool)
 boolean preserveAnonymousFunctionNames = exportedNames *=
boolean preserveAnonymousFunctionNames  = options.generateAnonymousFunctionNames &&
 boolean preserveAnonymousFunctionName = exportedNames &=
boolean preserveAnonymousFunctionNames  = options.ignoreAnonymousFunctionNames &&
boolean  preserveAnonymousFunctionNames = preserveAllFunctionNames &&
boolean preserveAnonymousFunctionNames  = options.generatePseudoNames &&
 boolean preserveAnonymousFunctionName = false &&
 CompilerPass createInternal ( compiler, options. renamePrefix, options. generatePseudoNames ) ; final
 String[] exportedNames = preserveAnonymousFunctionNaming &&
 exportedNames = getExportNames ( root ) ;
boolean  preserveAnonymousFunctionNames = (Boolean)
boolean preserveAnonymousFunctionNames  = options.allowAnonymousFunctionNaming &&
 exportedNames = new StringArray ( ) ;
boolean  preserveAnonymousFunctionNames = preserveAnonymousFunctionNames ||
 boolean preserveAnonymousFunctionNames ; preserveAnonymousFunctionNames=
 boolean preserveAnonymousFunctionNames exportedNames *=
 var exportedNames = [ ] ; exportedNames = exportedNames. concat ( prevVariableMap. getNames ( ) ) ;
 boolean preserveAnonymousFunctionName = true &&
 boolean preserveAnonymousFunctionNameExportedNames=
 exportedNames = getNames ( ) ;
 boolean preserveAnonymousFunctionName = preserveAnonymousFunctionNames=
 boolean preserveAnonymousFunctionNames *=
 exportedNames = new StringArray ( reservedChars ) ;
boolean preserveAnonymousFunctionNames  = options.useAnonymousFunctionNaming &&
 boolean preserveAnonymousFunctionNames = false ||
boolean  preserveAnonymousFunctionNames = (int)
 String [ ] exportedNames = reservedChars &&
 exportedNames = "" ;
 var exportedNames = [ ] ; exportedNames [ 0 ] = reservedChars ; exportedNames [ 1 ] = externs ;
 boolean preserveAnonymousFunctionName |=
 var exportedNames = [ ] ; exportedNames = exportedNames. concat ( reservedChars ) ; var prevVariableMap = prevMap ;
 CompilerPass createInternal ( compiler, options. renamePrefix, options. generatePseudoNames ) {
 var exportedNames = [ ] ; exportedNames = exportedNames. concat ( reservedChars ) ; var prevVariableMap = map ;
 exportedNames = getExportNames ( externs ) ;
boolean  preserveAnonymousFunctionNames =! exportedNames ||
 return new VariableMap ( compiler, prevVariableMap, externs, root ) ; }
 String[] exportedNames = null; booleanpreserveAnonymousFunctionNames =
 String exportedNames = options.preserveAnonymousFunctionNames =
boolean preserveAnonymousFunctionNames  =! options.useAnonymousFunctionNaming &&
boolean  preserveAnonymousFunctionNames = preserveFunctionNames &&
 exportedNames = new ArrayList ( reservedChars ) ;
boolean  preserveAnonymousFunctionNames = (true)
 exportedNames = exportNames ( root ) ;
 CompilerPass createInternal ( compiler, options. renamePrefix, options. generatePseudoNames ) { final
 return new VariableMap ( compiler, prevVariableMap, externs, root ) {
boolean preserveAnonymousFunctionNames  =! options.generateAnonymousFunctionNames &&
 CompilerPass createInternal ( compiler, options. renamePrefix, options. generatePseudoNames ) ;
boolean preserveAnonymousFunctionNames  = ( boolean ) preserveAnonymousFunctionNames &&
 var exportedNames = [ ] ; exportedNames = exportedNames. concat ( prevVariableMap. exportedNames ) ;
 var exportedNames = [ ] ; exportedNames = exportedNames. concat ( reservedChars ) ; exportedNames = [ ] ;
 exportedNames = getNames ( externs ) ;
 var exportedNames = [ ] ; exportedNames = exportedNames. concat ( reservedChars ) ; var prevVariableMap = map ; final
 var exportedNames = [ ] ; exportedNames = exportedNames. concat ( prevVariableMap. getNames ( ) ) ; final
 var exportedNames = [ ] ; exportedNames. push ( prevVariableMap. getName ( ) ) ;
 var exportedNames = [ ] ; exportedNames = exportedNames. concat ( prevVariableMap. getNames ( ) ) ; } final
 exportedNames = new ArrayList ( exportedNames ) ;
boolean preserveAnonymousFunctionNames  =! options.useAnonymousFunctionNames &&
 exportedNames = new StringArray ( exportedNames ) ;
 return new VariableMap ( compiler, prevVariableMap, externs, root ) ; final
 exportedNames = new ArrayList ( ) ;
 var exportedNames = [ ] ; exportedNames [ 0 ] = reservedChars [ 0 ] ; var prevVariableMap = prevMap ;
 String [ ] exportedNames = preserveAnonymousFunctionNames =
 exportedNames = getExportNames ( ) ;
 var exportedNames = [ ] ; exportedNames. push ( prevVariableMap. getName ( ) ) ; final
 var exportedNames = [ ] ; exportedNames [ 0 ] = reservedChars [ 0 ] ; exportedNames = [ ] ;
 var exportedNames = [ ] ; exportedNames = exportedNames. concat ( reservedChars ) ; exportedNames = exportedNames. reverse ;
 String[] exportedNames = preserveAnonymousFunctionNames ||
 var exportedNames = [ ] ; exportedNames [ 0 ] = reservedChars [ 0 ] ;
boolean preserveAnonymousFunctionNames  = ( boolean ) exportedNames &&
 return new VariableMap ( compiler, prevVariableMap, externs, root ) ;
 exportedNames = new StringArrayList ( reservedChars ) ;
 var exportedNames = [ ] ; exportedNames = exportedNames. concat ( prevVariableMap. exportNames ) ; } final
 var exportedNames = [ ] ; exportedNames = exportedNames. concat ( reservedChars ) ; exportedNames = exportedNames ;
 exportedNames = getExportNames ( root ) ; final
 boolean preserveAnonymousFunctionNamePolicy =
boolean preserveAnonymousFunctionNames  =! options.allowAnonymousFunctionNaming &&
 var exportedNames = [ ] ; exportedNames [ 0 ] = reservedChars [ 0 ] ; final
 boolean preserveFunctionNames=
 exportedNames = getExportNames ( compiler ) ;
 boolean preserveAnonymousFunctionName =!
 exportedNames = new ArrayList ( reservedChars. length ) ;
 var exportedNames = [ ] ; exportedNames [ 0 ] = reservedChars [ 0 ] ; prevVariableMap = new VariableMap(); final
 exportedNames = new StringArrayList ( reservedChars ) ; final
 var exportedNames = [ ] ; exportedNames = exportedNames. concat ( prevVariableMap. getNames ( ) )
 var exportedNames = [ ] ; exportedNames = exportedNames. concat ( reservedChars ) ; exportedNames = exportedNames ; final
 exportedNames = getNames ( root ) ; final
 exportedNames = new StringArrayList ( ) ;
 var exportedNames = [ ] ; exportedNames = exportedNames. concat ( prevVariableMap. exportedNames ) ; final
 var exportedNames = [ ] ; exportedNames = exportedNames. concat ( prevVariableMap. exportNames ) ; final
 ExportNames exportedNames = [ ] ;
boolean preserveAnonymousFunctionNames  = options.allowAnonymousFunction &&
boolean preserveAnonymousFunctionNames  = options.useAnonymousFunction &&
 boolean preserveAnonymousFunctionNaming =
boolean preserveAnonymousFunctionNames  = options.allowAnonymousNames &&
 var exportedNames = [ ] ; exportedNames [ 0 ] = reservedChars ; exportedNames [ 1 ] = '*' ;
boolean preserveAnonymousFunctionNames  =! options.useAnonymousFunctionNaming ||
 exportedNames = new ArrayList ( ) ; exportedNames. clear ( ) ;
 return new VariableMap ( compiler, prevVariableMap, externs ) ; }
 int exportedNames = options.preserveAnonymousFunctionNames =
 var exportedNames = [ ] ; exportedNames [ 0 ] = reservedChars ; exportedNames [ 1 ] = 0 ; final
 exportedNames = new ArrayList ( reservedChars. length ) ; final
 boolean exportedNames = options.preserveAnonymousFunctionNames =
 var exportedNames = getExportNames ( externs ) ;
 var exportedNames = [ ] ; exportedNames. push ( reservedChars ) ; exportedNames. push ( root ) ; final
 exported =
 exportedNames = [ ] ; exportedNames [ 0 ] = reservedChars [ 0 ] ;
 exportedNames = new StringArray ( reservedChars ) ; final
 boolean preserveAnonymousFunctionNames =!=
boolean preserveAnonymousFunctionNames  = options.ignoreAnonymousNames &&
 exportedNames = new ArrayList ( reservedChars ) ; final
 CompilerPass createInternal ( compiler, options. renamePrefix, options. renameVariable ) ; } final
 var exportedNames = [ ] ; exportedNames. push ( prevVariableMap. name ( ) ) ;
 var exportedNames = [ ] ; exportedNames [ 0 ] = reservedChars ; exportedNames [ 1 ] ;
 exportedNames = [ ] ; exportedNames. push ( prevVariableMap. name ) ; final
 return new VariableMap ( compiler, prevVariableMap, externs ) ; final
 var exportedNames = [ ] ; exportedNames = exportedNames. concat ( reservedChars ) ;
 exportedNames = [ 0 ] ;
 var exportedNames = [ ] ; exportedNames [ 0 ] = reservedChars [ 0 ] + ' ' ;
 var exportedNames = [ ] ; exportedNames = exportedNames. concat ( prevVariableMap ) ; final
 exportNames = [ ] ;
 String[] exportedNames = [null]; boolean _preserveAnonymousFunctionNames =
 return new VariableMap ( compiler, prevVariableMap, externs, root ) ; };
 exportedNames = [ ] ; exportedNames. push ( prevVariableMap. name ) ;
 exportedNames = [ ] ; exportedNames. push ( root ) ; final
 CompilerPass createInternal ( compiler, options. renamePrefix, options. renameVariable, root ) {
 exportedNames = new ArrayList ( ) ; final
 exportedNames = new StringArrayList ( exportedNames ) ;
 var exportedNames = [ ] ; exportedNames [ 0 ] = reservedChars ; exportedNames [ 1 ] =
 exportNames = [ ] ; final
 exportedNames = [ ] ; exportedNames. push ( reservedChars ) ; } final
 exportedNames = new StringArray ( reservedChars ) ; } final
 boolean preserveAnonymousFunctionNames ==
 final boolean options.preserveAnonymousFunctionNames =
 boolean preserveAnonymousFunctionNames exportedNames ~=
 var exportedNames = [ ] ; exportedNames [ 0 ] = reservedChars [ 0 ] + "" ;
 exportedNames = [ ] ; exportedNames. push ( prevVariableMap ) ; final
 var exportedNames = [ ] ; exportedNames. push ( prevVariableMap. name ) ; final
 boolean preserveAnonymousFunctionNames &=
 var exportedNames = [ ] ; exportedNames [ 0 ] = reservedChars [ 0 ] ; } final
 exportedNames = [ ] ; exportedNames [ 0 ] = reservedChars ; } final
 boolean preserveAnonymousFunctionName =
 exportedNames = new StringArrayList ( reservedChars ) ; } final
 var exportedNames = [ ] ; exportedNames. push ( reservedChars, root ) ; final
 var exportedNames = [ ] ; exportedNames [ 0 ] = reservedChars [ 0 ]. value ; final
 exportedNames = [ ] ; } final
 exportedNames = new StringArray ( reservedChars, 0 ) ;
 var exportedNames = [ ] ; exportedNames [ 0 ] = reservedChars [ - 1 ] ;
 exportedNames = new ArrayList ( reservedChars ) ; } final
 String[] exportedNames = reservedChars;
 var exportedNames = [ ] ; exportedNames [ 0 ] = reservedChars. length ; final
 boolean preserveAnonymousName =
 exportedNames = new StringArray(); final
 int exportedNames = 0 ; boolean _preserveAnonymousFunctionNames =
 String [ ] exportedNames = null;preserveAnonymousFunctionNames =
 String[] exportedNames = null; boolean _preserveAnonymousFunctionNames =
 String[] exportedNames = [0]; boolean _preserveAnonymousFunctionNames =
 exportedNames = new StringArrayList ( ) ; final
 var exportedNames = [ ] ; exportedNames. push ( prevVariableMap. name ) ; } final
 int exportedNames = preserveAnonymousFunctionNames ||
 exportedNames = new StringArrayList ( reservedChars, true ) ;
 String [ ] exportedNames ; final booleanpreserveAnonymousFunctionNames =
 exportedNames = new String [ ] ;
 String[] exportedNames = null; boolean!preserveAnonymousFunctionNames =
 int exportedNames = reservedChars ; boolean _preserveAnonymousFunctionNames =
 boolean preserveAnonymousFunctionNames [ ]=
 exportedNames = new ArrayList ( ) ; exportedNames. add ( ) ;
 exportedNames = null; final
 exportedNames = false;
boolean preserveAnonymousFunctionNames  =! reservedChars ||
boolean preserveAnonymousFunctionNames  = options.useAnonymousFunctionName &&
 var exportedNames = [ ] ; exportedNames. push ( reservedChars ) ; } }; final
 exportedNames = new StringArray ( reservedChars ). toString(); final
 exportedNames = new StringArray ( reservedChars. length ) ; } final
boolean preserveAnonymousFunctionNames  =! options.ignoreAnonymousFunction &&
 boolean preserveAnonymousFunctionNames ~=
 exportedNames = { } ;
 preserveAnonymousFunctionNames =!
 exportedNames = new StringArray ( reservedChars, 0, 1 ) ;
 String[] exportedNames = [null]; boolean!preserveAnonymousFunctionNames =
 String[] exportedNames = [null]; boolean unpreserveAnonymousFunctionNames =
 String[] exportedNames = null; boolean unpreserveAnonymousFunctionNames =
 boolean preserveAnonymousFunctionNaming *=
 exportedNames = null ; } final
 String[] exportedNames = []; boolean _preserveAnonymousFunctionNames =
 exportedNames = new StringArray ( reservedChars ) ; } } final
 String[] exportedNames = null; boolean *preserveAnonymousFunctionNames =
 String[] exportedNames; booleanpreserveAnonymousFunctionNames =
 String [][ options.preserveAnonymousFunctionNames =
 exportedNames(); final
 exportedNames = null
 exportNames(); final
 exportedNames = final
boolean  preserve =
boolean preserveAnonymousFunctionNames  = (flag)
 String exportedNames = null; booleanpreserveAnonymousFunctionNames =
 String preserveAnonymousFunctionNames =
 } }; final
 Boolean preserveAnonymousFunctionNames=
boolean preserveAnonymousFunctionNames  = true ||
 final boolean exportedNames=preserveAnonymousFunctionNames =
 boolean exportedNames=preserveAnonymousFunctionNames =
boolean preserveAnonymousFunctionNames  = true ->
 final boolean preserveAnonymousFunction=
 String[][]preserveAnonymousFunctionNames =
 String[] exportedNames;preserveAnonymousFunctionNames =
 String[] exportedNames,preserveAnonymousFunctionNames =
 boolean _preserveAnonymousFunctionNames =
 int exportedNames = 0 ; booleanpreserveAnonymousFunctionNames =
 boolean preserveAnonymousKeys=
 String exportedNames = null ; #preserveAnonymousFunctionNames =
 boolean exportedNames,preserveAnonymousFunctionNames =
 } }; {
 String exportedNames =
 final boolean _preserveAnonymousFunctionNames =
 exportNames =
 bool exportedNames =
 return null;
 Boolean exportedNames =
 boolean!preserveAnonymousFunctionNames =
boolean  preserveAnonymousFunctionNames :=
 exportedNames :=
 static boolean _preserveAnonymousFunctionNames =
boolean  preserved =
 } final
 return map;
 exportNames
 } }; private
 final boolean!preserveAnonymousFunctionNames =
 exportedNames +=
 String exportedNames=preserveAnonymousFunctionNames =
 boolean flags.preserveAnonymousFunctionNames =
boolean  exportedNames
 exported :=
boolean preserveAnonymousFunctionNames  = -
 int exportedNames=
boolean preserveAnonymousFunctionNames  = --
 boolean unpreserveAnonymousFunctionNames =
 options.preserveAnonymousFunctionNames =
 exportedName
boolean  exportedName =
boolean  exportedNames :=
 }; final
boolean  exportNames =
 } };
 } private
 exposedNames=
 exportsNames=
 exported names=
 }; static
 }
boolean preserveAnonymousFunctionNames:
boolean preserveAnonymousFunctionNames=""
