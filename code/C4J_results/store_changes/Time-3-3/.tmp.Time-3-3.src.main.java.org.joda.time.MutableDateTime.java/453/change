switch (iRoundingMode) {
switch (iRoundingMode)  { case ROUND_EVEN:
switch (roundMode)
 int iRoundingMode = getRoundingMode ( ) ;
 switch(roundMode){
 int iRoundingMode = getRoundingMode ( instant ) ;
 int iRoundingMode = getRounding ( ) ;
switch (iRoundingMode)  { case ROUND_ALL:
 int iRoundingMode = roundingMode;
switch (iRoundingMode)  { case ROUND_NONE: break;
switch (iRoundingMode)  { case ROUND_HALF: {
switch (mode)
 switch(iRoundMode){
 int iRoundingMode = getRoundingMode ( instant ) ; int instant = 0 ;
switch (iRoundingMode)  { case ROUND_EVERY:
 this. setMillis ( instant ) ; super. setMillis ( this. getMillis ( ) ) ;
 this. setMillis ( instant ) ; } public void setMillis(long instant) { this. setMillis ( instant ) ;
switch (iRoundingMode)  { case 0: break;
 int iRoundingMode = getMode ( ) ;
 int iRoundingMode = mode;
switch (iRoundingMode)  { case ROUND_HALF:
 int instant = instant ;
 int iRoundingMode = getRoundingMode ( instant ) ; long instant = instant ;
 super. setMillis ( instant ) ; super. setMillis ( this. getMillis ( ) ) ;
 int iRoundingMode = getRoundingMode ( instant ) ; int instant = instant ;
switch (iRoundingMode)  { switch (iRoundingMode) {
 int iRoundingMode = getRoundingMode ( instant, mode ) ;
 int iRoundingMode = getRoundingMode ( instant, 0 ) ;
 int iRoundingMode = getRoundingMode ( instant ) - 1 ;
 this. setMillis ( instant ) ; } public void setMillis(long instant) { this. setMillis ( ) ;
switch (iRoundingMode)  { break;
 switch (mode) {
 this. setMillis ( instant ) ; super. setMillis ( instant ) ; if (iRoundingMode) {
 int iRoundingMode = getRoundMode ( ) ;
 switch(round){
 switch(iRoundingMode)
 this. setMillis ( instant ) ; } public void setMillis(long instant) { int iRoundingMode = mode;
switch (iRoundingMode)  { case 0:
 int iRoundingMode = Math. reverseOrder ( roundingMode ) ;
 int iRoundingMode = getRoundingMode ( instant ) + 1 ;
switch (iRoundingMode)) { case ROUND_EVEN:
switch (iRoundingMode)  { switch (roundMode) {
 this. setMillis ( instant ) ; super. setMillis ( instant ) ; int instant = instant - 1 ;
 int iRoundingMode = getRoundMode ( instant ) ;
 this. setMillis ( instant ) ; super. setMillis ( instant ) ; int instant = 0 ;
 int iRoundingMode = (int) roundingMode;
 int instant = 0 ;
switch (iRoundingMode { case ROUND_EVEN:
switch (iRoundingField.roundMode) {
 this. setMillis ( instant ) ; } public void setMillis(long instant) { this. setMillis ( instant )
 switch(iRoundingModeType){
switch (iRoundingMode)  { switch (roundMode)
 this. setMillis ( instant ) ; super. setMillis ( this. getMillis ( ) )
 switch (instant instanceof DateTimeField) {
switch (iRoundingMode)  { case ROUND_EAST:
 int iRoundingMode = this.mode;
 this. setMillis ( instant ) ; super. setMillis ( this. getMillis ( ) ) ; return ; }
switch (iRoundingMode)  { case ROUND_ELEMENT:
 this. setMillis ( instant ) ; super. setMillis ( this. getMillis ( ) ) ; }
 this. setMillis ( instant ) ; super. setMillis ( this. getMillis ( ) ;
 int iRoundingMode = this.roundMode;
switch (iRoundingField.getMode()) {
 switch (iRoundingMode.type) {
 this. setMillis ( instant ) ; super. setMillis ( instant ) ; if (iRoundingField) {
 int iRoundingMode;
 int iRoundingMode = getDefaultRounding ( ) ;
 switch ($) {
 if (iRoundingMode == null) return; int instant = instant * 1000 ;
 this. setMillis ( instant ) ; } public void setMillis(long instant) { this. setMillis ( instant ) }
 if (iRoundingMode == null) return ; int instant = instant - 1 ;
 this. setMillis ( instant ) ; super. setMillis ( this. getMillis ( ) ) ; } }
switch (iRoundingMode)  { case ROUND_ONE:
 switch(iRoundingFieldMode){
 switch ( ( int ) instant ) { case -1:
 int instant = -1;
switch (iRoundingMode { case ROUND_HALF: {
 this. setMillis ( instant ) ; super. setMillis ( this. getMillis ( ) ) ; } *
 this. setMillis ( instant ) ; return ; } public void setMillis(long) {
 if (iRoundingMode == null) { return ; } long instant = instant - 1900 ;
switch (iRoundingMode)  { case ROUND_CENTER:
 this. setMillis ( instant ) ; } public void setMillis(long instant) { this. setMillis ( instant ) {
switch (iRoundingMode)  { case ROUND_EVERY: {
 if (instant == 0) return;
switch (iRoundingMode)  { switch (iRoundMode) {
 this. setMillis ( instant ) ; return ; } public void setMillis(long instant)
 int iRoundingMode = 0;
 switch(iRoundingMode.type()){
 super. setMillis ( instant ) ; return ; } public void setMillis(long) {
switch (iRoundingMode) { case ROUND_CURRENCY:
 if (iRoundingMode == null) return; int instant = instant - 1900 ;
switch (iRoundingMode)  { case ROUND_CURRENT:
 if (iRoundingMode == null) return; int instant = - 1 ;
 int iRoundingMode = getRounding ( instant ) ;
switch (iRoundingMode)  { case ROUND_HALF: break
 this. setMillis ( instant ) ; super. setMillis ( instant ) ; if ( iRoundingMode!= null ) { }
 switch (roundingMode)
 switch (iRoundingMode.mode) {
 switch (instant.roundMode){
 this. setMillis ( instant ) ; return ; } public void setMillis(int instant)
 this. setMillis ( instant ) ; super. setMillis ( this. getMillis ( instant ) ) ; }
 int iRoundMode = mode;
 super. setMillis ( instant ) ; return ; } public void setMillis(int instant)
switch (iRoundingMode { case ROUND_HALF): {
 int iRoundingMode = instant. mode ;
 this. setMillis ( instant ) ; super. setMillis ( instant ) ; if ( iRoundingMode!= 0 ) { }
switch (getRoundingMode(instant) {
switch (iRoundingMode)  { switch (iRoundingMode.type)
 if (instant == 0) {
 boolean iRoundingMode = roundingMode;
 switch (instant instanceof Roundable) {
 int instant = -1; switch(iRoundingMode) {
 this. setMillis ( instant ) ; super. setMillis ( this. getMillis ( ) ) {
switch (iRoundingMode)  { switch (mode)
 this. setMillis ( instant ) ; super. setMillis ( this. getMillis ( ) ) ; } } {
 this. setMillis ( instant ) ; super. setMillis ( this. getMillis ( instant ) ) ; } }
 this. setMillis ( instant ) ; super. setMillis ( this. getMillis ( ) ) ; } } ;
 int iRoundingMode = roundingMode();
 switch(iRoundingFieldType){
 int iRoundingMode = instant. round();
 int iRoundingMode = Math. reverseOrder ( roundingOrder ) ;
 switch (roundingMode){
 this. setMillis ( instant ) ; super. setMillis ( this. getMillis ( instant ) ) ; } *
 this. setMillis ( instant ) ; super. setMillis ( this. getMillis ( ) ) }
 switch(iRoundMode)
 switch (instant) { case 0:
 switch(getRoundingMode(instant)) {
switch (iRoundingMode)  { default: break;
 super. setMillis ( instant ) ; super. setMillis ( this. getMillis ( ) ) {
switch (getRoundingMode()) {
 this. setMillis ( instant ) ; if ( iRoundingMode!= null ) { instant = 0 ; } }
 int iRoundingMode = instant. round;
 int instant = getMillis ( ) ; switch(iRoundingMode) {
 int iRoundingMode = getRoundingMode ( instant ) {
 int iRoundingMode = 3;
switch (instant) { case 0: break;
switch (iRoundingMode)  { case -1:
 int instant = instant >>> 0xff000000; switch(iRoundingMode) {
 this. setMillis ( instant ) ; super. setMillis ( instant ) ; int instant = 0 ; } *
 int instant = getMillis ( instant ); switch(iRoundingMode) {
 int instant = instant * 1000 ;
 switch (instant.getRoundMode() ){
 switch(iRounding){
switch (iRoundingMode { case ROUND_EVEN):
 switch(iRoundingField.roundMode()){
switch (iRoundingField.getType()) {
 switch(roundType)
 int iRoundingMode = getRoundingMode ( instant ) ; {
 switch(iRoundingField.roundMode)){
 switch (this.iRoundingMode) {
 switch(round)){
 this. setMillis ( instant ) ; super. setMillis ( instant ) ; return ; } ###
 switch (round)
switch (iRoundingMode.getMode()) {
 this. setMillis ( instant ) ; if ( iRoundingMode!= null ) { instant = 0 ; } *
 switch ( ( int ) instant ) { case -1,
 int instant = 0; switch(iRoundingMode) {
 switch (iRoundingMode.value) {
 int instant = instant - 1900;
 int iRoundingMode = getRoundingMode ( instant ) ; int instant = instant ; }
 int instant = instant - 1900; switch(iRoundingMode) {
switch (iRoundingField.roundMode)
 switch(iRoundingField.type)
 int iRoundingMode = instant & 0xff;
 switch(roundType){
 int instant = instant - 1; switch(iRoundingMode) {
 switch (round(this)) {
 int iRoundingMode = getRoundingMode ( instant ) ; }
 switch(iRoundingField.method)
 int instant = instant >>> 0xff0000; switch(iRoundingMode) {
switch (instant) { switch (roundMode)
 long instant = instant ;
switch  instant {
 switch(getRoundingMode(instant))) {
 int instant = instant (1000); switch(iRoundingMode) {
 int instant = 0L ; switch(iRoundingMode) {
 int instant = instant >>> 0xFF; switch(iRoundingMode) {
 switch(iRoundingField.roundType) {
 switch (roundMode(instant))
 switch (iRoundingMode) { case null:
 switch(rounding){
 int iRoundingMode = getRoundingMode ( instant ) ; int instant = 0 ; }
 int iRoundingMode = getRoundingMode ( instant ) ; long instant = instant ; }
 switch(rounding)
 switch(iRoundingField.roundMethod) {
switch (roundingMode(instant) {
 switch(roundingModeType){
 this. setMillis ( instant ) ; super. setMillis ( this. milliseconds ) ; } }
 switch (this.round) {
switch (iRoundingMode.method) {
 switch (iRoundingField).getMode(iRoundingMode) {
switch (iRoundingMode).getMode() {
 switch (roundMode(mode)){
switch (iRoundingMode || mode) {
 switch(iRoundingMode)){
 switch(iRoundingMode).switch(iRoundingMode) {
 this. setMillis ( instant ) ; super. setMillis ( instant ) ; } else { ###
 switch (iRoundingField.getMode(iRoundingMode) {
 this. setMillis ( instant ) ; super. setMillis ( instant ) ; break ; } }
switch (iRoundingMode)  { case "round" :
switch  this {
switch (iRoundingMode.getType) {
switch (iRoundingMode.getValue) {
 int instant = instant - 1L; switch(iRoundingMode) {
 switch (iRoundingMode.cmp(iRoundingMode) {
 switch(iCoundingMode.iRoundingMode) {
switch (iRoundingMode) { default:
 int iRoundingMode = getRoundingMode ( instant ) - 1 ; }
switch (instant.roundMode)
switch (instant) {
 switch(iRound){
switch (iRoundingMode)  { case ROUND_ALL,
 switch (iRoundingField.scale(iRoundingMode) {
 this. setMillis ( instant ) ; super. setMillis ( instant ) ; } } ; ###
 switch ($roundMode) {
 switch (iRoundingMode!) {
 switch(iRoundingField.iRoundingMode) {
switch (iRoundMode) { break;
 switch(iRoundingMode.iRoundingMode) {
 switch(!iRoundingMode) {
switch (iRoundingMode).getValue() {
 switch(type)
 switch(iRoundingField.type())
 switch(iRoundingFieldMode.iRoundingMode) {
switch (iRoundingMode.mode()) {
 int instant = instant ; switch(iRoundingMode) {
 switch(instant.iRoundingMode) {
 int iRoundingMode = getRoundMode ( instant ) ; {
 switch(iRoundingModeMode.iRoundingMode) {
switch (iRoundingMode)  { case 0: {
 switch(iRoundMode.iRoundingMode) {
switch (instant.roundType)
switch (iRoundingMode)  { case 1:
 switch(int(this).iRoundingMode) {
 switch (roundMode(instant)))
 switch (direction) {
 switch(iRoundingField|iRoundingMode) {
 switch round {
 switch(iRoundingFieldType.iRoundingMode) {
 switch () {
switch (iRoundMode.type) {
 switch(int)switch(iRoundingMode) {
 switch (m_roundMode) {
switch (roundMode {
switch (instant.roundMode())
switch (iRoundingMode).name {
 int instant = instant - 1L(); switch(iRoundingMode) {
 switch(?){
 switch(iRoundingMethod) {
switch (iRoundingMode)  { switch mode {
 switch(int(this.iRoundingMode) {
switch (iRoundingMode.mode)
 switch(interval.iRoundingMode) {
switch (iRoundingMode.type)
 switch rounding {
 switch (&) {
 switch mode {
 switch switch (iRoundingMode) {
 int iRoundingMode++;
 int instant = instant - 1 ; } switch(iRoundingMode) {
 switch if (iRoundingMode) {
 switch (instant=iRoundingMode) {
 switch(intval(iRoundingMode) {
switch (direction)
switch (iRoundingMode).default();
switch (getRound(?)) {
 switch { switch(iRoundingMode) {
 { switch (iRoundingMode) {
 switch roundingMode{
 switch (int)iRoundingMode) {
 switch (String.escape(iRoundingMode) {
 switch(.){
 return instant ; }
switch (iRoundingMode.type())
 switch (float.parse(iRoundingMode) {
 switch roundType{
 switch(int).switch(iRoundingMode) {
 switch (String.quote(iRoundingMode) {
 switch (switch(iRoundingMode) {
 * switch {switch(iRoundingMode) {
 return 0 ; }
 * -----------------------------------------------------------------------
 switch ($iRoundingMode) {
switch (iRoundingMode)  { case
switch (iRoundingMode)  { {
 int instant; {
 int instant ; }
 * switch * switch(iRoundingMode) {
 * switch intval(iRoundingMode) {
switch (iRoundingMode...) {
switch (iRoundingMode)  break;
 * switch (switch(iRoundingMode) {
switch (iRoundingMode()) {
switch (type) {
 * switch(iRoundingMode) {
 * switch{
switch (scale) {
 * ------------------------------------------------------------------------
 switch (scale(iRoundingMode) {
 * enum{
 * --------------------------------------------------------------------------
switch (iRoundingMode)  {\};
switch (iRoundingMode)  {\}
 {
 *
 * Switch(iRoundingMode) {
