parseAndIgnoreWhitespace(source,  pos);
 parseAndIgnoreWhitespace(pos);
(source, pos);
 parseAndIgnore(source, pos);
 parse(source, pos);
 parseAndIgnoreSpace(source, pos);
 parseAndIgnoreWhitespace(pos;
 parseAndIgnoreSpace(pos);
 parseAndIgnore(pos);
parseAndIgnoreWhitespace(, pos);
 parseAndIgnoreWhitespaceSource, pos;
 parseAndIgnoreWhiteSpace(source, pos);
parseAndIgnoreWhitespace(source, pos); if (num == null) {
(pos);
 parseAndIgnoreWhitespace().parse(source, pos);
 source, pos;
parseAndIgnoreWhitespace(source, pos, startIndex);
 parseAndIgnoreWhitespaceSource(pos);
 parseAndIgnoreWhitespace(format().parse(source, pos);
 parseAndIgnoreWhitespace source, pos;
 parseAndIgnoreWhitespace(whole, pos);
parseAndIgnoreWhitespace(source, pos); if (num == null)
 parseAndIgnoreWhitespace(format).parse(source, pos);
 parseAndIgnoreWhitespace(num).parse(source, pos);
 parseAndIgnore(pos;
 parseAndIgnoreWhiteSpace(pos);
parseAndIgnoreWhitespace(source, pos); if (num == null) return null;
 parseAndIgnoreWhitespaceSource, pos);
 parseAndIgnoreWhitespace(source);
 parseAndIgnoreWhpace(source, pos);
 Number whole =
 parseAndIgnoreWhpace(pos);
parseAndIgnoreWhitespace(source, pos.getIndex());
 parseAndIgnoreWhitespace(source, pos); if (negative)
 parseAndIgnoreWhitespace(source, pos); while (true)
 parseAndIgnoreWhitespace(num.source, pos);
 parseAndIgnoreWhitespace2(source, pos);
 parseAndIgnoreWhitespaceSource(source);
 source(pos);
 parseAndIgnoreWhitespaceFormat().parse(source, pos);
 parseWhole(source, pos);
 parseAndIgnoreNumeric(pos);
parseAndIgnoreWhitespace(source, pos, num, den);
 parse(source, pos;
 parseAndIgnoreWhitespace(num,source, pos);
 for numerator Number whole = getNumeratorFormat().parse(source, pos); parse whitespace
 parseAndIgnoreWhitespace source, pos);
parseAndIgnoreWhitespace(source, pos, true);
parseAndIgnoreWhitespace(source, pos, false);
 for numerator Number whole = getNumeratorFormat().parse(source, pos); if ( whole == null ) { parse whitespace
 number Number whole = getWhitespaceFormat().parse(source, pos); if ( whole == null ) { parse whitespace
parseAndIgnoreWhitespace(source, pos); if (negative) {
 parseAndIgnoreWhitespace();
 parseAndIgnoreWhitespace, pos;
 parseAndIgnoreWhitespace(), pos;
 parseWhole(pos);
 parseAndIgnoreWhitespace.parse(source, pos);
 parseAndIgnoreNumeric(pos;
 for numerator Number whole = getNumeratorFormat().parse(source, pos);
parseAndIgnoreWhitespace(source,  pos); if (num!= - 1) {
 parseAndIgnoreNonWhitespace(source, pos);
parseAndIgnoreWhitespace(source, pos); while (true) {
 parseAndIgnore ( ) ;
 parseAndIgnoreNumeric(source, pos);
 parseAndIgnoreSpace(pos;
parseAndIgnoreWhitespace(source, pos); if (num!= null) {
 parseAndIgnore (source, pos;
 parseAndIgnoreWhitespaceIfNeeded(source, pos);
 parseAndIgnoreNumericWhitespace(source, pos);
 parseAndIgnoreWhitespace(general).parse(source, pos);
 parseIgnore(source, pos);
 parseAndIgnoreWhitespace(pos, pos);
parseAndIgnoreWhitespace(source, pos); if (num) {
 parseWhitespace(source, pos);
 parseAndIgnoreWhitespaceEnd(source, pos);
 parseAndIgnoreNegative(source,pos);
 parseAndIgnoreWhitespace(source, pos); else {
parseAndIgnoreWhitespace(source, pos); switch (c) {
 parseAndIgnoreWhitespace(unit).parse(source, pos);
 parseAndIgnoreWhiteSpace(pos;
parseAndIgnoreWhitespace(source, pos); if (num!= null)
 for numerator Number whole = getWhitespaceFormat().parse(source, pos); if ( whole == null ) { parse whitespace
 parseAndIgnoreWhitespace pos;
 for numerator Number whole = getNumeratorFormat().parse(pos);
 parseAndIgnoreWhitespace(multiplier, pos);
 number Number whole = getWhitespaceFormat().parse(source, pos); if (whitespace == null)
parseAndIgnoreWhitespace(source, pos); switch (startIndex) {
 parseAndIgnoreNumber(pos);
 parseAndIgnoreWhitespace(non-source, pos);
 parseAndIgnoreThousands(source, pos);
parseAndIgnoreWhitespace(source, pos); if (neg) {
 parseAndIgnoreWhitespace(expr, pos);
 sourceAndPos, pos;
parseAndIgnoreWhitespace(source,  pos); switch (c) { case 1 :
 for numerator Number whole = getNumeratorFormat().parse(source, pos); if ( whole!= null ) { parse whitespace
 parseWhiteSpace(source, pos);
 number Number whole = getWhitespaceFormat().parse(source, pos); if (whitespace!= null)
parseAndIgnoreWhitespace(source, pos); if (num!= null) return num;
 parseAndIgnoreNonWhitespace(pos);
 parseAndIgnoreWhitespace(source, pos); if (negative {
 parseAndIgnoreWhitespace(source, pos); return null; }
parseAndIgnoreWhitespace(source, pos, -1);
 parseAndIgnoreZero(source, pos);
parseAndIgnoreWhitespace(whole, source, pos);
parseAndIgnoreWhitespace(source, pos); switch (num == null) {
parseAndIgnoreWhitespace(source,  pos); if (num!= numerator) {
 parseAndIgnoreCharacters(pos);
parseAndIgnoreWhitespace(source, pos); pos. setIndex ( startIndex ) ;
 parseAndIgnoreWhitespaceForDecimal(source, pos);
 parseAndIgnoreWhitespaceBetween(source, pos);
 parseAndIgnoreWhitespace(num-source, pos);
 parseAndIgnoreNumber(pos;
 parseAndIgnoreWhitespace1(source, pos);
 parseAndIgnoreWhitespace(unit(source, pos);
 parseAndIgnoreNumber(source, pos);
 number Number whole = getWhitespaceFormat().parse(source, pos); if (whitespace == null) {
 parseAndIgnoreComments(pos;
 parseAndIgnoreWhitepace(source, pos);
 number Number whole = getWhitespaceFormat().parse(source, pos); if (whitespace) { whitespace
 parseAndIgnoreWhitespace pos);
 for numerator Number whole = getWhitespaceFormat().parse(source, pos); parse whitespace
 parseAndIgnoreWhitespace(source, pos); } }
 parseAndIgnore ( pos )
 parseAndIgnoreNanosecond(source, pos);
parseAndIgnoreWhitespace(source, pos); if (unit == null)
 parseAndIgnoreSpace(source);
 parseAndIgnoreWhpace(pos;
 for numerator Number whole = getNumeratorFormat ( ).
 number Number whole = getWhitespaceFormat().parse(source, pos); if ( whole == null ) { whitespace
 parseAndIgnoreNumbers(source, pos);
 for numerator Number whole = getWhitespace ( source, pos )
 number Number whole = getWhitespaceFormat().parse(source, pos); if (whitespace == null) return
 for numerator Number whole = getWhitespace ( source, pos ) ; parse whitespace
 parseWithIgnoreWhitespace(source, pos);
 parseAndIgnoreComments(pos);
 number Number whole = getWhitespaceFormat().parse(source, pos); if (whitespace) {
 parseAndIgnoreWhitespace(n))(source, pos);
 parseAndIgnoreWhitespace(transformer, pos);
 parseAndIgnoreWhitepace(pos);
 for numerator Number whole = getNumeratorFormat().parse(source, pos); if ( whole == null ) { break ;
 number Number whole = getWhitespaceFormat().parse(source, pos); if ( whole == null ) { return null ; }
 parseAndIgnoreWhitespace(true)(source, pos);
 parseIgnoreSpace(source, pos);
 parseSource(pos;
 for numerator Number whole = getNumeratorFormat().parse(source, pos); if ( whole == null ) { return null ; }
 parseAndIgnoreWhitespaceInString(source, pos);
 parseAndIgnoreWhitespace(); pos;
 for numerator Number whole = getNumerator ( ).
 parseAndIgnoreWhitespace(source;
 for numerator Number num = getNumeratorFormat().parse(source, pos); if (num == null) { return
 for numerator Number whole = getNumeratorFormat().parse(source, pos); if (total == null) { return
 parseAndIgnoreText(pos;
parseAndIgnoreWhitespace(source, pos); int whole = num. whole ;
 parseAndIgnoreWhites(pos);
 parseAndIgnoreWhitespace()
 for numerator Number whole = getWhitespace ( source, pos ) ; if ( whole == null ) { return null ; } else {
 parseWhiteSpace(pos);
 for numerator Number whole = getWhitespace ( pos ) +
 for numerator Number whole = getNumeratorFormat().parse(source, pos); if ( whole == null ) { break }
 parseAndIgnoreText(pos);
 parseAndIgnoreWhitespace(source, pos); } {
 number Number whole = getWhitespaceFormat().parse(source, pos); if (total == null) { return
 for numerator Number whole = getWhitespace ( ).
 for numerator Number whole = getNumeratorFormat().parse(source, pos); if ( whole == null ) { } parse whitespace
parseAndIgnoreWhitespace(whole, num, pos);
 for numerator Number whole = getNumeratorFormat ( pos ).
 for numerator Number whole = getNumeratorFormat().parse(source, pos); # whitespace
 parseSpace(source, pos);
 parseAndIgnoreWhitespace(source, pos); } ;
 number Number whole = getWhitespaceFormat().parse(source, pos); if (whitespace) return
 parseAndIgnoreWhites(source, pos);
 parseAndIgnoreWhitespace(translator, pos);
 for numerator Number num = getNumeratorFormat().parse(source, pos); if (num == null) { }
 parseAndIgnoreSlash(source, pos);
 for numerator Number whole = getWhitespaceFormat().parse(source, pos); if ( whole == null ) { return null ; }
 parseAndIgnoreWhitespaceCards(source, pos);
 parseAndIgnoreSource, pos;
 number Number whole = getWhitespaceFormat().parse(source, pos); if ( whole == null ) {
 number number whole = getWhitespaceNumberFormat ( ).
parseAndIgnoreWhitespace(source, pos) { if (pos == null) return null;
 for numerator Number whole = getNumeratorFormat().parse(source, pos); parse whitepace
parseAndIgnoreWhitespace(source, pos) { if (num == null) {
 for numerator Number whole = getNumeratorFormat().parse(source, pos) +
 for numerator Number whole, num, den =
 number Number whole = getWhitespaceFormat().parse(source, pos); if (total == null) { }
parseAndIgnoreWhitespace(source, pos, num.intValue());
parseAndIgnoreWhitespace(source, pos, num.doubleValue());
 for numerator Number whole = getWhitespace ( source, pos ) +
 n = getNumeratorFormat().parse(source, pos); if (n == null) { try {
 parseandIgnoreWhitespace(source,pos);
 number number whole = getWhitespaceNumber ( ).
 for numerator Number whole = getNumeratorFormat().parse(source, pos); Parser.
 for numerator Number whole = getWhitespace ( pos ).
 for numerator Number whole, num, denominator =
 for numerator Number whole = getWhitespaceNumber ( source, pos )
parseAndIgnoreWhitespace(source, pos, c);
 for numerator Number whole = getWhitespace ( pos )?
 for numerator Number whole = getWhitespaceNumber ( pos ).
 for numerator Number whole = getNumeratorFormat().parse(source, pos); +
 for numerator Number whole = getWhitespace ( )?
 number Number whole = getWhitespaceNumber ( pos ).
 number Number whole =
parseAndIgnoreWhitespace(source, pos.getIndex(););
 for numerator Number whole = getNumeratorFormat().parse(source, pos); if (total == null) { } else
 for numerator Number whole = getWhitespaceNumber ( pos ) ;
 number Number whole = getWhitespaceFormat().parse(source, pos); if ( whole == null) { return
 source, pos);
parseAndIgnoreWhitespace(source, pos, num, whole, den);
parseAndIgnoreWhitespace(numeratorFormat, source, pos);
parseAndIgnoreWhitespace(source, pos); switch (c) { default :
 for numerator Number whole = getWhitespaceFormat().
 parseAndIgnore(); pos;
parseAndIgnoreWhitespace(source, pos, 0, c);
 for numerator Number whole = getNumeratorFormat().parse(source, pos) -
parseAndIgnoreWhitespace(numerator, source, pos);
 parseIgnoreSpace(pos);
 number number whole = getWhitespaceFormat ( ).
 for numerator Number whole = getNumeratorFormat().parse(source, pos)
 for numerator Number whole = getWhitespace ( pos ) *
 parseAndIgnoreWhitespace(source, pos, pos); }
parseAndIgnoreWhitespace(source, pos, num, whole);
 parseAndIgnoreCharacters(source, pos);
 for numerator Number whole = getWhitespace ( source, pos ) + 1 ;
parseAndIgnoreWhitespace(source, -1);
 for numerator Number whole = getWhitespace ( source, pos ) + 1 *
 parseAndIgnoreWhitespace(src);
 parseButIgnoreWhitespace(source,pos);
parseAndIgnoreWhitespace(source, startIndex);
 for numerator Number whole = getWhitespace ( source, pos ) ; if ( whole == null ) { return null ; } } else
 parse(pos);
 for numerator Number whole = getWhitespaceNumber ( pos ) +
parseAndIgnoreWhitespace(source, pos.getIndex);
 parseAndIgnoreWhitespace(*pos);
 parseWithIgnoreWhitespace(pos);
 for numerator Number whole, Number num =
 for numerator Number whole = getWhitespace ( source, pos ) + 1 +
 for numerator Number whole = getNumberFormat ( ).
 parseAndIgnoreWhitespace(source, pos) ; }
 parseAnd(source, pos);
 for numerator Number whole = getNumeratorFormat().parse(source, pos); int numerator =
 sourceAndPos = pos;
 parseAndIgnoreWhitespace(position);
parseAndIgnoreWhitespace(source, pos, 1);
 parseAndIgnoreWhole(source, pos);
 parseLine(source, pos);
parseAndIgnoreWhitespace(num.doubleValue(), source, pos);
 for numerator Number whole = getNumeratorFormat().parse(pos); +
 for numerator Number whole = getNumeratorFormat().parse(pos)
 for numerator Number whole = getNumeratorFormat().parse(source, pos); if (wh)
 number number whole = getWhitespace ( ).
parseAndIgnoreWhitespace(source, pos, num.shortValue());
parseAndIgnoreWhitespace(source, pos) -> new Fraction(num, pos);
 and numerator Number whole, Number num =
 for numerator Number whole = getWhitespaceFormat().parse(source, pos); +
 for numerator Number whole = getNumeratorFormat().parse(source, pos); parse whitespace:
parseAndIgnoreWhitespace(source, pos, null);
 for numerator Number whole, num =
parseAndIgnoreWhitespace(source, startIndex, pos);
 for numerator Number whole = getNumeratorFormat().parse(source, pos); parse whitespace number
 for numerator Number whole = getWhitespace ( source, pos ) ;
 numerator
 for numerator Number whole = getNumeratorFormat().parse(source, pos); if empty
 for numerator Number whole = getWhitespaceNumber ( source, pos ) +
parseAndIgnoreWhitespace(source, pos) -> new Fraction(num, pos));
 parseIgnoreWhiteSpace(source, pos);
 if (whitespace) { int whole =
 parseOrIgnoreWhitespace(source, pos);
parseAndIgnoreWhitespace(num.intValue, source, pos);
 if (whitespace) { String whole =
parseAndIgnoreWhitespace(source, pos, num.intValue);
 parseText(source, pos);
 for numerator Number whole =
parseAndIgnoreWhitespace(source,  pos); if (num == null) { }
 parseString(source, pos);
 parseAndIgnoreWhitespace(source, pos, false); }
 parseSource, pos;
 for numerator Number whole = getNumeratorFormat().parse(source, pos); if necessary
 parseAndIgnoreWhitespace(source, pos, true); }
parseAndIgnoreWhitespace(numeratorNumberFormat, source, pos);
 parseAndIgnoreWhitespace(pos); }
 for numerator Number whole = getNumeratorFormat().parse(source, pos); if not
 parseandIgnoreWhitespace(pos);
 parseAndIgnoreWhitespace(source, pos, pos); {
 parseWithIgnore(pos);
 parseSource ( );
 for numerator Number whole = getWhitespaceNumber ( source, pos ) ;
 parseAndWhiteSpace(pos;
 for numerator Number whole = getNumeratorFormat().parse(source, pos); + 1
 for numerator Number whole = getNumeratorFormat().parse(pos); -
parseAndIgnoreWhitespace(whole + num, pos);
 if (pos!= null) { parse whitespace
 parseAndIgnoreWhitespace() {
 parseAndIgnoreWhitespace(source, pos, n); }
 number number whole = getWhitespaceNumber ( ) ;
 parseAndIgnoreWhite(source, pos);
parseAndIgnoreWhitespace(source, pos) -> new Fraction(n, d);
parseAndIgnoreWhitespace(source, pos) { if (num == null)
 for numerator Number whole = getNumeratorFormat().parse(source, pos); if {
 for numerator Number whole = getNum ( ).
parseAndIgnoreWhitespace(source, pos, -1, c);
parseAndIgnoreWhitespace(source, initialIndex);
 parseAndIgnoreWhitespace ( source ) {
parseAndIgnoreWhitespace(num.decimals, source, pos);
 if (whitespace) { whole =
 source, pos, whole =
 for numerator Number whole = getWhitespaceNumber ( source, pos ).
parseAndIgnoreWhitespace(source, pos) -> new Fraction(num);
 number number whole = getWhitespace ( )?
 source, pos; int whole =
(source, pos;
 parseAndIgnorePattern(source, pos);
 parseWhitespace(pos);
parseAndIgnoreWhitespace(source, pos, num, startIndex);
 parseAndIgnoreWhitespace(source, pos); {
 sourceAndPosition, pos;
 parseWSP(source, pos);
 number whole =
 parseAndIgnoreWhitespace(source); }
 source = pos;
parseAndIgnoreWhitespace(source, pos) -> new Fraction(n, d));
 for numerator Number whole, num, d =
 int whole =
 parseSpaces(source, pos);
 for denominator Number whole =
 if (whitespace!= null)
parseAndIgnoreWhitespace(source, num, pos);
parseAndIgnoreWhitespace(numerator(source, pos);
 parseNextCharacter(source, pos);
parseAndIgnoreWhitespace(source, pos) -> new Fraction(n);
 parseAndIgnore(source);
 if (whitespace) {
 parseAndIgnoreWhitespace(pos));
 parseAndNormalize(pos);
 parseAndWhitespace(source, pos);
 parseAsIgnoreWhitespace(pos);
 parseLine(pos);
 ignore(source, pos);
parseAndIgnoreWhitespace(num.value(), c, source, pos);
 parseWithIgnore(source, pos);
 (source, startIndex);
 parseWspace(pos);
 if (whitespace == 0)
parseAndIgnoreWhitespace(whole-1, pos);
parseAndIgnoreWhitespace(source, pos) ; } else {
 parseAndIgnoreWhitespace(pos)
parseAndIgnoreWhitespace(getDenominatorFormat, pos);
 parseUntil(source, pos);
parseAndIgnoreWhitespace(source, pos, -1, 1);
 if (whitespace) return
 if (whitespace) { return
 parseAndIgnoreWhitespace(pos); {
parseAndIgnoreWhitespace(source, pos, startIndex, c);
 parseSource(pos);
 source, pos; String whole =
parseAndIgnoreWhitespace(source, pos, num.length(), 1);
parseAndIgnoreWhitespace(source, pos) return new Float ( ) ;
 String whole =
 parseAndIgnore(position);
parseAndIgnoreWhitespace(numeratorFormatParser, source, pos);
parseAndIgnoreWhitespace(numeratorNumberFormat, pos);
 parseNumeric(pos);
 denominator
parseAndIgnoreWhitespace(source, pos) ; } } else {
parseAndIgnoreWhitespace(whole, num, source, pos);
parseAndIgnoreWhitespace(source, pos) { if (pos) {
 parseWithWhiteSpace(pos);
 consume(pos);
parseAndIgnoreWhitespace(numeratorFormatSource, pos);
parseAndIgnoreWhitespace(num, - 1, source, pos);
parseAndIgnoreWhitespace(whole, number, pos);
 parseWithIgnoreWhitespace(source, pos); }
, pos;
 parseWSP(pos);
parseAndIgnoreWhitespace(source, 1, pos);
 Integer whole =
parseAndIgnoreWhitespace(source, pos) ; return num ; }
 parseText(pos);
 parseWitespace(source, pos);
 parseAndIgnoreWhitespace(pos, pos); }
parseAndIgnoreWhitespace(whole - num, source, pos);
parseAndIgnoreWhitespace(source, 0, pos);
 if (whitespace) { whole :=
 number number whole =
 parseNoWhiteSpace(source, pos);
 source, pos); parse numerator
 source, pos); pos =
 parseEnd(pos);
(source);
 parseAndIgnore (, pos);
 parseWithIgnoreWhitespace(source, pos); {
 number int whole =
parseAndIgnoreWhitespace(source, 2, pos);
parseAndIgnoreWhitespace(source, n, pos);
 ignore(pos);
 number number Number whole =
 (or numerator)
 close(pos);
 ignoreWhites(source, pos);
 parse (, pos);
 parseString(pos);
 (, pos);
 for numerator Number num =
parseAndIgnoreWhitespace(source, pos) { if (num == null) }
parseAndIgnoreWhitespace(source, pos, n, d);
parseAndIgnoreWhitespace(num, den, source, pos);
parseAndIgnoreWhitespace(source, pos) { if (num == null) {}
 and numerator number number
parseAndIgnoreWhitespace(numerals, source, pos);
parseAndIgnoreWhitespace(source, pos, n - 1);
parseAndIgnoreWhitespace(num - 1, source, pos);
parseAndIgnoreWhitespace(source, pos) return num ; } }
parseAndIgnoreWhitespace(multiplier, source, pos);
parseAndIgnoreWhitespace(src, pos);
parseAndIgnoreWhitespace(source, pos) return num ; }
parseAndIgnoreWhitespace(source, pos) return new Fraction() {
 advance(pos);
 reset(pos);
parseAndIgnoreWhitespace(0.0, source, pos);
parseAndIgnoreWhitespace(source, pos) return new Fraction() ;
parseAndIgnoreWhitespace(Source, pos);
 source += c;
 consume(source, pos);
 and numerator part number
 ignore c;
 Number whole, num
parseAndIgnoreWhitespace(source, pos) ; } } }
 den =
parseAndIgnoreWhitespace(source, pos) ; } } ;
 Source, pos;
parseAndIgnoreWhitespace(decimal, source, pos);
parseAndIgnoreWhitespace(source, pos) ; } } {
parseAndIgnoreWhitespace(source, -pos);
 return num;
parseAndIgnoreWhitespace(source, pos) ; try {
parseAndIgnoreWhitespace(source, pos) + 1 ;
 Number whole = -
parseAndIgnoreWhitespace(source, pos) ; break ;
 skip(source, pos);
 number Number whole = -
parseAndIgnoreWhitespace(:, pos);
parseAndIgnoreWhitespace(denom, source, pos);
: break;
 and exponent
parseAndIgnoreWhitespace(", pos);
parseAndIgnoreWhitespace(', pos);
parseAndIgnoreWhitespace ( source )
parseAndIgnoreWhitespace(...)
parseAndIgnoreWhitespace(source, pos, endIndex);
parseAndIgnoreWhitespace(dense, source, pos);
 and digits
parseAndIgnoreWhitespace ( ;
parseAndIgnoreWhitespace(src, pos); }
parseAndIgnoreWhitespace(unit, source, pos);
parseAndIgnoreWhitespace(unit, pos);
(position);
 expression
 ignore pos;
 split(source, pos);
parseAndIgnoreWhitespace(source), pos);
parseAndIgnoreWhitespace(source", pos);
parseAndIgnoreWhitespace(2, source, pos);
parseAndIgnoreWhitespace(source(), pos);
parseAndIgnoreWhitespace(pos, pos); {
parseAndIgnoreWhitespace(spec);
parseAndIgnoreWhitespace(number, source, pos);
parseAndIgnoreWhitespace(other, source, pos);
parseAndIgnoreWhitespace(source, pos) {
 $(source, pos);
parseAndIgnoreWhitespace(source); {
 number
parseAndIgnoreWhitespace(source, pos) }
...
parseAndIgnoreWhitespace(position); }
(src, pos);
parseAndIgnoreWhitespace(source, pos) { }
parseAndIgnoreWhitespace(source,  pos)
parseAndIgnoreWhitespace(source, pos) } }
parseAndIgnoreWhitespace(source, pos) } {
parseAndIgnoreWhitespace(source,  position);
parseAndIgnoreWhitespace(source) }
parseAndIgnoreWhitespace(SOURCE, pos);
parseAndIgnoreWhitespace(source, neg);
parseAndIgnoreWhitespace(source, p);
