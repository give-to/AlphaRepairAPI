parseAndIgnoreWhitespace(source, pos);
parseAndIgnoreWhitespace(initialIndex, pos);
parseAndIgnoreWhitespace(pos);
parseAndIgnoreWhitespace(source, initialIndex);
(source, pos);
parseAndIgnoreWhitespace(source, pos, initialIndex);
 parseAndIgnoreSpace(source, pos);
parseAndIgnoreWhitespace(initialIndex, source, pos);
parseAndIgnoreWhitespace(initialIndex);
(pos);
 parseAndIgnoreSpace(pos);
 parseAndIgnore(source, pos);
 parseAndIgnoreWhiteSpace(source, pos);
 parseAndIgnoreWhiteSpace(pos);
 parseAndIgnoreWhitespace(pos;
 parse(source, pos);
 parseAndIgnoreWhitepace(source, pos);
 parseAndIgnoreWhitepace(pos);
parseAndIgnoreWhitespace(source, pos); if (pos!= null)
 parseIgnoreSpace(pos);
 parseIgnoreSpace(source, pos);
 parse(pos);
parseAndIgnoreWhitespace(source, pos); if (pos!= null) {
 parseWhiteSpace(source, pos);
parseAndIgnoreWhitespace(source, pos, true);
 parseAndIgnoreWhitespace(format).parse(source, pos);
 parseAndIgnoreWhitespaceSource, pos;
parseAndIgnoreWhitespace(source, pos); if (pos == null) {
 parseAndIgnoreWhitespace().parse(source, pos);
parseAndIgnoreWhitespace(source, pos); if (source!= null)
 parseAndIgnore(pos);
 parseAndIgnoreWhitespace(source, pos); if (all)
 parseAndIgnoreWhitespaceIn(source, pos);
 parseAndIgnoreWhitespace(source, pos); if (debug)
 parseAndIgnoreWhitespace(source, pos); if (true)
parseAndIgnoreWhitespace(source, pos, false);
 parseAndIgnoreWhitespace(source, pos); try {
 parseAndIgnoreWhitespace(0,source, pos);
 parseAndIgnoreWhitespaceInString(source, pos);
 parseAndIgnoreWhpace(source,pos);
parseAndIgnoreWhitespace(source, pos); if (pos == null) return null;
 parseAndIgnoreWhitespace(parser).parse(source, pos);
parseAndIgnoreWhitespace(source, pos); if (source!= null) {
parseAndIgnoreWhitespace(source, pos); pos. setIndex ( initialIndex ) ;
 parseSpace(source, pos);
 parseAndIgnoreWhitespaceSource(pos);
parseAndIgnoreWhitespace(source, pos); if (pos == null)
 parseAndIgnoreWhitespace2(source, pos);
 parseAndIgnoreWhitepace(pos;
 parseWhole(source, pos);
 parseAndIgnoreWhitespace source, pos;
 parseAndIgnoreWhitespace2(pos);
 parseAndIgnoreWhiteSpace(pos;
 parseAndIgnoreWhitespace(Format).parse(source, pos);
 parseAndIgnoreWhitespaceSource(pos;
 parseAndIgnoreWhitespaceIfNeeded(source, pos);
parseAndIgnoreWhitespace(source, pos.getIndex());
parseAndIgnoreWhitespace(source,  pos); if (initialIndex == 0) {
 parseAndIgnoreWhitespace(this.source, pos);
 parseAndIgnore whitespace(pos);
 parseAndIgnoreWhitespace(0).parse(source, pos);
 source, pos;
 ignoreWhitespace(source, pos;
 parseAndIgnoreWhitespace(initialIndex;
 parseAndIgnoreWhitespace(format().parse(source, pos);
 parseAndIgnoreWhpace(pos);
 parseAndIgnoreWhitespaceInternal(source, pos);
 parseAndIgnoreWhitespace(2*source, pos);
parseAndIgnoreWhitespace(source, pos); if (partial) {
parseAndIgnoreWhitespace(getWholeFormat(), source, pos);
 parseAndIgnoreWhitespace(pos, pos);
 parseWhitespace(source, pos);
 parseAndIgnoreWhitespace(*pos);
parseAndIgnoreWhitespace(source,  pos); pos. setIndex ( 0 ) ;
parseAndIgnoreWhitespace(source, pos); if (source == null) {
parseAndIgnoreWhitespace(source,  pos); if (startIndex == 0) {
parseAndIgnoreWhitespace(source, pos); if (parse) {
parseAndIgnoreWhitespace(source,  pos); if (initialIndex!= 0) {
 parseAndIgnoreWhitespace1(source, pos);
 parseAndIgnoreWhitespace(this,source, pos);
 parseAndIgnoreWhitespace(1,source, pos);
parseAndIgnoreWhitespace(source, pos, pos.getIndex());
 parseAndIgnoreWhite(source, pos);
 parseAndIgnoreWhitespace.parse(source, pos);
 parseAndIgnoreWhitespaceImpl(source, pos);
parseAndIgnoreWhitespace(source, pos); if (pos!= null) return pos;
 parseIgnoreWhiteSpace(source, pos);
 parseIgnore ( pos ) ;
 parseAndIgnoreWhitespaceIntern(source, pos);
 parseWhiteSpace(pos);
 parseIgnoreWhitespace(pos);
parseAndIgnoreWhitespace(source, pos, 0);
 parseWhole(pos);
 parseAndIgnore whitespace(source, pos);
 parseIgnore(source, pos);
 parseIgnore ( source, pos )
 parseIgnoreSpace ( );
 String whitespace = getWhitespace ( source, pos ) ; if ( whitespace == null ) { return null ; }
 parseAndIgnoreSpace(pos;
 parseAndIgnoreWhitespace(), pos);
parseAndIgnoreWhitespace(source, pos); if (all) {
parseAndIgnoreWhitespace(source, pos); if (pos. hasNext ( ) )
 parse (initialIndex, pos);
 parseWhitespace(pos);
 parseAndIgnoreWhitespace("", pos);
 parseAndIgnoreWhitespace(source, pos); if (pos == null) { return null; }
 parseAndIgnoreWhites(source, pos);
 parseAndIgnoreWhitespaceFirst(source, pos);
 parseAndIgnoreWhitespaceFromString(source, pos);
 ignoreWhitespace(source, pos, true;
 parseAndIgnoreWhitespaceInFirstLine(source, pos);
 parse (source, pos); if (pos!= null) {
 ignoreWhitespace(source, pos);
 ignoreWhitespace(pos, initialIndex;
 parseAndIgnoreWhitespace(source, pos); if (all {
 parseAndIgnore whitespace(pos;
 parseWithIgnoreWhitespace(source,pos);
 parseAndIgnore ( source, pos )
 parseAndIgnoreWhitespaceFromSource(source, pos);
parseAndIgnoreWhitespace(source, pos) if (pos == null) { return ; }
 parseAndIgnoreWhitespaceIfExpected(source, pos);
 parseAndIgnoreWhitespace(, pos);
 source = source;
 parserAndIgnoreWhitespace(source,pos);
 parseAndIgnoreWhitespace(0)(source, pos);
 parseIgnoreWhitespace(pos;
 parseAndIgnoreWhitespace(source, pos); if (pos == null) { return null }
 parseAndIgnoreLine(pos);
 parseAndIgnoreWhitespace(source, pos); if (pos == null) { return null;
parseAndIgnoreWhitespace(source, pos); if (pos!= null) return null;
 String whitespace = getWhitespace ( source, pos ) ; if ( whitespace!= null ) { return null ; }
 parseAndIgnoreWhitespaceForDecimal(source, pos);
 parseAndIgnoreWhites(pos);
 parseIgnoreWhiteSpace ( );
 parseAndIgnoreWhite(pos);
 splitAndIgnoreWhitespace(source,pos);
 parseAndIgnoreWhitespace(source, pos); if (true){
 ignoreWhitespace(source, pos); try {
parseAndIgnoreWhitespace(source, pos, 0, 0);
 String whitespace = getWhitespace ( source, pos. getIndex ( ) ) ; if ( whitespace == null ) return null ;
parseAndIgnoreWhitespace(source, pos) if (pos!= null) { return ; }
parseAndIgnoreWhitespace(source, pos, null);
 int startIndex =
 parseAndIgnoreWhitespace ();
parseAndIgnoreWhitespace(source, pos, 0, 1);
 parseAndIgnoreWhitespace(source, pos); if (pos == null) { return
 String whitespace = getWhitespace ( source, pos. getIndex ( ) ) ; if ( whitespace == null ) { return }
parseAndIgnoreWhitespace(source, pos) ; if (initialIndex > 0) {
 String whitespace = getWhitespace ( source, pos. getIndex ( ) ) ; if ( whitespace == null ) { continue }
parseAndIgnoreWhitespace(source, pos) ; return new Fraction ( ) ;
 parseIgnoreSpace ( pos )
 splitAndIgnoreWhitespace(pos);
parseAndIgnoreWhitespacePos();
 parseAndIgnore(pos;
 parseAndIgnoreWhitespace(source, pos); if (pos!= null) { return null; }
 String whitespace = getWhitespace ( source, pos ) ; if ( whitespace!= null ) { return whitespace ; }
 parseAndIgnoreWhitespace(source, pos); if (pos!= null) { parse whitespace
 parseAndIgnoreText(pos);
 String whitespace = getWhitespace ( source, pos. getIndex ( ) ) ; if ( whitespace == null ) { return ;
 parseIgnoreWhitespaceSource(pos;
 parseAndIgnoreWhitespace(source, pos); if (initialIndex == -1)
 parseWithIgnoreWhitespace(pos);
 String whitespace = getWhitespace ( source, pos. getIndex ( ) ) ; if ( whitespace == null ) { return null
 parseAndIgnoreWhitespace(source, pos); if (pos == null) { return null};
 ignoreWhitespaceSource(pos;
 parseAndIgnoreWhitespace(source, pos); if (pos!= null) {
 parseAndIgnoreWhitespace(source);
 parseAndIgnoreWhitespace(source, pos); if (initialIndex == -1) return
 parseAndIgnoreWhitespace(source, pos); if (pos == null) { }
 parseIgnoreWhiteSpace(pos);
 parseAndIgnoreWhitespace(source, pos); if (initialIndex == 0) { return
 parseAndIgnoreWhitespace(source, pos); if (initialIndex == 0) { return null }
 parseAndIgnoreWhitespace(source, pos); if (pos == null) return
 parseAndIgnoreWhitespace(source, pos); if (initialIndex == 0) { return null;
 if (pos == null) { return null; } if (pos == null) { return null; } parse whitespace
parseAndIgnoreWhitespace(source, pos) if (pos == null) { return null }
 ignoreWhitespace(source, initialIndex,pos);
 parseAndIgnoreWhitespace(source, pos); if (startIndex == 0) {
parseAndIgnoreWhitespace(source, pos, 0, true);
 parseSpace(pos);
parseAndIgnoreWhitespace(source, pos, "0");
 parseAndIgnoreWhitespace(source, pos); if (pos == null) {
 parseAndIgnoreWhitespace(source, pos); if (initialIndex == 0) return
 parseAndIgnoreWhitespace(source, pos); if (pos == null) { } else
 startIndex = pos.getIndex(); if (startIndex == -1) { return
 parseAndIgnoreWhitespace(source, pos); if (startIndex == 0) { return
 parseAndIgnoreWhitespace(source, pos); if (initialIndex == 0)
 parseAndIgnoreText(source, pos);
 parseAndIgnoreWhiteWhitespace(source, pos);
 String whitespace = getWhitespace ( source, pos. getIndex ( ) ) ; if ( whitespace == null ) { return
 ignoreWhitespace(source, pos); if (all)
 parseAndIgnoreWhitespace(source, pos); if (initialIndex == 0) { }
 parseAndIgnoreWhitespace(source, pos); if (no whitespace) {
 parserAndIgnoreWhitespace(pos);
parseAndIgnoreWhitespace(source, pos) ; return new Fraction ( ) ; }
 if (pos == null) { return null; }
 ignoreWhitespace(source, pos); if (true)
 parseAndIgnoreEmpty(pos);
 parseandIgnoreWhitespace(source, pos);
 parseandIgnoreWhitespace(pos);
 parseAndIgnoreLine(source, pos);
 ignoreWhitespace(pos;
 parseAndIgnoreEmpty(source, pos);
 String whitespace = getWhitespace ( source, pos. getIndex ( ) ) ; if ( whitespace == null ) return null
 parse (initialIndex);
 startIndex = pos.getIndex(); if (startIndex == -1) return null
 String whitespace = getWhitespace ( source, pos. getIndex ( ) ) ; if ( whitespace == null ) return ;
 parse (source, pos;
 int startIndex = 0;
 if (pos == null) { return null; } if (pos!= null) { return pos; } parse whitespace
 if (initialIndex < 0) { return null; }
 String whitespace = getWhitespace ( source, pos. getIndex ( ) ) ; if ( whitespace!= null ) { return
 ignoreWhitespaceSource = true;
 startIndex = pos.getIndex(); if (startIndex == 0) { null }
 String whitespace = getWhitespace ( source, pos ) ; if ( whitespace == null ) { return null ; } String
 String whitespace = getWhitespace ( source, pos ) ; if ( whitespace == null ) { return null ; } boolean
 if (pos == null) { return null; } parse whitespace
 parseAndIgnoreWhitespace(source, pos); try:
 if (pos == null) { return null; } if (pos == null) { return null; } else {
 parseString(source, pos);
 parseAndIgnoreWhitespace(source, pos); } {
 startIndex = pos.getIndex(); if (startIndex == 0) { return }
 parseAndIgnoreWhpace(source, pos); if (pos == null) { return null; } else {
 split(source, pos);
parseAndIgnoreWhitespace(source, pos); return null ; } ;
 parseWS(source, pos);
 startIndex = pos.getIndex( );
 if (initialIndex == 0) { return null; }
 parseAndIgnoreWhitespace(source, pos); try...
 parseIgnoreWhites(source, pos);
parseAndIgnoreWhitespace(source(pos, initialIndex);
parseAndIgnoreWhitespace(startIndex, pos);
 parseAndWhitespace(source, pos);
 String whitespace = getWhitespace ( source, pos ) ; if ( whitespace == null ) { return null ; } int
 parseWhitespace ( );
 parseSource(pos);
 if (startIndex == 0) { return null; }
 parseWitespace(pos);
 parseIgnoreText(pos);
 String whitespace = getWhitespace ( source, pos ) ; if ( whitespace!= null ) { return null ; } boolean
 parseWithIgnore(source, pos);
 parseAndIgnoreWhitespace(source, pos); if (pos == null) { return null; } else
parseAndIgnoreWhitespace(source, pos, 1);
parseAndIgnoreWhitespace(source, pos) if (pos!= null)
 parseIgnoreWhite(pos);
 if (pos == null) { return null ; } if (pos!= null)
parseAndIgnoreWhitespace(source, pos) ; if (partial == null)
 startIndex = pos.getIndex(); if (startIndex == -1) { }
 String whitespace = getWhitespace ( source, pos ) ; if ( whitespace == null ) { return null ; };
 parseWhpace(source, pos);
 parseWhitespace (, pos);
 parseText(source, pos);
 if (pos == null) { return null }
 if (source == null) { return null; } parse whitespace
parseAndIgnoreWhitespace(numeratorFormat, source, pos);
 int ws =
parseAndIgnoreWhitespace(source, pos); return null ; } }
 parseIgnoreWhite(source, pos);
 splitAndIgnoreSpace(pos);
parseAndIgnoreWhitespace(0.0, source, pos);
 parseLine(source, pos);
 if (no whitespace) { return null; }
parseAndIgnoreWhitespace(source, pos, initialIndex + 1);
 if (pos == null) { return null;
parseAndIgnoreWhitespace(source, pos, startIndex, -1);
 int num;
 parseAndIgnoreWhpace(source, pos); if (pos!= null) { return pos; } else {
 String whitespace = getWhitespace ( source, pos ) ; if ( whitespace == null ) { return null } String
 if (initialIndex > 0) {
parseAndIgnoreWhitespace(source, 0, pos);
 if (pos == null) { return null; } if (pos == null) { return null; } parse whitespaces
 stripWhiteSpace(source,pos);
 if (pos == null) { return null ; } if (pos == null)
 char startIndex = 0;
 parseString(pos);
 source(pos);
 ignore(source, pos);
 if (pos!= null) { parse whitespace
parseAndIgnoreWhitespace(getFirstCharacter(...), source, pos);
parseAndIgnoreWhitespace(source[initialIndex], pos);
 ignoreSpace(source, pos);
parseAndIgnoreWhitespace(getFullFormat().parse, source, pos);
 source = "";
 String whitespace = getWhitespace ( source, pos ) ; if ( whitespace == null ) { return null } boolean
 if (initialIndex == 0) { return null }
 stripWhitespace(initialIndex,pos);
 if (source == null) { return null ; } if (source!= null)
 if (initialIndex < 0) { return null }
parseAndIgnoreWhitespace(source, pos, "0x");
 if (pos!= null) { return null; } parse whitespace
 parseIgnorespace(source, pos);
 parseIgnoreWhitepace(source, pos);
 if (no whitespace)
 if (initialIndex < 0) {
 if (initialIndex == 0) { return null;
 pos = initialIndex;
 parseAndIgnoreWhitespace(source, pos)
parseAndIgnoreWhitespace(getWholeNumberFormat, source, pos);
parseAndIgnoreWhitespace(getSingleFormat().parse, source, pos);
 if (pos == null) { return null; } else {
parseAndIgnoreWhitespace(source, startIndex, pos);
 parseAndIgnoreWhitespaces2(source, pos);
 splitAndIgnoreSpace(source, pos);
parseAndIgnoreWhitespace(source, pos, 0, initialIndex);
 parseAndIgnorepace(source, pos);
 if (initialIndex < 0) { return
 parseSource ( );
parseAndIgnoreWhitespace(source, pos.getIndex);
 parseAndIgnoreWhitespace(source, pos, true); {
 if (no whitespace) { return null }
 parseAndIgnoreWhitespace(source, pos); try { {
 if (pos == null) { return null; } try {
 if (pos == null) { return null; } if (pos) {
 int whitespace =
 parseAndIgnoreWhitespace(source, pos, false); {
 parseIgnorepace(source, pos);
 if (initialIndex == 0)
 if (initialIndex < 0) return
 if (pos == null) { return null; } if (pos)
parseAndIgnoreWhitespace(source, 0.0, pos);
 if (initialIndex == 0) {
 ignoreWhiteSpace(source, pos);
 if (pos == null) { return null; } boolean
 if (initialIndex == 0) { return
 parseAndIgnoreWhitespace(source, pos, 0); {
 if (initialIndex > 0)
 if (no whitespace) {
 if (no whitespace) return
parseAndIgnoreWhitespace(source, pos, startIndex + 1);
 whitespace(source, pos);
 if (pos!= null) {
 if (pos == null) { return null; } String
 whitespace
 parseAndIgnoreWhitespace(source, pos); try { }
 if (pos == null) { return
 ignoreWhitespace(source, pos); if (all {
 pos.reset ( );
parseAndIgnoreWhitespace(getWholeFormat, source, pos);
 if (startIndex == 0) { return null; } String
 if (pos == null) { return null; } if parse whitespace
 ignoreWhitespace(source, pos); if (true){
parseAndIgnoreWhitespace(source, whole, pos);
 if (initialIndex == 0) { return null; } String
 if (no whitespace) { return null;
parseAndIgnoreWhitespace(0.0, pos);
 if (initialIndex < 0) { }
 if (pos == null) { return null; } if (pos null)
 if (startIndex == 0) { return null; } boolean
 if (initialIndex < 0) return null
 parseAndIgnoreWhitespace(pos)
 if (pos == null) { return null; } if (startIndex)
 stripSpace(source, pos);
 if (pos == null) { return null; } if (!pos)
 if (pos == null) { return null; } if (empty) {
parseAndIgnoreWhitespace(numeratorFormat, pos);
 if (startIndex == 0) { return null; } else {
parseAndIgnoreWhitespace(source, 0, 0, pos);
 if (source == null) { return null; } if (source)
 ignoreSpace(pos);
 if (initialIndex < 0) break;
 if (pos == null) { return null; } parse whitespaces
parseAndIgnoreWhitespace(src, pos);
 ignoreWhitespace(source, pos); try:
 parseWitespace(source, pos);
parseAndIgnoreWhitespace(wholeNumberFormat, pos);
parseAndIgnoreWhitespace(1.0, source, pos);
parseAndIgnoreWhitespace(0, 0.0, pos);
parseAndIgnoreWhitespace(numerator, source, pos);
parseAndIgnoreWhitespace(string, initialIndex);
parseAndIgnoreWhitespace(0, 0, 0, pos);
parseAndIgnoreWhitespace(source, pos, initialIndex, 0);
 char start = initialIndex;
parseAndIgnoreWhitespace(0, initialIndex, source, pos);
parseAndIgnoreWhitespace(whole, source, pos);
 for fraction Number fraction =
parseAndIgnoreWhitespace(source, pos) { return null; }
 source, pos);
 ignoreWhites(source, pos);
parseAndIgnoreWhitespace(stringSource, pos);
 skip(source, pos);
, num;
parseAndIgnoreWhitespace(source, 0, 1, pos);
parseAndIgnoreWhitespace(0, 0, source, pos);
parseAndIgnoreWhitespace(source, pos, pos.toString());
 parseWhites(source, pos);
 int start = 0;
 parseWSP(pos);
parseAndIgnoreWhitespace(source, pos, pos.getIndex(););
 processSpace(pos);
parseAndIgnoreWhitespace(0x00, source, pos);
parseAndIgnoreWhitespace(source, pos, 0, 0, 0);
 int nws =
 number int whitespace =
, invalid expression Number num =
 parseText(pos);
parseAndIgnoreWhitespace(source, pos) { return null;
parseAndIgnoreWhitespace(separator, source, pos);
 int start = pos;
 pos = null;
parseAndIgnoreWhitespace(wholeNumberPart, pos);
 stripIgnoreWhitespaceOnly(source, pos);
, invalid expression Number whole =
 ignore whitespace(source, pos);
parseAndIgnoreWhitespace(string, pos); try {
parseAndIgnoreWhitespace(0x1F, source, pos);
 int n =
parseAndIgnoreWhitespace(source, pos, 0.0);
(source);
(initialIndex);
parseAndIgnoreWhitespace(start, pos);
 int wholeIndex =
 for fraction Number num =
parseAndIgnoreWhitespace pos);
parseAndIgnoreWhitespace(0x0a, source, pos);
parseAndIgnoreWhitespace pos ;
parseAndIgnoreWhitespace(source, pos, -1);
 for the whole part of number
parseAndIgnoreWhitespace(source, pos) ; do {
 reset(pos);
 int index;
parseAndIgnoreWhitespace(source, pos) { try {
parseAndIgnoreWhitespace(source, pos) ; return null ; }
 int w =
 skipSpace(source, pos);
 int num =
 for the whole number part.
 consume(pos);
 in first character
 number int whitespaceNumber
 for whole number part.
 skip(pos);
 int n;
 init(pos);
 int i;
parseAndIgnoreWhitespace ( ;
 without exponent
parseAndIgnoreWhitespace(source, pos) ; if ( {
 trim(source, pos);
parseAndIgnoreWhitespace(source, pos); {
parseAndIgnoreWhitespace(source, pos) ; if ( )
 for fraction
parseAndIgnoreWhitespace(null, source, pos);
parseAndIgnoreWhitespace(source, pos) ; if (...)
 in first char
parseAndIgnoreWhitespace ( )
 before exponent
 first
 for whole
parseAndIgnoreWhitespace(startIndex);
parseAndIgnoreWhitespace(string, pos);
parseAndIgnoreWhitespace(source, pos) ; } ;
parseAndIgnoreWhitespace(text, pos);
parseAndIgnoreWhitespace(newPos);
parseAndIgnoreWhitespace(:, pos);
parseAndIgnoreWhitespace(InitialIndex, source, pos);
parseAndIgnoreWhitespace(empty, source, pos);
parseAndIgnoreWhitespace(startIndex, source, pos);
(position);
parseAndIgnoreWhitespace(source", pos);
parseAndIgnoreWhitespace(pos); {
parseAndIgnoreWhitespace(string, pos); {
parseAndIgnoreWhitespace(src, pos); {
parseAndIgnoreWhitespace(pos, pos); {
parseAndIgnoreWhitespace(text, pos); {
parseAndIgnoreWhitespace ( pos ) {
parseAndIgnoreWhitespace(position);
 characters
parseAndIgnoreWhitespace(noSpace, source, pos);
parseAndIgnoreWhitespace(source, pos, startingIndex);
parseAndIgnoreWhitespace(source, InitialIndex);
parseAndIgnoreWhitespace(newLine, source, pos);
 string
 only
parseAndIgnoreWhitespace(source, newPos);
parseAndIgnoreWhitespace(source, newIndex);
parseAndIgnoreWhitespace ( source ) {
parseAndIgnoreWhitespace(source, pos) {
parseAndIgnoreWhitespace(src);
parseAndIgnoreWhitespace(InitialIndex, pos);
 $(source, pos);
parseAndIgnoreWhitespace(initIndex, pos);
(Source, pos);
(string, pos);
parseAndIgnoreWhitespace(newLine, pos);
 space(source, pos);
parseAndIgnoreWhitespace(source, pos) ; }
parseAndIgnoreWhitespace(source,  pos));
parseAndIgnoreWhitespace(source, pos) { }
parseAndIgnoreWhitespace(source); {
parseAndIgnoreWhitespace(pos)();
parseAndIgnoreWhitespace(source,  position); {
parseAndIgnoreWhitespace(source;)
parseAndIgnoreWhitespace(source;");
parseAndIgnoreWhitespace(source, pos;)
parseAndIgnoreWhitespace(Source, pos);
parseAndIgnoreWhitespace(source, pos;");
parseAndIgnoreWhitespace(spec);
parseAndIgnoreWhitespace(source, position);
parseAndIgnoreWhitespace(source, p);
parseAndIgnoreWhitespace(source, neg);
