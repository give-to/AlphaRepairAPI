int startIndex = pos.getIndex();
 pos.getIndex();
 startIndex = pos.getIndex();
int startIndex  = pos. getErrorIndex ( ) ;
int startIndex = pos.index();
 start = pos.getIndex();
 char c;
int  startIndex = initialIndex ;
int  startIndex = 0;
int startIndex =  pos. getErrorIndex ( ) - 1 ;
int startIndex = pos. index ;
 char startIndex = 0;
 char startIndex = pos.index();
 char startIndex = initialIndex;
int startIndex =  pos. getErrorIndex ( ) + 1 ;
 char startIndex = getIndex();
 char startIndex = pos.getIndex();
int startIndex = pos.getIndex() - 1;
 = pos.getIndex();
 char startIndex = pos.getErrorIndex();
int startIndex = pos.getIndex(); int endIndex = pos.getIndex();
 int startIndex = -pos.getIndex();
int startIndex = pos.getErrorIndex(); while (true) {
 char startIndex = pos.index;
 Char startIndex = pos.getIndex();
int startIndex = pos.getIndex(); if (startIndex == - 1) {
int startIndex = pos.getErrorIndex(); if (startIndex) {
int startIndex = pos.getIndex(); int n = pos.getIndex();
int startIndex = pos.getErrorIndex(); while (startIndex) {
 char startIndex = index();
int startIndex = pos.getIndex(); while (startIndex > 0) {
int  startIndex = pos;
 if (pos!= null) { int startIndex= pos.getIndex();
int  startIndex = Pos. getIndex ( ) ;
 char startIndex = pos.getIndex;
int startIndex = pos.getErrorIndex(); int c = 0;
 character int startIndex = pos.getIndex();
 int startIndex = getIndex();
int startIndex  = Pos. getErrorIndex ( ) ;
int startIndex = pos.getIndex(); if (startIndex == 0) {
 if (pos!= null) { parseNextCharacter(source, pos); return null; }
 if (pos == null) { return null; }
 char startIndex = (int) pos.getIndex();
int  startIndex;
int startIndex = pos.getIndex(0); if (startIndex == 0) {
int startIndex = pos.getIndex(); while (startIndex!= - 1) {
int startIndex = pos.getIndex() ; if (startIndex!= - 1) {
int startIndex = pos.getIndex(initialIndex); if (startIndex) {
int startIndex  = pos. getErrorIndex ( 0 ) ;
int startIndex = pos.getErrorIndex(); int c = - 1;
int startIndex = pos.getIndex(); int endIndex = pos.index();
int startIndex = pos.getErrorIndex(); int endIndex = 0;
int startIndex = pos.getIndex(initialIndex); while (startIndex) {
int  startIndex = pos.errorIndex();
int startIndex = pos.getIndex() + 1;
 int startIndex = index();
int startIndex = pos.getIndex() ; if (startIndex!= 0) {
 if (pos!= null) { if (pos == null) { return null; } if (pos == null) { return null; }
int startIndex = pos.getIndex() ; if (startIndex > 0) {
 if (pos!= null) { if (pos == null) { return null; } if (pos!= null) { return null; }
 Char startIndex = pos.index();
int  startIndex = pos.getIndex(); final
 if (pos == null) { return null; } if ( pos == null ) { return null ; } if ( pos!= null ) {
 next character int startIndex = pos.getIndex();
int startIndex = pos.getIndex(0); while (startIndex) {
int startIndex = pos.getIndex(0); if (startIndex) {
int startIndex = pos.getIndex(); if (startIndex) {
 if (pos!= null) { parseNextCharacter(source, pos);
int startIndex = pos.getIndex(0); if (startIndex!= 0) {
 if (pos!= null) { parseNextCharacter(source, pos); }
 index=pos.getIndex();
 char startIndex;
 if (pos == null) { return new Fraction(num.intValue(), 1); }
int startIndex  = pos. getStartIndex ( ) ;
 if (pos!= null) { return new Fraction(num.intValue(), 1); }
 number int startIndex = pos.getIndex();
 if (pos == null) { return new Fraction(num.intValue(), 0); }
 if (pos!= null) { int start=pos.getIndex();
int startIndex = pos.getIndex(initialIndex); if (startIndex!= 0)
int startIndex = pos. getErrorIndex ( 0 ) + 1 ;
 if (pos == null) { return null;
 if (pos!= null) { return new Fraction(num.intValue(), -1); }
 char startIndex = pos.getIndex();;
 if (pos!= null) { return new Fraction(num.intValue(), 0); }
int  startIndex = pos.getErrorIndex(); final
 if (pos!= null) { startIndex= pos.getIndex();
 if (pos!= null) { if (pos == null) { return null; } if (pos == null) { return null }
int startIndex = pos.getIndex(); int n = pos.getIndex(); final
 if (pos!= null) { if (pos == null) { return null; } if (pos == null) { return; }
 if (pos!= null) { return new Fraction ( pos. getIndex ( ), - 1 ) ; }
 char c = 0;
 if (pos == null) { return null; }
 Number num = getNumFormat().parse(pos);
 if (pos!= null) { if (pos == null) { return null; } if (pos!= null) { return; }
int startIndex = pos.getIndex(); int num = startIndex ;
 if (pos!= null) { parseNextCharacter(source, pos); return null }
 char startIndex = pos.getLastErrorIndex();
 if (pos == null) { return null; } if (pos!= null) { return null; }
int startIndex = pos.getIndex() ; while (true) {
 if (pos!= null) {
 number char startIndex = pos.getIndex();
 as a fraction int startIndex = initialIndex;
 if (pos!= null) { if (pos == null) { return null; } if (pos!= null) { return pos; }
 character startIndex = pos.index();
 char startIndex = initialIndex + pos.getIndex();
 if (pos!= null) { if (pos == null) { return null; } if (pos!= null) { return null }
int startIndex = pos.getIndex() ; while (pos!= null) {
 number int startIndex = pos.index();
 for next character int startIndex = pos.getIndex();
 number startIndex = pos.getIndex();
int startIndex = pos.getIndex(0); while (true) {
int startIndex =  pos. getErrorIndex ( ) + 2 ;
int startIndex = pos.getIndex(); int endIndex = 0;
 if (pos == null) { return new Fraction(num, -1); }
int startIndex = pos.getIndex(0); if (startIndex == 0)
 if (pos == null) { return null; } else if (pos!= null) { return pos. parse ( source, pos); }
 char startIndex = pos.errorIndex;
 as a fraction int startIndex= pos.getIndex();
 if (pos!= null) { return pos.getIndex(); }
 char startIndex = errorIndex();
 if (pos == null) { return new Fraction(num.intValue(), 1);
 if (pos == null) { return null; } else if (pos!= null) { return pos.getErrorIndex(); }
int  c = 0;
 if (pos == null) { return null; } else if (pos!= null) { return pos.getIndex(); }
 if (pos!= null) { start = pos.getIndex();
int startIndex = pos.getIndex(); int endIndex = startIndex;
(source, pos);
 if (pos == null) return null;
 number int startIndex = pos.getErrorIndex();
 if (pos!= null) { parseNextCharacter(source, pos); return null };
int  startIndex = index;
 if (pos == null) return null; break;
 if (pos!= null) { parseNextCharacter(source, pos); break; }
 if (pos == null) { return null; } if (pos!= null) { return pos.getIndex(); }
 as a fraction int startIndex = 0;
 if (pos!= null) { parseNextCharacter(source, pos) return null; }
 if (pos == null) { return new Fraction(0, 0); }
 char startIndex = pos;
 Number num = parseNumber(pos);
 char startIndex = initialPos.getIndex();
 Number num = parseNextNumber(pos);
 if (pos == null) { int startIndex= pos.getIndex();
 char startIndex = pos.getErrorIndex().getIndex();
 number(source, pos);
 char startIndex = -pos.getIndex();
 if (pos!= null) { parseNextCharacter(source, pos); return null;
 char startIndex = 0 ; pos = pos.getIndex();
 if (pos!= null) { parseNextChar(source, pos); }
int startIndex = pos.getIndex() ; if (pos!= null) {
 pos.next();
 as a fraction int startIndex = pos.index;
int startIndex = pos.getIndex(initialIndex); while (true) {
 if (pos!= null) { parseNextChar(source, pos);
 if (pos == null) { return new Fraction(num, 1); }
 if (pos == null) { return null; } if ( pos!= null ) { return pos. get ( ) ; }
 int start = pos.getIndex();
 if (pos == null) { return new Fraction(num.intValue(), 0);
int startIndex = pos.getIndex() ; while ( startIndex!= 0 ) {
 char startIndex = initialIndex.getIndex();
 char c = parseNextCharacter(source);startIndex = pos.getIndex();
 if (pos!= null) { return pos.getErrorIndex(); }
 if (pos!= null) { parseNextCharacter(source, pos); return null; };
 if (pos == null) { return new Fraction(num, 0); }
 if (pos == null) { return null; } else if (pos!= null) { return pos.getDefaultIndex(); }
 char startIndex = pos.pos().getIndex();
 int startIndex.getIndex();
 char startIndex = 0 ; start = pos.getIndex();
 Number num = getNum(source, pos);
 if (pos!= null) startIndex = pos.getIndex();
 int startIndex = ++pos.getIndex();
 char startIndex = pos.setErrorIndex();
 char startIndex = index;
int startIndex = pos.getIndex() ; if (startIndex!= 0)
int startIndex = pos.getIndex(); int c = 0;
 char startIndex = pos.error().getIndex();
int startIndex  = pos.getErrorIndex(0); final
int startIndex = pos.getErrorIndex(); int c = 1;
 char startIndex = initialIndex - pos.getIndex();
 if (pos!= null) { return null; }
int  startIndex = pos. getIndex ( ));
 if (pos!= null) { parseNextCharacter(pos, pos);
 if (pos == null) { return null; } if (pos!= null) { return pos.getValue(); }
int startIndex = pos.getIndex(); int endIndex = pos;
 if (pos!= null) { int startIndex;
 char startIndex = (int)(char)pos.getIndex();
 if (minus signs) { int startIndex= pos.getIndex();
 pos.increment();
 char startIndex = pos.getErrorIndex();pos.getIndex();
 char startIndex = parseIndex();
int startIndex = pos.getIndex() ; while (startIndex) {
 char startIndex = 0 ; startIndex = pos.getIndex();
 as a fraction if (pos!= null) {
 if (pos!= null) { return new Fraction(num.intValue(), 1); } else return null;
 number pos.setErrorIndex(0);
 char startIndex = pos.getErrorIndexIndex();
 if (pos == null) { break; }
 number Pos pos = new ParsePosition(pos);
 char startIndex = pos.getStartErrorIndex();
 if (pos!= null) pos.setIndex();
 char c = parseNextChar(source);startIndex = pos.getIndex();
 while pos.isValid();
 if (pos!= null) pos = pos.getIndex();
 if (pos == null) { return null }
 if (pos!= null) { parseNextCharacter(pos); }
 if (pos!= null) { parseNextCharacter(pos, pos); }
 if (pos!= null) { return new Fraction(num.intValue(), 1); } else { return ; }
 Number num = getNumber(source, pos);
 char startIndex = pos.position();
 char startIndex = 1;
 if (pos == null) { return -1;
 pos.setIndex();
 next character int startIndex = - pos.getIndex();
 if (pos!= null) { parseNextCharacter(source, pos); return null; } final
 if (pos!= null) { return new Fraction(num.intValue(), 1); } else { return null }
 if (pos!= null) { -- pos.getIndex();
 number number = parseNextNumber(pos);
 char startIndex = 0 + pos.getIndex();
 if (pos == null) return null; continue;
 if (pos.hasNextCharacter()) {
 if (pos!= null) { return new Fraction(num.intValue(), -1); };
int  startIndex = initialIndex();
 if (pos == null) { return new Fraction(num.intValue(), 0); } final
 character startIndex = pos.getIndex();
 character int startIndex = -pos.getIndex();
 if (pos!= null) { int _startIndex = pos.getIndex();
 if (pos == null) { return new Fraction(num.intValue(), 0) ; } else {
 if (pos == null) { return new Fraction(num.intValue(), 1); } else { final
 if (pos!= null) start = pos.getIndex();
 int startIndex = +pos.getIndex();
 number startIndex = pos.index();
 if (pos!= null) { return new Fraction(num.intValue(), 1); } else {
 if (pos!= null) { ++ pos.getIndex();
int  startIndex = pos.getIndex(); {
 if (pos!= null) { parseNextCharacter(source, pos); };
 if (minus signs) startIndex = pos.getIndex();
int startIndex = pos.getIndex(0); int endIndex = 0;
 if (pos == null) { return new Fraction(num.intValue(), 1); } final
 if (pos!= null) { if (pos!= null)
 char startIndex = (char) pos.getIndex();
 character startIndex = initialIndex;
 char startIndex = nextIndex();
 if (pos == null) { return null; } else if (pos!= null) { return pos.getErrorIndex(); };
int startIndex  = pos. getErrorIndex ( ));
int startIndex = pos.getErrorIndex(initialIndex); final
 if (pos!= null) return null;
 char startIndex = pos.errorIndex();startIndex = pos.getIndex();
 if (pos!= null) { parseNextCharacter(source, pos); } final
 char startIndex = pos.getIndex - whole.getIndex();
 if (pos == null) { return null; } else if (pos!= null) { return pos.getIndex(); };
 Number num = getNumerator(pos);
 if (pos!= null) { return new Fraction(num.intValue(), 1); } else { final
 if (pos == null) { return new Fraction(num.intValue(), 1) ; } else {
 if (pos!= null) { return new Fraction(num.intValue(), 1); } final
 if (pos == null) { return null }
 int startIndex = --pos.getIndex();
 if (nos) { int start = pos.getIndex();
 if (pos!= null) { final int _startIndex = pos.getIndex();
 number int startIndex = 0;
 if (pos!= null) return null;
 char startIndex = 0 ; startIndex = posgetIndex();
 if (pos!= null) { return new Fraction ( pos. getIndex ( ), - 1 ) ; } final
 if (pos == null) { return new Fraction(num.intValue(), 0); } else { final
 if (pos!= null) { return new Fraction ( pos. getIndex ( ), - 1 ) ; };
 if (pos == null) { return null; } else if (pos!= null) { return pos.getIndex; }
 if (pos!= null) { parseNextCharacter(source); }
int startIndex = pos.getIndex(initialIndex); final
int startIndex  = pos.getErrorIndex(1); final
 number number = parseNumber(pos);
 if (pos == null) { return null; } else if (pos!= null) { return pos.toString(); } final
 as fraction int startIndex = 0;
 if (pos!= null) { return new Fraction(num.intValue(), -1); } final
int startIndex = pos.getIndex(initialIndex); int c = 0;
 if (pos.isValid()) {
 if (pos == null) { return new Fraction(0, 0); };
 if (pos!= null) { while (true);
 if (pos.isValid()) { final
 char c = parseNextCharacter();
int  startIndex = pos.errorIndex;
 if (pos!= null) {
 Number num = getNumFormat().parse(source);
 ++ pos.getIndex();
 Number num = parseInteger(pos);
 char startIndex = 1+pos.getIndex();
 if (pos!= null) { pos = null; }
 if (minus sign) { int startIndex= pos.getIndex();
 if (pos!= null) { return new Fraction ( pos. getIndex ( ), - 1 ) ; });
int startIndex = pos.getIndex(); int endIndex = pos.getIndex());
 if (pos == null) { return null; } final
 if (pos!= null) return pos.getIndex();
 char startIndex = parsePreviousCharacter(pos);
 char startIndex = pos.getStartIndex();
 if needed int startIndex = pos.getIndex();
int startIndex = pos.getIndex(initialIndex); while (startIndex) { final
 if (pos == null) { return null };
 char(source, pos);
int startIndex = pos.getIndex(initialIndex);
int startIndex = pos. getErrorIndex ( ) - 1 ; final
 number(source, startIndex);
 number char startIndex = 0;
 if (pos!= null) { int newstartIndex = pos.getIndex();
 { int startIndex = -pos.getIndex();
 number number(source, pos);
 char startIndex = parseNextCharacter(pos);
 number(source, pos, true);
 if (pos.hasNext()) {
int startIndex = pos.getIndex(0); int c = 0;
int  startIndex = pos. index ; final
int startIndex = pos.getIndex() ; if (startIndex < 0) { final
 pos.reset();
 as a fraction int c = 0;
int startIndex = pos.getIndex(); int n = 0;
 startIndex = index();
 char int startIndex = pos.getIndex();
 if (pos == null) { return null };
int  startIndex = - 1;
 if (pos!= null) { return pos.getIndex(); };
int startIndex = pos.getIndex(0);
 char startIndex = (int) -pos.getIndex();
 char startIndex = pos.error.getIndex();
 if (pos!= null) { return null }
 if (pos == null) break;
 as fraction int startIndex= pos.getIndex();
int startIndex = pos.getIndex(initialIndex); if (startIndex) { final
 if (pos!= null) { return pos.getErrorIndex(); };
 char startIndex ++;
 char c = 0; startIndex= pos.getIndex();
 number(source, pos, 1);
 if (pos!= null) { pos = resetIndex(); }
 if (pos == null) { return null; };
 pos.continue();
 -- pos.getIndex();
 if (pos!= null)
 startIndex pos.getIndex();
int  startIndex = 0
 char c = parseNextChar();
 while (startIndex > 0);
int startIndex = pos. getErrorIndex ( ) + 1 ; final
 while (c == 0);
 if (pos!= null) { final int newstartIndex = pos.getIndex();
 if (pos!= null) { final int nstartIndex = pos.getIndex();
 if (pos.isValid()) { startIndex= pos.getIndex();
 char startIndex = (CharIndex)pos.getIndex();
int startIndex = pos.getErrorIndex(initialIndex) ;
int  startIndex = pos. getIndex(); }
 while (pos!= null);
int  startIndex = pos. position ;
 if (pos == null) { return ; }
 if (pos!= null) { int index= pos.getIndex();
 if (pos!= null) { final int pstartIndex = pos.getIndex();
int startIndex  = pos.getErrorIndex(0); {
 while pos.next();
int startIndex = pos.getIndex(); while (startIndex) { final
 if (pos!= null) { final
 char startIndex = (int)0+pos.getIndex();
 char startIndex = position();
 for next character int startIndex = -pos.getIndex();
 if (pos == null) { return null; } final
 if (n == 0) startIndex= pos.getIndex();
 char startIndex = 0 ; int index=pos.getIndex();
 if (pos!= null) { pos = pos; }
 char c ++;
 number int startIndex = pos.position();
 if (pos!= null) { if (pos!= 0)
 char startIndex = (int) ++pos.getIndex();
 if (pos == null) { return null; } else {
 pos.forward();
 char startIndex = 0;pos.getIndex();
 if (pos == null) { return null; } }
int startIndex = pos.getIndex(); int endIndex = startIndex();
 if (n!= 0) startIndex= pos.getIndex();
 if (pos.hasNext()) { startIndex= pos.getIndex();
 if (pos!= null) { return null };
 number pos.getIndex();
 if (pos) { startIndex= pos.getIndex();
 as a fraction if (pos!= null) { final
 as a fraction if (pos) { startIndex= pos.getIndex();
int startIndex = pos.getIndex(0); if (startIndex) { final
 char c = -1;
int startIndex = pos.getIndex(); if (startIndex) { final
int startIndex = pos.getIndex(0); while (startIndex) { final
 Number num = parseNumber(startIndex);
int startIndex = pos.getIndex(); int c = 1;
 char startIndex = pos.pos.getIndex();
int startIndex = pos. getErrorIndex ( 0 ) + 1);
 if (c == 0);
int startIndex = pos.getIndex(initialIndex) - 1;
int  startIndex = pos. errorIndex ; final
 + pos.getIndex();
 char startIndex = (CharPosition)pos.getIndex();
 while (true);
int startIndex = pos.getIndex(); while (true)
 number pos.setErrorIndex(1);
int  startIndex();
 if (pos == null) { return null; };
int startIndex = pos.getIndex(0) - 1;
 char startIndex --;
 if (startIndex > 0);
 char c = 1;
 if (pos.isEmpty()) { final
 if (pos!= null) intstartIndex = pos.getIndex();
 if (pos!= null) { try {
int startIndex = pos.getIndex() ; if (startIndex < 0) { }
 if (pos!= null) { try {
 char startIndex = errorIndex;
 if (pos == null) { return null; } }
 beginIndex = pos.getIndex();
int startIndex = pos.getIndex() ; while (! done ) {
 if (pos!= null) { return null; } final
int startIndex = pos.getErrorIndex(1);
 endIndex = pos.getIndex();
 if (pos!= null) { if (pos!= null).
int  startIndex);
 at pos.getIndex();
 if (numeric) startIndex= pos.getIndex();
 if (pos == null) { return null; } else {
 if (startIndex == 0);
 for { int startIndex = -pos.getIndex();
 char c = -1;
 as a fraction startIndex= pos.getIndex();
 if (pos!= null) { return null; } else {
 if (isExpression()) startIndex= pos.getIndex();
 int startIndex ++;
 if (pos!= null) initialIndex= pos.getIndex();
 if (unit == null) { return null; } else {
 if (pos) { int start= pos.getIndex();
int startIndex = pos.getIndex() - 1 - 1;
 char at index startIndex= pos.getIndex();
 if (c == 0)startIndex = pos.getIndex();
 if (pos!= null) return null();
int startIndex = pos.getIndex(0); int c = 1;
 int index = pos.getIndex();
int startIndex = pos.getIndex() ; while (true) { final
 char c = parseNextCharacter(source); intstartIndex = pos.getIndex();
 if (pos!= null) { if (pos!= null);
 if (pos.isValid()) { final
int startIndex = pos.getIndex() - initialIndex;
 if (pos!= null) { final
 if (pos.isValid()) { }
 char c = parseNextCharacter(); intstartIndex = pos.getIndex();
 if (c == 0) {startIndex = pos.getIndex();
 if (negative) startIndex= pos.getIndex();
 { int startIndex= pos.getIndex();
 char pos; startIndex= pos.getIndex();
int startIndex = pos.getStartIndex(); final
 char c = parseNextCharacter(); final
 Integer startIndex = pos.getIndex();
 and continue parsing denominator for { final
 character(s);
int  startIndex = {
 and continue parsing numerator for next character.
 char number, int startIndex= pos.getIndex();
 char c = -1; intstartIndex = pos.getIndex();
 if (optional) startIndex= pos.getIndex();
int startIndex = pos.getIndex() - 1; final
 if (pos == null) return null; else { final
int startIndex = pos.getIndex() + 1; final
 char startIndex = initialIndex();
 if (pos == null) { return null; }; final
 and continue parsing numerator break; }
 if (pos!= null) { }
 pos.back();
(n);
 char(s);
int startIndex = pos.getIndex() ; while (1) {
 char c = parseNextChar(); final
 if (null) startIndex= pos.getIndex();
 if (pos!= null) { ++startIndex = pos.getIndex();
 int endIndex = pos.getIndex();
 and return num as a fraction.
 and continue parsing denominator break; }
int startIndex = pos.getIndex(1);
 if (c == 0).startIndex = pos.getIndex();
 char next();
 and continue parsing denominator.
int startIndex = pos.getIndex(0); final
int startIndex = pos.getIndex(0) + 1; final
int  startIndex = ;
 while (continuation);
int startIndex = pos.getErrorIndex(); {
int startIndex = pos.getIndex() - 2;
int startIndex = pos.getIndex(initialIndex); {
 as a fraction for { final
int startIndex = pos.getIndex() ; if (startIndex) {}
 if (true);
int startIndex = pos.getIndex(0) - 1; final
 char c = 1;startIndex = pos.getIndex();
 and continue parsing denominator expression.
 as a fraction;
 char number = 0;startIndex = pos.getIndex();
 and continue parsing denominator final
 char c = 0,startIndex = pos.getIndex();
int startIndex = pos.getErrorIndex(); }
 (startIndex++);
 char c = 0; intstartIndex = pos.getIndex();
 and continue parsing numerator.
int startIndex = pos.getErrorIndex(); { final
 char pos; initialIndex= pos.getIndex();
int startIndex = pos.getIndex() - 1 ; try {
 pos = pos.getIndex();
int startIndex = pos.getIndex(1); final
(c);
 position = pos.getIndex();
 while (continuing);
 i = pos.getIndex();
 int startIndex=(pos.getIndex();
(s);
int startIndex = pos.getIndex(0) - 2;
 (optional);
 as a fraction.
 (0);
int startIndex = pos.getIndex(initialIndex); }
int startIndex = pos.getStartIndex(); {
int startIndex = pos.getIndex() ; while (true) {}
int startIndex = pos.getIndex(initialIndex); { final
int startIndex = pos.getIndex() ; while (true) final
 as fraction for { final
 char break;
 char pos.startIndex = pos.getIndex();
 char atStartIndex= pos.getIndex();
 char _startIndex = pos.getIndex();
int startIndex = pos.getIndex(initialIndex) final
 as a fraction,
int startIndex = pos.position();
 as a fraction.
int startIndex = pos.startIndex();
 for next character.
int startIndex = pos.getIndex(0); {
 char iStartIndex= pos.getIndex();
int startIndex = pos.getIndex() - 1 - 1 final
 char i_startIndex = pos.getIndex();
 startIndex=(pos.getIndex();
int startIndex = pos.getIndex() - 1 - 1();
 as a fraction final
 as a numerator.
 as a numerator,
int startIndex = pos.getIndex()); final
 as an expression.
 char at index intstartIndex = pos.getIndex();
 as a fraction:
int startIndex = pos.errorIndex(); final
 char c; intstartIndex = pos.getIndex();
 char c();
 while true();
 and break();
 as fraction of number.
int  (optional)
 char c_startIndex = pos.getIndex();
 int c;
 char int _startIndex = pos.getIndex();
 char skip();
int startIndex = pos.offset();
 char c.startIndex = pos.getIndex();
 as a fraction. final
 as a fraction.startIndex = pos.getIndex();
 character break;
 as a fraction expression.
 as fraction for { }
 and return fraction number.
 as fraction if needed.
 as an integer,
int startIndex = pos.Index();
 as fraction of number final
 in expression.
int startIndex = pos.getStart(); final
 as an integer.
 char ch;
 int _startIndex = pos.getIndex();
 character.
 int startindex= pos.getIndex();
 if needed.
 as a number,
 char oldstartIndex = pos.getIndex();
int startIndex  = 1
int startIndex = pos; final
 as fraction.
 char nstartIndex = pos.getIndex();
 if any.
 as fraction final
int startIndex ; final
 character:
 character final
int startIndex = pos.getIndex(); { final
int startIndex = pos ++ ;
 start index= pos.getIndex();
 initialIndex= pos.getIndex();
int  case:
int  number,
 characters.
 expression.
int  case,
int  case.
int  number:
int startIndex = pos; {
int startIndex = pos.getIndex() { final
 pos=getIndex();
int startIndex = pos); final
int startIndex = pos.getIndex() final
Pos.getIndex();
 position.getIndex();
 final
 character
 char
int startIndex := pos.getIndex();
int startIndex, pos.getIndex();
int startIndex += pos.getIndex();
