case SYNTHETIC_BLOCK_PROP: return "synthetic";
case SYNTHETIC_BLOCK_PROP: return "block";
 case Synthetic: return "synthetic";
 case SYnthetic_PROP: return "synthetic";
 case IS_SYNTHETIC_BLOCK_PROP: return "synthetic";
 case Symbol: return "synthetic";
case SYNTHETIC_BLOCK_PROP: return "syntaxblock";
 case SYNTAX_PROP:return "synthetic";
 case SYnthetic:return "synthetic";
case  SOURCEFILE:
 default: Kit.codeBug();
 case SYNTHETIC_PROP: return "synthetic";
 case SYNETIC_PROP: return"synthetic";
 case SYNTHETIC:return "synthetic";
 case SYNETIC:return "synthetic";
case SYNTHETIC_BLOCK_PROP: return "syncblock";
case SYNTHETIC_BLOCK_PROP: return "syntolicblock";
case SYNTHETIC_BLOCK_PROP: return  "syntactic_block";
 case SYNTAX: return "synthetic";
 case synthetic: return"synthetic";
 case SYNTHETIC_PROPERTY: return "synthetic";
case SYNTHETIC_BLOCK_PROP: return  "syntholic_block";
case SYNTHETIC_BLOCK_PROP: return "symbol";
 case SYnthetic_PROPERTY: return "synthetic";
 case SYNTHON_PROP: return "synthetic";
case SYNTHETIC_BLOCK_PROP: return "sync_block";
case  SOURCE_PROP:
case SYNTHETIC_BLOCK_PROP: return "syntholicblock";
 case SYnthetic_PROP_PROP: return "synthetic";
 default: Kit.codeBug(); }
 case SYNTAXED_PROP: return "synthetic";
case SYNTHETIC_BLOCK_PROP: return  "syntolic_block";
case SYNTHETIC_BLOCK_PROP: return "synthetic" case SOURCE_PROP:
 case SYNTAXIC_PROP: return "synthetic";
 case SYNONYMIC_PROP:return "synthetic";
 case SYNETIC_PROPERTY: return "synthetic";
 case SYNTAX_PROPERTY: return "synthetic";
case SYNTHETIC_BLOCK_PROP: return  "synthetic_block";
case SYNTHETIC_BLOCK_PROP: return "symbolblock";
 case SOURCEFILE_PROP: return "sourcefile"; case EMPTY_BLOCK: return "empty_block";
case SYNTHETIC_BLOCK_PROP: return  "syntotic_block";
case SYNTHETIC_BLOCK_PROP: return block;
case  SOURCE_FILE:
 case SYNTAX_FILE_PROP: return "synthetic";
 case SOURCEFILE_PROP: return "sourcefile"; case EMPTY_BLOCK_PROP:
 case SYntheticPROP: return "synthetic";
 case SOURCEFILE_PROP: return "sourcefile"; case EMPTY_BLOCK: return "emptyblock";
case SYNTHETIC_BLOCK_PROP: return "syntacticblock";
 case SYNTAX_PATH_PROP: return "synthetic";
 case SYnthetic_NAME: return "synthetic";
 case Synthetic_PROP: return "synthetic";
 case SOURCEFILE_PROP: return "sourcefile"; case EMPTY_PROP: return "empty";
 case SYNETIC_NAME: return"synthetic";
case SYNTHETIC_BLOCK_PROP: return "synthetic" case SOURCEFILE:
 case SOURCEFILE_PROP: return "sourcefile"; case EMPTY_BLOCK: return "empty";
 case SOURCEFILE_PROP: return "sourcefile"; case EMPTY_STRING: return "empty_string";
 case SOURCEFILE_PROP: return "sourcefile"; case EMPTY_STRING_PROP:
 case SOURCEFILE_PROP: return "sourcefile"; case EMPTY_STRING: return "emptystring";
 case SOURCEFILE_PROP: return "sourcefile"; case EMPTY_STRING: return "empty";
 case COMPUTED_PROP: return "computed";
case SYNTHETIC_BLOCK_PROP: return "synthetic" case SOURCEPROP:
case SYNTHETIC_BLOCK_PROP: return "symblock";
 case EXTENSION_PROP: return "extension_props";
case  SOURCE_PROP: return "source";
case SYNTHETIC_BLOCK_PROP: return "syntoticblock";
case SYNTHETIC_BLOCK_PROP: return "blocks";
 case SOURCEFILE_PROP: return "sourcefile"; case EXTENSION_PROP: return "extension";
 case COMMENT_PROP: return "comment";
 case SOURCE_PROP: return "source_props";
 case SYNThetic:return "synthetic";
 case SYNTHETIC_NAME: return"synthetic";
 case SOURCE_PROP: case IS_SYNTHETIC_BLOCK_PROP: return "synthetic";
case  SCRIPT_PROP: return "script";
case  STRING_PROP: return "string";
 case SOURCEFILE_PROP: return "sourcefile"; case EMPTY_BLOCK: return "empty_blocked";
 case SOURCEFILE_PROP: return "sourcefile"; case EMPTY_PROP: return empty;
case SYNTHETIC_BLOCK_PROP: return "systemblock";
 case SOURCEFILE_PROP: return "sourcefile"; case EMPTY_PROP: return "empty_property";
 case SOURCEFILE_PROP: return "sourcefile"; case EMPTY_PROPS: return "empty";
 case SOURCEFILE_PROP: return "sourcefile"; default: Kit.codeBug(); }
case  SOURCEFILE_PROP:
case  SCRIPT_PROP:
case SYNTHETIC_BLOCK_PROP: return "synopsis";
 case METHOD_PROP: return "method";
 case SOURCEFILE_PROP: return "sourcefile"; case EMPTY_PROPS: return "empty_properties";
 case COMMENT_PROPS: return "comment_properties";
 case SOURCEFILE_PROP: return "sourcefile"; case EMPTY_BLOCK_NAME:
 case SOURCEFILE_PROP: return "sourcefile"; case EMPTY_STRING: return "empty_strings";
 case SOURCEFILE_PROP: return "sourcefile"; case EMPTY_PROP: return "emptyproperty";
case SYNTHETIC_BLOCK_PROP: return "sync";
 case SYNTAX_NAME:return "synthetic";
 case COMMENT_PROP: return "comment_props";
 case SOURCE_PROP: return "source;
 case SOURCEFILE_PROP: return "sourcefile"; case EMPTY_PROP: return "";
 case COMPUTED_PROPS: return "computed";
 case SYNOPS_PROP: return "synthetic";
 case SCRIPT_PROP: return "script;
 case SOURCEFILE_PROP: return "sourcefile"; default: Kit.codeBug();
 case SOURCEFILE_PROP: return "sourcefile"; case EMPTY_STRING: return "string";
case SYNTHETIC_BLOCK_PROP: return "synchronized";
 case SOURCEFILE_PROP: return "sourcefile"; case EMPTY_BLOCK: return "";
 case SYnthetic_PROP: return \"synthetic";
 case QUOTED_PROP: return "quoted"; case EXTENSION_PROP: return "extension_props";
 case COMMENT_PROP: return "comment_property";
 case EXTENSION_PROP: return "extension_property";
 case SOURCEFILE_PROP: return "sourcefile"; case EMPTY_BLOCK_ALL:
 case EXTENSION_PROP: return "extension_properties";
 case COMPUTED_PROP: return "computed_props";
 case Symbol_PROP: return "synthetic";
 case SOURCEFILE_PROP: return "sourcefile"; case EMPTY_BLOCK:
 case SCRIPT_PROP: case IS_SYNTHETIC_BLOCK_PROP: return "synthetic";
 case SOURCEFILE_PROP: return "sourcefile"; case SYNTHETIC:
 case METHOD_PROP: return "method_props";
 case COMPUTED_PROPS: return "computeproperties";
 case SYNTAX_PROP_NAME: return "synthetic";
 case SOURCEFILE_PROP: return "sourcefile"; case EMPTY_SYnthetic:
case SYNTHETIC_BLOCK_PROP: return "synthetic" case SOURCE_FILE:
 default: Kit.codeBug(); } return null ; case SOURCE_PROP:
 case QUOTED_PROP: return "quoted"; case SOURCEFILE_PROP: return "sourced_file";
 case COMPUTED_PROP: return "compute_props";
 case STRING_PROP: return "string;
 case INDEX_PROP: case IS_SYNTHETIC_BLOCK_PROP: return "synthetic";
 case SYNTHETETIC: return "synthetic";
 case SYNETETIC:return "synthetic";
 case STRING_PROP: return "string_props";
 case SOURCEFILE_PROP: return "sourcefile"; case EMPTY_BLOCK : break ;
case  STRING_PROP: return string;
 case SYNTHETIC_SYNTHETIC_BLOCK_PROP: return "synthetic";
 case STRING_PROP: case IS_SYNTHETIC_BLOCK_PROP: return "synthetic";
 case QUOTED_PROP: return "quoted"; case EXTENDED_PROP: return "extended_props";
 case SYnthetic_TYPE: return "synthetic";
 case SYNETIC_TYPE: return"synthetic";
 case COMPUTED_PROPS: return "computed_props";
 default: Kit.codeBug(...) {
 case COMPUTED_PROP: return "compute_properties";
case  SCRIPT_PROP: return script;
 case SOURCE_PROP: return "source_property"; case SOURCE_FILE_PROP:
case  sourcefile:
case  SOURCEPROP: return "source";
 case SOURCE_PROP: return "source_protocol";
 case QUOTED_PROP: return "quoted"; case EXTENSION_PROP: return "extension_property";
 case SOURCEFILE_PROP: return "sourcefile"; default: Kit.codeBug(...) {
 default: Kit.codeBug();;
 case SCRIPT_PROP: return "script_props";
 case SOURCE_PROP: return "source"; case SOURCE_PROP:
case  SOURCE_PROP: return source;
 case SOURCEFILE_PROP: return "sourcefile"; case EMPTY_SYNTH:
 case COMMENT_PROP: return "comment_properties";
 case QUOTED_PROP: return "quoted"; case SOURCE_PROP:
case SYNTHETIC_BLOCK_PROP: return "synthetic" case SOURCE_FILE_NAME:
 case SOURCE_PROP: return "source"; case SOURCE_FILE:
 default: Kit.codeBug(...);
 case SOURCEFILE_PROP: return "sourcefile"; case IS_SYNTHIC:
 default: return "unknown_property;
 case SYNTAX_REF:return "synthetic";
 default: return "unknown";
 case _SYNTHETIC_BLOCK_PROP: return "synthetic";
 case SOURCE_PROP: return "source_prop";
 case SOURCEFILE_PROP: return "sourcefile"; case SOURCE_BLOCK:
 case Synthesized: return "synthetic";
 case EXTENSION_PROP: return "extension_name";
case  STRING_PROP:
 case QUOTED_PROP: return "quoted"; case EXTENSION_PROP: return "extension_prop";
 case SOURCE_PROP: return "source_property"; case SOURCE_FILE:
 case COMPUTED_PROP: return "modified";
 case SYNTHETIC: return \"synthetic";
 case METHOD_PROP: return "methods";
 case SOURCE_PROP: return "sources_props";
 case STRING_PROP: return "string_property"; case SOURCE_PROP:
 case QUOTED_PROP: return "quoted"; case EXTENSION_PROP: return "extension_protocol";
case SYNTHETIC_BLOCK_PROP: return "synthetic" case SOURCEFILE_BLOCK:
 case QUOTED_PROP: return "quoted"; case EXTENDED_PROP: return "extended_procedure";
 default: Kit.codeBug(null);
 case SOURCEFILE_PROP: return "sourcefile"; default: Kit.codeBug(...) }
 case SOURCE_PROP: return "source_name"; case SOURCE_FILE_PROP:
case  SOURCEFILE_NAME:
 case SYnthetic: return +"synthetic";
 case EXTENSION_PROP: return "extension_prop";
case  STRICT_PROP:
 case COMMENTING: return "commenting;
 case SOURCE_PROP: return "source"; case SOURCEFILE:
case SYNTHETIC_BLOCK_PROP: return "synthetic" case SOURCE_PROP: return source;
 default: Kit.codeBug(); } return null; case SOURCE_FILE:
 case SOURCEFILE_PROP: return "sourcefile"; default: return "unknown_property";
 case SOURCE_PROP: return "source_property"; case SOURCEFILE_NAME:
 case SOURCE_PROP: return "source_policies";
 case SOURCE_PROP: return "source_property"; case SOURCEFILE_PROP:
 case SOURCEFILE;
 case QUOTED_PROP: return "quoted"; case SOURCEFILE_PROP:
 default: Kit.codeBug(); } return null ; case SOURCEFILE_NAME:
 default: Kit.codeBug(); } return null ; case SOURCEPROP:
 case SYNC:return "synthetic";
 case COMMENT_PROP: return "comment_property"; case SOURCE_PROP:
 case SOURCE_PROP: return "source_property"; case SOURCEFILE: return "sourcefile";
 case SYNTAX: return \"synthetic";
 default: Kit.codeBug('');
case SYNTHETIC_BLOCK_PROP: return "synthetic" case SCRIPT_PROP:
 case SOURCEFILE_SYNTHETIC_BLOCK_PROP: return "synthetic";
 case SOURCEFILE_PROP: return "sourcefile"; default: throw "Unknown property";
 case SOURCE_PROP: return "source_property"; case SOURCE_FILE_NAME:
 case SOURCE_PROP: return "source" case SOURCEFILE:
 default: Kit.codeBug("Unknown property");
 default: Kit.codeBug(...) }
 case SYnthetic: return return"synthetic";
case SYNTHETIC_BLOCK_PROP: return symbol;
 case STRICT: return "strrict;
 case EXTENSION_PROP: return "extension"; default: return "unknown";
 case SOURCE_PROP;
 case SYNTHETIC: return +"synthetic";
 case SYNTAX: return +"synthetic";
 case SOURCE_PROP: return "source_property"; case SOURCE_PROP: return source;
 case SOURCE_PROP: return "source"; case SOURCEFILE_PROP:
 case SOURCE_PROP: return "source"; case SOURCE_FILE_NAME:
 case SOURCE_PROP: return "source_property"; case SOURCE_PROP:
 case SYNTAX_PROP: {return "synthetic";
 case SYntheticNAME: return "synthetic";
case SYNTHETIC_BLOCK_PROP: return "synthetic" ; case SOURCE_PROP:
 default: Kit.codeBug();
 case SYNOPS:return "synthetic";
 default: return "unknown";;
 case STRICT_PROP;
case  SOURCEPROP:
 case INDEX_PROP: case ISSYNTHETIC_BLOCK_PROP: return "synthetic";
 case SOURCE_PROP: case ISSYNTHETIC_BLOCK_PROP: return "synthetic";
case  STRICT_PROP: return strict;
 case STRICT: return "strict;
 case SYNOTIC:return "synthetic";
 case INDEX_PROP: case _SYNTHETIC_BLOCK_PROP: return "synthetic";
case SYNTHETIC_BLOCK_PROP: return "synthetic" case SOURCENAME_PROP:
 case COMPUTED_PROP: return "compute_procedure";
case  SOURCE_FILE_NAME:
 case SOURCE_PROP: return "source"; case SOURCEFILE_NAME:
 case SOURCE_PROP: return "source_property"; case SOURCEFILE_PROPERTY:
 case STRING_PROP: return "string_property"; case SOURCEFILE_PROP:
 case SOURCE_PROP: return "source_property"; case SOURCE_PROPER_PROP:
case SYNTHETIC_BLOCK_PROP: return "synthetic" case SOURCE_BLOCK:
 default: Kit.codeBug(); } return null; } case SOURCE_FILE:
 case SYNTHIC_SYNTHETIC_BLOCK_PROP: return "synthetic";
 case STRING_PROP: return "string_property"; case SOURCE_FILE:
case  SCRIPT_FILE:
 default: return "unknown_type;
case  SOURCEPROP: return "sourceproperty";
 default: return "unknown";
 case STRING_PROP;
 case SOURCEFILE_PROP: return "sourcefile"; case EMPTY_STRING: return "empty_strings;
 default: return "unknown_props;
 case EXTENSION_PROP: return "extension"; case SOURCEFILE:
 case EXTENSION_PROP: return "extension"; case SOURCEBLOCK:
case  FILE:
 case COMPUTED_PROP: return "compute_property_name";
 case SYNTHON_SYNTHETIC_BLOCK_PROP: return "synthetic";
case  SOURCEPROP: return "sourceprop";
 default: Kit.codeBug("unknown property");
 case QUOTED_PROP: return "quoted_property"; case SOURCEFILE_PROP:
 case QUOTED_PROP: return "quoted"; default: return "unknown";
 case SCRIPT_PROP: case _SYNTHETIC_BLOCK_PROP: return "synthetic";
 case SOURCE_PROP: return "source_property_props";
 case SOURCE_PROP: return "source_property"; case SOURCEFILE_STORE:
 case STRING_PROP: case ISSYNTHETIC_BLOCK_PROP: return "synthetic";
 case COMMENT_PROP: return "comment_property"; case SOURCE_FILE:
case SYNTHETIC_BLOCK_PROP: return "";
case SYNTHETIC_BLOCK_PROP: return "synthetic" case SOURCE_BLOCK_NAME:
case SYNTHETIC_BLOCK_PROP: return "synthetic" case SOURCEFILE_PROP:
case SYNTHETIC_BLOCK_PROP: return "synthetic" case SOURCEFILE_NAME:
 case EXTENSION_PROP: return "extension"; default: return null;
 case EXTENSION_PROP: return "extension"; default: return "";
 case COMPUTED_PROP:
 case EXTENSION_PROP: return "extension"; default: throw "unknown";
 default: return "unknown_prop;
 case EXTENSION_PROP: return "extension"; default: return undefined;
 case EXTENSION_PROP: return "extension"; case CLASS_NAME:
 default: return null;
 case COMMENTED_PROP:
 case COMPUTED_PROP: return "compute_prop_name";
 case SOURCE_FILE;
 case SOURCEFILE_PROP: return "sourcefile"; case EMPTY_BLOCK: return "empty_blocked;
 case EXTENSION_PROP: return "extension"; default: throw "Unknown";
 case SOURCEFILE_PROP: return "sourcefile"; case EMPTY_BLOCK: return "empty_block"; case
case  SOURCE_FILE_PROP:
case SYNTHETIC_BLOCK_PROP: return "synthetic" ; case SOURCEFILE_PROP:
 case SCRIPT: return "script";;
 case STRICT: return "strICT;
 case DEFAULT_SYNTHETIC_BLOCK_PROP: return "synthetic";
 case QUOTED_PROP: return "quoted"; case EXTENSION_PROP: return "extension_props;
 default: Kit.codeBug() }
 case SOURCEFILE: return "sourcesource;
 case SOURCE_SYNTHETIC_BLOCK_PROP: return "synthetic";
 case SOURCE_PROP: return "source_property"; case SOURCE_PROP: return "";
 case STRICT_BLOCK_PROP_SYNTHETIC_BLOCK_PROP: return "synthetic";
 case SYNOPSECT: return "synthetic";
case  PROP:
case SYNTHETIC_BLOCK_PROP: return "synthetic" ; case SOURCE_FILE_NAME:
 default: Kit.codeBug(); } } ) ;
 case SOURCEPROP;
 case CUSTOM_SYNTHETIC_BLOCK_PROP: return "synthetic";
 else: return "unknown property";
 case QUOTED_PROP: return "quoted"; case EXTENDED_PROP: return "extended_props;
 case QUOTED_PROP: return "quoted"; case SOURCEFILE_PROP: return "sourced_file",
 case SOURCE_PROP: return "source_property_prps";
 case STRING_PROP: return "strings;
 case STRICT: return "strict";;
 case SYN: return"synthetic";
 case SYNONY:return "synthetic";
 case STRING:
 case SYNTHETICSYNTHETIC_BLOCK_PROP: return "synthetic";
case  SourceFile:
 default: throw "Unknown property";
 case ANALYSIS_SYNTHETIC_BLOCK_PROP: return "synthetic";
 default: return "unknown property";
case  STRING:
 case SyntheticName: return "synthetic";
case SYNTHETIC_BLOCK_PROP: return "synthetic" case SOURCEBLOCK:
case SYNTHETIC_BLOCK_PROP: return "synthetic" case SCRIPT_FILE:
 default: return "";
 default: return undefined;
 default: return "unknown;
 default: return null;
case  SOURCE:
case  SCRIPT_NAME:
case  SOURCEFILE_STORE:
 default: Kit.codeBug(''); }
 case SOURCE_STORAGE_SYNTHETIC_BLOCK_PROP: return "synthetic";
 default: Kit.codeBug("unknown"); }
 default: throw "Unknown";
 case SOURCE_PROP: return "source_property"; case SOURCE_FILE_PROP,
 default: throw "unknown property";
 default: Kit.codeBug(); } break ; }
 case STRICT_STRICT_SYNTHETIC_BLOCK_PROP: return "synthetic";
 default: return"synthetic";
case SYNTHETIC_BLOCK_PROP: return null;
 case ANALYZE_SYNTHETIC_BLOCK_PROP: return "synthetic";
 default: throw "unknown";
 case NON_SYNTHETIC_BLOCK_PROP: return "synthetic";
 default: return "string";
 case CLASS_NAME:
 case SOURCE_PATTERN_SYNTHETIC_BLOCK_PROP: return "synthetic";
 case SOURCE_PROP: return "source_name"; case SOURCE_FILE_PROP,
 case SOURCE_PROP: return "";
 case PROP:
 case IMPORTED_SYNTHETIC_BLOCK_PROP: return "synthetic";
case SYNTHETIC_BLOCK_PROP: return "synthetic" case SOURCE_PROP: return source";
 case STRICT: return "strict";
 case COMMENT_SYNTHETIC_BLOCK_PROP: return "synthetic";
 case Synthetic: return return"synthetic";
 case COMPUTED_PROPS: return "computeproperties;
 case SOURCE_PROPERTY_SYNTHETIC_BLOCK_PROP: return "synthetic";
 case COMPATIBLE_SYNTHETIC_BLOCK_PROP: return "synthetic";
case SYNTHETIC_BLOCK_PROP: return "static";
case SYNTHETIC_BLOCK_PROP: return namespace;
 case IMPLEMENT_SYNTHETIC_BLOCK_PROP: return "synthetic";
 case PROPS:
 case COMPUTED_PROP: return "compute_properties;
 case STRICT_SYNTHETIC_BLOCK_PROP: return "synthetic";
 case NT: return"synthetic";
 case SOURCE_PROP: return "source_policies;
 case ISSYNTHETIC_BLOCK_PROP: return "synthetic";
 case COMMENT_PROP: return "comment;";
 case SCRIPT_FILE;
case SYNTHETIC_BLOCK_PROP: return "blocking";
 case MEMBER_SYNTHETIC_BLOCK_PROP: return "synthetic";
 case INDEXES_IN_SYNTHETIC_BLOCK_PROP: return "synthetic";
 default: Kit.codeBug( "Unknown"); }
 case COMMENT_PROP: return "comment_props;"
 case SOURCE_PROP: return "sources_props;
 case NAME: return"synthetic";
 case SOURCE_PROP: return "source_props;"
case  IS_FILE:
 case INDEXES: case _SYNTHETIC_BLOCK_PROP: return "synthetic";
 case STRING_TYPE;
 case COMPUTED_PROP: return "compute_procedure;
case  SCRIPTFILE:
case SYNTHETIC_BLOCK_PROP: return "synthetic" case SCRIPTFILE:
 case INDEXES_TO_SYNTHETIC_BLOCK_PROP: return "synthetic";
 case ISNULL:return "synthetic";
 default: # fall through;
case  STRING_PROP: return;
 case COMMENT_PROP: return "comment;",
 case COMPUTED_PROP: return "compute_property_name;
 default: Kit.codeBug("Unknown property")
 default: break;
 case USE_SYNTHETIC_BLOCK_PROP: return "synthetic";
 case SOURCE_SYNTH_SYNTHETIC_BLOCK_PROP: return "synthetic";
 case STATIC:
case SYNTHETIC_BLOCK_PROP: return "synthetic" block_properties;
 case COMMENT_PROP: return "comment;"
 case SOURCE_PROP: caseSYNTHETIC_BLOCK_PROP: return "synthetic";
case  NAME:
case SYNTHETIC_BLOCK_PROP: return "synthetic" block_property;
 default: ignore;
case SYNTHETIC_BLOCK_PROP: return "syntolicblock;"
case SYNTHETIC_BLOCK_PROP: return "synthetic" block_name;
case  SCRIPT_PROP: return;
 default: #"synthetic";
 case SCRIPTFILE;
case  STRING_PROP: break;
case SYNTHETIC_BLOCK_PROP: return "synthetic" ; case STRING:
case SYNTHETIC_BLOCK_PROP: return "synthetic" case SOURCE_PROP: return source,
case SYNTHETIC_BLOCK_PROP: return "synthetic" case SOURCE_PROP: return source';
case SYNTHETIC_BLOCK_PROP: return "synthetic" ; case SOURCE:
 case NO_SYNTHETIC_BLOCK_PROP: return "synthetic";
case  CLASS:
 case synthetic:"synthetic";
 case "empty";;
 case Symbol::"synthetic";
case SYNTHETIC_BLOCK_PROP: return "synthetic" block_prop;
case SYNTHETIC_BLOCK_PROP: return  "synthetic_block_property"; case
case SYNTHETIC_BLOCK_PROP: return  "synthetic_block_property"; }
 case Symbol:"synthetic";
case  SPEC:
 case NOT_SYNTHETIC_BLOCK_PROP: return "synthetic";
case SYNTHETIC_BLOCK_PROP: return  "syntholic_block_property"; }
case SYNTHETIC_BLOCK_PROP: return  "syntholic_block_property"; case
case SYNTHETIC_BLOCK_PROP: return  "synthetic_block_properties"; }
case SYNTHETIC_BLOCK_PROP: return  "synthotic_blocked"; }
case SYNTHETIC_BLOCK_PROP: return  "synthetic_blocked"; }
case SYNTHETIC_BLOCK_PROP: return "synthetic" block_type;
 default: return "";
case SYNTHETIC_BLOCK_PROP: return  "synthetic_blocked"; case
case SYNTHETIC_BLOCK_PROP: return  "synthotic_blocked"; case
case SYNTHETIC_BLOCK_PROP: return "synthetic" block;
case SYNTHETIC_BLOCK_PROP: return "synthetic_block"; case
case  SOURCE_FILE_NAME;
case SYNTHETIC_BLOCK_PROP: return  "syntholic_blocked"; }
case SYNTHETIC_BLOCK_PROP: return "syntholic_block"; case
case SYNTHETIC_BLOCK_PROP: return "syntholic_block"; }
case SYNTHETIC_BLOCK_PROP: return "synthetic_block"; }
 case Symbol:
 case *SYNTHETIC_BLOCK_PROP: return "synthetic";
case SYNTHETIC_BLOCK_PROP: return "syntactic_block"; case
 case NTSTAT: return "synthetic";
case  TYPE:
 case __SYNTHETIC_BLOCK_PROP: return "synthetic";
 case SPECIAL:return "synthetic";
 case CLASS:return "synthetic";
 case NThetic: return "synthetic";
 case undefined:
 case NONSYNTHETIC_BLOCK_PROP: return "synthetic";
 case CLASS:
 default: null;
 default: continue;
 case " ";
 } break;
case SYNTHETIC_BLOCK_PROP: return;
 case!"synthetic";
 case \"synthetic";
 case default;
 case :"synthetic";
 break;
 default: }
 case Symbolreturn "synthetic";
 case syntheticreturn "synthetic";
 # default;
 # break;
 break; }
 case #"synthetic";
 case null;
case SYNTHETIC_BLOCK_PROP(s):
case SYNTHETIC_BLOCK_PROP : break ;
case SYNTHETIC_BLOCK_PROP: {
case SYNTHETIC_BLOCK_PROP: return [];
case SYNTHETIC_BLOCK_PROP: return "synthetic" block; }
 return #"synthetic";
case SYNTHETIC_BLOCK_PROP: return "synthetic" block; case
case SYNTHETIC_BLOCK_PROP: return "synthetic" block";
case SYNTHETIC_BLOCK_PROP: return "synthetic"block"; case
case SYNTHETIC_BLOCK_PROP: return "synthetic" ; }
 #:return "synthetic";
case SYNTHETIC_BLOCK_PROP: switch
 case symreturn "synthetic";
 case symbolsreturn "synthetic";
case SYNTHETIC_BLOCK_PROP:  {}
case SYNTHETIC_BLOCK_PROP:  return";
 break }
 } }
case SYNTHETIC_BLOCK_PROP : #
case SYNTHETIC_BLOCK_PROP:::
 }
case SYNTHETIC_BLOCK_PROP(): return "synthetic";
case SYNTHETIC_BLOCK_PROP': return "synthetic";
 case
case SYNTHETIC_BLOCK_PROP:: return "synthetic";
