final BigInteger gcd = num.gcd(den);
 gcd= num.gcd(den);
 gcd;
(gcd);
 gcd(den);
final BigInteger  gcd
final BigInteger gcd = num.gcd(den, num);
final BigInteger gcd =  num.divide(den);
final BigInteger gcd =  BigInteger.ONE.compareTo(den);
final BigInteger gcd =  BigInteger.ONE.divide(den);
 = num.gcd(den);
final BigInteger gcd =  num.compareTo(den);
final BigInteger  gcd = num;
final BigInteger  gcd;
final BigInteger gcd = num.gcd(denom);
final BigInteger gcd =  num.cd(den);
final BigInteger gcd =  BigInteger.ZERO.divide(den);
final BigInteger gcd = num.gcd(); final BigInteger den = den;
 gcd = num.divide(den);
final BigInteger gcd =  BigInteger.ONE.compare(den);
 gcd=gcd(den);
 gcd = BigInteger.ONE.compare(den);
final BigInteger  gcd = 1;
 gcd = 1;
final  double gcd;
final BigInteger gcd = num.gcd(den, gcd);
final  gcd;
 gcd = num.compareTo(den);
final  double gcd = 1;
 gcd(num);
final BigInteger  gcd = num. pow ( 2 ) ;
final BigInteger gcd = num.gcd(den.gcd());
final BigInteger gcd = num. pow ( den, 2 ) ;
final BigInteger  gcd = num. div ( den ) ;
 gcd = divide(den);
 GCD = BigInteger.ONE.compare(den);
final BigInteger  gcd = num - den;
 double gcd=num.gcd(den);
final BigInteger  gcd = (BigInteger) num;
final BigInteger gcd =  BigInteger.ZERO.compare(den);
final BigInteger gcd = num.divide(den) - 1;
final BigInteger  gcd = num. pow ( ) ;
final BigInteger gcd = num.gcd(den); final BigInteger num = den;
final BigInteger gcd = num. geq ( den ) ;
 gcd = BigInteger.ONE.divide(den);
 GCD = num.divide(den);
 GCD = num.compareTo(den);
 gcd = num.divide(num.den);
final BigInteger gcd = num.gcd(); final BigInteger den = num.den();
final BigInteger  gcd = num + den;
 divide(den);
 gcd = num.cd(den);
 gcd = numerator.divide(den);
 gcd = max(den);
final BigInteger  gcd = num. geq ( ) ;
final  gcd = 1;
final BigInteger gcd = num.exp();
final BigInteger gcd = num.gcd(den, -1);
 numerator = num.gcd(num); den = den.gcd(num);
 numerator = num.gcd(den); denominator = num.gcd(num);
final BigInteger gcd = num.divide(den) + 1;
final BigInteger gcd = num.gcd(den); final BigInteger num = num;
 gcd = num.divide(gden);
 numerator = BigInteger. ONE ; denominator = BigInteger. ONE ; num = num. divide ( denominator ) ;
 numerator = num.gcd(num);
 numerator = BigInteger. ONE ; denominator = BigInteger. ONE ; num = num. pow ( 2 ) ;
 numerator = num.gcd(num); den = num.gcd(den);
 gcd = num.division(den);
 GCD = BigInteger.ZERO.gcd(den);
 gcd = Math.floor(num);
final BigInteger gcd = num.gcd(den); final BigInteger den = gcd;
 numerator = num.gcd(num); denominator = num.gcd(den);
 double gcd=gcd(den);
final BigInteger gcd = num.gcd(); final BigInteger den = den.dec();
final BigInteger gcd = num.gcd(den, numerator);
 numerator = BigInteger. ONE ; denominator = BigInteger. ONE ; num = num. divide ( den ) ;
 numerator = BigInteger. ONE ; denominator = BigInteger. ONE ; num = num. div ( den ) ;
final BigInteger gcd = num. mod ( den ) ;
final BigInteger gcd =  BigInteger. ONE. pow ( 2 ) ;
 gcd = num.divide(num+den);
final BigInteger gcd = num.gcd(); final BigInteger den = den.exp();
 numerator = num. divide(num); den = den. divide(num);
final  double gcd = 1.0;
 gcd = num.divideBy(den);
final BigInteger gcd  = Math.divide(num, den);
 double gcd = num.cd(den);
 numerator = BigInteger. ONE ; denominator = BigInteger. ONE ; denominator = BigInteger. ONE ; } } else {
final BigInteger gcd = num.divide(den.exponent());
final BigInteger gcd = num.gcd(); final BigInteger den = denominator;
final BigInteger gcd =  num.division(den);
 gcd = Num.divide(num,den);
final BigInteger gcd =  BigInteger.One.compareTo(den);
final BigInteger gcd =  BigInteger.ZERO.division(den);
final  int gcd;
 numerator = BigInteger. ONE ; denominator = BigInteger. ONE ; num = num. mod ( den ) ;
final BigInteger gcd =  BigInteger. ONE. mod ( num ) ;
 gcd = (den);
 numerator = BigInteger. ONE ; denominator = BigInteger. ONE ; num = num. pow ( 10 ) ;
 gcd = divide(num);
 gcd = Math.divide(num,den);
 double gcd = num.divide(den);
 gcd = num.div(den);
 numerator = numerator ; denominator = denominator ; num = num. div ( den ) ;
 denominator = BigInteger.ONE;
final BigInteger gcd =  BigInteger.GCDI(den);
 gcd = BigInteger.gcd(den);
final  gcd = num;
final BigInteger gcd =  BigInteger.GCD2(den);
final BigInteger gcd = num.gcd; final BigInteger den = den;
final  BigInteger gcd = - num;
 gcd(gcd);
 numerator = num.gcd(num) - denominator;
 gcd = divmod(den);
 gcd = BigInteger.ONE.commonTo(den);
 GCD = BigInteger.NUMERATOR.gcd(den);
final BigInteger gcd =  BigInteger.ONE.commonTo(den);
final BigInteger gcd =  BigInteger.ZERO.commonTo(den);
 numerator = num.gcd(num) * denominator;
final BigInteger gcd = num.gcd(); final BigInteger den = num;
 double gcd = divide(den);
final BigInteger  gcd = num. divide();
final  BigInteger gcd = 2;
final BigInteger gcd = num.gcd(den, denominator);
 gcd = BigInteger.ZERO.division(den);
 gcd = num.divide(num-den);
 if (num.gcd(num))
final BigInteger gcd = num.gcd(den, num.exp);
 numerator = num.gcd(den); denominator = num.exponent();
 gcd = num;
 gcd = floor(num);
final BigInteger gcd = num.gcd(den); final BigInteger num = num + den;
final BigInteger gcd =  BigInteger.GCDOf(den);
 numerator = num.gcd(num); denominator = num.exp();
 numerator = BigInteger. ONE ; denominator = BigInteger. ONE ; num = num. divide(den); } } else {
final BigInteger gcd  = BigInteger. ONE. pow ( ) ;
 GCD.gcd(den);
final BigInteger gcd = num.gcd(den); double num = gcd;
 GCD = num.gcd(den);
 numerator = BigInteger. ONE ; denominator = BigInteger. ONE ; num = num. divide ( den ) ; } else {
 gcd = Math.floor(den);
final BigInteger gcd = num.gcd(den, num, num);
final BigInteger gcd = num.gcd(den); final BigInteger den = den;
 GCD = BigInteger.gcd(den);
final BigInteger gcd =  BigInteger.ONE.compute(den);
final  double gcd = 2;
 numerator = num.gcd(num); denominator = num.one();
final BigInteger gcd =  BigInteger.commonDecimal(den);
 if (num!= den) {
 numerator = num.gcd(num) - 1;
 numerator = num.gcd(num); den = den.gcd(den);
final  double gcd = num;
final BigInteger gcd = num.exponent();
final BigInteger gcd = num.gcd(); final BigInteger num = den;
 gcd = BigInteger.GCD2(den);
 gcd = Math.gcd(num);
final  int gcd = 1;
final BigInteger gcd = num.gcd(den); final BigInteger num = num - den;
final BigInteger gcd = num.gcd();
 gcd = numerator.division(den);
final BigInteger  gcd = num. ge ( ) ;
 numerator = BigInteger. ONE ; denominator = BigInteger. ONE ; num = num. divide(den); }
 gcd = BigInteger(num);
 numerator = num.gcd(den); denominator = num.numeric();
final BigInteger  gcd = 0;
 numerator = num.gcd(num); denominator = num.numeric();
 gcd = divmod(num);
 double gcd = max(den);
 numerator = num.gcd(den); denominator = num.gcd(num); }
 gcd = BigInteger.GCDI(den);
final BigInteger gcd =  numerator.divide(den);
 gcd = pow(den);
 double gcd = divmod(den);
 gcd(1);
final BigInteger gcd =  BigInteger.COMPARATOR(den);
 gcd = BigInteger.COMPARATOR(den);
 gcd = bigInteger(num);
 gcd = max(num);
 numerator = num. divide(num); den = den. divide(num); }
 gcd = num.divide(den) + 1;
 gcd = num.divide(den) - 1;
final BigInteger gcd = num.gcd(den) - 1;
 numerator = BigInteger. ONE ; denominator = BigInteger. ONE ; num = num. divide(num); }
 numerator = num.gcd(num) + den;
 gcd = BigInteger.divide(num);
 gcd = abs(num);
 numerator = num. div ( den ) ;
final BigInteger gcd = num.gcd(den) ; final BigInteger den = num;
 numerator = num.gcd(num); denominator = num.numbers();
final BigInteger gcd = num.gcd(); final BigInteger den;
 gcd = BigInteger.COMPARE(den);
 numerator = BigInteger. ONE ; denominator = BigInteger. ONE ; num = num. divide( denominator ); }
 numerator = num.gcd(num) - den;
 double gcd = num.division(den);
 gcd = Math.mod(num, den);
 GCD = BigInteger.COMPARE(den);
 numerator = num ; denominator = den ;
 numerator = num.gcd(num); den = den.gcd(num); }
final  gcd = 2;
 denominator = BigInteger.ZERO;
final BigInteger gcd = num.gcd(); final BigInteger den = num.den;
 GCD = MathUtils.gcd(den);
 GCD = Math.floor(num);
 of the numerator gcd = num.gcd(den);
 gcd = GCD(den);
 GCD = BigInteger.NEGER.gcd(den);
final BigInteger gcd = num.gcd(den) ; gcd = gcd(num) ;
final BigInteger gcd = num.gcd(den, num.exponent());
 gcd = NumUtils.gcd(den);
 division gcd(den);
 double gcd(den);
 gcd = BigInteger.GCD(num);
 gcd = Math.gcd(num, den);
 numerator = num.gcd(den); denominator = num.exponent;
 of the denominator gcd = num.gcd(den);
 gcd = Math.divide(num, den) - 1;
 gcd = 2;
 gcd = Math.log(2);
 numerator = num.gcd(num); denominator = den.gcd(num); }
 numerator = BigInteger. ONE ; denominator = BigInteger. ONE ; num = num. divide ( den ) ; } } else
 denominator = num; denominator = den;
 numerator = BigInteger. ONE ; denominator = BigInteger. ONE ; num = num. divide ( num ) ; } }
 numerator = num. divide(num); denominator = den. divide(num); } } else {
 numerator = num.gcd(num); denominator = den.gcd(num); } else {
final BigInteger gcd  = BigInteger. ONE. pow ( 2));
 of denominator gcd = num.gcd(den);
 numerator = numerator ; denominator = denominator ; num = num. divide(num); break ; }
 gcd = Math.divide(num, den.exponent());
 cd = num.gcd(den);
 gcd = cos(den);
 numerator = num.gcd(num); den = den.gcd(num));
(gcd=1);
 gcd = Math.round(num);
 numerator = num.gcd(num.gegate();) ;
 denominator = BigInteger.ONE;
 numerator = num.gcd(num) + 1;
final BigInteger gcd = num.gcd(); final BigInteger den = den ; } else
final BigInteger gcd = num.divide(den.exponent);
 Gcd = BigInteger.gcd(den);
 gcd = num.divide(den); gcd += num.exp();
 numerator = BigInteger. ONE ; denominator = BigInteger. ONE ; num = num. divide ( num ) ; } } else
 numerator = num. pow ( ) ;
 numerator = BigInteger. ONE ; denominator = BigInteger. ONE ; num = num. pow ( 2 ) ; }
 numerator = BigInteger. ONE ; denominator = BigInteger. ONE ; denominator = BigInteger. ONE ; } } } ;
 gcd = 0;
final BigInteger gcd = num. geom ( ) ;
 coefficient gcd=gcd(den);
 GCD = BigInteger.NEGATIVE.gcd(den);
 if (num > den) {
 gcd = numerator.div(num);
 denominator = num; numerator = den;
final BigInteger gcd = num.divide(den.divide();) ;
 numerator = num.gcd(num); denominator = num; }
 gcd = MathUtils.gcd(den);
 int gcd= num.gcd(den);
 double gcd;
final BigInteger gcd = num.gcd(den) ; int num = den;
 gcd = num.divide(den); gcd -= num.exp();
final BigInteger gcd = num.digits();
 denominator = BigInteger.ZERO;
 of denominator gcd = BigInteger.gcd(den);
final BigInteger gcd = num.gcd(den) ; double num = den;
 GCD = BigInteger.COMPARATOR.gcd(den);
final BigInteger gcd = num.gcd(den) + 1;
 denominator = num ; double gcd = num.gcd(den);
 denominator = num ; BigInteger gcd= num.gcd(den);
 numerator = num.gcd(num); denominator = den; }
 numerator = num.gcd(den); denominator = num.gcd(num) ; } }
final BigInteger gcd = num.gcd(den) + denominator;
 coefficient gcd = num.gcd(den);
 gcd = (1 - num);
final BigInteger gcd = num * den;
 double gcd = (den);
 Gcd = num.gcd(den);
 gcd = Math.log10(num);
 GCD = NumUtils.gcd(den);
 of numerator gcd = num.gcd(den);
 gcd = Math.divide(num, den.exponent);
final BigInteger gcd = num.gcd(den) - num.gcd();
 gcd = Math.divide(gcd);
 gcd = -1;
 = gcd;
final  long gcd;
 gcd = numerator.div(den);
final BigInteger gcd =  divmod(den);
final BigInteger gcd = num.gcd(den.exp(-1);
 divideGcd(den);
 gcd = BigInteger.ONE;
 gcd = num.divide2(den);
 of denominator GCD = BigInteger.gcd(den);
final BigInteger gcd = num.gcd(den, num.length);
 of denominator double gcd = num.gcd(den);
 numerator = num.gcd(num).divide(den); }
 gcd = pow(2);
 denominator = numerator; gcd = num.gcd(den);
 numerator = num.gcd(num); denominator = num.one;
 gcd(2);
 numerator = num. divide(num); den = den. divide(num); } }
 of the numerator double gcd = num.gcd(den);
 gcd(n);
 gcd = num.divide(den); gcd = gcd ; }
 gcd = (-1);
final BigInteger gcd =  num.compare(den);
 of the denominator double gcd = num.gcd(den);
 denominator = numerator; denominator = den;
 numerator = numerator ; denominator = denominator ; num = num. divide(num); } } }
 double gcd = pow(den);
 gcd = (double) num; gcd= num.gcd(den);
final BigInteger gcd = num.gcd(den.exp);
final BigInteger gcd = num.gcd(den); final BigInteger num = num ; else
 gcd = BigInteger(1);
 denominator = num; denominator = -den;
final BigInteger gcd = num.gcd(den) - num.gcd;
 numerator = num.gcd(num); denominator = den.gcd(num); } }
 of numerator gcd = BigInteger.gcd(den);
 if (num.gcd(num));
 numerator = num.gcd(num); }
 of the numerator int gcd = num.gcd(den);
 of the denominator int gcd = num.gcd(den);
final BigInteger gcd =  num.divideBy(den);
 double(gcd);
 gcd = num.divide(den); gcd = gcd; else
 numerator = num.gcd(num); denominator = num.exp;
 gcd = numerator.gcd(); den= num.gcd(den);
final BigInteger gcd = num.gcd(); final BigInteger den = den ; else
 of denominator int gcd = num.gcd(den);
 numerator = num.gcd(num); denominator = num.exp());
final BigInteger gcd =  gcd(den);
 numerator = num. divide(num); denominator = den. divide(num); } }
 numerator = num. divide(num); denominator = den. divide(num); } } }
 numerator = num.gcd(num) + denominator; }
final BigInteger gcd =  num.divide2(den);
 numerator = num.gcd(num); denominator = den.gcd(num); } } else
 GCD = BigInteger.ONE.get_gcd(den);
 denominator gcd = 1;
 numerator = num.gcd(num.gegate();)
 denominator = BigInteger.ONE; gcdnum.gcd(den);
 denominator = BigInteger.ONE; gcd;
 denominator = BigInteger.ONE - num;
final BigInteger gcd =  num.gcd2(den);
final BigInteger gcd =  Math.divide(num, den); else
 gcd = num.divide(den); gcd -= num ; }
 denominator = numerator ; double gcd=num.gcd(den);
 gcd = (division);
 denominator = num ; numerator = -den;
 number gcd = num.gcd(den);
 gcd = (dec);
 gcd = num + den;
final BigInteger gcd = num.gcd(den); gcd = gcd(num); else
 denominator = num ; double gcd = -num.gcd(den);
final BigInteger gcd =  num.add(den);
 of the numerator Gcd = num.gcd(den);
 gcd = Math.gcd(noun);
 factor gcd = num.gcd(den);
 numerator = num.gcd(num) - denominator; }
 gcd = bigInteger.ONE;
 gcd = Math.divide(num, den); }
 denominator = BigInteger.ZERO*num.gcd(den);
 GCD=gcd(den);
 denominator = BigInteger.ONE + den;
 gcd = num.divide(den) + denominator; else
final BigInteger gcd = num.gcd(den, num.exponent);
 denominator = BigInteger.ONE ; numerator.gcd(den);
final BigInteger  gcd = (BigInteger) num; else
final BigInteger gcd = num.divide(den, -1); else
 double gcd = -num.gcd(den);
 GCD = BigInteger.NEG.gcd(den);
 gcd = Math.divide(num, den, gcd); else
 numerator = num.gcd(num.gegate();) and
 numerator = num.numeric();
 gcd = num.divide(den, gcd); else
 denominator = num.exp();
final BigInteger gcd =  num.dot(den);
final BigInteger gcd = num.gcd(den) - num.gcd(num); else
final BigInteger gcd = num.divide(den, gcd); else
 gcd = Math.divide(num, den, gcd); }
 gcd = num - den;
 gcd = sign(den);
 gcd = (BigInteger.ONE); num= num.gcd(den);
 denominator = num ; final double gcd= num.gcd(den);
 gcd = (-den);
 gcd = (BigInteger.ONE); den= num.gcd(den);
 of denominator numerator gcd = -num.gcd(den);
 of denominator GCD = num.gcd(den);
 gcd = num.dividegcd(den);
 gcd = num.divide(den, -1); else
 gcd = BigInteger.ONE.exponent();
final BigInteger gcd = num.gcd(); final BigInteger den = den ; }
final BigInteger gcd = num.gcd(den.gcd);
 numerator = num.gcd(num)
 numerator = num.gcd(den); denominator = num.gcd(num) } }
 gcd = num.gcd(); double sign= num.gcd(den);
 gcd = Math.divide(num, den, -1); else
 gcd = num.divide(den, gcd); }
final BigInteger gcd = num.divide(den) + denominator; else
 div(den);
 gcd = num * den;
 division gcd=gcd(den);
 coefficient GCD.gcd(den);
 gcd = num.divide(den); } else
 of two terms gcd=num.gcd(den);
 gcd = num.divide(den, -1); }
 of denominator double gcd = -num.gcd(den);
 of numerator double gcd=num.gcd(den);
 of denominator gcd = 1;
 pow(den);
final  BigInteger gcd = num * den ; else
final  BigInteger gcd = num - den ; else
 denominator = BigInteger.ONE; divide=num.gcd(den);
final BigInteger gcd = num.gcd;
 of division gcd = num.gcd(den);
final BigInteger gcd = num.gcd(den); final BigInteger num; else
final BigInteger gcd = num.gcd(den) + den.gcd(num); else
 of the numerator gcd = 1;
. BigInteger gcd *= num.gcd(den);
 double(num)->gcd(den);
 of the numerator double gcd = -num.gcd(den);
 gcd = num.divide(den); else
final  BigInteger gcd = num ; else
final  BigInteger gcd = num + den ; else
 GCD = -1;
 gcd = num.divide(den); }
 denominator gcd = num;
final  BigInteger gcd = num * den ; }
final BigInteger gcd = num.divide(den, 1); else
 double gcd = ggcd(den);
final BigInteger gcd =  divide(den);
 denominator = num ; double gcd *= num.gcd(den);
 of denominator int gcd = -num.gcd(den);
 double gcdMath.gcd(den);
final  BigInteger gcd = num + den ; }
final BigInteger gcd = num.gcd(den) ; gcd = gcd(num); }
 divgcd;
final BigInteger gcd = num.gcd(); final BigInteger den; else
 in denominator double gcd=num.gcd(den);
 denominator = BigInteger.ONE();
 denominator = num ; }
 = divmod(den);
 of denominator Gcd = num.gcd(den);
final BigInteger gcd = num.divide(den, -1); }
 of the numerator gcd = num;
 denominator = -1;
. BigInteger gcd == num.gcd(den);
final BigInteger gcd = num.divide(den); else
 of denominator gcd = num;
 of the denominator gcd = 1;
 denominator = numerator ;
final BigInteger gcd = num.cd();
 gcd = gcd;
 coefficient GCD=gcd(den);
 of the numerator int gcd = -num.gcd(den);
final BigInteger gcd = num.division();
final BigInteger gcd = num.gcd(den) - num.gcd(num); }
 denominator = num ; final int gcd= num.gcd(den);
 gcd = numerator.divide(den); }
final BigInteger gcd = num.divide(den, gcd); }
 gcd = numerator.divide(den); else
. BigInteger.Gcd= num.gcd(den);
 of the numerator. gcd=num.gcd(den);
final BigInteger gcd = num.divide(den, 0); else
 of the denominator double gcd=gcd(den);
(1);
final BigInteger gcd = num.gcd(den); final BigInteger den; else
final BigInteger gcd = num.gcd(den).gcd(num); else
 Gcd.gcd(den);
 denominator = BigInteger.NONE;
final BigInteger gcd = num.divide(den) - num ; else
final BigInteger gcd = num.gcd(den*num);
final BigInteger gcd = num.divide(den) + denominator; }
final BigInteger gcd = num.gcd(den) ; final BigInteger num = num ; }
final BigInteger gcd = num.divide(dcd) ;
 gcd = -num;
 of denominator double gcd = ggcd(den);
 coefficient Gcd = num.gcd(den);
 numerator = num.numeric;
 of the numerator final double gcd= num.gcd(den);
final BigInteger gcd = num.divide(den); }
 numerator = num.gcd(num); } }
final BigInteger gcd =  bigInteger(den);
 coefficient gcd = 1;
 of 2 gcd = num.gcd(den);
 gcd.gcd(den);
 factor double gcd=num.gcd(den);
 long gcd= num.gcd(den);
 of the numerator. int gcd=num.gcd(den);
final BigInteger gcd = num.gcd(den + 1);
 of two numbers gcd=num.gcd(den);
 of denominator double gcdMath.gcd(den);
final BigInteger gcd =  numerator.cd(den);
final BigInteger gcd = num.gcd(den, num); else
final BigInteger gcd = num.gcd(den) - num;
 of denominator numerator = num ; }
final BigInteger gcd = num.gcd(den, num.exponent));
 of the numerator. BigInteger.ZEROgcd = num.gcd(den);
final BigInteger gcd = num.gcd(den, 1);
 GCD(den);
 coefficient double gcd=num.gcd(den);
final BigInteger gcd = num.divide(dcd); else
 defgcd(den);
 = -1;
 gcd++;
 of denominator
final BigInteger gcd = num.gcd(den, numerator); else
 gcdOf(den);
final BigInteger gcd = num.divide(den); } else
final BigInteger gcd  = num. div ( den ) ; else
 coefficient gcd.gcd(den);
 of the numerator final int gcd= num.gcd(den);
 of denominator numerator = num ; } else
 = divide(den);
 gcd=(num.gcd(den);
Gcd(den);
(num,den);
 of two terms
final BigInteger gcd = num.gcd(); final BigInteger den; final
 divided(den);
final BigInteger gcd = num.gcd(den) + denominator; else
final BigInteger  gcd = num ; }
 numerator = num ; } }
 divide gcd(den);
final BigInteger gcd = num.gcd(den) ; double num = gcd();
(2);
 of denominator numerator GCD = -num.gcd(den);
final BigInteger gcd = num. pow ( den ) ; else
(division);
final BigInteger gcd = num.divide(num);
 = floor(den);
 denominator = num ; } }
 of denominator int gcd *= num.gcd(den);
 (cd);
final BigInteger gcd = num.gcd; final BigInteger den; else
 of denominator. BigInteger.gcd = num.gcd(den);
 of the numerator. BigInteger.Deggcd = num.gcd(den);
(d);
 of denominator g = num.gcd(den);
 of the numerator. BigInteger.Double>gcd = num.gcd(den);
 of the denominator. BigInteger.Deggcd = num.gcd(den);
 of the numerator int gcd *= num.gcd(den);
final BigInteger  gcd();
final BigInteger gcd = num.gcd(den, num.exponent();
final BigInteger  gcd = 1 ; else
 of denominator numerator = num; else
 of the denominator. BigInteger.Double>gcd = num.gcd(den);
 of denominator gcd Math.gcd(den);
final BigInteger gcd = num.divide(dec);
 of the numerator double gcd *= num.gcd(den);
final BigInteger gcd = num.gcd (0);
 of the numerator. final BigInteger.gcd = num.gcd(den);
final BigInteger gcd = num.gcd(den, numerator); }
 of the numerator. final BigInteger(gcd = num.gcd(den);
final BigInteger gcd = num.geq(den); else
 = this(den);
final BigInteger gcd = num.gcd (num);
 of denominator numerator = num ; } }
final BigInteger gcd = num.gcd(den.gcd()); else
final BigInteger gcd = num.gcdBy(den) ;
final  denominator
final BigInteger gcd = num.gcd(den); else
 of the numerator gcd = num ; }
 gcd Math.gcd(den);
 of denominator gcd num.gcd(den);
final BigInteger gcd = num.gcd(decimal);
 of the denominator. BigInteger.gcd = num.gcd(den);
 of the numerator. BigInteger.gcd = num.gcd(den);
 of denominator. BigInteger(gcd = num.gcd(den);
 denominator = num.div(den) ;BigInteger gcd = num.gcd(den);
 of the denominator. BigInteger(gcd = num.gcd(den);
 of the numerator and denominator.
final BigInteger gcd = num.modulus(den); else
 in both terms
. final double gcd= num.gcd(den);
final BigInteger gcd = num.divide(den));
final BigInteger gcd = num.div();
 divides(den);
 of the numerator. BigInteger(gcd = num.gcd(den);
 of the numerator gcd = num ; else
final BigInteger gcd = num.gcd(den.gcd()); }
 of the numerator. final BigInteger2gcd = num.gcd(den);
final BigInteger gcd = num.geq(den); }
 of the numerator, denominator.gcd = num.gcd(den);
 of the numerator. final BigInteger>gcd = num.gcd(den);
(GCD);
. final int gcd= num.gcd(den);
 of the numerator. final BigInteger _gcd = num.gcd(den);
final BigInteger gcd = num.gcd(den); }
 of the denominator final BigIntegergcd = num.gcd(den);
final Gcd;
final BigInteger gcd = num.cd;
final BigInteger gcd = num.gcd(-1);
 of denominator. BigInteger>gcd = num.gcd(den);
 of the numerator and denominator:
. int gcd= num.gcd(den);
 of the denominator.
 double gcd = +num.gcd(den);
final BigInteger gcd = num.gcd(den) - denominator; else
 of the numerator.
final BigInteger gcd = num. gcd ; else
final BigInteger gcd = num.gcd(den) - 2;
. double gcd= num.gcd(den);
 of denominator. BigInteger2gcd = num.gcd(den);
. int gcd *= num.gcd(den);
final BigInteger gcd = num. gcd ; }
. double gcd *= num.gcd(den);
final BigInteger gcd = num.gcdBy(den); else
final BigInteger gcd = num.gcd(den) + denominator; }
 of the two terms
final BigInteger gcd = num.gcd(den); } else
 in the denominator.
. final long gcd= num.gcd(den);
 divide(gcd(den);
 of denominator.gcd = num.gcd(den);
((gcd);
final BigInteger gcd = num.gcd(dnd);
 in the denominator part
($gcd);
final BigInteger gcd = num.digits(); else
 of the numerator, if any.
 of denominators
final BigInteger gcd = num.gcd(); else
 of the numerator,
 in both sides
final BigInteger  gcd = 2
 of denominator final intgcd = num.gcd(den);
final BigInteger gcd = num.gcd(dec);
final BigInteger  gcd = -
final BigInteger gcd =  pow2(den);
final BigInteger gcd =  pow10(den);
 += num.gcd(den);
 double gcd *= num.gcd(den);
final BigInteger  gcd = 1
 of both terms.
 of the numerator. doublegcd = num.gcd(den);
 of the denominator. doublegcd = num.gcd(den);
 of denominator final doublegcd = num.gcd(den);
final BigInteger gcd = num.gcd(nan);
 of the denominator. intgcd = num.gcd(den);
final BigInteger gcd = num.gcd(den) + denominator();
final BigInteger gcd = num.gcd(den) + 1; else
final BigInteger gcd =  max(den);
 of numerator and denominator. else
 double(gb)= num.gcd(den);
 of the numerator, if any,
final BigInteger gcd = num.digits(); }
 in denominator intgcd = num.gcd(den);
final BigInteger gcd = num.gcd($den); else
final BigInteger  gcd ; else
final BigInteger gcd = num.exponent(); else
 of two terms.gcd = num.gcd(den);
 divide=num.gcd(den);
final BigInteger gcd = num.gcd(den) - 1; else
 of denominator.
 of denominator. doublegcd = num.gcd(den);
 of denominator. intgcd = num.gcd(den);
final BigInteger gcd = num.gcd(dof);
 divide(num.gcd(den);
 of the two values
 of the numerator in the exponent.BigInteger gcd = num.gcd(den);
 double.gcd(den);
 of the two numbers
 in denominator. doublegcd = num.gcd(den);
 double[gcd= num.gcd(den);
 in the denominator. finalBigInteger gcd = num.gcd(den);
 factor.gcd(den);
 gecd;
final BigInteger  GCD;
Gcd;
 of denominator.BigInteger gcd = num.gcd(den);
 in denominator.BigInteger gcd = num.gcd(den);
final BigInteger  ghcd
 in denominator. finalBigInteger gcd = num.gcd(den);
final BigInteger gcd = num.gcd(den));
 double ggcd(den);
 GCD;
 of denominator. finalBigInteger gcd = num.gcd(den);
 division.gcd(den);
final BigInteger gcd =  pow(den);
 of denominatorBigInteger gcd = num.gcd(den);
final BigInteger  gcc;
final BigInteger gcd = num.gcd(den)) ; else
final BigInteger  gecd
final BigInteger gcd = num.gcd(den)) ; even
final BigInteger  ge;
 of the denominators.BigInteger gcd = num.gcd(den);
final BigInteger gcd =  greatest(den);
final BigInteger gcd =  biggest(den);
 of denominatorsBigInteger gcd = num.gcd(den);
 double GCD= num.gcd(den);
final BigInteger gcd = num.gcd(den)();
 of denominalsBigInteger gcd = num.gcd(den);
final BigInteger gcd = num.gcd(); }
 gecd= num.gcd(den);
final BigInteger gcd = numd;
final  number.
final  coefficient.
final  factor.
 factor; doublegcd = num.gcd(den);
 double>gcd = num.gcd(den);
final  coefficient:
 factor; intgcd = num.gcd(den);
 double(gcd = num.gcd(den);
 of division.BigInteger gcd = num.gcd(den);
 coefficient.
 factor.
 coefficient;
 factor;
. finalBigInteger gcd = num.gcd(den);
.
final BigInteger gcd = num.gcd(den) {};
,
:
final BigInteger gcd = num.gcd(den) {}
 factor.BigInteger gcd = num.gcd(den);
 number.BigInteger gcd = num.gcd(den);
:n
final BigInteger gcd := num.gcd(den);
final BigInteger gcd: num.gcd(den);
final BigInteger gcd, num.gcd(den);
