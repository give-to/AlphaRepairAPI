 return that.FALSE;
 return UNKNOWN;
 return that.not;
 return that.not();
 return that.not() ;
 return FALSE;
 return this.not();
 return that.not(); }
 return this.not();
 return false
 return this.not(); } } else {
 return that.not(); } } else {
return FALSE; }
 return that.not(); } else {
 return that.notFALSE;
 return that.not(); } } {
 return false;
 return
 return this.not(); } } {
 return this.not(); } else {
 return this.UNKNOWN;
 return false; return that.not;
return  this.not(); return false;
 return that.not(true);
return  this.not(); return UNKNOWN;
 return this.not(); } return false;
 return FALSE; }
 return TRUE; }
 } { } { } { } { } { } { } { } { } { } { } { } { } {
 return!FALSE;
 return that.not(); } return false;
 return that.not()FALSE;
 return that.not(false);
 return false; } return false;
 return this.not(true);
 return this.not() ; }
 return true; }
 return that.isFALSE;
 } { } { } { } { } { } { } { } { } { } { } { } { }
 return this.not(that);
 return this.not()? FALSE : UNKNOWN;
 } { } { } { } { } { } { } { } { } { } { } } { } {
return  that.not(); return false;
 return FALSE; } return false;
return  this.not(); return FALSE;
 } { } { } { } { } { } { } { } { } { } { } { } } {
 return that.not(FALSE;
 } { } { } { } { } { } { } { } { } { } { } { } {} } {
return FALSE.equals(that) ;
return FALSE; return that.not();
 return this.not() || this.FALSE;
 } { } { } { } { } { } { } { } { } { } { } { } } } {
return  that.not(); return UNKNOWN;
 } { } { } { } { } { } { } { } { } } { } { } { } {
 return false; }
 return this.not(...);
 return this.not(); } return UNKNOWN;
return FALSE.equals(that.not());
 return false; } return undefined;
 return this.not()? TRUE:FALSE;
 } { } { } { } { } { } { } { } { } } { } { } { } { }
 return that.not()||FALSE;
 return NOTFALSE;
return  this.not(); return this.not();
return  that.not(); return FALSE;
return FALSE.not();
 return this.not;
 } { } { } { } { } { } { } { } { } { } { } { } { } ;
return  this.not() && that.not() ;
 return this.not()||FALSE;
 return that.not() {
 return this.not(false);
 return "true"; } } {
 return true; } } else {
 return "true" ;
return  not() { return that.not() ;
 return this.not()? false : UNKNOWN;
return FALSE.equals(that.not();
 return that; }
 return TRUE;
 return that.not(); } return true;
 return this.notFALSE;
 return that.not() } } {
 return this.not() && this.FALSE;
 return false; } return!FALSE;
 return that.notOfFALSE;
 return this.not() ; return this.true;
 return that.not(); } ### FALSE {
 return this.not()==FALSE;
 return false; } return true;
return  this.not(); if (!unknown)
 return that.not()|FALSE;
return FALSE; return UNKNOWN;
 return this.not()? TRUE : -FALSE;
 return that.not() } {
 return this.not()? FALSE : -FALSE;
 return this.not()? FALSE : this.FALSE;
return  not() { return that.not(); }
 return that.notAsFALSE;
 return this.not() || undefined;
return FALSE.equals(that).not();
return  this.not() ; return "true"; }
 return (Boolean)FALSE;
 return this.not() === false;
 return this.not() ; return this.not;
return  this.not(); return true;
 return this.not() ||!FALSE;
return  not() { return that.not() }
 return this.not() ; return "true";
 return true;
 return this.not() ; } return FALSE;
 return FALSE
return FALSE.not()? FALSE : UNKNOWN;
 return this.not()? FALSE : #FALSE;
 return this.not(); } else { return this.not(); } else {
 return "true"; }
 return this.not()? FALSE :!FALSE;
 return false.not();
 return false; }
 return this.not(); } else { return this.not(); }
 return that.notNull();
 return TRUE;
 return false; return undefined;
 return this.unKNOWN;
 return FALSE; } } { } { } { } { } { } { } { } { } { } { } { } { }
 return NOT NULL;
 return false; } } { } { } { } { } { } { } { } { } { } { } { } { }
 return false; } } { } { } { } { } { } { } { } { } { } { } { } {
 return this.not()? TRUE : this.FALSE;
return FALSE; return FALSE;
 return FALSE; } } { } { } { } { } { } { } { } { } { } { } { } {
 return this.not(); } else { return this.true(); }
 return this.not()? false : this.FALSE;
 return this.not(); } else { return this.and(); }
return FALSE; } else { return that.not() ;
 return undefined;
 return that.not(); } return #FALSE;
 return this.not(); } else { return this.not(); } }
 return that.not() ||!FALSE;
 return this.not() || NOTFALSE;
 return this.not(); } else { public boolean not() {} {
 return false; } } { } { } { } { } { } { } { } { } { } { } } { } {
return FALSE.not() ; return FALSE.not();
 return FALSE; } } { } { } { } { } { } { } { } { } { } { } } { } {
 return this.not()? true : this.FALSE;
 return FALSE;
return FALSE; return false;
 return this.not() == -FALSE;
return FALSE.equals(boolean);
return FALSE; } else { return this.not() ;
 return this.not(); if (unknown) returnFALSE;
 return this.not(); } else { public TernaryValue {
return FALSE; return TRUE;
 return FALSE; } } { } { } { } { } { } { } { } { } { } { } { } { {
 return "false"; }
 return this.not(); } else { return this. not(); } else { return this. not(); } else {
return FALSE; } else { return that.not(); }
 return that.
 return this.not(); } public boolean not() {} {
 return this.not(); } else { return this.and();
 return this.not(); } else { return this.not();
return FALSE.not() && FALSE.or(that);
return FALSE.not() ; return UNKNOWN;
 return true
return FALSE; return this.not();
return FALSE; if (!unknown)
return FALSE; } else { return "false"; }
 return this.not(); } else { return this.true();
 return this.isFALSE;
 return this.not(); } } * else {
 return this.not(); } else { return false ; } else { return true ; } if ( unknown ) {
return FALSE.not() && FALSE.xor();
 return this.not(); } else { return this.not(); } else
 return this.not(); } else if (! this ) {
 return this.not(); } else if (! ( this. not ) ) { return false ; } if (! unknown ) {
 return this.not(); } else { if (unknown) {
 return this.not(); } else if (! ( this. not ) ) { return false ; } public boolean not ( ) {
return FALSE; } else { return this.not(); }
 return this.not(); } else if (! ( this. not ) ) { return FALSE ; } if (! unknown ) {
 return this.not(); } else if (! ( this. not ) ) { return false ; } public boolean not (...) {
 return this.not(); } else { return false ; } else { return true ; } if (! false ) {
 return this.not(); } else { return this.not() } else {
 return this.not(); } else { return this. not(); } else { return this. or(); } else {
 return this.not(); } else { return this.not(); } else { return this.not(); } }
 return that.not(); } } * else {
 return this.not(); } else { return this. not(); } else { return this. not() } else {
 return this.not(); } else { return false ; } else { return true ; } if (! true ) {
 return this.not(); } else if (! ( this. not ( ) ) ) {
 return this.not(); } else { return false; } else { return this. not(); } else {
 return this.not(); } public boolean not() { {
 return this.not(); } else if ( false ) { return this. not ( ) ;
 return this.not(); } else if (! this. isTrue ( ) ) {
return FALSE; if (unknown) return FALSE;
 return false; } } { } { } { } { } { } { } { } { } { } { } { } ;
 return that.not(); } } { {
 return this.not(); } else { return this. not(); } else { return this. not() ; }
 return true;
 return this.not(); } else if ( false ) { return this.not(); }
 return FALSE; } } { } { } { } { } { } { } { } { } { } { } { } ;
 return false; } } { } { } { } { } { } { } { } { } { } } { } { }
 return this.not() } else { return this.not() } }
 return this.not(); } else if (! ( this. not ) ) { return false ; } public boolean not() { {
 return this.not(); } } { {
 return this.not(); } public boolean not (...) {
 return this.not(); } else { return this. not(); } else { return this. true ;
return FALSE.equals(that); }
 return this.not(); } else { return this. not(); } if (! true ) {
 return this.not(); } else { return this. not(); } if (! TRUE ) {
 return this.not(); } else if (! this. not ( that ) ) {
 return this.not(); } else if ( this. not ) { return this. not ;
 return this.not(); } else { return this ;
 return this.not(); } else if ( false ) { return this.not(); } else
 return this.not(); } public boolean not()() {
 return this.not(); } else if (! ( this. not ( ) ) {
 return this.not(); } else { return this. not(); } else { return this. not();
return FALSE; } default:
 return this.not(); } else { return true; }
return FALSE; if (!unknown);
 return this.not(); } else { return this. not(); } else { return this. false ;
 return this.not(); } else { return this.not(); } else { return this.not(); } else
 return (String)FALSE;
return FALSE; if (!unknown;
 return this.not(); } else { return true;
 return this.not(); } else { return this. not(); } public boolean not() { {
 return this.not(); } else { return this. not(); } public boolean not() {} {
 return this.not(); } else { return this.not(); } } {
 return this.not(); } else { return this. not(); } if (! this ) {
 return this.not(); } else { return this. not(); } if ( this. not ) {
 return this.not(); } else { } } { public TernaryValue {
 return this.not(); } else { return this. not(); } else { return this. and();
 return this.not(); } else { return this.not(); } default {
 return this.not(); } else { return false;
 return that.not(); } else { return FALSE;
 return -FALSE;
return FALSE; false;
 return this.FALSE;
 return this.not(); } else { } } { public boolean not() {} {
 return this.not(); } else { return false; } else { return true; } else { } }
 return this.not(); } else { return false ; } else { return true ; } } else { {
 return that.not(); } else { } } { public TernaryValue {
return FALSE; if (unknown)
 return this.not(); } else { } } { public boolean not()() {
 return this.not(); } } else { {
return FALSE; return "FALSE";
return FALSE; return "false"; }
return FALSE; } }
 return that.not(); } } else { {
 return this.not;
return FALSE; } } {
return FALSE; }...
return FALSE; default:
 return False;
 return FALSE!;
 return notFALSE;
 return false.not;
 return TRUE
 return undefined.not;
 } {
 return undefined
 return NONFALSE;
 return "false";
 {
 return NONE;
 return UnKNOWN;
 return That.FALSE;
 }
 return NKNOWN;
return FALSE! }
...
 } ;
 }
 if false
 return
 if not
 if undefined
 false
