if (that) {
 if (that instanceof UnionType) {
 if (instanceof UnionType) {
 if (UnionType) {
if (that)
if (that instanceof  Union) {
if (that!= null) {
 if (isUnionType) {
 if (that.instanceof UnionType) {
if (that instanceof  Union)
if (that.testForEquality(this) {
if (that.testForInequality(this) {
if (that instanceof UnionType && that instanceof Union) {
 if (that instanceof UnionType) { TypePair p = that.getTypesUnderInequality(this); } else
if (that instanceof UnionType || that instanceof Union) {
 switch (this.testForEquality(that)) { case FALSE: return new TypePair(null, null); }
 if (that instanceof UnionType) { TypePair p = that.getTypesUnderInequality(); } else
 if (that instanceof UnionType) { TypePair p = that.getTypesUnderInequality(); }
 if (that instanceof UnionType) { TypePair p = that.getTypesUnderInequality(this); }
 if (that.UnionType) {
if (that.testForInequality) {
 switch (that.testForEquality(that)) { case TRUE: return new TypePair(null, null); }
 switch (that.testForEquality(that)) { case FALSE: return new TypePair(null, null); }
 switch (that instanceof UnionType) { return new TypePair(null, null); }
 switch (this.testForEquality(that)) { case TRUE: return new TypePair(null, null); }
if (that instanceof UnionType && that instanceof UnionType) {
 if (that instanceof UnionType) { return new TypePair(null); }
 if (that instanceof UnionType) { return new TypePair(null); } else
 switch (that instanceof UnionType) { TypePair p = that.getTypesUnderInequality(this); } else
 switch (this.testForEquality(that)) { case FALSE: return new TypePair(null); }
if (that instanceof UnionType && that instanceof JSType) {
if (that instanceof UnionType || this instanceof UnionType) {
 if (that instanceof UnionType) { return new TypePair(null, null); }
 switch (this instanceof UnionType) { return new TypePair(null, null); }
 switch (that instanceof UnionType) { return new TypePair(null, that); } else
 switch (that instanceof UnionType) { return new TypePair(null); }
 switch (that instanceof UnionType) { return new TypePair(null); } else
 switch (this.testForEquality(that)) { case FALSE: return new TypePair(null, null); } else
 switch (this.testForEquality(that)) { case NULL: return new TypePair(null); }
 switch (that instanceofUnionType) {
 switch (that.testForEquality(that)) { case FALSE: return new TypePair(null); }
 if (that instanceof UnionType) { return new TypePair(null, that); } else
 switch (this instanceof UnionType) { return new TypePair(null); }
 switch (this.testForEquality(that)) { case TRUE: return new TypePair(null, null); } else
if (that instanceof UnionType && this instanceof UnionType) {
if (that instanceof UnionType || this instanceof Union) {
 switch (this.testForEquality(that)) { case FALSE: return new TypePair(null); } else
 if (that instanceof UnionType) { return new TypePair(); } else
 switch (that instanceof JSUnionType) {
 (that) {
 if (that instanceof UnionType) { return new TypePair(null, that); }
 switch (this.testForEquality(that)) { case NULL: return new TypePair(null); } else
 switch (that.testForEquality) {
 switch (that.testForEquality(this) {
 switch (this instanceof UnionType) { return new TypePair(null); } else
 switch (that) {
 switch (this.testForEquality(that) {
if (that instanceof UnionType && that!= null) {
 switch (that.testForEquality(that)) { case FALSE: return new TypePair(null); } else
 switch (that instanceof UnionType) { return new TypePair(null, null); } else
if (that != null)
 switch (that!= null) {
if (that instanceof UnionType)  { return new TypePair(null); }
 switch (that.testForEquality(that) {
 if (that instanceof UnionType) { TypePair p = that.getTypes(this); }
if (that.testForEquality(that) {
if (that.isUnion(this) {
 switch (that.instanceof UnionType) {
if (that.testForEquality(this)) {
 if (that instanceof UnionType) { TypePair p = that.getTypes(null); } else
if (that!= this) {
 if (that instanceof UnionType) { TypePair p = that.getTypes(null); }
 switch (that.testForEquality(UnionType) {
 if (that instanceof UnionType) { TypePair p = that.getTypeA(); } else
 switch (this.testForEquality(that)) { case FALSE: return new TypePair(); } else
 if (that instanceof UnionType) { TypePair p = that.getTypes(this); } else
 switch (this.testForEquality(that)) { case FALSE: case UNKNOWN: }
 switch (this.testForEquality(that)) { case NULL: return new TypePair(); } else
 switch (this.testForEquality(that)) { case 0: return new TypePair(null); } else
 if (that instanceof JSUnionType) {
 switch (this.testForEquality(that)) { case FALSE: case UNKNOWN:
 switch (that.testForEquality(isUnionType) {
 if (that instanceof UnionType) { TypePair p = that.getTypeA(); }
if (that instanceof UnionType || this instanceof UnionType || that instanceof Union) {
 switch (that.testForInequality) {
if (that.isUnion(this)) {
 switch (that instanceof JUnionType) {
 if (that instanceof UnionType) { return new TypePair(this); } else
 switch (that instanceof UnionType) { return new TypePair(); } else
 switch (this.testForEquality(that)) { case FALSE: case UNKNOWN: } else
 if (that instanceof UnionType) { TypePair p = that.getTypesUnderInequality(this); } else { }
 switch (that instanceof Union) { if (that instanceof UnionType) {
 if (that instanceof UnionType) { TypePair p = that.getTypesUnderInequality(this); } else {
 switch (this instanceof UnionType) && (that instanceof UnionType) {
 if (that instanceof UnionType) { TypePair p = that.getTypesUnderInequality(this); } other types
 switch (this instanceof UnionType) { return new TypePair(); } else
 switch (this instanceof UnionType &&!that instanceof UnionType) {
 if (that instanceof UnionType) { TypePair p = that.getTypesUnderInequality(this); } else,
 switch (that instanceof UnionType) { TypePair p = that.getTypesUnderInequality(this); } else { }
 switch (this instanceof UnionType) { TypePair p = this. getTypesUnderInequality(that); } else { }
if (this.testForInequality(that) {
 switch (that instanceof JsUnionType) {
 switch (this instanceof UnionType&&that instanceof UnionType) {
 if (that instanceof JsUnionType) {
if (this.testForEquality(that) {
 switch (that.testForEquality().isUnionType) {
 if (that instanceof UnionType) { return new TypePair(null)); }
if (that.testForEquality(this))) {
if (that instanceof UnionType || that instanceof UnionUnion) {
 switch (this instanceof UnionType) { if(that instanceof UnionType) {
 if (that instanceof UnionType) { TypePair p = that.getTypesUnderInequality(this); } else { else
if (that instanceof UnionType && this. testForEquality(that).union) {
 switch (this.testForUnion(that) {
 switch (this.testForEquality) {
 switch (that instanceof Union) {
 if (that instanceof UnionType) { return null; } else
if (that instanceof UnionType && this instanceof Union) {
if (that instanceof UnionType && this instanceof JSType) {
if (that instanceof UnionType)  { if (that instanceof OtherType) {
if (that.testForEquality()that) {
 if (that instanceof JUnionType) {
 switch (that.isUnionType) {
 switch (that instanceof UnionType) if (that instanceof UnionType) {
if (that instanceof unions) {
if (that.testForInequality(that) {
 if (this instanceof UnionType) { return this.typeA; }
 switch (that.type instanceofUnionType) {
 switch (that.testForEquality(thatUnionType) {
 if (this instanceof UnionType) { return null; } else
 switch (this.testForEquality(that)) { case FALSE:
 switch (that.testForInequality()instanceof UnionType) {
 switch (that.testForEquality(this)) { case FALSE:
 switch (this.testForEquality(that)) { case NULL: return new TypePair() } else
 if (that instanceof UnionType) { return that.typeA; }
 switch (this.testForEquality(UnionType) {
 if (this instanceof UnionType)
 switch (this.testForEquality(thatUnionType) {
 switch (that.testForEquality(thisUnionType) {
if (that instanceof UnionType && this instanceof UnionType && that instanceof Union) {
if (that.isUnion(this, that)) {
 switch (this instanceof UnionType) switch (that instanceof UnionType) {
 switch (that.testForUnion(this) {
 switch (this.testForEquality(that)) { case false:
 if (thatIsUnionType) {
 switch (this.isUnion(that) {
 switch (this.testForEquality(that)) { case UNKNOWN: }
if (that instanceof UnionType && this!= that) {
 switch (this.testForEquality(that)) { case TRUE:
if (that instanceof Union) { final
 switch (that.testForEquality(this)) { case TRUE:
 if (this instanceof UnionType) { return this.typeB; }
 switch (that.getType(this)instanceof UnionType) {
if (that instanceof UnionType) { final
 switch (that instanceof UnionType) { case null: return null; }
 switch (that.testForInequality()){
 if (this instanceof UnionType) { return this; } else
 if (that instanceof UnionType) { return that; } else
if (that instanceof UnionTypes) {
 switch (this instanceof UnionType) || (that instanceof UnionType) {
 switch (that.isUnion()) {
 switch (this!= that) {
if (that instanceof UnionType) { return new TypePair(null);
if (that instanceof UnionType && that instanceof JSTypeUnion) {
if (that.isUnionType) {
if (that instanceof UnionType && this instanceof UnionType && that!= null) {
 switch (this.testForEquality(that)) { case FALSE: } else
if (that instanceof UnionType || this instanceof JSType) {
if (that instanceof UnionType || it instanceof UnionType || that instanceof Union) {
 switch (that!= this) {
 switch (that instanceof UnionType) { if(that instanceof UnionType) {
 switch (that.isAnnotationOfUnionType) {
 switch (that.testForEqualityInUnionType) {
if (that.isUnion(this)) { final
if (that instanceof UnionType && that instanceof OtherType) {
if (that instanceof UnionType && this. testForEquality(that))) {
if (that!= null) { final
if (that instanceof UnionType || that instanceof OtherType) {
 switch (that.getType(that)instanceof UnionType) {
 switch (this.type!= null) {
if (that.isUnion(this))) {
if (that instanceof UnionType)  { if (that instanceof UnionUnion) {
if (that instanceof UnionType) { if (that instanceof OtherType)
if (that instanceof UnionType || this instanceof UnionType || this instanceof Union) {
 if (this instanceof UnionType) { } else
 if (this instanceof UnionType) {
 switch (that.isInstanceOfUnionType) {
 if (this instanceof UnionType &&!that instanceof UnionType) {
if (that instanceof UnionType) { if (that!= this) {
 switch (this instanceof UnionType && *that instanceof UnionType) {
if (that instanceof UnionType || that instanceof JSType) {
 if (unionType) {
 if (this instanceof UnionType&&that instanceof UnionType) {
 if (that instanceof JSType.UnionType) {
if (that instanceof UnionType || this instanceof UnionType || that == this) {
if (that instanceof UnionType) { if (that instanceof UnionUnion)
 if (that.typeinstanceof UnionType) {
if (that instanceof UnionType && this. testForEquality(that)) {
 switch (that.testForEqualityForUnionType) {
if (that instanceof UnionType || that instanceof UnionType) {
 if (this instanceof UnionType) { if(that instanceof UnionType) {
 for (JSType that: that) {
if (that .isUnion(this) == true) {
if (that instanceof UnionType) { return new UnionType(that); }
if (that instanceof UnionType && that instanceof JSSubtype) {
 switch (that.testForEquality()instanceof UnionType) {
if (that instanceof UnionType && this instanceof UnionType) { if (that) {
if (that instanceof UnionType)  { return (TypePair) that; }
if (that instanceof UnionType || this == that) {
 switch (that!== this) {
 switch (that.testForInequality().instanceof UnionType) {
if (that instanceof UnionType) { if (that!= null) {
 switch (that.testForEquality(); thatinstanceof UnionType) {
if (that instanceof UnionType && that instanceof JSTypeUnionType) {
 switch (this.testForEquality(that)) { case FALSE: }
if (that instanceof UnionType || this instanceof UnionType || that == null) {
if (that instanceof UnionType || it instanceof UnionType || this instanceof Union) {
if (that instanceof UnionType) { if (that!= null)
if (that instanceof JSType) {
 switch (that instanceof Union) if (that instanceof UnionType) {
 switch (this.testForEquality();thatinstanceof UnionType) {
if (that instanceof UnionType || this instanceof UnionType || this == that) {
if (that instanceof UnionType && that instanceof JSMember) {
if (that.isUnion(this, that) {
 switch (that instanceof UnionType &&!that instanceof UnionType) {
 switch (that.getType().isUnionType) {
 switch (that.isPrimitiveUnionType) {
 switch (that.getTypeA()instanceof UnionType) {
if (that instanceof UnionType || this instanceof JSMember) {
if (that.isUnionType(this)) { final
 if (unionTypes) {
 for (JSType that exists) {
if (that instanceof UnionType || this instanceof UnionType || that!= null) {
if (that.isUnion(this)) return null;
 switch (this instanceof UnionType) if(that instanceof UnionType) {
 switch (this.testForEquality(that)) { } else
 switch if (that.instanceof UnionType) {
 switch (this.typeinstanceof UnionType) {
 if (that instanceof JSTypeUnionType) {
 switch (that!= UNKNOWN) {
if (that instanceof UnionType || this instanceof UnionType(that))) {
if (that.hasInequality) {
if (that.isUnionType(this)) {
if (that == this) {
if (that instanceof UnionType && that instanceof JSCype) {
if (that.testIsUnion(this) {
if (that.isUnionType()) {
 if (that.getType(this)instanceof UnionType) {
if (that.unionTypes) {
if (that instanceof UnionType) { if (that == this) {
if (that instanceof UnionType || this instanceof UnionType) { if (that) {
if (that instanceof UnionType) { return null; }
 if (this instanceof UnionType) { }
if (that instanceof UnionType && this instanceof UnionType && that!= this) {
 if (that instanceof UnionType) { if(that instanceof UnionType) {
if (that instanceof UnionType && this instanceof JSMember) {
 switch (that.getType(0)instanceof UnionType) {
 if (this instanceof UnionType&&(that instanceof UnionType) {
 if (that instanceof UnionType) { } else
 switch (that.getTypeA().instanceof UnionType) {
 switch (this instanceof UnionType) { switch(that instanceof UnionType) {
 if this instanceof UnionType && (that instanceof UnionType) {
 switch (this.testForEquality(that)) { }
 if (this instanceof UnionType(that instanceof UnionType) {
 if (that.testForInequality()){
if (that instanceof UnionType || this instanceof UnionType || that instanceof) {
 switch (that.typeA.instanceof UnionType) {
if (that instanceof UnionType && that instanceof UnionTypeInequality) {
if (that .isUnionType(this)) return null;
if (that instanceof UnionType && that instanceof JSSubType) {
if (that.testForEquality) {
 if (that(that)instanceof UnionType) {
 switch (that instanceof JSTypeUnionType) {
 for (JSType that :that)){
if (that instanceof  UnionType) { if (that!= this)
if (that instanceof UnionType || that instanceof JSCleanType) {
if (that instanceof UnionType && that instanceof UnionType[0]) {
if (that instanceof UnionType) { if (that instanceof Union)
 switch (this instanceof Union&&that instanceof UnionType) {
if (that instanceof UnionType || that instanceof JSCype) {
if (that instanceof UnionType || this instanceof JSCype) {
if (that.isUnion(this, that))) {
 switch (this == that) { if(that instanceof UnionType) {
if (that instanceof UnionType && that instanceof JSCleanType) {
if (that!= this) { final
 switch (that instanceof JCUnionType) {
 switch (this instanceof UnionType|that instanceof UnionType) {
 switch (this.typeBinstanceof UnionType) {
 switch (that.typeAinstanceof UnionType) {
 switch (this.typeA.instanceof UnionType) {
if (that.isUnion(this);) {
if (that instanceof unions) { final
 switch (this.test(that)instanceof UnionType) {
 if (this instanceof UnionType) { else
 switch (this.typeAinstanceof UnionType) {
 if (thisIsUnionType) {
if (that .isUnion(this, that)) { final
 if (that instanceof UnionType) { else
 switch (that instanceof UnionType) { case null: }
 if (that instanceof UnionType) { }
if (that instanceof UnionType && this instanceof UnionType && this!= that) {
 switch (that.getType ()instanceof UnionType) {
 switch (this instanceof UnionType) { case null: }
 switch (this.isUnionType) {
 switch (that.UnionType) {
if (that.union) {
 if (unions) {
if (that instanceof UnionType || this instanceof JSMultType) {
if (that instanceof UnionType || this instanceof JSCleanType) {
 switch (that.typeBinstanceof UnionType) {
if (that.isUnion()) {
 if (this instanceof Union) if(that instanceof UnionType) {
if (that.isUnionType()) { final
 if (this instanceof UnionType) else
if (that instanceof UnionType || that instanceof JSMultType) {
 if (this instanceof UnionType
if (that instanceof UnionType || this instanceof UnionType(that)) {
if (that instanceof  UnionType) { return that.type; }
if (that.union!= null) {
 if (this instanceof Union)&&(that instanceof UnionType) {
if (that instanceof UnionType && it instanceof UnionType) {
 if (that == thisinstanceof UnionType) {
 are equal if (that instanceof UnionType) {
 switch (that.getType().instanceof UnionType) {
if (that) { final
if (that instanceof UnionType || it instanceof UnionType) {
 for (JSType that){
if (that instanceof UnionType && that instanceof JSCriminator) {
if (that!= this)
if (that instanceof UnionType || that instanceof UnionType(this)) {
if (that instanceof UnionType || that == this) {
if (that instanceof UnionType && that instanceof UnionType.UnionType) {
if (that instanceof UnionType) { if (that) {
 if (that instanceof unionsType){
if (that instanceof UnionType && other instanceof UnionType) {
 if (this instanceof UnionType) return null;
 if (that instanceof ConjunctionType) { } else
 for (that!= null){
 if (this instanceof Union)
if (that instanceof UnionType && that!= this) {
if (that!= this.type) {
if (union) { final
 switch (this.typeB.instanceof UnionType) {
 if (that instanceof UnionType) return that; else
 switch (that) { if (that instanceof UnionType) {
 switch (this instanceof Union|that instanceof UnionType) {
if (that instanceof UnionType && this. testForEquality(that).exclusive) {
 if (that instanceof Union)
 if (that.typeA.instanceof UnionType) {
 for equality if (that!= null) {
 switch (this instanceof UnionType) { case 0: }
 if (this instanceof UnionType) { } else {
if (that instanceof  UnionType) { return null;
if (that instanceof UnionType && this. testForEquality(that).type) {
 if (this instanceof UnionType) return null; else
 if (that instanceof Union)){
if (that instanceof UnionType || other instanceof Union) {
if (that instanceof UnionType || this instanceof JSMultion) {
 if (this.UnionType) {
 if (that instanceof UnionType)
if (that instanceof  UnionType) { return that; }
if (that.isUnionType(this))) {
 for (UnionType that) {
if (that instanceof  Union) { return null; }
 switch (this instanceof Union,that instanceof UnionType) {
if (that instanceof UnionType && other instanceof Union) {
 switch (this!= that) if(that instanceof UnionType) {
if (that is not null) {
if (that.isUnionType() { final
if (that instanceof  UnionType) { return that.typeA;
if (that instanceof  JSTypeUnion) {
 if (that instanceof Union) else
if (that instanceof UnionType && that instanceof Type) {
if (that instanceof UnionType || this!= that) {
 if (that instanceof Union) { else
if (that instanceof UnionType || it instanceof Union) {
 if (that.isUnion())){
 if (that instanceof UnionType) {
 if (that instanceof Union) { } else
 for (that!= this){
 if (that instanceof UnunionType) { }
 switch (that) { } if(that instanceof UnionType) {
if (that instanceof UnionType) { if (that instanceof UnionUnion())
if (that instanceof  JSType) { final
 if (that instanceof ConjunctionType) { }
 if (that instanceof JSTypesUnionType) {
if (this instanceof Union) {
if (that .isUnionType(this)) return {};
if (that.isUnion(this))) { final
if (that instanceof UnionType && that instanceof UnionTypeInexception) {
 if (that instanceof Union) {
if (that instanceof UnionType && it instanceof Union) {
if (that instanceof UnionType || that!= null) {
if (that instanceof  UnionType) { return that.typeA }
 switch (this.testForType(that instanceof UnionType) {
if  inequality is observed { final
 for (UnionType that of this)
if (that instanceof UnionType) { if (that instanceof UnionType
 if (that instanceof Union) { }
 if (!isUnionType) {
if (that instanceof UnionType || that == null) {
 are always equal if (that instanceof UnionType) {
if (this!= that) {
if  inequality is observed {
 if (this instanceof UnionTypes
 for (this!= that){
 switch (unions) {
if  inequality { final
 if (!that){
if (that instanceof  UnionType) return null;
 if (this.that instanceof UnionType) {
 are not equal if (that instanceof UnionType) {
 if (useUnionType) {
if (that instanceof UnionType || that instanceof Type) {
 if (!unionType) {
if (that instanceof  Union) { return that; }
 switch (this == that.that instanceof UnionType) {
if (that instanceof  JSTypeUnion) { final
if (that instanceof  UnionTypes) { final
if (that instanceof UnionType && other!= null) {
 if (this &&!that instanceof UnionType) {
if (that instanceof UnionType || UnionUnion) {
if (that instanceof UnionType) { return that.type;
if (that instanceof  unions)
if (this instanceof that) {
 if (hasUnionType) {
 are equivalent if (that instanceof UnionType) {
 are special if (that instanceof UnionType) {
if  inequality is observed *
 switch (this &&!that instanceof UnionType) {
 if (!union) {
if (that instanceof UnionType &&!union) {
 if (this&&that instanceof UnionType) {
if (that instanceof  Union) { return null; } else {
 switch (this!= null &&that instanceof UnionType) {
if (that instanceof  UnionType) return that;
 if (supports){
if (that instanceof UnionType && this == that) {
 switch (that) if (that instanceof UnionType) {
if (that instanceof UnionType) { return that.type };
 if (this.instanceof UnionType) {
 are special case if(that instanceof UnionType) {
 switch (this == null &&that instanceof UnionType) {
if (that instanceof  UnionType) { return null; } final
 are different types if(that instanceof UnionType) {
 switch (this instanceof (that instanceof UnionType) {
if (that instanceof  Conjunction) { final
if (that ).union {
if (that instanceof UnionType) { return that.type }
 are equivalent types if(that instanceof UnionType) {
 if (that &&!that instanceof UnionType) {
 are special cases if(that instanceof UnionType) {
if (that instanceof  UnionType) return {};
: if (that instanceof UnionType) {
if (that instanceof  UnionType) { return null};
 if (that)){
 are the same type if(that instanceof UnionType) {
if (that instanceof  UnionType) { return null; };
 are special case
 if (!thatinstanceof UnionType) {
if (that instanceof  UnionType)
 are not equal types if(that instanceof UnionType) {
if (that instanceof UnionType || UNKNOWN) {
if (that instanceof  UnionType) { return that; } final
if (that instanceof  UnionType) { return this; } final
 are not equal to types if(that instanceof UnionType) {
. if (that instanceof UnionType) {
if  (that instanceof Union {
 are always equal types if(that instanceof UnionType) {
if (that instanceof UnionType || otherType) {
if (that instanceof  UnionType) { return null; } {
 are not equal to anything if(that instanceof UnionType) {
 if (supports()){
 are not equal to themselves if(that instanceof UnionType) {
 are not equal to null if(that instanceof UnionType) {
 are special cases
if (that instanceof UnionType || unionUnion) {
if (that instanceof  Union()) {
if (that instanceof UnionType) { return null }
 are the same types if(that instanceof UnionType) {
 switch (!null) {
 are always equal to null if(that instanceof UnionType) {
 are equal
 of the given type { final
 are different if(that instanceof UnionType) {
 of the given type else{
 are immutable if(that instanceof UnionType) {
if (that instanceof UnionType) return this;
if (that instanceof UnionType &&!exclusive) {
 are always equal. if(that instanceof UnionType) {
 of this and that { final
if (that).
 of the two types { final
 are special
 are already checked above
if  equality is observed {
 are equal else{
 if if (that instanceof UnionType) {
 must be equal types
 while (thatinstanceof UnionType) {
 of the same type{
 for equality *else{
 are not equal to other types {
 are equivalent
if  inequality follows {
 of this and the given type {
if (that instanceof UnionType && otherType) {
 are already checked *
 are not equal to themselves
if  inequality exists { final
 of this and that {
if (that instanceof UnionType ||!union) {
 must be equal to themselves
 of the given type {
if (that instanceof UnionType &&!equality) {
 if unionsTypes{
 if ($thatinstanceof UnionType) {
 all have the same type.
if (that instanceof UnionType &&!null) {
 for equality else{
if  inequality observed {
 all have the same type?
if  { final
 if (!UnionType) {
if  inequality {
 are not considered for equality *
 are not considered for inequality *
 types if(that instanceof UnionType) {
if (union) {
 of this and the given type.
 are equivalent types
 of this and that types {
 of this and that with this *
 are not considered as inequality *
if (unionable) {
 are not equal to other types.
 must be equal *
 if inequality else{
 are always equal *
 of the given type *
 of this and that *
 only if(that instanceof UnionType) {
 are equal.
if (that))
 if unions types{
 are equal types
 are the same.
 for equality { final
 of this type {
 must be equal to types
 are not equal to null
if  inequality observed *
 are not equal to itself
 (!that) {
 if ((instanceof UnionType) {
if (this) {
 iff (that instanceof UnionType) {
 of the given object {
 if thatinstanceof UnionType) {
 are the same {
if (that {
if (that instanceof  Union())
 of the types {
if (either) {
 if () {
?else{
, that) {
.else{
 synchronized (UnionType) {
 are immutable
 switch (UnionType) {
if (that instanceof UnionType()) { final
 else
 are compatible
 if (_instanceof UnionType) {
if  needed {
if (that instanceof UnionType)) { final
if (that instanceof UnionType()) {
if  necessary {
if (that instanceof UnionType { { final
.try{
 are types{
if (that instanceof UnionType...) {
if (that instanceof UnionType)) {
 only
if (that ) final
 types while(that instanceof UnionType) {
 only while(that instanceof UnionType) {
if (that instanceof UnionType)  {\ final
if (there) {
