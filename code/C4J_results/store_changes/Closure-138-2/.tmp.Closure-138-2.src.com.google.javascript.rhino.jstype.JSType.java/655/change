if (that) {
 if (that instanceof UnionType) {
 if (instanceof UnionType) {
if (that)
if (that.testForEquality(this) {
if (that instanceof  Union) {
 if (UnionType) {
if (that!= null) {
 if (that.instanceof UnionType) {
 if (isUnionType) {
if (that.testForEquality(this)) {
if (that.testForEquality) {
if (that instanceof  Union)
 (that) {
if (that.testForEquality(this))) {
if (that instanceof UnionType && this instanceof UnionType) {
if (that instanceof UnionType || that instanceof Union) {
 if (that instanceof UnionType) { TypePair p = that.getTypesUnderEquality(this); } else
if (that.testForUnion(this) {
 if (that instanceof JSUnionType) {
 if (that instanceof UnionType) { TypePair p = that.getTypesUnderEquality(this); }
if (that instanceof UnionType || this instanceof UnionType) {
 switch (that.testForEquality(UnionType) {
 if (that instanceof UnionType) { TypePair p = that.getTypesUnderEquality(); } else
if (that instanceof UnionType || this instanceof UnionType || that instanceof Union) {
 if (that.UnionType) {
 if (that instanceof UnionType) { return new TypePair(this, that); } else
 if (this instanceof UnionType) { TypePair p = this.getTypesUnderEquality(that); }
 switch (that) {
 if (this instanceof UnionType) { TypePair p = this.getTypesUnderEquality(that); } else
if (this.testForEquality(that) {
if (that instanceof UnionType || this instanceof Union) {
 if (that instanceof UnionType) { return new TypePair(this, that); }
 if (that instanceof UnionType) { TypePair p = this.getTypesUnderEquality(that); } else
 switch (this.testForEquality(that) {
 switch (that instanceofUnionType) {
 if (that instanceof UnionType) { return new TypePair(null, that); } else
 if (that instanceof UnionType) { return new TypePair(null, that); }
if (that instanceof UnionType && that instanceof Union) {
 switch (that instanceof JSUnionType) {
 if (that instanceof UnionType) { return new TypePair(null); } else
if (that.testForEquality(that)) {
if (that instanceof UnionType && that instanceof JSType) {
 switch (that!= null) {
 if (this instanceof UnionType) { TypePair p = this.getTypesUnderEquality(); } else
if (that!= this) {
 if (that instanceof UnionType) { return new TypePair(null); }
 switch (that instanceof Union) {
if (that instanceof UnionType && that!= null) {
 switch (that.testForEquality(this) {
if (that instanceof UnionType && this. testForEquality(that) {
 if (that instanceof UnionType) { TypePair p = that.getTypesUnderEquality(); }
 if (that instanceof UnionType) { return new TypePair(this); } else
if (that instanceof UnionType && that. testForEquality(this)) {
 if (this instanceof UnionType) { return new TypePair(this, that); } else
if (that instanceof UnionType && this. testForEquality(that)) {
if (this.testForEquality(that)) {
 if (this instanceof UnionType) { return new TypePair(this, that); }
 if (that instanceof UnionType) { return new TypePair(null, null); }
if (that instanceof UnionType && this instanceof JSType) {
 switch (this.test(that) {
 if (this instanceof UnionType) { return new TypePair(null); }
if (that instanceof UnionType && this instanceof Union) {
if (that instanceof UnionType && that. testForEquality(this) {
 if (that instanceof ConjunctionType) { return new TypePair(this, that); } else
 if (that instanceof UnionType) { return new TypePair(this); }
 if (that instanceof ConjunctionType) { return new TypePair(null, that); }
 if (that instanceof UnionType) { return new TypePair(); } else
 if (that instanceof ConjunctionType) { return new TypePair(null); } else
 if (that instanceof UnionType) { return new TypePair(that); }
 if (that instanceof UnionType) { TypePair p = that.getTypesUnderEquality(this); } else {
 if (this instanceof UnionType) { return new TypePair(this); } else
 if (this instanceof UnionType) { return new TypePair(null); } else
 switch (that.testForEquality(isUnionType) {
 if (that instanceof JsUnionType) {
 if (this instanceof UnionType) { return new TypePair(null, that); } else
if (that instanceof UnionType && this. testForEquality(that))) {
 switch (this.testFor(that) {
 if (that instanceof UnionType) { TypePair p = that.getTypesUnderEquality() } else
if (that instanceof UnionType && this instanceof UnionType && that instanceof Union) {
if (that instanceof UnionType && that. testForEquality(this, that) {
 switch (this.testForEquality) {
 switch (that.testForEqualityUnionType) {
if (that.testForType(this) {
if (that instanceof UnionType || that instanceof UnionUnion) {
 if (that instanceof UnionType) { TypePair p = that.getTypesUnderEquality(this); } else,
 if (this instanceof UnionType) { return new TypePair(); } else
 switch (that.instanceof UnionType) {
if (that.testForEquality(that) {
 if (that instanceof ConjunctionType) { return new TypePair(that); }
 if (that instanceof ConjunctionType) { return new TypePair(); } else
 if (this instanceof UnionType) { TypePair p = this.getTypesUnderEquality(that);
if (that instanceof unions) {
 switch (that instanceof JUnionType) {
if (this.testForEquality(that))) {
if (that instanceof UnionType && that. testForEquality(this))) {
 if (that instanceof UnionType) { TypePair p = this.getTypesUnderEquality(that); } else {
 switch (that.testForEquality) {
 if (that instanceof JUnionType) {
if (that instanceof UnionType && this. testForEquality(that).union) {
 switch (this.testForEquality(UnionType) {
 if (thatIsUnionType) {
if (that .testForEquality(this)) { final
if (that instanceof UnionType || this. testForEquality(that))) {
if (that instanceof UnionType && this!= that) {
 switch (this.testForUnion(that) {
 if (that instanceof ConjunctionType) { TypePair p = that.getTypesUnderEquality(this); } else {
if (that instanceof UnionType || this. testForEquality(that)) {
if (that instanceof UnionType || this. testForEquality(that) {
if (this.testForUnion(that) {
 if (that.testForUnion(this)){
 if (that.testForEquality()){
if (that instanceof UnionType)  { return new TypePair(null); }
if (that instanceof UnionType && that. testForEquality(this), that) {
 if (that instanceof UnionType) { TypePair p = that.getTypes(this); }
if (that.testForEquality()) { final
 if (that instanceof UnionType) { return new TypePair(this, that); } else {
 switch (this.testForType(that) {
 if (that instanceof ConjunctionType) { TypePair p = that.getTypesUnderEquality(this); } else,
if (that instanceof UnionType) { final
if (that.testForInterface(this) {
 switch (that instanceof JsUnionType) {
if (that == this) {
 switch (this instanceof UnionType) { if(that instanceof UnionType) {
if (that instanceof UnionType && this instanceof UnionType && that!= null) {
 switch (that!= this) {
if (that instanceof UnionType || this. testForEquality(that).union) {
 if (that instanceof UnionType) { TypePair p = that.getTypesUnderEquality(this); } else { else
 if (that.typeinstanceof UnionType) {
 if (that.isUnionType) {
if (that instanceof UnionType || this instanceof UnionType || that == null) {
 if (that instanceof UnionType) { return new TypePair(null, that); } else {
if (that instanceof UnionType || this instanceof UnionType || that == this) {
 switch (this.testForEquality(isUnionType) {
 switch (that.testForType(this) {
 switch (this.testForEquality(thatUnionType) {
 if (that instanceof JSType.UnionType) {
 if (that instanceof UnionType) { TypePair p = that.getTypesUnderEquality(this); } else { }
 if (this instanceof UnionType) if (that instanceof UnionType) {
if (that.testForEquality()that) {
 if (this instanceof UnionType) { return new TypePair(this, that); } else {
 if (that instanceof JSTypeUnionType) {
if (that instanceof UnionType || this instanceof UnionType || this instanceof Union) {
 switch (this instanceof UnionType) switch(that instanceof UnionType) {
 switch (this!= that) {
 switch (this instanceof Union) {
 switch (that.testForEquality().isUnionType) {
 if (that instanceof UnionType) { TypePair p = that.getTypesUnderEquality(); else
if (that instanceof UnionType && that instanceof UnionType) {
if (that instanceof UnionType && that. testForEquality(this, this) {
 if (this instanceof UnionType) { return null; } else
if (that instanceof UnionType)  { if (that instanceof OtherType) {
 if (that instanceof ConjunctionType) { return new TypePair(this, that); } else {
 switch (that.testForIsUnionType) {
if (that instanceof UnionType && that instanceof JSTypeUnion) {
 switch (that.test(this) {
 switch (this.testForEqualityUnionType) {
if (that .testForEquality(that)) { final
if (that instanceof UnionType) { if (that instanceof Union) {
 if (this instanceof UnionType) { return this; } else
if (that instanceof Union) { final
 switch (that.isInstanceOfUnionType) {
 switch (that.testForUnion(this) {
 if (that.testForType(this)){
 if (that instanceof UnionType) { TypePair p = that.getTypesUnderEquality();}}
if (that instanceof UnionType || this instanceof UnionType || that!= null) {
if (that instanceof UnionType) { if (that!= null) {
 if (that.testForInterface(this)){
if (that instanceof UnionType && that instanceof UnionUnion) {
if (that instanceof UnionType)  { if (that instanceof UnionUnion) {
 if (this instanceof UnionType &&!that instanceof UnionType) {
 if (that instanceof UnionType) { TypePair p = that.getTypesUnderEquality(this); } else { } else
 switch (that.testForType(UnionType) {
 for (JSType that: that) {
 if (that instanceof UnionType) { TypePair p = that.getTypesUnderEquality(this); } else { union types
if (that.isUnion(this) {
 switch (this instanceof UnionType) if(that instanceof UnionType) {
 switch (that.testForEquality(thisUnionType) {
if (that.testIsUnion(this) {
if (that.isUnion()) {
 switch (that.isUnionType) {
 if (that.testForEquality(UnionType) {
if (that instanceof UnionType || that instanceof UnmodifiableType) {
 if (that instanceof JvmUnionType) {
if (that instanceof UnionType)  { if (that instanceof UnionType) {
if (that.testForEquality(this")) {
if (that instanceof UnionType || this. testForEquality(that), null) {
if (that instanceof UnionType || this. testForEquality(that), that) {
 switch (this.testForUnion) {
if (that instanceof UnionType || this instanceof JSType) {
if (that instanceof UnionType && that. testForEquality() true) {
 if (that instanceof UnionType) { return new TypePair() } else
 if (that instanceof UnionType) { TypePair p = this.getTypesUnderEquality(that); } else { } else
 if (this instanceof UnionType) { return null; }
 switch (that.testForUnionType) {
 if (this instanceof UnionType) { return that; } else
if (that instanceof UnionType) { return that.typeA; }
if (that instanceof UnionType || this == that) {
 if (that instanceof UnionType) { return null; } else
 switch (that instanceof JSType.UnionType) {
if (that instanceof UnionType && that instanceof JSSubtype) {
 if (that instanceof UnionType) if (that instanceof UnionType) {
 if (that.testForUnion(that)){
 switch (that instanceof unions) {
if (that.isUnion(this)) { final
if (that instanceof UnionType || that instanceof JSTypeUnion) {
 if (this instanceof Union) if(that instanceof UnionType) {
if (that instanceof UnionType || that instanceof UnunionType) {
if (this.testForEquality) {
if (that instanceof UnionType || this instanceof JSTypeUnion) {
 are equivalent if (that instanceof UnionType){
if (that instanceof UnionType && this instanceof JSMember) {
if (that instanceof UnionType)  { if (that!= this) {
 are equal if (that instanceof UnionType) {
if (that.testForEquality() { final
if (that instanceof UnionType && this. testForEquality()that) {
if (that.isUnionType()) {
 if (this instanceof UnionType) { } else
, unions types, unions unions unions unions if (that instanceof UnionType) {
if (that  instanceof UnionType) { return null; }
 switch (that instanceof UnionType) { if(that instanceof UnionType) {
if (that instanceof UnionType || this instanceof UnionUnion) {
, unions unions unions unions unions unions if (that instanceof UnionType) {
 if (that instanceof Union) { if (that instanceof UnionType) {
if (that.testForEquality) { final
 for equality if (that instanceof Union){
if (that instanceof UnionType || that instanceof UnaryType) {
 if (this instanceof UnionType) && (that instanceof UnionType) {
if (that instanceof UnionType && this instanceof JSTypeUnion) {
 switch (that.testForTypeOfUnionType) {
 if (that.isUnion(this)){
 if (thisIsUnionType) {
 if (that instanceof Union) if (that instanceof UnionType) {
if (this.isUnion(that) {
, unions types if (thatinstanceof UnionType) {
 if (that.testForEquality)){
 are always equal if (that instanceof UnionType) {
if (that instanceof UnionType && that instanceof JSMember) {
if (that.union) {
if (that instanceof UnionType || this. testForEquality() that) {
if (that instanceof UnionType || that instanceof OtherType) {
, unions types, unions unions types if (thatinstanceof UnionType) {
, other types if (that.instanceof UnionType) {
, unions types, unions types if (that.instanceof UnionType) {
if (that!= null) { final
if (that instanceof UnionType) { if (that instanceof OtherType)
 case: if (that.instanceof UnionType) {
, unions types, unions unions if (thatinstanceof UnionType) {
 are equal if (that.instanceof UnionType) {
if (that is not null) {
 if (unionTypes) {
 if (that instanceof Union)){
if (that.isUnions) {
 switch (that instanceof Union)){
if (that instanceof UnionType) { if (that instanceof UnionType)
if (that instanceof UnionType && that instanceof JSTypeImpl) {
if (that instanceof UnionType && it instanceof UnionType) {
 if (this instanceof UnionType) { return this; } else {
if (that instanceof UnionType || that instanceof Union (null,null) {
 if (unionType) {
if (that.union(this) {
, unions types, unions unions unions if (that instanceof UnionType) {
if (that instanceof UnionType && that instanceof JSCype) {
 switch (this.testForEquality()) if(that instanceof UnionType) {
if (that instanceof Conjunction) { final
 if (that instanceof Conjunction){
if (that instanceof UnionType) { if (that instanceof UnionUnion)
if (that instanceof UnionType || that instanceof UnionType) {
if (that instanceof UnionType) { if (that instanceof Type) {
 switch (this instanceof Union) switch(that instanceof UnionType) {
 case if (that.instanceof UnionType) {
if (that instanceof UnionType && this instanceof JSTypeImpl) {
if (that instanceof UnionType && other instanceof UnionType) {
, unions types, unions unions if (that.instanceof UnionType) {
, unions types, unions types if (thatinstanceof UnionType) {
, unions types, unions unions unions unions unions if(that instanceof UnionType) {
if (that instanceof UnionType && that!= this) {
 switch (this instanceof UnionType) { switch(that instanceof UnionType) {
 if (this instanceof UnionType) { return this; }
 for equality if (that!= null) {
 if (that instanceof UnionType && this.instanceof UnionType) {
if (that instanceof UnionType || this instanceof JSMember) {
if (that instanceof unions) { final
 if (this instanceof UnionType) { else
 if (that instanceof UnionType && v2instanceof UnionType) {
if (that.isUnionType()) { final
 if (this instanceof UnionType ||!that instanceof UnionType) {
, unions unions unions unions unions if (that instanceof UnionType) {
 if (this.test(that)instanceof UnionType) {
if (this instanceof Union) {
 if (this instanceof UnionType) { return null; } else {
 if (that.isUnion())){
 switch (that.typeinstanceof UnionType) {
if (that instanceof UnionType)  { return that.type; }
, union types, other types if (thatinstanceof UnionType) {
 if (that(that)instanceof UnionType) {
if (that instanceof UnionType || this instanceof UnionType || unionUnion) {
, unions types, unions unions types if (instanceof UnionType) {
if (that) { final
, unions types, union types if (thatinstanceof UnionType) {
, unions types, unions types if (instanceof UnionType) {
if (that .testForEquality(other)) { final
 are always equal if (that.instanceof UnionType) {
 if (that instanceof UnionType) { return this; } else {
 if (this instanceof UnionType) return null;
if (that is UNKNOWN) {
if (that instanceof UnionType || this instanceof JSCype) {
 if (that isUnionType) {
, unions types, unions if (thatinstanceof UnionType) {
if (that instanceof UnionType || this instanceof JSMemberType) {
 if (that.test(that)instanceof UnionType) {
 if (this instanceof UnionType(that instanceof UnionType) {
if (that instanceof  UnionType) { return that ; } else {
 switch (this.isUnionType) {
if (that instanceof UnionType || that == this) {
 if (this instanceof Union &&(that instanceof UnionType) {
 if (that.typeAinstanceof UnionType) {
, unions types if (that.instanceof UnionType) {
 for (that!= null){
 switch (that.UnionType) {
if (that .testForEquality(this) { final
 if (that is not null) if(that instanceof UnionType) {
 if (that instanceof UnionType) { } else
 switch (this instanceof Union) if(that instanceof UnionType) {
if (that instanceof  Union) { return null; }
 for equality if (that!= this) {
if (that instanceof UnionType || this instanceof JSMultion) {
 if (that.test(this)instanceof UnionType) {
 if (that!= null) if(that instanceof UnionType) {
 if (that.thatinstanceof UnionType) {
if (that!= this) { final
if (that instanceof  UnionTypes) {
 are special if (that instanceof UnionType) {
if (that instanceof UnionType)  { return new TypePair(null); };
if (that instanceof UnionType || it instanceof Union) {
, other types switch (that.instanceof UnionType) {
if (that instanceof  unions)
if (that!= null)
if (that instanceof UnionType && other instanceof Union) {
if (that instanceof  UnionType) { return null;
if (that instanceof  UnionType) return null;
 if (this instanceof UnionType) return null; else
 if (this instanceof unionsType) { } else
 if (that.typeA.instanceof UnionType) {
if (that instanceof  UnionType) { return that; }
 if (that instanceof UnionType) { else
, unions unions unions unions if (that instanceof UnionType) {
if  (that.union()) {
if (that instanceof UnionType && it instanceof Union) {
if (that instanceof UnionType || other instanceof Union) {
 if (this instanceof UnionType) return this; else
if (that instanceof  UnionType) { return null }
if (that == this) { final
if (that instanceof  UnionType) { return null ; } else {
 if (this instanceof UnionType) return that; else
 if (!isUnionType) {
if (that instanceof UnionType || this!= that) {
, other types, other types if (that instanceof UnionType) {
 if (this instanceof UnionType) { }
 if (this instanceof UnunionType) {
if (that instanceof  UnionsType) { final
 if (that instanceof UnionType) { return this; } else { else
 if (this is union) if(that instanceof UnionType) {
 are not equal if (that instanceof UnionType) {
 if (this instanceof UnionType) { return this; } else { else
if (that instanceof UnionType || that == null) {
 if (that.unionTypes) {
, unions if (that instanceof UnionType) {
 if (that instanceof Union) { } else
if (that instanceof UnionType()) {
if (that instanceof  UnionType) { break ; }
if (that instanceof  Union) { return that ; } else {
if (that instanceof UnionType && this instanceof Object) {
 if (this instanceof Union(that instanceof UnionType) {
if (that instanceof UnionType || UNKNOWN) {
 if (supports) {
 are the same as well if (that instanceof UnionType) {
 switch (that)){
 if (!that){
if (that instanceof UnionType && other!= null) {
 if (this instanceof UnionType) { return null; } else { else
if (that instanceof UnionType)  { return that.typeA;
, other types, etc. if (that instanceof UnionType) {
 if (useUnionType) {
if (that instanceof  UnionType) { return null };
if (that instanceof  UnionType) { case UNKNOWN: final
 if (that)){
 if (this) { if(that instanceof UnionType) {
 if (that instanceof UnionType) { return null ; } else { else
, other types, other types, other types, etc.
if (that instanceof UnionType) { return that.typeA; };
 if (this instanceof UnionType) { return this; } else { }
 if (unions) {
 if (this.instanceof UnionType) {
 if (!union) {
if (that instanceof  UnionType) return that;
, other types, other types, other types
 are always compatible if (that instanceof UnionType) {
if (that instanceof UnionType || that!= null) {
 switch (UnionType) {
if (this!= that) {
 are always equivalent if (that instanceof UnionType) {
if (that instanceof UnionType) { return that.typeA; final
 are special cases if(that instanceof UnionType) {
 switch (!null) {
 if (this.that instanceof UnionType) {
if (that instanceof  Union) { return null;
 if (hasUnionType) {
 if (!thatinstanceof UnionType) {
, other types, other types, etc.
 have different types for equality if (that instanceof UnionType) {
if (that instanceof  Unions) { final
if (that instanceof UnionType)  { if (that instanceof Union) {}
, other types, other types, unions types
if (that instanceof UnionType || unionUnion) {
 if (that) { if(that instanceof UnionType) {
, other types, if (that instanceof UnionType) {
 switch (isUnionType) {
if (that instanceof  UnionType) { case UNKNOWN: {
 if (supports()){
 if (unionType)){
, unions unions unions types if (that instanceof UnionType) {
, other types: if (that instanceof UnionType) {
if (that instanceof UnionType || UnionUnion) {
, other types, other types
if (that instanceof UnionType) { if (that!= null) {}
if (that instanceof UnionType &&!null) {
if (that instanceof UnionType && this == that) {
 are always equal to null if (that instanceof UnionType) {
, other types, other types, other types, etc...
 for (that) {
 are special case if(that instanceof UnionType) {
if (that instanceof  UnionType) { return null; final
if (that instanceof UnionType)  { return that.typeA }
if (that instanceof  UnionType) { return null; };
if (that instanceof UnionType || this instanceof union) {
 first if (that instanceof UnionType) {
, other types, etc.
 for equality if (that) { final
: if (that instanceof UnionType) {
, other types, unknown types
, other types, other types, types
 only if (that instanceof UnionType) {
if (union) { final
 if (this).testFor(that instanceof UnionType) {
 else if (that instanceof UnionType) {
, other types, other types, other unions
 are compatible if(that instanceof UnionType) {
 are identical if(that instanceof UnionType) {
if (that instanceof UnionType &&!union) {
, other types, other types etc.
 are special case: if (that instanceof UnionType) {
, other types, and other types
, other types types if(that instanceof UnionType) {
if (that instanceof  UnionType) { return that ; } final
, other types, other types, other classes
, other types, other types, unions
if (that instanceof  UnionType) { return that ; } {
, other types, other types, etc
 are not equal types if (that instanceof UnionType) {
 if (this is null if(that instanceof UnionType) {
 are always equal types if (that instanceof UnionType) {
 are special cases
if  equality is observed {
if (that instanceof  Union()) {
if (that instanceof  UnionType) { return that ; } { final
, other types, other types,
 are special: if(that instanceof UnionType) {
 are special types if(that instanceof UnionType) {
 are special case
 of this and that are equal {
, other types, other types:
if  they are equivalent {
if  they are equal {
, other types, other classes
if (that instanceof  union) {
, other types, other types,...
 while (thatinstanceof UnionType) {
, other types, other unions
 of this and that are equal.
 of this and that {
, other types, and other classes
if  they are the same {
if  this is that {
if (that instanceof UnionType || unionUnknown) {
 (!that) {
 of the given type {
 of this and the given type {
if (that instanceof UnionType) return {};
 of the given type { final
 of this and that are equivalent {
 of this and that types {
if (that instanceof  Union) { try {
if (that instanceof UnionType && isUnion) {
if (that))
, other types, and other objects
if (that instanceof  Union {
 of this and the given type.
if (that instanceof UnionType ||!union) {
 if (!UnionType) {
 are special:
if (that instanceof UnionType && unionType) {
 with the same type { final
 of this type {
if  they are equivalent
 for this type { final
if  they are the same.
if (that {
 are the same.
 are equal else{
 of this and the other {
if  they are equal
if  { final
 synchronized (UnionType) {
if (that).
 of this and the other types
if (junion) {
 of the given type.
 are the same {
 of the types {
 of the same type {
 are always equal.
?else{
 are always equal {
if (that instanceof UnionType)  { return null; } final
 (this) {
 case if(that instanceof UnionType) {
 are equivalent else{
 case {...{
if (that instanceof UnionType && otherType) {
if  equality observed {
if  they agree {
 are special...
 are identical else{
 are always the same.
 are special
 are the only cases:
if (that )) { final
if  this { final
 are always the same:
 are the same.
 are the same:
 are always equal...
 are not equal.
 of this else{
if (that instanceof  Union())
 if ((instanceof UnionType) {
 are equal.
 are the only types:
 are the only types.
 if thatinstanceof UnionType) {
 if () {
if (that) final
if (that instanceof UnionType()) { final
if  necessary {
 are equal
 case else{
 are equivalent
 only else{
if  needed {
 if (_instanceof UnionType) {
if  possible {
if (that instanceof UnionType)) { final
 case:{
 only if (!that instanceof UnionType) {
 are compatible
if (that instanceof UnionType)) {
if  necessary final
 are identical
if (that instanceof UnionType)  break; final
 else
:
if (this) {
if (that instanceof UnionType)  {} final
if (there) {
if (union) {
if (either) {
