ObjectType thisType = null;
 Object thisType=null;
 ObjectType thisType;
 ObjectType thisType = ObjectType.null;
 ObjectType thisType = (ObjectType)null;
 ObjectType thisType = ObjectType.cast(null;
ObjectType  thisType = ObjectType.cast(n);
 ObjectType thisType = _null;
ObjectType thisType = null; Node contextNode = null;
ObjectType  thisType = ObjectType.unknown;
ObjectType  thisType = ObjectType.cast(this);
 ObjectType thisType = Function.null;
 Node thisType;
 Node thisType = null;
ObjectType thisType  = (ObjectType) n.getParent();
ObjectType  thisType = ObjectType.cast(null);
ObjectType  thisType = new ObjectType(this);
 ObjectType type = null;
 Object thisType;
 if (n.getType() == Token.NEW) { Node contextNode = n.getFirstChild();
 if (current.getType() == Token.NEW) { Node contextNode = current.getFirstChild();
 Node current = n.getFirstChild(); Node contextNode = current. getFirstChild ( ) ;
 ObjectType thisType = ObjectType.NONE;
 ObjectType thisType = (Type)null;
 ObjectType thisType = objectType;
 FunctionParamBuilder paramBuilder = new FunctionParamBuilder;
 Node thisType = null; Node contextNode= null;
 Node current = n.getFirstChild(); Node contextNode = current. parent;
 FunctionParamBuilder paramBuilder = null; ObjectTypethisType = null;
 if (current.getType() == Token.NEW) { Node contextNode = current.getFirstChild(); Node reporter = null;
ObjectType  thisType = ObjectType.cast();
 ObjectType thisType = ObjectType.undefined;
 FunctionParamBuilder paramBuilder;
ObjectType thisType = null; Node current = n;
 Node current = n.getFirstChild(); Node contextNode = current. getFirstChild(); Node reporter = null ;
 thisType= null;
 ObjectType thisType = Function|null;
 if (n.getType() == Token.NEW) { Node contextNode = n. getFirstChild(); Node reporter = null;
 ObjectType thisType = ObjectType;
 Node node = n. getFirstChild(); Node contextNode = node. parent ;
 Node current = n.getFirstChild(); Node contextNode = n. getFirstChild(); Node reporter = null ;
 Node current = n.getFirstChild(); Node contextNode = null;
 Node thisType = ObjectType.cast(null;
 Node current = n.getFirstChild(); Node contextNode = n.getSecondChild();
 Node contextNode = n.getFirstChild();
 if (current.getType() == Token.NEW) { Node contextNode = n. getFirstChild(); Node reporter = null;
 if (current.getType() == Token.NEW) { Node contextNode = current.getFirstChild(); } else {
ObjectType  thisType = (ObjectType) n;
 ObjectType thisType = null; Context context= null;
 ObjectType thisType = ObjectType.cast_null;
 FunctionParamBuilder paramBuilder = FunctionParamBuilder;
 Node current = n.getFirstChild(); Node contextNode = n.getNext();
 if (current.getType() == Token.NEW) { Node contextNode = current.getSecondChild();
 ObjectType thisType = Object.null;
 if (current.getType() == Token.NEW) { Node contextNode = current.getFirstChild(); return contextNode;
 if (current.getType() == Token.NEW) { Node contextNode = n. getFirstChild(); Node reporter = contextNode ;
 ObjectType thisType = Object|null;
 if (current.getType() == Token.NEW) { Node contextNode = current.getFirstChild(); Node reporter = contextNode ;
 ObjectType thisType = namedType;
ObjectType thisType = null; Node current = n.getNext();
ObjectType thisType = null ; Node contextNode = n. firstChild;
 ObjectType thisType = null, null;
 ObjectType thisType = ObjectType.cast().null;
 if (n.getType() == Token.NEW) { Node contextNode = n. getFirstChild ( contextName ) ;
 ObjectType thisType = Type.null;
 if (current.getType() == Token.NEW) { Node contextNode = current.getFirstChild(); Node newNode = null;
 ObjectType.thisType = null;
ObjectType thisType  = (ObjectType) n.getType();
 FunctionParamBuilder thisType = null;
 Node contextNode = null;
 ObjectType objectType = null; ObjectTypethisType = null;
 Node node = n. getFirstChild(); Node contextNode = null;
 ObjectType thisType = ObjectType.cast.null;
 { ObjectType thisType = null;
 ObjectType thisType = ObjectType.cast|null;
 ObjectType thisType = ObjectTypeImpl.null;
 ObjectType thisType = new ObjectType(null;
 ObjectType=null;
 ObjectType thisType = ObjectType.none;
 String thisType = null;
 ObjectType thisType = ObjectType.UNKNOWN;
 ObjectType thisType = ObjectType.NULL;
ObjectType thisType = null; FunctionParamBuilder paramBuilder;
 Type thisType = null;
 FunctionParamBuilder paramBuilder = null;
 Node current = n. getNextChild(); Node contextNode = null;
 FunctionParamBuilder functionParamBuilder = null;
 FunctionParamBuilder functionBuilder = null; ObjectTypethisType = null;
 FunctionParamBuilder functionParamBuilder;
 FunctionParamBuilder paramBuilder = null; TypethisType = null;
 if (current.getType() == Token.NEW) { Node contextNode = current.getFirstChild;
 ObjectType thisType; Node contextNode= null;
ObjectType thisType = null; Node current = null;
ObjectType thisType  = (ObjectType) n.getNext();
 FunctionType thisType = FunctionType.null;
 ObjectType thisType = new ObjectType=null;
 FunctionParamBuilder paramBuilder = null; ObjectthisType = null;
 Node current = n.getFirstChild();
 if (current.getType() == Token.NEW) { Node contextNode = current.getFirstChild(); }
 FunctionType thisType = ObjectType.null;
 ObjectType thisType = null; Node context= null;
 FunctionParamBuilder paramBuilder = null; thisType= null;
 FunctionType thisType = null;
 if (current.getType() == Token.NEW) { Node contextNode = current.getFirstChild(); return contextNode }
 Node current = n.getFirstChild(); Node reporter = null;
 ObjectType thisType =!null;
 ObjectType objectType!= null;
 ObjectType thisType= null, contextNode= null;
 if (n.getType() == Token.NEW) { Node contextNode = n.getFirstChild;
 ObjectTypeFunction thisType= null;
 if (current.getType() == Token.NEW) { Node contextNode = current.getFirstChild(); return contextNode };
 thisType;
 FunctionParameterBuilder paramBuilder = null; ObjectTypethisType = null;
 if (current.getType() == Token.NEW) { Node contextNode = current.getFirstChild(); } }
 ObjectType thisType = (Object)null;
 Node node = n.getFirstChild();
 Node contextNode = n.nextChild();
 ObjectType thisType = $null;
 ObjectType $thisType = null;
ObjectType thisType =  ObjectType. cast ( n. type ) ;
 Node thisType = null; Node newThisType= null;
 ObjectType thisType = null; Object newthisType = null;
 ObjectType thisType null;
 Node n = node. getFirstChild ( ) ;
 ObjectType type = null; ObjectTypethisType = null;
 FunctionParamBuilder functionBuilder = null;
 ObjectType this = null;
 if (n.getType() == Token.NEW) { Node contextNode = n. getFirstChild ( ) ; final
 if (n.getType() == Token.NEW) { Node contextNode = n. getFirstChild ( )();
 FunctionParamBuilder paramBuilder = null,thisType = null;
 Node thisType = null; Node newContextNode= null;
 ObjectType thisType = null, scope= null;
 if (n.getType() == Token.NEW) { Node contextNode = n. getFirstChild ( ));
 if (n.getType() == Token.NEW) { Node contextNode = n. getFirstChild ( ) ; }
 ObjectType objectType = null; ObjectType _thisType = null;
 ObjectType thisType = nullType;
 ObjectType thisType = null.0;
 ObjectType <ObjectType>thisType = null;
 Node current = n.getFirstChild(); Node contextNode = n.getSecondChild;
 FunctionParamBuilder functionParamBuilder;
 if (current.getType() == Token.NEW) { Node contextNode = n. getFirstChild ( ) ; }
 ObjectType thisType = nnull;
 Node thisType = ObjectType.null;
 if (current.getType() == Token.NEW) { Node contextNode = n. getFirstChild ( ) ; final
 ObjectType thisType ObjectType= null;
 Node current = n.getFirstChild(); Node contextNode = current. getFirstChild(); }
 Node current = n.getFirstChild(); Node contextNode = current. getFirstChild(); {
 Node current = n.getFirstChild(); Node contextNode = current. getFirstChild ( ));
 ObjectType functionThisType=null;
 FunctionParamBuilder(thisType= null;
ObjectType thisType = null ; Node contextNode = n. firstChild();
 Node current = n.getFirstChild(); Node contextNode = n. getFirstChild(); {
 ObjectType objectType thisType= null;
 Node thisType = ObjectType.cast();
 Node current = n.getFirstChild(); Node contextNode = n. getSecondChild(); {
 Node current = n.getFirstChild(); Node contextNode = n. getFirstChild(); }
 JSType _thisType = null;
ObjectType  thisType = Function(n);
 Function thisType = null;
 FunctionParamBuilder thisFunctionParamBuilder= null;
 FunctionParamBuilder paramBuilder = new FunctionBuilder();
 ObjectType thisType; String sourceName= null;
 Node thisType = Node. NEW_TYPE;
 ObjectType thisType = Function.class;
 Node current = n.getFirstChild(); Node contextNode = n. getNext(); }
 FunctionType thisType = FunctionType.unknown;
 Node thisType = ObjectType;
 Node current = n.getNext();
 Node current = n.getFirstChild(); Node contextNode = current. getNext(); }
 FunctionParamBuilder functionParamBuilder();
 Node current = n.getFirstChild(); Node contextNode = n. getNext(); {
 ObjectType thisType ; Object objectType= null;
 Node current = n.getFirstChild(); Node contextNode = current. getFirstChild(); } }
 ObjectType thisType = namedType= null;
ObjectType  thisType = ObjectType.unknown();
 Node thisType = objectType;
 FunctionFunctionBuilder functionBuilder = new FunctionFunctionBuilder(this, n, scope); {
 ObjectType thisType; Node functionNode= null;
 FunctionType thisType;
 ObjectType objectType = null; TypethisType = null;
 Node current = n.getFirstChild(); Node contextNode = n. getFirstChild(); } }
 Node contextNode = n.nextChild;
 ObjectType type = null; ObjectType _thisType = null;
 ObjectType <FunctionParamBuilder>thisType = null;
 ObjectType _thisType = null;
ObjectType thisType = null, reporter = null;
 FunctionParamBuilder paramBuilder();
 FunctionParamBuilder(this); ObjectthisType = null;
 Node current = n.getFirstChild(); Node contextNode = n.getNext;
 FunctionParamBuilder(this) {
ObjectType  thisType = ObjectType.null();
 ObjectType objectType = null; ObjectthisType = null;
 Function paramBuilder = null;
 FunctionFunctionBuilder functionBuilder = new FunctionFunctionBuilder(this, n, scope); }
 ObjectType type thisType= null;
ObjectType thisType  = (ObjectType) n.getParent());
 FunctionFunctionBuilder functionBuilder = new FunctionFunctionBuilder(this, n); {
 Object type=null;
 JSType $thisType = null;
 Node current = n.getFirstChild(); Node contextNode = null; final
 ObjectType thisType = null; FunctionthisType = null;
 Node node = null;
 ObjectType thisType objectType= null;
ObjectType thisType = null; current = n;
 String name = null;
 Node thisType = _null;
 String thisType;
 ObjectType.FunctionTypethisType = null;
 FunctionFunctionBuilder functionBuilder = new FunctionFunctionBuilder(this, n); }
ObjectType thisType  = (ObjectType) n.getType());
 ObjectType thisType; String name= null;
 FunctionFunctionBuilder functionBuilder = new FunctionFunctionBuilder(this); {
 Node contextNode = n;
 Node thisType = ObjectType.unknown;
 ObjectType <FunctionType>thisType = null;
 Node thisType = Node.NULL;
 Node thisType = Node.null;
 Object type thisType=null;
 Node current = n.getFirstChild(); Node contextNode = current. getFirstChild(); } } }
 Node current = n.getFirstChild(); Node contextNode = n. getFirstChild(); } } }
 ObjectType objectType = null,thisType = null;
ObjectType  thisType = null
 Node contextNode = n.getFirstChild;
 Node node = n;
ObjectType thisType = null ; FunctionParamBuilder paramBuilder = null ; final
ObjectType  thisType = ObjectType.cast(n)
 Node type = null;
ObjectType  thisType = ObjectType.cast(n));
ObjectType  isType = null;
 ObjectType.FunctionthisType = null;
 FunctionFunctionBuilder functionBuilder = new FunctionFunctionBuilder(this); }
 Type thisType;
 ObjectType[][]thisType = null;
ObjectType thisType = null ; FunctionParamBuilder paramBuilder = null ; }
 String type=null;
 boolean this = false;
 Node current = n.getFirstChild(); Node contextNode = current. getFirstChild(); } } };
ObjectType  thisType = new ObjectType(this));
 Node current = n.getFirstChild(); {
 ObjectType(ObjectType)thisType = null;
 Function thisType;
 FunctionFunctionBuilder functionBuilder = new FunctionFunctionBuilder(n); {
 ObjectType thisType; Object object= null;
 Node contextNode = n.getFirstChild(); {
 ObjectType thisType; Object type= null;
ObjectType  thisType = (ObjectType) n();
 Node node = n.getFirstChild(); {
 Node thisType = n.getFirstChild(); }
 ObjectType.ObjectTypethisType = null;
 Node thisType = n.getFirstChild(); {
 FunctionType thisType = FunctionType.null();
 Node contextNode = n.getFirstChild(); }
 FunctionParamBuilder(this).thisType = null;
 FunctionParamBuilder functionParamBuilder,
 Node contextNode = n. getFirstChild ( ));
 ObjectType.<Function>thisType = null;
 ObjectType>thisType = null;
 Node thisType = Node.null();
 FunctionParamBuilder(this); TypethisType = null;
ObjectType thisType  = ObjectType.cast(n); }
 ObjectType.cast(null);thisType = null;
ObjectType  objectType = null;
ObjectType  isConstructor;
ObjectType thisType = null; Node current = n.next(); {
ObjectType  thisType {
ObjectType thisType  = ObjectType.cast(n); {
 ObjectType.T _thisType = null;
 FunctionParamBuilder paramBuilder,thisType = null;
 Node contextNode = n.getFirstChild(scope); {
ObjectType thisType =  new ObjectType(n, sourceName); }
 Node contextNode = n.getFirstChild(scope); }
ObjectType thisType = null; Node current = n.next(); }
ObjectType thisType =  ObjectType.cast( n, scope ); {
ObjectType thisType = null ; Node contextNode = null ; final
 Node n = this;
ObjectType thisType =  ObjectType.cast( n, scope ); }
 Node current = n.getFirstChild(scope); {
ObjectType thisType = null; Node current = n.getNext;
ObjectType thisType = null, contextNode;
ObjectType  thisType = null; {
 Node thisType = ObjectType.null();
 type=null;
 Node thisType = ObjectType.cast;
 String name = "";
ObjectType  thisType = null; final
 FunctionFunctionBuilder functionBuilder = new FunctionBuilder(); {
ObjectType thisType  = ObjectType.cast(this); }
 Node thisType = n.getSecondChild(); }
 Node current = n.getNext(); {
 Node this = null;
 ObjectType thisType = null,
 Node thisType = n.getSecondChild(); {
 Node contextNode = n.getFirstChild(context); {
 JSType __thisType = null;
 Node contextNode = n.getFirstChild(0); {
ObjectType thisType = null ; Node current = n. next ; final
 Node current = n.getFirstChild(); } }
ObjectType  isConstructor:
ObjectType thisType = null; Node contextNode = null; {
ObjectType  thisType = Function(n)
ObjectType thisType = null; current = n();
ObjectType  thisType = null; } }
ObjectType  thisType = Function(n));
ObjectType  this;
ObjectType  thisType = ObjectType; {
 String name;
 TypeBuilder thisType= null;
 return _null;
 var type;
 FunctionBuilder thisType= null;
 return n;
ObjectType thisType  = ObjectType();
 return null;
 void function() {
 String name= null;
 Object thisnull;
 boolean isFunction;
ObjectType thisType = null; break; }
 Type thisnull;
 Object this= null;
 Node thisType; {
 var thisType ; final
 boolean isFunction();
ObjectType  thisType
ObjectType  type;
ObjectType  isFunction;
 case FunctionCall:
ObjectType thisType = null, contextNode,
 case NEW: {
 Type _null;
ObjectType  isFunction {
ObjectType thisType  =;
 void function() {}
 objectTypethisType = null;
 switch to constructor
 case New: {
 switch to new
 case Function: {
 switch to function
ObjectType thisType ; {
ObjectType thisType  = NULL
ObjectType thisType =  null();
ObjectType thisType =  NULL;
ObjectType thisType = null; { final
 switch { final
 switch { }
 try { final
ObjectType thisType = null ; { static
 { final
 {
 { final
 { }
 try { static
 { } }
 { static
 { } };
 try: final
 {} }
 {} {
ObjectType thisType = null); {
 {} private
 final
ObjectType thisType == null;
ObjectType thisType: null;
ObjectType thisType is null;
