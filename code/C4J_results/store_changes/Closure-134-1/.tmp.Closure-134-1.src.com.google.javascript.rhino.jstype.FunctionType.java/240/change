 return Kind.ORDINARY;
 return kind== Kind.ORDINARY;
 return kind!== Kind.ORDINARY;
 return true;
 return kind == FunctionKind.ORDINARY;
 return kind == Kind.FUNCTION_ORDINARY;
 return kind == Kind.COORDINARY;
return kind == Kind.ORDINARY_FUNCTION;
 return this.kind == Kind.ORDINARY;
 return FunctionKind.ORDINARY;
 return kind!= null && kind!== Kind.ORDINARY;
 return kind == Kind.FUNCTION_COORDINARY;
 return kind == Kind && kind!== Kind.ORDINARY;
 return kind == Kind.METHOD;
 return kind == Kind.UNKNOWN_ORDINARY;
 return kind == Kind.IS_ORDINARY;
return kind == Kind.ORDINARY_FUNC;
 return kind == Kind.UNKNOWN;
return kind == Kind.ORDINARY_FUNCTIONAL;
return kind == Kind.ORDINARY_FUNCTION_TYPE;
 return kind == Kind.CONSTRUCTOR.ORDINARY;
 return kind!= null && kind. kind!== Kind.ORDINARY;
 return kind == Kind.CORDINARY;
 return kind == Kind.ORGANIZED;
 return kind == Function;
 return kind == Kind.FUNCTION_CORDINARY;
return kind  == Kind.ORDINARYFUNCTION;
 return kind == Kind.ORDINARYFunction;
 return kind == Kind.OBINARY;
 return kind == FunctionTypeKind.ORDINARY;
 return kind == Kind.CLASS;
 return kind == Kind.METHOD
 return kind ( )!== Kind.ORDINARY;
 return kind == Kind.ORGANIZED_ORDINARY;
 return kind == Kind.UNKNOWN && kind!== Kind.ORDINARY;
 return kind == Kind.INNER;
 return kind == Kind.INPUT;
 return kind == Kind.CONSTRUCTOR ||kind == Kind.ORDINARY;
 return kind == Kind.FUNC_ORDINARY;
 return this.kind!== Kind.ORDINARY;
 return kind == Kind.CONSTRUCTOR_ORDINARY;
 return kind == Kind.CONSTRUCTOR;
 return kind == Kind.CONSTRUCTOR && kind== Kind.ORDINARY;
 return kind == Kind.FUNCTION.ORDINARY;
 return kind == Kind.CONSTRUCTOR
 return kind == Kind.METHOD && kind== Kind.ORDINARY;
 return kind == Kind.METHOD && kind!== Kind.ORDINARY;
 return kind == Kind.ORDINARYFUNCTIONAL;
 return kind == Kind.FUNCTION_TYPE.ORDINARY;
 return kind == Kind.INNERFACE;
 return kind == Kind.ORGANIZATION;
 return kind == BinaryFunction;
 return kind == Kind.METHOD_ORDINARY;
 return kind. kind!== Kind.ORDINARY;
 return kind == Kind.ORDINARY_METHOD;
 return kind == Kind.FULL_ORDINARY;
 return kind == Kind.ORDINARYFUNC;
 return kind == Kind.UNKNOWN || kind!== Kind.ORDINARY;
 return kind == Kind.OBINYFunction;
 return kind == Kind.UNKNOWN || this.kind == Kind.ORDINARY;
 return kind == Kind.BORDINARY;
 return kind == Kind.Function.ORDINARY;
 return kind == Kind.CLASS
 return kind == Kind.BINARY_FUNCTION;
 return kind == Kind.FUNCTION || Kind.ORDINARY;
 return kind == Kind.CONSTRUCTOR_TYPE.ORDINARY;
 return kind == Kind.CLASS && kind== Kind.ORDINARY;
 return kind!= Kind.UNKNOWN && kind!== Kind.ORDINARY;
 return kind == FunctionType.ORDINARY;
 return kind == Kind.CONSTRUCT;
 return kind == Kind.CALL_ORDINARY;
 return kind == Kind.FUNCTION | Kind.ORDINARY;
 return kind == Kind.TYPE.ORDINARY;
 return kind == Kind.ORGANIZAL;
 return isOrdinaryFunction() == Kind.ORDINARY;
 return kind == Kind.BINARY;
 return kind == Kind.INTERNAL;
 return kind == Kind.INTERNAL_ORDINARY;
 return kind == Kind.FOR_ORDINARY;
 return kind == Kind.Function;
 return kind == Kind.CLASS ||kind == Kind.ORDINARY;
 return kind == Kind || kind!== Kind.ORDINARY;
 return kind == Kind.FUNCTIONAL.ORDINARY;
 return kind == Kind.INLINE;
return kind  == Kind.ORDINARY_FUNCTION
 return kind == Kind.INTERNAL_COORDINARY;
 public boolean isOrdinary() {
 return kind == Kind.TYPE_ORDINARY;
 return kind == Kind.ORGANIZED_FUNC;
 return kind!= null && kind == FunctionKind.ORDINARY;
 return kind == Kind;
 return kind == Kind.FUNCTIONORDINARY;
 return kind == Kind.INTERFACE;
 return kind!= null && kind== Kind.ORDINARY;
 return kind == Kind.CLASS && kind!== Kind.ORDINARY;
 return kind == Node.Kind.ORDINARY;
return kind == Kind.ORDINARYFUNCTION_TYPE;
 return kind == Kind.UNICODE_ORDINARY;
 return kind == Kind.ORDINARY_FUN ;
return kind == Kind.ORGANIZED_FUNCTION;
 return kind == Kind.BINARYFunction;
 return kind == null || kind== Kind.ORDINARY;
 return kind == Kind.ORGANIZALFunction;
 return kind == Kind.UNICODE_COORDINARY;
 return kind == Kind.FUNCTION!== Kind.ORDINARY;
 return kind == Kind.ORODINCTION;
 return kind == Kind.UNKNOWN || call.kind == Kind.ORDINARY;
 return isInterface;
return kind == Kind.ORDINARY_FUNCTIONTYPE;
 return this.call.kind == Kind.ORDINARY;
 return kind == Kind.CONSTRUCTOR!== Kind.ORDINARY;
 return kind!= null && kind!= Kind.ORDINARY;
 return kind == Kinds.ORDINARY;
 return kind ==.ORDINARY;
 return kind == Kind.CONSTRUCTOR || FunctionKind.ORDINARY;
 return isFunctionKind() == FunctionKind.ORDINARY;
 return kind == Kind.FINE;
 return kind == Kind.FUNCTIONTYPE.ORDINARY;
 return kind == Kind.UNKNOWN ||kind == Kind.ORDINARY;
 return (Node) this.kind == Kind.ORDINARY;
 return kind == Kind.COOORDINARY;
return kind == Kind.ORDINARY_FUNCTION_INSTANCE;
 return kind == Kind.CALLBACK_ORDINARY;
 return kind == Kind.UNION.ORDINARY;
 return kind == Kind.METHOD ||kind == Kind.ORDINARY;
 return isOrdinaryFunction ( ) == FunctionKind.ORDINARY;
 return kind == Kind.FUNCTION || FunctionKind.ORDINARY;
 return kind == Kind.ORTHINETIC;
return kind == Kind.ORDINARY_FUNCTION ; return true ;
 return Kind.UNKNOWN && kind!== Kind.ORDINARY;
 return kind == Kind.FUNC.ORDINARY;
 return kind == Kind.UNION || this.kind == Kind.ORDINARY;
 return kind == Kind.STRUCT;
 return kind == Kind.ORDINARY_FUNCTION ||
 return kind == Kind.Type.ORDINARY;
 return kind == FunctionType;
 return kind == Kind.FUNCTION, Kind.ORDINARY;
 return kind == Kind.CONSTRUCT.ORDINARY;
 return kind!= null && kind. kindName!== Kind.ORDINARY;
 return kind == Kind.UNSPECIFIED ||kind == Kind.ORDINARY;
 return kind == Kind.CONSTRUCTOR|kind == Kind.ORDINARY;
 return kind == Kind && kind== Kind.ORDINARY;
 return typeOfThis!== Kind.ORDINARY;
 return kind == Kind.UNKNOWN.ORDINARY;
 return kind == Kind.CONSTRUCTOR || _kind == Kind.ORDINARY;
 return kind == Kind.NULL && kind== Kind.ORDINARY;
 return kind == Kind.CONSTRUCTORkind == Kind.ORDINARY;
 return kind.kind== Kind.ORDINARY;
 return kind == Kind.FINE
 return kind == UNORDINARY;
 return isOrdinaryFunction()? kind : FunctionKind.ORDINARY;
 return kind == JSTypeKind.ORDINARY;
 return kind (call)!== Kind.ORDINARY;
 return _kind == Kind.ORDINARY;
 return kind === Kind && kind!== Kind.ORDINARY;
 return kind!= null && this.kind == Kind.ORDINARY;
 return kind == Kind.INIT ||kind == Kind.ORDINARY;
 public boolean isOrder() {
 return kind == kind ;
 return kind == kind && kind!== Kind.ORDINARY;
 return kind == Kind.OF
 return isOrdinaryFunction (kind) ==Kind.ORDINARY;
 return kind!= Kind.Kind.ORDINARY;
 return isOrdinaryFunction().kind ==Kind.ORDINARY;
 return kind == Kind.CONSTRUCTORKind.ORDINARY;
return kind == Kind.ORDINARYFUNCTION ; return true ;
 return kind == Kind.ORDINARY ; } else {
 return kind == Kind.FULL.ORDINARY;
 boolean isOrder() {
 return kind == Kind.ORDINARYFunction() ||
 return (Function) this.kind == Kind.ORDINARY;
 return kind == Kind.UNORDINARY;
 return kind == Kind.UNSPECIFIED ||
 return kind == Kind.CONSTRUCTORTYPE.ORDINARY;
 if (kind!= null) {
 return kind == Kind.IN
 if (canBeCalled()) {
 return kind == IRuntimeKind.ORDINARY;
return kind == Kind.ORDINARY_FUNCTION || kind == Kind.CLASS
 return kind == Kind.UNKNOWN || _kind == Kind.ORDINARY;
 return kind == Kind.CLASS|kind == Kind.ORDINARY;
 return kind == Kind.CONSTRUCTOR_Kind.ORDINARY;
 if ( isOrdinaryFunction ( ) ) {
 return kind == Kind.ICORDINARY;
 return kind == Kind.OF.ORDINARY;
 return kind!= null && kind.kind== Kind.ORDINARY;
 return kind == Kind.CONSTRUCTOR || superkind == Kind.ORDINARY;
 return isFunction ( ).kind == Kind.ORDINARY;
 return (Node) call.kind == Kind.ORDINARY;
 return isOrdinaryFunction()? kind. INDEXED : kind. INDEXED ; } else {
 if ( isOrdinaryFunction ) { return true ; } else
 return kind == _ORDINARY;
return kind == Kind.ORDINARYFunction()? kind : Kind.UNKNOWN;
 return ISORDINARY;
 return kind == Kind.CONSTRUCTorkind == Kind.ORDINARY;
 return kind == Kind.CONSTRUCTOR | FunctionKind.ORDINARY;
 return kind == U2UKind.ORDINARY;
 return kind == Kind.ORDINARY_FUNC ||
 return kind == KindOf.ORDINARY;
 return kind == CallKind.ORDINARY;
 return kind == Kind.FunctionTypeKind.ORDINARY;
 return kind == Kind.UNKNOWN|kind == Kind.ORDINARY;
 return kind == Kind.UNICallerKind.ORDINARY;
 return == Kind.ORDINARY;
 return kind == Kind.CONSTRUCTOR.Kind.ORDINARY;
 return kind!= Kind.FunctionKind.ORDINARY;
 return isOrdinaryFunction()? kind == Kind.UNKNOWN :
 public boolean isOrdinaryClass() {
 return kind == TypeKind.ORDINARY;
 if (isInterface()) {
 public boolean kind() {
 return kind == Kind.UNKNOWN ||
 return kind!= null;
return kind == Kind.ORGANIZED_FUNCTIONAL;
 public boolean isOrdinaryType() {
 return kind == Kind.ORDINARY; }
return kind == Kind.ORDINARYFUNCTION_INSTANCE;
 return kind == Kind.ORGANIZED_FUNCTION_TYPE ||
 if (isOrdinaryFunction(call)) {
 return isOrdinaryFunction() { return kind == Kind.ORDINARY; } public boolean isFunction() {
 return kind == Kind.FUNCTION | FunctionKind.ORDINARY;
 public boolean isOrderinary() {
 return kind == 0 || kind== Kind.ORDINARY;
 return kind == Kind.ORGANIZED_FUNCTION; }
 return kind == Kind.ORDINARY; else
 return kind == Kind.Function.Kind.ORDINARY;
 if (isOrdinaryFunction() {
 return isOrdinaryFunction() { return kind == Kind.ORDINARY; } else { return isInterface() {
return kind == Kind.ORDINARY_FUNCTION ; } return false ;
return kind == Kind.ORDINARY_FUNCTION || kind == Kind.METHOD
 return isOrdinaryFunction()? kind. INDEXARY : kind. INDEXARY ; } else {
return kind == Kind.ORDINARYFunction()? kind : Kind.INTERFACE;
 return isOrdinaryFunction()? kind == Kind.NONE :
return kind == Kind.ORDINARY_FUNCTION_INSTANCED;
return kind == Kind.ORDINARY_FUNCTION ; return false ;
 boolean isOrdinary() {
return kind == Kind.ORDINARY_FUNCTION_INSTANCES;
 return kind == INORDINARY;
 return kind == Kind.ORGANIZED_FUNCTION() ||
 return isOrdinaryFunction()? kind. INDEXARY : kind. INDEXED ; } else {
return kind == Kind.ORDINARY_FUNCTION_INSTANCE_ ;
 return isFunction ;
 return (int) kind == FunctionKind.ORDINARY;
return kind == Kind.ORDINARY_FUNCTION_INSTANCE_TYPE
 return call.kind == Kind.ORDINARY;
 return kind == Kind.ORDINARY_FUNCTION ;
 return true ;
return kind == Kind.ORDINARY_FUNCTIONFACE;
 return isOrdinaryFunction()? kind == Kind.OBJECT :
 return kind == Kind.METHOD ||
 return kind!= Kind.ORDINARY;
 return kind == Kind.ORDINARYFunction() ;
 return kind == Kind.ORDINARY ; } } else {
 return isOrdinaryFunction()? kind. INDEXED : kind. INDEXED_STRING ;
 return kindof this!== Kind.ORDINARY;
 return kind == Kind.ORGANIZEDFunction() ||
 return kind == GenericFunctionKind.ORDINARY;
 return kind == Kind.INNERFACE ||
 return isOrdinaryFunction()? kind == Kind.CONSTRUCTOR
 return kind == ImmutableKind.ORDINARY;
 return kind == Kind.CLASS ||
 return kind == Kind.ORGANIZED_FUNCTION; else
 return isOrdinaryFunction().isKind.ORDINARY;
 return isOrdinaryFunction() { return kind == Kind.ORDINARY; } public boolean isCall() {
 return kind == Kind.ORGANIZALFunction() ||
 return kind == OBJECT;
 return isOrdinaryFunction() { return kind == Kind.CONSTRUCTOR; } public boolean isOrder() {
 return this.superkind == Kind.ORDINARY;
 return isOrdinaryFunction() { return kind == Kind.ORDINARY; } public boolean isFunctionType() {
 return isOrdinaryFunction() { return kind == Kind.ORGANIZAL; } else { return isInterface() {
 return isOrdinaryFunction() { return kind == Kind.ORDINARY; } public boolean isInterface() {
 return kind == Kind.ORDINARYFunction; }
 return isOrdinaryFunction() { return kind == Kind.ORDINARY; } public boolean isClass() {
 return isOrdinaryFunction() { return kind == Kind.ORDINARY; } else { return isUnaryFunction() {
 return isOrdinaryFunction() { return kind == Kind.ORDINARY; } else { return isInterface() ;
 return isOrdinaryFunction()? kind == Kind.INPUT :
 return kind == Kind.ORGANIZED; }
 return isOrdinaryFunction() { return kind == Kind.ORDINARY; } public boolean isCallable() {
 return kind == Kind.ORGANIZED_FUNCTION ; } else
 return isOrdinaryFunction() { return kind == Kind.ORDINARY; } else { return isFunctionType() {
 return isOrdinaryFunction() { return kind == Kind.ORDINARY; } public boolean isClassType() {
 return isOrdinaryFunction() { return kind == Kind.ORDINARY; } else { return hasOrdinaryFunction ( ) {
 return isOrdinaryFunction() { return kind == Kind.ORDINARY; } else { return isU2U() {
 return (Node).kind == Kind.ORDINARY;
 return kind == Kind.ORGANIZED_FULL ; } else {
 return kind == Kind.ORDINARY ; } else
 return kind == Kind.ORDINARY; } public boolean isFunction {
 return isOrdinaryFunction() { return kind == Kind.CONSTRUCTOR; } else { return isOrdinaryInterface() {
 return kind == Kind.ORGANIZED_FUNCTION_NAME ||
 return kind == Kind.ORDINARY; } else { public boolean isFunction() {
 return isOrdinaryFunction() { return kind == Kind.ORDINARY; } else { return isFunction ( ) {
 return isOrdinaryFunction() { return kind == Kind.ORDINARY; } else { return hasOrdinaryFunction ( ) ;
 return kind == Kind.CONSTRUCTorKind.ORDINARY;
return kind == Kind.ORDINARYFUNCTIONTYPE;
 return isOrdinaryFunction() { return kind == Kind.ORDINARY; } else { return isUnaryFunction() ; }
 return isOrdinaryFunction() { return kind == Kind.CONSTRUCTOR; } else { return isOrdinaryClass() {
 return return kind!== Kind.ORDINARY;
 return!this.kind == Kind.ORDINARY;
 return!Kind.ORDINARY;
 return kind == Kind || _kind == Kind.ORDINARY;
 return kind == Kind.ORDINARY_FUNCTION &&
 if (isInterface() {
 return isORDINARY;
 return kind == Kind.UNKNOWN; }
 return Kind == Kind.ORDINARY;
 return isKind.ORDINARY;
 return isOrdinaryFunction() { return kind == Kind.ORDINARY; } else { return isCustomFunction() { } } else {
 return isOrdinaryFunction() { return kind == Kind.ORDINARY; } else { return isUnaryFunction ( function ) ; }
 return kind == Kind.UNKNOWN; else
 return isOrdinaryFunction() { return kind == Kind.ORDINARY; } else { return isCustomFunction() { return false; }
 return kind == CallbackKind.ORDINARY;
 public boolean isAbstract() {
 return kind!= FunctionKind.ORDINARY;
 return kind == Kind.ORDINARY; } else { private boolean isFunction() {
 return this.type.kind == Kind.ORDINARY;
 return kind == Kind.ORDINARY; } else { public boolean isFunctionType() {
 return isOrdinaryFunction() { return kind == Kind.ORDINARY; } else { return isUnaryFunction(functionName); }
 return kind == Kind.ORDINARY; } else { return isFunction() {
 return (this).kind == Kind.ORDINARY;
 return kind == NodeKind.ORDINARY;
 boolean ordinary() {
 return isOrdinaryFunction() { return kind == Kind.ORDINARY; } else { return isUnaryFunction(function() {} }
 return kind == Kind.ORDINARY; } else { return isFunction() ;
 return kind == 0;
 return! false;
 return kind == Kind.ORDINARY; } else { boolean isFunction() {
 return kind == Kind.ORDINARY; } else { public boolean isClass() {
 return kind == Kind.ORDINARY. ; if ( call!= null ) { return true ; }
 return kind == Kind.ORDINARY; } else { public boolean isFunctionName() {
 return isInterface() ;
 return (int)kind == Kind.ORDINARY;
 return kind == INNER;
 return kind == Kind.UNSPECIFICATION; } else { public boolean isOrder() {
 return kind == Kind.ORDINARY; } else { public boolean isFunctionCall() {
 return kind == INPUT;
 return kind == Kind.ORDINARY; } else { public boolean isCall() {
 return false ;
 return isInterface();
 return kind == Kind.ORDINARY; } else { public boolean isOrdinaryInterface() {
 return kind == Kind.ORDINARY; } else { public boolean isOrdinaryClass() {
 boolean isOrdinary();
 return kind == Kind.ORDINARY; } else { return kind == Kind.IDENTIFIER ; } public boolean isFunction() {
 return kind == Kind.ORDINARY. ; if ( call!= null ) { return false ; }
 return kind == Kind.ORDINARY; } else { public boolean isOrdinaryMethod() {
 return FunctionType.ORDINARY;
 return kind!= KindOfFunctionKind.ORDINARY;
 return kind == Kind.ORDINARY; } else { return kind == Kind.IDENTIFIER ; } public boolean isClass() {
 return kind == Kind.ORDINARY; } else { public boolean isFunction() {} {
 public boolean isOrdinalFunction() { }
 return kind == Kind.ORDINARY; } else { return kind == Kind.UNKNOWN ; }
 return kind == Kind.ORDINARY; } else { return kind == Kind.IDENTIFIER ; } public boolean isCall() {
 return return true;
 return kind == Kind.ORDINARY; } else { return kind == Kind.IDENTIFIER ; } public boolean isInterface() {
 return kind == Kind.ORDINARY; } else { return kind == Kind.IDENTIFIER ; } public boolean isAlias() {
 return (void)kind == Kind.ORDINARY;
 return _ORDINARY;
 return kind == Kind.ORDINARY; } else { return kind == Kind.INTERFACE ; }
 boolean return true;
 { return true;
 return kind == Kind.ORDINARY; } else { public boolean isDirectFunction() {} {
 return kind == Kind.ORDINARY; } else { return kind == Kind.CLASS ; }
 return kind &!== Kind.ORDINARY;
 return (Function).kind == Kind.ORDINARY;
return kind == Kind.ORDINARY function;
return kind  == ;
 boolean ordered() {
 return (bool)
 return kind == Kind.ORDINARY. ; if ( call!= null ) { return true ; else
 return Kinds.ORDINARY;
 return false;
 boolean ordinary =
 return UNORDINARY;
 return kind=Kind.ORDINARY;
 boolean ordinary;
return kind  == null
 return TypeKind.ORDINARY;
 return superkind == Kind.ORDINARY;
 return Kind.IS_ORDINARY;
return kind != null
 return type.kind == Kind.ORDINARY;
return kind == Kind.ORDINARYFUN ;
 return type == Kind.ORDINARY;
 return __ORDINARY;
return kind == Kind.ORDINARYFunction();
return kind  == Function
 return!kind == Kind.ORDINARY;
 return kind.ORDINARY;
 return super.kind == Kind.ORDINARY;
return kind  == kind
 return node.kind == Kind.ORDINARY;
 return Kind.Kind.ORDINARY;
 return true &&
 return Type.ORDINARY;
return kind == Kind.ORDINARYFN;
 return NodeKind.ORDINARY;
 return Kind!== Kind.ORDINARY;
 return kinds == Kind.ORDINARY;
 return type!== Kind.ORDINARY;
 return Mode.ORDINARY;
 return AbstractKind.ORDINARY;
 return SymbolKind.ORDINARY;
 default :
 {
 m.kind == Kind.ORDINARY;
 return null;
return  true();
 return True;
 default implementation
 default::
 default():
return kind > Kind.ORDINARY;
return kind >= Kind.ORDINARY;
return kind === Kind.ORDINARY;
