addRelatedInterfaces(type, interfaces);
addRelatedInterfaces(type);
 interfaces. add ( type ) ;
 interfaces.add type);
 interfaces(type);
addRelatedInterfaces(type, interfaces, set);
 interfaces. addAll ( type ) ;
 Iterables.concat(type, interfaces);
 interfaces.add(interfaces);
 interfaces.add(type.interfaces);
 interfaces.addAll(type.interfaces);
 interfaces. add ( type ) ;
 interfaces.addAll(interfaces);
 interfaces. add ( type. getInstanceType ( ) ) ;
 resolve(type, interfaces);
 interfaces |= type;
addRelatedInterfaces(type, interfaces) ; interfaces. add ( type ) ;
 Iterables.concat(this.type, interfaces);
 interfaces. add ( type. getType ( ) ) ;
 interfaces. addAll ( type. interfaces ( ) )
 interfaces.add type;
 interfaces = type;
 interfaces. addAll ( type. getTypes ( ) ) ;
 interfaces. addAll ( Iterables.concat(type, interfaces);
addRelatedInterfaces(type.getInstanceType(), interfaces);
 interfaces. addAll ( type. getTypes ( ) )
 interfaces. add ( type )
 interfaces. add ( type. type ) ;
 interfaces. add ( type. instanceType ) ;
addRelatedInterfaces(type, interfaces) ; interfaces. add ( type )
 interfaces. add ( type. getType ( ) )
 interfaces.add(type;
 interfaces. add ( type. getInstanceType ( ) )
 interfaces. addAll ( type. interfaces ( ) ) ;
 Iterables.concaten(type, interfaces);
 interfaces. add ( type. getInterfaceType ( ) ) ;
 interfaces. addAll ( type. getInterfaceTypes ( ) )
addRelatedInterfaces( type.getInstanceType, interfaces);
 interfaces. add ( type. getInstanceType ( ) ) ; } if ( isConstructor ( ) ) {
 interfaces = Iterables.concat(this.type, interfaces);
 interfaces. add ( type. getInstanceType ( ) ) ; } if ( type!= null ) {
 interfaces. add ( type ) ; interfaces. clear ( ) ;
 interfaces. addAll ( type. getInstanceType ( ) ) ; } if ( isConstructor ( ) ) {
 interfaces. addAll ( type. interfaces )
 interfaces.addAll(type.subinterfaces);
 interfaces. add ( type ) ; } if (isInterface()) {
 interfaces. add ( type. getInstanceType ( ) ) ; } if ( isConstructor ( type ) ) {
 interfaces. add ( type. getInstanceType ( ) ) ; } if ( isInterface ( ) ) {
 interfaces. add ( type ) ; } if ( isConstructor() || isInterface()) {
 interfaces. add ( type ) ; } if (type!= null) {
 interfaces. add ( type ) ; } if ( isConstructor ( ) ) {
 Iterables.collect(type, interfaces);
 interfaces. add ( type ) ; } if (type) {
 interfaces. add ( type ) ; set. put(type, interfaces);
 interfaces. add ( type ) ; } if ( isConstructor()!= null) {
 interfaces. add ( type ) ; } for (ObjectType type : implementedInterfaces) {
 interfaces. addAll ( type. getInstanceType ( ) ) ; } if ( isConstructor ( type ) ) {
 interfaces. add ( type. getInstanceType ( ) ) ; if ( type!= null ) {
 interfaces. addAll ( type. getInstanceType ( ) ) ; } if ( isInterface ( ) ) {
 interfaces. add ( type. getType ( ) ) ; } if ( isConstructor ( ) ) {
 interfaces. addElement ( type ) ;
addRelatedInterfaces(type, interfaces, superClass);
 interfaces.add=type;
 interfaces. add ( type ) ; if ( isConstructor()!= null) {
 interfaces. add ( type ) ; if (isInterface()) {
 Iterables.copy(type, interfaces);
addRelatedInterfaces(type, interfaces) ; } else { interfaces = { } ;
 interfaces. add ( type. getInstanceType ( ) ) ; } if ( isInterface ( type ) ) {
 interfaces. add ( type. getInstanceType ( ) ) ; } if ( isConstructor()!= null) {
 interfaces. add ( type. getInstanceType ( ) ) ;
 interfaces. addAll ( type ) ; } if ( isConstructor() || isInterface()) {
 interfaces. addAll ( type ) ; } if ( isConstructor ( ) ) {
 interfaces. add ( type ) ; if ( isConstructor ( ) ) {
addRelatedInterfaces(type, interfaces) ; interfaces = null;
 interfaces.addAll(type.__interfaces);
addRelatedInterfaces(type, interfaces) ; } else { interfaces = set ( ) ;
 interfaces. add ( type. type ) ;
 interfaces.(interfaces);
 interfaces. add ( type. getType ( ) ) ;
addRelatedInterfaces(type, interfaces, set); interfaces = set ;
 interfaces. add ( type ) ; } if ( isConstructor) {
 interfaces. addAll ( type ) ; } if ( isConstructor()!= null) {
 interfaces. addAll ( type. getTypes ( ) ) ;
 interfaces. add ( type. getInstanceType ( ) ) ; if (isInterface()) {
addRelatedInterfaces(type.instanceType, interfaces);
 interfaces. addAll ( type. getType ( ) ) ; } if ( isInterface ( ) ) {
 interfaces. add ( type ) ; } if ( isConstructor!= null) {
 interfaces. add ( type. getInstanceType ( ) ) ; } if ( isConstructor() == true) {
addRelatedInterfaces(type, interfaces) ; interfaces. addAll ( set ) ;
 interfaces. add ( type ) ; break;
addRelatedInterfaces(type, interfaces) ; } else { interfaces. add ( instance )
 interfaces. add ( type ) ; } for (ObjectType type : implementedInterfaces()) {
 interfaces. add ( type. getInstanceType ( ) ) ; } if ( isConstructor()) { if (type) {
 interfaces. addAll ( type. interfaces ( ) ) ;
 Iterables.concat(type.faces, interfaces);
 interfaces. addAll ( type.get ( ));
 interfaces. add ( type. getInstanceType ( ) ) ; } if ( isConstructor) {
 interfaces. add ( type. getClass ( ) )
 interfaces. addAll ( (Set) type);
 interfaces. add ( type. getInstanceType ( ) ) ; } if ( isInterface ) {
addRelatedInterfaces type ;
 interfaces. add ( type. getInstanceType ( ) ) ; } if ( isConstructor() || isInterface() ) {
 interfaces. addAll ( type.getInterface());
 interfaces. addAll ( type. getInstanceType ( ) ) ; } if ( isConstructor() == true ) {
 interfaces. add ( type. getName ( ) )
 interfaces. addAll ( type. getInstanceType ( ) ) ; } if ( isConstructor() ) { if (type) {
addRelatedInterfaces(type, interfaces) ; } else { interfaces = null ;
 interfaces. add ( type ) ; } } else {
 interfaces = Collections.merge(type, interfaces);
 interfaces. add ( type ) ; } if ( isConstructor() == true) {
 Iterables.concatAll(type, interfaces);
 interfaces.addAll(type.faces);
addRelatedInterfaces(type.getType(), interfaces);
 interfaces. add ( type. getInstanceType ( ) ) ; } if ( isConstructor() ) { interfaces. add ( type ) ;
 interfaces. add ( type. getInstanceType ( ) ) ; } if (! isConstructor() ) { interfaces = null;
 interfaces.addAll(type.getAllSubinterfaces);
 interfaces. add ( type. getInstanceType ( ) ) ; } if ( isConstructor() || isInterface()) { this.
 interfaces. addAll ( type. getInterfaceTypes ( ) ) ;
addRelatedInterfaces(type, interfaces) ; interfaces. addAll ( type ) ;
 Iterables.concatenate(type, interfaces);
 interfaces. add ( type ) ; } else {
 interfaces = Iterables.concatat(type, interfaces);
 interfaces. add ( type ) ; if (type) {
 Interfaces.concatenate(type, interfaces);
 interfaces(interfaces);
 InterfaceType interface = (InterfaceType) type;
 interfaces = Iterables.concat(type, interfaces);
 interfaces. addAll ( type. getInstanceType ( ) ) ; } if ( isConstructor() ) { this.
 Iterables.add(type, interfaces);
 interfaces.add(type);;
 interfaces = addInterfaces(type, interfaces);
 setInterfaces(type, interfaces);
 interfaces.addAll(type.superinterfaces);
 interfaces = Set<ObjectType>. of(type, interfaces);
 interfaces = Iterables.mergeInto(type, interfaces);
 interfaces.addAll(type.getSubinterfaces);
 interfaces. addAll ( type. getInterfaceType ( ) ) ;
 interfaces = Iterables.concatenate(type, interfaces);
 interfaces.addAll(type.superclass.interfaces);
 interfaces. addAll ( type. interfaces ) ;
addRelatedInterfaces(type, interfaces) ; } else { interfaces. add ( type )
 addRelated(type, interfaces);
 Iterables.concat(interface.getInstancetype, interfaces);
 interfaces. addAll ( type.getType());
 Iterables.concat(type.interface, interfaces);
 interfaces = Iterables.concaten(type, interfaces);
addRelatedInterfaces(type,  interfaces); } else { interfaces = [ ] ;
addRelatedInterfaces(type, interfaces) ; interfaces = newSet();
 interfaces. add ( type. getInstanceType ( ) ) ; } if ( isConstructor() ) { superCtor.
 Iterables.concat(interfaces,type, interfaces);
 interfaces. add ( type. getInstanceType ( ) ) ; } if ( isConstructor() || isInterface()) { return
 interfaces.addAll(type.instance.interfaces);
 interfaces. add ( type ) ; } } }
 addInterfaces(type, interfaces);
 interfaces.addAll(type.getInstanceTypeinterfaces);
addRelatedInterfaces(type, interfaces, set); set = null ;
 interfaces.addAll(type.types);
 interfaces.addAll(type.prototype.interfaces);
 interfaces += type;
 interfaces. addAll ( Iterables.map(type, interfaces);
 interfaces.addAll(type.getType().interfaces);
 interfaces.addAll(type.allSubinterfaces);
 interfaces = Iterables.concat(interfaces, interfaces);
 Iterables.concat( implementedInterfaces,type, interfaces);
 interfaces. add ( type. type;
addRelatedInterfaces(type.getInstanceType());
 interfaces = addRelatedInterfaces(type, interfaces);
addRelatedInterfaces(type, interfaces) ; set. add ( type ) ;
addRelatedInterfaces(type, interfaces, set); set = interfaces ;
 interfaces = Sets.combine(type, interfaces);
 Iterables.concat(* type, interfaces);
 interfaces. add ( type. getInstanceType ( ) ) ; } if ( isConstructor()) { interfaces.add(type); }
 Iterables.concatInto(type, interfaces);
addRelatedInterfaces(Type.getInstanceType, interfaces);
 Iterables.concat(type.interfaces, interfaces);
 interfaces = Collections.modifiableHashSet(type, interfaces);
 interfaces. add ( type. get ( ));
addRelatedInterfaces(type, interfaces, set); } return interfaces ;
addRelatedInterfaces(type, interfaces) ; interfaces = set ;
 interfaces. add ( type ) ; addInterfaces(type, interfaces);
 interfaces. addAll ( type. getInstanceType ( ) ) ; } if ( isConstructor()) { interfaces.add(type); }
 Iterables.mergeInto(type, interfaces);
 interfaces = Iterables.concatMerge(type, interfaces);
addRelatedInterfaces(type, interfaces) ; interfaces. addAll ( type. interfaces )
addRelatedInterfaces( type, interfaces.get(type)) ;
addRelatedInterfaces(type, interfaces) ; interfaces. addAll ( type. interfaces);
addRelatedInterfaces(this.prototype, type, interfaces);
 interfaces. add ( type ) ; } return interfaces;
 Interables.concat(type, interfaces);
addRelatedInterfaces(type, interfaces, type.getInstanceType);
 interfaces. add ( type ) ; } if ( isConstructor() || isInterface()) { return
 interfaces.addAll(type.getOwnSubinterfaces);
 interfaces.addAll(type.faces;
 interfaces. add ( type ) ; continue;
 interfaces.addAll(type;
 interfaces = Collections.modify(type, interfaces);
addRelatedInterfaces(type, interfaces, set.size(), set);
 interfaces. addAll ( type. interfaces ( );
 interfaces. add ( type. getInstanceType ( ) ) ; } if ( isConstructor()) { interfaces.add(instance); }
 interfaces. add ( type ) ; interfaces = null;
 interfaces. addAll ( type ) ; } else {
 interfaces.add(); type;
 interfaces. addAll ( ) ; set. put(type, interfaces);
 interfaces.add(type.getSubinterfaces);
addRelatedInterfaces(type, interfaces) ; interfaces |= type ;
 interfaces. add ( type ) ; interfaces = set;
addRelatedInterfaces(type, interfaces, set); } else { interfaces = null ;
addRelatedInterfaces(instance, type, interfaces);
 Iterable<ObjectType> addAll(type, interfaces);
addRelatedInterfaces(type, interfaces, set, true);
 interfaces = Iterables.concatine(type, interfaces);
 Set<ObjectType>
 interfaces. addAll ( type. interfaces;
 interfaces. add ( type. getInstanceType ( ) ) ; } if ( isConstructor()) { interfaces.add(type); else
 interfaces = getInterfaces(type, interfaces);
 interfaces. add ( type. name ) ;
 interfaces.addElement(type.__interfaces);
 interfaces.addAll(type.all_interfaces);
 interfaces. addAll ( type. getInstanceType ( ) ) ; } if ( isConstructor()) { interfaces.add(type); else
 interfaces = Iterables.concatMap(type, interfaces);
 interfaces = Collections.modifiableMap.of(type, interfaces);
 interfaces = resolve(type, interfaces);
 interfaces. add ( type. getInstanceType ( ) ) ; } if ( isConstructor() ) { return
 interfaces. add ( type ) ; return;
 interfaces.add(type).class;
 interfaces = Iterables.concat(interfaceSet, interfaces);
addRelatedInterfaces(type, interfaces[0]);
 interfaces. add ( type. getInstanceType ( ) ) ; } if ( isConstructor() ) { interfaces. add ( type ) {
 interfaces.add(type.class);
addRelatedInterfaces(type, interfaces) ; interfaces. clear ( ) ;
 interfaces. add ( type ) ; Collections.add(type, interfaces);
addRelatedInterfaces(type, interfaces, set); } if (set)
addRelatedInterfaces( type, interfaces, set); } } }
 interfaces. put(type, interfaces);
 Iterables.put(type, interfaces);
addRelatedInterfaces(type, interfaces, getInstanceType(), set);
 interfaces. addAll ( type ) ; break;
 interfaces. addAll ( type. getInstanceType ( ) ) ; } if ( isConstructor()) { interfaces.add(type); return
addRelatedInterfaces(type, interfaces, set, false);
addRelatedInterfaces(type, interfaces.get(type);
addRelatedInterfaces(interfaces, type);
 interfaces.add(type, interfaces);
 interfaces.add(type.__interfaces);
addRelatedInterfaces(type,  interfaces, set); } if (set) {
 interfaces. add ( type. getInstanceType ( ) ) ; } if ( isConstructor()) { interfaces.add(instance); else
 interfaces = Sets.combine(type.faces, interfaces);
 interfaces << type;
 Iterable<ObjectType> add(type, interfaces);
 interfaces = Iterables.concatSet(type, interfaces);
addRelatedInterfaces( type.get ( ), interfaces);
 interfaces = Iterables.concat((type, interfaces);
 interfaces.add(type.prototype);
 InterfaceType interface = type ; interface.
addRelatedInterfaces(type, interfaces) ; return interfaces ;
 Collections.merge(type, interfaces);
 interfaces. addElement ( type ) ; break;
 Iterables.concatine(type, interfaces);
 interfaces.add(type.getInstanceType);
 Iterables.concat(interfaces.type, interfaces);
 interfaces = Collections.union(type, interfaces);
 interfaces. add ( type ) ; this.
 interfaces = Collections.modifySet(type, interfaces);
addRelatedInterfaces(interfaces);
 Iterables.concatMap(type, interfaces);
 addType(type, interfaces);
addRelatedInterfaces(type, interfaces, getInstanceType());
 Iterables.map(type, interfaces);
addRelatedInterfaces(type.type, interfaces);
 interfaces.add(type.subinterfaces);
addRelatedInterfaces(type, interfaces) ; set. add ( type )
 interfaces. add ( type ) ; } if ( isConstructor()) { return
 interfaces.update(type.interfaces);
 interfaces = Sets.modifySet(type, interfaces);
addRelatedInterfaces(instance.getClass(), type, interfaces);
 addAll(type, interfaces);
 interfaces.addinterfaces);
 interfaces = Collections.diff(type, interfaces);
addRelatedInterfaces(type, interfaces) ; } if ( interfaces!= null )
 Iterables.concatate(type, interfaces);
 interfaces. add ( type ) ; } return;
 Interfaces.concat(type, interfaces);
 Iterables.concat(type.*, interfaces);
addRelatedInterfaces(type, interfaces, set.class);
 Interface type = type;
 add(interfaces);
addRelatedInterfaces(getInstanceType(), type, interfaces);
addRelatedInterfaces(type, interfaces, set, null);
addRelatedInterfaces(getAllImplemented, type, interfaces);
addRelatedInterfaces(type, interfaces, superClassConstructor);
addRelatedInterfaces(interface, interfaces);
addRelatedInterfaces(Type.instanceType, interfaces);
 addType, interfaces);
addRelatedInterfaces( type.getClass(), interfaces);
addRelatedInterfaces(type.prototype, interfaces);
 interfaces = addAll(type, interfaces);
 interfaces.addAll(type, interfaces);
addRelatedInterfaces(type.class, interfaces);
 interfaces = newSet();
 Iterables.concat((type, interfaces);
 addAllRelatedInterfaces(type, interfaces);
 interfaces = union(type, interfaces);
 getInterface(type, interfaces);
 interfaces = set ;
addRelatedInterfaces(type, interfaces, type.getClass());
addRelatedInterfaces(type, interfaces, 0);
 interface. add ( type ) ;
addRelatedInterfaces(type, interfaces, null);
 InterfaceType interface = this;
 interfaces[] = type;
 interfaces ++;
 add(type, interfaces);
addRelatedInterfaces(instance.getType(), type, interfaces);
addRelatedInterfaces(type, interfaces, true);
addRelatedInterfaces(type, interfaces) ; interfaces = type ;
 Iterables.walk(type, interfaces);
addRelatedInterfaces(type, interfaces, set); break;
addRelatedInterfaces( type, interfaces, set); } }
 interfaces. putAll(type, interfaces);
addRelatedInterfaces(instance, set, type, interfaces);
addRelatedInterfaces(instance, interfaces);
 interfaces.add();
addRelatedInterfaces( type, interfaces, set); } } ;
addRelatedInterfaces(type, interfaces) ; interfaces. add ( type ) ; }
addRelatedInterfaces(type.getInstanceType, type, interfaces);
 interfaces. addAll ( type. getInterfaces ( ) ) ; #
 interfaces. add ( type. getType ( ) ) +
addRelatedInterfaces( type, interfaces, set ) ; }
 interfaces = getInterface(type, interfaces);
 interfaces_add(type.interfaces);
 interfaces = interfaces.
addRelatedInterfaces(type, interfacesSet);
addRelatedInterfaces(type,  interfaces); } else { interfaces = null ; }
(interface);
addRelatedInterfaces(type, interfaces, set.size());
 resolveType(type, interfaces);
addRelatedInterfaces(type, interfaces[type]);
 Iterables.merge(type, interfaces);
 add type, interfaces);
 addInterface(type, interfaces);
 interfaces = set.
addRelatedInterfaces( type, interfaces, set); } } {
 interfaces += type ;
addRelatedInterfaces(type, interfaces..);
addRelatedInterfaces(type, interfaces) ; interfaces = types ; }
addRelatedInterfaces(type, set, interfaces);
addRelatedInterfaces(instance.instanceType, type, interfaces);
addRelatedInterfaces(instance.prototype, type, interfaces);
 InterfaceType interface = type ; interface =
addRelatedInterfaces(type, interfaces), set);
addRelatedInterfaces(InstanceType.class, type, interfaces);
addRelatedInterfaces(type, interfaces) ; interfaces. addAll(set); }
addRelatedInterfaces(Type.INSTANCE, interfaces);
 interfaces.= type;
 InterfaceType interface = this.
 interfaces.update(interfaces);
addRelatedInterfaces(type, interfaces) ; interfaces = type ; }
addRelatedInterfaces(instance.get ( ), type, interfaces);
 set. put(type, interfaces);
 interface.addAll(interfaces);
addRelatedInterfaces(type, interfaces, this.prototype);
addRelatedInterfaces(types, type);
addRelatedInterfaces(type, interfaces) ; } } }
 Iterators.concat(type, interfaces);
addRelatedInterfaces(type, interfaces, superclass);
 InterfaceType interface = (InterfaceType) type();
 interfaces. add ( type ) ; } } else,
addRelatedInterfaces(type.classType, interfaces);
addRelatedInterfaces(type, interfaces) ; return null;
 interfaces. add ( type ) ; } } else {{
addRelatedInterfaces(type, interfaces, subclasses);
 interfaces. add ( type ) ; }
 interfaces. add ( type. type ).
 return interfaces;
addRelatedInterfaces(type, interfaces); }
 interfaces. add ( type ) ||
addRelatedInterfaces(type, interfaces, superClassConstructors);
 interfaces. add ( type ).
 this.
addRelatedInterfaces(instance, * type);
 interfaces.(type);
 interfaces = (interfaces);
 Collections.walk(type, interfaces);
addRelatedInterfaces(instances);
 Collections.filter(type, interfaces);
 interfaces = newSet(interfaces);
addRelatedInterfaces(instanceType, type, interfaces);
addRelatedInterfaces(instance.objectType, type, interfaces);
 Collections.copyOfRange(type, interfaces);
addRelatedInterfaces(type, interfaces) ; return false;
addRelatedInterfaces(* type, interfaces);
( interfaces);
addRelatedInterfaces(type.*, interfaces);
 interfaces.add(type); }
addRelatedInterfaces(this, type);
addRelatedInterfaces(instance.className, type, interfaces);
 interfaces = union(interfaces);
addRelatedInterfaces(type, interfaces) ; break ;
 Iterables.
 (type, interfaces);
 interfaces.Add type);
 add type);
 InterfaceType interface = type ; interface &&
addRelatedInterfaces(type, interfaces, false);
addRelatedInterfaces(superClass, type, interfaces);
addRelatedInterfaces(instances, type, interfaces);
addRelatedInterfaces(object type, interfaces);
 interfaces(type, interfaces);
 interfaces!= type);
 interfaces. add ( type ) {
addRelatedInterfaces(faces type);
addRelatedInterfaces(type, interfaces, instance.getClass);
 ++ interfaces;
addRelatedInterfaces(thisClass, type, interfaces);
addRelatedInterfaces(instance.class, type, interfaces);
 (type);
addRelatedInterfaces(instanceType, interfaces);
 resolve type, interfaces);
 parse(type, interfaces);
 ClassHelper.
addRelatedInterfaces(type, interfaces) ; } }
addRelatedInterfaces type();
addRelatedInterfaces(objectType, interfaces);
addRelatedInterfaces(type, set);
addRelatedInterfaces(type, & interfaces);
addRelatedInterfaces(types);
addRelatedInterfaces(type, interfaces) + set;
 add(, interfaces);
addRelatedInterfaces(interface);
 Interface type = type();
addRelatedInterfaces(interface type);
 ClassType.
addRelatedInterfaces type);
 i ++;
addRelatedInterfaces(type, set, interfaces); }
addRelatedInterfaces(type, interfaces++);
 interfaces.type);
addRelatedInterfaces(type, interfaces, set) {
addRelatedInterfaces(this, type, interfaces);
 InterfaceHelper.
 interfaces add type);
addRelatedInterfaces(type.*);
 inject(interfaces);
addRelatedInterfaces(type); }
addRelatedInterfaces(type, sets);
 set(interfaces);
addRelatedInterfaces(type, interfaces) ; return;
addRelatedInterfaces(type, interfaces, baseClass);
addRelatedInterfaces(className, type, interfaces);
addRelatedInterfaces(type), interfaces);
addRelatedInterfaces(type, interfaces, parentClass);
addRelatedInterfaces(type, interface);
 define(type, interfaces);
 register(type, interfaces);
addRelatedInterfaces types;
addRelatedInterfaces(type, set); }
 type =
 super.
addRelatedInterfaces(type, interfaces) break;
addRelatedInterfaces(type, sets); }
 type &&
addRelatedInterfaces(null, type, interfaces);
addRelatedInterfaces(type), interfaces
addRelatedInterfaces(Instance, type, interfaces);
addRelatedInterfaces(type, interfaces
addRelatedInterfaces(type, type, interfaces);
addRelatedInterfaces(type, interfaces) ;...
addRelatedInterfaces(type, interfaces) { }
 get(type, interfaces);
addRelatedInterfaces(Type, interfaces);
addRelatedInterfaces(type, interfaces) {
addRelatedInterfaces(Type);
 return
 #
addRelatedInterfaces(type, inter);
addRelatedInterfaces(class, interfaces);
