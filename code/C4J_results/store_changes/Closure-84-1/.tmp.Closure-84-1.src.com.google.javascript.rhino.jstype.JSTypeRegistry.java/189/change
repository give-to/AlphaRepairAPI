 return this;
 }
 resetForTypeCheck();
 this.tolerateUndefinedValues = tolerateUndefinedValues;
 resetForTypeCheck(); this.tolerateUndefinedValues = tolerateUndefinedValues;
 resetForTypeCheck(); this.tolerateUndefinedValues = tolerateUndefinedValues
 resetForTypeCheck(); this.tolerateUndefinedValues();
 resetForTypeCheck(); return this;
 this.tolerateUndefinedValues = tolerateUndefinedValues
 resetForTypeCheck(); this.tolerateUndefinedValues = false;
 resetForTypeCheck(); this.tolerateUndefinedValues = true;
 resetForTypeCheck(); this.tolerateUndefinedValues = true
 resetForTypeCheck(); this.tolerateUndefinedValues = tolerateUndefinedValues; return this;
 this.reporter = reporter; resetForTypeCheck(); this.tolerateUndefinedValues = tolerateUndefinedValues;
 return this; }
 this.tolerateUndefinedValues();
 this.tolerateUndefinedValues = tolerateUndefinedValues; return this;
 resetForTypeCheck(); this.tolerateUndefinedValues = tolerateUndefinedValues; return;
 resetForTypeCheck(); this.tolerateUndefinedValues = false
 this.reporter = reporter; this.nativeTypes = nativeTypes;
 this.tolerateUndefinedValues = false;
 resetForTypeCheck(); this.reporter = reporter;
 this.tolerateUndefinedValues = true;
 this.reporter = reporter; this.nativeTypes = null;
 resetForTypeCheck(); this. namesToTypes = new HashMap < String, JSType > ( ) ; resetForTypeCheck();
 resetForTypeCheck(); this.tolerateUndefinedValues;
 resetForTypeCheck(); this.tolerateUndefinedValues = tolerateUndefined
 resetForTypeCheck(); this. namesToTypes = new HashMap<String, JSType>(); resetForTypeCheck(this);
 resetForTypeCheck(); this. namesToTypes = new HashMap<String, JSType>(); resetForTypeCheck(); return;
 resetForTypeCheck(); this.tolerateUndefinedValues = tolerateAll;
 resetForTypeCheck(); this.tolerateUndefinedValues = tolerateUndefinedValues ; return this ; }
 this.reporter = reporter; resetForTypeCheck(); this.tolerateUndefinedValues();
 this.reporter = reporter; this.nativeTypes = new JSType[JSTypeNative.values().length];
 resetForTypeCheck(); this. namesToTypes = new HashMap<String, JSType>(); resetForTypeCheck(); this;
 this.reporter = reporter; this.nativeTypes = new ArrayList<JSType>(); resetForTypeCheck();
 resetForTypeCheck(); this.tolerateUndefinedValues = tolerateValues;
 resetForTypeCheck(); this.tolerateUndefinedValues = tolerateUndefinedValues; this;
 this.tolerateUndefinedValues = true
 resetForTypeCheck(); this.tolerateUndefinedValues = tolerateEmpty;
 this.reporter = reporter; this.nativeTypes = namesToTypes;
 this.reporter = reporter; this.nativeTypes = new ArrayList.<JSType>(); resetForTypeCheck();
 resetForTypeCheck(); this.tolerateUndefinedValues++;
 this.reporter = reporter; this.nativeTypes = new JSTypeArray ( ) ;
 resetForTypeCheck(); this.reporter;
 this.reporter = reporter; this.nativeTypes = new JSType[]();
 resetForTypeCheck(); this. namesToTypes = new HashMap < String, JSType > ( ) ; return this ; }
 this.tolerateUndefinedValues = tolerateUndefinedValues; return;
 resetForTypeCheck(); this.tolerateUndefinedValues = [];
 this.reporter = reporter; this.nativeTypes = new JSType [ ] ;
 this.tolerateUndefinedValues = tolerateUndefined
 this.reporter = reporter; this.nativeTypes = new JSType ( ) ;
 this.tolerateUndefinedValues = false
 resetForTypeCheck(); this.tolerateUndefinedValues = tolerateUndefinedValues; this(reporter);
 resetForTypeCheck(); this.tolerateUndefinedValues = tolerateUndefinedValues ; return resolveMode ;
 resetForTypeCheck(reporter);
 resetForTypeCheck(); this.tolerateUnknownTypes();
 resetForTypeCheck(); this.tolerateUndefinedValues = tolerateUndefinedValues ; return this ( reporter )
 this.reporter = reporter; resetForTypeCheck(); this.tolerateUndefinedValues
 this.resolveMode = resolveMode;
 resetForTypeCheck(); return;
 this.reporter = reporter; this.nativeTypes = new ArrayList < JSType > ( ) ; return this ; }
 resetForTypeCheck(); this.tolerateUndefinedValues = tolerateUndefinedValues ; }
 this.reporter = reporter; this.nativeTypes = new ArrayList < JSType > ( ) ; return this ;
 resetForTypeCheck(false);
 resetForTypeCheck(); this.tolerateUndefinedValues = tolerateUndefinedValues; return this ( reporter);
 this.reporter = reporter; resetForTypeCheck(); this.tolerateUndefinedValues = tolerateUndefinedValues ; }
 resetForTypeCheck(); this.tolerateUndefinedValues = tolerateUndefined;
 resetForTypeCheck(); return resolveMode;
 this.resetForTypeCheck(); return this;
 resetForTypeCheck(); this.tolerateUndefinedValues = tolerateUnknownValues;
 resetForTypeCheck(); this.tolerateUndefinedValues = tolerateUndefinedValues ; return this ( ) ;
 resetForTypeCheck(); this.reporter = reporter
 resetForTypeCheck(); this.tolerateUndefinedValues = tolerateUndefinedValues; this.types = null;
 resetForTypeCheck(); this.tolerateUndefinedValues = tolerateUndefinedValues ; this. reporter = reporter ;
 this.reporter = reporter; this.nativeTypes = new JSType[JSTypeNative.values().length]; }
 this.reporter = reporter; this.nativeTypes = new JSTypeArray ( )
 resetForTypeCheck(); this.tolerateAllTypes();
 resetForTypeCheck(); this. namesToTypes = new HashMap<String, JSType>(); resetForTypeCheck() {
 resetForTypeCheck(); this.tolerateUndefinedValues = tolerateUndefinedValues; return this.reporter;
 resetForTypeCheck(); this. namesToTypes = new HashMap<String, JSType>(); resetForTypeCheck();...
 resetForTypeCheck(); this. namesToTypes = new HashMap<String, JSType>(); resetForTypeCheck(); }
 this.reporter = reporter;
 this.tolerateUndefinedValues = tolerateUndefined;
 resetForTypeCheck(); this.tolerateUndefinedValues = tolerateUndefinedValues; return
 this.reporter = reporter; resetForTypeCheck(); this.tolerateUndefinedValues = tolerateUndefinedValues; return
 this.tolerateUndefinedValues = tolerateAll;
 this.tolerateUndefinedValues++;
 resetForTypeCheck(); this.tolerateUndefinedValues = tolerateUndefinedValues ; return this ; } } ;
 resetForTypeCheck(true);
 this.tolerateUndefinedValues = tolerateValues;
 resetForTypeCheck(); this.tolerateNamed();
 this.reporter = reporter; this.nativeTypes;
 return;
 this(nativeTypes);
 this.resolveMode = null;
 this.resolveMode = mode;
 resetForTypeCheck(); return this ; }
 initForTypeCheck();
 return resolveMode;
 this.types = null;
 this(false);
 } return this ; }
 } public void initialize();
 } } ; }
 return reporter;
 this(true);
 return this.types;
 resetForTypeCheck() {
 reporter = reporter;
 resetForTypeCheck() {}
 this.nativeTypes();
 return registry;
 return this; };
 return this; } }
 } } ;
 } public static
 } public static class
 return null;
 } public void initialize()
 this;
 this();
 return; }
 return this;
 return this }
 return this
 } }
 };
 } public
 }
...
 return
 }; }
 },
