 compilerEnv.setAllowMemberExprAsFunctionName(true);
 } else {
 } else { compilerEnv.setAllowMemberExprAsFunctionName(true);
 return null;
 } else { compilerEnv.setReservedKeywordAsComment(true);
 return compilerEnv;
 } else { compilerEnv.setReservedKeywordAsSyntheticBlock(true);
compilerEnv.setAllowMemberExprAsFunctionName(true); return null;
 } else { compilerEnv.setReservedKeywordAsString(true);
 } else { compilerEnv.setReservedKeyword(true);
 compilerEnv = null;
 } else { compilerEnv.setReservedKeywordAsSynthetic(true);
 } else { compilerEnv.setReservedKeywordAsComment(false);
 } else { compilerEnv. setReservedKeywordAsIdentifier(false); } if (config.isIdeMode) {
 } else { compilerEnv.setReservedKeywordAs(true);
 compilerEnv.setDebug(true);
 } else { compilerEnv.setReservedKeywordAsFunctionName(false); } if (config.isIdeMode) {
 logger.exit(true);
compilerEnv.setAllowMemberExprAsFunctionName(true); } return compilerEnv ;
 } else { compilerEnv.setReservedKeywordAsFunctionName(true); } if (config.isIdeMode) {
 } else { compilerEnv.setUnreservedKeywordAsIdentifier(true);
compilerEnv.setAllowMemberExprAsFunctionName(true); return compilerEnv;
 } else { compilerEnv.setReservedKeywordAsText(true);
 } else { compilerEnv.setReservedKeywordAsExpression(true);
 } else { compilerEnv.setReservedKeyword(false);
 } else { compilerEnv.setReservedKeywordAsString(false);
 } else { compilerEnv.setIgnoredKeywordAsIdentifier(true); } else {
 } else { compilerEnv.setReservedKeywordAsWhitespace(true);
 } else { compilerEnv.setReservedKeywordAsFunctionName(false); } else {
 } else { compilerEnv.setReservedKeywordAsBlockStatement(true);
 } else { compilerEnv.setReservedKeywordAsIdentifier(false);
 } else { compilerEnv.setReservedKeywordAsComment();
 } else { compilerEnv.setReservedKeywordAsVariableName(true);
 } else { compilerEnv.setReservedKeywordAsFunctionName(false);
 } else { compilerEnv.setReservedKeywordAsFunctionName(true); } else {
 } else { if (config.isIdeMode) {
 } else { compilerEnv.setDebug(true);
 } else { compilerEnv = compilerEnv.setAllowMemberExprAsFunctionName(true);
 } else { compilerEnv.setReservedWordAsComment(true);
 } if (config.isMemberExprAllowAsFunctionName) {
 } else { compilerEnv.setIgnoredKeywordAsIdentifier(true);
 } else { compilerEnv.setAllowMemberExprAsIdentifier(true); } else {
 } else { compilerEnv. setReservedKeywordAsIdentifier(false); } if (config.isMemberExpression) {
 } if (config.isIdeMode) {
 } else { compilerEnv.setIgnoredKeywordAsIdentifier(false); } else {
 } else { compilerEnv.setReservedSyntheticBlock(true);
 } else { compilerEnv.setWarn(true);
 } else { compilerEnv. setReservedKeywordAsIdentifier(false); } if (config.isMemberExpr) {
 } else { compilerEnv.setReservedKeywordAsFunctionName();
 } else { compilerEnv.setReservedKeywordAsFunctionName(true);
 } else { compilerEnv.setReservedKeywordAsFunctionName(false); } if (config.isMemberExpr) {
 } else { compilerEnv.setReservedKeywordAsNode(true);
 compilerEnv.setWarnComments(true);
 } else { compilerEnv. setReservedKeywordAsIdentifier(false); } if (config.isMode) {
 } else { compilerEnv.setReservedKeywordAsString();
 } else { compilerEnv.setReservedKeywordAsString(true);
 } else { compilerEnv.setReservedKeywordAlways(true);
 } else { compilerEnv. setReservedKeywordAsIdentifier(false); } if (config.isMember) {
 } else { compilerEnv.setIgnoredKeywordAsIdentifier(true); } } else {
 } else { compilerEnv.setReservedKeywordAsJSDocComment(true);
 } else { compilerEnv.setReservedKeywordAsString(false);
 } else { compilerEnv.setComments(true);
compilerEnv.setAllowMemberExprAsFunctionName(true); compilerEnv.setDebug(true);
compilerEnv.setAllowMemberExprAsFunctionName(false); return null;
 } else { compilerEnv.setIgnoredKeywordAsIdentifier(true); }
 } else { compilerEnv.setReservedKeywordAsFunctionName(false); } if (config.isMember) {
 } else { compilerEnv.setReservedKeywordAsString();
 } else { compilerEnv. setReservedKeywordAsIdentifier(false); } if (config.isDebug) {
 } if (config.isMemberExprAsFunctionName) {
 } else { compilerEnv. setReservedKeywordAsIdentifier(false); } if (config.debug) {
 } else { compilerEnv. setReservedKeywordAsSyntheticBlock(false);
 } else { compilerEnv.setIgnoredKeywordAsIdentifier();
compilerEnv.setAllowMemberExprAsFunctionName(true); compilerEnv = null;
 } else { compilerEnv.setReservedKeywordAsFunctionName(false); } if (config.isMode) {
 } else { compilerEnv.unsetAllowMemberExprAsFunctionName(true);
 compilerEnv.setComments(true);
 } else { compilerEnv.setReservedKeywordAsStringifier(true);
 } else { compilerEnv.setAllowMemberExprAsIdentifier(true);
 } else { compilerEnv.setReservedKeywordOnly(true);
 } else { compilerEnv.setIgnoredKeywordAsIdentifier(false);
 } else { compilerEnv.setUnsetAllowMemberExprAsFunctionName(true);
 } else { compilerEnv = { };
 } else { compilerEnv.setReservedKeywordAsFunctionName(false); }
 } else { compilerEnv.setIgnoredKeywordAsIdentifier(false); }
 } else { compilerEnv. setReservedKeywordAsIdentifier ( false ) ; } if (config.isIdeMode)
 } if (config.isMemberExprAllowAsFunctionNameMode) {
 } if (config.isMemberExprMode) {
 } else if (config.isMemberExprMode) {
 } else { if (config.isMemberMode) {
 } else { compilerEnv.setReservedKeywordAsBlockComment(true);
 } else if (config.isIdeMode) {
 } else { compilerEnv.setReservedKeywordAsSyntheticNode(true);
 } if (config.isMemberExprFunctionMode) {
 } else { compilerEnv. setReservedKeywordAsIdentifier ( false ) ; } if (useFunction) {
 } else { compilerEnv.setReservedKeywordAsSymbolList(true);
 } else { compilerEnv.setIgnoreComments(true);
 } else if (config.isMemberExprAsFunctionName) {
 } else { compilerEnv.setReservedKeywords(true);
compilerEnv.setAllowMemberExprAsFunctionName(true); compilerEnv.init(ctx);
 } else { compilerEnv.setWarnComments(true);
 } else { compilerEnv. setReservedKeywordAsIdentifier(false); } if (config.member) {
 } else { compilerEnv.setReservedKeywordAsNamedNodes(true);
compilerEnv.setAllowMemberExprAsFunctionName(false); } return compilerEnv ;
 } else { compilerEnv.setReservedKeywordAsSyntheticString(true);
 } else { compilerEnv.setReservedKeywordAsComment(...)
 } else { compilerEnv.setReservedKeywordAsFunction(true);
 } else { compilerEnv. setReservedKeywordAsIdentifier(false); } if (config.include) {
 } else { compilerEnv.setReservedKeywordAsComment(false);
 } else { compilerEnv.setReservedKeywordAsFunction(false);
 } else { compilerEnv.setReservedKeywordAsFunctionName(false); } if (allowMember) {
 } else { compilerEnv.setComment(true);
compilerEnv.setAllowMemberExprAsFunctionName(false); return compilerEnv;
 } else { compilerEnv.setIgnoreComments(true);
 } else { compilerEnv = null;
 } else { compilerEnv.set(true);
 } else { compilerEnv.setReservedWordAsString(true);
 } else if (config.isMemberExprAllowAsFunctionName) {
 } else { compilerEnv.setIgnoredKeyword(true);
 } else { compilerEnv = config;
 } else { compilerEnv.config.setAllowMemberExprAsFunctionName(true);
 config.setAllowMemberExprAsFunctionName(true);
 } else { compilerEnv.setReservedKeywordAsFunctionName(true); }
compilerEnv.setAllowMemberExprAsFunctionName(true); } else { Context.exit();
 } if (config.isMemberExprAllowAsFunctionName()) {
 } else { compilerEnv.setReservedKeywordAsFunctionName(true); } if (allowMember) {
 compilerEnv.setDebug(true;
 } else { compilerEnv.setToken(true);
compilerEnv.setAllowMemberExprAsFunctionName(true); } return null ;
 } else { compilerEnv.setReservedKeywordAsSyntaxError(true);
 } else { compilerEnv.setWarnKeyword(true);
 } else { compilerEnv. initialize ( ) ;
 } else { if (config.isMemberExprMode) {
compilerEnv.setDebugMode(true);
 } else { compilerEnv.setReservedKeywordAsFunctionName(false); } if (useMember) {
 } else { compilerEnvironment.setAllowMemberExprAsFunctionName(true);
 } else { compilerEnv.setMode(true);
 } else { compilerEnv.debug(true);
 } else { compilerEnv.setReservedKeywordAsFunctionName(false); } if (includeMember) {
compilerEnv.setAllowMemberExprAsFunctionName(true); } else { compilerEnv = null;
 } else if (config.isMemberExprFunctionMode) {
 } else { compilerEnv.setAsIdentifier(true);
 } else { compilerEnv.setRewriteKeyword(true);
compilerEnv.setAllowMemberExprAsFunctionName(true); compilerEnv = cx ;
 } else { compilerEnv.setAllowMemberExprAsIdentifier(true); }
 } else if (config.isMemberExpression) {
 } else { compilerEn.setAllowMemberExprAsFunctionName(true);
 } else { compilerEnv.setReservedKeywordAsString(); }
 } else { compilerEnv. setReservedKeywordAsIdentifier(false); } if (config.useFunction)
 } else { compilerEnv.init(config);
 } else { compilerEnv.setReservedKeywordAsFunctionName(false); } if (allowMembers) {
compilerEnv.setAllowMemberExprAsFunctionName(true); } else { compilerEnv = config ;
 } else { compilerEnv.setReservedSymbol(true);
 } else { compilerEnv.setAllowComments(true);
 logger.setDebug(true);
 } else { if (config.isMemberExpression) {
compilerEnv.setAllowMemberExprAsFunctionName(true); compilerEnv.setComments(true);
 } else { compilerEnv.setReservedComments(true);
 } else { compilerEnv. init ( ) ;
 } else { compilerEnv = compilerEnv ;
compilerEnv.setAllowMemberExprAsFunctionName(true) } return compilerEnv ;
 } else { compilerEnv.setWhiteSpace(true);
 } else { compilerEnv.enable(true);
 } else { compilerEnv. setIgnoredKeywordAsIdentifier(true); } else { } else {
 } if (config.isMemberExprAllowFunctionName) {
 } else { compilerEnv.ignore(true);
 logger.debug(true);
 } else { compilerEnv = cx;
 } else { compilerEnv. setReservedKeywordAsFunctionName(false); } else { } else {
 compilerEnv.setWhiteSpace(true);
 } if (config.isMemberMode) {
 compilerEnv.setWarnWhiteSpace(true);
 } else { if (config.isIdeMode)
 compilerEnv.debug(true);
 return sourceString;
 } else { compilerEnv.disable(true);
 } else { compilerEnv.setIgnoringComments(true);
 compilerEnv.setWarn(true);
 } else { if (config.isMemberExprMode)
 } else { compilerEnv = defaultEnvironment;
compilerEnv.setAllowMemberExprAsFunctionName(true) } else { compilerEnv = { } ;
 compilerEnv = env;
 } else { compilerEnvsetAllowMemberExprAsFunctionName(true);
compilerEnv.setAllowMemberExprAsFunctionName(false); compilerEnv.init(ctx);
 } else { compilerEnv.setIgnore(true);
 if (config.isIdeMode) {
 compilerEnv.setDebug(false);
 } else { try { compilerEnv.setAllowMemberExprAsFunctionName(true);
 } else { if (config.isMemberMode)
 compilerEnv.setComments(true;
compilerEnv.setAllowMemberExprAsFunctionName(true); compilerEnv = { } ;
 compilerEnv.setIgnoreComments(true);
compilerEnv.setAllowMemberExprAsFunctionName(true); compilerEnv. init ( ) ;
 } else { compilerEnv.setReservedKeywordAsString(true); }
 compilerEnv = cx;
compilerEnv.setAllowMemberExprAsFunctionName(false, true);
 compilerEnv.setWarnComments(true;
 } else { compilerEnv.set(config);
 } else { compilerEnv.setReservedKeywordAsComment(true); }
compilerEnv.setAllowMemberExprAsFunctionName(true) } else { compilerEnv = null;
 } else { compilerEnv.setAsComment(true);
compilerEnv.setAllowMemberExprAsFunctionName(true) } else { compilerEnv = config ;
 } else if (config.isMemberExpr) {
 compilerEnv(ctx);
 } else { compilerEnv. reset ( ) ;
 } else { compilerEnv = logger;
 } else { compilerEnv.setReservedKeywordAsIdentifier(false); }
compilerEnv.setAllowMemberExprAsFunctionName(true); compilerEnv.build(ctx);
 } else { compilerEnv.debug=true;
compilerEnv.setAllowMemberExprAsFunctionName(true, false);
 } else { compilerEnv.impl.setAllowMemberExprAsFunctionName(true);
 } if (config.isMember) {
 compilerEnv.setDebugMode(true;
 } else { compilerEnv = new Environment ( ) ;
 } else { compilerEnv.setIgnored(true);
compilerEnv.setAllowMemberExprAsFunctionName(true, true);
 } else { compilerEnv.setReservedKeywordAsString(false); }
 if (config) compilerEnv.setAllowMemberExprAsFunctionName(true);
compilerEnv.setIgnoredKeywordAsIdentifier();
 if (config.isMemberMode)
 } else { logger.exit(true);
 compilerEnv.init(config);
compilerEnv. init ( ) ;
compilerEnv.setAllowMemberExprAsFunctionName(false, sourceName);
 } else { compilerEnv = System.env;
 } else { compilerEnv.setWarnAll(true);
 } else { compilerEnv.setsetAllowMemberExprAsFunctionName(true);
compilerEnv.setAllowMemberExprAsFunctionName(true); logger(ctx);
 } else { compilerEnv.setReservedKeywordAsComment(false); }
 else { compilerEnv.setAllowMemberExprAsFunctionName(true);
 } else { compilerEnv.options.setAllowMemberExprAsFunctionName(true);
 } if (config.member) {
 } else { compilerEnv = config;
compilerEnv.setAllowMemberExprAsFunctionName(true); compilerEnv.init(config);
 } if (config.isFunction) {
 } else { compilerEnv = new Environment (config);
 compilerEnv = config;
 } else { config = compilerEnv.setAllowMemberExprAsFunctionName(true);
compilerEnv.setAllowMemberExprAsFunctionName(true); compilerEnv = {
compilerEnv.setIgnoredKeywordAsIdentifier(true
 compilerEnv.debug=true;
 } else { compilerEnv = new EnvironmentContext();
 } else { compilerEnv.setReservedComments(false);
 } else { compilerEnv. resetComments ( ) ;
 } if (config.debug) {
 } else { compilerEnv.flags.setAllowMemberExprAsFunctionName(true);
 compilerEnvironment.setAllowMemberExprAsFunctionName(true);
 compilerEnv.setComments(false);
compilerEnv.setAllowMemberExprAsFunctionName(true); compilerEnv = null
 } else { compilerEnv.setReservedWord(false);
compilerEnv.setAllowMemberExprAsFunctionName(true, sourceName);
 compilerEnv.init(ctx);
 } else { console.log compilerEnv.setAllowMemberExprAsFunctionName(true);
compilerEnv.setAllowMemberExprAsFunctionName(false); } return null ;
 } else { compilerEnv.env.setAllowMemberExprAsFunctionName(true);
 } else { compilerEnv.jsc.setAllowMemberExprAsFunctionName(true);
 } else { compilerEnv.setReservedKeywordAsIdentifier(false); {
 } else { compilerEnv.defaults.setAllowMemberExprAsFunctionName(true);
 } else { return compilerEnv;
 } else { compilerEnv.default.setAllowMemberExprAsFunctionName(true);
compilerEnv.setAllowMemberExprAsFunctionName(true) } else { Context.exit();
compilerEnv.setAllowMemberExprAsFunctionName(config.isIdeMode);
 } else { compilerEnv. setReservedKeywordAsIdentifier(false); } {
 } else { compilerEnv.__setAllowMemberExprAsFunctionName(true);
compilerEnv.setReservedKeywordAsComment(true);
compilerEnv.setAllowMemberExprAsFunctionName(true); compilerEnv.setDebugMode();
 compilerEnv.setMode(true);
 } else { compilerEnv = null;
compilerEnv.setAllowMemberExprAsFunctionName(true) } else { context. exit ( ) ;
compilerEnv.setAllowMemberExprAsFunctionName(true); return sourceString);
 if (config.isFunctionMode)
 } else { compilerEnv = ctx;
compilerEnv. initialize ( ) ;
compilerEnv = {
compilerEnv.setAllowMemberExprAsFunctionName(true); return null; }
 compilerEnv.setIgnoringComments(true);
compilerEnv.setWarnWarnings(true);
 } else { compilerEnv.init(config;
 compilerEnv(config);
 } else { compilerEnv. setDefault ( true);
compilerEnv.setAllowMemberExprAsFunctionName(true); }
 compilerEnv.setCommentsEnabled(true);
 } else { compilerEnv.schema.setAllowMemberExprAsFunctionName(true);
 } else { compilerEnv.setAllowMemberExprAsIdentifier(true); } else
 compilerEnv.update(config);
 } return (Node) cx;
 } else { compilerEnv.cx.setAllowMemberExprAsFunctionName(true);
 } else { compilerEnv.can.setAllowMemberExprAsFunctionName(true);
 } { compilerEnv.setAllowMemberExprAsFunctionName(true);
 } else { compilerEnv. setDefaultAsIdentifier();
 compilerEnv.setDebugMode(false);
 } else { compilerEnv.setIgnoredKeywordAsIdentifier(false); } {
 compilerEnv.setOutput(true);
 } if (useFunction) {
 } else { compilerEnv.setIgnoredKeywordAsIdentifier(true); } {
 compilerEnv.build(config);
 } else { compilerEnv.setReservedKeywordAsFunctionName(false); } else
 } else { compilerEnv.setReservedKeywordAsFunctionName(false); } {
 logger.info("...");
 compilerEnv.init(ctx;
compilerEnv.setAllowMemberExprAsFunctionName(true) return compilerEnv;
compilerEnv.setAllowMemberExprAsFunctionName(true) return null;
compilerEnv.setAllowMemberExprAsFunctionName(true) } return null;
 } if (debug) {
 compilerEnv.setup(config);
 } else { compilerEnv. setReserved ( false);
compilerEnv.setAllowMemberExprAsFunctionName(true); compilerEnv.init(); }
 } } else {
 logger.enter(true);
compilerEnv.setAllowMemberExprAsFunctionName(true) if (config.isIdeMode) { }
 } else { compilerEnv.defaultConfig.setAllowMemberExprAsFunctionName(true);
compilerEnv.setAllowMemberExprAsFunctionName(true); compilerEnv = env ; }
 } else if (debug) {
compilerEnv.setAllowMemberExprAsFunctionName(false); logger(ctx);
 } return compilerEnv. ast;
 } else { compilerEnv.setIgnoredKeywordAsIdentifier(true); } } else {{
 } else { compilerEnv.defaultConfig().setAllowMemberExprAsFunctionName(true);
 if (config.isMember) { config.setAllowMemberExprAsFunctionName(true);
 logger.setAllowMemberExprAsFunctionName(true);
 if (debug) compilerEnv.setAllowMemberExprAsFunctionName(true);
 } if (useMember) {
compilerEnv.setWarnWhiteSpaceAsComment(true);
 logger.setDebugMode(true);
compilerEnv.setIgnoredKeywordAsIdentifier(...)
compilerEnv.setWarnWarn(true);
 console.log(config);
 if (config.isMember) {
 } else { compilerEnv.javaEnv.setAllowMemberExprAsFunctionName(true);
 } compilerEnv.setAllowMemberExprAsFunctionName(true);
compilerEnv.setAllowMemberExprAsFunctionName(true); } return cx ;
 compilerEnv.setIgnore(true);
compilerEnv.setIgnoredComments(true);
 if (config) { config.setAllowMemberExprAsFunctionName(true);
 compilerConfig.setAllowMemberExprAsFunctionName(true);
 if (useFunctionName)
 compilerEnv.setDebugMode(true); }
 } else { compilerEnv. setReservedKeywordAsFunctionName ( true ) ; } else { } else
 setDebug(true);
 } else { compilerConfig.setAllowMemberExprAsFunctionName(true);
compilerEnv. setup ( ) ;
compilerEnv.setAllowMemberExprAsFunctionName(true) } else { logger = null;
 console.log(ctx);
 compilerEnv.setAutoTag(true);
 compilerEnv.init(config;
 logger(ctx);
 return null);
 } compilerEnv = cx;
 } else { compilerEnv. setReservedKeywordAsFunctionName ( true ) ; } else { }
compilerEnv.setAllowMemberExprAsFunctionName();
compilerEnv = null
 return compilerEnv);
compilerEnv.setWarnSyntaxComments(true);
compilerEnv.setAllowMemberExprAsFunctionName(false);
 compilerEnv.exit(););
compilerEnv.setAllowMemberExprAsFunctionName(true, sourceString);
compilerEnv.setAllowMemberExprAsFunctionName(true
 } else { compilerEnv.defaultWarn.setAllowMemberExprAsFunctionName(true);
 console.exit(true);
compilerEnv.setPrettyPrint(true);
 config.setIdeMode(true);
 if (config.useComments)
 compilerEnv.init(_);
 } else { compilerEnv.setReservedKeywordAsFunctionName(false); } else { } else
 return compilerEnv.root;
 } else { compilerEnv.javaClassLoader.setAllowMemberExprAsFunctionName(true);
compilerEnv.setAllowMemberExprAsFunctionName(false, sourceString);
 } else { compilerEnv = {}; }
 compilerEnv.setIgnored(true);
compilerEnv.setAllowMemberExprAsFunctionName(true); console(ctx);
 } return compilerEnv;
 compilerEnv.enter(_);
 compilerEnv.start(_);
 } else { compilerEnv.doclet.setAllowMemberExprAsFunctionName(true);
compilerEnv.exit();
 } else { compilerEnv.defaultWatcher.setAllowMemberExprAsFunctionName(true);
 config.setDebug(true);
 return compilerEnv.node;
 compilerEnv.enable(true);
 logger.info(true);
compilerEnv.setWarnWhiteSpace(true); }
 } else { compilerEnv.(true);
compilerEnv.setAllowMemberExprAsFunctionName(false, false);
compilerEnv.setAllowMemberExprAsFunctionName(true) } else { Context.exit(); }
compilerEnv.setWarnComments(true); }
compilerEnv.setRewriteComments(true); }
compilerEnv.setAllowMemberExprAsFunctionName(true); } return null ; }
 compilerEnv.init(true);
 if (config.useFunction)
compilerEnv.setAllowMemberExprAsFunctionName(true) } else { return null ;
 compilerEnv.setComments;
compilerEnv.setComments();
compilerEnv.setAllowMemberExprAsFunctionName(false); }
 compilerEn.setAllowMemberExprAsFunctionName(true);
 return sourceString);
 compilerEnv.build(true);
 } else { compilerEnv = env; }
compilerEnv.setWarnWhiteSpace(false); }
 print(true);
 console.setDebug(true);
 debug(true);
 if (config).debugEnv.setAllowMemberExprAsFunctionName(true);
compilerEnv.setAllowMemberExprAsFunctionName(true) if (config.isIdeMode) {};
 if (useMemberName)
compilerEnv.setAllowMemberExprAsFunctionName(false, -1);
 if (useFunctionNames)
compilerEnv.setWarnComments(false); }
compilerEnv.setAllowMemberExprAsFunctionName(true); return root;
 } return null;
compilerEnv.setComments(true); }
 return parser(config);
 return parse(config);
compilerEnv.setAllowMemberExprAsFunctionName(true) } else { logger.exit(); }
 if (!debug) { logger.setAllowMemberExprAsFunctionName(true);
 return astRoot;
compilerEnv.setAllowMemberExprAsFunctionName(true); return;
 if (useMemberNames)
compilerEnv.setAllowMemberExprAsFunctionName(true) } return cx ;
compilerEnv.initComments();
 logger.exit(););
 compilerContext.setAllowMemberExprAsFunctionName(true);
 if (!debug) { config.setAllowMemberExprAsFunctionName(true);
compilerEnv.setComments(false); }
 config.setComments(true);
 logger(config);
 } if (debug)
compilerEnv.setAllowMemberExprAsFunctionName(true, logger);
 cx.setAllowMemberExprAsFunctionName(true);
 return parse(ctx);
 } return astRoot;
 logger.logDebug(true);
compilerEnv.build(ctx);
 } return cx;
compilerEnv.enter();
compilerEnv.setAllowMemberExprAsFunctionName(true); return null
compilerEnv.setAllowMemberExprAsFunctionName(...)
 compilerEnv.unsetAllowMemberExprAsFunctionName(true);
compilerEnv.setAllowMemberExprAsFunctionName(true); return cx;
 if (useComments)
 compilerEnvsetAllowMemberExprAsFunctionName(true);
 if (useFunction)
 return cx;
 printDebug(true);
 } return null);
compilerEnv.setAllowMemberExprAsFunctionName(true); } {
 root = null;
 return (null);
 setComments(true);
compilerEnv.setAllowMemberExprAsFunctionName(false); return;
compilerEnv.setAllowMemberExprAsFunctionName(false); } {
 if compilerEnv.setAllowMemberExprAsFunctionName(true);
 return parse(true);
compilerEnv.setAllowMemberExprAsFunctionName(false
 return parserEnv;
 printComments(true);
 console.printStack(true);
compilerEnv = env ; }
compilerEnv.enter(); }
 exit(true);
compilerEnv.build();
compilerEnv.start();
 assert(true);
compilerEnv.setAllowMemberExprAsFunctionName(false); return null
 } else { compilerEnv2.setAllowMemberExprAsFunctionName(true);
 } return sourceString;
 if (debug)
compilerEnv.start(); }
 compilerEnv.setsetAllowMemberExprAsFunctionName(true);
 compilerEnv.__setAllowMemberExprAsFunctionName(true);
 compiler.setAllowMemberExprAsFunctionName(true);
 conf.setAllowMemberExprAsFunctionName(true);
 logger(true);
 parserEnv.setAllowMemberExprAsFunctionName(true);
compilerEnv.setAllowMemberExprAsFunctionName(functionName);
 return root;
 } else
 but compilerEnv.setAllowMemberExprAsFunctionName(true);
 return cx);
 if (useFunction())
compilerEnv = [];
compilerEnv.setAllowMemberExprAsFunctionName(true) } return {
compilerEnv = {}
 runtimeEnv.setAllowMemberExprAsFunctionName(true);
compilerEnv = cx
compilerEnv.setAllowMemberExprAsFunctionName(true)
compilerEnv.setAllowMemberExprAsFunctionName(true) } return null
compilerEnv.setAllowMemberExprAsFunctionName(True);
compilerEnv.setAllowMemberExprAsFunctionName(true); return [];
 setMode(true);
 compileEnv.setAllowMemberExprAsFunctionName(true);
compilerEnv.setAllowMemberExprAsFunctionName(false..);
compilerEnv.setAllowMemberExprAsFunctionName(false.*);
 pluginEnv.setAllowMemberExprAsFunctionName(true);
compilerEnv.setAllowMemberExprAsFunctionName(trueL);
compilerEnv.setAllowMemberExprAsFunctionName(isMember);
 } } else,
 } parserEnv.setAllowMemberExprAsFunctionName(true);
 } else { config.setAllowMemberExprAsFunctionName(true);
 return root);
 else {
 } else,
 return "";
 } else { logger.setAllowMemberExprAsFunctionName(true);
compilerEnv.setAllowMemberExprAsFunctionName(true) } {
 } {
 log(true);
 indent(true);
 }
compilerEnv.setAllowMemberExprAsFunctionName(true)); }
compilerEnv.setAllowMemberExprAsFunctionName(true) }; {
compilerEnv.setAllowMemberExprAsFunctionName(true) }
compilerEnv.setAllowMemberExprAsFunctionName(true) }; *
compilerEnv.setAllowMemberExprAsFunctionName(1);
