reportDestructuringAssign(literalNode);
 return literalNode;
reportDestructuringAssignments();
 return transform(literalNode);
 return literalNode);
 processArrayLiteral(literalNode);
reportDestructuringAssign(literal);
reportDestructuringAssignments(literalNode);
 return newNode(Token.ARRAYLIT);
 processArrayLit(literalNode);
 return newNode(literalNode);
 processArrayLiteralDestructuring(literalNode);
 processArrayLiteral(literal);
 return null);
 return transform(node);
 return processArrayLiteral(literalNode);
 processArrayLiteral(literalNode;
 processArrayLiteral(node);
 return this.processArrayLiteral(literalNode);
reportDestructuringAssign(literalNode) ; return literalNode;
 node = newNode(Token.ARRAYLIT); } else { node = newNode(Token.ARRAYLIT);
 node = newNode(Node.ARRAYLIT); } else { node = newNode(Node.ARRAYLIT); node.
 return processArray(literal);
 return null;
reportDestructuringAssign(literalNode, true);
 node = newNode(Node.ARRAYLIT); } else { node = newNode(Node.ARRAYLIT);
 return processArrayLit(literalNode);
 return this. processArrayLiteral ( ) ;
 this. processArrayLiteral ( literalNode ) ; return ;
reportDestructuringAssign(node);
 return processArrayLit(node);
reportDestructuringAssignments ( literalNode ) ; return ;
 processArrayLiteral(Destructuring)literalNode);
 return newNode(Node.ARRAYLIT); } else if (literalNode.isAssignable()) { return newNode().
 return newNode(Token.EMPTY);
 return processArray ( literalNode);
 this. processArrayLiteral ( literalNode ) ; return node ;
 processArrayLiteralDestruct(literalNode);
 processArrayLit(node);
 processArrayLiteralNode(literalNode);
 this. processArrayLiteral ( literalNode ) ; return this ;
 node. addChildToBack(literalNode); } else { node.
 return this. processArrayLiteral ( literalNode )
reportDestructuringAssign(literalNode, false);
 return newNode(Token.ARRAYLIT); return literalNode;
 node = newNode(Token.ARRAYLIT); } else { node =
 return transform(n);
 return processArrayLiteral(node);
reportDestructuringAssign(literalNode) ; return null;
 node = newNode(Node.ARRAYLIT); } else { node = newNode(Node.ARRAYLIT); node =
 return newNode(Token.ARRAYLIT;
 processArrayLiteralImpl(literalNode);
 node = newNode(Token.ARRAYLIT); } else if (reportDestructuringAssign)
 this. processArrayLiteral ( literalNode ) ; return null ;
 return newNode(Token.ARRAYLIT, literalNode);
 processArrayLiteral(arrayLiteral);
 return newNode(Node.ARRAYLIT); } else if (literalNode.isAssign()) { return newNode().
 node = newNode(Token.ARRAYLIT); } else { node = newNode(Token.NAME);
 node = newNode(Token.ARRAYLIT); } else { node = newNode(literalNode);
reportDestructuringAssignments ( literalNode ) ; return null ;
 return ArrayLiteral;
reportDestructuringAssign(literalNode) return null;
 processArrayLiteral(litNode);
 return newNode(Node.ARRAYLIT); } else if (literalNode.isAssignment()) { return newNode().
reportDestructuringAssignments(literalNode); return literalNode;
reportDestructuringAssign(literalNode, node); return node;
 node. addChildToBack(literalNode); } else if (reportDestructuring) {
 node = newNode(Token.ARRAYLIT); } else { node = newNode(null); node.
 return this.processArrayLiteral;
 node = newNode(Token.ARRAYLIT); node.
 this. reportDestructuringAssign (literalNode); } else { this.
 node = newNode(Token.ARRAYLIT); } else if (literalNode instanceof Assign) {
 processArrayLiteralInternal(literalNode);
 node = newNode(Token.ARRAYLIT); } else { node = newNode(Token.NODE);
 node = newNode(Token.ARRAYLIT); } else if (reportDestructuring) {
reportDestructuringAssign(literalNode, true); return literalNode;
 return newNode(Node.ARRAYLIT); } else if (literalNode.isAssignable()) { return newNode()
 return arrayLiteral;
 return newNode(Node.ARRAYLIT); } else if (literalNode.isAssignable()) { return this.
 return newNode(Token.STRING);
 node = newNode(Node.ARRAYLIT); } else { node =
 node = newNode(Token.ARRAYLIT); } else { node = newNode(Token.ARRAYLIT
 node = newNode(Token.ARRAYLIT); } else { node = newNode(Token.STRING);
 node = newNode(Token.ARRAYLIT); } else { node = newNode ( ) ; node.
 node = newNode(Node.ARRAYLIT); } else { node = newNode(Node.ARRAYLIT); }
 return newNode(Token.ARRAYLIT); return node;
 return newNode(Node.ARRAYLIT); } else if (literalNode.isAssign()) { return this.
 return node;
 node = newNode(Token.ARRAYLIT); } else { node = newNode(Token.NULL); node.
reportDestructuringAssignments ( literalNode ) ; return node ;
 transform(literalNode);
 this. reportDestructuringAssign (literalNode); } else { return this.
 return process(literal);
reportDestructuringAssign(literalNode, node);
 node = newNode(Token.ARRAYLIT); } else { node = newNode(null); }
 node = newNode(Token.ARRAYLIT); } else { node = newNode(); } node.
 return processArrayLiteral(literal);
reportDestructuringAssign(literalNodes);
 node = newNode(Token.ARRAYLIT); } else { node = newNode(null);
 return this. processArrayLiteral ( literalNode ) ; }
 return newNode(Node.ARRAYLIT); } else if (literalNode.isAssign()) { return IR.
reportDestructuringAssignments ( node ) ;
 return newNode(Node.ARRAYLIT); } else if (literalNode.isAssign()) { return Node.
reportDestructuringAssign(literalNode, true); return null;
 node = newNode(Token.ARRAYLIT); } else { node = newNode ( ) ;
reportDestructuringAssignments(literal);
 node. addChildToBack(literalNode); } else { node. report ( ).
 node = newNode(Token.ARRAYLIT); } else if (literalNode.isAssign()) { return
reportDestructuringAssign(literalNode); return node;
 return this.processArrayLiteral(...);
 node = newNode(Token.ARRAYLIT); } else { node = newNode(Token.NULL); }
 node. addChildToBack(literalNode); } else { node. compiler ( ).
 return new Node(literalNode;
 processArrayLiteral().
 node. addChildToBack(literalNode); } else { return node.
 this. reportDestructuringAssign (literalNode); } else { return super.
 processArrayLiteral(literalNode));
 node = newNode(Token.ARRAYLIT); } else { node = newNode ( ).
 processArrayLiteral(literalNode); return null;
 node = newNode(Token.ARRAYLIT); } else { node = newNode(Token.NAME); }
 node. addChildToBack(literalNode); } else if (reportDestructuring()) {
 processArrayLiteral(literalNode); return node;
 processArrayLiteral(literalNode2);
 return newNode(Token.ARRAYIT);
 node = newNode(Token.ARRAYLIT); } else {
 node = newNode(Token.ARRAYLIT); } else { node = newNode(Token.NULL); node =
 node. addChildToBack(literalNode); } else { node. compiler.
 processArrayLiteral(n);
 processArrayliteral(literalNode);
 return processArray(node);
reportDestructuringAssign(literalNode.getType()); return null;
reportDestructuringAssign(literalNode, true); } return literalNode;
 processArrayLiteralNodes(literalNode);
 processDestructuring(literalNode);
 node. addChildToBack(literalNode); } else { node. reportError ( ).
 return process ( literalNode);
 return processArrayLit();
 node. addChildToBack(literalNode); } else { return this.
 processArrayLiteralDestructures(literalNode);
 node = newNode(Token.ARRAYLIT); } else { node = IR.
 node = newNode(Node.ARRAYLIT); } else { node = newNode().
reportDestructuringAssign(literalNode, false); return null;
 node = newNode(Node.ARRAYLIT); node.
 return newNode(literal);
reportDestructuringAssign(literalNode) return node;
reportDestructuringAssign(literalNode) ; } return ( Node ) literalNode ;
 node. addChildToBack(literalNode); } else { node. reportError ( ) ;
 node = newNode(Token.ARRAYLIT); } else { node = this.
 node. addChildToBack(literalNode); } else { node = node.
 node = newNode(Token.ARRAYLIT); } else { node = newNode(); } node =
 processArrayLiteral((ArrayLit)literalNode);
 this. reportDestructuringAssign (literalNode); } else { super.
 return new Node(Token.ARRAYLIT
 node = newNode(Token.ARRAYLIT); return node.
reportDestructuringAssign(literalNode) ; return null ; } return literalNode;
 return this.processArrayLit(literalNode);
 return newNode(Token.ARRAYL);
reportDestructuringAssign(literalNode, null);
 node = newNode(Token.ARRAYLIT); } else { node.
 node = newNode(Node.ARRAYLIT); } else { node = IR.
 processArrayLiteralInner(literalNode);
reportDestructuringAssign(literalNode) return literalNode;
 processArrayLiteral(literalNode); return ;
 processArrayLiteral( );
 node = newNode(Token.ARRAYLIT); } else { node = astFactory.
 processArrayLiteralDestruction(literalNode);
 return this. processArrayLiteral ( literalNode));
 return (AstNode)node;
reportDestructuringAssign(literalNode.getType()); } return literalNode;
reportDestructuringAssign(literalNode.getType()); return node;
 processArrayLiteral(ArrayLiteral(literalNode);
reportDestructuringAssign(literalNode); return;
reportDestructuringAssignments(literalNode) return;
reportDestructuringAssign(literalNode) ; return literalNode ; } return null ;
 return process(node);
 node = newNode(Token.ARRAYLIT); } else { node = newNode(); }
 node. addChildToBack(literalNode); } else { this.
reportDestructuringAssignmentsInArrayLiteral();
reportDestructuringAssign(literalNode) ; return literalNode ; }
 node. addChildToBack(literalNode); } else { node =
 node = newNode(Token.ARRAYLIT); return
 return processArrayLiteralImpl(literalNode);
 processArray(literal);
 return newNode(null);
 node = newNode(Node.ARRAYLIT); } else {
 processArrayLiteralNode;
 processArrayLiteral(this,literalNode);
 return newNode(Token.ARRAYLIT);
 processArrayLiteralIsDestructuring(literalNode);
reportDestructuringAssign(literalNode).return;
 node = newNode(Token.ARRAYLIT); } else { node = new
 return newNode(Token.STRING,literalNode);
reportDestructuringAssign(literalNode, [ ]);
 processArrayLiteral ( literalNode ) ; }
 processArrayLiteral((AstNode)literalNode);
 processArrayLiteral(node));
reportDestructuringAssign(literalNode, astNode);
reportDestructuringAssign(literalNode) ; return null ; } return node;
reportDestructuringAssign(literalNode) ; } return literalNode ;
 node = newNode(Token.NODE); } else { node =
 processArrayLiteral(Destructuring(literalNode);
 return (ArrayNode)node;
 processArrayLiteral(literal));
reportDestructuringAssign(literalNode) return;
reportDestructuringAssign(literalNode) ; } else { return literalNode ; }
reportDestructuringAssign(literalNode.getType()); return literalNode;
 node = newNode(Token.ARRAYLIT); node =
 processArrayLiteralDeep(literalNode);
reportDestructuringAssignments ( literalNode ) ; }
 return new Node(literal));
 processArrayLiteral(Destructuring)(literalNode);
 return new Node(Token.NULL);
 processArrayLiteral(destructuring)literalNode);
 return null ; return node;
 throw new RuntimeException("Invalid ArrayLiteral"); }
reportDestructuringAssign(literalNode, node); return node ; } return node;
 return this.process ( literalNode );
reportDestructuringAssign(literalNode) ; return null ; } return literalNode ; }
 node = newNode(Token.ARRAYLIT); } else { return
 return newNode(Token.ARRAYLIT); return;
 return processNode(literalNode);
 return (Node)node;
reportDestructuringAssign(literalNode, node); return ;
reportDestructuringAssignments(literalNode, node); return ;
reportDestructuringAssign(literalNode) ; return node ; } return node;
reportDestructuringAssign(literalNode) ; } else { reportEmpty ( ) ; }
 return process(n);
reportDestructuringAssign(literalNode.get ( ));
 node = newNode(Node.ARRAYLIT); return
 processArrayLiteral(newArrayLit(literalNode);
 processArrayArrayLiteral(literalNode);
 return node ; } else { return processArraylit(literalNode);
reportDestructuringAssign(literalNode, n);
 return processArrayliteral(literalNode);
 transformArrayLiteral(literalNode);
 processArrayLiteral(literal,literalNode);
reportDestructuringAssign(literalNode, null, null);
 processArrayLiteral.
 return this ; } else { return processArraylit(literalNode);
 processArrayLiteralInDestructuring(literalNode);
 return this.
 ProcessArrayLiteral(literalNode);
 processArraylit(literalNode);
 reportDestructuringExpression(node);
 throw new RuntimeException("Invalid array literal node"); }
 throw new IllegalArgumentException("" +
 throw new RuntimeException("Invalid ArrayLiteral node"); }
 reportDestructuringArray(node); }
reportDestructuringAssign(literalNode, ".");
reportDestructuringAssign(literalNode) ; return null ; } return null ;
reportDestructuringAssign(literalNode.getType()); return literalNode; }
 processArrayLiteral() &&
 node = newNode(Token.ARRAYLIT) ;
 reportDestructuringExpression(n);
reportDestructuringAssign(literalNode, "{");
 reportDestructuringExpression(); }
 throw new IllegalArgumentException("Cannot use
reportDestructuringAssign(literalNode2);
reportDestructuringAssign(literalNode, 0, 0);
 reportDestructuring (node); }
reportDestructuringAssign(literalNode, true); return literalNode; }
 return this ; } return processArraylit(literalNode);
reportDestructuringAssign(literalNode, sourceNode);
 processNode(literalNode);
 processArray(literalNode);
 processArrayLiteral(literal());
 processArrayLiteral() =
 node = newNode(Token.ARRAYLIT); throw
reportDestructuringAssign(literalNode.get ()));
reportDestructuringAssign(literalNode, null, false);
reportDestructuringAssign(literalNode) ; } return literalNode ; }
reportDestructuringAssign(literalNode, true); } return literalNode ; }
 throw new IllegalArgumentException("Invalid argument"); }
 throw new IllegalArgumentException("");
 processArrayLiteralDestructured(literalNode);
 throw new IllegalArgumentException("Invalid literal node"); }
 throw new IllegalArgumentException("Can't
 return (literal);
 throw new RuntimeException("Invalid array literal"); }
 processArrayLiteral() ->
 return processArraylit(literalNode);
reportDestructuringAssign(literalNode, false); return literalNode; }
reportDestructuringAssign(literalNodeImpl);
 throw new IllegalArgumentException("Invalid destructuring assignment");
reportDestructuringAssign(n);
 throw new RuntimeException("Invalid ArrayLiteral");
 throw new RuntimeException("Invalid ArrayLiteral"); return
reportDestructuringAssign(literalNode.*);
reportDestructuringAssignmentsInArrayLit();
 throw new IllegalArgumentException("Cannot call
reportDestructuringAssign(literalNode++);
 throw new IllegalArgumentException("").
 return processArrayLike(literalNode);
 this.
 processArrayLiteralInDestructures(literalNode);
 processArrayLike(literalNode);
 return newNode(Token.ARRAYLIT).
reportDestructuringAssignments ( ) ; }
reportDestructuringAssignmentsInArrayLiteral
 return this);
 processArrayLiteral()();
 return node.children;
 return
reportDestructuringAssign(literalNode) ; return node ; } return node ; } {
 processArrayLiteral()
 return literalNodes;
 processArrayLiteralNodesInArray(literalNode);
 return this ; return node ;
 processArrayLiteral() {
 return this.node;
reportDestructuringAssign(literalNode) ; return this ; } return this ; } {
 throw new IllegalArgumentException("."
 return node.value;
 throw new IllegalArgumentException(""") +
 return node.node;
 processLiteral(literalNode);
 throw new IllegalArgumentException(""")".
reportDestructuringAssign(literalNode); }
 throw new RuntimeException("Can't
reportDestructuringAssign(literalNode) ; return this ; } return this ; } ;
reportDestructuringAssign(literalNode) ; return null ; }
 return (Node)
reportDestructuringAssignmentsInArrayLiteral;
 return (node);
reportDestructuringAssignments(literalNode, node); }
reportDestructuringAssign(literalNode, node); } return node ; } {
 return node);
reportDestructuringAssignments = true;
 return (literalNode);
reportDestructuringAssign(literalNode) return literalNode; }
reportDestructuringAssign(literalNode); return node();
reportDestructuringAssign(literalNode) ; return literalNode ; } }
 throw AssignException
reportDestructuringAssignments(literal));
 throw ErrorHelper.
 return (null);
 processArrayLiteral();
reportDestructuringAssignments(literal');
reportDestructuringAssign(litNode);
 return newNode().
 return newNode()
 process(literalNode);
 return processObject(literalNode);
reportDestructuringAssign(literalNode) ; return literalNode();
reportDestructuringAssign(literalNode) ; return null ; } } {
 literalNode =
 return ();
reportDestructuringAssign(literalNode) ; return node ; } } {
 processObject(literalNode);
 return compiler.
reportDestructuringAssign(Literal);
reportDestructuringAssign(true);
 return destructuringContext.
 return (n);
reportDestructuringAssign(literalNode) ; return null ; } {
 throw Error.
reportDestructuringAssign(literalNode) return this;
 return this; } return
reportDestructuringAssign(literalNode));
 return this;
reportDestructuringAssign ( ) ;
reportDestructuringAssign(literalNode); return
reportDestructuringAssign(false);
reportDestructuringAssign(literalNode)
 return this.report ||
 return this.report.
 node =
reportDestructuringAssign(this);
reportDestructuringAssign(literal));
reportDestructuringAssign(literal');
 node = null;
 destruct(literalNode);
 compiler.
reportDestructuringAssign(literal());
reportDestructuringAssign(literalNode) {
reportDestructuringAssign(literalNode) return
 return false);
reportDestructuringAssign(literal)
reportDestructuringAssign(leralNode);
reportDestructuringAssign(LNode);
reportDestructuringAssignments(...)
reportDestructuringAssign(lNode);
 return root;
 throw literalNode;
reportDestructuringAssign(iteralNode);
reportDestructuringAssign(literalNode) return null
 node = this;
 return false;
reportDestructuringAssignments;
reportDestructuringAssignments++;
reportDestructuringAssign(literalNode) break;
 return convert(literalNode);
reportDestructuringAssignment();
 return literNode;
reportDestructuringAssignees();
 throw
 debug(literalNode);
reportDestructuringAssign(Node);
 #
