type = leftType;
 type = null;
 type = leftType.getSupertype(leftType;
type  = leftType.getType(rightType);
 type = leftType.getType ( );
 type = leftType.getLeastSupertype(rightType); literals = getBooleanOutcomePair(leftLiterals);
 type = leftType.getLeastSupertype(leftType); literals = getBooleanOutcomePair(leftLiterals);
 type = leftType.leftType;
 type = leftType.getType(rightType;
 type = leftType.getRestrictedUnion(leftType;
 type = leftType.getLeastSupertype(leftType); literals = getBooleanOutcomePair(rightLiterals);
 type = leftType. getLeastSupertype(rightType); literals = getBooleanOutcomePair(leftType);
 type = leftType. getLeastSupertype(rightType); literals = getBooleanOutcomePair(condition);
type = leftType.getRestrictedType(rightType);
 type = leftType.getLeastSupertype(leftType); literals = getBooleanOutcomePair(condition);
 type = null; type= leftType;
 type = leftType.getLeastSupertype(leftType); literals = getBooleanOutcomePair(leftType);
 type = leftType.getMostSupertype(leftType;
 type = leftType.getLeastSupertype(leftType); literals = getBooleanOutcomePair();
 type = leftType.getRestrictedType(leftType;
 type = leftType.get ( );
type = leftType.getLeastSupertype(rightType);
type = leftType.getRestrictedUnion(rightType);
 type = leftType.getType().leftType;
 type = null ; literals = getBooleanOutcomePair(leftLiterals, rightLiterals, condition);
 type = leftType.getType(leftType;
 type = rightType;
 type = leftType.getLeastSupertype(leftType); literals = rightLiterals ;
 type = null ; literals = getBooleanOutcomePair(leftLiterals, rightLiterals);
 type = leftType.getLeastSupertype(rightType);
 type = restrictedLeftType;
type  = leftType.getType(condition);
type  = leftType.get (rightType);
 type = leftType.getRestrictedType(rightType);
type = leftType.getLeastSupertype(type);
 type = leftType.getLeastSupertype(leftType); literals = literals;
 type = leftType.getLeastSupertype(rightType); literals = rightLiterals ;
 type = null ; literals = getBooleanOutcomePair(leftLiterals, rightLiterals, condition); } } else {
 type = leftType.join(leftType;
 type = leftType.getLeastSupertype(leftType); literals = type ;
 type = leftType.getRestricted ( );
 type = rightType.getType ( );
 type = leftType.getLeastSupertype(rightType); literals = type ;
 type = leftType.getLeastSupertype(leftType); literals = null;
 type = leftType.getFirstSupertype(leftType;
 type = leftType.getLeastSupertype(rightType); literals = null;
type =  leftType.getRestrictedType(condition);
 type = leftType.getLeastSupertype(rightType); literals = literals ;
 type = leftType.getLeastType(leftType;
 type = rightType.get ( );
 type = null; } type= leftType;
 type = leftType.getRightType();
 type = rightType.getSupertype(leftType;
 type = leftType.getLeastSupertype(rightType); } } else {
 type = rightType.getLeastSupertype(leftType);
 type = leftType.getUnion(leftType;
 type = null ; literals = getBooleanOutcomePair(leftLiterals, rightLiterals, condition); }
 type = rightType.getLeastSupertype;
 type = null ; literals = getBooleanOutcomePair ( leftLiterals, rightType ) ;
 type = null ; literals = getBooleanOutcomePair ( leftLiterals, condition ) ;
 type = leftType.getLeastSupertype(condition);
 type = leftType.getLeastSupertype(leftType); literals = getBooleanOutcomePair(); }
 type = leftType.getLeastSupertype(type);
 type = leftType.getLeastSupertype(leftType); } } else {
 type = rightType.leftType;
type =  leftType.getRestricted (rightType);
 type = leftType.get (condition);
 type = (UnionType)leftType;
 type = leftType.getLeastSupertype(leftType);
type = leftType.getFirstSupertype(rightType);
 type = leftType. getLeastSupertype(rightType); literals = getBooleanOutcomePair(); }
 type = leftType.getBaseType(leftType;
 type = leftType.getRestrictedUnion(rightType);
 type = leftType.getRestrictedType(condition);
 type = rightType.getLeastSupertype(condition);
 type = leftType.getType(); type= leftType;
 type = rightType.getType(leftType;
 type = rightType; } else { type= leftType;
 type = leftType.getLeastSupertype(leftType); literals = null; }
 type = leftType.getRightType;
 type = null ; literals = getBooleanOutcomePair(leftLiterals, rightLiterals); }
 type = leftType; rightType= leftType;
 type = leftType; } else { type= leftType;
type  = leftType.getRestricted (condition);
 type = leftType.getType(rightType);
type  = rightType.getType(leftType);
 type = leftType.getLeastSupertype(leftType); literals = null; } } else {
 type = leftType.getType(); type |= leftType;
type  = null
 type = leftType.getLeastSupertype(leftType); literals = rightLiterals; }
 type = leftType.getLeastSupertype(leftType); literals = getBooleanOutcomePair());
type  = rightType.getType(condition);
 type = leftType. getLeastSupertype(rightType); literals = getBooleanOutcomePair(leftType));
 type = leftType.getType(null;
type  = leftType.getType(leftType);
 type = leftType. getLeastSupertype(rightType); literals = getBooleanOutcomePair(condition));
 type = leftType.type;
 type = leftType.getRestricted ( ) ;
 type = leftType.getType();leftType;
 type = leftType.getLeastSupertype(rightType); } else {
 type = null type= leftType;
 type = leftType.getType(...);
 type = BooleanType.ANY;
 type = rightType.type;
 type = this.leftType;
 type = leftType.getRestrictedType ( ) ;
 type = leftType.getSuperleftType;
 type = rightType; type!= leftType;
 type = leftType.getLeastSupertype(leftType); literals = getBooleanOutcomes(); }
 type = rightType; literals = rightLiterals;
 type = rightType; } type |= leftType;
 type = leftType.getLeastSupertype(rightType); literals = rightLiterals; }
 type = null; } else { type= leftType;
 type = rightType ;
 type = leftType.getType(right);
 type = null ; literals = getBooleanOutcomePair(leftLiterals, rightLiterals));
 type = leftType; } else { type |= leftType;
 type = leftType.getRestricted (condition);
 type = rightType.join(leftType;
 type = leftType.getMostType(leftType;
 type = leftType.getType(); type *= leftType;
 type = leftType.getLeastSupertype(leftType); } else {
 type = leftType.getType(); } type= leftType;
 type = leftType.getSupertype();leftType;
 type = (Type)leftType;
 type = leftType.getLeastSupertype(leftType); literals = type ; } } else {
 type = null; } else {
type = leftType.getRestrictedType();
 type = leftType.getLeastSupertype(rightType); }
 type = leftType.getLeastSupertype(rightType); } else
 type = rightType.getLeastSupertype(leftType); } else {
 type = rightType; literals = null;
 type = leftType; } else {
 if (type instanceof UnionType)
 type = leftType.getLeastSupertype(leftType); literals = type ; } else {
 type = leftType; rightType!= leftType;
 type = null; type |= leftType;
 } else {
 type = rightType; } else { type |= leftType;
 type = leftType; rightType |= leftType;
type = leftType.getRestrictedUnion(condition);
 if (type instanceof ToBoolean) {
 type = (StringType)leftType;
 type null;
 type = leftType.getLeastSupertype(rightType); } }
 type = LeftType.BOTH;
 type = rightType; type |= leftType;
 type = leftType.getLeastSupertype(leftType); } else
 type |= leftType;
 type = rightType; rightType= leftType;
 type = rightType; } else {
type = leftType.getRightType(condition);
 type = leftType.getLeastSupertype(rightType); } else { }
 type = ((UnionType)leftType;
 type = leftType; rightType ||= leftType;
 type = rightType; } type= leftType;
 type = leftType.getSubleftType;
 type = leftType.getRestrictedType(rightType); }
 type = rightType.getLeastSupertype(leftType); }
 type = rightType.getLeastSupertype(leftType); } else
 type = (ASType)leftType;
 type = leftType.getLeastSupertype(leftType); } else { }
 type = leftType; rightLiterals |= leftType;
 type = leftType.getLeastSupertype(rightType); } } }
 type = leftType.getLeastSupertype(leftType); } }
type = leftType.getLeftType();
 type = leftType.getLeastSupertype(leftType); }
 type = leftType.fullType;
 type = null; type *= leftType;
 type = leftType.getLeastSupertype(rightType); } else,
 type= rightType; type= leftType;
 type = leftType.getRestrictedTypeGivenToBoolean(); }
 type = leftType; literals = rightLiterals; } else {
 type = leftType.join;
 type = leftType; literals = rightLiterals; } else
type = leftType.getRestrictedType(rightType); }
 type = leftType.getLeastSupertype(); }
type = leftType.getRestrictedUnion(rightType); }
 type = leftType.baseType;
 type = leftType; rightType.type= leftType;
 type = leftType.type();
 type = type.leftType;
 type = (type)leftType;
 type = leftType.getType(); }
 type = null.leftType;
 type = leftType.getRestrictedType(); }
type =  leftType.getLeastSupertype(); }
 type = BooleanType.ALL;
 type = rightType.type();
type =  rightType.getLeastSupertype(); }
type = leftType.getFirstSupertype(rightType); }
 type = right.type;
 } type = null;
 type = restrictedRightType;
 type = (Type)!leftType;
 type = rightType; }
 type =!leftType;
 type = rightTypeImpl;
 type = LeftType.leftType;
type = leftType(rightType);
 type = leftType.getType(); }
 type = restricted.leftType;
 type = leftType; } else;
 type = null;
 type = rightType; } else;
type  = [];
type = leftType.class;
 } else { type |= leftType;
 type = rightType.*;
 } else {
 type = null;leftType;
type  = leftType.get (rightType));
 type = restrictedLeftType();
 type = null; } else {
 type *= leftType;
 type = leftType.getType(); } }
 type = null; } } else {
 type = leftType ;
 type = rightType; } else {
 type = rightType; }
 type = leftType; }
 type = leftType; } else {
 } else { type *= leftType;
 type = type ||= leftType;
type = leftType.name;
type = leftType.join();
 type = rightType.getType(); } }
 type = rightType; } } else {
 } type=leftType;
 type = type |= leftType;
type  =;
 if (type instanceof UnionType))
 type = leftType; } } else {
type = leftType.getJoin();
 Type = null;
 } type |= leftType;
 type = rightType; } }
 var type = null;
 type type;
 type = rightType; } else
 } else { type= leftType;
 type = type *= leftType;
 type = type;
 type = null; } else { } }
 type = leftType; }
 type = *leftType;
type = leftType.getRestrictedType());
 type = leftType; } }
 type = leftType; } else
 type = _leftType;
 type = null; } }
 } type *= leftType;
type = leftType.getType());
 return; }
 type = type= leftType;
 var type=leftType;
 break; }
 type = rightType.
 return null;
 type = null; } else
 return; }
 } } else {
 type ||= leftType;
 type.join= leftType;
type =  rightType();
 type &= leftType;
 thisType |= leftType;
 type = undefined;
 } else { }
 type = null.
 } else,
type = leftType. }
 } else
 } }
type =  null.
 this.
 } }
type = leftType. };
 } else
 type=$leftType;
 type.leftType;
 type:leftType;
 this case
 }
 }
type += leftType;
type == leftType;
type was leftType;
