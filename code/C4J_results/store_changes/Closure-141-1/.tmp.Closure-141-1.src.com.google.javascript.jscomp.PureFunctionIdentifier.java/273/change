 Preconditions.checkNotNull(functionInfo);
Preconditions.checkNotNull(def);
Preconditions.checkNull(def);
Preconditions.checkNotNull(def, functionInfo);
 if (hasSideEffects) {
Preconditions.checkNotNull();
Preconditions.check();
 if (hasSideEffects) {
 if (hasSideEffects)
 if (hasSideEffects)
Preconditions.checkNotNull(functionInfo); if (hasSideEffects) {
Preconditions.checkNotNull(def); if (hasSideEffects) {
 if (hasSideEffects) { Preconditions.checkNotNull(functionInfo);
 if (hasSideEffects) { hasSideEffects;
Preconditions.checkNotNull(def); if (hasSideEffects)
Preconditions.checkNotNull(functionInfo, functionInfo);
Preconditions.checkNotNull(functionInfo); if (hasSideEffects)
Preconditions.checkTrue();
 if (hasSideEffects) { continue;
 if (def.mayHaveSideEffects()) { hasSideEffects = true ; break; }
 if (hasSideEffects) Preconditions.checkNotNull(functionInfo);
 if (defInfo.mayHaveSideEffects()) { hasSideEffects = true ; break; }
 Precondition.checkNotNull(functionInfo);
 if (hasSideEffects) { Precondition.checkNotNull(functionInfo);
 if (def.mayHaveSideEffects()) {
 if (def.mayHaveSideEffects()) { if (hasSideEffects) {
Preconditions.check(def);
 if (def.mayHaveSideEffects())) {
 if (hasSideEffects) { hasSideEffects = true;
Preconditions.checkNotNull def;
 Preconditions.checkNotNull(def.functionInfo);
 if (def.mayHaveSideEffects()) { hasSideEffects =
 Functions.checkNotNull(functionInfo);
 if (def.mayHaveSideEffects()) { if (hasSideEffects)
 if (hasSideEffects) { hasSideEffects = true ; } else
Preconditions.checkNotNull(def, functionInfo, name);
 if (defInfo.mayHaveSideEffects()) { if (hasSideEffects) {
 if (hasSideEffects) { hasSideEffects = true; }
 if (def.isNew(callNode)) { hasSideEffects = true ; break; }
Preconditions.checkNotNull(functionInfo, callNode);
 if (defInfo.mayHaveSideEffects()) { hasSideEffects = true ; break ; } } else {
 if (defInfo.mayHaveSideEffects()) { hasSideEffects = true ; } else { if (hasSideEffects) {
 if (def!= null) { Preconditions.checkNotNull(functionInfo);
 if (defInfo.mayHaveSideEffects()) { if (hasSideEffects)
 if (defInfo.mayHaveSideEffects()) { hasSideEffects = true ; break ; } else {
 if (def == null) { continue; } if (hasSideEffects) {
 if (hasSideEffects) { continue; }
 if (def == null) { Preconditions.checkNotNull(functionInfo);
 if (defInfo.mayHaveSideEffects()) { hasSideEffects = true ; } else { if (!hasSideEffects) {
 if (defInfo.mayHaveSideEffects()) { hasSideEffects = true ; } else { if (hasSideEffects)
 if (defInfo.mayHaveSideEffects()) { hasSideEffects = true ; break ; } } } else {
Preconditions.checkNotNull(def, callSite, name);
Preconditions.checkNotNull(functionInfo); if (!hasSideEffects) {
 if (def == null) { continue; } if (hasSideEffects)
 if (defInfo.mayHaveSideEffects()) { hasSideEffects = true ; } else { if (!hasSideEffects)
 if (defInfo.mayHaveSideEffects()) { hasSideEffects = true ; } else { if (defInfo.isPure()) {
 if (defInfo.mayBePure()) { continue; }
 if (def.isNew(callNode) && functionInfo.mayHaveSideEffects()) { if (hasSideEffects) {
 if (def.isPure(true)) {
 if (def.mayHaveSideEffects()) { if (!hasSideEffects) {
 if (def.mayBePure()) { if (hasSideEffects)
 if (def.isNew(callNode) && functionInfo.mayHaveSideEffects()) { hasSideEffects = true ; break;
 if (defInfo.mayHaveSideEffects()) { hasSideEffects = true ; break ; } } else { if (hasSideEffects)
 if (defInfo.mayHaveSideEffects()) { hasSideEffects =
 if (def.mayHaveSideEffects()) { break; }
 if (defInfo.mayHaveSideEffects()) {
 if (hasSideEffects)conditions.checkNotNull(functionInfo);
 if (isPure(def)) {
 if (hasSideEffects) { break;
Preconditions.checkNotNull(functionInfo) if (hasSideEffects) {
 if (defInfo.mayHaveSideEffects()) { hasSideEffects = true ; } else { break; }
 if (hasSideEffects) continue;
 if (hasSideEffects) { hasSideEffects = true
 if (def.mayHaveSideEffects(true)) {
 if (defInfo.mayHaveSideEffects()) { hasSideEffects = true ; break ; } if (hasEffects)
 if (def.isPure() ) {
 if (def.mayHaveSideEffects()) { continue; }
 if (def.mayHaveSideEffects()) { if (!hasSideEffects)
 if (def.isNew(callNode) && functionInfo.mayHaveSideEffects()) { hasSideEffects = true; }
 if (defInfo.mayHaveSideEffects()) { hasSideEffects = true ; } else { if (defInfo!= null) {
 if (defInfo.mayHaveSideEffects()) { hasSideEffects = true ; break ; } } else { if (!hasSideEffects)
 if (hasSideEffects) { hasSideEffects = false; }
Preconditions.checkNotNull(functionInfo); functionInfo = def.getFunctionInfo();
 if (def)
 if (hasSideEffects) { hasSideEffects = false; } else
 if (defInfo.mayHaveSideEffects()) { hasSideEffects = true ; break ; } } if (hasEffects)
 if (defInfo.mayHaveSideEffects()) { hasSideEffects = true ; break; } }
Preconditions.checkNotNull(functionInfo) if (hasSideEffects)
 if (def.mayBePure()) { hasSideEffects =
 if (!hasSideEffects) {
Preconditions.checkNotNull(defInfo, callNode);
 if (defInfo.mayBePure()) { hasSideEffects = true
 if (defInfo!= null) {
 if (def).mayHaveSideEffects()) { hasSideEffects =
 if (def.mayBePure()) {
 if (functionInfo)
 if (!hasSideEffects)
 if (isNoSideEffectsCall) {
 if (def.mayHaveSideEffects()) { hasSideEffects = true ; }
 if (!hasSideEffects) {
 if (def!= null) Preconditions.checkNotNull(functionInfo);
 if (hasSideEffects) { Functions.checkNotNull(functionInfo);
 if (hasSideEffects) { hasSideEffects =
 if (def == null) {conditions.checkNotNull(functionInfo);
 if (defInfo.mayHaveSideEffects())) {
 if (def.mayBePure()) { continue; }
 if (def.mayHaveSideEffects()) { hasSideEffects = true ; break; } }
 if (hasEffects)
 if (defInfo.isNew(callNode) && defInfo.mayHaveSideEffects()) { hasSideEffects = true ; }
 if (def.mayHaveSideEffects()) { hasSideEffects = true;
 if (!hasSideEffects)
Preconditions.checkNotNull(functionInfo); if (!hasSideEffects)
Preconditions.checkNotNull(def, functionCallSite);
 if (functionInfo!= null) {
 if (defInfo.mayHaveSideEffects()) { hasSideEffects = true ; }
 if (def.isNew(callNode)) { hasSideEffects = true ; break; } }
 functionInfo.setIsPure(true);
 if (defInfo.mayHaveSideEffects()) { hasSideEffects = true ; break ; } else { break; }
 if (def.isPure(name)) {
Preconditions.checkNotNull(def); if (def.isPure()) {
 if (hasSideEffects) { Collections.checkNotNull(functionInfo);
 if (def.isPure()) Preconditions.checkNotNull(functionInfo);
 if (hasSideEffects) { } continue;
 if (hasSideEffects) { if (hasSideEffects) {
 if (def.isPure()) { Precondition.checkNotNull(functionInfo);
 if (hasSideEffects) { hasSideEffects = false;
Preconditions.checkNotNull(functionInfo.functionName);
 if (defInfo.mayBePure()) { break; }
 if (hasSideEffects) { } break;
 if (def.isPure())) {
 if (defInfo.mayHaveSideEffects()) { hasSideEffects = true ; } else { if (isNew)
 if (defInfo.mayHaveSideEffects()) { hasSideEffects = true ; break ; } if (hasFunction)
 if (defInfo.mayHaveSideEffects()) { break; }
Preconditions.checkNotNull(def); if (def) {
 if (def.mayHaveSideEffects()) { hasSideEffects = true ; } }
 if (hasSideEffects)) {
 if (def.isNew(callNode) && functionInfo.mayHaveSideEffects()) { hasSideEffects = true ; } }
 if (defInfo.mayHaveSideEffects()) { hasSideEffects = true ; break ; } } if (hasEffect)
 if (hasSideEffects) { hasSideEffects = true; break;
 if (hasSideEffects)) { hasSideEffects;
 if (defInfo.mayHaveSideEffects()) { hasSideEffects = true ; } }
 callNode.setFunctionInfo(functionInfo);
Preconditions.checkNotNull(functionInfo); if (isNoSideEffectsCall) {
 if (def!= null) { Precondition.checkNotNull(functionInfo);
Preconditions.checkNotNull(functionInfo); if (hasSideEffects)) {
 if (defInfo.mayHaveSideEffects()) { hasSideEffects = true ; } else { if (!hasSideEffects);
 if (def.isPure() { continue; }
Preconditions.checkNotNull(functionInfo, functionNode);
 if (defInfo.mayBePure());
 if (hasSideEffects) { Objects.checkNotNull(functionInfo);
 if (defInfo.mayHaveSideEffects()) { hasSideEffects = true ; break ; } } else { if (hasSideEffects){
Preconditions.checkNotNull(functionInfo); }
 functionInfo.setFunctionInfo(functionInfo);
 if (hasSideEffects == false);
Preconditions.checkNotNull(functionInfo); if (hasSideEffects) { } else
 if (hasSideEffects) { } else
Preconditions.checkNotNull(def, callNode, name);
Preconditions.checkNotNull(def); hasSideEffects = true
 if (def.mayBePure()) { if (hasEffects)
 if (hasSideEffects);
 if (isPure) {
 if (hasSideEffects) { hasSideEffects ++;
 if (def.isNoSideEffectsCall);
 if (!hasSideEffects) { continue;
Preconditions.checkNotNull(functionInfo); else
 if (def.mayBePure()) { if (isPure)
 if ( functionInfo. mayHaveSideEffectsCall ) { hasSideEffects = true ; } else { if (hasSideEffects) { }
 if (functionInfo) {
 functionInfo.setPure(true);
 if (def.isNew(callNode)) { hasSideEffects = true ; } }
 functionInfo.setIsPure(false);
 if (functionInfo!= null);
 Function callNode = callNode.getSecondChild);
 CallNode callNode = callNode.next(functionInfo);
 if (defInfo.mayHaveSideEffects()) { hasSideEffects = true ; } else { break; } }
Preconditions.checkNotNull(functionInfo); if (hasSideEffects
 if (!hasSideEffects) { hasSideEffects;
 if (!hasSideEffects) { Precondition.checkNotNull(functionInfo);
 Function callNode = callNode.getNextChild);
Preconditions.checkNotNull(def); hasSideEffects ++;
 if (isPure()) Preconditions.checkNotNull(functionInfo);
 if (def == null) { Precondition.checkNotNull(functionInfo);
 if (hasSideEffects) { hasSideEffects = true; } }
 if (hasSideEffects) { hasSideEffects = true ; } }
 if (hasSideEffects) { hasSideEffects = false
 if (defInfo.mayHaveSideEffects()) { hasSideEffects = true ; break; } else
 if (hasSideEffects) break;
Preconditions.checkFalse();
 if ((hasSideEffects)) {
Preconditions.isNotNull(functionInfo);
 def.setFunctionInfo(functionInfo);
 if (def.isPure(true))
 Preconditions.checkNotNull(def); assert(functionInfo);
 if (def.isPure() ) {
Preconditions.checkNotNull(functionInfo); } else
Preconditions.notNull(functionInfo);
 if (!hasSideEffects)conditions.checkNotNull(functionInfo);
Preconditions.checkNotNull(functionInfo.functionName());
 if (hasSideEffects) { callNode.append(functionInfo);
 if (def.isNoSideEffectsCall());
 if (hasSideEffects) { hasSideEffects = true; else
 if (hasSideEffects) { Conditions.checkNotNull(functionInfo);
Preconditions.checkNotNull(functionInfo) ; if (!hasSideEffects
 if (defInfo.mayHaveSideEffects()) { hasSideEffects = true ; break ; } else { }
Preconditions.checkNotNull(info);
 Preconditions.checkNoSideEffectsCall(functionInfo);
 if (hasSideEffects) { continue;;
 if (defInfo.mayHaveSideEffects()) { hasSideEffects = true ; break ; } } }
Preconditions.checkNotNull(functionInfo) ; if (hasSideEffects == false) {
 if (!def)
 if (hasSideEffects)) {
 Preconditions.checkNotNull(def); visit(functionInfo);
 if (defInfo.mayBePure(true);
 Preconditions.checkNotNull(def); connect(functionInfo);
Preconditions.checkNotNull(df);
 callSite.addFunction(functionInfo);
Preconditions.checkNotNull(def.getRValue);
 if (def.mayBePure()) { if (hasSideEffects){
 functionInfo.setPure(false);
 if (!hasSideEffects) continue;
 functionInfo.setFunctionInformation(functionInfo);
 if (hasSideEffects) { hasSideEffects &&
 if (hasSideEffects) { callNode.remove(functionInfo);
Preconditions.checkNotNull(defInfo, functionInfo);
 Function callNode = def.getCallNode;
 Preconditions.checkNotNullFunction(functionInfo);
 Preconditions.checkNull(def.functionInfo);
 CallNode callNode = getCallNode(functionInfo);
Preconditions.checkNotNull(functionInfo); functionInfo.setPure(true);
 if (isPure)
Preconditions.checkArg();
 if (hasSideEffects) { markPure(functionInfo);
 if (!hasEffects)
Preconditions.checkNotNull(functionInfo) && functionInfo.mayHaveSideEffects() ;
Preconditions.checkNotNull(def); if (hasSideEffects))
 if (hasSideEffects) { continue);
 if (isPure) {
 if (isPureFunctionCall)
 Function callNode = callNode.getNext();
 if (def.mayHaveSideEffects()) { hasSideEffects = true ; } else
 CallNode callNode = callNode.getNext(functionInfo);
Preconditions.checkNotNull(functionInfo); if (hasSideEffects))
Preconditions.checkNonNull(functionInfo);
 if (def);
 functionInfo = functionInfo.getFunctionInfo);
Preconditions.checkEmpty(def);
conditions.checkNotNull(functionInfo);
 if (hasSideEffects) { continue 2;
 callNode.setFunctionInformation(functionInfo);
 if (defInfo.isPure());
 Preconditions.checkNullOrEmpty(functionInfo);
 if (functionInfo);
Preconditions.checkNotNull(functionInfo) ; if (isPure) {
Preconditions.isNotNull(def);
Preconditions.checkNotNull(functionInfo));
 Function callNode = new Function(def);
 Preconditions.checkNoNotNull(functionInfo);
 if (hasSideEffects) { def.process(functionInfo);
Preconditions.checkNotNull(def, callSite, def);
 Preconditions.checkNonNullFunction(functionInfo);
 if (hasSideEffects) { def.connect(functionInfo);
 if (defInfo.isPure(true);
 if (isPure)conditions.checkNotNull(functionInfo);
 CallNode callNode = callNode(functionInfo);
 if (hasSideEffects) { processFunction(functionInfo);
 Preconditions.checkNonNullFunctionInformation(functionInfo);
Preconditions.checkNotNull(functionInfo) ; if (true) {
 functionInfo;
 Preconditions.checkNotDefined(functionInfo);
 if (def.mayBePure()) { hasSideEffects;
 if (hasSideEffects) Conditions.checkNotNull(functionInfo);
 if (hasSideEffects) { else
Preconditions.checkNotNull(functionInfo) if (hasSideEffects
Preconditions.checkNotNull(functionInfo, def);
 Function callNode = def.getCallNode);
Preconditions.checkNull(df);
Preconditions.checkNotNull(functionInfo); hasSideEffects ++;
Preconditions.checkNotNull(functionInfo); hasSideEffects = true
Preconditions.notNull();
 functionInfo.setFunction(functionInfo);
Preconditions.isTrue();
 if (hasSideEffects) { markFunction(functionInfo);
Preconditions.checkNotNull(functionInfo, callNode); }
 Preconditions.checkNonNullFunctionInfo(functionInfo);
Preconditions.checkNotNull(functionInfo); if (hasSideEffects) { else
 if (hasSideEffects) { has sideEffects;
Preconditions.checkNotNull(def); if (hasSideEffects) { else
 Preconditions.checkNullOrFalse(functionInfo);
 if (hasSideEffects === false);
Preconditions.checkFalse(def);
 if (hasSideEffects)) continue;
 functionInfo.connect(functionInfo);
Preconditions.checkNotNull(def, functionInfo, def);
 if (hasSideEffects) { }
 Preconditions.checkNull(def).get(functionInfo);
 if (hasSideEffects) Collections.checkNotNull(functionInfo);
 if (hasSideEffects) Objects.checkNotNull(functionInfo);
 if (!hasSideEffects);
Preconditions.check
 if (hasSideEffects) { visit(functionInfo);
 callSite.setFunctionInfo(functionInfo);
Preconditions.checkTrue(def);
 Preconditions.checkNotNull(def),(functionInfo);
 def.setFunctionInformation(functionInfo);
 assert(functionInfo);
 if (hasSideEffects) { debug(functionInfo);
Preconditions.checkArgument();
Preconditions.checkNotNull(functionInfo) ; if (!hasSideEffects) continue;
 if (def.isPure(true));
Preconditions.checkNotNull(functionInfo); functionInfo.setIsPure(); } else
Preconditions.checkNotNull(functionInfo); if (hasSideEffects) { }
 callNode.setIsFunctionCall(functionInfo);
 CallSite callNode = callSite(functionInfo);
 if (hasSideEffects;
 callNode.addFunctionInfo(functionInfo);
 CallSite callNode ;conditions.checkNotNull(functionInfo);
 functionInfo.setParent(functionInfo);
Preconditions.checkNotNull(functionInfo) && functionInfo.mayHaveSideEffects() &&
 if (def.isPure() { } else
 callNode.setHasSideEffects(functionInfo);
 if (defInfo!= null) { } else
Preconditions.checkNotNull(defInfo, callSite);
 if (hasSideEffects));
 if (isPure) { Collections.checkNotNull(functionInfo);
 if (hasSideEffects) Functions.checkNotNull(functionInfo);
 Node callNode = callNode;
 checkNotNull(functionInfo);
 if (functionInfo);
 if (hasSideEffects) { } }
 if (null)conditions.checkNotNull(functionInfo);
 functionInfo =
Preconditions.checkNotNull(functionInfo); } }
Preconditions.checkNotNull(defInfo); } else
Preconditions.checkNotNull(functionInfo) if (!hasSideEffects
 Call node = callNode.next(functionInfo);
 CallNode callNode = new Call(functionInfo);
 if (hasSideEffects) debug(functionInfo);
Preconditions.checkNotNull(functionInfo); if (!hasSideEffects) { else
 functionInfo.process(functionInfo);
Preconditions.checkNotNull(functionInfo); if (!hasSideEffects) { }
 assertNotNull(def);
 if (defInfo.isPure()) { }
Preconditions.checkNotNull(functionInfo.*);
 if (hasSideEffects) push(functionInfo);
 assertNotNull(functionInfo);
 def.setFunction(functionInfo);
 Conditions.checkNotNull(functionInfo);
Preconditions.checkNotNulldef);
 callSite.connect(functionInfo);
 if(hasSideEffects continue;
Preconditions.checkNotNull(functionInfo) ; if (true)
Preconditions.checkNotNull(functionInfo.function);
Preconditions.checkNotNull(functionInfo++);
 if (!hasSideEffects) { }
 callSite.add(functionInfo);
 if (!hasSideEffects;
 if (!hasSideEffects) {checkNotNull(functionInfo);
 Preconditions.exceptions.checkNotNull(functionInfo);
 if ((hasSideEffects);
 if (hasSideEffects) { }
 if (hasSideEffectsCheck);
 if (Preconditions.checkNotNull(functionInfo);
 Preconditions.primitives.checkNotNull(functionInfo);
 if (!hasSideEffects).checkNotNull(functionInfo);
Preconditions.checkNotNull;
 callSite.register(functionInfo);
Preconditions.checkNotNull(functionInfo) if (hasSideEffects) { else
 } Preconditions.checkNotNull(functionInfo);
Preconditions.checkNotNull(functionInfo, functionInfo); } else
Preconditions.checkNotNull(df, functionInfo);
Preconditions.checkNotNull(functionInfo2);
 Preconditions.uncheckNotNull(functionInfo);
Preconditions.checkNotNull(functionInfo, callNode); else
Preconditions.checkNotNull(functionInfo, functionInfo); }
Preconditions.checkNotNull(functionInfo, name);
 Preconditions(functionInfo);
 if (isPure(def);
Preconditions.true();
 functionInfo.add(functionInfo);
 if (isPureFunctionCall);
 Preconditions.primitive.checkNotNull(functionInfo);
 functionInfo.update(functionInfo);
 Preconditions.conditions.checkNotNull(functionInfo);
 System.exit(functionInfo);
 Preconditions.checker.checkNotNull(functionInfo);
 Preconditions2.checkNotNull(functionInfo);
 callNode;
Preconditions.checkNotNull(functionInfo) if (true)
 debug(functionInfo);
Preconditions.checkNotNull(functionInfo) if (hasEffects)
 if (true);
Preconditions.checkNotNull(selfFunctionInfo);
 checkFunction(functionInfo);
 } checkFunction(functionInfo);
 boolean hasSideEffects;
Preconditions.checkNotNull(functionInfo, functionInfo); else
Preconditions.check()
Preconditions.checkNotNulldef();
Preconditions.checkNotNull(functionInfo*);
 if (hasSideEffects) { #checkNotNull(functionInfo);
 assertPure(functionInfo);
 boolean hasEffects = false;
 functionInfo &&
 Preconditions.il.checkNotNull(functionInfo);
 Preconditions.this.checkNotNull(functionInfo);
 Collections.checkNotNull(functionInfo);
 if (!functionInfo);
 PreconditionNull(functionInfo);
 Preconditions.parent().checkNotNull(functionInfo);
 synchronized(functionInfo);
 synchronized(this);
 final Preconditions.checkNotNull(functionInfo);
 functionInfo);
Preconditions.all();
Preconditions.checkNotNull(functionInfo) if (true))
 if(break;
 boolean hasSideEffects ++;
 assertNull(def);
 } setFunction(functionInfo);
 assertNull(functionInfo);
Preconditions.checkNotNull(funcInfo);
Preconditions check:
Preconditions.check());
 checkNull(functionInfo);
Preconditions.checkNotNull(FunctionInfo);
 Conditional.checkNotNull(functionInfo);
 } if (functionInfo);
Preconditions.checkNotNull(def));
Preconditions.checkNotNull(functionInfo) ; } } else
 Preconditions4.checkNotNull(functionInfo);
Preconditions.checkNotNull(function);
 Predicates.checkNotNull(functionInfo);
 boolean isNew;
 boolean isSideEffects;
 Objects.checkNotNull(functionInfo);
 preconditions.checkNotNull(functionInfo);
 if (!hasEffects;
 Preitions.checkNotNull(functionInfo);
 PREconditions.checkNotNull(functionInfo);
 if(functionInfo;
 boolean hasSideEffect;
 if (def);
 if (!Nullconditions.checkNotNull(functionInfo);
 System.dump(functionInfo);
 if (!null) Objects.checkNotNull(functionInfo);
 boolean isPure;
 System.log(functionInfo);
 if (!null) Conditions.checkNotNull(functionInfo);
 if(true;
 Postconditions.checkNotNull(functionInfo);
Preconditions.checkNotNull(functionInfo.name);
Preconditions.checkNotNull(functionInfo.function());
 Preconditers.checkNotNull(functionInfo);
 Preconditioner.checkNotNull(functionInfo);
 boolean break;
 boolean flag;
 boolean result;
Preconditions.true
Preconditions check -
Preconditions check;
Preconditions.checkNotNull(functionInfo.name());
 Precond.checkNotNull(functionInfo);
 (break);
 boolean found;
(null);
 ++i;
 preConditions.checkNotNull(functionInfo);
 validate(functionInfo);
 } });
 (false);
 } assert(functionInfo);
 assertTrue(functionInfo);
 (true);
Preconditions.checkNotNull(functionInfo) } } else
 Functions#checkNotNull(functionInfo);
Preconditions.checkNotNull(functionInfo) for { }
Preconditions.checkNotNull(functionInfo) } else
Preconditions.checkNotNull(funInfo);
Preconditions.checkNotNull(callNode);
 } }
Preconditions.checkNotNull(functionInfo) } }
 }
 };
Preconditions.checkNotNull(name);
...
