Collection<Definition>  defs =
Collection defs =
Collection<Definition>
 defs =
 List<Definition> defs =
 depFunctionNames. add ( callSite. getName ( ) ) ;
 depFunctionNames. add ( functionNames. getFunctionName ( function ) ) ;
 depFunctionNames. add ( functionName ( callSite ) ) ;
 depFunctionNames. add ( functionNames. getFunctionName ( callSite ) ) ;
 depFunctionNames. add ( functionNames. getFunctionName ( function ) + " " + callSite. getString ( ) ) ;
CollectionDefinition defs =
Collection<Definition> definitions =
 depFunctionNames. add ( functionNames. getFunctionName(callSite.getRValue())); } if (isPure) {
 depFunctionNames. add ( function. getRValue ( ) ) ;
 depFunctionNames. add ( functionNames. getFunctionName(callSite.getRValue())); } if (depFunctionNames) {
 depFunctionNames. add ( functionNames. getFunctionName(function) + " " + callSite. toString ( ) ) ;
 depFunctionNames. add ( callSite. getRValue ( ) ) ;
 depFunctionNames. add ( functionName. getFunctionName ( callSite ) ) ;
 depFunctionNames. add ( functionInfo. toString ( ) ) ;
 depFunctionNames. add ( functionNames. getFunctionName ( callSite. name ) ) ;
 depFunctionNames. add ( callSite. getRValue ( ) ) ; } if (isPure) {
 depFunctionNames. add ( functionName ( function ) ) ;
 depFunctionNames. add ( function. getName ( ) ) ;
 CallableDefinition defs=
 List<CallableDefinition> defs=
 depFunctionNames. add ( callSite. name ) ;
 depFunctionNames. add ( functionNames. getFunctionName ( function ) + " " + callSite ) ;
 depFunctionNames. add ( function ) ; List<Definition> defs =
 <Definition> defs =
Collection<Definition> def =
 List<CallableDefinitions>defs =
 depFunctionNames. add ( callSite ) ;
Collection<Definition> defs = this.
Collection<Definition def>
 if (callSite!= null) { List<Definition> defs =
 String depFunctionNames = [ ] ; List<Definition> defs =
 depFunctionNames. add ( functionNames. getFunctionName(function) + " " + callSite. toString() ); }
 depFunctionNames. add ( callSite. value ) ;
 depFunctionNames. add ( functionNames. getFunctionName(function) + " " + callSite. getString ( ) ); }
 def =
 if (callSite!= null) {
 DefinitionList defs =
Collection<Definition> defs = (Collection<Definition>)
 List<FunctionDefinition> defs=
 if (callSite) {
 depFunctionNames. add ( functionNames. getFunctionName(function) + " " + callSite. name); }
 depFunctionNames. add ( functionNames. getFunctionName(function) + " " + callSite. value); }
 depFunctionNames. add ( functionNames. getFunctionName(function) + " " + callSite ); }
 depFunctionNames. addAll ( callSite. name ) ;
Collection definitions =
Collection<Definition> defs = DefinitionUtils.
 Set<Definition> defs=
Collection<Definition> defs = compiler.
 List<CallableDefinitions, CallableDefinition> defs =
 if (callSite) { List<Definition> defs =
 List<CallableDefinition> callableDefs=
 depFunctionNames. add ( functionNames. getFunctionName ( function ) + " " + callSite. toString() ) }
Collection<Definition> defs = CallableDefinitionUtils.
 depFunctionNames. clear ( ) ; List<Definition> defs =
 List<CallableDefinition> List<CallableDefinition> defs =
 List<CallableDefinition, CallableDefinition> defs =
 depFunctionNames. add ( function ) ;
 List<CallableDefinition> defs &=
 Set<CallableDefinitions>defs =
 depFunctionNames. add ( functionNames. getFunctionName ( function)); }
 depFunctionNames. add ( functionNames. getFunctionName ( callSite. getName ( ))); }
 depFunctionNames. add ( functionNames. getFunctionName(function) + " " + function); }
 depFunctionNames. add ( functionNames. getFunctionName(callSite)) ; }
 depFunctionNames. clear ( ) ;
Collection<Definition definitions>
 depFunctionNames. add ( functionNames. getFunctionName(callSite.getRValue())); } } else { final
Collection<Definition> defs = CallableDefinitions.
 if (callSite instanceof CallSite) {
 depFunctionNames. add ( functionNames. getFunctionName(callSite.getRValue())); } } else { #
 depFunctionNames. add ( functionNames. getFunctionName(function) + " " + callSite. getLastChild ( ) ); }
 CallableDefinition[]defs =
 depFunctionNames. add ( name ) ; List<Definition> defs =
 DefinitionList defs = Compiler.
 Set<String> depFunctionNames; List<Definition> defs =
 String depFunctionNames = null ; List<Definition> defs =
Collection<Definition> defs = Compiler.
 Definitions defs =
 Iterable <CallableDefinition> defs =
Collection<Definition> defs = Functions.
 if (callSite!= null) List<Definition> defs =
 DefinitionList defs = this.
 DefinitionList defs = compiler.
 definitions =
Collection<Definition> definitionDefs =
 depFunctionNames. add ( functionNames. getFunctionName(callSite).getName() ); }
 List<Callable> defs=
Collection<Definitions> defs =
Collection<Definition> defs = (List<Definition>)
Collection < CallableDefinitions> defs =
 Definition defs =
 DefinitionList defs = DefinitionUtils.
 List<CallableDefinition> defs *=
Collection<Definition> defs = CallableDefinitionHelper.
 List<CallableDefinitions> defs &=
 depFunctionNames. add ( functionNames. getFunctionName(callSite)) ; final
 depFunctionNames. add ( function ) ; Set<Definition> defs =
Collection<Definition> defs  = getDefinitions(function, callSite);
 if (callSite instanceof Call) {
 depFunctionNames. add ( functionNames. getFunctionName ( callSite. getName ( ))); ;
 String depFunctionNames = null;
 depFunctionNames. add ( function ) ; Collection<Definition> defs =
 List<Definition> defs &=
 DefinitionList defs = DefinitionListUtils.
 depFunctionNames. add ( functionNames. getFunctionName(callSite) + ""); }
 List<CallableDefinition> defs |=
 depFunctionNames. add ( function. getRValue ( ) ) ; }
 Set<Node, CallableDefinitions> defs =
 depFunctionNames. add ( functionNames. getFunctionName(callSite)) ; } final
 CallableDefinitionList defs=
 Set<Definition> defs &=
Collection < CallableDefinition> defs =
Collection<Definition> defs = CallableDefinitionUtil.
 List<CallableDefinition> _defs =
 Node defs = callSite ; defs &=
Collection<Definition> defs = FunctionHelper.
 depFunctionNames. add ( functionNames. getFunctionName ( callSite. getName ( ))); };
Collection<Function> defs = CallableDefinitions.
 depFunctionNames. add ( functionNames. getFunctionName(callSite.getRValue())); } } final
 List<Definition> defs = this.
Collection<CallableDefinition> defs = this.
 depFunctionNames. add ( functionName ( callSite ) ) ; }
 depFunctionNames. add ( functionInfo. toString ( ) ) }
 Set<FunctionDefinition> defs; Set<Definition> defs =
Collection<Definition>  defs = CallableDefinitionsUtils.
 Definition defs = CallableDefinitionUtils.
 List<Definitions>defs =
 List<FunctionDefinition> defs; List<Definition> defs =
 List<CallableDefinitions> defs *=
 Set<Node, CallableDefinition> defs =
Collection def =
 List<Function> depFunctionNames;
 DefinitionDefinitions defs = CallableDefinitions.
 depFunctionNames. add ( functionNames. getFunctionName(callSite.getRValue())); } } #
 List<Definition> defs *=
 List<CallableDefinition> <CallableDefinition> defs =
 depFunctionNames. add ( functionName. getFunctionName ( callSite ) ) ; }
 depFunctionNames. add ( functionNames. getFunctionName(function)) ; final
 depFunctionNames. add ( callSite. getRValue ( ) ) }
 String depFunctionNames = "" ; List<Definition> defs =
 depFunctionNames. add ( functionNames. getFunctionName ( callSite. name ) ) }
 String depFunctionNames = [ ] ;
 List<Function> defs; defs=
 List<Function> defs; defs &=
 List<Definition> defs = compiler.
 List<Definition defs=
 depFunctionNames. add ( functionNames. getFunctionName(callSite.getRValue()) ) ; } } } final
 CallableDefinition defs = CallableDefinitionHelper.
 depFunctionNames. addAll ( functionNames. getFunctionName(callSite)) ; } final
Collection<Definition> defs[] =
Collection<Definition> defs  = new ArrayList<Definition>(); def =
Collection<Definition> defs = DefinitionUtil.
 DefinitionList defs = FunctionHelper.
Collection<Definition> defs  = getDeclarations(function, callSite);
 depFunctionNames. add ( callSite. getName ( ) ) ; }
 List<CallableDefDefinition>defs =
 List<CallableDefinitions defs=
 List<CallableDefinitionNode> defs =
 DefinitionList defs = Functions.
 Set<FunctionDefinitions, CallableDefinitions> defs =
 depFunctionNames. add ( function. getRValue ( ) ) ; } final
CollectionDefinitionList defs =
 depFunctionNames. add ( functionName ( callSite ) ) }
 DefinitionDefinitions defs = DefinitionDefinitionUtils.
 List<CallableDefinitions<Node>>defs =
 List<CallableDefinition> cdefs =
Collection<Definition> defs = ReflectionHelper.
 List<CallableDefinitions, Definition> defs =
 Set<FunctionDefinitions, CallableDefinition> defs =
 Set<CallableDefinition> defs =
 depFunctionNames. add ( functionNames. getFunctionName(callSite).getName()); } final
 DefinitionDefinitions defs = DefinitionDefinitionsHelper.
Collection < CallableDefinition > defs = compiler.
 if (callSite!= null) { Collection<Definition> defs =
 List<FunctionDefinition> defList<FunctionDefinition> defs =
 DefinitionList defs = DefinitionListUtil.
 List<CallableDefinitions, FunctionDefinition> defs =
 CallableDefinitionList defs = this.
 List<Definition> _defs =
 depFunctionNames. add ( functionNames. getFunctionName(callSite).getName() ); };
 if (callSite)
Collection<Def> defs =
Collection<Definition> defs, =
 depFunctionNames. add ( functionNames. getFunctionName ( callSite. name ) ) ; }
 CallableDefinitionList defs = Compiler.
Collection<Definition defs>
 List<FunctionDefinition> fdefs =
 DefinitionList defs = CallableDefinitions.
 Set<CallableDefinitions, Definition> defs =
 List<CallableDefinition|Node>defs =
Collection of Definition defs =
 List<CallableDefinitions> _defs =
 List<CallableDefinitionsNode> defs =
 depFunctionNames. add ( functionNames. getFunctionName(function) + " " ) ; }
 depFunctionNames. add ( callSite. name ) ; }
 Set<FunctionDefinition> defs &=
 depFunctionNames. clear ( ) ; Set<Definition> defs =
Collection<CallableDefinition> defs = Functions.
Collection<FunctionDefinition> defs = this.
 List<FunctionDefinition> defs &=
 List<FunctionDefinitions, CallableDefinitions> defs =
 Iterable <CallableDefinitions> defs =
Collection.<Definition> defs =
 if (isPure) List<Definition> defs =
 if (isPure) { List<Definition> defs =
 List<FunctionDefinition> _defs =
Collection<Definition> defs  = new Collection<Definition>(); def =
 List<CallableDefinitions> cdefs =
 depFunctionNames. add ( callSite. value ) }
 depFunctionNames. add ( callSite. value ) ; }
Collection<Definition> defs  = getDefinitions(definitionProvider) ||
 List<Definition> def=
 String depFunctionNames = "";
 depFunctionNames. add ( callSite. name ) }
Collection<Definition> defs = CallHelper.
Collection definitionDefs =
 List<CallableDefinitions> fdefs =
 List<CallableDefinitions, CallableFunctionDefinition> defs =
 List<CallableDefinitions<Function>>defs =
 List defs =
 depFunctionNames. add ( name ) ; Collection<Definition> defs =
 Iterable<Definition> defs =
 if (isPure) {
 String depFunctionNames ; List<Definition> defs =
 if (isPure)
 List<Def> defs=
 List<CallableDefinitions, CallableCall> defs =
Collection<Definition> defs  = getDefinitions(definitionProvider) +
 List<FunctionDefinition> defs *=
 List<CallableDefinitions, FunctionInformation>defs =
 CallableDefinitions defs=
 Set<CallableDefinitions> cdefs =
 List<FunctionDefinitions, CallableDefinition> defs =
 Set<Node, CallableDefinitionNode>defs =
 DeclarationList defs =
Collection<Definition> defs  = (Collection<Definition>) this.
 List<CallableDefinition, CallableCall>defs =
 DefinitionList defs &=
 depFunctionNames. add(callSite); }
 List<CallableDefinitions<FunctionInformation>> defs =
 List<CallableFunctionDefinition> defs =
 Set<CallableDefinitions, FunctionDefinition> defs =
Collection<Definition> defs  = new ArrayList<Definition>(); definitions =
 DefinitionList defs = CallHelper.
 List<CallableDefinition, CallableFunctionDefinition> defs =
 List<FunctionDefinitions>defs =
 List<Definition> alldefs =
 if (callSite) { Collection<Definition> defs =
 if (callSite) List<Definition> defs =
 List<CallableDefinitions> callabledefs =
 List<Definition> *defs =
 if (callSite!= null) Set<Definition> defs =
Collection>defs =
 Iterable <CallableDefinitionNode> defs =
 Set<Node, CallableDefDefinition> defs =
 Definition[] defs =
 List<CallableDefinitions, CallDefinition> defs =
 List<CallsInFunctionDefinition> defs =
 if (callSite) { Set<Definition> defs =
 depFunctionNames. add ( callSite ) }
 String depFunctionNames;
 DefinitionList defs *=
 List<CallableDefinitions> call_defs =
 Set<FunctionDefinition> defs =
 List<CallableDefinitions<Definition> defs =
 Iterable <FunctionDefinition> defs =
 List<FunctionCallableDefinition> defs =
Collection<Definition> defsList =
Collection<Definition> =
Collection<Definition> declarations =
 final List<Definition> defs =
 List<DefinitionNode> defs =
Collection<Definition> defs  = getDefinitions(definitionProvider) -
 Set<Node, CallableFunctionDefinition> defs =
 Iterable <CallableDefDefinition> defs =
 List>defs =
 List<CallableDefinitions.Definition> defs =
 Set<CallableDefinitions.Definition> defs =
 if (!isPure)
 List<CallDefinition> defs =
Collection<Definition> defs = *
Collections =
Collection<DefinitionDefs>
Collection<Definitions>
 Set<CallableDeclarationDefinition> defs =
Collection<Definition>  defs = new Collection<Definition>() {
 List<CallableDeclarationDefinition> defs =
 Declaration defs =
 if (callSite!= null) { final
 DefinitionList defsList =
 Node defs =
 depFunctionNames. add( callSite ) ; final
 defs = Compiler.
 Set<CallableFunctionDefinition> defs =
 List<CallableDefinitions|Definition> defs =
 List<CallableFunctionBodyDefinition> defs =
 if (isPure) { Collection<Definition> defs =
 CallableDefinitions definitionProvider = callSite ; final
 if (callSite) { final
 depFunctionNames. add(function); }
Collection<Defs>
 List<FunctionDefinitionNode> defs =
 final List defs=
Collection<Definition>  defs = new Collection<Definition>();
Collection<Definition>  defs = new Collection<Definition>() +
 List<CallableMethodDefinition> defs =
Collection<Function> defs =
 DefinitionList defs = *
 List<FunctionCallableFunctionDefinition> defs =
Collection<Definition>> defs =
 defs = this.
 List<Function> List<Definition> defs =
Collection<definition> defs =
 defs :=
 DefinitionList>defs =
 if (debug)
 Array<FunctionDefinition> defs =
 List<String>, List<Definition> defs =
 CallableDefinitions<Definition> defs =
 List<CallableDefinition<Definition> defs =
 ArrayList<Definition> defs =
 Definitions defs = *
 if (null) List<Definition> defs =
 Defs =
 List<CallableNode<Definition> defs =
 CallDefinition[]defs =
 Definitions def=
 DeclarationList>defs =
 DefinitionDefs =
 Definitions []defs =
 List<> defs =
 Definitions>defs =
 [Definition> defs =
 if (!debug)
 String depFunctionNames; final
 if (DEBUG)
 List<Callable<Definition> defs =
 if (null)
Collection<Definition>(defs =
 List.<Definition> defs =
 Definition<?> defs =
Collection docs =
 List<FunctionNode<Definition> defs =
 Defs def=
 List<CallSite<Definition> defs =
 final Iterable<Definition> defs =
 List<FunctionReference<Definition> defs =
 definition =
 List<defs =
Collection<Definition>  defs
Collection<Definition>  defines =
Collection<Definition] =
 final NodeList<Definition> defs =
 List<List<Definition> defs =
 Declaration[]defs =
Collection declarations =
 final ArrayList<Definition> defs =
 def :=
 <Def> defs =
Collection<Def>
 List<Node<Definition> defs =
Collection<Definition>  defs :=
Collection defs :=
 final Collection<Definition> defs =
 continue; }
 final Set<Definition> defs =
 definitions *=
Collection<definition>
 try { final
Collection<Definition>>
 continue; };
Collection<Definition>)
 final
 { final
Collection<Definition>, defs =
Collection<Definition>) defs =
CollectionOfDefinition> defs =
 #
Collection<Definition> defs:
Collection<Definition> defs +=
