 sideEffectInfo.appendCall(node);
sideEffectInfo.appendCall(node, gramp);
sideEffectInfo.appendCall(node, parent, gramp);
 traversal.appendCall(node);
sideEffectInfo.call();
sideEffectInfo = node ;
sideEffectInfo.appendCall(node, parent, gramp); }
sideEffectInfo.setCall();
 if (inExterns) {
 visitCall(node);
sideEffectInfo.appendCall(node, gramp); }
sideEffectInfo.appendCall(node) ; return sideEffectInfo ;
 node. setCall ( ) ;
 if (node!= null) {
sideEffectInfo = node
 return node;
sideEffectInfo.appendCallSite ( node, gramp ) ;
 if (inExterns) { traversal.appendCall(node);
 node. setFunction ( sideEffectInfo ) ;
sideEffectInfo.setCallSite();
sideEffectInfo.appendCall(node, parent);
sideEffectInfo.appendCall(node, parent, gramp); } }
sideEffectInfo.appendCallSite ( node, parent, gramp ) ;
sideEffectInfo.appendCall(node); }
sideEffectInfo.appendCallSite(node, parent, gramp); }
 if (inExterns) { return
sideEffectInfo.appendCall(node, parent, gramp); return ;
 if (inExterns) { traversal. report(node, INVALID_NO_SIDE_EFFECT); }
 visit(node);
sideEffectInfo.appendCall(node) ; return node ; }
sideEffectInfo.setFunctionCallSite(node);
 node. setFunctionCall ( ) ;
sideEffectInfo.appendCall(node) ; return node ;
sideEffectInfo. setCallSite ;
sideEffectInfo.appendCall(node, parent, gramp, traversal);
sideEffectInfo.appendCallSite(node); }
sideEffectInfo.setCallSite ( node ) ;
sideEffectInfo.appendCall(node) ; } }
 if (inExterns) { traverseal.report(node, INVALID_NO_SIDE_EFFECT); }
sideEffectInfo.appendCall(node, parent, gramp); return node ;
sideEffectInfo.setFunctionCallSite();
 if (inExterns) { sideEffectInfo.setIsPure(); } else {
 sideEffectInfo.setCall(node);
sideEffectInfo. setCall ;
 if (inExterns) { sideEffectInfo.setIsPure(); }
sideEffectInfo.appendCall(node) ; return node. getString ( ) ;
sideEffectInfo.appendCall(node, scope);
 if (inExterns) { sideEffectInfo.setTaintsGlobalState(); }
 if (inExterns) { traversal. report ( node, INVALID_NO_SIDE_EFFECT ) ;
 node = node ;
sideEffectInfo.appendCallSite(node, gramp); }
 if (inExterns) { traversal.report(node, INVALID_CALL); }
 if (inExterns && node!= null) {
 if (inExterns) { return ; } if (inExterns) {
sideEffectInfo.appendCallSite ( node, parent, gramp )
sideEffectInfo.appendCall(node, parent, gramp); return gramp ;
sideEffectInfo.setFunctionCallSite ( node )
 if (node instanceof Call) {
 if (inExterns) { traversal.report(node, INVALID_EXTERNAL); }
 if (inExterns) { traverseal.report(node, INVALID_NO_SIDE_EFFECT);
sideEffectInfo.setFunctionCall(node);
sideEffectInfo. setFunction ( node, gramp ) ;
 sideEffectInfo.setFunction(node);
 functionSideEffectMap.appendCall(node);
sideEffectInfo.setFunctionCallSite(node, gramp);
sideEffectInfo.setFunctionCall ( ) ;
 if (inExterns) { sideEffectInfo.setIsPure();
sideEffectInfo. setFunctionCallSite ( node ) ; }
sideEffectInfo.setCallSite ( node )
sideEffectInfo.setCallSite ( node ) ; }
 if (node) {
 node. setCallSite ( ) ;
 if (inExterns) return;
 if (inExterns) { return ; }
 if (inExterns) { traversal.report(node, INVALID_NO_SIDE_EFFECT); } return
 if (inExterns) { traverseal.report(node, INVALID_NO_SIDE_EFFECT); } return
 if (inExterns) { traverseal.report(node, INVALID_EXTERNAL); }
 node. callSite ;
sideEffectInfo.appendCall(node, parent, gramp); return true ;
 if (inExterns) { traversal. report(node, INVALID_NO_SIDE_FACE); }
 if (inExterns)
 if (node instanceof CallSite) {
sideEffectInfo.appendCallSite(node, parent);
 functionSideEffectMap. get ( node ).appendCall(node);
 if (inExterns) { traversal.report(node, EXTERNAL); }
 node. setFunction ( this ) ; }
 if (node!= null)
 if (inExterns) { traversal.report(node, INVALID_NAMESPACE); }
 if (inExterns) { sideEffectInfo.setIsPure(); } else
 if (inExterns) { sideEffectInfo.setTaintsGlobalState(); } else {
 return node. getString ( );
sideEffectInfo.appendCallSite ( node, gramp )
sideEffectInfo.appendCall(node, parent, gramp); return true ; }
 if (inExterns) { traversal. report(node, INVALID_NO_EXTERNAL); }
 functionSideEffectMap.add(node);
 if (inExterns) { traversal.report(node, INVALID_call); }
sideEffectInfo.appendCall(node) ; return ( Node ) node ; }
sideEffectInfo. setTaintsCallSite ( node ) ;
 node. setFunction ( this ) ;
sideEffectInfo.setFunctionCall ( node )
sideEffectInfo.appendCall(node) ; return ( Node ) node ;
sideEffectInfo.appendCall(node, parent, gramp); } } ;
 node. setCallSite ( sideEffectInfo ) ;
 if (inExterns) { sideEffectInfo.setIsPure(true); }
 if (inExterns) { traversal.report(node, INVALID_Call); }
 if (inExterns) { traversal.report(node, INVALID_ALL); }
 if (inExterns) { traversal.report(node, INVALID_EXTERNAL);
sideEffectInfo.appendCall(node, parent, false);
sideEffectInfo.appendCall ( node, parent, gramp )
 if (inExterns) { sideEffectInfo.setIsPure(true);
 if (inExterns) { traversal.report(node, INVALID) ; }
 if (inExterns == 0) {
 if (inExterns) { node = new CallSite(node); }
 if (inExterns && node instanceof Call) {
 if (inExterns) { sideEffectInfo.setTaintsGlobalState();
 if (isCallSite(node, gramp)) {
 node = call ;
 if (inExterns) { traversal.report(node, INVALID_NODE_NAME); }
 if (inExterns) { if (inExterns) {
 node. setCallSite ( )
 if (inExterns) { sideEffectInfo.setIsPure(); } return
 if (call) {
 if (inExterns) { traversal.report(node, INVALID_CALL_SOURCE); }
 node. setTaintsGlobalState ( ) ;
 sideEffectInfo.setFunctionCallSite;
 if (inExterns) { return ; } if (inCall) {
 if (inExterns &&! pure) {
sideEffectInfo.appendCall(node) ; return node. getFirstChild ( ) ;
sideEffectInfo.appendCall(node, parent, gramp); return node ; }
 if (inExterns) { sideEffectInfo.setIsPure(); } else { return ; }
sideEffectInfo.appendCall(node) ; return true ;
 if (inExterns) { parent.appendCall(node);
 if (inExterns) { traversal.report(node, INVALID_CALL_INFO); }
 if (inExterns) { traversal. report ( node, INVALID_NO_SIDE_FACE ) ;
sideEffectInfo.appendCallSite ( node ) ; return node ; }
sideEffectInfo.appendCall(node, parent, gramp); return this ; }
 if (inExterns) { return ; } if (inExterns) { return
sideEffectInfo.appendCallSite(node);
 if (inCall) {
 if (inExterns) { traversal.report(node, INVALID_CLIENT); }
sideEffectInfo.appendCallSite(node, scope);
sideEffectInfo.setTaintsCallSite ( node )
 if (isCall(node)) {
sideEffectInfo.setTaintsCallSite(node); }
 if (inExterns) { return ; } if (node) {
sideEffectInfo.appendCallSite ( node ) ; return node ; } }
 if (inExterns) { traversal. report(node, INVALID_NODE_CALL); }
sideEffectInfo.appendCall(node, parent, null);
 functionSideEffectMap.addNode(node);
 if (inExterns!= null) {
 if (inExterns) { _appendCall(node);
sideEffectInfo.appendCall(node, parent, scope);
 node. setTaintsGlobalState ( true ) ;
sideEffectInfo.setTaintsCall ( ) ;
sideEffectInfo.appendCall(node) ; return node. getString ( )
sideEffectInfo.appendCall(node) ; node = gramp ;
 if (inExterns) { return ; } if (call) {
 if (inExterns) { switch(node) { case 'call' :
 if (inExterns) { sideEffectInfo.setIsPure(); } else { this.
sideEffectInfo. visitCall();
 if (inExterns) { return ; } else {
 if (inExterns) { node = new Call (node);
sideEffectInfo.setTaintsCall(node);
sideEffectInfo.appendCall(node) ; return true ; }
sideEffectInfo.appendCall(node) ; return this ;
 if (inExterns) { traversal.report(node, INVALID); } return
 traversal.record(node);
sideEffectInfo.appendCall(node, parent, gramp)); } }
 node. setCallSite ;
 if (inExterns) { sideEffectInfo.setTaintsGlobalState(); } else
 if (inExterns) parent.appendCall(node);
sideEffectInfo.setCallSite ( node, gramp )
sideEffectInfo.setFunctionCallSite ( node, gramp )
 if (call)
sideEffectInfo.appendCallSite ( node ) ; } }
 if (inExterns) { sideEffectInfo.initCall(); }
 node. setCallSite ( this ) ;
 if (inExterns) { if (!isPure)
sideEffectInfo.setFunctionCallSite ( )
 functionSideEffectMap [ sideEffectInfo].appendCall(node);
 node. setFunction ( "call" ) ; }
 if (inExterns) { traversal.report(node, INVALID_CALL); } return
sideEffectInfo.setFunctionCallSite(node, parent);
 if (inExterns) {appendCall(node);
 if (inExterns) { sideEffectInfo.setTaintsGlobalState(); } return
 callSiteInfo. setCallSite(node);
 node. visit ( ) ;
 return node ; }
sideEffectInfo.appendCall(node) ; return ( Node ) node. parent ;
 if (inCallSite) {
sideEffectInfo.setCallSite(node, scope);
 if (inExterns) { sideEffectInfo.setIsPure(true); } else
sideEffectInfo.appendCall(node) ; return this ; }
 return sideEffectInfo.appendCall(node);
 if (inExterns) { node = new Node ( ) ;
 if (inExterns) { return ; } if (inExterns) { return;
 if (inExterns) { if (isPure) {
 if (inExterns) { node =
 node. setTaintsCall ( ) ;
 if (isCallSite(node, parent)) {
sideEffectInfo.appendCall(node) ; node. pop ( ) ;
sideEffectInfo.appendCall(node) ; if (inExterns) return ;
 functionSideEffectList.appendCall(node);
sideEffectInfo.appendCall(node) ; this. visitCall ( node ) ;
sideEffectInfo.appendCall(node) ; return node. getString ( ) ; }
 node.setCall(this);
sideEffectInfo.appendCall(node) ; node. setParent ( parent )
 sideEffectInfo.setTaintsCallSite;
 node. setCall ( )
 if (isCallSite(node, scope)) {
sideEffectInfo.appendCall(node, parent, true);
 if (inExterns) { node = call;
 if (inExterns) { traversal.report(node, INVALID_CALL); } else
 if (inExterns) { traverseal.report(node, INVALID_CALL); } return
 node. setFunction ( ) ;
 if (inExterns) { traversal.report(node, INVALID_EXTERNAL));
 if (inExterns) { node.appendParent(); }
 if (inExterns) { node.appendChild(); }
sideEffectInfo.appendCall(node) ; return node ; } }
 if (inExterns) { node. appendParent ( ) ;
 sideEffectInfo.setFunctionCall;
 traversal.report(node);
 sideEffectInfo.setCallSite(lhs);
 if (inExterns) { node.append(call);
 node. setTaintsGlobalState ( "call" )
 if (inExterns) { super.appendCall(node);
sideEffectInfo.appendCall(node) ; return ;
 if (inExterns) { node = new Node (node);
 if (inExterns) { node = call();
 callSiteMap.add(node);
 sideEffectInfo.setNode(node);
sideEffectInfo.appendCall(node) ; return ( Node ) node ; } }
 super.call(node);
sideEffectInfo.appendCall(node) ; } return sideEffectInfo ;
sideEffectInfo.appendCall(node) ; node. setParent ( parent ) ;
sideEffectInfo.setFunctionCallSite(); }
sideEffectInfo.setCallSite ( )
sideEffectInfo.appendCall(node) ; return - 1 ;
 sideEffectInfo.setFunctionCall);
 functionSideEffectMap [ node ].appendCall(node);
 sideEffectInfo.setFunction(node, parent);
 node. setTaintsGlobalState ( "call" ) ;
 if (inExterns) { root.appendCall(node);
sideEffectInfo.appendCall(node) ; if (inExterns) { }
 if (inExterns && node instanceof Call()) {
 callSiteInfoInfo. setCallSite(node);
 if (isCall(node)) { traversal.appendCall(node);
 functionSideEffectMap.addKey(node);
 node.setFunction(sideEffectInfo;
sideEffectInfo.setCall ( node )
 if (inExterns) { if (!call)
 if (inExterns) { traversal.report(node, INVALID_NAMESPACE); return
 node. visitCall();
 node = node. nextChild ; traversal.appendCall(node);
 return node. getString ( ) + "";
sideEffectInfo.appendCall(node) ; return node ; } } ;
 if (isCall) {
 functionSideEffectMap = functionSideEffectMapFor(node);
 node = node. clone ( ) ; return node;
sideEffectInfo.appendCall(node, parent, node);
 sideEffectInfo.setTaintsGlobalState;
 if (n!= null)
 functionSideEffectMap.put(callSite,node);
sideEffectInfo.setTaintsCallSite(node, scope);
sideEffectInfo.appendCall(node, parent, gramp) return ;
 if (node instanceof Call()) {
 sideEffectInfo.set(node);
sideEffectInfo.appendCall(ramp);
 node = traversal.appendCall(node);
sideEffectInfo.appendCallSite();
 node.setFunctionCallSite;
 if (inExterns) { if (isPure)
sideEffectInfo.appendCall(node, node, gramp);
 sideEffectInfo.setFunctionCallSite(node;
 return sideEffectInfo;
 if (inExterns) { traversal.report(node, INVALID_NO_EXTERNAL); return
sideEffectInfo.appendCall(node) ; return node. getText ( )
 callSiteInfo. setCallSiteInfo(node);
sideEffectInfo.appendCall(node, parent), gramp);
 node.setTaintsGlobalState;
sideEffectInfo.appendCall(node) ; node. setCall ( ) ;
 node.setCall(call);
 if (inExterns) { traverseal.appendCall(node);
 functionSideEffectMap[sideEffectInfo.appendCall(node);
 callSiteInfo. setCall(node);
 sideEffectInfo.setCallSite(node);;
 if (inExterns) { traversal.report(node, INVALID_call); return
 sideEffectInfo.setCallSite(node;
 callSiteInfo. visitCall(node);
 if (inExterns) traversal.appendCall(node);
 functionSideEffectMap.set(call,node);
 callSiteInfo = new CallSiteInfoImpl(node);
sideEffectInfo.setFunctionCall(node); }
 return node. getString ( ) + ";
 if (inExterns) { node.init(parent);
 node. setCall ( call )
sideEffectInfo.appendCallInfo(node, parent);
sideEffectInfo. call ;
 functionSideEffectMap.put(node,node);
 return node. getString ( ) + ")";
sideEffectInfo.setTaintsGlobalState(node.scope);
 node.setCallSite(node);
 node = node ; sideEffectInfo.appendCall(node);
 return node. name ( );
 if (inExterns) { sideEffectInfo.setIsPure(); return
 callSiteInfoInfo. setCallSiteInfo(node);
 functionSideEffectMap.addAll(node);
sideEffectInfo.setFunctionCallStack();
 functionSideEffectMap.put(call,node);
 functionSideEffectMap = functionSideEffect. get(node);
 callSiteInfo. addCall(node);
sideEffectInfo.appendCall(node) ; visitCall ( ) ;
 functionSideEffectMap.remove(node);
 sideEffectInfo.setIsCall;
 if (inExterns) { callSite.appendCall(node);
 node = sideEffectInfo.appendCall(node);
 callSiteInfo = callSiteInfo.appendCall(node);
sideEffectInfo.appendCall(node) ; return false ;
 if (node)
 functionSideEffectMap = functionSideEffects. get(node);
sideEffectInfo.setFunctionCallInfo();
 functionSideEffectMap.push(node);
sideEffectInfo.appendCallSiteInfo(node); }
 if (inExterns) root.appendCall(node);
 callSiteInfo. addCallSite(node);
 functionSideEffectMap[node].setCallSite(node);
sideEffectInfo.appendCallInfo(node); }
 sideEffectInfo.setFunction(nodes);
 node.call = true;
 node. setFunctionCallSite();
 return node. callSite;
 callSiteInfo = new CallSiteInformation(node);
 functionSideEffectStack.appendCall(node);
 return visitCall(node);
 functionSideEffectMap = sideEffectInfo.appendCall(node);
 node = traversal.visit(node);
 sideEffectInfo.call(node);
sideEffectInfo.appendCall(node) ; } } ;
 functionSideEffectMap.put(lhs,node);
 functionSideEffectMap [ nodeName ].appendCall(node);
 callSiteInfo. setCallSiteNode(node);
 callSiteInfoInfoInfo. setCallSite(node);
sideEffectInfo.appendCall(nodes);
sideEffectInfo.appendCall(node, parent, gramp)); }
 super. visit(node);
 node. visitCallSite();
 functionSideEffectMap.put(functionInformation,node);
 super.record(node);
sideEffectInfo.setIsCall();
 callSite. visit(node);
 functionSideEffectMap.add(node,node);
 if (inCallMode) {
 sideEffectInfo.setFunctionCalls;
 if (isCall()) {
 return node.getString());
sideEffectInfo.appendCall(node) ; return node. value ;
 node = node ; traversal.appendCall(node);
 callSiteInfoInfo. addCall(node);
sideEffectInfo.appendCall(node, gamp); }
 return functionSideEffectInfo.appendCall(node);
sideEffectInfo.appendCall(node, scope, gramp);
 node.setTaintsThis(true;
sideEffectInfo.appendCall(node, parent), gramp); }
 callSiteInfo. setCallSite(this.node);
 visitor.record(node);
 node = node. parent;
sideEffectInfo. visitCall ;
 node.setFunction(call);
 functionSideEffectMap[scope].appendCall(node);
 node. visitCall ;
 nodeTraversal.appendCall(node);
sideEffectInfo.setCallStack();
 callSiteInfo = new CallSiteInfo(node);
 traversal.add(node);
sideEffectInfo.appendCall(node), gramp);
 functionSideEffectMap.remove(node); visit(node);
 if (!call)
 recordCall(node);
 return null ; } traversal.appendCall(node);
sideEffectInfo.appendCallInfo(node);
 sideEffectInfo.record(node);
 if (inExterns parent.appendCall(node);
 if (inExterns) return ; return
 return node. parent. name;
 callSiteInfo = callSite.appendCall(node);
 callSite = sideEffectInfo.appendCall(node);
 callSiteInfoInfo. setCallSiteNode(node);
 callSiteInfo. setCallSiteFromCall(node);
 functionCallSite. add(node);
 callSiteInfo.record(node);
 visitCallSite(node);
 return functionSideEffectMap.appendCall(node);
sideEffectInfo.setCallInfo();
sideEffectInfo.appendCall(node) ; } } } ;
 callSite. add(node);
 callSite (sideEffectInfo.appendCall(node);
 call(node);
 callSiteInfo. visit(node);
 callSite. record(node);
 callSite (node).appendCall(node);
 if (!node) {
 return null ; }
 visitCallSiteInfo(node);
 functionSideEffectInfo.appendCall(node);
sideEffectInfo.appendCall(nodes, node);
sideEffectInfo.appendCallInfo();
 if (inCall) { parent.appendCall(node);
 functionInfo = functionInfo.appendCall(node);
sideEffectInfo.appendCall ( node )
sideEffectInfo.appendCall(node, false);
sideEffectInfo.appendCall(n, gramp);
 if (!node)
sideEffectInfo.appendCall(node, gramp)); }
 parent.appendCall(node);
 visitor. visit(node);
 node.setCall;
 visitor. visitCall(node);
 return null;
 node(node);
sideEffectInfo.appendCall(node) return ;
 return(node);
sideEffectInfo.appendCall(node, true);
 return node.call;
sideEffectInfo.appendCall(node) return this;
 return functionSideEffectStack.appendCall(node);
sideEffectInfo.recordCall();
sideEffectInfo.appendCall(node) return true;
 return visit(node);
sideEffectInfo.isCall();
sideEffectInfo.setFunction();
 node.isCall;
 node.setFunction;
 return node);
 this.callSiteInfo.appendCall(node);
sideEffectInfo.appendCall(node) return node;
 return - 1;
sideEffectInfo.appendCall(node, null);
sideEffectInfo.appendCall(callSite, node);
sideEffectInfo.appendCallNode();
 this. sideEffectInfo.appendCall(node);
 traverseal.appendCall(node);
 this. callSiteInfoList.appendCall(node);
 this.appendCall(node);
 functionInfo.appendCall(node);
 this.
 root.appendCall(node);
 node.appendCall(node);
sideEffectInfo.appendCall({ node }); }
 (node);
 scope.appendCall(node);
sideEffectInfo.appendCall(node, gamp);
 this.callSites.appendCall(node);
 callSite.appendCall(node);
 node = parent;
 node = null;
sideEffectInfo.markCall();
 addCall(node);
sideEffectInfo.appendCall ( ) ;
sideEffectInfo. calls ;
sideEffectInfo.appendCall(gramp);
 return null);
 reportCall(node);
sideEffectInfo.appendCall(lhs);
sideEffectInfo.appendCall(Node node);
 report(node);
sideEffectInfo = null
sideEffectInfo.appendCall(callSite);
 return "call(");
sideEffectInfo.appendCall(call); }
 return false;
 if ()
sideEffectInfo.appendCall({});
sideEffectInfo ; }
 if (...)
 log(node);
 trace(node);
 return
 return true;
sideEffectInfo.appendCall(n node);
 callStack.appendCall(node);
 void call();
 sideEffectsInfo.appendCall(node);
sideEffectInfo return ;
 sideEffectInfo().appendCall(node);
 if debug {
 if (!)
 throw node;
 sideEffectInfo._appendCall(node);
 visitFunction(node);
sideEffectInfo call ;
 call ();
 $( node);
 SideEffectInfo.appendCall(node);
 logCall(node);
 node =
sideEffectInfo.appendCall(call);
sideEffectInfo.trace();
sideEffectInfo.Call();
sideEffectInfo.set();
sideEffectInfo.appendCall(node) break;
 nodeVisitor.appendCall(node);
sideEffectInfo.appendCall(Node);
sideEffectInfo.appendCall(node) } }
sideEffectInfo.appendCall(node); return
 this =
sideEffectInfo.appendCall(node)); }
 functionCallSite.appendCall(node);
 sideEffectinfo.appendCall(node);
 *
 node &&
sideEffectInfo.appendCall(this);
