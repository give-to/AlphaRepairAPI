FunctionInformation  sideEffectInfo =
FunctionInformation sideEffectInfo  = (FunctionInformation)
 Node sideEffectInfo=
FunctionInformation sideEffectInfo  = (FunctionInformation) (Node)
FunctionInformation sideEffectInfo  = (FunctionInformation) (FunctionInformation)
FunctionInformation  info =
 return; }
 sideEffectInfo =
FunctionInformation sideEffectInfo  = this.
FunctionInformation sideEffectInfo  = (FunctionInformation) this.
FunctionInformation sideEffectInfo  = (FunctionInformationImpl)
FunctionInformation sideEffectInfo  = (FunctionInformation) NodeUtil.
 SideEffectInfo =
 visitAssignmentOrUnaryOperatorLhs( node, traversal.getScope(), node.getFirstChild()); }
FunctionInformation sideEffectInfo  = (FunctionInformation) (NodeUtil)
 visitAssignmentOrUnaryOperatorLhs(node, enclosingFunction); }
 NodeInfo sideEffectInfo =
 visitAssignmentOrUnaryOperatorLhs( node, traversal.getScope(), node.getFirstChild()); } else { final
 visitAssignmentOrUnaryOperatorLhs( node, traversal.getScope(), node.getSecondChild()); }
FunctionInformation sideEffectInfo  = (FunctionInformation) (FunctionInformationImpl)
 visitFunction(node, parent, gramp); }
FunctionInformation  info = (FunctionInformation) (FunctionInformation)
 SideEffect info=
FunctionInformation sideEffectInfo  = (Node)
FunctionInformation sideEffectInfo  = (FunctionInformation) node.getParent();
 visitAssignmentOrUnaryOperatorLhs(node, traversal.getScope(), node.getFirstChild());
FunctionInformation sideEffectInfo  = (FunctionInformation) (FunctionInformationMap)
 Node sideEffectInfo = (NodeUtil)
 visitFunction(node, parent); }
 visitAssignmentOrUnaryOperatorLhs(inclosingFunction, node.getFirstChild()); } else { return ; }
 visitAssignmentOrUnaryOperatorLhs(enclosingFunction); }
 allFunctionCalls. add(enclosingFunction); }
 visitAssignmentOrUnaryOperatorLhs(inclosingFunction, node.getFirstChild()); } else { final
 visitAssignmentOrUnaryOperatorLhs(node, traversal.getScope()); }
 visitAssignmentOrUnaryOperatorLhs(node, traversal.getScope(), node).getParent(); }
FunctionInformation Info sideEffectInfo =
 visitAssignmentOrUnaryOperatorLhs(node, traversal.getScope(), node).getParent()); }
 visitAssignmentOrUnaryOperatorLhs( node, traversal.getScope(), node.getFirstChild()); } else {
 visitAssignmentOrUnaryOperatorLhs(node, traversal.getScope(), parent); }
FunctionInformation  node = (FunctionInformation) (Node)
 visitAssignmentOrUnaryOperatorLhs(allFunctionCalls, node); }
FunctionInformation  effectInfo =
 visitAssignmentOrUnaryOperatorLhs( node, traversal.getScope(), node.getSecondChild()); } else { final
FunctionInformation Impl sideEffectInfo =
 visitAssignmentOrUnaryOperatorLhs(node, traversal.getScope(), node).return; }
 visitAssignmentOrUnaryOperatorLhs( node, traversal.getScope(), node.getParent());
 visitFunction(node, parent, null); }
FunctionInformation  node = (FunctionInformation) (FunctionInformation)
 visitAssignmentOrUnaryOperatorLhs(node, traversal); }
 visitAssignmentOrUnaryOperatorLhs( node, traversal.getScope(), node.getLastChild()); } else { final
FunctionInformation Node sideEffectInfo =
FunctionInformation sideEffectInfo  = (FunctionInformation) (Object)
 visitAssignmentOrUnaryOperatorLhs( node, traversal.getScope(), node.getFirstChild()); } final
 final NodeInfo sideEffectInfo =
FunctionInformation sideEffectInfo  = (FunctionInformation) (Info)
FunctionInformation  info = (FunctionInformation) (Node)
 functionSideEffectMap.remove(); sideEffectInfo=
 allFunctionCalls.add(node); }
 final Node sideEffectInfo =
 visitCall(allFunctionCalls, node, parent, enclosingFunction); return; }
FunctionInformation Info info = (FunctionInformationInfo) this.
 visitAssignmentOrUnaryOperatorLhs( node, traversal.getScope(), node.getFirstChild()); } } final
FunctionInformation  info = (FunctionInformation) node; info =
 visitAssignmentOrUnaryOperatorLhs( node, traversal.getScope(), node.getFirstChild );
 NodeUtil.Node sideEffectInfo=
 visitAssignmentOrUnaryOperatorLhs(node, enclosingFunction); } else { final
 Node sideEffectInfo = (FunctionInformation)
 visitAssignmentOrUnaryOperatorLhs(node, node.getFirstChild()); } else { final
 NodeUtil.SideEffect info=
FunctionInformation sideEffectInfo  = (FunctionInformation) (FunctionInfo)
 visitAssignmentOrUnaryOperatorLhs( node, traversal.getScope(), node.getChild());
 functionSideEffectMap[enclosingFunction]=
FunctionInformation sideEffectInfo  = (Function)
 visitAssignmentOrUnaryOperatorLhs( node, traversal.getScope(), node.getSecondChild()); } final
FunctionInformation sideEffectInfo  = (Info)
 visitAssignmentOrUnaryOperatorLhs(inclosingFunction, node); } else { final
 visitAssignmentOrUnaryOperatorLhs( node, traversal.getScope(), node.getFirstChild()); } }
FunctionInformation sideEffectInfo  = (FunctionInformation) (Function)
 visitAssignmentOrUnaryOperatorLhs( node, traversal.getScope(), node.getFirstChild); } final
 visitAssignmentOrUnaryOperatorLhs(allFunctionCalls, node); } else { final
FunctionInformation  map, Node sideEffectInfo =
 visitAssignmentOrUnaryOperatorLhs(allFunctionCalls, node, enclosingFunction); } final
 visitAssignmentOrUnaryOperatorLhs(enclosingFunction, node); } else { final
 visitCall (allFunctionCalls, node, parent, enclosingFunction); } else { final
 visitAssignmentOrUnaryOperatorLhs( node, traversal.getScope(), node.getParent );
 visitFunction(node, parent, visitor); }
FunctionInformation  sideEffect =
 visitAssignmentOrUnaryOperatorLhs(node, traversal.getScope(), parent); };
 Node node = enclosingFunction; SideEffect info=
 visitFunction(node, parent, false); }
FunctionInformation sideEffectInfo  = (FunctionInformation<?>)
 visitCall(node, parent, gramp); }
 Node sideEffectInfo = ( (FunctionInformation)
 visitAssignmentOrUnaryOperatorLhs(node, enclosingFunction); };
 NodeInfoInfo sideEffectInfo =
 Node sideEffectInfo = (NodeInfo)
 Node sideEffectInfo = ( (NodeInfo)
 visitAssignmentOrUnaryOperatorLhs(node, traversal.getScope()); } final
FunctionInformation  info = (FunctionInformation) this.
FunctionInformation  node = (FunctionInformation) this.
 visitAssignmentOrUnaryOperatorLhs(node, traversal.getScope(), node); } final
 visitAssignmentOrUnaryOperatorLhs(node, traversal.getScope(), parent); } final
 Node <? > sideEffectInfo =
 visitAssignmentOrUnaryOperatorLhs(allFunctionCalls, node); } final
 NodeUtil.NodeEffect info=
FunctionInformation  node sideEffectInfo =
 visitAssignmentOrUnaryOperatorLhs(allFunctionCalls, node); };
 Node node = (NodeUtil)
 visitCall(allFunctionCalls, node, parent, enclosingFunction); } final
FunctionInformation Info info = (FunctionInformationInfo) info =
 visitAssignmentOrUnaryOperatorLhs(node, enclosingFunction); } final
FunctionInformation sideEffectInfo  = (FunctionInformation) node.getParent());
FunctionInformation  < Node > sideEffectInfo =
FunctionInformation  map = (FunctionInformation) this.
 NodeUtil sideEffectInfo=
FunctionInformation sideEffectInfo  = (FunctionInformationNode)
 visitAssignmentOrUnaryOperatorLhs(enclosingFunction); };
 NodeUtil.Info sideEffectInfo=
 visitAssignmentOrUnaryOperatorLhs(inclosingFunction, node, parent); } } final
 Node node = node; SideEffectInfo =
 visitAssignmentOrUnaryOperatorLhs(node, traversal.getScope()); };
 allFunctionCalls. add ( enclosingFunction ) ; } final
 visitAssignmentOrUnaryOperatorLhs(node, traversal); };
 visitFunction(traversal, node, parent, enclosingFunction); } final
 NodeUtil.sideEffectInfo=
 visitAssignmentOrUnaryOperatorLhs(enclosingFunction, node, parent); } } final
 Node sideEffectInfo = (FunctionInfo)
 visitFunction(traversal, node, parent, gramp); } final
 visit (node, parent); }
 functionSideEffectMap.remove(); SideEffect info=
 visitFunction(node); }
 visitCall(allFunctionCalls, node, parent, enclosingFunction); return; };
 visitCall(node, parent); }
FunctionInformation  map = (FunctionInformation map)
 node =
 visitAssignmentOrUnaryOperatorLhs(node, traversal.getScope()); } }
 Node functionSideEffectInfo =
 var info =
 Node node = node; SideEffect info =
 visitAssignmentOrUnaryOperatorLhs(node, enclosingFunction); } else { }
 visitAssignmentOrUnaryOperatorLhs(allFunctionCalls, node); } } final
 final NodeInfoInfo sideEffectInfo =
 Node [ ] sideEffectInfo =
 allFunctionCalls. add ( enclosingFunction ) ; return ; }
 functionSideEffectMap[enclosingFunction=
 NodeUtil.Info effectInfo=
 allFunctionCalls. add(enclosingFunction); };
 NodeUtil.Function sideEffectInfo=
FunctionInformation  map.get(node) =
FunctionInformation  info = (FunctionInformation) (Object)
FunctionInformation  map, sideEffectInfo =
 visitFunction(node, parent, gramp); };
FunctionInformation  < Node, NodeEffectInfo >
 visitFunction(traversal, node, parent, gramp); } }
 Node node = enclosingFunction; SideEffectInfo=
 visitFunction(node, parent, enclosingFunction); } final
 allFunctionCalls. add ( enclosingFunction ) ; final
 visitCall(node, parent, enclosingFunction); } else { final
 allFunctionCalls. add ( enclosingFunction ) ; } }
 String sideEffectInfo =
 visitFunction(graph, node); }
FunctionInformation Info =
 visitFunction(node, parent, gramp); } final
 visitFunction(node, parent, allFunctionCalls); } else { final
 FunctionSideEffectInfosideEffectInfo =
FunctionInformation  info = (FunctionInformation) (Info)
 NodeInfoImpl sideEffectInfo=
 NodeNode sideEffectInfo =
 Node node = (Node)
 functionSideEffectMap.remove(); } node=
FunctionInformation  map = (FunctionInformation)
FunctionInformation  < Node, Node info =
 allFunctionCalls.add(node);
FunctionInformation sideEffectInfo  = (String)
 visitFunction(traversal, node, parent, gramp); } };
FunctionInformation  < Node, NodeInfo >
 NodeInfoNode sideEffectInfo=
 Object sideEffectInfo =
 visitFunction(node, parent, allFunctionCalls); return; } final
 Node node =
 NodeUtil.SideEffectInfo=
 functionSideEffectMap[sideEffectInfo=
 NodeUtil.NodeSideEffect info=
FunctionInformation  nodeSideEffectInfo =
 allFunctionCalls. add ( node.getFirstChild()); } final
 visitFunction(node, parent); };
 visitFunction(node, parent); } final NodesideEffectInfo =
FunctionInformation  functionInfo =
 NodeInfo node = (Node)
 functionSideEffectMap.add(); } node=
FunctionInformation  map, SideEffectInfo =
 visitFunction(node, parent, gramp); } }
 visitFunction(node, parent); } final
 NodeTraversalInfosideEffectInfo =
 visitFunction(node, parent, enclosingFunction); } } final
FunctionInformation sideEffectInfo  = FunctionInformation.
 Node node = (FunctionInformationNode)
 String info =
 visitFunction(node, parent); }; NodesideEffectInfo =
 allFunctionCalls. add ( enclosingFunction ) ; return; };
 visitCall(node, parent, enclosingFunction); } } final
 Node node = ( (FunctionNode)
 Node node = (NodeImpl)
 visitFunction(node, parent); } NodesideEffectInfo =
FunctionInformation EffectInfo =
 visitFunction(node, parent); } StringsideEffectInfo =
 NodeImpl sideEffectInfo=
FunctionInformation sideEffectInfo  = ((FunctionInformation)
 visitFunction(node, parent); NodesideEffectInfo =
 return; } final
 visitFunction(node, parent, enclosingFunction); } } };
 Node <? extends Function>sideEffectInfo =
 visitFunction(node); } final NodesideEffectInfo =
 visitCall(node, parent); } final NodesideEffectInfo =
FunctionInformation Effect info =
 visitFunction(node, parent); StringsideEffectInfo =
 Node <?,?>sideEffectInfo =
 visitFunction(node); } final
 Node <? > _sideEffectInfo =
FunctionInformation sideEffectInfo  := (FunctionInformation)
 Node[][]sideEffectInfo =
 visitFunction(node, parent); } NodeInfosideEffectInfo =
 FunctionSideEffectInfo _sideEffectInfo =
 final SideEffectInfo =
 NodeUtil.NodeInfosideEffectInfo =
 NodeInfo
 visitFunction(node, parent); }; StringsideEffectInfo =
 visitFunction(node, parent); } Node...sideEffectInfo =
 visitFunction(node, parent); } final StringsideEffectInfo =
 visitFunction(node); } NodesideEffectInfo =
 visit (node, parent); };
 visitFunction(node, parent); } }
 visitFunction(node); } StringsideEffectInfo =
 visitCall(node, parent); } NodesideEffectInfo =
 allFunctionCalls. add(node); } } final
 FunctionSideEffectInfo(sideEffectInfo =
 NodeData sideEffectInfo=
 NodeDescriptor(sideEffectInfo =
 allFunctionCalls.sort(); } final
 Node info =
 visitFunction(node); }; NodesideEffectInfo =
 visitFunction(node); } NodeInfosideEffectInfo =
 boolean info =
 NodeInfo this.sideEffectInfo =
 visitCall(node); } NodesideEffectInfo =
 visitFunction(node); } final StringsideEffectInfo =
 visitFunction(node); };
 visitCall(node); } StringsideEffectInfo =
 NodeUtil(sideEffectInfo =
 return false; } final
 visitCall(node); } final
 return; } else { final
 visitFunction(node); } }
 visitFunction(node); final
 info =
FunctionInformation SideEffectInfo =
 nodeEffectInfo =
FunctionInformation sideEffectInfo  = (FunctionInformation) *
FunctionInformation sideEffectInfo  = (FunctionInformation) -
 const info=
 visitFunction(node)); }
 Function sideEffectInfo=
FunctionInformation  nodeEffectInfo =
 effectInfo=
 continue; }
FunctionInformation sideEffectInfo , node =
EffectInfo=
 return true; } final
 return this; } final
FunctionInformation  sideEffectInfo :=
 return
 FunctionSideEffect info=
 NodeInfo>sideEffectInfo =
 NodeInfo(sideEffectInfo =
 Node effectInfo=
 var node=
 return; } static
 return; };
 return false; } }
 final NodeImplsideEffectInfo =
 FunctionNodeInfosideEffectInfo =
 function =
 return true; } }
 continue; } final
 final
 final ObjectsideEffectInfo =
 functionInfo
 final StringsideEffectInfo =
 assert
FunctionInformation  information =
FunctionInformation sideEffectInfo  = -
FunctionInformation sideEffectInfo  = =
FunctionInformation sideEffectInfo  = +
 delete
FunctionInformation sideEffectInfo  := *
 } final
 }
FunctionInformation sideEffectInfo:
FunctionInformation sideEffectInfo +=
