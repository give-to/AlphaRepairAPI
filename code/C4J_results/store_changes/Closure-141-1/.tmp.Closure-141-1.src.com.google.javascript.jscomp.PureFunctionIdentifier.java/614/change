 checkInvariant();
 checkInvariant);
 checkInvariant(); }
checkInvariant(); return taintsUnknown;
 taintsThis = true;
checkInvariant() return taintsUnknown;
 checkInvariant(); return taintsUnknown();
 checkInvariant;
 checkInvariant(); return!taintsUnknown;
 checkInvariant(taintsUnknown);
 checkInvariant(); return taintsUnknown);
checkInvariant(); return taintsUnknown; }
 checkInvariant(); functionThrows();
 return taintsUnknown;
 return!taintsUnknown;
 taintsThis =
 taintsThis = taintsUnknown;
 checkInvariant(); return false;
 checkInvariant(); return (!taintsUnknown);
checkInvariant() return taintsUnknown; }
 taintsThis;
 checkInvariant(); taintsUnknown;
 checkInvariant(); } }
checkInvariant( ) { return taintsUnknown; }
 taintsThis = true; functionThrows;
 checkInvariant(); return!taintsUnknown();
checkInvariant( ) { return taintsUnknown;
 checkInvariant(); return!(tsaints);
 checkInvariant(); taintsUnknown();
 checkInvariant(); return undefined;
 taintsThis = true; taints =
 checkVariant();
 taintsUnknown = false; taintsThis = true;
 return taintsUnknown || taintsThis;
 checkInvariant(); return setTaintsUnknown();
 taintsThis = true; taintsUnknown;
 taintsThis = true ; taintsUnknown =
 checkInvariant(); return true;
 checkInvariant(unknown);
 taintsThis = true; functionThrows();
 taintsThis = true; taintsGlobalState =
 taintsThis = true; this;
 taintsUnknown = true; taintsThis = true;
 taintsThis = true; functionThrows =
 checkInvariant(); return (taintsUnknown);
 taintsUnknown = false; taintsThis = taintsUnknown;
 checkInvariant(); return pureFunction;
 checkInvariant(); } return true ;
 checkInvariant(); return taintsUnknownFunction;
 checkInvariant(); return unknown;
 checkInvariant(); } return function ;
 checkInvariant(); return (!tsaints);
 checkInvariant(); return!taintsUnknown);
checkInvariant(); return! taintsUnknown ; }
 checkInvariant(); return setFunctionThrows();
 checkInvariant(); return taintsUnknownFunction();
 checkInvariant(); return functionThrows();
 checkInvariant(); return strictFunction;
 return taintsUnknown ; } else { taintsUnknown = false;
 taintsThis = false; taints =
 setFunctionThrows() { return taintsUnknown;
 checkInvariant(taintsGlobalState);
 taintsThis = true; taintsGlobalState;
 taintsUnknown = false; taintsThis = false;
 return false;
 checkInvariant(); return setTaintsUnknown);
 taintsThis = false; this;
checkInvariant(); return taintsUnknown || taintsThis;
 taintsThis = false; taintsGlobalState =
checkInvariant() { return taintsUnknown || taintsUnknown;
 checkInvariant(false);
 checkInvariant(functionThrows();
 checkInvariant(null);
checkInvariant() { return taintsUnknown || taintsThis;
 checkCallsInFunctionBody();
checkInvariant() ; return taintsUnknown || taintsUnknown;
checkInvariant(); } return pureFunction ;
checkInvariant(); return!! taintsUnknown ;
checkInvariant( ) { return!taintsUnknown; }
 taintsThis = true; taints;
 checkInvariant(taintsUnknown();
 checkInvariant(); return!TaintsUnknown;
 taintsGlobalState =
 checkInvariant(); return!unknown;
 checkInvariant(); } functionThrows();
checkInvariant(); return taintsUnknown || pureFunction ;
 return! ( taintsUnknown || taintsUnknown )? taintsUnknown : taintsUnknown;
 taintsThis = true; taintsGlobalState = true;
checkInvariant(); return! ( taintsUnknown ) ;
 }
checkInvariant( ) { return!taintsUnknown;
 checkInvariant() }
 checkInvariant(TaintsUnknown);
 taintsThis = true; taintsThrows =
 checkInvariant(complexFunction);
 checkInvariant({ taintsUnknown);
checkInvariant( functionThrows || taintsUnknown);
 return taintsUnknown || taintsUnknown ; } else { taintsUnknown = false;
 taintsThis = -1;
 return taintsUnknown ; } else { taintsUnknown = false ; taintsUnknown =
 checkInvariant(functionThrows);
checkInvariant( functionThrows || taintsUnknown); }
 checkInvariant(taintUnknown);
checkInvariant( taintsUnknown); }
checkInvariant() return false;
 checkInvariant(); return taintUnknown();
checkInvariant(); } else { taintsUnknown = false ;
 return taintsUnknown || taintsUnknown ; } else { taintsUnknown =
checkInvariant() return! taintsUnknown;
 checkInvariant(true);
 return taintsUnknown || pureFunction;
checkInvariant() return taintsUnknown || taintsThis;
 taintsThis = true; checkVariant();
 return! ( taintsUnknown || taintsUnknown )? taintsUnknown : false;
checkInvariant(); return!! taintsUnknown ; }
 return! ( taintsUnknown || taintsUnknown )? taintsUnknown : true;
 taintsThis = false; taints;
 return! ( taintsUnknown || taintsUnknown )? taintsUnknown : taints;
checkInvariant() return taintsUnknown || taintsUnknown;
 setTaintsThis() { taintsThis = true; taints;
 taintsUnknown = false; taintsThis = false; }
 checkInvariant(); return!(unknown);
 return! taintsUnknown ; } else { taintsUnknown = false ; return! taintsUnknown ; } else { taintsUnknown =
 return! ( taintsUnknown )? taintsUnknown : taintsUnknown + taintsUnknown;
checkInvariant(); } return taintsUnknown ;
 taintsThis = false;
 setTaintsThis() { taintsThis = true; taints }
 return taintsUnknown ; } else { taintsUnknown = false ; taintsThis = taintsUnknown ;
 checkInvariant(); return notUnknown;
checkInvariant() } return pureFunction ;
 return taintsUnknown ; } else { taintsUnknown = false ; taintsUnknown = true ; taintsUnknown =
 return taintsUnknown ; } else { taintsUnknown = false ; taintsGlobalState =
 taintsGlobalState;
 setTaintsThis() { taintsThis = true; } }
 setTaintsThis() { taintsThis = true; };
 taintsThis = { };
checkInvariant( ) { return taintsUnknown; } }
 setTaintsThis() { taintsThis = true; taints =
 return taintsUnknown ; } else { taintsThis = taintsUnknown;
checkInvariant() } return taintsUnknown ;
 checkInvariant(); return!pureFunction;
 checkInvariant(); return (pureFunction);
 return taintsUnknown || taintsUnknown || taintsUnknown = false;
 return taintsUnknown ; } else { taintsUnknown = false ; taintsUnknown = true ; functionThrows =
 return!(taintsUnknown;
 return! taintsUnknown ; } else { taintsUnknown = false ; return! taintsUnknown ; } else { taintsUnknown =!
 return taintsUnknown ; } else { taintsUnknown = false ; taintsThis = true ; taintsUnknown =
 checkInvariant(unknownFunction);
 return taintsUnknown ; } else { taintsUnknown = false ; } } else { taintsUnknown = false ; taintsUnknown =
 return taintsUnknown || taintsGlobalState;
 taintsUnknown = false; taintsThis = true; }
 return taintsUnknown ; } else { taintsUnknown = false ; taintsUnknown = true ; taintsThis =
 return taintsUnknown ; } else { taintsUnknown = false ; } } else { taintsUnknown = true ; taintsUnknown =
 return! taintsUnknown ; } else { taintsUnknown = false ; return taintsUnknown ; } else { taintsUnknown =
 return taintsUnknown ; } else { taintsUnknown = taintsUnknown;
 checkInvariant(); return toString();
checkInvariant() { return taintsUnknown || pureFunction;
checkInvariant() return! taintsUnknown ; }
 return taintsUnknown ; } else { taintsUnknown = false ; } } else { taintsUnknown = false ; return taintsUnknown;
 return taintsUnknown ; } else { taintsUnknown = false ; } } else { taintsUnknown = true ; return taintsUnknown;
 return taintsUnknown ; } else { taintsUnknown = false ; taintsUnknown = true ; taintsGlobalState =
 return taintsUnknown ; } else { taintsUnknown = false ; } else { taints = true;
 checkInvariant('complex');
 return taintsUnknown ; } else { taintsUnknown = false ; taintsUnknown =!
 return taintsUnknown || taintsUnknown ; } else { taints = true;
 return! ( taintsUnknown || taintsUnknown )? taintsUnknown : taintsUnknown ||
 setTaintsThis() { taintsThis = true; taints();
 return taintsUnknown || taintsUnknown || taintsUnknown && taintsUnknown &&
 return taintsUnknown || taintsUnknown || taintsUnknown && taintsUnknown;
 return taintsUnknown ; } else { taintsUnknown = false ; } functionThrows = true;
 return taintsUnknown ; } else { taintsUnknown = false ; taintsUnknown = true ; taintsThis =!
 checkInvariant(_);
 checkInvariant(...);
checkInvariant( ) { return taintsUnknown ; } } ;
 return taintsUnknown ; } else { taintsUnknown = false ; } } else { taintsUnknown = true ; taintsThis =
 return taintsUnknown ; } else { taintsUnknown = false ; } } else { taintsUnknown = false ; taintsThis =
 checkInvariant().trace();
 return taintsUnknown ; } else { taintsUnknown = false ; } else { taintsUnknown =!
 return! ( taintsUnknown || taintsUnknown )? taintsUnknown : taintsThis;
 taintThis = true;
 return taintsUnknownFunction;
checkInvariant() ; return taintsUnknown || false ;
 return taintsUnknown || taintsUnknown ; } else { taints = false;
checkInvariant() return undefined;
 return taintsUnknown || taintsUnknown || taintsUnknown && taintsUnknown ||
 check(true);
 return!setTaintsUnknown;
 taintsUnknown = false; taintsThis = false; return
 return taintsUnknown ; } else { taintsUnknown = false ; } } else { taintsUnknown = false ; return false;
 checkInvariant(); return isPure();
 taintsThis = true; }
 return taintsUnknown ; } else { taintsUnknown = false ; taintsThis = true; return
 return! taintsUnknown ; } else { taintsUnknown = false ; return! taintsUnknown ; } else { return!
 checkInvariantInFunctionBody();
 checkUnexpectedSideEffects();
 checkInvariant(traceFunction);
 return taintsUnknown ; } else { taintsUnknown = false ; taintsUnknown = void
 taintsUnknown = false; taintsThis = false; *
 taintsThis = true; this =
 return taintsUnknown ; } else { taintsUnknown = false ; taintsUnknown = true ; taintsThis = void
 return ;
 return undefined;
 taintsOther = true;
checkInvariant() return unknown;
checkInvariant() ; return taintsUnknown ; } }
 checkInvariant('complex')();
 return taintsUnknown ; } else { taintsUnknown = false ; taintsUnknown = true ; taintsThis = *
 return taintsUnknown ; } else { taintsUnknown = false ; taintsUnknown = true ; taintsThis = false
 checkInvariantComplexity();
 checkInvariant (!);
 return taintsGlobalState;
 return taintsUnknown ; } else { taintsUnknown = false ; taintsUnknown = false
 return taintsUnknown ; } else { taintsUnknown = false ; } } else { taintsUnknown = false ; } return
 return taintsUnknown ; } else { taintsUnknown = false ; taintsUnknown = true ; } { return
 return taintsUnknown ; } else { taintsUnknown = false ; taintsUnknown = taintsUnknown ; } return
 return taintsUnknown || taintsFatal;
 return taintsUnknown ; } else { taintsUnknown = false ; } } else { taintsUnknown = false ; } }
 return taintsUnknown ; } else { taintsUnknown = false ; } } else { taintsUnknown = false ; } } else
 checkInvariant(this);
 return taintsUnknown ; } else { taintsUnknown = false ; } } else { taintsUnknown = true ; } return
 checkInvariant('complex'));
 return taintsUnknown ; } else { taintsUnknown = false ; } } else { taintsUnknown = true ; } } else
 return! taintsUnknown ; } else { taintsUnknown = false ; return! taintsUnknown ; } } else { return
 checkUnusedSideEffects();
 return taintsUnknown ; } else { taintsUnknown = false ; taintsThis = true; }
 return taintsUnknown ; } else { taintsUnknown = false ; } } else { taintsUnknown = false ; } } void
 taintsThis();
 checkInvariant(?);
 taintsThis = true; return
 return taintsUnknown ; } else { taintsUnknown = false ; taintsUnknown = true ; } } void
 checkInvariant(();
checkInvariant( { taintsUnknown: true });
checkInvariant() return tsUnknown;
 taintsThis = true; *
 check invariant();
 taintsThrows =
 checkErrors();
 return taintsUnknown ; } else { taintsUnknown = false ; taintsUnknown = taintsUnknown ; }
 return taintsUnknown ; } else { taintsUnknown = false ; taintsThis = taintsUnknown ; }
checkInvariant( taintsUnknown = false );
 return taintsUnknown ; } else { taintsUnknown = false ; taintsUnknown = true ; } } return
 checkComplexTaintsUnknown();
checkInvariant() return taintsUnknown; } }
 check(false);
checkInvariant() } return function ;
checkInvariant( taintsUnknown = true);
 checkInvariantComplex();
checkInvariant() && taintsUnknown;
 checkInvariant() } }
 check(unknown);
checkInvariant() return strictFunction;
checkInvariant() } return true ;
 checkInvariantComplexFunction();
checkInvariant() return taints;
checkInvariant() return taintsUnknown();
 taintsThis =;
 taintsThis() {
 checkInvariant(...)
 functionThrows();
 functionThrows;
 checkInvariant()); }
checkInvariant() return null;
 return unknown;
checkInvariant() return true;
 return true;
 checkInvari();
 return tsUnknown;
 checkUnexceptible();
 checkUnexcepted();
 return strictFunction;
 return null;
 return taints;
 checkCallsInFunction();
 checkComplexSideEffects();
 taints =
 checkMean();
 check(null);
 false;
 checkComplexTaintsKnown();
 check(Unknown);
 checkUnknown();
 getInvariant();
checkInvariant(Unknown);
 return!unknown;
 return taintUnknown;
 } }
 setInvariant();
 unknown =
 return traceable;
 checkParanoia();
 assertInvariant();
 checkContinant();
 traceUnknown =
 setFunctionThrows;
 getTaintsUnknown;
 taints;
 setInvariant);
 checkTracked();
checkInvariant(tanUnknown);
 checkVariant);
 (false);
 checkError();
checkInvariant() return ;
checkInvariant(traceUnknown);
checkInvariant(unknowns);
 return taintsUnknown);
 unknown;
 checkException();
checkInvariant() } ;
 checkState();
 unknownFunction =
 taints();
 (null);
 getTaintsUnknown);
 (unknown);
 checkInternal();
 checkUnknown);
 unknown ;
 check();
 return
 getTaintsUnknown();
 } void
 } else
checkInvariant() return false
 *
 }
