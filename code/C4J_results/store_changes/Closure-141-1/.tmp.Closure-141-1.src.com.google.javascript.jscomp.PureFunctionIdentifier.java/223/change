Collection<Definition>  defs =
Collection defs =
Collection<Definition>
Collection<Definition>  defs = GraphReachability.
Collection<FunctionInformation> defs =
 defs =
Collection<Definition> definitions =
Collection<FunctionInformation, Node> defs =
 List <Definition> defs =
Collection < CallableDefinition> defs =
 <Definition> defs =
Collection<Definition>  defs = FunctionInformation.
 if (callee!= null) {
Collection<Definition> defs = this.
Collection<FunctionInformation, CallableDefinition> defs =
 CallableDefinitionSetdefs =
 if (callee == null) { continue; }
Collection definitions =
Collection<Definition>  defs = GraphReachabilityHelper.
Collection < CallableDefinitions> defs =
 if (callSite == null) { continue; }
Collection<FunctionInformation, Definition> defs =
Collection<Definition>  defs = GraphReachabilityUtils.
 if ( callee == null ) { continue ; } if ( callee!= null ) {
 CallableDefinition defs=
Collection<FunctionInformation, Node> defs = this.
 if (callee == null) { continue };
Collection < CallableDefinitionNode> defs =
 if ( callee == null ) { throw new IllegalArgumentException ( ) ; }
Collection < CallableDefinition > defs = this.
 CallableDefinitions defs =
Collection<FunctionInformation, Callable> defs =
 Definition defs=
 CallableDefinitionSet defs = FunctionInformation.
 if ( callee == null ) { return null ; } if ( callee!= null ) {
Collection<Definition, FunctionInformation> defs =
Collection < CallableDefinitionInfo> defs =
 DefinitionSet defs =
Collection<FunctionDefinition> defs =
 FunctionDefinition defs = GraphReachability.
Collection<FunctionInformation, FunctionInformation> defs =
 CallableDefinitions defs = FunctionInformation.
 if (callee!= null) { <Definition> defs =
 if ( callee == null ) { throw new IllegalArgumentException ( "null" ) }
 if ( callee == null ) { continue }
 if ( callee == null ) { continue ; } if ( callSite!= null ) {
 if (callSite!= null) {
Collection<Definition def =
 if (callee!= null) { Set<Definition> defs =
 if (callee) {
 if (callee!= null) { DefinitionSetdefs =
Collection<FunctionInformation, Definition> defs = this.
Collection < CallableDefinition defs =
 if (callSite!= null) { DefinitionSetdefs =
Collection<Definition, FunctionInformation, Callable> defs =
 if (callee == null) continue;
Collection<Definition>  defs = GraphReachabilityService.
 if ( callee == null ) { return null ; } if ( callSite!= null ) {
 if ( callee == null ) { return null ; } if (callee) {
 if (callee!= null) { List<Definition> defs =
Collection <? extends Definition > defs =
Collection<FunctionInformation> defs = this.
 Node defs = GraphReachability.
Collection<Definition>  defs = GraphReachabilityTools.
 if ( callee == null ) { return null ; } if (callSite) {
 if ( callee == null ) { continue ; } if (callee) {
 if (callSite == null) { continue };
 if ( callee == null ) { throw new IllegalArgumentException ( "Missing call site." ) ; }
Collection<Definition definitions =
 if (callSite!= null) { Set<Definition> defs =
 if ( callee == null ) { return null ; } if (debug) {
Collection<Definition>  defs = GraphReachabilityUtil.
 if (callSite!= null) { <Definition> defs =
 Node defs = GraphReachabilityHelper.
 Set<Definition> defs =
 CallableDefinitionSet defs = this.
 if ( callee == null ) { throw new IllegalArgumentException ( "Missing call site" ) ; }
 if ( callee == null ) { return null ; } if (trace) {
 Node defs = GraphReachabilityUtils.
 if ( callee == null ) { continue ; } if ( callee. isCallable ( ) ) { continue ; }
Collection < DefinitionInformation > defs =
Collection<FunctionInformation, Node> defs = Functions.
Collection<Definition> def =
Collection<Definition>  defs = GraphReachable.
 if (callSite!= null) { List<Definition> defs =
Collection < Definition defs =
Collection<Definition, FunctionInformation, Node> defs =
Collection<FunctionInformation> definitionDefs =
 CallableDefinitions defs = this.
Collection < CallableDefinitions defs =
 if ( callee == null ) { return null ; } if ( callee. isCallable ( ) ) { continue ; }
 if ( callee == null ) { throw new IllegalArgumentException ( "Call site missing." ) ; }
 if ( callee == null ) { throw new IllegalArgumentException ( "Missing call site call site." ) ; }
Collection<Definition, FunctionInformation> defs = this.
Collection<Node> defs =
 if (callee == null) {
Collection<Definition def>
 if (callee == null) { break; }
 if ( callee == null ) { throw new IllegalArgumentException ( "Missing call site information." ) ; }
Collection<Definition>  defs = NodeUtil.
 Node defs = [ ] ; defs |=
Collection < Declaration> defs =
 CallableDefinitionSet defs = GraphReachable.
 FunctionDefinition defs = GraphReachabilityHelper.
 CallableDefinitions<FunctionInformation, Node> defs =
 if (callee!= null) { Definition> defs =
 if (callSite == null) { DefinitionSetdefs =
 Node defs = GraphReachabilityService.
 Node defs = GraphReachabilityUtil.
 Node defs = [ ] ; defs &=
 DefinitionSet defs = FunctionInformation.
Collection<Function> defs =
 if (callSite!= null) { Definition> defs =
 FunctionDefinition defs = FunctionInformation.
 if (callSite == null) { <Definition> defs =
Collection<Definition>  defs = GraphReachabilityUtility.
Collection<Definition, Callable> defs =
 CallableDefinitionSet < Callable > defs=
 CallableDefinitionSet < Node > defs=
 if (callSite == null) { continue }
 if (callee!= null) { Definition[]defs =
Collection<Definition> defs = Functions.
Collection<Definition, Node> defs =
 CallableDefinitions < Callable > defs=
 CallableDefinitions defs = Functions.
 List < CallableDefinition> defs=
Collection<Definition> defs = CallSite.
CollectionOfDefs =
 if ( callee == null ) { continue ; } if ( callee. isFunction ) { continue }
 DefinitionSet defs = this.
 CallableDefinitions defs = GraphReachable.
 Node defs =
 if (callSite!= null) { Definition[]defs =
 CallableDefinitions<FunctionInformation, CallSite> defs =
 if ( callee == null ) { return ; } if ( callee. isFunction ( ) ) { return ; } } } else {
 Definitions defs =
CollectionOfDefinition defs =
 Node defs [ 0 ] ; defs=
Collection<Definition>  defs = GraphReachability().
Collection<Definition> defs  = (Collection<Definition>) this.
 definitions =
Collection ofDefs =
Collection<Callable> defs =
 Node defs = null ; defs &=
Collection<FunctionInformation> defs = Functions.
Collection of defs =
Collection<Definition>  defs = FlowReachability.
 if (callSite) {
 if ( callee == null ) { throw new IllegalArgumentException ( "null" ) ;
 FunctionDefinition defs = this.
 if (callee) { Set<Definition> defs =
 if (callee!= null) { Iterable<Definition> defs =
 if (callee) { List<Definition> defs =
 Node defs = null ; defs |=
 if ( callee == null ) { return null ; } if ( callee. isFunction ) { return null ; } else {
Collection ofDefinitions =
 if ( callee == null ) { return null ; } } } else {
Collection<Definition>  defs = (Definition[])
 if (callee!= null) {defs =
Collection<Definition, Node> defs = this.
 if (callSite!= null) { Iterable<Definition> defs =
 if (callSite!= null) {defs =
 if ( callee == null ) { continue ; } if ( callee. isFunction ) { continue ;
Collection<Definition>  defs = GraphRepresentability.
 if (callSite == null) { Definition> defs =
 Node [ ] defs ; defs=
Collection<Definition>  defs = functionInfo.
Collection<Definition>  defs = (DefinitionSet)
Collection<Definition> definitionDefs =
 if ( callee == null ) { throw new IllegalArgumentException ( "Missing call site." ) ; };
 CallableDefinitions<FunctionInformation, FunctionDefinition> defs =
 if ( callee == null ) { throw new IllegalArgumentException ( ) ; };
Collection<Definition> defs  = (Collection<Definition>) Functions.
 if ( callee == null ) { throw new IllegalArgumentException ( "Missing call site" ) ; };
Collection<Definition> defs  = new ArrayList<Definition>(); def =
 if (callSite) { Set<Definition> defs =
 if ( callee == null ) { throw new IllegalArgumentException ( "Missing call site call site." ) ; };
Collection<Definition>  defs = FunctionHelper.
 if (!callee) {
 if (callSite) { List<Definition> defs =
Collection<Definition>  defs = Context.
 if ( callee == null ) { return null ; } if ( callee!= null ) { return null ; } } }
 if ( callee == null ) { return null ; } if ( callee!= null ) }
 if ( callee == null ) { continue ; } if ( callee!= null ) }
Collection def =
 if ( callee == null ) { continue ; } if ( callee. isFunction ) { continue };
Collection<FunctionInformation defs =
 if ( callee == null ) { continue ; } if ( callee!= null ) ;
 if ( callee == null ) { throw new IllegalArgumentException ( "Missing call site information." ) ; };
 if (!callee) continue;
 if ( callee == null ) { return null ; } if ( callee. isCallSite ) { continue ; } }
 Defs =
Collection<Definition> defs  = getDefinitions(callSite); definitions =
 NodeList defs =
 if (callee) { <Definition> defs =
 if ( callee == null ) { return null ; } if ( callee. isCallSite ) { return null ; } } }
 if ( callee == null ) { return null ; } if ( callee. isCallable ( ) ) { continue ; } }
 if ( callee == null ) { continue ; } if ( callSite!= null ) }
 if (callSite == null) continue<Definition> defs =
 if ( callee == null ) { return null ; } if ( callee. isCallSite ) { return null ; } }
 Node defs [ ] ; defs=
 if (callee!= null) { final Set<Definition> defs =
 if ( callee == null ) { return null ; } if ( callee. isCallSite ( ) ) { continue ; } }
Collection<Def> defs =
 if ( callee == null ) { continue ; } if ( callee. isFunction ) { continue;}
 if (callee!= null) { final List<Definition> defs =
 if ( callee == null ) { return null ; } if ( callee. isFunction ) { return null ; } } }
 if ( callee == null ) { continue ; } if ( callee. isCallable ( ) ) { continue ; };
 FunctionDefinitionSet defs =
 if ( callee == null ) { continue ; } if ( callee. isCallSite ) { continue ; } } }
 NodeDefinitions < Node > defs=
Collection<Definition> defs  = List<Definition> defs; def =
 Node [ ] defs=
 if ( callee == null ) { throw new IllegalArgumentException ( "Missing call site" ) ; } final
 if (callSite!= null) { final Set<Definition> defs =
 if ( callee == null ) { return null ; } if ( callee. isCallable ( ) ) { continue ; };
 if (callSite) { <Definition> defs =
 if ( callee == null ) { return null ; } if ( callee. isCallable ( ) ) { return ; } }
 NodeDefinitions<FunctionInformation>defs =
 if ( callee == null ) { continue ; } if ( callee!= null ) { return ; } } }
 if ( callee == null ) { throw new IllegalArgumentException ( "Call site not found." ) ; } final
Collection<Definition> defs  = getDefinitions(functionInfo); definitions =
 FunctionDefinition defs = FunctionInfo.
 if ( callee == null ) { return null ; } if ( callee. isFunction ) { return null ; } } } }
 if ( callee == null ) { return null ; } if ( callee!= null ) { final
 CallableDefinitions<FunctionInformation,Definition> defs =
 if ( callee == null ) { return null ; } if ( callee!= null ) { }
 if ( callee == null ) { return null ; } else {
 NodeSet < Definition> defs=
 if ( callee == null ) { return null ; } if ( callee. isCallable ( ) ) { final
 if ( callee == null ) { return ; } if ( callee. isFunction ( ) ) { return ; } } else { }
 if ( callee == null ) { throw new IllegalArgumentException ( "Missing call site call site." ) } }
 if ( callee == null ) { continue ; } if ( callee instanceof CallSite ) { final
Collection<Definition> defs[] =
 if ( callee == null ) { return null ; } if ( callee. isFunction ( ) ) { final
Collection<Definition> defs  = Collection<FunctionInformation, FunctionInformation>
 if ( callee == null ) { return ; } if ( callee == null ) { return ; } if ( isPure ) { }
 CallableDefinitions>defs =
 if ( callee == null ) { return ; } if ( callee instanceof CallSite ) { return ; } } } else { }
 CallableDefinition[] defs=
 if ( callee == null ) { return ; } if ( callee == null ) { return ; } if ( isPure ) { final
 if (callee) { Iterable<Definition> defs =
 if ( callee == null ) { continue ; } if ( callee!= null ) { } }
 CallableDefinitions[] defs=
 List defs =
 if ( callee == null ) { continue ; } if ( callee instanceof Name ) { }
 if (callee == null) { continue; } final
 if ( callee == null ) { continue ; } if ( callee instanceof Name ) { final
 if (callSite) { Iterable<Definition> defs =
 final List < CallableDefinition> defs =
 NodeDefinitions<FunctionInformation, Node> defs =
 if (callSite == null) { continue; } final
 if ( callee == null ) { return null ; } if (debug) {}
 CallableDefinitionSet[] defs=
 if ( callee == null ) { return null ; } if (callSite) {}
Collection<Definition> definitions = this.
 FunctionDefinition setdefs =
Collection < CallableDefinition defs>
 if (! callee instanceof CallSite ) { continue ; } }
 if (callee == null) { continue; } }
 FunctionDefinition setDefs =
 CallableDefinitions defdefs =
 if (callSite == null) { continue; } }
 final List < CallableDefinitions> defs =
 CallableDefinitionSet>defs =
 DeclarationSet defs=
Collection<FunctionInformation, Node> defs = *
 if (! callee instanceof CallSite ) { break ; } }
 if (null) { List<Definition> defs =
 if (null) { Set<Definition> defs =
 if (! callee instanceof CallSite ) { continue ; } } }
 if (callee!= null) { final
 FunctionInformation[] defs=
 if (callee) { final Set<Definition> defs =
 if ( callee == null ) { return null ; } else { final
 if ( callee == null ) { return null ; } else { }
Collection<Node defs =
 if (callSite == null) {defs =
 if (callee) { Collection<Definition> defs =
 Definition def =
 if (callee!= null) { Listdefs =
 if ( callee == null ) { return null ; } } }
 if (callee) { final List<Definition> defs =
 CallableDefinition set defs=
 if ( callee == null ) { continue ; } } }
Collection<Defs>
 if (callee == null) continue();
 final List < FunctionInformation> defs =
 final List < CallableDefinitionNode> defs =
Collection < CallableDefinition> defs = this ->
 Node [ ] defs[]=
Collection<FunctionInformation> defs = *
 final Set < CallableDefinition> defs =
 if (callSite) { final Set<Definition> defs =
 if (callSite!= null) { Listdefs =
Collection < CallableDefinitions defs>
 if ( callee == null ) { return null ; } }
Collection < CallableDefinition> defs = *
 Definition[] defs=
 List < CallableDefinitions> defs =
 if ( callee == null ) { return null ; } } else { }
 if (null == callee) {defs =
 final Set < CallableDefinitions> defs =
 if ( callee == null ) { return null ; } } } { }
 if ( callee == null ) { return null ; } } } else }
Collection<Definition definitions>
Collection<Definition defs>
 final List < CallableDefinitionInformation> defs =
 if (callSite!= null) { final
 Definition setDefs =
 if ( callee == null ) { continue ; } else { }
 if ( callee == null ) { continue ; } else { final
 if (callee == null) { continue; } } final
 final List < CallableDefinitionInfo> defs =
Collection < Definition > =
 final List < Definition> defs =
 if (!null) { Set<Definition> defs =
 if (callee)
 CallableDefinitionDefs=
 Iterable<Definition> defs =
 Node[][]defs =
 CallableDefinitionListdefs =
 List < FunctionInformation> defs =
 if ( callee == null ) { continue; } } } {
Collection<Definition> defs  = new ArrayList<Definition>(); def :=
 if (!callee) continue
 final Collection < CallableDefinition> defs =
 Node def = null; DefinitionSetdefs =
 DefinitionDefs =
 Definition definitions =
 List < CallableDefinitionNode> defs =
 if (callee) { final
 if (!callee)
 if (callSite)
 final Set<FunctionInformation> defs =
Collections =
 if (null) {
 Node [ ] defs, _=
 Definitions =
Collection<Definition>> defs =
 if (true) {
Collection<Definition> defs = *
 final List < CallableFunctionDefinition> defs =
 final Iterable<Definition> defs =
 final List < CallDefinition> defs =
 if (callSite) { final
 final Set<Definition> defs =
Collection<FunctionInformation> defs :=
 CallableDefdefs =
 DefinitionSet defs = *
 final Set < CallableFunctionDefinition> defs =
 ArrayList<Definition> defs =
 if (!complete) { Set<Definition> defs =
 final List < FunctionDefinition> defs =
Collection<Node>
 if (callee) { Listdefs =
 final Set <? extends FunctionDefinition> defs =
 if (!callee) continue();
 final List < CallableNodeDefinition> defs =
 if (callSite) { Listdefs =
 final Collection < CallableFunctionDefinition> defs =
 Node def = null; Definition[]defs =
Collection<Definition>(defs =
 final ArrayList<Definition> defs =
 final Iterable < FunctionDefinition> defs =
Collection<Def>
 final LinkedHashSet<Definition> defs =
 final ArrayList<FunctionDefinition> defs =
 Definitions def=
 DefinitionSet>defs =
 final DiGraph<Definition> defs =
 final Set < FunctionDefinition> defs =
 final ImmutableListSet<Definition> defs =
 final ImmutableList<Definition> defs =
 def =
CollectionDefs =
Collection d =
 final ImmutableBiSet<Definition> defs =
Collection definition =
 final ImmutableSet<Definition> defs =
 final List<FunctionInformation<Definition> defs =
 <Def> defs =
 Definitions definitions=
 <Node> defs =
 final LinkedList<Definition> defs =
 final ImmutableSetIF<Definition> defs =
 final Deque<Definition> defs =
 <Function> defs =
Collection<Definition>  defects =
Collection<Definition>  declarations =
 final NodeSet<Definition> defs =
Collection<Definition>  defs :=
Collection<Definition>  defines =
Collection<Function>
 final List < Node<Definition> defs =
 Node...defs =
 final ImmutableCollection<Definition> defs =
 final Collection<Definition> defs =
Collection.<Definition> defs =
 Definitions.
Collection<Definition> defs  = =
Collection<Definition> defs ; =
 try { final
Collection<Definition> defs  = -
 Iterator<Definition> defs =
 try: { final
 try: final
 try... final
 } } }
 final
 } }
 { final
 } final
Collection<Definition>, defs =
CollectionOfDefinition> defs =
Collection<Definition> defs:
Collection<Definition> defs +=
