FunctionInformation  functionInfo =
 Node functionInfo=
FunctionInformation functionInfo  = (FunctionInformation)
 functionInfo=
FunctionInformation functionInfo  = (Function)
FunctionInformation functionInfo  = def; functionInfo =
FunctionInformation functionInfo  = def; Node functionInfo =
 Node<FunctionInformation>functionInfo =
FunctionInformation functionInfo  = def.getFInfo(); dep =
FunctionInformation functionInfo  = def.getFunctionInfo();
 if (def.isPure()) { FunctionInformationfunctionInfo =
 Node functionInfo = def; Node functionInfo=
FunctionInformation functionInfo  = def.getFunctionInfo(); dep =
FunctionInformation  info =
FunctionInformation functionInfo  = def.getRInfo(); dep =
 hasSideEffects = true ; if (hasSideEffects) {
FunctionInformation functionInfo  = def.getRValue(); functionInfo =
FunctionInformation functionInfo  = def.getFunctionInfo(); functionInfo =
FunctionInformation functionInfo  = def.getFunctionInformation(); dep =
FunctionInformation  defInfo = def; functionInfo =
 hasSideEffects = true ; } if (hasSideEffects) {
 hasSideEffects = true ; if (def.isPure()) {
 if (def.isPure()) { NodefunctionInfo =
 hasSideEffects = true ; if (hasSideEffects)
FunctionInformation functionInfo  = def.getRInfo(); functionInfo =
 if (def.isPure()) {
FunctionInformation functionInfo  = def.getFunction(); dep =
 Node defValue();
 if (def.isCall(callNode) && def.mayHaveSideEffects()) { hasSideEffects = true ; break; }
 hasSideEffects = true ; } else { if (hasSideEffects) {
FunctionInformation  defValue = defValue; functionInfo =
FunctionInformation functionInfo  = def.getRValue(); dep =
 hasSideEffects = true ; } if (hasSideEffects)
 if (def.isNew(callNode) && def.mayHaveSideEffects()) { hasSideEffects = true ; break; }
FunctionInformation functionInfo  = def.getFunctionInformation(); functionInfo =
 hasSideEffects = true ; if (def instanceof Function) {
 def.setIsNoSideEffectsCall();
 if (def.isCall(callNode) && def.mayHaveSideEffects()) { hasSideEffects = true ; break ; } }
 hasSideEffects = true ; if (def!= null) {
 Node functionInfo = def; functionInfo=
 if (def.isPure()) {functionInfo =
 if (def.isCall(callNode) && def.mayHaveSideEffects()) { hasSideEffects = true ; } }
 hasSideEffects = true ; if (def) {
 Node functionInfo = def; Function functionInfo=
 Node defNode = defNode; functionInfo=
 if (def.isCall(callNode) && def.isNew(callNode)) { hasSideEffects = true ; break; }
 if (def.isCall(callNode) && def.mayHaveSideEffects()) { hasSideEffects = true ; break;
 Node callNode = def;
FunctionInformation  defValue = def; functionInfo =
FunctionInformation  defValue; functionInfo =
 hasSideEffects = true ; } if (hasSideEffects) { final
 def.setIsNoSideEffectsCall(); }
 Node callNode = callNode; Node functionInfo=
 if (hasSideEffects) {
FunctionInformation  defInfo = def; Node functionInfo =
 Node defNode = def; functionInfo=
 hasSideEffects = true ; break ; } if (def) {
 hasSideEffects = true ; if (def.mayHaveSideEffects()) { continue; }
 Node functionInfo = def; FunctionInformation functionInfo=
FunctionInformation  defValue; Node functionInfo =
FunctionInformation functionInfo  = def.getFunction; dep =
FunctionInformation functionInfo  = def.getFunctionInformation();
 hasSideEffects = true ; if (def.isNoSideEffectsCall()) continue;
 hasSideEffects = true ; if (def.mayBePure()) { continue; }
 hasSideEffects = true ; break; }
 if (def!= null) { FunctionInformationfunctionInfo =
 hasSideEffects = true ; } if (def) {
FunctionInformation  defInfo = (Function)
 hasSideEffects = true ; if (def.isNoSideEffectsCall()) break;
FunctionInformation functionInfo  = def; Node callNode =
 hasSideEffects = (def.isNew(callNode) && def.mayHaveSideEffects()) || hasSideEffects;
FunctionInformation  defInfo = def.getInfo(); dep =
 FunctionInfo =
FunctionInformation functionInfo  = def.getFunction(name);
FunctionInformation functionInfo  = def.getFunctionInfo(); Function dep =
 hasSideEffects = true ; if (def.mayHaveSideEffects()) { break; }
 hasSideEffects = true ; if (def. isPureFunction ( ) ) {
 if (def!= null) { NodefunctionInfo =
FunctionInformation  dep; functionInfo =
 hasSideEffects = true ; if (def. isPureFunctionCall()) {
 hasSideEffects = true ; } if (! hasSideEffects ) { return ; } if (hasSideEffects) {
 Node callNode = callNode;
 hasSideEffects = true ; if (def.mayHaveSideEffects()) continue;
 def.setIsPure(true);
 hasSideEffects = true ; if (def.mayHaveSideEffects()) break;
 if (def.isPure()) continue;
 Node functionInfo = (FunctionInformation)
 Node defNode = defNode; Function functionInfo=
 Node defNode = defNode; Node functionInfo=
 hasSideEffects = true ; if (def.mayBePure()) { break; }
 Node<Function>functionInfo =
 hasSideEffects = (def.isNew(callNode) && def.mayHaveSideEffects() || hasSideEffects);
 def.setIsNoSideEffectsCall(true);
 hasSideEffects = true ; } if (! hasSideEffects ) { return ; } if (hasSideEffects)
 hasSideEffects = true ; if (def.pure) {
FunctionInformation  defInfo = def.getFunction(); dep =
 if (hasSideEffects)
 functionInfo
 hasSideEffects = true ; } if (! hasSideEffects ) { continue ; } if (hasSideEffects) {
 hasSideEffects = true ; } if (! hasSideEffects ) { callNode. setIsPure ( ) ;
 Node defValue;
 Node functionInfo = (Node)
 hasSideEffects = true ; } if (! hasSideEffects ) { break ; } if (hasSideEffects) {
 Node defValue = def; functionInfo =
 if (def.mayBePure()) continue;
 hasSideEffects = true ; } if (! hasSideEffects ) { break ; } if (hasSideEffects)
 if (def!= null) functionInfo =
 if (def) { functionInfo =
FunctionInformation functionInfo  = def.getFunctionInfo() ||
 hasSideEffects = true ; if (def.isPure() { continue };
 hasSideEffects = true ; if (def.mayBePure()) { if (hasSideEffects)
 hasSideEffects = true ; } if (! hasSideEffects ) { continue ; } if (hasSideEffects)
 def.setIsPure(); }
 hasSideEffects = true ; if (def.mayHaveSideEffects()) { if (hasSideEffects)
 if (def instanceof Function) { NodefunctionInfo =
 hasSideEffects = (def.isNew(callNode) && def.mayHaveSideEffects()) || hasSideEffects();
 Node callNode = def.getCallNode();functionInfo =
 hasSideEffects = true ; if (def. isPure ( ) ) { if (hasSideEffects) {
 if (hasSideEffects) { NodefunctionInfo =
 hasSideEffects = true ; if (def.mayHaveSideEffects()) { final
FunctionInformation  defInfo = (FunctionInformation)
 Node callNode = def.callNode;functionInfo =
 hasSideEffects = true ; if (def. mayHaveSideEffects()) { if (hasSideEffects) {
 hasSideEffects = true ; if (def.isPure() { final
 hasSideEffects = true ; } if (! hasSideEffects ) { return ; } if (defs) {
 hasSideEffects = true ; if (def.mayBePure()) { break; } }
 hasSideEffects = true ; if (def.mayHaveSideEffects()) { break; } }
 hasSideEffects = true ; def. markPure(); }
 hasSideEffects = true ; if (def.mayBePure()) { continue; } }
 hasSideEffects = true ; if (def.mayHaveSideEffects()) { }
FunctionInformation functionInfo  = def.
 hasSideEffects = true ; if (def.isPure()) { final
 def.setIsPure(false);
 hasSideEffects = true ; if (def.mayHaveSideEffects()) { continue; } }
 if (def!= null) {functionInfo =
 hasSideEffects = true ; if (def. mayHaveSideEffects ) { if (hasSideEffects) {
 Node def = def;
 if (def.isPure()) break;
 hasSideEffects = true ; if (def.isNoSideEffectsCall()) { continue };
 hasSideEffects = (def.isNew(callNode) && def.mayHaveSideEffects() || hasSideEffects;
 if (def) { Node functionInfo=
 hasSideEffects = true ; if (def.isPure() { }
 if (def == null) { FunctionInformationfunctionInfo =
 hasSideEffects = true ; if (def.mayHaveSideEffects()) { if (def) {
 if (hasSideEffects) {functionInfo =
 Node defValue = defValue; functionInfo
FunctionInformation  defValue = def; dep =
 hasSideEffects = true ; if (def.mayBePure()) { if (hasSideEffects){
 hasSideEffects = true ; if (def.mayBePure()) { if (def) {
 Node callNode = def.callNode(); NodefunctionInfo =
 NodeUtil.Function functionInfo=
 Node defValue; Node functionInfo =
FunctionInformation functionInfo  = def; FunctionInfo =
FunctionInformation  defValue = defValue; functionInfo
 if (def!= null) {
 FunctionInformation _functionInfo =
 hasSideEffects = true ; if (def. mayBePure()) { if (hasSideEffects) { final
FunctionInformation  defValue = (Function)
 FunctionInformation def; functionInfo=
 hasSideEffects = true ; if (def.mayHaveSideEffects()) { continue; } final
 if (def) {
 hasSideEffects = true ; def. markPure();
 Node<Definition>functionInfo =
 if (def).isPure()) {functionInfo =
 FunctionInformation depFunctionInfo =
 hasSideEffects = true ; if (def.mayBePure()) { if (hasSideEffects))
 Node defNode; functionInfo =
 hasSideEffects = true ; if (def.mayHaveSideEffects()) { if (hasSideEffects))
 Node callNode = name;
 hasSideEffects = true ; if (def.mayHaveSideEffects()) { if (hasSideEffects);
 hasSideEffects = true ; if (def.mayHaveSideEffects()) { break; } } else {
 Node defNode = def;
 if (def instanceof Function) {functionInfo =
 hasSideEffects = true ; if (def.mayHaveSideEffects()) { break; } final
 Node defNode = def; NodefunctionInfo =
FunctionInformation functionInfo  = def); functionInfo =
 Node(callNode);
 hasSideEffects = true ; if (def.mayBePure()) { if (hasSideEffects);
 FunctionInformation defFunctionInfo =
 if (def.isPure())
 CallInformation defValue = def.functionInfo =
 FunctionInformation defValue = def.functionInfo =
FunctionInformation  defValue = def &&
 hasSideEffects = true ; break; } final
 Node defNode ; Node functionInfo=
FunctionInformation functionInfo  = def &&
 FunctionInformation dep functionInfo =
 defValue };
FunctionInformation functionInfo  = def; Function info =
 NodeInfo<FunctionInformation>functionInfo =
 FunctionInformation(functionInfo =
 Node defNode();
 Node callNode = def.callNode(); FunctionfunctionInfo =
 Node defValue(); FunctionInfo =
 FunctionInformation node functionInfo =
 Node defNode;
 NodeInformation functionInfo =
 NodeUtil.Node functionInfo=
FunctionInformation  defValue = def.
 Node defNode = def; functionInfo
 def.setIsNoSideEffectsCall(); };
 NodeUtil. functionInfo=
FunctionInformation functionInfo  = ((FunctionInformation)
 def.setIsNoSideEffectsCall(); } final
 Node functionInfo; Function functionInfo=
 FunctionInformation
 Node.<FunctionInformation>functionInfo =
 Node callNode;
 CallInformation <FunctionInformation>functionInfo =
 NodeUtil functionInfo=
 FunctionInformation *functionInfo=
 NodeUtil(functionInfo=
 NodeInfo functionInfo =
 Node <FunctionInformation> _functionInfo =
 Node<FunctionInfo>functionInfo =
 Node[][]functionInfo =
 functionInformation functionInfo =
 Node information functionInfo =
 defValue();
 Function functionInfo =
 def.setIsPure(); } final
 Node defNode; }
FunctionInformation functionInfo  = dep =
FunctionInformation functionInfo  := (FunctionInformation)
 defValue }
 Function info =
 defValue;
FunctionInformation functionInfo  = (Definition)
 NodeDescriptor>functionInfo =
FunctionInformation functionInfo  = ()
 FunctionInformation functionInfo,=
FunctionInformation functionInfo ; functionInfo =
FunctionInformation functionInfo  = (function)
 Node(Function)functionInfo =
 functionInformation
 FunctionInformation <functionInfo =
 defValue;}
 CallInformation functionInfo=
FunctionInformation functionInfo  = {FunctionInformation}
FunctionInformation  function =
FunctionInformation  dep =
 FunctionFunctionInfo =
 function info =
 Function informationInfo =
FunctionInformation  func =
 final FunctionInformationfunctionInfo =
 NodeInfo _functionInfo =
 delete
 Node
FunctionInformation  fn =
 info =
 def =
 assert
 final
 node functionInfo=
 Module functionInfo=
 Node definitionInfo=
 continue;
FunctionInformation  defInfo =
FunctionInformation  functionInfo :=
FunctionInformation  funcInfo =
FunctionInformation functionInfo  = *
 continue };
FunctionInformation functionInfo  = &
FunctionInformation functionInfo  = +
 FunctionInfofunctionInfo =
 ModuleInformationfunctionInfo =
 continue }
 continue;}
 }
FunctionInformation functionInfo +=
FunctionInformation functionInfo:
