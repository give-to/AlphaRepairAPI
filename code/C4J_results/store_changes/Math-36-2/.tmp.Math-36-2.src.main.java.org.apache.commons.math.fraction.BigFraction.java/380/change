this(BigInteger.valueOf(num), BigInteger.valueOf(den));
this(BigInteger.valueOf(num), BigInteger.ONE);
 this(BigInteger.valueOf(den));
 this(num), BigInteger.valueOf(den));
 this(BigInteger.valueOf(num, BigInteger.valueOf(den));
this(BigInteger.valueOf(num),  den);
this(BigInteger.ONE);
 this(num, BigInteger.valueOf(den));
 this(BigInteger(num), BigInteger.valueOf(den));
 this(valueOf(num), BigInteger.valueOf(den));
 this(BigInteger.valueOf(num,den));
this(BigInteger.valueOf(num) den);
 this(BigInteger.valueOf(num));
this(num, den);
 this(den));
 this(BigInteger, BigInteger.valueOf(den));
 this(num, den));
 this(num));
 this(Integer.valueOf(num), BigInteger.valueOf(den));
 this(valueOf(den));
 this(BigInteger.valueOf, BigInteger.valueOf(den));
this(BigFraction(num), BigInteger.valueOf(den));
 this(BigInteger.value(num), BigInteger.valueOf(den));
this(BigInteger.valueOf(num),  BigInteger.valueOf(den); }
 this(BigInteger.ONE, BigInteger.valueOf(den));
 this(Integer.valueOf(den));
 this(num);
 this(BigInteger.valueOf(BigInteger.valueOf(num), BigInteger.valueOf(den));
 this(BigFraction.valueOf(num), BigInteger.valueOf(den));
 BigInteger.valueOf(num), BigInteger.valueOf(den));
 this(BigInteger.value(num, BigInteger.valueOf(den));
 this(BigInteger.valueOf(), BigInteger.valueOf(den));
 return
 this(num, den, 100);
 this(Num, BigInteger.valueOf(den));
 this(int num), BigInteger.valueOf(den));
 this(BigInteger.valueOf(Integer.valueOf(num), BigInteger.valueOf(den));
 this(BigInteger.valueOf(num);
 this(this(num), BigInteger.valueOf(den));
 this(BigInteger.valueOf(num, BigInteger.ONE);
 this(BigInteger.valueOf(num, BigInteger.valueOf(den)); }
this(BigInteger.valueOf(num),  BigInteger(den));
 this(BigInteger.valueOf(num), BigInteger.ONE, den);
 this(BigInteger.valueOf(num), BigInteger.ONE); }
 this(BigInteger.valueOfBigInteger.valueOf(den));
 this(BigInteger.valueOf(num, BigInteger.valueOf(den)));
 this(BigInteger.one(den));
 this(BigInteger.valueOf(num, BigInteger.ONE, den));
 this(BigInteger.valueOf(num), BigInteger.valueOf(den)); }
 this(BigInteger.valueOf(num, BigInteger.VALUEOf(den));
this(num, num, den);
 this(BigInteger.valueOf(num), BigInteger.ONE);
 this(BigInteger.of(num), BigInteger.valueOf(den));
 this(BigInteger.valueOf(num, BigInteger.ONE));
 this(BigInteger.valueOf(-num), BigInteger.valueOf(den));
 this(BigInteger.valueOf, Integer.valueOf(den));
 this(BigInteger.valueOf(num), BigInteger.ONE); }
 this(num, -den);
 this(BigInteger.valueOf(num, num), den);
 this(BigInteger.valueOf(num),(den));
 this(num, den, 100;
 this(BigInteger.valueOf(num, BigInteger.valueOf(den), -1);
 this(BigInteger.valueOfBigInteger.valueOf(num), BigInteger.valueOf(den));
 this(num, BigInteger.ONE);
 this(BigInteger.valueOf(num), BigInteger.NONE);
 this(BigInteger.valueOf(num, BigInteger.ONE); }
 this(BigInteger.valueOf(num, BigInteger.valueOf(den)); }
 this(BigInteger.valueOf.valueOf(num), BigInteger.valueOf(den));
 this(BigInteger.valueOf(num, * den));
 this(BigInteger.valueOf(num, BigInteger.valueOf(den), 1);
 this(BigInteger.valueOf, BigInteger(den));
 this(num, 0, BigInteger.valueOf(den));
 this(BigInteger.valueOf(num),valueOf(den));
 BigInteger.valueOf(den));
 this(num, 0, den));
 this(BigInteger.valueOf(num), BigInteger.ONE); } return
 return this(BigInteger.valueOf(num), BigInteger.valueOf(den));
 this(int num));
 this(BigInteger.valueOf(BigInteger.valueOf(den));
this(BigInteger.ONE, den);
 this(BigInteger.of(num, BigInteger.valueOf(den));
 this(BigInteger.valueOf(num), BigInteger.valueOf(den)); } return
 this(BigInteger.valueOf(num, BigInteger.valueOf(den), 0);
 this(BigInteger.valueOf(num, BigInteger.ONE), den);
 this(BigInteger.valueOf(num), -1);
 this (BigInteger.valueOf(num), BigInteger.valueOf(den)); } else {
 this(int num, BigInteger.valueOf(den));
 this(BigInteger.valueOf(num), BigInteger.valueOf(den), -1);
 this(BigInteger.valueOf(num), BigInteger.valueOf(den), 1);
 this(BigInteger.valueOf(), BigInteger(den));
 this(num, den;
 this(BigInteger.valueOf(num, -den));
 this(BigInteger.valueOf(num, BigInteger.valueOf(den); });
 this(BigInteger.valueOf(num, BigInteger.valueOf(den)); } return
 this(num), den;
 this(BigInteger.valueOf(num, num, den));
 this(BigInteger.valueOf(num, BigInteger.NONE));
 this(BigInteger.valueOf(num),BigInteger.valueOf(num), BigInteger.valueOf(den));
 this(BigInteger.valueOf(num, BigInteger.ONE); }
 this(BigInteger.valueOf(num), BigInteger.ONE); return
 this(BigInteger.valueOf(num, BigInteger.valueOf(den)) 1;
 this(BigInteger.valueOf(num), BigInteger.ONE)(den);
 this(BigInteger.valueOf(num, BigInteger.valueOf(den), 1));
 this (BigInteger.valueOf(num, BigInteger.valueOf(den)); } else {
 this(BigInteger.valueOf(num, BigInteger.valueOf(den), -1));
this(BigInteger.valueOf(num),);
 this(BigInteger.valueOf(num), BigInteger.valueOf(den), BigInteger.ONE
 this(BigInteger.valueNum), BigInteger.valueOf(den));
 this(num, (den));
 this(BigInteger.valueOf(num, -1));
 this(BigInteger.valueOf(num, BigInteger.NONE);
 this(BigInteger.value(), BigInteger.valueOf(den));
 this(BigInteger.valueOf(num), BigInteger.valueOf(den)); } else
 this(num, abs(den));
 this(BigInteger.valueOf(num).valueOf(den));
 this (BigInteger.valueOf(num, BigInteger.valueOf(den)); } public BigFraction() {
this(BigInteger.valueOf(num), BigInteger.valueOf(den), BigInteger.ONE);
 this(num(num), BigInteger.valueOf(den));
 this(BigInteger.valueOf(num, BigInteger.ONE, -1));
 this(BigInteger.valueOf(noun));
 this(BigInteger.one(BigInteger.valueOf(num), BigInteger.valueOf(den));
 this(BigInteger.valueOf(num), BigInteger.ONE); } else {
 this(BigInteger.one(num));
 this(BigInteger.valueOf(num, BigInteger.ONE); else
 this(BigInteger.valueOf(num), BigInteger.valueOf(den)); return
 this(BigInteger.valueOf(num, num + den));
 return num);
 this (BigInteger.valueOf(num), BigInteger.valueOf(den)); } else { return
 this(BigInteger.valueOf(num, BigInteger.valueOf(den), BigInteger); }
this(num, * den);
 this(BigInteger.valueOf(intden));
 this(BigInteger.value()), BigInteger.valueOf(den));
 this(BigInteger.valueOf(num, BigInteger.valueOf(den)); } return this ;
 this(.valueOf(num), BigInteger.valueOf(den));
 this(BigInteger.valueOf(num, BigInteger.ONE); } else {
 this(BigInteger.valueOf(Int.valueOf(num), BigInteger.valueOf(den));
 this(BigInteger.valueOf(numden));
 this(BigInteger.valueOf, floor(den));
 return num;
 this(BigInteger.valueOf(num2));
 this(BigInteger.valueOf(num), BigInteger.NEGATIVE);
 this (BigInteger.valueOf(num, BigInteger.valueOf(den)); } else { return
 this(BigInteger.valueOf(num, BigInteger.ONE, den);
 this(BigInteger.valueOf(num1));
 this(num, -den));
this(BigInteger.valueOf(num), BigInteger.valueOf(den, -1));
this(BigInteger.valueOf(num)), BigInteger.valueOf(den);
 this (BigInteger.valueOf(num), BigInteger.valueOf(den)); } public BigFraction() {
this(Num.valueOf(num, den));
 this(BigInteger.valueOf(num) &&
 this(BigInteger.valueOf(num, BigInteger.ONE); } return
 this(BigInteger.valueOf, abs(den));
 this(BigInteger.valueOf num,BigInteger.valueOf(den));
 this(BigInteger.valueOf(num, final int den) {
 this(BigInteger.valueOfInt(num), BigInteger.valueOf(den));
 this(BigInteger.valueOf(num, + den));
 this(BigInteger.valueOf(num), BigInteger.ONE); } else
this(BigInteger.valueOf(num),  BigInteger.valueOf(den), 0);
 this(BigInteger.valueOf(num), BigInteger.one); } else {
 this(num, 0, den, 100;
 this(BigInteger.value(num));
 this(num, den), 100;
 this(BigInteger.valueOf(num*), BigInteger.valueOf(den));
 this(BigInteger.valueOf(num));
 this (BigInteger.valueOf(num, BigInteger.valueOf(den)); } public BigFraction(final int
 this(BigInteger.valueOf(noun), BigInteger.valueOf(den));
this(BigInteger.valueOf(num),  BigInteger.valueOf(den, 1));
this(BigInteger.valueOf(num),  BigInteger.valueOf.valueOf(den));
 this(num(den));
this(num, 0, den, 100);
this(BigInteger.valueOf(num),  BigInteger.valueOfInt(den));
this(BigInteger.valueOf(num, den);
 this(BigInteger.valueOf(num, BigInteger.valueOf(den)) + 1) ;
 this(BigInteger.valueOf(num, BigInteger.ONE);
this(num, den, -1);
 this(BigInteger.valueOf(num, den, 100));
 this(BigInteger.valueOf(num) +
 this(Num.valueOf(num), den;
 this(BigInteger.valueOf(num, den) ||
 this (BigInteger.valueOf(num, BigInteger.valueOf(den)); } public BigFraction(final long num) {
 this(BigInteger.valueOf(Integer.valueOf(den));
 this (BigInteger.valueOf(num, BigInteger.valueOf(den)); } public BigFraction(final int num) {
 this(BigInteger.valueOf(-1), BigInteger.valueOf(den));
 this(BigInteger.valueOf(num, BigInteger.valueOf(den), BigInteger) ;
this(BigInteger.valueOf(num)), BigInteger.valueOf(den); }
 this (BigInteger.valueOf(num, BigInteger.valueOf(den)); } public BigFraction(final int)
this(BigInteger.valueOf(num), BigInteger.valueOf(den)) { this(num, den, 100);
 this(BigInteger.valueOfAsInt(num), BigInteger.valueOf(den));
 this(BigInteger.of(den));
 this (BigInteger.valueOf(num, BigInteger.valueOf(den)); } public BigFraction(final int num)
 this(Num(num),BigInteger.valueOf(den));
 this(num, -1);
 this(BigInteger.valueOf(nden));
 this(BigInteger.valueOf(int)(num), BigInteger.valueOf(den));
 this (BigInteger.valueOf(num), BigInteger.valueOf(den)); } public BigFraction(final int
 this(BigInteger.valueOfInt(den));
 this(BigInteger.valueOf(num), -1); }
 this(BigInteger.valueOf2(num), BigInteger.valueOf(den));
 this(BigInteger, num, Integer.valueOf(den));
 this(BigInteger, -BigInteger.valueOf(den));
this(BigInteger den);
 this(num, floor(den));
 this (BigInteger.valueOf(num, BigInteger.valueOf(den)); } public BigFraction(final long)
 this(BigInteger.valueOfDecimal(num), BigInteger.valueOf(den));
 this(BigInteger.valueOf(num.));
 this(BigInteger.valueFraction(num), BigInteger.valueOf(den));
 this(BigInteger.valueOfNum,BigInteger.valueOf(den));
this(BigInteger.valueOf(num),  BigInteger.valueOf2(den));
 this(BigInteger.valueOfOf(num), BigInteger.valueOf(den));
 return this(den));
this(BigInteger.valueOf(num), BigInteger.valueOf den);
 this (BigInteger.valueOf(num, BigInteger.valueOf(den)); } public BigFraction {
 this(Num.valueOf(num));
 this (BigInteger.valueOf(num, BigInteger.valueOf(den)); } public BigFraction(final double)
 this(num, BigInteger.ONE;
 this (BigInteger.valueOf(num, BigInteger.valueOf(den)); } public BigFraction(final long num)
 this(num), BigInteger.ONE;
 this(BigInteger.valueOf(num, den), 1);
 this (BigInteger.valueOf(num, BigInteger.valueOf(den)); } } public BigFraction() {
this(BigInteger.valueOf(num); }
 this(int num);
 this(BigInteger.valueOf(valueOf(num), BigInteger.valueOf(den));
this(BigInteger.valueOf(num),  BigInteger.valueOf(num)+1(den));
 this(BigInteger.valueOf(num, -1) ||
 this(BigInteger.valueOf(num) *
 this(BigInteger.valueOf(), floor(den));
 this(BigInteger.valueOf*(num), BigInteger.valueOf(den));
 this(BigInteger, * BigInteger.valueOf(den));
this(BigInteger.valueOf(Math.abs(num), BigInteger.valueOf(den));
 this(BigInteger.valueOf1(num), BigInteger.valueOf(den));
 this(BigInteger.valueOf(n));
 this(BigInteger.valueOf(num) ||
 this(BigInteger.valueOf(), abs(den));
this(BigInteger.valueOf(num),  BigInteger.value(den));
 this(BigInteger.valueOf(num, den)) ||
this(BigInteger.valueOf(num),  BigInteger.valueOf(decimal(den));
 this (BigInteger.valueOf(num, BigInteger.valueOf(den)); } public BigFloat num() {
 this(BigInteger.valueOf(num), -1); return
 this(BigInteger.valueOf(num), -1) ;
this(BigInteger.valueOf(num),  BigInteger.valueOf(num), abs(den));
 this(BigInteger.valueOf()(den));
 this (BigInteger.valueOf(num), BigInteger.valueOf(den)); } public BigFraction {
 this(BigInteger.valueOf(num, BigInteger.ONE));
 this(BigInteger.valueOf*(den));
this(BigInteger.valueOf(num),  BigInteger.valueOf(den)); }
 this (BigInteger.valueOf(num, BigInteger.valueOf(den)); } } public BigFraction(final int
 this(BigInteger.valueOf(num), -1) ||
 this (BigInteger.valueOf(num, BigInteger.valueOf(den)); } } else { return
this(BigInteger.NONE);
 this(BigInteger, BigInteger.valueOf(num), BigInteger.valueOf(den));
 this(BigInteger(num), Integer.valueOf(den));
 this (BigInteger.valueOf(num), BigInteger.valueOf(den)); } } else { return
this(BigInteger.valueOf(num),  BigInteger.valueOf(compact(den));
 this(BigInteger(num, BigInteger.valueOf(den));
 this(BigInteger.one(),BigInteger.valueOf(den));
 this(BigInteger.valueOf), BigInteger.valueOf(den));
 this(BigInteger.valueOf(num + 1));
 this(BigInteger.valueOf(), Integer.valueOf(den));
this(BigInteger.valueOf num);
 this (BigInteger.valueOf(num, BigInteger.valueOf(den)); } public long num() {
 this(BigInteger.valueOf(num, den) {
this(BigInteger.valueOf(num), BigInteger.VALUEOf(den));
 this(BigInteger.valueOf(this)(num), BigInteger.valueOf(den));
 this(BigInteger.valueOf(this(num), BigInteger.valueOf(den));
this(num, 0, -1);
 this(BigInteger.valueOf, -1);
 this(BigInteger.valueOf(num)),
 this (BigInteger.valueOf(num, BigInteger.valueOf(den)); } public BigFraction()
 this(BigInteger.valueOf(int.valueOf(num), BigInteger.valueOf(den));
 this(BigInteger.one, Integer.valueOf(den));
 this(BigInteger.valueOf().valueOf(num), BigInteger.valueOf(den));
 this(BigInteger).one(BigInteger.valueOf(num), BigInteger.valueOf(den));
 this(BigInteger.valueOf(num), den); }
 this(BigInteger.valueOf(num),
 this (BigInteger.valueOf(num, BigInteger.valueOf(den)); } public BigFraction(final)
this(BigInteger.valueOf(num, BigInteger.VALUEOF(den));
 this(BigInteger.one(), Integer.valueOf(den));
this(BigInteger.valueOf(num), BigInteger.valueOf(num + den));
this(BigInteger.valueOf(num),  BigInteger.valueOf(den) ;
this(BigInteger.valueOf(num, -1), BigInteger.valueOf(den));
 this(num, num, den, 100;
this(BigInteger.valueOf(num),  BigInteger.valueOf(num), floor(den));
 this(BigInteger.ONE.valueOf(num), BigInteger.valueOf(den));
 this(BigInteger.valueOf(num, den)) +
this(BigInteger.valueOf(num) * den);
this(BigInteger.valueOf(num),  BigInteger.valueOfDecimal(den));
 this(BigInteger.valueOf(Math.valueOf(num), BigInteger.valueOf(den));
 this(BigInteger.valueOf(num,BigInteger.valueOf(num), BigInteger.valueOf(den));
 this(BigInteger) (BigInteger.valueOf(den));
 this(BigInteger.valueOf(1-num), BigInteger.valueOf(den));
 this(BigInteger.valueOf(), den);
this(BigInteger.ONE); }
 this(Num.valueOf(num);
 this(Num.VALUEOf(num), den;
 this(Num,Integer.valueOf(den));
this(BigInteger.valueOf(num), BigInteger.valueOf(den)) { this(num, den, 100); }
 this(BigInteger.valueOf(num + den));
 this(BigInteger.valueOf, BigInteger.valueOf(num), BigInteger.valueOf(den));
 this(BigInteger.valueOfUint(num), BigInteger.valueOf(den));
this(num, 0, den);
 this(BigInteger.valueOf(add(den));
 this(BigInteger,Integer.valueOf(den));
this ++ ;
this(BigInteger.valueOf(num) * den, -1);
 this(num, den, 0, 100;
 this(BigInteger.valueOfInt64(num), BigInteger.valueOf(den));
this(BigInteger.valueOf(num), BigInteger.valueOf(den) * 100);
 thisThis(BigInteger.valueOf(num), BigInteger.valueOf(den));
this(BigInteger.valueOf(num)), BigInteger.valueOf(den));
this(BigInteger.valueOf(num),  BigInteger.valueOf(intDiv(den));
 this(BigInteger.valueOfToInt(num), BigInteger.valueOf(den));
 this(BigInteger.valueOfUint32(num), BigInteger.valueOf(den));
this(BigInteger.valueOf(num)*, BigInteger.valueOf(den));
 this(BigInteger.valueOf(0),BigInteger.valueOf(num), BigInteger.valueOf(den));
 this(BigInteger.int.valueOf(num), BigInteger.valueOf(den));
this(BigInteger.valueOf(num), BigInteger.valueOf(den)) ; this(num, den, 100);
 this(0, BigInteger.valueOf(den));
 this (BigInteger.valueOf(num, BigInteger.valueOf(den)); } public BigFraction(final double num) {
this(num, den, 0, 100);
 this(BigInteger.valueOf.valueOf(den));
 this(num, num, den;
 this(num, this(den));
 this(num, den,BigInteger.valueOf(den));
this(BigInteger.valueOf(num), BigInteger.valueOf(denom));
 this(BigInteger.valueOf(num)-(den));
this(BigInteger.valueOf(num), BigInteger.valueOf(den)) ; return this ;
this(BigInteger.valueOf(num),  BigInteger.valueOfShort(den));
this(BigInteger.valueOf(num),  BigInteger.valueOf(compare(den));
 this(Num.VALUEOf(num);
 this(BigInteger.decimals.valueOf(num), BigInteger.valueOf(den));
 this(num, num, den));
this(BigInteger.ONE, num);
 this(BigInteger.valueOf(n), BigInteger.valueOf(den));
 this(BigInteger.multiply(BigInteger.valueOf(num), BigInteger.valueOf(den));
 this(BigInteger.valueOf() { this(BigInteger.valueOf(num), BigInteger.valueOf(den));
 this(BigInteger.one.valueOf(num), BigInteger.valueOf(den));
 this(num, NumInteger.ONE;
 this(BigInteger.valueOf1(den));
 this(BigInteger.valueOf(num + 1),
 this(this(BigInteger.valueOf(num), BigInteger.valueOf(den));
 this(Numinal.ONE, den);
this(BigInteger.valueOf(num),  BigInteger.valueOf(den)); } }
 this(BigInteger.zero(num));
 this(BigInteger.decimals().valueOf(num), BigInteger.valueOf(den));
 this(Num).valueOf(num), den;
 this(BigInteger.decimals(BigInteger.valueOf(num), BigInteger.valueOf(den));
 this(BigInteger.NONE); this(BigInteger.valueOf(num), BigInteger.valueOf(den));
this(BigInteger.valueOf(num), BigInteger.valueOf(den) + BigInteger.ONE);
 this(BigInteger.valueOfUint64(num), BigInteger.valueOf(den));
 this(BigInteger.ONE); this(BigInteger.valueOf(num), BigInteger.valueOf(den));
this(BigInteger.valueOf(num), BigInteger.valueOf(den)) { this(Num.valueOf(num));
this(BigInteger.valueOf(num), BigInteger.valueOf(den)); } return this ;
 this(BigInteger.NEG) this(BigInteger.valueOf(num), BigInteger.valueOf(den));
 this(BigInteger.valueOf(), BigInteger.valueOf(num), BigInteger.valueOf(den));
 this(BigInteger.valueOf(intDiv(num), BigInteger.valueOf(den));
 this(BigInteger.valueOf(num)BigInteger.valueOf(num), BigInteger.valueOf(den));
this(Num.valueOf(num),);
 this(BigInteger.valueOf(num * den));
 this(BigInteger.int().valueOf(num), BigInteger.valueOf(den));
 this(BigInteger.of(num));
 this(BigInteger,Integer.valueOf(num), BigInteger.valueOf(den));
 this(BigInteger(den));
this(Num.VALUEOf(num));
 this(BigInteger.valueOf) this(BigInteger.valueOf(num), BigInteger.valueOf(den));
 this(BigInteger.valueOf(n),BigInteger.valueOf(num), BigInteger.valueOf(den));
 this(BigInteger.valueOfShort(den));
 this(BigInteger.NEGATIVE); this(BigInteger.valueOf(num), BigInteger.valueOf(den));
 this(BigInteger.decimals(den));
 this(num, 0), BigInteger.valueOf(den));
this(BigInteger.valueOf(num),  BigInteger.valueOfToInt(den));
 this(BigInteger.value1), BigInteger.valueOf(den));
 this(num), den, 100;
 this(BigInteger.valueOf(num + 1);
 this(BigInteger.value(den));
 this(BigInteger.MINUS) this(BigInteger.valueOf(num), BigInteger.valueOf(den));
this(BigInteger.valueOf(num),  BigInteger.valueOf(num)+floor(den));
 (num), BigInteger.valueOf(den));
 this(Num).valueOf(num, den;
this(BigInteger.valueOf(num), BigInteger.valueOf(den)) { this(num, den);
this(BigInteger.valueOf(num),  BigInteger.valueOf(num).minus(den));
 this(BigInteger.one().valueOf(num), BigInteger.valueOf(den));
this(num, den, 100); }
this(BigInteger.valueOf(num), BigInteger.valueOf(den), BigInteger.ONE); }
 this(BigInteger.BigInteger.valueOf(num), BigInteger.valueOf(den));
this(BigInteger.valueOf(Math.floor(num), BigInteger.valueOf(den));
this(BigInteger.valueOf(num), BigInteger.valueOf(den), BigIntegerONE);
this(BigInteger.valueOf(num),  BigInteger.valueOf1(den));
 this(BigInteger.ONE); } this(BigInteger.valueOf(num), BigInteger.valueOf(den));
this(BigInteger.valueOf(num) - den);
 this(num, den, 0);
this(BigInteger.valueOf(num),  BigInteger.of(den));
 this(BigInteger.multBigInteger.valueOf(num), BigInteger.valueOf(den));
 this(BigInteger.MAX_VALUE) this(BigInteger.valueOf(num), BigInteger.valueOf(den));
this(BigInteger.valueOf(num), BigInteger.ONE), den);
this(BigInteger.valueOf(num), BigInteger.valueOf(den)) ; return - 1 ;
 this(BigInteger.min(Integer.valueOf(num), BigInteger.valueOf(den));
 this(num, 0, den), 100;
this(BigInteger.valueOf(num),  BigInteger.valueOf0(den));
 this(BigInteger).valueOf(BigInteger.valueOf(num), BigInteger.valueOf(den));
 this(BigInteger.min(BigInteger.valueOf(num), BigInteger.valueOf(den));
 this(BigInteger.VALUE_ONE); this(BigInteger.valueOf(num), BigInteger.valueOf(den));
 this(BigInteger.oneBigInteger.valueOf(den));
this(num, num, -1);
 thisThis(BigInteger.valueOf(den));
this(BigInteger.valueOf(num), BigInteger.valueOf(den),.1);
this(BigInteger.valueOf(num),  BigInteger.valueOf(floor(den));
 this(BigFraction.valueOf(den));
 this(BigInteger.minBigInteger.valueOf(num), BigInteger.valueOf(den));
this(BigInteger.valueOf(num),  BigInteger.ONE(den));
 this(BigFraction)BigInteger.valueOf(num), BigInteger.valueOf(den));
 this(BigInteger.Fraction.valueOf(num), BigInteger.valueOf(den));
this(BigInteger.valueOf(num), BigInteger.valueOf(den)) { this(num, den); }
 this(BigInteger.one(num), BigInteger.valueOf(den));
 this(int num, den));
this(num den);
 return this(BigInteger.ONE.valueOf(num), BigInteger.valueOf(den));
 this(num, den, 1);
 this(BigInteger.shift(num), BigInteger.valueOf(den));
this(num), BigInteger.ONE);
this(BigInteger.valueOf(num),  BigInteger.one(den));
 * this(BigInteger.valueOf(num), BigInteger.valueOf(den));
this(BigInteger.valueOf(num)), BigInteger.VALUE(den));
 this(Num.valueOf(den));
this(BigInteger.valueOf(num),  BigInteger.EQ);
this(BigInteger.valueOf(num), BigInteger.valueOf(den)) ; this ( num, den ) ;
this(BigInteger.valueOf(num),  BigInteger.valueOfExact(den));
 this(BigInteger.int(Integer.valueOf(num), BigInteger.valueOf(den));
this(BigInteger.valueOf(num), BigInteger.valueOf(den)) { this(num, -1);
 return this(BigInteger.valueOf(num, BigInteger.valueOf(den));
this(BigInteger.valueOf(num), BigInteger.valueOf(den) ; this ( num, den, 100 ) ;
this(BigInteger.valueOf(Integer.format(num), BigInteger.valueOf(den));
 this(NumNum,BigInteger.valueOf(den));
this(BigInteger.valueOf(num), BigInteger.valueOf(den)); this ( num, den ) ; }
 this(num, den), BigInteger.valueOf(den));
 this(BigInteger.minus(num), BigInteger.valueOf(den));
 this(num, -1));
 return this(BigInteger.valueOf(den));
 return - 1;
this(BigInteger.valueOf(num), BigInteger.valueOf(den)) ; this(num, den, 100); }
 this(BigInteger.1) this(BigInteger.valueOf(num), BigInteger.valueOf(den));
 this(BigInteger.values(num, BigInteger.valueOf(den));
 this(0, Integer.valueOf(den));
this(BigInteger.valueOf(num),  BigInteger.valueOf(abs(den));
 (num, BigInteger.valueOf(den));
 this(BigInteger.ONE.valueOf(den));
this(BigInteger.valueOf(num)), BigInteger.ONE); }
this(BigInteger.valueOf(Math.round(num), BigInteger.valueOf(den));
this(Num.valueOf(num, * den));
 this(BigInteger.max(BigInteger.valueOf(num), BigInteger.valueOf(den));
 this(BigInteger.zero(den));
 return this(num);
 this (BigInteger.valueOf(num), BigInteger.valueOf(den)); } else { } return
 this(BigInteger.NEG.valueOf(num), BigInteger.valueOf(den));
 this(num, num), den;
 this(BigInteger.values(num), BigInteger.valueOf(den));
this(BigInteger.valueOf(num, bigInteger.ONE);
this(BigInteger.valueOf(num)), BigInteger.NONE);
 this(BigInteger.one(),BigInteger.valueOf(num), BigInteger.valueOf(den));
 this(int(num), BigInteger.valueOf(den));
this(BigInteger.valueOf(num),  BigInteger.valueOf(den); } }
 this(BigInteger.decimal(BigInteger.valueOf(num), BigInteger.valueOf(den));
this(BigInteger.valueOf(int).add(num), BigInteger.valueOf(den));
 this(BigInteger.numberOf(num,den));
this(BigInteger.valueOf(num), BigInteger.valueOf(den) + BigInteger.EQ);
 this(BigInteger.decimal.valueOf(num), BigInteger.valueOf(den));
 this (BigInteger.valueOf(num, BigInteger.valueOf(den)); } else { } return
 this(BigInteger.valueOf(den);
 this(BigInteger.maxAbsolute(BigInteger.valueOf(num), BigInteger.valueOf(den));
 this(BigInteger.numberOf(BigInteger.valueOf(num), BigInteger.valueOf(den));
this(BigInteger.valueOf(n), BigInteger.ONE);
 this((BigInteger.valueOf(num),BigInteger.valueOf(den));
 this(BigInteger.valueOf(num),den));
 this(num.add(den));
 this(BigFraction(BigInteger.valueOf(num), BigInteger.valueOf(den));
 this(BigInteger.valueOf()+(BigInteger.valueOf(num), BigInteger.valueOf(den));
 this(BigInteger.Numeric.valueOf(num), BigInteger.valueOf(den));
this(BigInteger.valueOf(num), BigInteger.valueOf(den)) ; this ( num, den )
this(BigInteger.valueOf(num), BigInteger.valueOf(den)); this ( num, den, 100 )
this(BigInteger.valueOf(num), BigInteger.valueOf(den), BigInteger.NONE);
 this(BigInteger.multiply(valueOf(num), BigInteger.valueOf(den));
 this(Numimal.ONE, den);
this(BigInteger.valueOf(num), BigInteger.valueOf(den)) { this(num, den), 100);
 super(BigInteger.valueOf(num),BigInteger.valueOf(den));
 this(num, den);;
this(bigInteger.valueOf(num, den));
 this(num.minus(den));
this(num, +den);
this(BigInteger.valueOf(num), BigInteger.valueOf(den), BigInteger.EQ);
 this(BigInteger) this(BigInteger.valueOf(num), BigInteger.valueOf(den));
 this(Num num,BigInteger.valueOf(den));
 this(BigInteger.valueOf()*BigInteger.valueOf(num), BigInteger.valueOf(den));
 this(int(den));
this(BigInteger.valueOf(num) + BigInteger.ONE);
 this(num *,BigInteger.valueOf(den));
 this(BigInteger.valueOfMath.valueOf(num), BigInteger.valueOf(den));
 this(Num.VALUE, num, den);
this(BigInteger.valueOf(num), BigInteger.valueOf(den) ; this ( num, den ) ; }
 return this(BigInteger.value(num),BigInteger.valueOf(den));
 this(num + 1, BigInteger.valueOf(den));
this(BigInteger.one(), den);
 this(num, get(den));
 this(BigInteger.format(num), BigInteger.valueOf(den));
 this(BigInteger.valueOf(num);
this(BigInteger.valueOf(num + 1), BigInteger.valueOf(den));
 this(Num.VALUE(num), den);
 return this(BigInteger.valueOfBigInteger.valueOf(den));
 this(0, BigInteger.valueOf(num), BigInteger.valueOf(den));
this(BigInteger.valueOf(num) - BigInteger.ONE);
this(BigInteger.valueOf(num), BigInteger.valueOf(den)); } return this ; }
this(BigInteger.valueOf(num), BigInteger.ONE
 this(BigInteger.one) this(BigInteger.valueOf(num), BigInteger.valueOf(den));
this(BigInteger.valueOf(num), BigInteger.valueOf(den)) ; return num ; }
 return this(num), BigInteger.valueOf(den));
 this(BigInteger.valueOf(num+den));
 return num, BigInteger.valueOf(den));
this(BigInteger.valueOf(num),  BigInteger.ONE); } }
this(num, num), den);
 this(BigInteger.MIN.valueOf(num), BigInteger.valueOf(den));
this(BigInteger.valueOf(num), BigInteger.valueOf(den)) ; } } ;
 this(Num(), BigInteger.valueOf(den));
this(BigInteger.valueOf(num), BigInteger.valueOf(den)) ; this(num, den, -1);
 this(int, Integer.valueOf(den));
 this(:, den);
this(BigInteger.valueOf(num), BigInteger.valueOf(den) { this(Num.valueOf(num));
 this(num, (-den));
 this(0, -1,BigInteger.valueOf(num), BigInteger.valueOf(den));
 * this(BigInteger.valueOf(den));
 this(BigInteger) * this(BigInteger.valueOf(num), BigInteger.valueOf(den));
this(BigInteger.VALUE, den);
this(BigInteger.valueOf(num), BigInteger.valueOf(den) ; this(num, den, 100); }
this(BigInteger.valueOf(num), BigInteger.valueOf(den)) ; this(num, -1);
 this());
this(BigInteger.valueOf(num), BigInteger.valueOf(den)) return num ;
this(BigInteger.valueOf(num), BigInteger.valueOf(den)) ; this ( num ) ;
this(BigInteger.valueOf(num), BigInteger.valueOf(den), BigInteger.ONE); } }
this(BigInteger.valueOf(num * - 1), BigInteger.valueOf(den));
 this(BigInteger.ONE(),BigInteger.valueOf(den));
this(num), den, 100);
 this(num, *den));
 return this(Num, BigInteger.valueOf(den));
 this(BigInteger.valueOf(num))(BigInteger.valueOf(num), BigInteger.valueOf(den));
 this(BigInteger.modulus(BigInteger.valueOf(num), BigInteger.valueOf(den));
this(BigInteger.valueOf(num), BigInteger.valueOf(den) + 1);
 this(BigInteger.create(num), BigInteger.valueOf(den));
this(BigInteger.valueOf(num), BigInteger.valueOf(den), BigInteger.NEG);
 if (num < den) {
 this(num, remainder(den));
 this(BigInteger.valueOf(-num,den));
 this(num, -dev);
this(BigInteger.valueOf(num),  * den);
 this(num, 0, den) {
 this(decimal(den));
 this(BigInteger.numberOf(BigInteger.valueOf(den));
 this((BigInteger.valueOf(num));
 this(new Integer(den));
 this(Num), BigInteger.valueOf(den));
 this(BigInteger.bits(den));
 ((num), BigInteger.valueOf(den));
 this(BigInteger.valueOf(nu));
this(BigInteger.valueOf(num, num + den), BigInteger.valueOf(den));
 public BigFraction() {
 this(BigInteger.compact(BigInteger.valueOf(num), BigInteger.valueOf(den));
this(BigInteger.valueOf(num),  BigInteger.OFFSET);
this(BigInteger.valueOf(num)), BigInteger.VALUE(den);
this(BigInteger.valueOf(num), den); }
 this(BigInteger.valueOfThis(BigInteger.valueOf(num), BigInteger.valueOf(den));
this(BigInteger.valueOf(num),  BigFraction(den));
this(BigInteger num);
 this(BigInteger.number(num), BigInteger.valueOf(den));
 this(BigInteger.decimalPoint.valueOf(num), BigInteger.valueOf(den));
 this(BigInteger.numeric(BigInteger.valueOf(num), BigInteger.valueOf(den));
this(BigInteger.valueOf(num), BigInteger.valueOf(den)) { this(num, num); }
 this(BigInteger.divide(BigInteger.valueOf(num), BigInteger.valueOf(den));
 this(BigInteger.shift(num, BigInteger.valueOf(den));
this(BigInteger.valueOf(num, den), BigInteger.valueOf(den));
 this(BigInteger.ONE); } return
 this(num * den, BigInteger.valueOf(den));
this(BigInteger.valueOf(num),  num + den);
this(BigInteger.valueOf(num),  BigInteger.1); }
 if (num > den) {
this(BigInteger.valueOf(num),  Integer.round(den));
 return this(BigInteger.value(num, BigInteger.valueOf(den));
 this(num, num,BigInteger.valueOf(den));
this(BigInteger.valueOf(num), den, 100);
 this(:, den));
 this(num, 1, BigInteger.valueOf(den));
 this(num, den)*;
 this(BigInteger).plus(BigInteger.valueOf(num), BigInteger.valueOf(den));
 num = den;
 return this(Num.valueOf(num));
 this(Int.valueOf(den));
this(BigInteger.valueOf(n, den));
this(BigInteger.valueOf(num), BigInteger.valueOf(den)) ; return this ( num ) ;
this(BigInteger.valueOf(num + den), BigInteger.valueOf(den));
 this(BigInteger.ONE,BigInteger.valueOf(num), BigInteger.valueOf(den));
this ( num, den )
this(BigInteger.valueOf(num),  BigInteger.valueOf(-den));
 this(num), -1;
 this(BigBigInteger.valueOf(num), BigInteger.valueOf(den));
 if (num < den) return ; return
 this(this(den));
this(BigInteger.valueOf(num - 1), BigInteger.valueOf(den));
this(BigInteger.valueOf(num) * den), -1);
this(BigInteger.valueOf(num) - num, den);
this(num,);
 this(num, den) {
 return num * den;
 this(num*=BigInteger.valueOf(den));
 this(BigInteger.numberOf, BigInteger.valueOf(den));
 this(num, 0, den) ;
 this(.valueOf(den));
 num += den;
 this(BigInteger.value1, BigInteger.valueOf(den));
this(BigInteger.valueOf(num) - 1, den);
 if (num < -1) {
this(BigInteger.valueOf(num),  BigInteger.format(den));
this(BigInteger.valueOf(num), BigInteger.valueOf(den) ) ; this ( den, num ) ;
 this(BigInt, BigInteger.valueOf(den));
this(BigInteger.valueOf(num) + den);
 this(BigInteger.valueOF, BigInteger.valueOf(den));
 super(BigInteger.valueOf(num, BigInteger.valueOf(den));
 this(BigInteger(), BigInteger.valueOf(den));
this(BigInteger.valueOf(num) *, * den);
 this(-num), BigInteger.valueOf(den));
 this((BigInteger.valueOf(num, BigInteger.valueOf(den));
 final int num = num;
this(BigInteger.valueOf(num, den + 1), BigInteger.valueOf(den));
this(BigInteger.valueOf(num),  BigInteger.zero(den));
 this(BigUint.valueOf(num), BigInteger.valueOf(den));
 if (num > den) { return
 this(BigInteger), BigInteger.valueOf(den));
 this(intDiv(den));
this(BigInteger.valueOf(num),  Integer.format(den));
 this(BigInteger.valueA, BigInteger.valueOf(den));
 return this(num));
 super(BigInteger, BigInteger.valueOf(den));
 this(0, 1,BigInteger.valueOf(num), BigInteger.valueOf(den));
 if (num!= den) {
 if (num > -1) {
 this(num) den;
this(BigInteger.valueOf(num), BigIntegerONE);
 this(num, final int den);
 this(num, num);
this(BigInteger.valueOf(num), BigInteger.valueOf(den) ; this ( num, den, 100 )
 this(BigInteger.valueOf(-num, BigInteger.valueOf(den));
 this(BigInteger.one,BigInteger.valueOf(num), BigInteger.valueOf(den));
this(BigInteger.valueOf(num, 0.0), BigInteger.valueOf(den));
this(BigInteger.valueOf(num) * + den);
 this(num, den, 100); }
 this(0, 0,BigInteger.valueOf(num), BigInteger.valueOf(den));
 this(BigInteger2(num), BigInteger.valueOf(den));
this(BigInteger.valueOf(num), BigInteger.valueOf(den) + BigInteger.MINIMAL);
 this(BigInteger.(num), BigInteger.valueOf(den));
 this({BigInteger.valueOf(den));
 this(BigInteger.valueOf(-den));
this(BigInteger.valueOf(num), BigInteger.valueOf(den, 0.0));
 this(NaN(BigInteger.valueOf(num), BigInteger.valueOf(den));
this(BigInteger.valueOf(num), BigInteger.valueOf(den, 0, 100));
 this(BigInteger)BigInteger.valueOf(num), BigInteger.valueOf(den));
 return this(Num.valueOf(den));
 this(num, final int den)
 this(int num, den);
 this(int) this(BigInteger.valueOf(num), BigInteger.valueOf(den));
 return num % den;
 this(num, divide(den));
this(BigInteger.valueOf(num), BigInteger.valueOf(den) + BigInteger.MAX_VALUE);
this(BigInteger.valueOf(-num), den);
 return Integer.valueOf(den));
 this(BigFraction)(BigInteger.valueOf(num), BigInteger.valueOf(den));
 return this(BigInteger.of(num), BigInteger.valueOf(den));
 this(BigInteger, num, BigInteger.valueOf(den));
this(BigInteger.VALUEOf(num));
this(BigInteger.valueOf(num) * * den);
 this(floor(den));
this(BigInteger.valueOf(num), BigInteger.valueOf(den) ) ; this ( den ) ;
 this(BigEraction(num), BigInteger.valueOf(den));
 this(BigIntInteger.valueOf(num), BigInteger.valueOf(den));
this(BigInteger.valueOf(num + -1), BigInteger.valueOf(den));
this(BigInteger.valueOf(num), BigInteger.valueOf(dden));
this(BigInteger.valueOf(num, 0, den), BigInteger.valueOf(den));
 thisThis(num), BigInteger.valueOf(den));
this(BigInteger.valueOf(num),  Integer.bits(den));
this(BigInteger.valueOf(num), BigInteger.valueOf(den)) ; return this ( ) ;
this(BigInteger.valueOf(num), BigInteger.valueOf(den) + BigInteger.EPS);
 this(1-BigInteger.valueOf(num), BigInteger.valueOf(den));
 return - num;
 return 0;
 this(BigIntOf(num), BigInteger.valueOf(den));
this(BigInteger.valueOf(num), BigInteger.valueOf(den) + 1) + 1;
 (num));
 this(BIFFInteger.valueOf(num), BigInteger.valueOf(den));
 this(-1, BigInteger.valueOf(den));
this(BigInteger.valueOf(num), BigInteger.valueOf(den) + BigInteger.ZERO);
this(BigInteger.valueOf(num),  Integer.ONE);
this(BigInteger.valueOf(num, 0.5), BigInteger.valueOf(den));
this(BigInteger(num));
 this(BIGInteger.valueOf(num), BigInteger.valueOf(den));
 this(0) this(BigInteger.valueOf(num), BigInteger.valueOf(den));
this(BigInteger, -1);
 final int num) {
this(BigInteger.valueOf(num), BigInteger.valueOf(den) + (1));
 this(int.valueOf(den));
 this(BigInteger(BigInteger.valueOf(num), BigInteger.valueOf(den));
 this(Uint32.valueOf(den));
this(BigInteger.valueOf(num), BigInteger.valueOf(den)) ; this ( den, num )
this(BigInteger.valueOf(num), BigInteger.valueOf(den)) return - 1 ;
 thisThis.valueOf(num), BigInteger.valueOf(den));
this(BigInteger.valueOf(num), BigInteger.valueOf(den) + BigInteger.MINIMUM);
this(BigInteger.valueOf(num), BigInteger.valueOf(den) 1);
 return 0);
this(BigInteger.valueOf(num), BigInteger.valueOf(den) + (num));
 this(IntegerMath.BigInteger.valueOf(num), BigInteger.valueOf(den));
this(BigInteger.valueOf(num), BigInteger.valueOf(den)) { this(num) }
this(BigInteger, num); }
 this(Int.valueOf(num), BigInteger.valueOf(den));
 final int num = 1;
this(BigInteger.valueOf den);
 this(BigInteger.MAX, BigInteger.valueOf(den));
 return (int) num;
 this(bigInteger(den));
this(BigInteger.valueOf(num), BigInteger.valueOf(den)) ; return 0 ; }
 final int num = 0;
this(BigInteger.valueOf(num), BigInteger.valueOf(den)) { return - 1 ;
 this(abs(den));
this(BigInteger.valueOf(num), BigInteger.valueOf(den) + BigInteger.VALUE_ONE);
 final int num = den;
 this(Int) this(BigInteger.valueOf(num), BigInteger.valueOf(den));
this(BigInteger.numberOf(num));
 doThis(BigInteger.valueOf(num), BigInteger.valueOf(den));
 return num * - den;
 this(add(den));
this(BigInteger.valueOf(num), BigInteger.valueOf(den, 0.5));
 return num - den;
 return this(BigInteger.of(den));
this(BigInteger.valueOf(num),  abs(den));
 return this(BigInteger.one(den));
 this(1+BigInteger.valueOf(num), BigInteger.valueOf(den));
 this(-NumInteger.valueOf(den));
 this(int(BigInteger.valueOf(num), BigInteger.valueOf(den));
this(BigInteger.valueOf(num), BigInteger.valueOf(den) + 1); }
 this(intden));
 return num + den;
 thisInteger.valueOf(den));
 this(*(num), BigInteger.valueOf(den));
 this(:, num));
this(BigInteger.valueOf(num, 0), BigInteger.valueOf(den));
 this(Integer.format(num), BigInteger.valueOf(den));
this(BigInteger.valueOf(num, bigInteger.ONE));
 return BigInteger.valueOf(den));
this(BigInteger.valueOf(num), BigInteger.valueOf(den)) return 0 ;
this(BigInteger.valueOf(num), BigInteger.valueOf(den) *);
 final int num; return
 this(num(), den));
this(BigInteger.valueOf(num), BigInteger.valueOf(den) - 1) ;
this(BigInteger.valueOf(num), BigInteger.valueOf(den)) 1;
 this(abs(num), BigInteger.valueOf(den));
 this.valueOf(num), BigInteger.valueOf(den));
this(BigInteger.valueOf(num), BigInteger.valueOf(den)) * 100;
this(BigInteger.valueOf(num), BigInteger.valueOf(den) + 1 * num);
this(BigInteger.valueOf(num),  Integer.digit(den));
 this((BigInteger.ONE), BigInteger.valueOf(den));
 this(BigInt(num), BigInteger.valueOf(den));
this(Num, den);
 num -= den;
 super(num, den);
this(BigInteger.valueOf(num), BigInteger.valueOf(den) + 1); return num ;
 this(BigInteger(-num), BigInteger.valueOf(den));
 this(noun);
this num ;
this(BigInteger.valueOf());
 thisInteger(valueOf(den));
this(BigInteger.valueOf(num), BigInteger.valueOf(den) + 1, 100);
this(BigInteger.valueOf(num) * - den);
this(BigInteger.valueOf(num), BigInteger.valueOf(den)) { this(num) ;
 this(:, num);
this(BigInteger.valueOf(num), BigInteger.valueOf(den + 1));
 this((int num), BigInteger.valueOf(den));
this(BigInteger.valueOf(num), BigInteger.valueOf(den)) } return this ;
 this(This(num), BigInteger.valueOf(den));
 this(_(num), BigInteger.valueOf(den));
 this(numden));
 this(num(), den);
this(BigInteger.valueOf(num), BigInteger.valueOf(num - den));
this ( )
this(BigInteger.valueOf(num), BigInteger.valueOf(den), -1));
 final int num =
 this(num(num));
 this((num, den));
 doThis(den));
this(BigInteger.valueOf(num), BigInteger.valueOf(den)) ; return num ;
 this(-BigInteger.valueOf(den));
 return this(BigInteger.format(num), BigInteger.valueOf(den));
this(BigInteger.valueOf(num), BigInteger.valueOfDen);
 this(noun));
this(BigInteger.valueOf(num), BigInteger.valueOf(den), (-1));
 this(Integer.of(num), BigInteger.valueOf(den));
this(BigInteger.valueOf(num), BigInteger.valueOf(den)) return 1 ;
this(BigInteger.valueOf(num), BigInteger.valueOf(den, 0));
this(BigInteger.valueOf(num), BigInteger.valueOf());
this(BigInteger.valueOf(num),  + den);
this(BigInteger.valueOf(num), den); } }
 this(Integer.one(num), BigInteger.valueOf(den));
 * return this(BigInteger.valueOf(num), BigInteger.valueOf(den));
 this1(BigInteger.valueOf(den));
 super(num, den));
 this((num), BigInteger.valueOf(den));
 this(*num), BigInteger.valueOf(den));
 this(*BigFraction(num), BigInteger.valueOf(den));
 this(num(),BigInteger.valueOf(den));
 * * this(BigInteger.valueOf(num), BigInteger.valueOf(den));
 thisBigInteger.valueOf(num), BigInteger.valueOf(den));
 this(num+(den));
this(BigInteger.valueOf(num),  -den);
 return(BigInteger.valueOf(den));
 return 1;
 final long num) {
 return (int) num);
 return ());
 this(bigInteger(num), BigInteger.valueOf(den));
 }(num, den);
this(BigInteger.valueOf(num), BigInteger.valueOf(den) + 1) *
 this(int.valueOf(num), BigInteger.valueOf(den));
this(BigInteger.valueOf(num), BigInteger.valueOf(Den));
this(BigInteger.valueOf(num), BigInteger.valueOf(den) + -1);
this(int den);
this(BigInteger.valueOf(num), BigInteger.);
this(BigInteger.valueOf(num), BigInteger.valueOf(den) + 1) return ;
this ( num )
this(BigInteger.valueOf(num), BigInteger.valueOf(den)) return this ;
 this(num*), BigInteger.valueOf(den));
 return (());
 this(-BigInteger(num), BigInteger.valueOf(den));
 return BigInteger.valueOf(num), BigInteger.valueOf(den));
this(BigInteger.valueOf(num), BigInteger.valueOf(den)) return ;
this(BigInteger.valueOf(num), BigInteger.valueOf(den) + 1); } }
this(n, den);
this(BigInteger.EQ);
 this(*, BigInteger.valueOf(den));
 this(this(_num), BigInteger.valueOf(den));
 return den;
 final int num++) {
this(BigInteger.valueOf(num),  floor(den));
this(BigInteger.valueOf(num), BigInteger.valueOf(den) * 1);
 final long num =
this(num), den);
this(BigInteger.valueOf(num),  BigInteger.One);
 thisLong.valueOf(num), BigInteger.valueOf(den));
this(BigInteger.valueOf(num), BigInteger1);
this(BigInteger.valueOf(num),  BigInteger.one);
 this1(BigInteger.valueOf(num), BigInteger.valueOf(den));
 return (int)BigInteger.valueOf(den));
 this(add(num), BigInteger.valueOf(den));
 return this(valueOf(num), BigInteger.valueOf(den));
 thisBigInteger.valueOf(den));
this(BigInteger.valueOf(num),  bigInteger(den));
this();
 return(BigInteger.valueOf(num), BigInteger.valueOf(den));
 this+(BigInteger.valueOf(den));
this -- ;
 bigInteger.valueOf(den));
this(BigInteger.valueOf(num),  bigInteger.ONE);
 this(*num,BigInteger.valueOf(den));
 final int num } {
 thisImpl(num), BigInteger.valueOf(den));
 thisFraction(BigInteger.valueOf(num), BigInteger.valueOf(den));
 return 1);
this(BigInteger.valueOf(num),  LongInteger.ONE);
 * this(num), BigInteger.valueOf(den));
 get(BigInteger.valueOf(den));
 new Integer(den));
 this(*), BigInteger.valueOf(den));
this(BigInteger.valueOf(num), BigInteger.valueOf(dun));
 this(0);
 this(den);
this(BigInteger.valueOf(num), BigInteger) ;
 return (num);
this(BigInteger) ;
this(BigInteger, den);
 }(BigInteger.valueOf(num), BigInteger.valueOf(den));
this(BigInteger.valueOf(n), den);
 this(BigDouble(num), BigInteger.valueOf(den));
 this(n);
 this.this(BigInteger.valueOf(num), BigInteger.valueOf(den));
 this((den));
 this(-BigInteger.valueOf(num), BigInteger.valueOf(den));
this(BigInteger.valueOf(num), BigInteger.valueOf den));
 return this;
 final int num;
 return den);
 this.fraction(BigInteger.valueOf(num), BigInteger.valueOf(den));
this(BigInteger.valueOf(num), BigInteger.valueOf(dn));
 new Big(den));
 bigInteger.valueOf(num), BigInteger.valueOf(den));
 thisThis(den));
 final double num =
 return this);
 final long num;
this(BigInteger.valueOf(num),  LittleInteger.valueOf(den));
this(BigInteger.valueOf(num),  BitInteger.valueOf(den));
 this*fraction(BigInteger.valueOf(num), BigInteger.valueOf(den));
this(BigInteger.valueOf(num), BigInteger.valueOf(den)) } }
 * return
 this(), BigInteger.valueOf(den));
this(BigInteger.valueOf(num) - 1);
 this.valueOf(den));
 (BigInteger.valueOf(num), BigInteger.valueOf(den));
 this*Fraction(BigInteger.valueOf(num), BigInteger.valueOf(den));
 this(*Fraction(BigInteger.valueOf(num), BigInteger.valueOf(den));
this(BigInteger.valueOf(num),  LongInteger.valueOf(den));
this(BigInteger.valueOf(-num));
this(BigInteger.valueOf(num), BigInteger.valueOf(denb));
 this(n));
this(BigInteger.valueOf(bn));
 this(0));
this(BigInteger.ONE); *
 this(_, BigInteger.valueOf(den));
this(BigInteger.valueOf(num), BigInteger.valueOf(den) * }
this(BigInteger) *
this(BigInteger.ONE());
this(BigInteger.);
this(BigInteger).ONE();
 this(-num));
 this(Number.valueOf(den));
this(BigInteger.valueOf(num),  this(den));
 this(nu));
this(BigInteger.numberOf(num), BigInteger.valueOf(den));
this(LittleInteger.valueOf(num), BigInteger.valueOf(den));
this(BigInteger.valueOf(num), BigInteger.valueOf(den) * ;
this(BigInteger.valueOf(num), BigInteger.valueOf(den)) } ;
this(BigInteger.valueOf num));
 get(BigInteger.valueOf(num), BigInteger.valueOf(den));
this(BigInteger.valueOf(num, num));
 this({num), BigInteger.valueOf(den));
 this(_num, BigInteger.valueOf(den));
 this(-num, BigInteger.valueOf(den));
 this(_.valueOf(num), BigInteger.valueOf(den));
 this(_num), BigInteger.valueOf(den));
this(BigInteger.valueOf(num) num);
this(BigInteger.valueOf(num),  ValueOf(den));
this(BigInteger.valueOf(num), BigInteger.ERO);
 return(den));
 * *
this(1);
 # TODO
this(BigInteger.valueOf(num),  bigInt(den));
this(BigInteger.valueOf(num) den));
 } return
 this().valueOf(den));
 this.(valueOf(den));
 *
 # -----------------------------------------------------------------------
 } *
this(BigInteger.valueOf(num),  num);
this(BigInteger.valueOf(num) DEN);
 # else {
 } else
 this*(BigInteger.valueOf(num), BigInteger.valueOf(den));
 super(den));
this(BigInteger.valueOf(num),  remainder(den));
this(BigInteger.valueOf(num),  DEN);
this(BigNumber(num), BigInteger.valueOf(den));
 this(-valueOf(den));
this(BigInteger.valueOf(num) dec);
 # --------------------------------------------------------------------------
 * * return
this(BigInteger.valueOf(num),  0);
this(BigInteger.valueOf(num),  divide(den));
 this().valueOf(num), BigInteger.valueOf(den));
this(BigInteger.one);
this(BigInteger.One);
 this.(valueOf(num), BigInteger.valueOf(den));
 this(-valueOf(num), BigInteger.valueOf(den));
 return(num), BigInteger.valueOf(den));
this(BigInteger.valueOf(num), BigInteger.valueOf(dec));
 super(BigInteger.valueOf(den));
 so(BigInteger.valueOf(num), BigInteger.valueOf(den));
this(BigInteger.valueOf(num), BigInteger.valueOf(len));
this(BigInteger.valueOf(nu), BigInteger.valueOf(den));
this(BigInteger.valueOf(Num), BigInteger.valueOf(den));
this(BigInteger.valueOf(nom), BigInteger.valueOf(den));
