 if (level) {
CheckSideEffects(CheckLevel level)  { this.error = error;
 private CheckSideEffects(CheckLevel level) { this.level = level; } private
 if (CheckLevel level) {
 if (debug) {
 private final CheckSideEffects(CheckLevel level) { this.level = level; } private final
 private CheckSideEffects(CheckLevel level) { this.level = level; } class
 private CheckSideEffects(CheckLevel level) { this.level = level; } public
 class
 private final CheckSideEffects(CheckLevel level) { this.level = level; }
 final CheckSideEffects(CheckLevel level) { this.level = level; } private final CheckLevel level; final
 private final CheckSideEffects(CheckLevel level) { this.level = level ; } public CheckSideEffects(CheckLevel level); private final
CheckSideEffects(CheckLevel level)  { this.checkSideEffects = true;
 private final CheckSideEffects(CheckLevel level) { this.level = level; private final
 private CheckSideEffects(CheckLevel level) { this.level = level ; } public CheckSideEffects(CheckLevel level) { private
 private final CheckSideEffects(CheckLevel level) { this.level = level ; } public CheckSideEffects(CheckLevel level) { public
 private final CheckSideEffects(CheckLevel level) { this.level; } private final
 private final CheckSideEffects(CheckLevel level) { this.level = level; } public final
 private CheckSideEffects(CheckLevel level) { this.level = level ; } public CheckSideEffects(CheckLevel level) { public
 private final CheckSideEffects(CheckLevel level) { this.level = level ; } public CheckSideEffects(CheckLevel level); public
CheckSideEffects(int level) {
 private final CheckSideEffects(CheckLevel level) { this.level = level; } class
 private final CheckSideEffects(CheckLevel level) { this.level = level; } private final CheckLevel level; private final
 private final CheckSideEffects(CheckLevel level) { this.level = level; public final
CheckSideEffects(CheckLevel ) { this.error = error;
 private CheckSideEffects(CheckLevel level) { this.level = level ; } public CheckSideEffects(CheckLevel level); public
 private final CheckSideEffects(CheckLevel level) { this.level = level ; } public CheckSideEffects(CheckLevel level); public final
 private CheckSideEffects(CheckLevel level) { this.level = level ; } public CheckSideEffects(CheckLevel level) { } class
 private final CheckSideEffects(CheckLevel this) { this.level = this.level; } private final
 private CheckSideEffects(CheckLevel level) { this.level = level ; } public CheckSideEffects(CheckLevel level) { class
 private CheckSideEffects(CheckLevel level) { this.level = level ; } public CheckSideEffects(CheckLevel level); private
 private final CheckSideEffects(CheckLevel level) { this.level; private final
 private final CheckSideEffects(CheckLevel level) { this.level = level; } static final CheckLevel level; private final
 public void visit(NodeTraversal t, Node n, Node parent) throws
 final CheckSideEffects(CheckLevel level) { this.level = level; } static final CheckLevel level; final
 synchronized(CheckLevel level) {
CheckSideEffects. call ( this ) ;
 private final CheckSideEffects(CheckLevel level) { this.level = level; } public
 public void checkSideEffects(CheckLevel level) { this.level; } class
 private CheckSideEffects(CheckLevel level) { this.level = level ; } public CheckSideEffects(CheckLevel level); class
 private final CheckSideEffects(CheckLevel level) { this.level = level; } private
 public void visit(NodeTraversal t, Node n) { public void
 private final CheckSideEffects(CheckLevel level) { this.level; } class
 public void visit(NodeTraversal t, Node n) { class
 private final CheckSideEffects(CheckLevel level) { this.level = level; } protected final
 private final CheckSideEffects(CheckLevel level) { this.level = level; } static final CheckLevel level; public final
 final CheckSideEffects(CheckLevel level) { this.level = level; } private final CheckLevel level; public final
 private final CheckSideEffects(CheckLevel level) { this.level = level; } private final CheckLevel level; public final
CheckSideEffects(CheckLevel ) { this.checkSideEffects = true;
 private final CheckSideEffects(CheckLevel level) { this.level; public final
 final CheckSideEffects(CheckLevel level) { this.level = level; } private final CheckLevel level; private final
CheckSideEffects(CheckLevel level)  { this.checkSideEffects = false;
 private final CheckSideEffects(CheckLevel level) { this.level = level; } private final CheckLevel level; private
 final CheckSideEffects(CheckLevel level) { this.level = level; } static final CheckLevel
 private final CheckSideEffects(CheckLevel level) { this.level = level; } private final CheckLevel level; public
CheckSideEffects(CheckLevel level)  { this.error = true;
 private CheckSideEffects(CheckLevel level) { this.level = level; } public CheckSideEffects(int level); public
 final CheckSideEffects(CheckLevel level) { this.level = level; } public final CheckLevel
 private final CheckSideEffects(CheckLevel level) { this.level = level; } static final
 private CheckSideEffects(CheckLevel level) { this.level = level; } private final CheckLevel level =
CheckSideEffects(CheckLevel level)  { super.checkSideEffects();
 private final CheckSideEffects(CheckLevel this) { this.level = this.level; } public final
 private final CheckSideEffects(CheckLevel level) { this.level = level; } public final CheckLevel level; private
CheckSideEffects(CheckLevel level)  { this.error = false;
 private CheckSideEffects(CheckLevel level) { this.level = level; } static final CheckLevel; private
CheckSideEffects(this, function(level) {
CheckSideEffects(CheckLevel level)  { this.errors = errors;
 private final CheckSideEffects(CheckLevel level) { this.level = level; } public final CheckLevel private final
 public void visit(NodeTraversal t){
 public void visit(NodeTraversal t, Node n) { private void
 private final CheckSideEffects(CheckLevel this.level); private final
 private final CheckSideEffects(CheckLevel level) { this.level = level; } private void
CheckSideEffects(s);
 private CheckSideEffects(CheckLevel level) { this.level = level; } private final CheckLevel level;
 private final CheckSideEffects(CheckLevel level) { this.level = level; } public final void
 private final CheckSideEffects(CheckLevel level) { this.level = level; } public static final void
 private CheckSideEffects(CheckLevel level) { this.level = level; } static final Level level; private
 private CheckSideEffects(CheckLevel level) { this.level = level; } public CheckLevel level; private
 { return new CheckSideEffects ( this. level ) ; } class
 private final CheckSideEffects(CheckLevel level) { this.level = level; } static final CheckLevel
 private final CheckSideEffects(CheckLevel level) { this.level = level; } static final void
 { return new CheckSideEffects ( level ) ; } class
 private final CheckSideEffects(CheckLevel level) { this.level = level; } private final int
CheckSideEffects(CheckLevel level)  { this.checkSideEffects = level;
 private final CheckSideEffects(CheckLevel level) { this.level = level; } public final CheckLevel
 { return new CheckSideEffects ( ) { public void
 if (this.level) {
CheckSideEffects(CheckLevel ) { this.checkSideEffects = false;
CheckSideEffects = new CheckSideEffects ( this ) ;
 private final CheckSideEffects(CheckLevel level) { return level ; } class
 { return new CheckSideEffects ( ) { class
CheckSideEffects(int level, NodeTraversal) {
 private final CheckSideEffects(CheckLevel this.level); public final
 public void visit(NodeTraversal t, Node n) { private class
 { return new CheckSideEffects ( this. level ) { public void
 public void visit(NodeTraversal t, Node n) public void
CheckSideEffects(CheckLevel ) this.error = error;
 public void setLevel(int level){
 private final Level this.level = level; private final Level
 private final CheckSideEffects(CheckLevel this.level); private class
CheckSideEffects(CheckLevel level, this.level);
CheckSideEffects(CheckLevel ) {
 public void visit(NodeTraversal t, Node n, parent) throws
 { return new CheckSideEffects ( level ) { public void
CheckSideEffects(CheckLevel ) { this.errors = errors;
CheckSideEffects = this. level ;
CheckSideEffects(this.level); if (debug) {
 { this.level = level; } public int level; {
 { this.level = level ; } private final Level level;
 private void setLevel(int level){
 public CheckLevel () {
 public void setLevel(level){
 public void setLevel(CheckLevel level){
CheckSideEffects(CheckLevel level)  { this.error = error
CheckSideEffects(CheckLevel level)  { this.checkSideEffects(level); }
CheckSideEffects(this, level) {
CheckSideEffects(this.level, function () {
 synchronized (this) {
CheckSideEffects(this.level, function(level) {
 { return new CheckSideEffects ( this ) ; } class
 public void visit(NodeTraversal t, Node n) {} class
 public void visit(NodeTraversal t, Node n) { void
CheckSideEffects(CheckLevel level)  { this.checkSideEffects = 0;
 public void visit(NodeTraversal t, Node n) { public
CheckSideEffects. class = this ;
 public void visit(NodeTraversal level){
 { return new CheckSideEffects ( ) ; } public void
 public final CheckLevel () {
 private void visit(NodeTraversal t) {
CheckSideEffects(CheckLevel ) { this.error = err;
CheckSideEffects(this.level); if (level) {
 public void set(CheckLevel level){
CheckSideEffects(NodeTraversal) {
CheckSideEffects(CheckLevel level, this).level;
CheckSideEffects(this, function(n, parent) {
 private final Level this.level = level; private Level
 { return new CheckSideEffects ( ) ; } class
CheckSideEffects(CheckLevel ) { this.error = true;
 { return new CheckSideEffects ( ) { private void
CheckSideEffects = new CheckSideEffects ( this ) {
 public void visit(NodeTraversal, level) {
 { return new CheckSideEffects ( ) ; } public class
 private void visit(NodeTraversal t,CheckLevel level) {
 private void checkSideEffects(CheckLevel level) { public void
 { return new CheckSideEffects ( level ) { class
 private final CheckSideEffects this.level = level; public void
 public void check(int level){
 if (level!= null) {
 public void visit(NodeTraversal vt) {
CheckSideEffects(CheckLevel ) { this.codeError = codeError;
 if (!error) {
 private void setLevel(level){
 private void setLevel(CheckLevel level) {
 public void check(CheckLevel level){
 public void visit(NodeTraversal nt) {
 public void set(int level){
CheckSideEffects = true ;
 if (!this.level) {
 private final CheckSideEffects this.level = 0; public void
 public void visit(NodeTraversal t1) {
 private final CheckSideEffects this.level = level; private class
 public CheckSideEffects ( ) { class
CheckSideEffects(CheckLevel level)  { return this.level ;
CheckSideEffects(this, function () {
 public void visit(CheckLevel level) {
 private final CheckLevel this; if (level) {
 private final CheckSideEffects this.level = 0; private class
 private final Level this.level; public void init(CheckLevel level) {
 public void visit(NodeTraversal, node) {
 { return new CheckSideEffects ( ) { public
CheckSideEffects(CheckLevel ) { this.checkSideEffects(level);
CheckSideEffects(CheckLevel ) this.level = 0;
 private this.level; class
 public CheckSideEffects(int level); public
 if (DEBUG) {
 { this.level = level ; } final Level level; {
 private void setCheckLevel(CheckLevel level) {
CheckSideEffects(CheckLevel level)  { super.checkSideEffects(level); }
 private final Level this.level = 0; private Level
CheckSideEffects(CheckLevel level)  { this.error =
 private final CheckSideEffects this.level; public void
CheckSideEffects(CheckLevel level, this).level();
CheckSideEffects(CheckLevel ) this.level = error;
 if (useLevel) {
 { this.level = level ; } private final Level level =
CheckSideEffects(CheckLevel level)  { this.checkSideEffects(level); return
CheckSideEffects(CheckLevel ) this.error = true;
 public void visit(NodeTraversal v) {
 public CheckSideEffects(int level) throws
 private final Level this.level; public void initialize(CheckLevel level) {
 private void visit(NodeTraversal.CheckLevel level) {
 private void set(CheckLevel level) {
 private final void setCheckLevel(CheckLevel level) {
 private final Level this.level = level; private final level
 public CheckSideEffects(int level) extends
 private final Level this.level;
 private final CheckSideEffects this.error;
CheckSideEffects(public final CheckLevel level) {
 public void visit(NodeTraversal r) {
 public void visit(NodeTraversal root) {
 private final NodeTraversal root(){
 private final CheckSideEffects(this.level) {
 private void init(level){
 public static CheckLevel () {
CheckSideEffects( this.level ) ;
 private this.level; public void setLevel(CheckLevel level) {
 public CheckSideEffects() { public
CheckSideEffects(level) {
 private void init ( ){
 private final CheckSideEffects this.effects;
CheckSideEffects(CheckLevel ) this.error = false;
 public CheckSideEffects(Level level) extends
 private final Level this.level; public void configure(CheckLevel level) {
CheckSideEffects(this);
 private final CheckLevel(this.level) {
CheckSideEffects(CheckLevel level)  { super.checkSideEffects(level); return
 private final Level this.level; private void init(CheckLevel level) {
CheckSideEffects(CheckLevel level)  { this.checkSideEffects = true; return
 private final CheckLevel checkLevel(level) {
 if (level > 0) {
 if (warning) {
 public CheckSideEffects(Level level)
CheckSideEffects = this ;
CheckSideEffects(CheckLevel level)  { this.errors ++ ;
 { return level ; } public void setLevel(CheckLevel level) {
 private this.level = 0; public void init(CheckLevel level) {
 private final Level level;
 public CheckSideEffects(Level level); public
 private final CheckSideEffects this; if (level) {
CheckSideEffects(CheckLevel level, this.level) {
 private final Level this.level = level; private int
CheckSideEffects(CheckLevel ) { this.checkSideEffects(); }
 private void visit(NodeTraversal n,CheckLevel level) {
 private final CheckLevel this; synchronized (level) {
 if (level!= 0) {
 private final Level this.level = level; private final Error
 private final CheckLevel (level) {
 private final CheckLevel this.level(level) {
 private final CheckSideEffects this.errors;
CheckSideEffects(int level, String s) {
 public CheckLevel(level) {
CheckSideEffects(Level level) {
 public void init(CheckLevel level) {
 private final NodeTraversal n; public void
 public void visit(Traversal t) {
 { return new CheckSideEffects ( ) { function
CheckSideEffects(CheckLevel , this).level;
CheckSideEffects.class:
 { return new CheckSideEffects ( ) { void
 private final Level this.level = level; private final int
 private void set(int level) {
 private final void setLevel(CheckLevel level) {
 private final NodeTraversal this; synchronized (CheckLevel level) {
 private final CheckSideEffects.CheckLevel (level) {
 private final CheckLevel this.(level) {
 private final Level(int level) {
 private final Level this.level = level; private Error
CheckSideEffects. call ( this, level ) ; } }
CheckSideEffects(this.level, this.error) ;
 public void setLevel(level)){
 private final Level this.level = level; private level
 public void visit(NodeVisitor v) {
 { return level ; } public void init(CheckLevel level) {
CheckSideEffects(int level, Node node) {
 private this.level; public
 private static void setCheckLevel(CheckLevel level) {
 public CheckSideEffects(level); public
 private final Level this.level = level; private final Node
CheckSideEffects(this.level) {
CheckSideEffects(this, function(warnings) {
 private void visit(NodeTraversal,CheckLevel level) {
 public void visit(NodeTraversal t)){
 private final CheckLevel this; private final Level (level) {
 private final AssertionLevel (level) {
 private final NodeTraversal this; if (CheckLevel level) {
CheckSideEffects(this.level, level) ;
CheckSideEffects = null ;
 private final CheckSideEffects.level(level) {
 private final CheckLevel this.level) {
 if (!.level) {
 public void init ( ){
CheckSideEffects(CheckLevel level)  { super.checkSideEffects(); }
 private final Level this.level = level; return
 private this.level; public void
 private final CheckSideEffects this.level(level) {
 public CheckSideEffects(level) extends
 { this.error = error; }
 private void setDefaultCheckLevel(CheckLevel level) {
CheckSideEffects(public CheckLevel level) {
 private this.level; public void init(CheckLevel level) {
 private final CheckLevel this; public CheckLevel(level) {
CheckSideEffects(CheckLevel level, this).level =
 { return level ; } public void set(CheckLevel level) {
 public CheckSideEffects(level) throws
 public void setLevel(CheckLevel level) *{
CheckSideEffects(this.level, this.warnings) ;
 { public void setLevel(CheckLevel level) {
CheckSideEffects. call ( this ) {
 private this.level; if (level!=level) {
 private final Level this.level; private synchronized (level) {
 { return level ; } public void initialize(CheckLevel level) {
CheckSideEffects(CheckLevel level)  { this.error = error; }
CheckSideEffects(this.level, function()) {
 public void set(Level level) {
 private final Level this.level = level; *
 private final Level this.level = level; static
 public void visit(CheckLevel level) *{
 { public void setCheckLevel(CheckLevel level) {
CheckSideEffects(CheckLevel level) { this.error = null
CheckSideEffects( this.level, level ) ; } else {
CheckSideEffects(CheckLevel level)  { super.checkSideEffects(); return
 private final Level(this.level) {
 public void setLevel(CheckLevel level)){
 private final Level this.level = 0; static
CheckSideEffects(CheckLevel , this).level();
 private final Level this.level; public Level(level) {
 private final CheckSideEffects this.effects();
CheckSideEffects(CheckLevel ) { this.error = error; }
CheckSideEffects(CheckLevel , this).level =
 private final NodeTraversal visit(CheckLevel level) {
CheckSideEffects(CheckLevel  level) {
 private final Level this.level = 0; return
 public void initialize(CheckLevel level) {
CheckSideEffects(CheckLevel level) { this.error ++;
 private this.level; private class
 private synchronized (CheckLevel level) {
 private void init(CheckLevel level) {
 if (level!=level) {
CheckSideEffects(CheckLevel level) { this.error_ =
 private final Level this.level; static
 public CheckSideEffects() public
 public final Level level = ERROR;
 private this.error;
 private final CheckSideEffects(level) {
 private final Level this.level; public super(CheckLevel level) {
 private static void setLevel(CheckLevel level) {
 if (!level) {
 private this.level; public void initialize(CheckLevel level) {
 if ($.level) {
 private this.level; public class
 private final Level level =
CheckSideEffects(CheckLevel level) { this.error = true
 public void visit(NodeTraverse t) {
 private final Level this.level; *
 private final CheckLevel (int level) {
 private final Level this.level; return
 private void setCheckLevel(level) {
 private void init(...){
 public void setDefaultCheckLevel(CheckLevel level) {
 private final Level(Level level) {
 } public void setLevel(CheckLevel level) {
 } public void setCheckLevel(CheckLevel level) {
 private final NodeTraversal traverse(CheckLevel level) {
 private this.level; private void init(CheckLevel level) {
 public final Level level = 0;
CheckSideEffects(this, function(cls) {
 private <pre> class
CheckSideEffects(CheckLevel level)  { this.error = error; return
 public void configure(CheckLevel level) {
 public CheckSideEffects() void
CheckSideEffects(CheckLevel level, this).level);
 public void visit(Node n) { return
 private final Level this.level; public Check(CheckLevel level) {
 synchronized (level) {
 private void initialize(CheckLevel level) {
CheckSideEffects(level, s); *
CheckSideEffects(CheckLevel ) { this.errors = errors; }
CheckSideEffects(function(level) {
 private final Level this.level; public Init(CheckLevel level) {
CheckSideEffects(CheckLevel ) { this.error = error; return
CheckSideEffects(CheckLevel ) { this.checkSideEffects(); ;
CheckSideEffects(this, level); *
 { private void setLevel(CheckLevel level) {
 private final CheckSideEffects checkLevel(CheckLevel level) {
 private final Level level; *
CheckSideEffects(level);
 { private void setCheckLevel(CheckLevel level) {
 public final Level level = level;
 private final Level level; return
CheckSideEffects(this.level, this.error); *
 private final Level this.level; public initialize(CheckLevel level) {
CheckSideEffects(CheckLevel level)  { this.errors = errors; }
CheckSideEffects(this.level, this.warnings); *
 private void initialize(){
CheckSideEffects(int level=0) {
 { this.error = error; return
CheckSideEffects(n);
 private final CheckSideEffects.class(CheckLevel level) {
CheckSideEffects. class { private static
CheckSideEffects(this.level, level); *
 if (!!level) {
 private void setCheckSideEffects(CheckLevel level) {
CheckSideEffects(this.level, this.error) {
CheckSideEffects(CheckLevel level) { this.error = level; }
 public <pre> void
CheckSideEffects(CheckLevel level, this.level); *
 private this.error; private
CheckSideEffects(CheckLevel level, s); *
 { public void init(CheckLevel level) {
CheckSideEffects(this).level = level; return
CheckSideEffects(CheckLevel level) { this.warning = warning; }
 private void setLevel(JSC_CheckLevel level) {
 private final Node node) {
CheckSideEffects(this.level, this.warnings) {
 private void init(level)){
 public
 private synchronized (level) {
 private final CheckSideEffects.of(CheckLevel level) {
CheckSideEffects(CheckLevel level, this.level) *
CheckSideEffects( this.level ) { return
CheckSideEffects( this.level, level ) ; } } ;
CheckSideEffects(Lvl level) {
 private void setLevel(JSC.CheckLevel level) {
 public void
CheckSideEffects(CheckLevel , error);
CheckSideEffects(this.level, level) {
CheckSideEffects. call ( this ) ; } } ; }
CheckSideEffects(this).level = level; *
 private <pre> public
 private final checkLevel(level) {
 private this.level; public super(CheckLevel level) {
 if(.level) {
 private final Error error;
 private final void init(CheckLevel level) {
 public void visit(Node) if(CheckLevel level) {
CheckSideEffects(this.level, this.warning); *
CheckSideEffects(this.level, this.error) *
 private <pre> void
CheckSideEffects. super ( ) { return
 public <pre> class
 private void visit(Node n, DefaultCheckLevel level) {
 private final Node parent; #{
 private final SetLevel(level) {
 } private void setLevel(CheckLevel level) {
 private static void init(CheckLevel level) {
CheckSideEffects( this.level ) ; return
 { public void set(CheckLevel level) {
 if (!) {
 private (CheckLevel level) {
 { public void configure(CheckLevel level) {
 { public void initialize(CheckLevel level) {
CheckSideEffects(this.level); *
 private void init(level);{
 private final Level(CheckLevel level) {
CheckSideEffects(CheckLevel (level)) {
 private final Level;
CheckSideEffects(CheckLevel level = 0) {
CheckSideEffects(CheckLevel , this).level++;
 public synchronized (CheckLevel level) {
 private <pre>
CheckSideEffects(CheckLevel level)  throws Exception {
CheckSideEffects(CheckLevel , this).level);
CheckSideEffects(...) {
CheckSideEffects(CheckLevel ) this.level; static
CheckSideEffects(CheckLevel (level)) ;
 private final Node level; return
 public final Level level; return
CheckSideEffects(CheckLevel , this.level); *
CheckSideEffects(CheckLevel level = this.level); return
CheckSideEffects(level); *
 if (*) {
 if () {
CheckSideEffects(CheckLevel , level); *
CheckSideEffects(CheckLevel , level) {
CheckSideEffects(CheckLevel  this.level) { return
 public CheckLevel level() #{
CheckSideEffects(CheckLevel level)  { this.error;
 public final (CheckLevel level) {
CheckSideEffects(CheckLevel , level) ;
CheckSideEffects( this.level ) { *
CheckSideEffects(this.level, level) { return
CheckSideEffects(CheckLevel level)  { this.error &&
CheckSideEffects(this.level, level); } else
 synchronized () {
CheckSideEffects(this.level, level); };
CheckSideEffects(CheckLevel ) this.level; else
CheckSideEffects(s); *
CheckSideEffects(CheckLevel level)  throws IOException { return
CheckSideEffects(int level()) {
 public super(CheckLevel level) {
CheckSideEffects(CheckLevel level, error);
CheckSideEffects(CheckLevel  level); *
CheckSideEffects(CheckLevel ) { return
CheckSideEffects(this).level = level; } return
CheckSideEffects(CheckLevel level) { return
 private <p>
 private <T>
 private final Level =
 private class
 private final level =
CheckSideEffects(this) {
 private static void(){
CheckSideEffects(CheckLevel  this.level) { *
 private <P>
CheckSideEffects(CheckLevel ) ;
CheckSideEffects(n) {
CheckSideEffects.class { return
 private final ErrorLevel
 private final Level:
 private static final void{
CheckSideEffects(CheckLevel level)  throws IOException {
CheckSideEffects(level); return
 private final void
CheckSideEffects(CheckLevel level, this); *
CheckSideEffects(CheckLevel level = 0) ;
CheckSideEffects(level) { return
CheckSideEffects(CheckLevel level)  throws Exception { return
CheckSideEffects.class { private
CheckSideEffects(CheckLevel  level); return
CheckSideEffects(CheckLevel level, null); *
CheckSideEffects.class; *
CheckSideEffects(Node node) {
CheckSideEffects(s) {
CheckSideEffects(CheckLevel level) { *
 } public void
 static class
CheckSideEffects(CheckLevel level)  { this.
CheckSideEffects(CheckLevel ) *
 { public void
 private <?>
CheckSideEffects(level) { *
 private final
 private void
 private static void
CheckSideEffects(level test) {
 private static class
CheckSideEffects(CheckLevel ); *
CheckSideEffects(Node n) {
 public Check(CheckLevel level) {
CheckSideEffects(CheckLevel level)  throws Exception { *
CheckSideEffects { *
CheckSideEffects(CheckLevel level)  throws Error {
 void
CheckSideEffects(level); { return
 public visit(CheckLevel level) {
CheckSideEffects(CheckLevel level)  throws Error { return
 public check(CheckLevel level) {
CheckSideEffects { return
CheckSideEffectsImpl.
CheckSideEffects(CheckLevel level)  { this;
CheckSideEffects(CheckLevel level) {}
CheckSideEffects(CheckLevel level) ;
CheckSideEffectsImpl =
 new
 } else{
 } #{
CheckSideEffects(null) {
 } } #{
 } } else{
 } static #{
CheckSideEffects(CheckLevel level)  {} return
 switch(CheckLevel level) {
 } static *{
 with(CheckLevel level) {
 while(CheckLevel level) {
