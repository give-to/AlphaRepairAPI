String msg = "This code lacks side-effects. Is there a bug?";
 msg ="This code lacks side-effects. Is there a bug?";
 else {
String  msg = "" ;
 else { return ; }
 String msg;
String  msg = n. getText ( ) ;
 else { return ; } }
String  msg = n. getString ( ) ;
 else if (n.getType() == Token.STRING) { if (n.getType() == Token.COMMA) {
 else if (n.getType() == Token.COMMA) {
 else { String msg ="This code lacks side-effects. Is there a bug?";
 else if (n.getType() == Token.COMMA) { if (n.getType() == Token.STRING) {
 else if ( n instanceof String ) {
 else if (n.getType() == Token.COMMA) { if (n.getType() == Token.BLOCK) {
 else { return ; } } }
 else if (NodeUtil.isFunctionNode(n)) {
 else if (n.getType() == Token.COMMA) { if (n.getType() == Token.STRING)
 else if (n.getType() == Token.STRING) {
 else if (n.getType() == Token.STRING)
 else if (n.isAnnotationNode(n)) {
String  msg = "Unknown" ;
 } else {
 else if (n.getType() == Token.STRING) { return; } else {
 else if (NodeUtil.isStringNode(n)) {
 else if (n.getType() == Token.STRING) { if (n.getType() == Token.STRING) {
 else if (NodeUtil.isString(n)) {
 else { return ; } } else {
 else { String msg = n. getText ( ) ;
 else if (n.getType() == Token.COMMA) { return; } else {
String  msg = n. getMessage ( ) ;
 else if (n.getType() == Token.COMMA) { if (n.getType() == Token.COMMA) {
String  msg = null;
 else if (n!= null) { msg= "This code lacks side-effects. Is there a bug?";
 else if (NodeUtil.isStringNode(n)) { String msg = "" ;
 else if (NodeUtil.isComment(n)) {
 else if (n.isSymbolNode(n)) {
 else if (n.getType() == Token.STRING) { if (n.getType() == Token.STRING)
 else if ( n!= parent ) {
 else if (n.getType() == Token.COMMA) { if (n.getType() == Token.TEXT) {
 else if (n.getType() == Token.STRING) { return ; }
 else if (n.getType() == Token.COMMA) { if (n.getType() == Token.TEXT)
 else if (n.isIdentifierNode(n)) { var msg = "" ;
 else if ( n instanceof Comment ) {
 else if (n.getType() == Token.COMMA) { return ; }
 else if (n.getType() == Token.COMMA) { if (n.getType() == Token.NUMBER)
String  msg = n. getContent ( ) ;
 else if (NodeUtil.isFunctionNode(n)) { final
 else if (n.getType() == Token.STRING) { if (n.getType() == Token.NUMBER)
 else if (NodeUtil.isSymbolNode(n)) { return ; }
 if (n!= null) { msg= "This code lacks side-effects. Is there a bug?";
 else if (n.isAnnotationNode(n)) { final
 else if (n.isIdentifierNode(n)) { String msg = "" ;
String  msg = "Unknown error.";
 else if (NodeUtil.isStringNode(n)) { } else
 else if ( n instanceof CodeNode ) {
 else if (n.getType() == Token.STRING) { msg = "..." ; }
 else if (n.getType() == Token.COMMA) { return ; } } }
 else if (NodeUtil.isSymbolNode(n)) { final
 else if (n.isSymbolNode(n)) { final
 else if (n!= null) { String msg= "This code lacks side-effects. Is there a bug?";
 } } else {
 else if (NodeUtil.isStringNode(n)) { String msg = "Unknown" ;
 else if (n.isSymbolNode(n)) { return; }
 else if (n.getType() == Token.TEXT)
 else if (n.isAnnotationNode(n)) { return; }
 else if (NodeUtil.isExpressionNode(n)) { return; } }
String  msg = n. getValue ( ) ;
String  msg = n. getSourceText ( ) ;
 else if (n.getType() == Token.COMMA) { return ; } } else {
 else if (n.getType() == Token.COMMA) { if (n.getType() == Token.STR)
 else if (n.isSymbolNode(n)) { if (n.isAnnotationNode(n)) {
 else if (n.getType() == Token.COMMA) { if (n.getType() == Token.NL)
 else if (NodeUtil.isFunctionNode(n)) { return; }
 else if (n.getType() == Token.STRING) { if (n.getType() == Token.TEXT)
 else if (n.getType() == Token.COMMA) { return; } else { return ; }
 else if (n.getType() == Token.STRING) { return; } final
 else if (n.getType() == Token.COMMA) { if (n.getType() == Token.NAME)
 else if (n instanceof Comment) { msg= "This code lacks side-effects. Is there a bug?";
 else if (n == null) { msg= "This code lacks side-effects. Is there a bug?";
 else if (n.isIdentifierNode(n)) { String msg = "Unknown" ;
 else if (NodeUtil.isStringNode(n)) { String msg = null ;
 else if (n.getType() == Token.COMMA) { return; } final
 else if (n == null) msg ="This code lacks side-effects. Is there a bug?";
 else if (n.getType() == Token.STRING) { msg = "..." } else
 else if (n.isIdentifierNode(n)) { String msg = "Unknown identifier." ;
 else if (n.getType() == Token.COMMA) { return; } }
 else if ( n!= null ) {
 else if (n.isIdentifier(n)) { var msg = "" ;
 else if (n!= null) msg ="This code lacks side-effects. Is there a bug?";
 else { return ; } } } else {
 else if ( n == parent ) {
 else { String msg = n. getString ( ) ;
 else { String msg = "";
String  msg = "Unknown error" ;
 else if (n.getType() == Token.STRING) { return; } else { final
 else if (n.getType() == Token.COMMA) { return; } else { final
 else if (n.getType() == Token.STRING) { if (level > 0) {
 else if (n.isIdentifier(n)) { String msg = "" ;
 else if (n.isIdentifierNode(n)) { msg = "" ;
 else if (n.getType() == Token.STRING) { if (n!= parent) {
 else { final
String msg = "This code lacks side-effects. Is there a bug?" + n. getType ( ) + "";
 else if (n.getType() == Token.COMMA) { return; } } } else {
 else if (n == null) { String msg= "This code lacks side-effects. Is there a bug?";
 else if (n.isSyntaxError())) {
String msg  = n. getFullDescr ( ) ;
 else if (n!= parent) { msg= "This code lacks side-effects. Is there a bug?";
 else if (n.isSymbolNode(n)) { return; } final
 if (n == null) { msg= "This code lacks side-effects. Is there a bug?";
 else if (n == parent) { msg= "This code lacks side-effects. Is there a bug?";
 else if (n.isSymbolNode(n)) { return; } }
 else { String msg = n. getMessage ( ) ;
String msg = "This code lacks side-effects. Is there a bug?" ; if (n!= null) {
 } else if ( n instanceof CodeNode ) {
 else if (n.isLineBreak()) {
 else if (n.getType() == Token.STRING) { if (n.isEmpty()) {
 else if (n.isAnnotationNode()) {
String msg = "This code lacks side-effects. Is there a bug?" ; if (level > 0) {
 else if (NodeUtil.isSymbolNode(n)) { if (n.isAnnotationNode()) {
 else if (n.getType() == Token.STRING) { if (level > 0) { final
String msg = "This code lacks side-effects. Is there a bug?" ; if (debug) {
 else if (n.getType() == Token.STRING) { if (n.isLineBreak()) {
 else if (n.isSymbolNode(n)) { if (n.isAnnotationNode(t)) {
 else if (n.getType() == Token.COMMA) { if (n.isEmpty()) {
 else if (NodeUtil.isSymbolNode(n)) { if (n.isSideEffects()) {
 } } } else {
String msg = "This code lacks side-effects. Is there a bug?" ; if (level == Level.ERROR) {
 else if (n.getType() == Token.COMMA) { if (n.isAnnotationNode())) {
 else if (n.isLineBreak())) {
String msg =  n. getType ( ) + " " ;
 else { if ( n instanceof CodeNode ) {
 else if (n.getType() == Token.STRING) { if (n.isAnnotationPresent())) {
 else if (n.getType() == Token.COMMA) { if (n.isAnnotationNode()) {
 else if (NodeUtil.isMemberNode(n)) { if (n.isAnnotationNode() ) {
String  msg = n. getString ( ) ; else
 if (n!= parent) { msg= "This code lacks side-effects. Is there a bug?";
 else if (n.getType() == Token.STRING) { if (n.isComment()) {
 else if (n.getType() == Token.STRING) { if (n.isComment())) {
 if (n!= null) { String msg= "This code lacks side-effects. Is there a bug?";
 else if (n.getType() == Token.STRING) { if (n.isAnnotationPresent()) { final
 else { String msg = n. getFullDescr ( ) ;
 else if (n!= null) { String msg;
 else if (NodeUtil.isStringNode(n)) { String msg = "" ; else
 else if (n.isAnnotationNode(n))
 else if (n!= parent) { String msg= "This code lacks side-effects. Is there a bug?";
 else { String msg = "There is no " + n + "." ;
 else if (n.getType() == Token.COMMA)) {
 else if (NodeUtil.isAnnotationNode(n)) { } }
 else if (n.getType() == Token.STRING) { if (level > 1) { final
 else { throw JSError msg ="This code lacks side-effects. Is there a bug?";
 }
 else { String msg = "An error occured." ; } else
 else if ( n. isCodeNode ) {
 else if (n.getType() == Token.COMMA) { return; } else { } }
String msg  = n. getSource ( ). msg ;
 else if (n.isComment()) msg ="This code lacks side-effects. Is there a bug?";
 if (n == parent) { msg= "This code lacks side-effects. Is there a bug?";
 else if (n.getType() == Token.STRING) { return; } else { } }
 else { final String msg = "";
String  msg = "Unknown error message" ;
 else { String msg = "An error occured" ; } else
String  msg = "Unknown Error" ;
 else if (n) { msg ="This code lacks side-effects. Is there a bug?";
String msg = "This code lacks side-effects. Is there a bug?" + n. getType ( ) ;
 else { throw new RuntimeException();
 else if (n.isAnnotationNode(n)) { } }
 else if (NodeUtil.isStringNode(n)) { String msg = "" ; }
 else if (NodeUtil.isStringNode(n)) { var msg = "" ; else
 else { String msg = "Unknown ";
String  msg = n. getText ( ) ; else
 else { String msg = "An error occurred while visiting the child.";
 else if (n.isIdentifierNode(n)) { String msg = "" ; else
 else if (n.isCallNode()) {
 else { String msg = u"This code lacks side-effects. Is there a bug?";
 if ( n!= parent ) {
 else { return ; } final
String msg  = n. getSource ( ). message ;
 else { String msg = n. getType ( ) + " " ;
String  msg = "Unknown.";
 else if (n.isString()) {
 else if (n instanceof CodeNode) {msg = "This code lacks side-effects. Is there a bug?";
 else { String msg = "Unknown error";
String  msg = n. getMessage ( ) ; else
 if ( n!= null ) {
String  msg = '+' ;
 } else { return ; }
String msg = "This code lacks side-effects. Is there a bug?" + n. getType ( ) + ";
 else { String msg = "Unknown error.";
 else { String msg = "There is no " + n + "";
 else if (n.isCode()) msg= "This code lacks side-effects. Is there a bug?";
 } else { String msg ="This code lacks side-effects. Is there a bug?";
 else { return ; } } else { final
String  msg = "Unknown error!";
 else { String msg = "?";
 else { String msg = n. getString ( ) ; else
 else if (n.isIdentifier(n)) { var msg = "" ; else
 else { String msg = null;
 else if (n.isAnnotationNode()) { final
 } else { final
 else { String msg = "There is no " + n. value ; else
 else { String msg = "An unknown error occured." ; else
 else { String msg = "Unknown " + n;
 else { String msg = "There is no " + n + ";
 else { String msg = "An error occured." ; else
 else { continue ; } }
 else { String msg = n. getString ( ) ; }
 else { String msg = n. getFullText ( ) ; else
String msg = "This code lacks side-effects. Is there a bug?" ; n. getType ( ) ; } else
String msg  = n. getFullText ( ) ; else
 else { String msg = "There is no " + n. value ; }
 else { String msg = "An error occurred." ; else
String  msg = n. getContent ( ) ; else
String msg = "This code lacks side-effects. Is there a bug?"; } else
 final String msg = "";
 else { String msg = "Unknown operator.";
 else { String msg = "Unknown operator";
 else if (NodeUtil.isStringNode(n)) { } }
 else { String msg = "An unknown error occurred." ; else
 } else { String msg = "";
 else { continue ; }
 else { String msg = ' ';
String msg = "This code lacks side-effects. Is there a bug?" + n. getType ( ) + "\";
 else { String msg = "Unknown error: ";
 else { String msg = n. getText ( ) ; else
String msg =  n. getType ( ). value ; else
 else { final String msg ="This code lacks side-effects. Is there a bug?";
String msg =  n. getType ( ). name ; else
 else { throw JSError("This code lacks side-effects. Is there a bug?";
String  msg = '' ;
 else { msg ="This code lacks side-effects. Is there a bug?";
 else { String msg = "Unknown type";
 else { String msg = "Missing ";
 else { String msg = "\n"This code lacks side-effects. Is there a bug?";
 else { String msg = "An error occurred." ; }
String msg  = n. getFirstChild ( ) ; else
 else { String msg = "Unknown operator type";
 else { String msg = "Error";
String msg = "This code lacks side-effects. Is there a bug?" + n. getType ( ) ; else
 else { String msg = "\t"This code lacks side-effects. Is there a bug?";
 else { String msg = "Unknown operator type.";
String msg = "This code lacks side-effects. Is there a bug?" ; if (DEBUG) {
 else { var msg = "";
 else { throw JSError(""This code lacks side-effects. Is there a bug?";
 if (noop) { msg= "This code lacks side-effects. Is there a bug?";
 } else { msg ="This code lacks side-effects. Is there a bug?";
 else { String msg = "\\"This code lacks side-effects. Is there a bug?";
 else { String msg = f"This code lacks side-effects. Is there a bug?";
 else { String msg = "" msg.= "This code lacks side-effects. Is there a bug?";
 else if (debug) { msg= "This code lacks side-effects. Is there a bug?";
 else { String msg = "Unknown error";msg = "This code lacks side-effects. Is there a bug?";
 else { String msg ; msg |= "This code lacks side-effects. Is there a bug?";
 else { } }
String msg =  n. getType ( ) + NL ; else
 } } else { final
 else { String msg = ""+"This code lacks side-effects. Is there a bug?";
 else return ; }
 else if (n.isComment()) {msg = "This code lacks side-effects. Is there a bug?";
 else if (n instanceof String) {msg = "This code lacks side-effects. Is there a bug?";
 var msg = "";
 else { String msg;
 else { String msg = ""x"This code lacks side-effects. Is there a bug?";
 else if (n.isComment())) {msg = "This code lacks side-effects. Is there a bug?";
String msg = "This code lacks side-effects. Is there a bug?" ; int level = 1 ;
String msg = "This code lacks side-effects. Is there a bug?" + n.getType().name; else
String msg = "This code lacks side-effects. Is there a bug?" ; n. getType ( ) ; else
 else { var msg ="This code lacks side-effects. Is there a bug?";
 final String msg = null;
String msg = "This code lacks side-effects. Is there a bug?" + n ; } else
 } String msg ="This code lacks side-effects. Is there a bug?";
 else { final String msg *= "This code lacks side-effects. Is there a bug?";
String  msg = "" ; else
String msg = "This code lacks side-effects. Is there a bug?" ; if (level > 0) { else
 else { final String msg;
 else { String msg = ""This code lacks side-effects. Is there a bug?";
String msg = "This code lacks side-effects. Is there a bug?" + n.getType()); else
 else { final String msg |= "This code lacks side-effects. Is there a bug?";
 final String msg;
String msg = "This code lacks side-effects. Is there a bug?" + n. getType ( ) ; }
 else if (msg) msg= "This code lacks side-effects. Is there a bug?";
 else { String msg = "Unknown error",msg = "This code lacks side-effects. Is there a bug?";
String msg = "This code lacks side-effects. Is there a bug?" ; } } else
String  msg = n. getText(); }
 String msg = "?";
 final String msg= "This code lacks side-effects. Is there a bug?";
 else { final String msg.= "This code lacks side-effects. Is there a bug?";
 else if (n) msg= "This code lacks side-effects. Is there a bug?";
 } }
 else { String msg ; msg.= "This code lacks side-effects. Is there a bug?";
 else if (n instanceof CodeNode) #msg = "This code lacks side-effects. Is there a bug?";
String msg = "This code lacks side-effects. Is there a bug?" ; if (debug) { else
 else { String _msg = "This code lacks side-effects. Is there a bug?";
String  msg = null ; else
 } } } }
 else { JSError_msg = "This code lacks side-effects. Is there a bug?";
 var msg ="This code lacks side-effects. Is there a bug?";
 else { JSError jmsg = "This code lacks side-effects. Is there a bug?";
String  msg; else
String msg = "This code lacks side-effects. Is there a bug?" + n + "";
String msg = "This code lacks side-effects. Is there a bug?" + n + ";
 else { final String _msg = "This code lacks side-effects. Is there a bug?";
String msg = "This code lacks side-effects. Is there a bug?" + n.line(); else
 else { String msg |= "This code lacks side-effects. Is there a bug?";
 } } }
 else { String msg *= "This code lacks side-effects. Is there a bug?";
 String msg = u"This code lacks side-effects. Is there a bug?";
String msg = "This code lacks side-effects. Is there a bug?"; else
 else { String msg.= "This code lacks side-effects. Is there a bug?";
 } else { String _msg = "This code lacks side-effects. Is there a bug?";
 final String msg = u"This code lacks side-effects. Is there a bug?";
 } } String msg= "This code lacks side-effects. Is there a bug?";
String msg = "This code lacks side-effects. Is there a bug?" + n); } else
 else { String smsg = "This code lacks side-effects. Is there a bug?";
 else { String errormsg = "This code lacks side-effects. Is there a bug?";
 else { String cmsg = "This code lacks side-effects. Is there a bug?";
 else if (skip) {msg = "This code lacks side-effects. Is there a bug?";
 else { var _msg = "This code lacks side-effects. Is there a bug?";
 string msg ="This code lacks side-effects. Is there a bug?";
 final String msg *= "This code lacks side-effects. Is there a bug?";
 } } else { String _msg = "This code lacks side-effects. Is there a bug?";
 else { final String errormsg = "This code lacks side-effects. Is there a bug?";
 else { } String _msg = "This code lacks side-effects. Is there a bug?";
 } String msg;
String msg = "This code lacks side-effects. Is there a bug?" + n ; else
 } var msg ="This code lacks side-effects. Is there a bug?";
 else { final String cmsg = "This code lacks side-effects. Is there a bug?";
 } } else { String errormsg = "This code lacks side-effects. Is there a bug?";
 String msg *= "This code lacks side-effects. Is there a bug?";
 } String _msg = "This code lacks side-effects. Is there a bug?";
 else { }
 String msg |= "This code lacks side-effects. Is there a bug?";
 else { {
 String msg.= "This code lacks side-effects. Is there a bug?";
String msg = "This code lacks side-effects. Is there a bug?"); } else
String  msg; }
String msg = "This code lacks side-effects. Is there a bug?" + n ; }
 final
 int msg;
 var msg;
 StringBuilder msg;
 final String _msg = "This code lacks side-effects. Is there a bug?";
 } String errormsg = "This code lacks side-effects. Is there a bug?";
 String[] msg;
 } String cmsg = "This code lacks side-effects. Is there a bug?";
 string msg;
 String msg=""This code lacks side-effects. Is there a bug?";
 } else
 let msg= "This code lacks side-effects. Is there a bug?";
 String _msg = "This code lacks side-effects. Is there a bug?";
String  msg();
String  msg++;
 } final
String  msg(); else
String msg = "This code lacks side-effects. Is there a bug?"; }
 String errormsg = "This code lacks side-effects. Is there a bug?";
 String smsg = "This code lacks side-effects. Is there a bug?";
 String msg ";
 message ="This code lacks side-effects. Is there a bug?";
 msg=""This code lacks side-effects. Is there a bug?";
 msg=("This code lacks side-effects. Is there a bug?";
 else
String Msg;
 String str;
 String _= "This code lacks side-effects. Is there a bug?";
 StringMsg= "This code lacks side-effects. Is there a bug?";
String msg ; "This code lacks side-effects. Is there a bug?";
String msg := "This code lacks side-effects. Is there a bug?";
