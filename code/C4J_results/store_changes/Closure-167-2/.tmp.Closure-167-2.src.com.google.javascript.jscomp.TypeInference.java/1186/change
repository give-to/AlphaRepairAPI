 return narrowed;
scope = narrowScope(scope, n,  narrowed);
scope = narrowScope(scope,  narrowed);
 scope = narrowed;
scope  = narrowed
scope = narrowScope(scope);
scope = narrowScope(scope, n, narrowed, propName);
scope =  narrowed ; break ;
scope = narrowScope(scope, n, narrowed, type);
scope = narrowScope ( narrowed )
 scope = scope. restrictByNotNullOrUndefined ( narrowed ) ;
scope = narrowScope(scope, n, propName);
 scope = scope. restrictByNotNullOrUndefined ( narrowed ) ;
 scope = scope. restrictByNotNullOrUndefined ( ) ;
scope =  scope. restrictByNotNullOrUndefined ;
scope = narrowScope(scope, propName, narrowed);
 scope = scope. restrictByNotNullOrUndefined ( narrowed )
scope = narrowScope(type, scope, n, narrowed);
 return narrowed);
scope = narrowScope ( scope, narrowed )
 scope = scope. restrictByNotNullOrUndefined ( )
 scope = narrowScope(scope, n, narrowed); } else {
scope = narrowScope(scope, n, narrowed) ; scope = narrowed ;
 scope = narrowScope(scope, n); } else { scope = scope ; } else {
 scope = narrowScope(scope, n); } else { scope = narrowScope(scope, n);
 scope. restrictByNotNullOrUndefined ( narrowed ) ;
 scope = FlowScope.narrowScope(scope, n, narrowed);
 scope = narrowScope(scope, n); } else { scope = narrowScope(scope, n); } if ( narrowed!= null ) {
 scope = narrowScope(scope, n); } else { scope = narrowScope(scope, n); } if ( type!= narrowed ) {
 scope = narrowScope(scope, n, narrowed); } else { scope = type ;
 scope. add ( narrowed ) ;
 scope = narrowScope(scope, n); } else { scope = narrowScope(scope, n); } if ( narrowed!= n ) {
 scope.scope= narrowScope(scope, n, narrowed);
 scope. restrictByNotNullOrUndefined ( narrowed )
 scope = narrowScope(scope, n, narrowed); } } else {
 scope = narrowScope(scope, type);
 scope = narrowScope(scope, n); } else { scope = narrowScope(scope, n); } } else { scope = n ;
 scope = narrowScope(scope, n); } else if (type == null || type == undefined) {
scope = narrowScope(scope, type, narrowed);
scope = narrowScope(scope, propName, n, narrowed);
 scope = narrowScope(scope, n, narrowed); } else { scope = scope ; } else {
scope = narrowScope ( scope, narrowed ) ; scope = narrowed ;
 scope = narrowScope(scope, n, narrowed); } } else { if ( type!= objType ) {
scope = narrowScope ( narrowed ) ;
scope = narrowScope ( scope, narrowed, n ) ;
 scope = narrowScope(scope, n, narrowed); } else if (type == null || type == undefined) {
 scope = narrowScope(scope, n, narrowed); } else { if (type == null) {
scope = narrowScope(scope, type, propName);
 scope. restrictByNotNullOrUndefined ( )
 scope = narrowScope(scope, n, narrowed); } } else { if ( n. isSymbol ( ) ) {
scope =  scope. restrictByNotNullOrUndefined();
 scope. restrictByNotNullOrUndefined ( narrowed ) ; }
 scope = narrowScope(scope, n); } else if (type == null) {
 scope = scope. narrowScope ( scope, n, narrowed ) ;
 scope = narrowScope(scope, n, narrowed); } else { scope = n ;
scope = narrowScope(scope, narrowed, type);
 scope = narrowScope(scope, n); } else { scope = narrowed ;
 scope = scope ; narrowed = type;
scope =  scope. restrictByNotNull ( narrowed )
 narrowed = narrowed. restrictByNotNullOrUndefined();
 scope = narrowScope(scope, n, narrowed); } } else { if ( n!= null ) { if ( narrowed!= null )
 scope = scope. restrictByNotNull(type);
 scope = narrowScope(scope, n); } } else { if ( n. isSymbol ) {
 narrowed = type.restrictByNotNullOrUndefined();
 scope = narrowScope(scope, n); } else { scope = n ;
 scope = narrowScope(scope, n); } else if (type == null || type == narrowed) {
 scope = narrowScope(scope, n, narrowed); } } else { if (n!= n, narrowed) {
 scope = narrowScope(scope, n, narrowed); } } else { if ( n. isNull ( ) ) {
scope =  scope. getScope ( narrowed ) ;
 scope. restrictByNotNullOrUndefined ( narrowed, type ) ;
 scope = narrowScope(scope, n, narrowed); } } else { if (n!= objType) {
 scope = narrowScope(scope, n, narrowed); } else { if ( type == narrowed ) {
 scope = narrowScope(scope, n, narrowed); } } else { if ( type == objType ) {
 narrowed = type.restrictByNotNullOrUndefined(); }
 scope = narrowScope(scope, n, narrowed); } else { if (type == null)
 scope = narrowScope(scope, n, narrowed); } } else { if ( n. isSymbol ) {
scope = narrowScope(scope, type, n, narrowed);
 scope = scope. dereferencePointer(n, narrowed);
 scope. restrictByNotNullOrUndefined();
 scope. restrictByNotNullOrUndefined ( narrowed. type ) ;
scope =  scope. restrictByType ( narrowed )
scope = narrowScope(scope, n, narrowed, type, propName);
 scope = narrowScope(scope, n, narrowed); } } else { if ( n. isSymbol ( )!= null ) {
scope = narrowScope(scope, scope, type, narrowed);
 scope = narrowScope(scope, n, narrowed); } else if (type == null || type. isNull ( ) ) {
 scope = narrowScope(scope, type, narrowed);
 narrowed = narrowed. restrictByNotNullOrUndefined(); }
 scope = scope. restrictByNotNullOrUndefined ( type ) ;
 scope = narrowScope(scope, n, narrowed); } else if (type == null || type == narrowed) {
 scope = narrowScope(scope, n, narrowed); } } else { if (n == null || n. isUndefined()) {
scope = narrowScope(scope, n, type, propName);
scope =  scope. restrictBy ( narrowed )
 scope = narrowScope(scope, n); } else if (type == null || type == -1) {
scope = narrowScope(scope, scope, propName);
scope = narrowScope ( scope, narrowed, propName ) ;
 scope. restrictByNotNullOrUndefined;
 scope = narrowScope(scope, n, narrowed);
 scope. restrictByNotNullOrUndefined = narrowed
scope = narrowScope(scope, scope.getScope ( ));
 scope.addPointer(narrowed);
scope =  dereferencePointer(scope, n, narrowed);
 scope = narrowScope(scope, n, narrowed); } } else { if (n == null || n. isFunction()) {
scope = narrowScope(scope, n, narrowed) ; scope = narrowed ; break ;
scope = narrowScope(scope, scope, type, propName);
 scope = scope. restrictByNotNullOrUndefinedScope ;
 scope = scope. restrictByNotNullOrUndefined ( type);
 extend(scope, narrowed);
 scope.replace(type, narrowed);
 scope = JSType.narrowScope(scope, n, narrowed);
 scope. remove ( narrowed ) ;
 scope = narrowScope(scope, narrowed);
 scope = narrowScope(scope, n, narrowed); } } else { if ( n!= n ) { narrowed = type ;
 scope. restrict ( narrowed )
 scope = scope. restrictByNotNullOrUndefinedType ;
scope =  scope. restrictByNotNull ( narrowed ) ;
 scope. restrictByNotNullOrUndefined = narrowed ;
 scope.add(type);
 scope = narrowScope(scope, n, narrowed); } } else { if (n!= n) { scope = n ;
 scope = narrowScope(scope, n, narrowed); } else
 scope = narrowScope(scope, n, narrowed); } } else { if (n == null || n. isNull ( ))
scope =  scope. restrict ( narrowed )
 scope = narrowScope(scope, n, narrowed); } } else { if ( n!= n ) { narrowed = n ;
 scope. restrictByNotNullOrUndefined();
 scope.getScope(qualifiedName)= narrowScope(scope, n, narrowed);
 scope = narrowScope(scope, n, narrowed); } } else { if (n.isSymbolName()) {
scope =  scope. restrictByType ( narrowed ) ;
scope = narrowScope ( scope, narrowed ) ; }
 scope = narrowScope(scope, type); scope= narrowScope(scope, n, narrowed);
 scope = narrowScope(scope, n); } else { scope = narrowScope(scope, n); }
 scope = scope ; } else {
scope =  narrowed ; break ; }
 scope = scope. restrictByNotNull ( narrowed, type ) ;
 scope = narrowScope(scope, n); scope= narrowScope(scope, n, narrowed);
 scope = narrowScope(scope, scope); scope= narrowScope(scope, n, narrowed);
scope = narrowScope. restrictByNotNullOrUndefined ( )
 scope = scope. replacePointer(n, narrowed);
scope = narrowScope(objType, n, narrowed);
scope = narrowScope(scope, type, propName, narrowed);
scope = narrowScope(scope, scope.getScope(type));
scope = narrowScope(scope, n,  narrowed); scope = narrowed ; }
scope = narrowScope. restrictByNotNullOrUndefined ;
scope = narrowScope(scope, n, narrowed) ; scope = scope. getParent ( ) ;
scope = narrowScope(scope, n, narrowed) ; } else { scope = scope ; break ;
scope =  scope. getScope ( ) ;
scope = narrowScope ( scope, narrowed, type )
 scope.matchConstraint(narrowed);
scope = narrowScope(scope, n,  narrowed); scope. addScope ( scope ) ;
 scope. addScope ( narrowed ) ;
 scope.setSlot(n, narrowed);
 scope = narrowScope(scope, narrowed); scope= narrowScope(scope, n, narrowed);
 scope = narrowScope(scope);
 scope = scope. restrictByNotNullOrUndefined ; }
 scope.setPointer(n, narrowed);
 scope = narrowScope(scope, n); } else { scope = narrowScope(scope); }
 scope = scope. restrictByNullOrUndefined(scope, n, narrowed);
scope = narrowScope(scope, narrowed); scope = narrowed ; }
scope = narrowScope ( scope, narrowed ) ; narrowed = type ;
 scope. add ( narrowed ) ; scope = narrowed ;
 scope = narrowScope(scope, n); } else { scope = narrowScope(scope, n); } else { scope = n ; }
scope = narrowScope. restrictByNotNullOrUndefinedScope ;
 scope. push ( narrowed ) ;
scope = narrowScope(scope, n, narrowed) } else { scope = narrowScope(scope);
scope = narrowScope(scope, n,  narrowed); scope. setType ( narrowed ) ;
scope = narrowScope(scope, narrowed); scope. add ( n ) ;
 scope = narrowScope(scope, n); } else { scope = scope (n); }
 scope. restrictByNotNullOrUndefined |= narrowScope(scope, n, narrowed);
scope = narrowScope(scope, n, narrowed); scope = scope. getScope ( ) ;
 scope. restrictByNotNullOrUndefined --;
scope = narrowScope ( scope, narrowed ) ; return narrowed ;
scope = narrowScope(scope, narrowed); scope = narrowed ; break ;
scope = narrowScope ( scope, scope, narrowed, type ) ;
 scope. restrictByNotNullOrUndefined= narrowScope(scope, n, narrowed);
 scope.scope = narrowed;
scope = narrowScope(scope, n); scope. add ( narrowed ) ;
scope =  scope. add ( narrowed ) ;
scope = narrowScope ( scope, narrowed ) ; break ; }
scope = narrowScope(scope, n, narrowed) ; } else { scope = n ; break ;
scope = narrowScope(scope, n); scope. restrictByNotNull = narrowed ;
scope = narrowScope(scope,  narrowed); scope. addScope ( scope ) ;
 scope = scope. restrictByType(type);
scope = narrowScope(scope, narrowed); break ;
 scope = scope. restrictByNotNullOrUndefined ;
scope = narrowScope(scope, n); scope. restrictByNotNull ( narrowed )
 scope.narrowScope(scope, n, narrowed);
scope =  scope. addScope ( narrowed ) ;
 scope. remove ( narrowed ) ;
scope = narrowScope(scope, n,  narrowed); scope. add ( n ) ;
 scope = narrowScope(scope, scope);
 scope. restrictByNotNullOrUndefined ( narrowed ) ; } }
 scope. restrictByNotNull ( narrowed )
 scope. detach ( narrowed ) ;
 scope. narrowed = narrowed;
 scope. add ( narrowed )
scope =  scope. merge ( narrowed ) ;
scope =  scope. merge ( narrowed )
scope = narrowScope(scope, type, scope, n, narrowed);
 scope = narrowScope(scope, n);
 scope = scope. restrictByNotNullOrUndefined(); }
scope = narrowScope(objType, scope, n, narrowed);
 scope.reference(n, narrowed);
 scope. removePointer ( n ) ;
 scope = scope. clone ( ) ;
 scope. restrictByNotNullOrUndefined type;
 scope. restrictByType = narrowed;
scope = narrowScope ( scope, narrowed, n )
 scope. addRef ( narrowed ) ;
 scope. restrictByType = narrowed ;
 scope. restrictByNotNull = narrowed;
 narrowed = type.restrictByNotNullOrUndefined;
scope =  scope. restrictByNotNullOrUndefined
scope =  scope. restrictByNonNull ( narrowed )
 scope = scope. restrictByNotNullOrUnknown(scope, n, narrowed);
 scope. restrictByType ( narrowed )
 scope = scope. dereferencePointer(scope, n, narrowed);
scope = narrowScope(type, propName, scope, n, narrowed);
scope = narrowScope(scope, n, narrowed) ; } else { scope = undefinedScope ;
scope = narrowScope(scope,  narrowed); scope. setType ( type ) ;
scope = narrowScope(scope, n,  narrowed); scope. shrink ( ) ;
scope = narrowScope(scope, scope); scope = narrowed ; break ;
scope = narrowScope(scope, n, narrowed) ; scope = scope. clone ( ) ;
scope = narrowScope(scope, n); scope. restrictByType = narrowed ;
scope = narrowScope(scope, n,  narrowed); scope = scope. restrict ( narrowed )
scope = narrowScope(scope, scope, propName, narrowed);
 scope.addProperty (propName, narrowed);
scope = narrowScope(scope, n, narrowed) ; scope. detach ( ) ;
 scope. restrictByNotNull = narrowed ;
 scope = scope. restrictByType = narrowed;
scope = narrowScope. getScope ( scope ) ;
 scope.addProperty(n, narrowed);
 scope. restrictByNotNull ( narrowed ) ;
scope =  narrowed. scope ;
 scope[propName]= narrowScope(scope, n, narrowed);
scope = narrowScope(scope, n, narrowed); scope = scope. restrictBy ( narrowed )
scope = narrowScope(scope, n, narrowed) ; } else { scope = scope. parent ;
scope = narrowScope(scope, n, type, narrowed);
 scope. addType ( narrowed ) ;
 scope = narrowScope(scope, n); } else { scope = narrowed; }
scope = narrowScope(scope, n, narrowed) ; break ;
scope =  scope. restrictByNullOrUndefined ;
scope = narrowScope(scope, scope); scope = narrowed. scope ;
 scope. = narrowed;
scope =  scope. remove ( narrowed ) ;
 scope = scope. restrictByNotNull ( type, narrowed);
scope = narrowScope(scope, n,  narrowed); scope = scope. get ( ) ;
 scope.addConstraint(narrowed);
scope = narrowScope(scope, n, narrowed) ; narrowed = type ;
scope = narrowScope(scope, scope, narrowed, propName);
 scope.replace(n, narrowed);
 extend(scope, n, narrowed);
scope = narrowScope ( scope, scope, narrowed ) ;
 scope. addProperty ( propName, n, narrowed);
 scope. restrictByNotNullOrUndefined narrowed;
 scope = scope. restrictByNotNull ( );
 scope = narrowScope(scope, type); } else
scope = narrowScope(scope, n, narrowed) ; } else { scope = n ;
 narrowed = narrowed. restrictByNotNullOrUndefined;
 scope. addDereferencePointer(n, narrowed);
 scope. restrictBy ( narrowed )
 scope = narrowScope(scope, type, narrowed); }
 extend(n, narrowed);
 scope = scope. replace ( propName, narrowed);
 scope. addProperty ( narrowed ) ;
 scope = scope. narrowScope ( ).narrowScope(scope, n, narrowed);
 scope = scope. restrictByNotNullOrEmpty;
 scope.addPointer(n, narrowed);
 scope = scope. restrictByType ( narrowed;
 scope = scope. restrictByType ( );
 scope.replacePointer(n, narrowed);
 scope.setPointer(narrowed);
 scope = narrowScope(scope, n); } else { scope = scope ; } }
scope =  scope. withType ( narrowed ) ;
 scope.remove(type);
 scope = narrowScope(scope, n, narrowed); } } else { if (n!= n) { scope = n ; }
 scope = scope. restrictByNotNullOrDefault(scope, n, narrowed);
scope = narrowScope(scope,  narrowed); scope. setType ( narrowed ) ;
 scope = narrowed ; } else { scope= narrowScope(scope, n, narrowed);
 scope = scope. restrictByNotNullOrEmpty(scope, n, narrowed);
scope = narrowScope(scope, type, narrowed, n);
scope =  scope. withScope ( narrowed ) ;
scope =  scope. restrictByNonNullOrUndefined ;
scope = narrowScope(scope, type narrowed);
scope = narrowScope(scope,  narrowed); scope = scope ; narrowed = type ;
 scope = scope. addProperty ( propName, n, narrowed);
 scope.matchConstraint(type);
 scope = scope. setJSType(n, narrowed);
scope = narrowScope(scope, n,  narrowed); scope. add ( scope ) ;
 scope. getScope ( n )= narrowScope(scope, n, narrowed);
scope = narrowScope(scope, narrowedType);
scope = narrowScope(scope,  narrowed); scope = scope. clone ( ) ;
 scope.matchPointer(narrowed);
 scope = scope. addPropertyType ( propName, n, narrowed);
scope = narrowScope(scope, narrowed); scope = narrowed. owner ;
 scope = scope. addPointer(n, narrowed);
 scope. shrink ( ) ;
 scope = scope. setPointer(n, narrowed);
scope = narrowScope ( scope ) ; scope = narrowed ; }
 scope.addType(type);
 scope. detach ( ) ;
scope = narrowScope. getScope ( ) ;
 scope = scope. restrictByNotNull ( type, n, narrowed);
scope =  narrowed ; return narrowed ;
 scope = scope ; narrowed = narrowed;
scope = narrowScope(scope, n, narrowed) ; } else { scope = n ; }
 scope = scope. restrictByNonNull(type);
 scope = narrowScope(scope, n, narrowed); } else if (type == null || type == undefined) { *
scope = narrowScope(scope, narrowed); scope. add ( type ) ;
 scope = scope. addProperty ( propName, narrowed);
scope = narrowScope(scope, n,  narrowed); scope. add ( type ) ;
 scope = scope.getScope(type);
 scope = narrowScope(scope, n); } else
 scope = narrowScope(scope, n, narrowed); } } else { if ( n!= n ) { narrowed = n ; }
 scope.set(n, narrowed);
scope = narrowScope(scope, narrowed), type);
 scope. restrictByType (type); scope= narrowScope(scope, n, narrowed);
scope = narrowScope(scope, n); scope. restrictByNotNull ( narrowed);
 scope.setPointer(type);
scope = narrowScope(scope, n, narrowed) ; return narrowed ;
 scope = narrowScope(scope, n, narrowed); } else { scope = scope ; } }
 scope. getScope ( type ) |= narrowScope(scope, n, narrowed);
 scope.matchType(type);
scope = narrowScope(scope, n); scope. restrictByType ( narrowed )
scope = narrowScope(scope, scope, type, narrowed, n);
 scope = scope. narrowScope ( ) ;narrowScope(scope, n, narrowed);
scope = narrowScope(scope, scope.getScope ()));
 scope = scope. resolve ( type, propName, n, narrowed);
 scope. type = narrowed;
scope = narrowScope(scope, scope.getType ( ));
scope = narrowScope(scope, narrowed, type, n);
scope = narrowScope. addScope ( scope ) ;
 scope. detach ( narrowed )
 scope = scope. resolvePointer(n, narrowed);
 scope = type.narrowScope(scope, n, narrowed);
 scope(type);
 scope = SyntacticScope.narrowScope(scope, n, narrowed);
 scope.add(n, narrowed);
 scope. getScope ( type )= narrowScope(scope, n, narrowed);
 scope = scope. restrictByNonNulls(n, narrowed);
 scope. setJSType(n, narrowed);
scope = narrowScope(scope, n ) ;
scope = narrowScope(scope, n, narrowed) ; scope. close ( ) ;
 scope = narrowScope(scope, n); } else { scope = scope (n); *
 scope = narrowScope(scope, n); } else { scope = narrowScope(scope); *
 scope.addPointer(type);
 Scope<JSType scope= narrowScope(scope, n, narrowed);
 scope = new DereferencePointer(scope, n, narrowed);
 setType(n, narrowed);
 scope.scope.scope= narrowScope(scope, n, narrowed);
 scope.addSlot(n, narrowed);
 scope. set ( type, n, narrowed);
scope = narrowScope(scope, narrowed), type;
 scope = scope. restrictByNotNull ( n, narrowed);
 scope.removePointer(type);
 scope = scope. restrictByNonNullOrUnknown(scope, n, narrowed);
 scope = scope. addDereferencePointer(scope, n, narrowed);
 scope = narrowScope(scope, n, narrowed); } else { scope = narrowed ; }
 scope. getScope ( type ) ; scope= narrowScope(scope, n, narrowed);
scope = narrowScope(scope, scope, narrowed, type, n);
 scope = scope. addPropertyType ( propName, narrowed);
 scope = scope. setSlot ( propName, narrowed);
scope = narrowScope(scope, scope.getScope(type)));
scope =  scope. detach ( narrowed )
 narrowed = type.restrictByNotNullOrUndefined(); } }
 scope = scope. restrictBy ( narrowed;
scope = narrowScope(scope, n,  narrowed.getType ( ));
scope = narrowScope(scope, scope, narrowed); break ;
 scope = narrowScope(scope, type); }
scope = narrowScope(scope, n, narrowed) ; scope = narrowed ; break ; }
 scope = scope. restrictByNonNullType(n, narrowed);
scope = narrowScope(scope, narrowed); scope = scope ; narrowed = type
 scope = scope. replaceType ( propName, narrowed);
 scope = scope. replace ( propName, n, narrowed);
 scope = scope. narrowScope ( scope, n, narrowed ) ; } else
 scope = scope. replace ( type, propName, narrowed);
 scope.ignore(type);
 scope.addScope(type);
scope = narrowScope(scope, narrowed); scope = scope ; break ; }
 scope.bind(n, narrowed);
 scope.removePointer(narrowed);
 scope = scope. restrictByNonNullness(n, narrowed);
 scope.scopeScope= narrowScope(scope, n, narrowed);
 scope.addRef(n, narrowed);
scope = narrowScope(scope.getScope ()));
 scope = scope. restrictBy ( propName, n, narrowed);
 scope = scope ; scope = _narrowScope(scope, n, narrowed);
 scope.addExpression(type);
 scope = scope. restrictBy (propName, narrowed);
 scope.setSlot(type, narrowed);
scope = narrowScope(scope, n,  narrowed); scope = narrowed. owner ;
scope = narrowScope(objType, propName, scope, n, narrowed);
 scope = scope. restrictBy ( );
 scope = scope. restrictByType ( propName, n, narrowed);
scope = narrowScope(type, propName, n, narrowed);
scope = narrowScope(scope, n,  narrowed); scope = scope ; break ; }
scope = narrowScope(scope, propName);
 scope = scope. restrictByNonNullOf(n, narrowed);
scope = narrowScopeScope ( scope ) ;
scope = narrowScope. remove ( narrowed ) ;
 scope. addPropertyType ( propName, n, narrowed);
 narrowed = type.restrictByNotNullOrUndefined(); } *
scope = narrowScope. add ( narrowed ) ;
scope = narrowScope(scope, n, narrowed) scope = narrowed ;
scope =  scope. remove ( narrowed )
 scope = scope.replacePointer(narrowed);
 scope [ n ]= narrowScope(scope, n, narrowed);
 narrowed = type. restrictByNull ( ) ;narrowScope(scope, n, narrowed);
scope = narrowScope(scope, narrowed, type); }
 scope = scope. restrictByTypeInferred(narrowed);
 scope = scope. resolveType ( propName, n, narrowed);
scope = narrowScope(scope, n); scope. restrictBy = narrowed ;
 scope.scope(n)= narrowScope(scope, n, narrowed);
 scope.addInferredProperty(narrowed);
scope = narrowScope(scope, n, propName, narrowed);
 scope = narrowScope(scope, narrowed); }
 scope = _narrowScope(scope, n, narrowed);
scope = narrowScope(scope, n); scope. restrictBy ( narrowed )
 scope = scope.withType(type);
 scope = scope ; return narrowed;
 scope.addScope(n, narrowed);
 scope.addNode(narrowed);
 scope.addReferenced (n, narrowed);
 scope = scope. restrictByNonNull ( type, n, narrowed);
 scope = scope.withNarrowed(narrowed);
 scope = narrowScope(scope, n); } else { scope = n ; }
scope = narrowScope ( scope )
 scope = scope. replaceByPointer(n, narrowed);
 scope = scope. restrictByNullOrUnknown(narrowed);
 scope. add ( propName, n, narrowed);
 scope. getScope ( type ). scope= narrowScope(scope, n, narrowed);
 scope = scope.addScope(type);
 scope. getScope ( )= narrowScope(scope, n, narrowed);
 scope = FlowScope#narrowScope(scope, n, narrowed);
 scope = scope. restrictByOrUndef(n, narrowed);
 scope = scope. restrictByNullOrEmpty(narrowed);
 scope. setPointer = narrowed;
 scope = scope. restrictToType(type);
 scope = scope. restrictByOrUndef(scope, n, narrowed);
 scope.set(type, narrowed);
 scope.throw(_);
 scope = scope. addReference ( propName, n, narrowed);
 scope.addProperty(type, n, narrowed);
 scope = narrowed ;
 scope.scope(narrowed);
 setType(narrowed);
scope = narrowScope(scope, n, narrowed) ; }
scope = narrowScope(scope, n, narrowed) ; break ; }
scope = narrowScope(scope, n); scope = narrowed ; }
 scope.removeSlot(type);
 scope.add(_);
 scope = scope. restrictByUnnarrowScope(scope, n, narrowed);
 scope.addInferredProperty(n, narrowed);
 scope. replace(type, n, narrowed);
 scope = scope. narrow ( );
scope = narrowScope(scope, type.name ( ), narrowed);
 scope = JSTypes.narrowScope(scope, n, narrowed);
 scope = scope. restrictByNonNulls(narrowed);
 scope = restrictByNotNullOrUnknown(scope, n, narrowed);
scope = narrowScopeOf ( narrowed ) ;
 scope.addReference (propName, narrowed);
 scope = new FlowScope(scope, n, narrowed);
 scope.addSlot(narrowed);
scope = narrowScope ( scope, narrowed ;
scope = narrowScope(scope, type, narrowed, true);
 scope.push(type);
 scope.addInferredPropertyType(narrowed);
scope =  narrowed ; }
scope = narrowScope(scope, scope, type, n, narrowed);
 scope. getScope ( type ) &= narrowScope(scope, n, narrowed);
 scope = (FlowScope) _narrowScope(scope, n, narrowed);
 scope =! narrowed;
 scope.addNode(n);
 scope = scope. addRef ( propName, n, narrowed);
 scope = scope. restrictByNotNullOrUndefined ( narrowed ) ; } else
 scope.defineProperty (propName, n, narrowed);
 extend(type, narrowed);
 scope = scope. narrowScope ( )_narrowScope(scope, n, narrowed);
scope = narrowScope(scope, n, narrowed) || scope = narrowed ;
 scope = scope. add ( propName, n, narrowed);
 scope = narrowScope(scope, n); } else { scope = narrowed; else
 scope = scope.addType(type);
scope = narrowScope(scope, scope, n, narrowed);
 scope = scope. restrictByNotNullOr(narrowed);
scope =  narrowed ; } break ;
 scope [ 0 ]= narrowScope(scope, n, narrowed);
 dereferencePointer(scope, n, narrowed);
 if (scope!= null)
 scope = scope. replace ( " ", narrowed);
 scope. restrictByNotNullOrUndefined ;
 scope = new ConditionalFlowScope(scope, n, narrowed);
 narrowed = type.restrictByType.narrowScope(scope, n, narrowed);
 scope = new FlowScope (propName,scope, n, narrowed);
 scope.addReference (propName, n, narrowed);
 scope = narrowScope(scope); scope |= narrowScope(scope, n, narrowed);
 return dereferencePointer(scope, n, narrowed);
 scope = scope. replace ( type, - 1);
scope = narrowScope(type, scope, scope, n, narrowed);
 scope.addInferredType(narrowed);
 scope = scope. parent ;
 scope = scope. restrictByExpression(n, narrowed);
scope = narrowScope(scope, scope, narrowed, type); }
scope = narrowScope(scope, scope.scope ( ), narrowed);
 scope = flowScope.narrowScope(scope, n, narrowed);
 scope = scope. restrictByNonNulls(scope, n, narrowed);
scope = narrowScope(scope, n, narrowed).break;
 scope = scope. narrowScope ( )#narrowScope(scope, n, narrowed);
 scope.reference(narrowed);
scope = narrowScope(scope, n, narrowedType);
scope = narrowScope(scope, narrowedScope);
 scope = scope ; scope = new UnnarrowScope(scope, n, narrowed);
 scope.remove(_);
 scope.addRef (type, n, narrowed);
 scope.getScope = narrowed;
 scope = scope. restrictByTypeReference(narrowed);
 scope.addReferenced (type, n, narrowed);
scope = narrowScope(type, narrowed, scope, n, narrowed);
 scope = scope. restrictToUnnarrowScope(scope, n, narrowed);
scope = narrowScope(type, scope, scope, scope, n, narrowed);
 scope = JSType_narrowScope(scope, n, narrowed);
 scope = scope.addPointer(narrowed);
scope = narrowScope(scope, n, narrowed.type ( ));
 scope = scope. replaceRef(n, narrowed);
 scope = new FlowScopeImpl(this.scope, n, narrowed);
 scope = restrictByNotNullOrEmpty(scope, n, narrowed);
 scope = (FlowScope) getnarrowScope(scope, n, narrowed);
 scope = setJSType(scope, n, narrowed);
scope = narrowScope(scope, type, null, n, narrowed);
 scope = scope. restrictByTypeInnarrowScope(scope, n, narrowed);
 scope = scope. restrictByOrUndefined(scope, n, narrowed);
 scope = scope. replaceNode(n, narrowed);
 scope. restrictBy = narrowed;
 scope = narrowed; } scope= narrowScope(scope, n, narrowed);
 scope = narrowScope(scope, type); else
 scope = scope. replaceInferredPropertyTypes(scope, n, narrowed);
 scope.getType = narrowed;
scope = narrowScope(scope, type, true, n, narrowed);
 scope = scope. narrow ( ).narrowScope(scope, n, narrowed);
 Scope scope = narrowed; Scope scope= narrowScope(scope, n, narrowed);
scope = narrowScope(scope, n, narrowed, type, constraint);
 scope = JSTree.narrowScope(scope, n, narrowed);
 scope = new FlowScopeImpl(scope, n, narrowed);
 scope = new FlowScope(objType.scope, n, narrowed);
scope = narrowScope(scope, n, narrowed.get ( ));
 scope = scope.withNewScope(narrowed);
 scope.throw narrowed);
 scope = scope. restrictByExpression(narrowed);
scope = narrowScope(scope, type, n, scope, narrowed);
scope = narrowScope. remove ( type ) ;
 scope = new JSType(scope, n, narrowed);
 scope = scope.addInferredProperty(narrowed);
 scopeScope= narrowScope(scope, n, narrowed);
 scope = new FlowScope(this.scope, n, narrowed);
 scope = narrowScope(scope, type); } }
scope = narrowScope(scope, n, narrowed, propName, type);
scope = narrowScope(flowScope, scope, n, narrowed);
scope = narrowScope(objType, type, scope, n, narrowed);
scope = narrowScope(scope, n, narrowed, type.getType());
 scope = new FlowScopeImpl(scope.scope, n, narrowed);
scope = narrowScope(slider);
scope = narrowScope(scope, narrowed, type); *
scope = narrowScope(type, scope, narrowed, scope, n, narrowed);
scope = narrowScope(scope, n, narrowed, type.length ( ));
 scope = scope. narrow ( ) ;narrowScope(scope, n, narrowed);
 scope. return narrowed;
 scope = scope. restrictBySymbol(narrowed);
 scope = new FlowScope(scope.scope, n, narrowed);
scope = narrowScope(scope, n, narrowed, type); }
 scope = restrictByNotNullOr undefined(scope, n, narrowed);
 scope = scope. addInferredProperty(scope, n, narrowed);
scope = narrowScope(scope, n, scope, propName);
 scope = scope.unwrapType(type);
scope . removeType();
 setJSType(scope, n, narrowed);
 scope.addSourceNode(narrowed);
 scope = newScope;
 scope = narrowed; }
 setType(scope, n, narrowed);
 return new FlowScope(scope, n, narrowed);
scope = narrowScope(scope, n, narrowed) || scope;
scope =  scope ; break ; }
scope = narrowScope(scope, n, narrowed) ; scope = narrowScope ;
scope = narrowScope(scope, n, type, narrowed, scope);
 scope = narrowedScope;
scope = narrowScope(scope, n, narrowed) ; type = narrowed ;
 scope = narrowScope(scope); }
 scope = scope. restrictByNonNullness(scope, n, narrowed);
 scope = new UnnarrowScope(scope, n, narrowed);
scope = narrowScope(scope, n, narrowed, type.name ( ));
 scope = scope. narrow ( )_narrowScope(scope, n, narrowed);
 scope.replaceType, narrowed);
 extend scope, narrowed);
 scope.addInferredPropertyTypes(narrowed);
scope = narrowScope(scope,! narrowed);
scope = narrowScope(scope), narrowed);
 extend(type);
scope = narrowScope(scope, n, narrowed, type, scope);
 scope = scope. restrictByTypeReference(n, narrowed);
 scope = scope. restrictByNonNull ($scope, n, narrowed);
 extendPropertyTypes(scope, n, narrowed);
 scope.break(_);
scope = narrowScope(scope), narrowed;
scope = narrowScope ( narrow ) ;
 scope.setType, narrowed);
 scope = TypeScope.narrowScope(scope, n, narrowed);
scope = narrowScopeScope ;
 scope = new FlowScopeImplImpl(scope, n, narrowed);
 scope.scope ()= narrowScope(scope, n, narrowed);
 narrowed = type. restrictByNull ( ) _narrowScope(scope, n, narrowed);
 narrowed = type. restrictByNotNull ; _narrowScope(scope, n, narrowed);
 restrict(type);
 narrowed = type. restrictByNull ( ).narrowScope(scope, n, narrowed);
scope = narrowScope(scope, typeScope);
 merge(type, narrowed);
scope = narrowScope ; }
 setType(type, narrowed);
 scope = IR.narrowScope(scope, n, narrowed);
 checkType(scope, n, narrowed);
scope =  narrowed. owner ;
 scope.reference (, narrowed);
 scope = narrowScope();
 scope = narrow.narrowScope(scope, n, narrowed);
 scope = narrowScope(scope); *
scope . detach ( )
 extend(narrowed);
scope = narrowScope(scope, n, narrowed, type.type ( ));
scope = narrowScope(scope, n, narrowed) || scope. narrowScope ;
 return getPropertyType(scope, n, narrowed);
 scope = new FlowScope(type.scope, n, narrowed);
scope = narrowScope(scope, n, narrowed) + scope;
scope = narrowScope(scope, refScope);
 scope = unnarrowScope(scope, n, narrowed);
 extendPointer(scope, n, narrowed);
scope = narrowScopeScope ( narrowed )
 scope = narrowed ; } else
 scope = new FlowScopeWrapper(scope, n, narrowed);
scope = narrowScope(scope, n, narrowed, type!= narrowed);
 type.narrowScope(scope, n, narrowed);
 scope = setExpression(scope, n, narrowed);
scope = narrowScope(scope, n, narrowed, type, true);
 scope = narrowed; scopeScope= narrowScope(scope, n, narrowed);
 scope = setScopeInScope(scope, n, narrowed);
 scope.addPointer(scope, n, narrowed);
 return(narrowed);
 return type, narrowed);
 return inferPropertyTypes(scope, n, narrowed);
scope = narrowScope(type, narrowed);
scope . addType ;
scope = narrowScope(scope, n, narrowed, type.get ( ));
scope = narrowScope(flowScope, n, narrowed);
scope = narrowScope(scope, n), narrowed;
scope = narrowScope(scope, n), narrowed);
 return type.narrowScope(scope, n, narrowed);
scope =  new Scope(scope, n, narrowed);
 scope = new ReflectionScope(scope, n, narrowed);
 scope = new UnboundFlowScope(scope, n, narrowed);
 set(n, narrowed);
 narrow(type);
 return (type);
 scope = new NonnarrowScope(scope, n, narrowed);
 scope = scope ; } else
 return new Scope(scope, n, narrowed);
scope = narrowScope(scope, n, narrowed, propName, scope);
scope =  narrowed ( scope )
 return scope; }
 assign(type, narrowed);
 extendType(scope, n, narrowed);
 merge(scope, n, narrowed);
 scope = newnarrowScope(scope, n, narrowed);
 scope = new ReferentialScope(scope, n, narrowed);
 setPropertyType(scope, n, narrowed);
 extendPropertyType(scope, n, narrowed);
scope = narrowScope(scope, n, narrowed) || scope = narrowed ; }
scope = narrowScope(objType, scope, scope, n, narrowed);
 return inferPropertyType(scope, n, narrowed);
 scope = narrowed; else
 setProperty(scope, n, narrowed);
 setValue(scope, n, narrowed);
 FlowScope.narrowScope(scope, n, narrowed);
 scope =
 break; }
 dereference(scope, n, narrowed);
scope = narrowScope(scope, n, narrowed, propName, true);
 JSType
 infer(scope, n, narrowed);
 scope = new FlowScopeReducer(scope, n, narrowed);
 definePropertyType(scope, n, narrowed);
 type = narrowed;
scope = narrowScope(scope, narrowed
 scope = narrowScope(scope)
 inferType(scope, n, narrowed);
scope = narrowScope(scope, n, narrowed, true);
 addProperty(scope, n, narrowed);
 extend(type, n, narrowed);
scope = narrowScope(scope, n, narrowed) break;
scope = narrowScope(scope), narrowed
 scope.addPropertyType(scope, n, narrowed);
 scope scope= narrowScope(scope, n, narrowed);
 scope = setScopeValue(scope, n, narrowed);
scope =  extend(scope, n, narrowed);
 inferProperty(scope, n, narrowed);
scope = narrowScope ( narrow )
 assignType(n, narrowed);
 scope = narrowScope(scope));
 return scope, n, narrowed);
scope = narrowScope(scope, type);
 addType(narrowed);
 addProperty(n, narrowed);
 assign(n, narrowed);
 setRef(n, narrowed);
 scope = narrowScope ;
 addType(n, narrowed);
scope = narrowScope(scope); }
scope = narrowScope(n, narrowed);
 definePropertyTypes(scope, n, narrowed);
scope =  addScope(scope, n, narrowed);
 scope = dereferencePointers(scope, n, narrowed);
scope = narrowScope(scopeScope);
 scopeScope(narrowed);
 return wrap(narrowed);
 bind(n, narrowed);
 scope |= narrowScope(scope, n, narrowed);
 extend type, narrowed);
scope = narrowScope(slided);
 scope(narrowed);
scope = narrowScope(scope, narrow);
 scope.(narrowed);
 assign(scope, n, narrowed);
 (scope, n, narrowed);
scope = narrowScope(scope, n,  narrowed); *
scope =  extendScope(scope, n, narrowed);
 this.addPropertyType(scope, n, narrowed);
 restrict(scope, n, narrowed);
 bind(scope, n, narrowed);
scope = narrowScope(propName, scope, n, narrowed);
 restrict(narrowed);
 return createFlowScope(scope, n, narrowed);
scope =  addSlice(scope, n, narrowed);
scope = narrowScopeScope ( narrowed);
 extend (, n, narrowed);
 setType, narrowed);
scope = narrowScope(scope, n, narrowed, refs);
scope = narrowScope(newScope);
 scope = scope= narrowScope(scope, n, narrowed);
 assign type, narrowed);
 this.scope= narrowScope(scope, n, narrowed);
scope =  narrowed break ;
 scope *= narrowScope(scope, n, narrowed);
 varScope= narrowScope(scope, n, narrowed);
 return; }
scope = narrowScope(scope, n, type narrowed);
scope = narrowScope(scope, objType, narrowed);
 merge(n, narrowed);
 builder.narrowScope(scope, n, narrowed);
 scope = narrow;
 scope = setScopeType(scope, n, narrowed);
scope = narrowScope(divider);
scope = narrowScope(opScope, n, narrowed);
 this.narrowScope(scope, n, narrowed);
 scope = addScopeRef(scope, n, narrowed);
scope = narrowScope(scope, n); }
scope = narrowScopeImpl ;
 return type, n, narrowed);
 extend scope, n, narrowed);
scope  = narrowed();
scope =  setScope(scope, n, narrowed);
scope =  narrowScope ;
scope =  narrowed ; break
 addToScopeImpl(scope, n, narrowed);
scope = narrowScope(opScope, scope, n, narrowed);
scope = narrowScope(scope, refScope, narrowed);
 narrowed = type;
scope = narrowScope(scope, propertyName, narrowed);
 scope.
scope = narrowScope(scope, n,! narrowed);
scope = narrowScope ( )
scope = narrowScope(type);
scope = narrowScope(scope, n, propertyName);
scope  += narrowed ;
 scope = narrowed();
scope = narrowScope break ;
scope = narrowScope(refScope, n, narrowed);
scope =  merge(scope, n, narrowed);
scope =  replace(scope, n, narrowed);
 return narrow);
 this.
 break(_);
scope =  addProperty(scope, n, narrowed);
 var = narrowed;
 ( narrowed);
 break();
scope = narrowScope(refs, scope, n, narrowed);
scope = narrowScope(scope, n, narrowed
scope  narrowed ;
 ScopeImpl
scope = narrowScope(scope, n,  type);
scope =  narrow ; }
scope  += narrowed
 break;
scope = narrowScope(scope); *
scope = narrowScope(scope, n, propertyType);
scope  = narrow
scope = narrowScope(scope, n); *
scope = narrowScope(scope, propertyType, narrowed);
scope = narrowScope(scopeImpl, n, narrowed);
scope = narrowScope(scope, n,  narrow);
 JSTree
scope = narrowScope(scope, n, narrowed, objType);
 return narrow;
scope  -= narrowed
scope = narrowScope(scope, n, narrowed, propertyName);
scope =  restrict(scope, n, narrowed);
scope = narrowScope(scope, n, narrowed, propertyType);
 throw narrowed;
scope = narrowScope(Scope);
scope = narrowScope(scope, n, narrowed) ; break
scope = narrowScope(scope, n, narrowed) } }
 return type;
scope =  combine(scope, n, narrowed);
 break outer;
scope = narrowScope(type, n, narrowed);
scope = narrowScope(scope, n,  narrowed)
scope =  widened ;
scope = narrowScope(Type, scope, n, narrowed);
scope = narrowScope(scope, n, narrowed, false);
scope = narrowScope(scope, n, narrowed, scope);
scope = narrowScope(scope, node, narrowed);
 *
scope = narrowScope(scope, n, narrowed, null);
scope = narrowScope(Scope, n, narrowed);
scope = narrowScope(scope, null, narrowed);
scope = narrowScope(this, scope, n, narrowed);
scope = narrowScope(span);
scope = narrowScope(scope, n, widened);
scope && narrowScope(scope, n, narrowed);
 return
scope = narrowScope(scope, n, narrower);
scope -> narrowScope(scope, n, narrowed);
