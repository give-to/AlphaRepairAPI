origType = origType == null ? getNativeType(UNKNOWN_TYPE) : origType;
 origType!== null ? getNativeType(UNKNOWN_TYPE) : origType;
origType = origType == null ? getNativeType ( ) :
 origType == null? getNativeType(UNKNOWN_TYPE) : origType;
 JSType
 origType = origType!== null ? getNativeType(UNKNOWN_TYPE) : origType;
 origType=origType;
origType = origType == null ?  origType :
origType = origType == null ? getNativeType(UNKNOWN_TYPE, type) : origType;
origType = origType == null ? getNativeType(UNKNOWN_TYPE); :
origType = origType == null ?  scope.getNativeType(UNKNOWN_TYPE) : origType;
origType = origType == null ? getNativeType(UNKNOWN_TYPE);
origType = origType == null ?  null :
origType = origType == null ? getNativeType(UNKNOWN_STRING) : origType;
origType = origType == null ?  origType = getNativeType(UNKNOWN_TYPE) : origType;
? getNativeType(UNKNOWN_TYPE) : origType;
origType = origType == null ? getNativeType(UNKNOWN_TYPE)  : type;
origType = origType ==  null? origType : origType ;
 origType = origType? getNativeType(UNKNOWN_TYPE) : origType;
origType = origType . getType ( ) ;
 origType = type!== null ? getNativeType(UNKNOWN_TYPE) : origType;
 origType = orig == null? getNativeType(UNKNOWN_TYPE) : origType;
 origType = origTypenull ? getNativeType(UNKNOWN_TYPE) : origType;
 type=origType == null ? getNativeType(UNKNOWN_TYPE) : origType;
origType = origType == null ? getNativeType ( type ) :
 type=origType;
origType = origType == null ? getNativeType(UNKNOWN_TYPE)  : origType ; case Token.USE:
? node.getNativeType(UNKNOWN_TYPE) : origType;
origType = origType == null ?  nativeType(UNKNOWN_TYPE) : origType;
 JSType type= origType == null ? getNativeType(UNKNOWN_TYPE) : origType;
 if (origType == null)? scope.getNativeType(UNKNOWN_TYPE) : origType;
origType = origType == null ? getNativeType(UNKNOWN_TYPE, qualifiedName) : origType;
origType = origType == null ? getNativeType(UNKNOWN_TYPE)  : origType ; case Token.TYPE:
origType = origType == null ? getNativeType ( UNKNOWN_TYPE ) :
origType = origType == null ? getNativeType(KNOWN_TYPE) : origType;
origType = origType ==  null? origType : type ;
 type=null ? getNativeType(UNKNOWN_TYPE) : origType;
origType =  (JSType) origType;
 origType = type ==null ? getNativeType(UNKNOWN_TYPE) : origType;
 if (origType == null) origType=origType;
 if (origType == null)?getNativeType(UNKNOWN_TYPE) : origType;
 JSType type = type!== null ? getNativeType(UNKNOWN_TYPE) : origType;
 if ( origType == null ) { origType = getNativeType(UNKNOWN_TYPE); }
 assert (origType == null) : origType;
origType =  (JSType) type;
origType = origType == null ? getNativeType(UNKNOWN_TYPE)  : origType.getType();
 if (origType == null)? nativeType(UNKNOWN_TYPE) : origType;
 if (origType)? getNativeType(UNKNOWN_TYPE) : origType;
 if (origType == null) origType =origType == null ? getNativeType(UNKNOWN_TYPE) : origType;
origType = origType == null ?  origType : origType. type ( ) ;
 assert (type == null) : origType;
 return origType == null? getNativeType(UNKNOWN_TYPE) : origType;
origType = origType == null ? getNativeType ( 'UNKNOWN_TYPE' ) :
origType = origType == null ?  origType = new JSType(UNKNOWN_TYPE) : origType;
 if ( origType == null ) { break ; }
origType = origType ==  null? origType : origType. type ;
origType = origType == null ? getNativeType(UNKNOWN_TYPE); : origType.getType();
 switch (node.getType()) { case NAME: origType;
 if ( origType == null ) { origType = getNativeType(UNKNOWN_TYPE); } else { JSType
 if ( origType == null ) { return null ; } } else { origType = node. getType ( ) ;
 if (origType == null) origType=null ? getNativeType(UNKNOWN_TYPE) : origType;
 origType = node == null? getNativeType(UNKNOWN_TYPE) : origType;
 return origType? getNativeType(UNKNOWN_TYPE) : origType;
origType = origType == null ?  origType = new getNativeType(UNKNOWN_TYPE) : origType;
? getType(UNKNOWN_TYPE) : origType;
 if ( origType == null ) { return null ; } } else { origType = node. getJSType ( ) ;
 if (origType == null) getNativeType(UNKNOWN_TYPE) : origType;
origType = origType == null ? getNativeType(Unknown_TYPE) : origType;
 case getNativeType(UNKNOWN_TYPE) : origType;
 if (origType == null) scope.getNativeType(UNKNOWN_TYPE) : origType;
 if ( origType == null ) { origType = getNativeType ( type ) ;
 if (origType == null)? type(UNKNOWN_TYPE) : origType;
origType = origType == null ?  origType = new GetNativeType(UNKNOWN_TYPE) : origType;
origType = origType == null ? getNativeType(UNKNOWN_TYPE)  : origType.type();
origType = origType == null ?  null : origType. getType ( ) ;
 if ( origType == null ) { return null ; } JSType
origType = origType == null ? getNativeType ( "UNKNOWN_TYPE" ) :
 if (origType == null) origType |= origType == null ? getNativeType(UNKNOWN_TYPE) : origType;
origType = origType == null ? getNativeType(UNKNOWN_TYPE)  : origType ; case Token.OBJECT:
origType =  type ;
 if ( origType == null ) { origType = getNativeType(UNKNOWN_TYPE); } else {
 if ( origType == null ) { break ; } case Token.TYPE:
origType = origType == null ? getNativeType(UNKNOWN_TYPE)  : origType ; case Token.STRING:
origType = origType == null ?  null : origType ; case Token.USE:
origType = origType == null ? getNativeType ( UNKNOWN_TYPE )
 if ( origType == null ) { return null ; } switch ( origType ) { default:
 if (origType == null) origType!== null ? getNativeType(UNKNOWN_TYPE) : origType;
origType =  new JSType ( origType ) ;
 if (origType == null) orig=origType == null ? getNativeType(UNKNOWN_TYPE) : origType;
 if (origType == null) { origType? getNativeType(UNKNOWN_TYPE) : origType;
 if ( origType == null ) { return null ; } } else { origType = node. getType(); }
 if ( origType == null ) { origType = getNativeType(UNKNOWN_TYPE);
 if ( origType == null ) { origType = getNativeType(KNOWN_TYPE);
 if ( origType == null ) { return null ; } switch ( origType ) { case:
 if ( origType == null ) { origType = getNativeType(KNOWN_TYPE); }
origType = origType == null ? getNativeType ( unknown_type ) : origType ;
 if ( origType == null ) { origType = getNativeType(UNKNOWN_TYPE); } else if (origType)
 if ( origType == null ) { origType = "null" ; }
 if ( origType == null ) { break ; } switch ( node. getType ( ) ) {
 return getNativeType(UNKNOWN_TYPE) : origType;
 if (origType == null) return null;
origType = origType == null ? null : origType. type ( ) ;
 if ( origType == null ) { origType = getNativeType(ANY_TYPE); }
 if ( origType == null ) { break ; } case Token.USE:
 if ( origType == null ) { origType = getDefaultType ( ) ; }
 if ( origType == null ) { break ; } switch ( node. getType ( ) ) { case NAME:
 return origType? scope.getNativeType(UNKNOWN_TYPE) : origType;
 JSType type = origType!== null ? getNativeType(UNKNOWN_TYPE) : origType;
 if ( origType == null ) { return null ; } switch ( origType ) { case NAME:
? type(UNKNOWN_TYPE) : origType;
origType = origType == null ? getNativeType(UNKNOWN_TYPE)  : origType ; case Token.METHOD:
 if ( origType == null ) { break ; } case Token.TYPE:
origType = origType ==  null? origType : null;
origType = origType == null ? getNativeType(type) : origType;
origType = origType == null ? getNativeType(UNKNOWN_TYPE, origType); :
 if (origType == null) type=origType;
origType = origType == null ? getNativeType(UNKNOWN_TYPE); : origType;
 == null? getNativeType(UNKNOWN_TYPE) : origType;
origType = origType == null ? getNativeType(UNKNOWN_TYPE)  : origType ; case Token.GET:
 if (origType == null) {?getNativeType(UNKNOWN_TYPE) : origType;
?.getNativeType(UNKNOWN_TYPE) : origType;
origType = origType == null ? getNativeType(UNKNOWN_TYPE), origType : origType.getType();
origType = origType ==  null? "null" :
 if ( origType == null ) { return null ; } switch ( origType ) { case Token.NAME:
 if ( origType == null ) { return null ; } switch ( node. getType ( ) ) {
origType = origType == null ? getNativeType(null); :
 if ( origType == null ) { origType = getNativeType(UNKNOWN_TYPE); } else { origType
 return origType == null? nativeType(UNKNOWN_TYPE) : origType;
origType = origType == null ? getNativeType(UNKNOWN_TYPE, type); :
 if (origType == getNativeType(UNKNOWN_TYPE) : origType;
 if ( origType == null ) { return null ; } switch ( origType ) { case Token.STRING:
origType = origType == null ? getNativeType ( null ) :
 case Token.TYPE: origType;
 if (origType == null) origType? getNativeType(UNKNOWN_TYPE) : origType;
 if ( origType == null ) { return null ; } switch ( origType ) { case null :
 if ( origType == null ) { break ; } JSType
origType = origType == null ? getNativeType(UNKNOWN_TYPE) :  origType ; break ; case Token.USE:
 if (origType == null) return origType;
 if ( origType == null ) { return null ; } switch (type) {
origType = origType == null ?  type(UNKNOWN_TYPE) : origType;
 if ( origType == null ) { origType = getNativeType ( type ) }
 switch (node.getType()) : origType;
 if (origType == null) break;
 if ( origType == null ) { break ; } case Token.STRING:
 if ( origType == null ) { return null ; }
origType = origType ==  null? null : type ;
 if ( origType == null ) { return null ; } switch ( origType ) { case Token.QNAME:
 if ( origType == null )? type.getNativeType(UNKNOWN_TYPE) : origType;
 switch (origType) { case NativeType(UNKNOWN_TYPE) : origType;
 if ( origType == null ) { break ; } case Token.REFERENCE:
origType . setName ( qualifiedName ) ;
origType = origType . type ;
origType = origType == null ? getNativeType ( Unknown_TYPE ) :
origType = origType == null ? getNativeType(UNKNOWN_TYPE)  : origType ; case Token.CONSTRUCT:
origType =  (JSType) origType.type;
 if ( origType == null ) { origType = getNativeType(UNKNOWN_TYPE); } else { final Type
origType = origType == null ?  null : origType ; case Token.TYPE:
 if ( origType == null ) { break ; } switch ( node. getType ( ) ) :
origType = origType == null ? getNativeType(UNKNOWN_TYPE)  : origType.type;
 if ( origType == null ) { return null ; } switch ( node. getType ( ) ) :
 if ( origType == null ) { return null ; } switch ( origType ) { case Token.CONSTRUCTOR:
origType = origType ==  null? null : origType ;
 switch ( node. getType ( ) ) { case Token.STRING:
 switch { case getNativeType(UNKNOWN_TYPE) : origType;
 if ( origType == null ) { return null ; } switch ( origType ) { case Token.QUEUE:
 if ( origType == null ) break ;
origType = origType == null ? getNativeType(UNKNOWN_TYPE); : origType.type();
 if ( origType == null ) { origType = getNativeType(TYPE); }
 if (origType == null) type=getNativeType(UNKNOWN_TYPE) : origType;
 if ( origType == null ) { origType = getNativeType ( ) ; }
 switch (node.getType()) { default: origType;
 if ( origType == null ) { return null ; } switch ( origType ) { case Token.TYPE:
? scope.getNativeType(UNKNOWN_TYPE) : origType;
origType = origType == null ? getNativeType(UNKNOWN_NODE) : origType;
origType = origType == null ? getNativeType(UNKNOWN_TYPE) :  origType ; break ; case Token.TYPE:
 if ( origType == null ) { return null ; } switch ( origType ) { case Token.CLASS:
 if ( origType == null )
origType = origType == null ? getNativeType(UNKNOWN_NODE_TYPE) : origType;
 if ( origType == null ) { break ; } case Token.PROP:
 if ( origType == null ) { return null ; } switch ( origType. type ) { case NAME:
origType = origType . toString ( ) ;
 return origType == null? getType(UNKNOWN_TYPE) : origType;
 if ( origType == null ) { origType = type ; } else {
 if ( origType == null ) { break ; } case Token.REFERENCES:
origType = origType . getNativeType ( ) ;
 if ( origType == null ) { return null ; } } else { origType = node. getJSType(); } Type
 return origType!== null ? getNativeType(UNKNOWN_TYPE) : origType;
 if ( origType == null ) { origType = getNativeType(UNKNOWN_TYPE); break; }
origType . clear ( ) ;
 if ( origType == null ) { return null ; } } else { origType = node. getJSType(); } int
origType = origType == null ? getNativeType(UNKNOWN_TYPE); : type;
 switch (origType) { case getNativeType(UNKNOWN_TYPE) : origType;
 if ( origType == null ) { return null ; } switch ( origType ) { case Token: Type
 if ( origType == null ) { origType = getNativeType(ANY) ; }
 if ( origType == null ) { break ; } case Token.NODE:
origType = origType == null ? getNativeType(UNKNOWN_TYPE));
 origType = origType == -1? getNativeType(UNKNOWN_TYPE) : origType;
 if ( origType == null ) { break ; } case Token.METHOD:
 if (origType == null) type=null ? getNativeType(UNKNOWN_TYPE) : origType;
 if ( origType == null ) { break ; } case Token.CONSTRUCTOR:
 if ( origType == null ) { return null ; } switch ( node. getType ( ) )
 if ( origType == null ) { origType = getNativeType(UNKNOWN_TYPE); break; } Type
origType =  (JSType) origType.type();
 if (origType == null) return origType? getNativeType(UNKNOWN_TYPE) : origType;
origType = origType == null ? getNativeType(UNKNOWN_TYPE)  : origType ; } case Token.USE:
 if (origType == null)? getType(UNKNOWN_TYPE) : origType;
 if ( origType == null ) { return null ; } switch ( origType ) { case Token.QUERY:
 if ( origType == null ) { break ; } case Token.SET:
 else { origType = node. getJSType ( ) ; }
origType = origType == null ? getNativeType(UNKNOWN_TYPE) :  origType ; case Token.REFERENCE:
origType = origType == null ? getNativeType ( unknown_type ) : type ;
 if ( origType == null ) { break ; } case Token.SETPROP:
origType = origType == null ? getNativeType(UNKNOWN_TYPE)  : origType ; } case Token.TYPE:
 else { origType = node. getType(); }
 origType = ==null ? getNativeType(UNKNOWN_TYPE) : origType;
 if ( origType == null ) { break ; } case Token.SETTYPE:
origType = origType == null ? getNativeType(NEWKNOWN_TYPE) : origType;
 if ( origType == null ) { origType = getNativeType(UNKNOWN_TYPE); } else,
 if (origType!= null) origType=origType;
 if (origType == null) return?getNativeType(UNKNOWN_TYPE) : origType;
 if (origType == null) { return null;
origType = origType == null ?  origType = getNativeNativeType(UNKNOWN_TYPE) : origType;
 switch (node.getType()) { case NAME;
 switch (origType) case getNativeType(UNKNOWN_TYPE) : origType;
 if ( origType == null ) { break ; } } else { case Token.STRING:
origType = origType == null ? getNativeType(UNKNOWN_STRING_TYPE) : origType;
? origType.getNativeType(UNKNOWN_TYPE) : origType;
 if ( origType == null ) { break ; } case Token.SETNODE:
 return origType == getNativeType(UNKNOWN_TYPE) : origType;
 switch (origType) { case Token.NAME: origType;
 if (origType == null) origType== null ? getNativeType(UNKNOWN_TYPE) : origType;
 if ( origType == null ) { return null ; } case Token.REFERENCE:
 switch (node.getType()) default: origType;
origType = origType == null ? getNativeType(UNKNOWN_TYPE, origType) :
 if ( origType == null ) { origType = getNativeType(UNKNOWN_TYPE); } else { int
origType = origType ==  null? null : origType. type ;
 origType=null ? getNativeType(UNKNOWN_TYPE) : origType;
 if ( origType == null ) { break ; } case Token.STORE:
 if (origType == null) {origType == null ? getNativeType(UNKNOWN_TYPE) : origType;
 if ( origType == null ) { origType = getNativeType(UNKNOWN_TYPE); } else { orig type
 if ( origType == null ) { return null ; } } else { origType = node. getJSType ( ) ; }
 switch (origType) { case Token(UNKNOWN_TYPE) : origType;
origType = origType == null ? getNativeType(UNKNOWN_TYPE)  : origType.class;
 if ( origType == null ) { break ; } switch ( node. getType ( ) ) { case ':' :
 if ( origType == null) {
 type == null? getNativeType(UNKNOWN_TYPE) : origType;
 if ( origType == null ) { origType = getNativeType(UNKNOWN_TYPE); } else:
 if ( origType == null ) { origType = getNativeType ( UNKNOWN_TYPE ) ; break ; } int
 if (origType) return null;
 if ( origType == null ) { return null ; } } else { case Token.REFERENCE:
 if ( origType == null ) { break ; } switch ( node. getType ( ) ) { case ":" :
origType = origType == null ? getNativeType(UNKNOWN_TYPE) :  origType ; } case Token.STRING:
origType =  origType. getType ( ) + type ;
 origType = orig === null? getNativeType(UNKNOWN_TYPE) : origType;
 if ( origType == null ) { return null ; } switch ( origType ) { case Token: Token
origType =  (JSType) origType.class;
 if ( origType == null ) { break ; } } else { case Token.NODE:
origType = origType == null ? getNativeType ( unknownType ) :
origType = origType ==  null? 'null' :
origType =  node.getType ( ) ;
 if ( origType == null ) { break ; } case Token.GETNODE:
 if ( origType == null ) { return null ; } } else { origType = node. getJSType ( ) ; } String
 if ( origType == null ) { origType = getNativeType ( UNKNOWN_TYPE ) ; } int
 if ( origType == null ) { origType = undefined ; } else {
 if ( origType == null ) { return null ; } } else { origType = node. getType ( ) ; } final Type
 if (origType == null)?NativeType(UNKNOWN_TYPE) : origType;
origType = origType . type ( ) ;
origType = origType == null ? getNativeType(UNKNOWN_TYPE); : origType.type;
 if (origType == null) origTypeorigType == null ? getNativeType(UNKNOWN_TYPE) : origType;
 origType = origType == "null"? getNativeType(UNKNOWN_TYPE) : origType;
origType = origType == null ? getNativeType(UNKNOWN); :
origType = origType == null ?  null : origType ; case Token.ADD:
origType = origType ==  null? undefined : type;
 if (!origType)? getNativeType(UNKNOWN_TYPE) : origType;
 if ( origType == null ) { return null ; } switch ( origType. type ) { default:
 case Token.REFERENCE: origType;
? get(UNKNOWN_TYPE) : origType;
origType = origType . trim ( ) ;
origType = origType == null ? getNativeType(UNKNOWN_TYPE), origType;
origType = origType . clone ( ) ;
 if (origType) origType!== null ? getNativeType(UNKNOWN_TYPE) : origType;
origType = origType ==  null ||
 assert origType!== null ? getNativeType(UNKNOWN_TYPE) : origType;
 assert origType!= null;
 if ( origType == null ) { return null ; } } else { origType = node. getJSType ( ) ; final Type
 if ( origType == null ) { break ; } } else { case Token.COMMENT:
 if ( origType == null ) { return null ; } switch ( origType ) { case Token: int
 if (!origType)? scope.getNativeType(UNKNOWN_TYPE) : origType;
origType =  (JSType)
origType = origType == null ? getNativeType ( "unknown" ) :
 if (origType) origType |= origType == null ? getNativeType(UNKNOWN_TYPE) : origType;
? node.getJSType(scope) : origType;
origType = origType ==  type? origType :
 if ( origType == null ) { return null ; } case Token.SETPROP:
 if ( origType == null ) { break ; } default : break ; } } else { if ( origType == null ) break ;
 if ( origType == null ) { return null ; } switch ( origType. kind ) { default:
 JSType origType |= origType == null ? getNativeType(UNKNOWN_TYPE) : origType;
 JSType origType=origType == null ? getNativeType(UNKNOWN_TYPE) : origType;
 switch (getNativeType(UNKNOWN_TYPE) : origType;
 if ( origType == null ) { break ; } case Token.CONFIGURATION:
 if (origType == null) { } default: origType;
origType = origType == null ? getNativeType ( 'unknown' ) :
origType =  origType. toString ( ) + type ;
 case Token.USE: origType;
 assert (origType) : origType;
 if ( origType == null ) { break ; } } else { case Token.CONSTRUCT:
 origType = undefined!== null ? getNativeType(UNKNOWN_TYPE) : origType;
 switch (origType) { case Token.UNKNOWN_TYPE) : origType;
 if ( origType == null ) { return null ; } } else { origType = node. getJSType ( ) ; int
origType = origType == null ? getNativeType ( "Unknown_TYPE") :
origType = origType == null ? "null" : origType. type ;
 if (origType) { origType!== null ? getNativeType(UNKNOWN_TYPE) : origType;
origType = origType ==  null? origType : "null" ;
 if (origType == null) { } break;
 switch (node.getType()) { case Token: origType;
origType  = type.getType ( ) ;
 if ( origType == null ) { return null ; } break ; case Token.SETTYPE:
 if ( origType == null ) { return null ; } switch (type)) {
 if (origType == null) return type;
origType = origType . toStringTree ( ) ;
? JSType.getNativeType(UNKNOWN_TYPE) : origType;
 case NativeType(UNKNOWN_TYPE) : origType;
 if (origType!= null) type=origType;
 if (origType) origType ==null ? getNativeType(UNKNOWN_TYPE) : origType;
 if ( origType == null ) { break ; } final Type
origType =  new JSType ( type ) ;
origType  = origType &&
 if (origType == null) return;
? new JSType(UNKNOWN_TYPE) : origType;
 return? getNativeType(UNKNOWN_TYPE) : origType;
origType = origType == null ? getNativeType(UNKNOWN_TYPE) :  origType ; } case Token.COMMENT:
 if ( origType == undefined )
 switch (node.getType()) { case null? getNativeType(UNKNOWN_TYPE) : origType;
origType = origType == null ? getNativeType(UNKNOWN_TYPE)  : origType.name();
origType = origType . getTypeName ( ) ;
 assert origType.isString() : origType;
 if ( origType == null ) { break ; } case Token.REFERINES:
 origType |= origType == null ? getNativeType(UNKNOWN_TYPE) : origType;
 if ( origType == null ) { origType = getNativeType ( UNKNOWN_TYPE ) ; } else { final int
 assert (!type) : origType;
 switch (node.getType()) { case TYPE: origType;
 switch (node).getType(); default: origType;
 if (!origType) origType=origType;
origType . setName ( node ) ;
 origType = (origType!== null ? getNativeType(UNKNOWN_TYPE) : origType;
? getNativeNativeType(UNKNOWN_TYPE) : origType;
origType = origType == null ?  new JSType(UNKNOWN_TYPE) : origType;
 case Token.TYPE:
 if ( origType == null ) { origType = getNativeType(KNOWN_TYPE));
 switch (type) { case Token.NAME: origType;
origType  = origType ||
 return nativeType(UNKNOWN_TYPE) : origType;
origType = origType == null ? getNativeType(UNKNOWN_TYPE, origType) : origType;
origType = origType == null ? getNativeType(node.getJSType(), type) : origType;
 return origType? scope.createType(UNKNOWN_TYPE) : origType;
 assert (UNKNOWN_TYPE) : origType;
 switch (node.getType() default: origType;
 switch (node.getType()) case NAME: origType;
 switch (type) { case NAME: origType;
origType = origType == null ? getNativeType(UNKNOWN_TYPE) : origType ; } else { case Token.STRING:
 assert origType. equals(qualifiedName) : origType;
 assert (origType instanceof String) : origType;
 else { origType = node. getJSType(); } Type
origType . setType ( "string" ) ;
 if ( origType == null ) { return null ; } } else { origType = node. getType ( ) ; break ; } int
 if (!origType) { origType!== null ? getNativeType(UNKNOWN_TYPE) : origType;
origType  = null;
 if ( origType == null ) { return null ; } } else { origType = node. getJSType ( ) ; final String
 if (!origType) origType = type!== null ? getNativeType(UNKNOWN_TYPE) : origType;
 case Token.THIS: origType;
origType . reset ( ) ;
origType = origType == null ? getNativeType(NEWKNOWN_TYPE); :
 else { origType = node. getJSType(); } int
 switch (origType) {
 if ( origType == null ) { origType = getNativeType ( UNKNOWN_TYPE ) ; } else { final String
 if ( origType == null) { }
 switchNativeType(UNKNOWN_TYPE) : origType;
 if ( origType == null ) { origType = getNativeType ( UNKNOWN_TYPE ) ; } else { final Class
origType = origType ==  null || origType == origType;
 return origType? origType.getNativeType(UNKNOWN_TYPE) : origType;
 origType = origType == "unknown"? getNativeType(UNKNOWN_TYPE) : origType;
 case Token.SETPROP: origType=origType == null ? getNativeType(UNKNOWN_TYPE) : origType;
 if ( origType == null ) continue;
 switch (origType) { origType ==null ? getNativeType(UNKNOWN_TYPE) : origType;
origType = origType . asType ( ) ;
 origType = origType == EMPTY? getNativeType(UNKNOWN_TYPE) : origType;
origType = origType ==  null? "null" : type;
 return scope? scope.createType(UNKNOWN_TYPE) : origType;
 if (origType)? nativeType(UNKNOWN_TYPE) : origType;
 return scope. inferType ( node, qualifiedName) : origType;
 if ( origType == null ) { return null? getNativeType(UNKNOWN_TYPE) : origType;
 if (origType == null) { return;
origType = origType == null ? getNativeType(UNKNOWN_TYPE, null) : origType;
origType . setType ( Type. NAME ) ;
 assert origType.isNull() : origType;
origType . setName ( name ) ;
? getNativeType(type) : origType;
 if ( origType == null ) { return undefined? getNativeType(UNKNOWN_TYPE) : origType;
origType . setString ( "" ) ;
 return getNativeTypeType(UNKNOWN_TYPE) : origType;
 assert origType. equals ( "string") : origType;
 if (origType) { origType ==null ? getNativeType(UNKNOWN_TYPE) : origType;
 case Token.STRING: origType;
 if ( origType == null ) { break ; } int
 if ( origType == null ) { return null ; } final Type
 if (origType!= null;
 if (origType == null) returnorigType == null ? getNativeType(UNKNOWN_TYPE) : origType;
origType = origType == null ? getNativeType(UNKNOWN_TYPE) : origType ; } else { case Token.NODE:
 case Token.REFERENCES: origType;
 switch (node.getType) : origType;
 assert origType. equals ( "null") : origType;
 if (!origType) { origType=origType;
 return scope.getNativeType(type) : origType;
origType = origType == null ? getNativeType(UNKNOWN_STRING, type) : origType;
 JSType!== null ? getNativeType(UNKNOWN_TYPE) : origType;
 if (!origType) origType = type ==null ? getNativeType(UNKNOWN_TYPE) : origType;
? getNativeType(TYPE.UNKNOWN_TYPE) : origType;
origType = origType ==  type;
? nativeType(UNKNOWN_TYPE) : origType;
origType = origType == null ? getNativeType(UNKNOWN_TYPE) : origType ; } case Token.REFERENCE:
? node.getNativeType() : origType;
 getNativeType(UNKNOWN_TYPE) : origType;
 if ( origType == null ) { origType = "unknown" ; } int
 if ( origType == null ) { break ; } Type
 if ( origType == null ) { return null ; } int
 if (!origType) origType = ==null ? getNativeType(UNKNOWN_TYPE) : origType;
origType = origType == null ?  getNativeNativeType(UNKNOWN_TYPE) : origType;
 JSType origType = origType |= origType == null ? getNativeType(UNKNOWN_TYPE) : origType;
 else { origType = node. getJSType(); } String
origType = origType == null ? getNativeType(UnKNOWN_TYPE); :
 if (!origType) origType = origType== null ? getNativeType(UNKNOWN_TYPE) : origType;
origType = origType == null ? getNativeType(Unknown_TYPE) : type;
origType = origType == null ?  new getNativeType(UNKNOWN_TYPE) : origType;
 origType = null!== null ? getNativeType(UNKNOWN_TYPE) : origType;
 case Token.PROP: origType;
 if ( origType == null ) { return null ; } switch ( origType ) { case
origType = origType . type ; case Token.USE:
 return getNativeTypeOf(UNKNOWN_TYPE) : origType;
origType = origType . toString ( ) + "." ;
origType = origType == null ?  origType = getNativeTypeOf(UNKNOWN_TYPE) : origType;
 return origType? getNativeNativeType(UNKNOWN_TYPE) : origType;
 if (origType == null) type=origType == null ? getNativeType(UNKNOWN_TYPE) : origType;
origType = origType == null ? getNativeType(UNKNOWN_TYPE) : origType ; } else { case Token.USE:
 if (origType == null) return null? getNativeType(UNKNOWN_TYPE) : origType;
origType = origType == null ?  origType. getNativeType(UNKNOWN_TYPE) : origType;
 if (origType == null) type==null ? getNativeType(UNKNOWN_TYPE) : origType;
 switch (type) { case Token.NEW: origType;
? node.getJSType(type) : origType;
 assert origType == type.getType() : origType;
 if (orig == null)
 return type(UNKNOWN_TYPE) : origType;
origType = origType == null ? getNativeType(UNKNOWN_TYPE)  : null;
origType = origType . toStringTree ( ) + type ;
 origType == null? scope.getNativeType(UNKNOWN_TYPE) : origType;
 if ( origType == null ) { return null ; } Type
 if (!origType) type=origType;
 if (origType!= null) returnorigType;
 switch (type) { case Token.TYPE: origType;
 if (origType) return type;
 if ( origType == null ) { return null ; } else { Type
 if (origType == null) return undefined? getNativeType(UNKNOWN_TYPE) : origType;
? node.getNativeNativeType(UNKNOWN_TYPE) : origType;
origType = origType == null ? getNativeType(UNKNOWN_TYPE) : origType ; } else { case Token.TYPE:
 if (!origType) return null;
origType = origType == null ? getNativeType(UNKNOWN_TYPE)  : origType ; break ; default:
? getNativeType(node) : origType;
? getNativeType(String.UNKNOWN_TYPE) : origType;
 case Token.OBJECT: origType;
origType = origType == null ? getNativeType(UNKNOWN_TYPE) : origType ; } else { case Token.NAME:
origType = origType . toString ( ) + "()" ;
 case Token.NODE: origType;
 if ( origType == null ) { return null ; } switch ( origType ) { int
origType = origType == null ? getNativeType(UNKNOWN_TYPE)  : origType ; case ":":
 if (origType) {
origType = origType == null ?  scope.getNativeNativeType(UNKNOWN_TYPE) : origType;
origType . setName ( ) ;
origType = origType == null ? getNativeType(...) :
 } else { origType = node. getType(); } int
 OrigType = origType!== null ? getNativeType(UNKNOWN_TYPE) : origType;
 if ( origType == null ) { return null ; } break ; default: Type
 if (origType!= null) origType |= origType == null ? getNativeType(UNKNOWN_TYPE) : origType;
origType = origType == null ? getNativeType(UnKNOWN_TYPE, type) : origType;
 origType = origType == _null ? getNativeType(UNKNOWN_TYPE) : origType;
 if ( origType == null ) { return null ; } switch (type) :
 case Token.SETPROP: origType;
origType =  type; case Token.USE:
 switch (origType) { case (UNKNOWN_TYPE) : origType;
 return getNativeType(Type.UNKNOWN_TYPE) : origType;
? getNativeType(Type.UNKNOWN_TYPE) : origType;
origType = origType . getType(); case Token.SETTYPE:
 case Token.NEW: origType;
 origType = origType == -null ? getNativeType(UNKNOWN_TYPE) : origType;
 case Token.NAMESPACE: origType;
 origType == -1? getNativeType(UNKNOWN_TYPE) : origType;
origType = origType == null ? getNativeType(KNOWN_TYPE);
 if ( origType == null ) { return null ; } else { int
origType = origType == null ? getNativeType (KNOWNKNOWN ) :
 if (!origType) origType |= origType == null ? getNativeType(UNKNOWN_TYPE) : origType;
origType = origType == null ? getNativeType(UNKNOWN_TYPE) : origType ; break ; case Token.OBJECT:
 if (origType) origType= origType == null ? getNativeType(UNKNOWN_TYPE) : origType;
origType  += qualifiedName;
 switch (origType) case scope.getNativeType(UNKNOWN_TYPE) : origType;
 if (!origType) origType!== null ? getNativeType(UNKNOWN_TYPE) : origType;
 origType = unknown!== null ? getNativeType(UNKNOWN_TYPE) : origType;
 if (!origType) return origType;
origType . setString ( ) ;
 case Token.SETTYPE: origType;
 return scope? getNativeType(UNKNOWN_TYPE) : origType;
origType = origType == null ? getNativeType ( node ) :
 case Token.STRUCT: origType;
 OrigType = origType == null? getNativeType(UNKNOWN_TYPE) : origType;
 origType = origType == Nnull ? getNativeType(UNKNOWN_TYPE) : origType;
origType = origType ==  origType ||
 case Token.SETTYPE:
 assert origType == (UNKNOWN_TYPE) : origType;
 switch (nativeType(UNKNOWN_TYPE) : origType;
 switch (node.getType()) case: origType;
? node.getJSType(UNKNOWN_TYPE) : origType;
 if (!origType) origType==null ? getNativeType(UNKNOWN_TYPE) : origType;
 if ( origType == null ) { return null ; } else { String
origType = origType . getType ; case Token.SETTYPE:
 if (origType) break;
 if (!origType) break;
origType = origType ==  null? type :
 switch (type) { case Token(UNKNOWN_TYPE) : origType;
 if (origType == null) return (null) : origType;
 assertNull(type) : origType;
origType = origType == null ? getNativeType(Unknown_TYPE);
 assert origType == () : origType;
 varType = origType!== null ? getNativeType(UNKNOWN_TYPE) : origType;
 JSType type=origType;
origType = origType == null ?  new GetNativeType(UNKNOWN_TYPE) : origType;
 assert origType;
 assert type!= null;
 switch (origType) origType ==null ? getNativeType(UNKNOWN_TYPE) : origType;
origType = origType == null ? getNativeType(UNKNOWN_TYPE); : origType.getType());
origType = origType == null ? getNativeType(UNKNOWN) :
 OrigType origType = origType? getNativeType(UNKNOWN_TYPE) : origType;
origType = origType == null ? getNativeType(Unknown_TYPE); :
 assert (origType == type) : origType;
 origType = isnull ? getNativeType(UNKNOWN_TYPE) : origType;
origType = origType == null ? getNativeType(UNKNOWN_OBJECT) : origType;
 if (!origType).origType=origType;
 if (origType == null) return "(null) : origType;
 if (origType == type).getNativeType(UNKNOWN_TYPE) : origType;
origType = origType == null ? getNativeType(UNKNOWN_TYPE) : origType ; } else { case Token.COMMENT:
 switch (type) { case Token.ANY() : origType;
 origType = origType.getNativeType(UNKNOWN_TYPE) : origType;
 if (origType)
 origType = origType == "?"? getNativeType(UNKNOWN_TYPE) : origType;
origType = origType == null ? getNativeType(UNKNOWN_PROP) : origType;
 switch (type) { case Token.UNKNOWN_TYPE) : origType;
origType = origType == null ? getNativeType (KNOWNType ) :
 switch (node.getType(type) : origType;
origType = origType ==  null? origNode :
 Node origType = (origType!== null ? getNativeType(UNKNOWN_TYPE) : origType;
 JSType origType=origType;
origType = origType == null ? getNativeType(NEWKNOWN_TYPE);
 switch (type) { case Token.ANY(() : origType;
 varType = origType ==null ? getNativeType(UNKNOWN_TYPE) : origType;
 origType = origType == nnull ? getNativeType(UNKNOWN_TYPE) : origType;
origType = origType == null ? getNativeType(UNKNOWN_TYPE, "this") : origType;
 JSType newJSType |= origType == null ? getNativeType(UNKNOWN_TYPE) : origType;
 JSType origType = type!== null ? getNativeType(UNKNOWN_TYPE) : origType;
 return scope.getNativeType(UNKNOWN_TYPE) : origType;
origType = origType == null ? getNativeType(UNKNOWN_TYPE) : origType ; } else { case Token.CONSTRUCT:
origType = origType == null ? getNativeType(UNKNOWN_TYPE, node) : origType;
 origType = origType == "null ? getNativeType(UNKNOWN_TYPE) : origType;
origType = origType ==  type? null :
 JSType origType = (origType == null ? getNativeType(UNKNOWN_TYPE) : origType;
 return new JSType(UNKNOWN_TYPE) : origType;
origType = origType == null ? getNativeType ( "null") :
origType = origType == null ? getNativeType(UNKNOWN_TYPE), origType: null;
 assert origType == null) : origType;
origType = origType == null ? getNativeType ( TYPE ) :
 JSType type = origType |= origType == null ? getNativeType(UNKNOWN_TYPE) : origType;
 if (origType) return;
origType = origType == null ? getNativeType(UNKNOWN_TARGET) : origType;
origType = origType == null ? getNativeType(UNKNOWN_TYPE) : origType ; } else { case Token.STOP:
origType = origType == null ? getNativeType(UNKNOWN_TYPE, 0) : origType;
 if ( origType == undefined) {
origType = origType == null ? getNativeType(UNKNOWN_TYPE); break;
origType = origType == null ? getNativeType(node.getJSType(), scope) : origType;
origType = origType ==  origType;
 return (UNKNOWN_TYPE) : origType;
 JSType=origType == null ? getNativeType(UNKNOWN_TYPE) : origType;
 JSTypeType origType!== null ? getNativeType(UNKNOWN_TYPE) : origType;
origType = origType == null ? getNativeType(NEW_TYPE);
 switch (node.getType() case: origType;
 origType = origType == null.? getNativeType(UNKNOWN_TYPE) : origType;
origType = origType == null ? getNativeType(UNKNOWN_TYPE)  : origType.getType());
origType = origType . getType ( ) ; case ":" :
origType != null &&
origType = origType == null ? getNativeType(UNKNOWN_TYPE, "unknown") : origType;
 assert (true) : origType;
origType = origType  || null;
 origType = unknownType? getNativeType(UNKNOWN_TYPE) : origType;
origType = origType == null ? getNativeType(NODE_TYPE); :
 origType =!null ? getNativeType(UNKNOWN_TYPE) : origType;
origType =  "this" ;
 return getNativeType(UNUNKNOWN_TYPE) : origType;
origType = origType == null ?  scope.getGetNativeType(UNKNOWN_TYPE) : origType;
 case Token.REFRESH: origType;
? jstype.getNativeType(UNKNOWN_TYPE) : origType;
origType = origType == null ?  getType(UNKNOWN_TYPE) : origType;
origType = origType . toString ( ) + "." +
 if (origType == null)origType;
 orig == null? getNativeType(UNKNOWN_TYPE) : origType;
 return origType.getNativeType(UNKNOWN_TYPE) : origType;
 String qualifiedName=origType;
 origType = _null ? getNativeType(UNKNOWN_TYPE) : origType;
origType = origType == null ?  null? getNativeType(UNKNOWN_TYPE) : origType;
 if (origType!= null)origType == null ? getNativeType(UNKNOWN_TYPE) : origType;
 JSTypeType = type!== null ? getNativeType(UNKNOWN_TYPE) : origType;
? (UNKNOWN_TYPE) : origType;
origType = origType ==  null || origType ;
 origType.getNativeType(UNKNOWN_TYPE) : origType;
 if (origType) return false;
origType = origType . origType ;
origType != null? null :
origType = origType == null ? getNativeType(node.getJSType(), null) : origType;
 if (!origType)
 if ( origType == null ) { break ; };
? getNativeTypedType(UNKNOWN_TYPE) : origType;
 JSType newOrigType |= origType == null ? getNativeType(UNKNOWN_TYPE) : origType;
origType = origType == null ? getNativeType(type); :
origType =  NodeType. NAME ;
 JSType type = null!== null ? getNativeType(UNKNOWN_TYPE) : origType;
 String qualifiedName = name;
 if (node.getType() )!== null ? getNativeType(UNKNOWN_TYPE) : origType;
origType = origType == null ? getNativeType ( "null" :
origType = origType ==  null? undefined :
 JSType newOriginalType |= origType == null ? getNativeType(UNKNOWN_TYPE) : origType;
origType = origType ==  null;
 switch getNativeType(UNKNOWN_TYPE) : origType;
origType  = (JSType) origType; return
 if (origType) type=origType;
origType = origType ==  origType?
origType = origType == null ? "null" : origType. type();
 if (node).getType(type)== null ? getNativeType(UNKNOWN_TYPE) : origType;
 if (origType) origType ||= origType == null ? getNativeType(UNKNOWN_TYPE) : origType;
 jstype=origType == null ? getNativeType(UNKNOWN_TYPE) : origType;
origType = origType . rawType ;
 assert orig!= null;
origType =  NodeType. STRING ;
origType = origType  + qualifiedName;
 origType = isUnknown? getNativeType(UNKNOWN_TYPE) : origType;
 return origType == type?getNativeType(UNKNOWN_TYPE) : origType;
 case Token.REFERENCED: origType;
origType = origType == null ? getNativeType(null);
 switch { case Token.TYPE: origType;
 case Token(UNKNOWN_TYPE) : origType;
origType = origType . owner ;
 switch (token.TYPE): origType;
 switch (token.NAME) : origType;
? getNativeTypeImpl(UNKNOWN_TYPE) : origType;
 String qualifiedName = "";
 if (!origType) type=origType == null ? getNativeType(UNKNOWN_TYPE) : origType;
? JSTypes.getNativeType(UNKNOWN_TYPE) : origType;
origType = origType == null ? getNativeType ( UNKNOWN_TYPE ) : origType);
origType = origType == null ?  origType : origType();
 if (origType;
origType = origType == null ? getNativeType(qualifiedName) : origType;
 JSType origType ||= origType == null ? getNativeType(UNKNOWN_TYPE) : origType;
 origTypeorigType == null ? getNativeType(UNKNOWN_TYPE) : origType;
 case Token.STRUCT:
origType =  Node. NAME ;
 assert origType==origType;
origType  += type ;
 return type.getNativeType(UNKNOWN_TYPE) : origType;
origType =  origType?
origType =  Type. NAME ;
origType = origType ==  null? origType : origType ; *
 origType!= null? getNativeType(UNKNOWN_TYPE) : origType;
 J typeType= origType == null ? getNativeType(UNKNOWN_TYPE) : origType;
origType = origType == null ?  scope.createNativeType(UNKNOWN_TYPE) : origType;
 origType = type?getNativeType(UNKNOWN_TYPE) : origType;
 if(null) returnorigType;
 origType.getType();origType == null ? getNativeType(UNKNOWN_TYPE) : origType;
 JSType qualifiedType=origType;
 assert (this) : origType;
 String origType=origType == null ? getNativeType(UNKNOWN_TYPE) : origType;
? orig) : origType;
origType = origType == null ? getNativeType ( 'UNKNOWN_TYPE' ) : *
origType  = type.type();
 assert (!orig) : origType;
origType =  Node. CLASS ;
origType = origType == null ?  getNativeTypeOf(UNKNOWN_TYPE) : origType;
 case Token.NEW:
origType = origType == null ? getNativeType(); :
 origType?getNativeType(UNKNOWN_TYPE) : origType;
 if (origType);
 JSType.origType == null ? getNativeType(UNKNOWN_TYPE) : origType;
 switch (type) { case TYPE: origType;
 if (!origType return;
 assert node!= null;
 if(null) type=origType;
 type = null;
 assert qualifiedName!=origType;
 if ( origType == null) break; else
origType = origType == null ?  "null getNativeType(UNKNOWN_TYPE) : origType;
origType = origType == null ? getNativeType ( "UNKNOWN_TYPE" ) : *
origType  = (JSType) origType; *
origType = origType ==  origType &&
origType  = origType. getType ( ) ; *
origType  = (JSType) *
origType  = origType. getType ( ) ; return
 switchToNativeType(UNKNOWN_TYPE) : origType;
 JSType origTypeRaw |= origType == null ? getNativeType(UNKNOWN_TYPE) : origType;
 JSType origType ^= origType == null ? getNativeType(UNKNOWN_TYPE) : origType;
origType = origType == null ? getNativeType(UNKNOWN_TYPE) : origType; return
origType = origType == null ? getNativeType(NEWKNOWN_TYPE) : origType; return
 return origType?.getNativeType(UNKNOWN_TYPE) : origType;
 final JSType type= origType == null ? getNativeType(UNKNOWN_TYPE) : origType;
 case NodeType: origType;
 assert is (type) : origType;
 if ( origType == null ) return ; int
origType = origType == null ? getNativeType ( UNKNOWN_TYPE ) : *
 assert type == () : origType;
 assert type == null;
 if (!origType)origType;
 assert (null) : origType;
origType = origType ==  type ||
origType = origType == null ? getNativeType(UNKNOWN_TYPE)  : (NativeType)
origType = origType == null ? getNativeType(UNKNOWN_TYPE); : origType; return
 JSType(origType == null ? getNativeType(UNKNOWN_TYPE) : origType;
 case Token.: origType;
 String qualifiedType=origType;
 if ( origType == null) break; int
? origType().getNativeType(UNKNOWN_TYPE) : origType;
 jstype |= origType == null ? getNativeType(UNKNOWN_TYPE) : origType;
? newType(UNKNOWN_TYPE) : origType;
origType = origType == null ? getNativeType(UNKNOWN_TYPE) : origType ; *
 origType = origType&&origType == null ? getNativeType(UNKNOWN_TYPE) : origType;
 assert type(type) : origType;
 case Token.*: origType;
 orig = orig? getNativeType(UNKNOWN_TYPE) : origType;
 case ".": origType;
origType = origType == null ? getNativeType(UNKNOWN_TYPE); : origType.getType(); return
origType = origType == null ?  getNativeTypeForType(UNKNOWN_TYPE) : origType;
 JSType _origType;
 orig=origType == null ? getNativeType(UNKNOWN_TYPE) : origType;
 JSTypeType=origType == null ? getNativeType(UNKNOWN_TYPE) : origType;
origType . =
 switch { default: origType;
origType = origType == null ? getNativeType(UNKNOWN_TYPE); break();
origType = origType == null ? getNativeType(UnKNOWN_TYPE) : origType;
 origType.type=origType == null ? getNativeType(UNKNOWN_TYPE) : origType;
 if (!orig) returnorigType;
 origType!= origType == null ? getNativeType(UNKNOWN_TYPE) : origType;
 assert type(UNKNOWN_TYPE) : origType;
origType = origType == null ? :
 origType = undefined? getNativeType(UNKNOWN_TYPE) : origType;
 JType type= origType == null ? getNativeType(UNKNOWN_TYPE) : origType;
origType  = (JSType)!
origType = origType == null ? getNativeType(UNKNOWN_TYPE) : origType.getType(); return
 jstypeType=origType == null ? getNativeType(UNKNOWN_TYPE) : origType;
 JTYPE type= origType == null ? getNativeType(UNKNOWN_TYPE) : origType;
origType = origType == null ? getNativeType(UNKNOWN_TYPE)  : "" ;
origType = origType == null ? getNativeType(UNKNOWN_TYPE)  : origType ; break; }
 origType ==? getNativeType(UNKNOWN_TYPE) : origType;
? OrigType.getNativeType(UNKNOWN_TYPE) : origType;
origType = origType == null ? "" :
? () : origType;
? create(UNKNOWN_TYPE) : origType;
 JT origType= origType == null ? getNativeType(UNKNOWN_TYPE) : origType;
origType = origType == null ? getNativeType(UNKNOWN_TYPE)  : origType.getType;
 JType origType= origType == null ? getNativeType(UNKNOWN_TYPE) : origType;
 Type type = origType |= origType == null ? getNativeType(UNKNOWN_TYPE) : origType;
origType =  node.getType(); return
 assert () : origType;
 case ") : origType;
origType = origType == null ? getNativeType(null),
? -getNativeType(UNKNOWN_TYPE) : origType;
origType = origType == null ? NativeType(UNKNOWN_TYPE) : origType;
origType = origType == null ? getNativeType(NEW_TYPE) : origType;
origType = origType == null ? getNativeType(unknownType) : origType;
 case null: origType;
origType = origType == null ? getNativeType(UNKNOWN_TYPE), origType: null);
origType = origType == null ? getNativeType(UNKNOWNTYPE) : origType;
 type = undefined? getNativeType(UNKNOWN_TYPE) : origType;
origType = origType == null ? getNativeType ( Unknown_TYPE ) : *
origType = origType == null ? getNativeType(STRING) : origType;
 case NULL: origType;
 type = undefined;
 case TYPE: origType;
 case Token: origType;
origType = origType == null ? getNativeType(null));
origType = origType == null ? getNativeType(UNKNOWN_TYPE)  : undefined;
origType = origType == null ? getNativeType(UNKNOWN_TYPE).class :
 assert "(UNKNOWN_TYPE) : origType;
origType = origType == null ? getNativeType(Unknown_STRING) : origType;
 switch {) : origType;
origType = origType == null ? getNativeType(INKNOWN_TYPE) : origType;
origType = origType == null ?  origName :
 final Type origType |= origType == null ? getNativeType(UNKNOWN_TYPE) : origType;
origType = origType == null ?  createType(UNKNOWN_TYPE) : origType;
origType = origType == null ? getNativeType(UNKNOWN_TYPE)  + origType :
origType = origType == null ? getNativeType ( unknown_type ) : *
 final JType origType= origType == null ? getNativeType(UNKNOWN_TYPE) : origType;
 origType==origType;
 origType.origType;
 Jstype!== null ? getNativeType(UNKNOWN_TYPE) : origType;
 case NAME: origType;
origType = origType == null ?  rawType :
origType = origType == null ? getNativeType(UNKNOWN_TYPE)  : origType();
origType = origType == null ? getNativeType(KNOWNTYPE) : origType;
 Case Token: Type
origType = origType == null ?  get(UNKNOWN_TYPE) : origType;
?!getNativeType(UNKNOWN_TYPE) : origType;
origType = origType == null ? getNativeType(namedName) : origType;
origType = origType == null ?  new Type(UNKNOWN_TYPE) : origType;
 } JSType type= origType == null ? getNativeType(UNKNOWN_TYPE) : origType;
 orig type=origType;
 type = node;
origType = origType == null ?  - 1 :
origType = origType == null ? getNativeType(UNKNOWN_TYPE)) null;
!= null? getNativeType(UNKNOWN_TYPE) : origType;
origType = origType == null ? getNativeType(UNKNOWN_TYPE)) null :
 if (debug;
 assert false;
origType =  undefined;
 type?getNativeType(UNKNOWN_TYPE) : origType;
 origType_null ? getNativeType(UNKNOWN_TYPE) : origType;
origType = origType == null ?  newNativeType(UNKNOWN_TYPE) : origType;
 Case Node: Type
 TYPE=origType;
origType = origType == null ? getNativeType(TYPE) : origType;
origType .return
 case Type(UNKNOWN_TYPE) : origType;
origType = origType == null ?  scope :
 jSType
origType =  node ;
origType .class
origType , =
 break; } Type
origType = origType == null ? getNativeTypeDefault :
 == 0? getNativeType(UNKNOWN_TYPE) : origType;
origType = origType == null ?  setNativeType(UNKNOWN_TYPE) : origType;
 origType.origType == null ? getNativeType(UNKNOWN_TYPE) : origType;
 JSONSType
origType = origType == null ?  createNativeType(UNKNOWN_TYPE) : origType;
 Case Node: Node
 type.origType;
 type.null ? getNativeType(UNKNOWN_TYPE) : origType;
 type!== null ? getNativeType(UNKNOWN_TYPE) : origType;
 assert true;
origType = origType == null ? getNativeType(UNKNOWN_TYPE) :  origType.
 Case "this":
origType = origType == null ? getNativeTypeType :
 return type!== null ? getNativeType(UNKNOWN_TYPE) : origType;
origType = origType == null ? getNativeType(null) : origType;
 boolean result;
 originalType!== null ? getNativeType(UNKNOWN_TYPE) : origType;
 isNull? getNativeType(UNKNOWN_TYPE) : origType;
 int index;
 origType="origType == null ? getNativeType(UNKNOWN_TYPE) : origType;
 Type
 isUnknown? getNativeType(UNKNOWN_TYPE) : origType;
 origTypenull ? getNativeType(UNKNOWN_TYPE) : origType;
 boolean resolved;
 origType=(origType == null ? getNativeType(UNKNOWN_TYPE) : origType;
origType = origType == null ; return
 OriginalType
 originalType== null ? getNativeType(UNKNOWN_TYPE) : origType;
 Type.origType;
origType = origType == null ?  create(UNKNOWN_TYPE) : origType;
 final Type
 originType== null ? getNativeType(UNKNOWN_TYPE) : origType;
origType = origType == null ? getNativeType(Type) : origType;
 JSONASType
 JType
 return undefined!== null ? getNativeType(UNKNOWN_TYPE) : origType;
 JSTypes
origType = origType ; return
origType = origType . }
origType = origType . ;
 Object
origType = origType == null ? getNativeType(node) : origType;
origType = origType == null ? getNativeType(UNKNOWN_TYPE); }
origType = origType  ; *
origType = origType == null ? getNativeType(UNKNOWN_TYPE)  ; return
origType = origType == null ? getNativeType(UNKNOWN_TYPE)  ; *
 final int
origType = origType == null ?  cast(UNKNOWN_TYPE) : origType;
 Orig type= origType == null ? getNativeType(UNKNOWN_TYPE) : origType;
origType = origType == null ?  resolve(UNKNOWN_TYPE) : origType;
 int
 origin type== null ? getNativeType(UNKNOWN_TYPE) : origType;
 originalType= origType == null ? getNativeType(UNKNOWN_TYPE) : origType;
 final String
origType = origType == null ? getNativeType(UNKNOWN_TYPE)  { }
origType = origType == null ? getNativeType(UNKNOWN_TYPE). :
 orig type= origType == null ? getNativeType(UNKNOWN_TYPE) : origType;
origType = origType == null ? getNativeType(UNKNOWN_TYPE) : origType); return
origType = origType === null ? getNativeType(UNKNOWN_TYPE) : origType;
origType = origType!= null ? getNativeType(UNKNOWN_TYPE) : origType;
origType += origType == null ? getNativeType(UNKNOWN_TYPE) : origType;
origType = origType <= null ? getNativeType(UNKNOWN_TYPE) : origType;
origType := origType == null ? getNativeType(UNKNOWN_TYPE) : origType;
origType == origType == null ? getNativeType(UNKNOWN_TYPE) : origType;
origType = origType == null && getNativeType(UNKNOWN_TYPE) : origType;
origType = origType < null ? getNativeType(UNKNOWN_TYPE) : origType;
origType = origType == null || getNativeType(UNKNOWN_TYPE) : origType;
origType = origType == null, getNativeType(UNKNOWN_TYPE) : origType;
origType = origType == null ? getNativeType(UNKNOWN_TYPE) + origType;
origType = origType == null ? getNativeType(UNKNOWN_TYPE) | origType;
