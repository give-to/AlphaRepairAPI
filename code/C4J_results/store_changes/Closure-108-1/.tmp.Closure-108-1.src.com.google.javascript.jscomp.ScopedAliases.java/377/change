Node varNode = null;
 Node grandvarNode = null;
Node varNode  = grandparent;
 if (isHoisted) {
Node  n = value. getFirstChild ( ) ;
 if (isHoisted) { String globalName= null;
 if (value) {
Node  n = value. getNext ( ) ;
 if (isHoisted)
Node  n = value. getNextChild ( ) ;
Node varNode  = parent. getParent ( ) ;
 if (isHoisted) { Node globalName= null;
 Node n = grandparent. getNextChild ( ) ; Node node = n. getNextChild ( ). getFirstChild ( ) ;
 if (isHoisted) { Node grandvarNode = null;
 Node n = grandparent. getNextChild ( ) ; Node node = n. getNextChild ( ). getNextChild ( ) ;
Node  n = getFirstChild ( grandparent ) ;
Node varNode  = parent. getFirstChild ( ) ;
Node  n = parent. getFirstChild ( ) ;
 if (value == null) grandparent=null;
 Node varNode = null; Node grandvarNode = null;
 Node n = grandparent. getNextChild ( ) ; Node varNode = n. getNextChild ( ) ; Node value = null ;
Node  n = parent. getNextChild ( ) ;
 Node node = parent. getNextChild ( ) ; Node node = node. getNextChild ( ). getParent ( ) ;
 if (value == null) value=null;
Node varNode  = (Node) grandparent;
Node varNode  = value. getFirstChild ( ) ;
 if (isHoisted) { String name= null;
Node  n = (Node) grandparent;
Node varNode  = v. getVarNode ( ) ;
 Node n = grandparent. getNextChild ( ) ; Node parent = n. getNextChild ( ) ; Node node = null ;
 Node n = grandparent. getNextChild ( ) ; Node parent = n. getNextChild ( ) ; Node name = null ;
Node  n = parent. getNext ( ) ;
 Node node = parent. getNextChild ( ) ; Node node = node. getNextChild ( ). getNext ( ) ;
Node varNode  = v. getVar ( ) ;
 if (isHoisted) { var globalName= null;
Node varNode  = v. getVariableNode ( ) ;
 if (isHoisted) { value= null;
Node varNode  = v.getParent();
Node  n = node. getNext ( ) ;
Node varNode = null ; if ( isHoisted ) {
 if ( isHoisted ) { varNode = value ; } else if ( isFunctionDecl ) {
Node varNode  = parent. getParentNode ( ) ;
Node  n = n. getNext ( ) ;
 if (value == null) returnnull;
Node  name = null;
 if (isHoisted) value=null;
 if (value == null) { return; }
 Node n = parent. getNextChild ( ) ; Node node = n. getNextChild ( ) ; Node node = null ;
Node varNode  = value. getNext ( ) ;
 if ( isHoisted ) { varNode = value ; } else if ( grandparent ) {
 if ( isHoisted ) { varNode = v. getVarNode ( ) ; } else {
Node  name = grandparent;
Node varNode = null ; if ( isVar ) {
 if (isHoisted && value!= null) {
 if ( isHoisted ) { continue ; }
 if (isHoisted || grandparent) {
 if ( isHoisted ) { varNode = value ; } else { varNode = null ; }
Node  node = grandparent;
 if ( isHoisted ) { varNode = value. clone ( ) ; } else {
 if (value == null) { continue; }
 if (! isHoisted ) {
 if ( isHoisted ) { varNode = value ; } else if ( isVar ) {
 if (isHoisted && value == null) {
 if ( isHoisted ) { varNode = v. getVarNode ( ) ;
 if (isHoisted) { var scope= null;
 if (isHoisted) { varNode = null;
 if (value == null) continue;
 if (isHoisted && value) {
 value=null;
 Node parentNode = parent. getParentNode ( ) ;
Node varNode = null ; Node parentNode = null ;
Node varNode = null ; if ( value ) {
 if (value == null) { grandparent= null;
 if (isHoisted) { String localName= null;
 if (isHoisted) { varNode = value; }
 if (isHoisted) { varNode = value;
 if ( isHoisted ) { varNode = value ; } else if (! isHoisted ) {
 varNode = null;
Node varNode  = parent. getParent(); }
 Node parentNode = parent. getParent ( ) ; Node varNode = null ;
 if (isHoisted) { assert value==null;
Node  n = value. nextChild();
 if (isHoisted || value == null) {
Node varNode = null ; if ( nested ) {
 Node parentNode = parent. getParentNode(); Node node = null;
 varNode = value;
 Node parentNode = parent. getParent ( ) ; Node node = null ;
 Node n = grandparent.getNext ( );
 if ( isHoisted ) { recordAlias(v, value); } }
 String name;
Node varNode = null ; Node globalNode = null ;
Node  nameNode = grandparent;
Node varNode = null ; if (! isHoisted ) {
 if (isHoisted) { String namespace= null;
Node  node = null;
Node varNode = null ; Node functionNode = null ;
 if (isHoisted) return; }
Node  n = parent.getParent();
Node varNode  = v. getVar(); }
 Node node = null;
 if (isHoisted) { recordAlias(value); } }
 if (isHoisted) { var name= null;
 if (null == value) grandparent=null;
 if (isHoisted || grandparent) {
 if (value == null) return grandparent;
 if (isHoisted) { recordAlias(v); } }
 if (grandparent) {
 Node parentNode = grandparent;
 String name = value. getString ( );
 if (value!= null) value=null;
 if (value == null) { return; }
Node  parent = grandparent;
 if (value == null) {
 Node n = grandparent. getNextChild ( ) ; Node parent = n. getNextChild ( ) ; Node name = null();
Node varNode  = v. getParent(); }
 if (value == null) { return false;
 if (isHoisted) { var globalName;
 if (isHoisted &&! value) {
 if ( isHoisted ) { varNode = v. getVarNode ( ) ; } }
Node  namespace = grandparent;
 Node n = grandparent.getNextChild();
Node  n = v.getNode();
 if (isHoisted) { } }
 if (isHoisted) var value= null;
 Node n = value. next ( );
 if ( isHoisted ) { varNode = v. getVariableNode ( ) ; } }
 Node varNode = null;
 if (value!= null) {
 if (value == null) { return null;
Node varNode = null ; Node node = null ;
 if ( isHoisted ) { recordAlias(v, value); } } }
 if (value == null) return; }
 Node n = grandparent. getNextChild ( ) ; Node parent = n. getNextChild ( ) ; final
Node  n = value. nextChild;
 Node n = grandparent. getNextChild ( ) ; Node parent = n. getNextChild ( ) ; } }
 Node n = grandparent. getNextChild ( ) ; Node node = n. getNextChild ( ) ; final
 Node n = grandparent. getFirstChild ( ) ; Node node = n. getFirstChild ( ) ; final
 if (isHoisted) { assert value!=null;
 if ( isHoisted ) { varNode = value ; } else { varNode = null ; } } }
 Node n = grandparent. getNextChild ( ) ; Node parent = n. getNextChild ( ) ; } final
 if (value == null) continue;
 if (!value) value=null;
 if (isHoisted) { final
 if ( isHoisted ) { recordAlias ( v, value ) ; continue ; } }
 if ( isHoisted ) { varNode = v. getVarNode(); } else
 if (value == null) return false;
 Node n = grandparent. getNextChild ( ) ; Node parent = n. getNextChild ( ) ; try { final
 if (isHoisted) { Node parent.varNode = null;
 Node n = grandparent. getNextChild ( ) ; Node node = n. getNextChild ( ) ; } }
 Node globalName= null;
Node varNode = null ; String name = null ;
 if ( isHoisted ) { varNode = v. getVarNode ( ) ; } else { final
 Node n = grandparent. getNextChild ( ) ; Node node = n. getNextChild ( ) ; } final
 if (isHoisted) { String prefix=null;
 if ( isHoisted ) { varNode = value ; } else if ( isVar ) { final
 Node n = grandparent. getFirstChild ( ) ; Node node = n. getFirstChild ( ) ; } }
 Node n = grandparent. getNextChild ( ) ; Node parent = n. getNextChild ( ) ; }
Node varNode = null ; varNode = value ;
 if ( isHoisted ) { varNode = value ; } else if ( isFunctionDecl ) { final
 if (null === value) returnnull;
 if (value)
 Node varNode = value. getNextChild ( ) ;
 if (isHoisted) value!= null;
 Node n = parent. getNextChild ( ) ; Node parent = n. getNextChild ( ) ; final
 if ( isHoisted ) { varNode = value ; } else if ( isFunctionDecl ) }
 Node n = parent. getNextChild ( ) ; Node node = n. getNextChild ( ) ; final
 if (isHoisted) { Node orig_varNode = null;
Node varNode  = value ; } }
 if ( isHoisted ) { varNode = v. getNameNode ( ) ; } else { final
 Node n = grandparent. getNextChild ( ) ; Node node = n. getFirstChild ( ) ; final
 if (isHoisted) { Node global_varNode = null;
 Node n = grandparent. getNextChild ( ) ; Node node = n. getNextChild ( ). parent ; final
 if (value) value=null;
 Node nameNode = null;
 Node n = grandparent. getFirstChild ( ) ; Node node = n. getFirstChild ( ). parent ; final
Node varNode =  parent. getFirstChild ( ) ; } }
 Node varNode = value ; varNode.varNode = null;
 Node varNode = null; Node parent.varNode = null;
 Node n = grandparent. getNextChild ( ) ; Node parent = n. getNextChild ( ) ; } } final
Node  name;
 Node n = parent. getNextChild ( ) ; Node parent = n. getNextChild ( ) ; }
 if ( isHoisted ) { varNode = value ; } else if (! isHoisted ) }
Node varNode = null ; } else {
Node  name();
Node varNode =  parent. getNextChild ( ) ; } }
Node varNode  = parent. getFirstChild ( ) ; }
 String name = null;
 var node = null;
 Node n = parent. getNextChild ( ) ; Node node = n. getFirstChild ( ) ; final
Node varNode  = value. nextChild();
 Node n = grandparent. getNextChild ( ) ; Node node = n. getNextChild ( ) ; } } final
 Node scopeNode = grandparent;
 if(value) returnnull;
 String name = n.getString();
Node varNode  = value ;
 if ( isHoisted ) { varNode = v. getVarNode ( ) ; }
 if (value == null) return; String name;
 String name = value. string ( );
 if ( isHoisted ) { recordAlias ( v, value ) ; continue ; } final
 Node globalNode = null;
Node  name = value;
 String name = n.getString;
 if (value!= null) returnnull;
 if (value == null) { return; } }
 if ( isHoisted ) { recordAlias ( v, value ) ; } } } }
Node varNode  = parent. getFirstChild ( ) ; final
 if ( isHoisted ) { recordAlias ( v, value ) ; } final
 if ( isHoisted ) { recordAlias(v, value); } };
 if (isHoisted ) { recordAlias(v); } } }
 if (isHoisted) { varNode = value ; } }
Node varNode  = "var" ;
Node varNode  = value. nextChild ;
Node varNode = null ; String globalName ;
 if (isHoisted) { Node _varNode = null;
 if (isHoisted) { varNode = value; };
 if (isHoisted ) { recordAlias(value); } } }
Node  n = parent. getParent(); }
 if (!null) value=null;
 if (!value) grandparent=null;
Node varNode  = parent. getNextChild ( ) ; }
 if (isHoisted) { recordAlias(value); } final
 Node varNode = null; Node global_varNode = null;
Node varNode = null ; } }
 if (value!= null) { final
Node varNode  = v. getVarNode ( ) ; }
Node varNode  = grandparent();
Node varNode  = v. getVarNode ( ) ; final
 Node name = n.getParent;
 String name = value.getString;
Node varNode  = parent. getParent(); final
 if (hasHoisted)
 String localName = "";
Node  n = (Node) grandparent();
Node varNode =  v. getVarNode ( ) ; } }
 Node varNode = null; Node subvarNode = null;
 String globalName= null;
 String localName = null;
 if (value == null)= null;
Node varNode = null ; if (debug)
Node varNode =  parent. getParentNode ( ) ; } }
Node varNode  = "var NAME";
 } else {
 String globalName = "";
Node  n = value;
 if (isHoisted && value) { final
 if (isHoisted && value ) { final
 if (value == null) { return; } final
 if (isHoisted) { varNode = value; },
 Node parentNode = parent. getParentNode ( ) ; final
Node varNode = null ; Node parentNode = null ; } }
 if (!value) {
 Node parentGrandparent!= null;
 if (isHoisted) { Node global$$varNode = null;
 if (isHoisted) { Node global.varNode = null;
 if (isHoisted) { NodevarNode = null;
 Node n = value.getParent;
 if (isHoisted) { StringvarNode = null;
Node varNode =  parent. getFirstChild ( ) ; } final
Node  n = value. parent;
Node varNode  = parent ; } }
Node varNode = null ; Node scopeNode = null ; } }
 assert value!=null;
 Node parentGrandparent.parent= null;
 Node n = value.getNext;
 if (isHoisted) { final
 String name = value + ";
 String globalName;
 if(isVar)
 if (!value) returnnull;
 String localName = ".";
 Node varNode = null;varNode = null;
 String globalName = "null;
 if (!value)
 Node var = grandvarNode = null;
Node  nameNode = grandparent();
 String name = value + name;
Node varNode = null ; if ( isHoisted ) { } }
Node varNode = null ; if (var)
 String name = value;
 var = value;
 Node parentNode = grandparent();
 assert grandparent==null;
Node varNode = null ; Node parentNode = null ; final
 varNode = null; grandvarNode = null;
 String name=null;
 String name = "";
 Node name = null; name= null;
 if (isHoisted)!= null;
 var name = value;
Node varNode = null ; if ( isHoisted ) { final
 Node var = null;varNode = null;
Node varNode = null ; Node nameNode = null ; } }
Node varNode = null ; } } else {
 String name = value + "";
 Node globalName = "null;
 Node parent = grandvarNode = null;
 if (isHoisted)= null;
Node varNode = null ; Node scopeNode = null ; final
 var varNode = null; grandvarNode = null;
 if (isHoisted) return ; }
Node varNode = null ; Node nameNode = null ; final
 String namespace = "";
 Node var = null; NodevarNode = null;
 Node var = _varNode = null;
 varNode = null; subvarNode = null;
Node varNode = null ; if (! isHoisted ) { final
 Node varNode = value ; } }
 if (isHoisted) continue; final
 varNode = null;varNode = null;
Node varNode = null ; Node globalNode = null ; final
 varNode = value;varNode = null;
 varNode = value; grandvarNode = null;
Node varNode = null ; varNode = value. nextChild ; }
Node varNode = null ; varNode = value. nextChild ; final
 if (isHoisted) return; final
 if (value == null) return ; }
Node varNode = null ; continue ; }
 Node parentGrandparent |= null;
Node varNode = null ; Node nameNode = null ; try { final
 var name = "name";
Node varNode = null ; } } }
 varNode = value.varNode = null;
 var = null;
 Node parentGrandparent= null;
 String localName = ":";
 if(value)null;
 Node parentGrandparent.parent()= null;
 var varNode = null; subvarNode = null;
 var node = null,varNode = null;
 Node parentNode = grandparent ; }
 Node parentGrandParent!= null;
 String namespace = null;
 String prefix=null;
 Node parent= null;
 String varNode = null; StringvarNode = null;
 Node parentGrandparent ^= null;
 Node parentGrandparent &= null;
 Node globalName!= null;
 Node varNode = null; StringvarNode = null;
Node  globalName;
 Node parent.varNode = null;
 Node localName= null;
 Node parentNode.varNode = null;
 parent=null;
 Node var = $varNode = null;
 continue; }
Node varNode  = null; }
Node varNode  = parent;
 assert value==null;
Node varNode = null ; } final
 Node nameNode2= null;
 Node globalNameNode= null;
Node varNode = null ; } } final
 Node global_varNode = null;
 Node orig_varNode = null;
 String globalName!= null;
Node  globalName();
 Node parent!= null;
 Node scope= null;
 Node var = null
 var globalName;
Node varNode = null ; try {
 var=null;
Node  node;
 Node name_varNode = null;
 String localName;
 var name;
 Node name2varNode = null;
 node=null;
 String prefix;
 } }
 if (value).
 var = value();
Node  name++;
 String namespace;
Node  parent; }
 } } }
 var varName;
 String variableName;
 } else {
Node varNode = null ; final
 node grandvarNode = null;
Node varNode ; final
 String grandvarNode = null;
Node  node; final
 try { final
 String alias;
Node varNode (); }
Node varNode ; }
 node.varNode = null;
 try { final
Node varNode  = null
 } } }
Node varNode (); final
 } }
 Node subvarNode = null;
Node varNode = null; };
 } } final
 } final
 }
 final
 try { }
 } final
 } };
 final
 };
 }
Node varNode: null;
Node varNode := null;
Node varNode is null;
