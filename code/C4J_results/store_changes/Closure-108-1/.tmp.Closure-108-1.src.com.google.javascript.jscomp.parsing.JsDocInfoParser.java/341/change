if (jsdocBuilder.recordAuthor()) {
if (jsdocBuilder) {
if (jsdocBuilder.shouldParseDocumentation()) {
 if (!jsdocBuilder.recordAuthor()) {
 if (parser.shouldParseDocumentation()) {
 if (!jsdocBuilder.shouldParseDocumentation()) {
 if (!jsdocBuilder.recordAuthor(token)) {
if (jsdocBuilder.recordAuthor()) { String token;
 if (!jsdocBuilder.recordAuthor)) {
 if (!jsdocBuilder.author()) {
 if (recordAuthor()) {
 if (!jsdocBuilder.recordAuthor) {
 if (!jsdocBuilder.recordAuthor())){
 if (shouldParseDocumentation()) {
 if (!jsdocBuilder.recordAuthor(author) {
if (jsdocBuilder.author()) {
 token = eatUntilEOLIfAnnotation();
 if (jsdocBuilder.recordAuthor()) { token = eatUntilEOLIfNotAnnotation(); } else
 if (!jsdocBuilder.recordAuthoring()) {
 if (jsdocBuilder.recordAuthor()) { token = eatUntilEOLIfNotAnnotation(); } else {
 if (recordAuthor) {
 if (jsdocBuilder.recordAuthor()) { token = eatUntilEOLIfNotAnnotation(); } else { token = "" ;
 if (jsdocBuilder.recordAuthor()) { token = eatUntilEOLIfNotAnnotation(); } else { token = "" ; }
 if (jsdocBuilder.recordAuthor())){
 if (jsdocBuilder.recordAuthor(token)) {
 if (docBuilder.shouldParseDocumentation()) {
 if (jsdocBuilder.recordAuthor()) { token = eatUntilEOLIfNotAnnotation(); } else { token = null ; }
if (jsdocBuilder.recordAuthor()) { token = null;
 { token = eatUntilEOLIfNotAnnotation(); } else { token = eatUntilEOLIfNotAnnotation(); }
 if (!jsdocBuilder.parser.shouldParseDocumentation()) {
 if (jsdocBuilder.recordAuthor()) { token = eatUntilEOLIfNotAnnotation(); } else { token = '' ; }
 if (!jsdocBuilder.recordAuthorInfo()) {
 if (jsdocBuilder.recordAuthor()) { Token token = eatUntilEOLIfAnnotation();
if (jsdocBuilder.shouldParseDocumentation()) { String token;
 token = eatUntilEOLIfNotAnnotation();
 if (jsdocBuilder.recordAuthor()) { Token token = eatUntilEOLIfNotAnnotation();
 if (!docBuilder.shouldParseDocumentation()) {
 if (jsdocBuilder.recordAuthor()) { token = eatUntilEOLIfNotAnnotation(); } else { token = null;
if (jsdocBuilder.recordAuthor()) { Token token = null;
 if (jsdocBuilder.recordAuthor()) { token = eatUntilEOLIfNotAnnotation(); }
 if (!jsdocBuilder.recordAuthor()&&shouldParseDocumentation()) {
if (jsdocBuilder.recordAuthor()) { token = "" ;
if (jsdocBuilder.author)
 { token = eatUntilEOLIfNotAnnotation(); } else { token = eatUntilEOLIfAnnotation(); }
 if (recordAuthor)) {
 if (jsdocBuilder.recordAuthor()) { token = eatUntilEOLIfNotAnnotation(); } else { token = '' ;
 token = null; if(jsdocBuilder.shouldParseDocumentation()) {
if (jsdocBuilder.shouldParseDocumentation()) { token = null;
 if (jsdocBuilder.recordAuthor()) { Token token = eatUntilEOLIfNotAnnotation(); } else
 { String token = eatUntilEOLIfNotAnnotation();
 if (!shouldParseDocumentation()) {
 if (jsdocBuilder.recordAuthor()) { token = eatUntilEOLIfAnnotation(); } else { token = "" ; }
 if (jsdocBuilder.recordAuthor()) { token = eatUntilEOLIfNotAnnotation(); } else { token = token ; }
 if (!jsdocBuilder.recordAuthor(author)) {
 if (!jsdocBuilder.author) {
 token = eatUntilEOLIfNotAnnotation;
 if (!recordAuthor()) {
 if (jsdocBuilder.recordAuthor()) { token = eatUntilEOLIfNotAnnotation(); } else { return ; }
 if (jsdocBuilder.recordAuthor()) { token = eatUntilEOLIfNotAnnotation(); } else { break ; }
 if (!jsdocBuilder.recordAuthormiss()) {
 if (jsdocBuilder.recordAuthor()) { token = eatUntilEOLIfNotAnnotation(); } case AUTHOR:
if (jsdocBuilder.shouldParseDocumentation()) { Token token = null;
 token = eatUntilEOLIfAnnotation;
 { Token token = eatUntilEOLIfAnnotation();
 { token = eatUntilEOLIfNotAnnotation(); } else { token = eatUntilEOLIfToken ; }
if (jsdocBuilder.shouldParseDocumentation()) { token = "" ;
 if (!jsdocBuilder.recordAuthor().shouldParseDocumentation()) {
if (jsdocBuilder.recordAuthor()) { final
 if (jsdocBuilder.recordAuthor()) { token = eatUntilEOLIfAnnotation(); } else { token = "" ;
 if parser.shouldParseDocumentation()) {
if (jsdocBuilder.shouldParseDocumentation() && token == null) {
 if (jsdocBuilder.recordAuthor()) { String token = eatUntilEOLIfAnnotation();
 { token = eatUntilEOLIfNotAnnotation(); } else { token = eatUntilEOL(); }
 token = eatUntilEOLIfNotAnnotation(); token = eatUntilEOLIfNotAnnotation(); token = eatUntilEOL;
if (jsdocBuilder.recordAuthor()) { String token = null;
 token = eatUntilEOL;
 if (authorInfo == null){
 if (jsdocBuilder.recordAuthoring()){
 if (!jsdocBuilder.recordAuthoring) {
 { token = eatUntilEOLIfNotAnnotation(); } else { token = eatUntilEOL ; }
 if (!jsdocBuilder.recordAuthor && parser.shouldParseDocumentation()) {
 if (jsdocBuilder.recordAuthor()) { Token token = eatUntilEOLIfNotAnnotation;
 if (!jsdocBuilder.recordAuthor()) { token = "" ;
 { Token token = eatUntilEOLIfNotAnnotation();
 if (!jsdocBuilder.recordAuthor()) { token = null;
 token = eatUntilEOLIfNotAnnotation();
 if (!jsdocBuilder.recordAuthor(token) {
 token = eatUntilEOL; if(jsdocBuilder.shouldParseDocumentation()) {
if (jsdocBuilder.shouldParseDocumentation()) { String token = "";
 { token = eatUntilEOLIfNotAnnotation(); } else { token = eatUntilEOLIfNotToken(); }
 token = "";
if (jsdocBuilder.recordAuthor()) { String token = "";
 if (jsdocBuilder.recordAuthor()) { Token token = eatUntilEOLIfAnnotation;
 { token = eatUntilEOLIfNotAnnotation(); } case AUTHOR: {
if (jsdocBuilder.recordAuthor(true)) {
 if (jsdocBuilder.recordAuthor(...)) {
 if (!jsdocBuilder.recordAuthorInfo) {
if (jsdocBuilder.shouldParseDocumentation() { Token token = null;
 { String author = extractSingleLineBlock(); Author token = authorInfo.token;
 if (jsdocBuilder.recordAuthor) {
if (jsdocBuilder.author) {
 token = null;
 token = eatUntilEOLIfToken;
 if (jsdocBuilder.recordAuthorRecorded()) {
 if (!jsdocBuilder)) {
 { token = eatUntilEOLIfNotAnnotation(); }
 if (()) {
 if (jsdocBuilder.recordAuthor()) { token = eatUntilEOLIfNotAnnotation(); } } else
if (jsdocBuilder.recordAuthor()) { Token token;
 if (!parser.recordAuthor()) {
 token = eatUntilEOLIfNotAnnotation(); if (token) {
 if (extractSingleLineBlock) {
 if (jsdocBuilder.recordAuthor()) { token = eatUntilEOLIfNotAnnotation(); } else:
 if (if (!jsdocBuilder.shouldParseDocumentation()) {
 if (!jsdocBuilder.recordAuthorGenerator()) {
 token = eatUntilEOL();
 if (jsdocBuilder.recordAuthor()) { String author = extractSingleLineBlock(); } else
 if (jsdocBuilder.recordAuthor()) { Token token = eatUntilEOLIfToken;
if (jsdocBuilder.recordAuthor(token))) {
if (jsdocBuilder.shouldParseDocumentation()) { String token = null;
if  (!jsdocBuilder) {
if (jsdocBuilder.shouldParseDocumentation() || token == null) {
 if (authorInfo!= null){
if (jsdocBuilder.shouldParseDocumentation()) { String token = eatUntilEOL();
 if (jsdocBuilder.recordAuthor()) { Token token = eatUntilEOLIfToken();
 if (!jsdocBuilder.recordAuthor()) { String token;
 if (!jsdocBuilder.record()) {
 if (jsdocBuilder.recordAuthorInfo()) {
if (jsdocBuilder.shouldParseDocumentation() { token = null;
 if (jsdocBuilder.recordAuthor()) { token = eatUntilEOLIfNotAnnotation(); else
 token = ""; if(jsdocBuilder.shouldParseDocumentation()) {
 if (jsdocBuilder.recordSingleLineBlock) {
 if (jsdocBuilder.recordAuthor()) { String token = eatUntilEOLIfToken;
 if (jsdocBuilder.recordAuthor)) {
 if () {
 if (extractSingleLineBlock!= null) {
 if (jsdocBuilder.recordAuthor()) { String token = eatUntilEOLIfToken();
 if (jsdocBuilder.recordAuthor()) { token = eatUntilEOLIfNotAnnotation(); } case AUTHOR: {
 if (jsdocBuilder.recordAuthor()) { token = eatUntilEOLIfNotAnnotation(); } else,
 if (jsdocBuilder.recordAuthor()) { Token token = eatUntilEOLIfNotAnnotation(); else
 if (extractSingleLineBlockEnabled) {
 if (jsdocBuilder.recordAuthor()) { token = eatUntilEOLIfNotAnnotation(); } else { } else
if  (token) {
 { Token token = eatUntilEOLIfAnnotation;
 if (jsdocBuilder.recordAuthor()&&shouldParseDocumentation()) {
if  (!jsdocBuilder.recordAuthor()) { final
 if (!jsdocBuilder.recordAuth(token)) {
 if (jsdocBuilder.recordAuthor()) { String author = null;
if (jsdocBuilder.shouldParseDocumentation()) { String token = "Author" ;
 { String author = extractSingleLineBlock(); Author token = authorInfo.token();
 token = eatUntilEOLIfToken();
 { token = eatUntilEOLIfNotAnnotation();
if (jsdocBuilder.shouldParseDocumentation() { String token = "";
 if (jsdocBuilder.recordAuthor()) { String token = eatUntilEOLIfAnnotation;
 if (!jsdocBuilder.recordshouldParseDocumentation()) {
 { Token token = eatUntilEOLIfNotAnnotation;
 if (!jsdocBuilder.recordAuthorComment()) {
 if (jsdocBuilder.recordAuthor()) { Token token = eatUntilEOL;
if (jsdocBuilder.shouldParseDocumentation(token))) {
 if (msg.jsdoc.shouldParseDocumentation()) {
if (jsdocBuilder.shouldParseDocumentation() { String token = null;
 if (!recordAuthor)) {
 { token = eatUntilEOLIfNotAnnotation(); } case AUTHOR: { token = null;
if (jsdocBuilder.recordAuthor(true))) {
if (jsdocBuilder.shouldParseDocumentation(token)) { token = token ; } else {
 if (jsdocBuilder.recordAuthor()) { String token = eatUntilEOL;
 if (parser.recordAuthor()) {
 if (!jsdocBuilder.recordAuthor(...)) {
 { String token = eatUntilEOLIfNotAnnotation;
 if (isSingleLineBlock)) {
if (jsdocBuilder.shouldParseDocumentation()) { Token token;
if (jsdocBuilder.shouldParseDocumentation(token)) {
 { token = eatUntilEOLIfNotAnnotation(); } else
 if (!jsdocBuilder.author)) {
 if (jsdocBuilder.recordAuthor()) { Token token = eatUntilEOL();
if (jsdocBuilder.shouldParseDocumentation() && token == eatUntilEOLIfNotAnnotation) {
 token = eatUntilEOLIfNotAnnotation(); case AUTHOR:
 token = eatUntilEOL(); if(jsdocBuilder.shouldParseDocumentation()) {
 if (!jsdocBuilder.recordAuthor()) if(jsdocBuilder.shouldParseDocumentation()) {
 token = eatUntilEOLIfNotAnnotation(); if (author) { final
if (jsdocBuilder.shouldParseDocumentation()) { String author = "";
 token = eatUntilEOL(token); if(jsdocBuilder.shouldParseDocumentation()) {
 if (jsdocBuilder.recordAuthor()) { String token = eatUntilEOL();
if (jsdocBuilder.shouldParseDocumentation() { String token = eatUntilEOL();
 token = eatUntilEOLIfNotAnnotation(); } else
if (jsdocBuilder.shouldParseDocumentation() { token = "" ;
 if (!jsdocBuilder.recordAuthor(token))) {
 if (!jsdocBuilder._shouldParseDocumentation()) {
 Token token = null; if(jsdocBuilder.shouldParseDocumentation()) {
if (jsdocBuilder.shouldParseDocumentation() && extractSingleLineBlock()) {
 if (!jsdocBuilder.recordAuthor(); parser.shouldParseDocumentation()) {
 if (!jsdocBuilder.docBuilder.shouldParseDocumentation()) {
if (jsdocBuilder.shouldParseDocumentation()) { String token = eatUntilEOL;
 if (!jsdocBuilder.recordUnshouldParseDocumentation()) {
 if (!recordAuthor) {
 { token = eatUntilEOLIfAnnotation(); }
 if (!jsdocBuilder.recordAuthor.shouldParseDocumentation()) {
if (jsdocBuilder.shouldParseDocumentation() && token == eatUntilEOLIfAnnotation) {
 if (jsdocBuilder.recordAuthor()) { String token = "Author" ;
if (jsdocBuilder.shouldParseDocumentation(token)) { final
 if (jsdoc.shouldParseDocumentation()) {
 if (!jsdocBuilder.recordAuthor(shouldParseDocumentation()) {
 if (jsdocBuilder.recordAuthor()) { String author = "unknown" ;
if (jsdocBuilder.shouldParseDocumentation() && extractSingleLineBlock!= null) {
 if (token == null){
 token = EMPTY; if(jsdocBuilder.shouldParseDocumentation()) {
 { Token token = eatUntilEOLIfNotAnnotation(); }
 if (!jsdocBuilder.docParser.shouldParseDocumentation()) {
 if (!jsdocBuilder.doc.shouldParseDocumentation()) {
 if (msg.jsdocBuilder.shouldParseDocumentation()) {
 { Token token = eatUntilEOLIfToken;
 token = "Author" ; if (jsdocBuilder.shouldParseDocumentation()) {
 { Token token = eatUntilEOL;
 token = null; if (!jsdocBuilder.shouldParseDocumentation()) {
if (jsdocBuilder.shouldParseDocumentation(token)) { return token; }
if (jsdocBuilder.recordAuthor()) { String author;
if (jsdocBuilder.shouldParseDocumentation(token)) { token = token;
 if (authorInfo == null)) {
if (jsdocBuilder.shouldParseDocumentation() { String token = "Author" ;
 if (!jsdocBuilder.record.shouldParseDocumentation()) {
 if (authorInfo!= null)) {
if (jsdocBuilder.shouldParseDocumentation() { String author = null;
if (jsdocBuilder.shouldParseDocumentation() || authorInfo == null) {
if (jsdocBuilder.shouldParseDocumentation()) { String token = "author" ;
 if (isSingleLineBlock()) {
 if (jsdocBuilder.recordAuthor()) { Token token = eatUntilEOL(); }
 if (jsdocBuilder.recordAuthor()) { Token token = eatUntilEOL(); else
 if (!extractSingleLineBlock) {
if  (token)
 if (jsdocBuilder.recordAuthor()) { String token = eatUntilEOL(); }
 token = "author" ; if(jsdocBuilder.shouldParseDocumentation()) {
if  (isSingleLineBlock) {
 if (jsdocBuilder.record) {
 token = eatUntilEOLIfToken; if(jsdocBuilder.shouldParseDocumentation()) {
 { Token token = eatUntilEOL ( ) ;
 if (!jsdocBuilder.recordAuthorsOnly()) {
 token = eatUntilEOLIfAuthor();
if (jsdocBuilder.shouldParseDocumentation()) { String token = 'Author' ;
 token = eatUntilEOL(token);
 if (jsdocBuilder.recordAuthor()) { String token = eatUntilEOL(); else
 token = eatUntilEOLIfAnnotation if(jsdocBuilder.shouldParseDocumentation()) {
 if (!jsdocBuilder.reshouldParseDocumentation()) {
 if (!jsdocBuilder.jsdoc.shouldParseDocumentation()) {
 if (!docBuilder.recordAuthor()) {
 token = eatUntilEOLIfNotAnnotation;
if (jsdocBuilder.shouldParseDocumentation() && authorInfo!= null) {
if (jsdocBuilder.shouldParseDocumentation()) { String token = "Author:" ;
 { Token token = eatUntilEOLIfNotAnnotation(); } else {
 { Token token = eatUntilEOLIfAnnotation(); }
 { String token = authorInfo.token;
 if (!jsdoc.recordAuthor()) {
if (jsdocBuilder.shouldParseDocumentation() { String author = "";
 { token = eatUntilEOLIfNotAnnotation;
if (jsdocBuilder.shouldParseDocumentation(token)) { token = null;
 if (token.isEmpty()) {
 if (jsdocBuilder.recordAuthor && parser.shouldParseDocumentation()) {
 if (jsdocBuilder.recordAuthor()) { Token token = eatUntilEOL ; else
 if (!jsdocBuilder.*shouldParseDocumentation()) {
 { token = eatUntilEOLIfNotAnnotation(); } else { final
if (jsdocBuilder.shouldParseDocumentation(token)) { token = token.token;
 if (jsdocBuilder.recordAuthor()) { token = author; final
 { Token token = eatUntilEOLIfToken();
 token = ''; if(jsdocBuilder.shouldParseDocumentation()) {
 if (extractSingleLineBlock()) {
 if (record()) {
 if (...shouldParseDocumentation()) {
 { String token = "Author" ;
 if (!jsdocBuilder.recordAuthor() parser.shouldParseDocumentation()) {
 token = "Author" ; if (docBuilder.shouldParseDocumentation()) {
 token = readSingleLineBlock(stream.getLineno(), false);
if (jsdocBuilder.shouldParseDocumentation()) { token = '' ;
 token = 'Author' ; if (jsdocBuilder.shouldParseDocumentation()) {
 if (!authorInfo.token) {
if (jsdocBuilder.shouldParseDocumentation() && (jsdocBuilder.recordAuthor(token))) {
 if (!jsdocBuilder.extractor.shouldParseDocumentation()) {
 if (!jsdocBuilder.config.shouldParseDocumentation()) {
 token = readSingleLineBlock(stream.getLineno(), parser);
 token = readSingleLineBlock(stream.getLineno(), true);
if (jsdocBuilder.shouldParseDocumentation(token)) { token = "" ;
 if (hasSingleLineBlock()) {
 if (!jsdocBuilder.jdoc.shouldParseDocumentation()) {
 if (!jsdocBuilder.record)) {
if (jsdocBuilder.shouldParseDocumentation() &&!jsdocBuilder.recordAuthor(token)) {
 if (authorInfo.recordAuthor)) {
 if (extractSingleLineBlockEnabled)) {
 if (!jsdocBuilder.builder.shouldParseDocumentation()) {
if (jsdocBuilder.shouldParseDocumentation() { String token = eatUntilEOL;
 if (singleLineBlock) {
 if (!authorInfo.error) {
if (jsdocBuilder.shouldParseDocumentation() && (jsdocBuilder.recordAuthor() )) {
if  (isSingleLineBlock) { final
if (extractSingleLineBlock)
if (jsdocBuilder.shouldParseDocumentation()) { String author;
 if (isSingleLine()) {
if (jsdocBuilder.shouldParseDocumentation() && (jsdocBuilder.recordAuthor(true))) {
 if (_docBuilder.shouldParseDocumentation()) {
 token = readSingleLineBlock(stream.getLineno(), null);
 if (!jsdocBuilder.documentationParser.shouldParseDocumentation()) {
if  (isSingleLineBlockRecorded()) {
if (jsdocBuilder.shouldParseDocumentation() || (jsdocBuilder.recordAuthor(token))) {
 { Token token = eatUntilEOLIfNotAnnotation(); else
 if (!jsdocBuilder.recordAuthor if(jsdocBuilder.shouldParseDocumentation()) {
if (jsdocBuilder.shouldParseDocumentation() || authorInfo!= null) {
if (jsdocBuilder.recordAuthor() { final
 if ()){
 if (jsdocBuilder.recordAuthor()) { String token = null; final
if  (token == null) { final
 if (isSingleLineBlockRecorded)) {
 if (!jsdocBuilder.options.shouldParseDocumentation()) {
if (jsdocBuilder).author()) {
 if (!parser.shouldParseDocumentation()) {
 token = "Author" ;
 if (true &&!jsdocBuilder.shouldParseDocumentation()) {
 if (token == null)) {
if (jsdocBuilder.shouldParseDocumentation() &&!jsdocBuilder.recordAuthor()) {
if  (extractSingleLineBlock) { final
 { String token = 'Author' ;
 token = "Author" ; if (!jsdocBuilder.shouldParseDocumentation()) {
 if (hasSingleLineBlock(token)) {
if (jsdocBuilder.shouldParseDocumentation() || (jsdocBuilder.recordAuthor(true))) {
 token = eatUntilEOL(); if (!jsdocBuilder.shouldParseDocumentation()) {
 { Token token = null;
if (jsdocBuilder.shouldParseDocumentation() && authorInfo == null) {
if (jsdocBuilder.shouldParseDocumentation() || token == eatUntilEOL()) {
if (jsdocBuilder.shouldParseDocumentation() { String token;
if (jsdocBuilder.shouldParseDocumentation()) { final
 if (extractSingleLineBlock())){
 Token token = eatUntilEOL;
 if (jsdocBuilder.recordAuthor()) { Token token = authorToken ; else
 token = 'Author' ;
if (jsdocBuilder.shouldParseDocumentation() &&!jsdocBuilder.recordAuthor(...)) {
 if (!jsdoc.builder.shouldParseDocumentation()) {
 if (.shouldParseDocumentation()) {
 token = eatUntilEOL; if (!jsdocBuilder.shouldParseDocumentation()) {
 { token = eatUntilEOLIfNotAnnotation(); } }
 if (extractSingleLineBlockInfo) {
 token = "" ; if (!jsdocBuilder.shouldParseDocumentation()) {
 if (authorRecorded){
 if (true){
 if (this.jsdocBuilder.shouldParseDocumentation()) {
if (jsondocBuilder.recordAuthor()) { final
 if (isSingleLine)) {
if (jsdocBuilder.shouldParseDocumentation() &&!jsdocBuilder.recordAuthor(author) {
 token = "unknown"; if(jsdocBuilder.shouldParseDocumentation()) {
if (jsdocBuilder.shouldParseDocumentation() { String token = "Author:" ;
 if (jsdocBuilder.recordAuthor()) { Token token = authorToken ; }
 if (!jsdoc.parser.shouldParseDocumentation()) {
if (jsdocBuilder.shouldParseDocumentation(token)) { token = token.token();
if (jsdocBuilder.shouldParseDocumentation()) { String token = "" ; final
if (jsdocBuilder.shouldParseDocumentation() &&!jsdocBuilder.recordAuthor(token) {
if (jsdocBuilder.recordAuthor())
 { Token token = eatUntilEOL(); }
if (jsdocBuilder.shouldParseDocumentation() && extractSingleLineBlock is not null) {
 if (if (jsdocBuilder.shouldParseDocumentation()) {
if (jsdocBuilder.shouldParseDocumentation()) { token = eatUntilEOL(); final
 token = "Author: "; if (jsdocBuilder.shouldParseDocumentation()) {
if  (!jsdocBuilder).author();
 if (author!= null){
if  (!jsdocBuilder).author()
 { String token = eatUntilEOL(); final
if (jsdocBuilder.shouldParseDocumentation() && extractSingleLineBlock()!= null) {
 if (!jsdoc.shouldParseDocumentation()) {
 if (!author &&!jsdocBuilder.shouldParseDocumentation()) {
if (jsdocBuilder.shouldParseDocumentation() && (jsdocBuilder.recordAuthor(author))) {
if (jsdocBuilder) { final
if (jsdocBuilder.recordAuthor()) { Token token = null ; final
 token = 'Author' ; if (!jsdocBuilder.shouldParseDocumentation()) {
 if (!jsdocBuilder.record(parser.shouldParseDocumentation()) {
 token = '';
if (jsdocBuilder.shouldParseDocumentation() || author == null) {
 if (!jsdocBuilder.parser.parser.shouldParseDocumentation()) {
 if (!jsdocBuilder.recordAuthor &&(jsdocBuilder.shouldParseDocumentation()) {
 if (!jsdocBuilder.recordAuthor())(jsdocBuilder.shouldParseDocumentation()) {
 if (jsdocBuilder.recordAuthor()) { Token token = null ; else
if (jsdocBuilder.shouldParseDocumentation(token)) { token = token; final
if (jsdocBuilder.shouldParseDocumentation() || (jsdocBuilder.recordAuthor(false))) {
if (jsdocBuilder.shouldParseDocumentation(")) {
 token = token; if (!jsdocBuilder.shouldParseDocumentation()) {
 token = "author" ;
if (jsdocBuilder.shouldParseDocumentation(token)) { token = token; }
if  (!token) {
if  (!token)
if (jsdocBuilder.shouldParseDocumentation() || (jsdocBuilder.recordAuthor(author))) {
if  (isSingleLine) {
 Token token = eatUntilEOL();
if (jsdocBuilder.shouldParseDocumentation()) { Token token = eatUntilToken(); final
if (jsdocBuilder.shouldParseDocumentation() && isSingleLineBlockRecorded()) {
 token = '' ; if (!jsdocBuilder.shouldParseDocumentation()) {
 { Token token = null; if (!jsdocBuilder.shouldParseDocumentation()) {
if (jsdocBuilder.shouldParseDocumentation() && isSingleLineBlock (authorInfo)) {
 token = 'author' ;
if (jsdocBuilder.shouldParseDocumentation(author)) { String token;
 if (!authorInfo.token)){
if (jsdocBuilder.shouldParseDocumentation() && extractSingleLineBlock!== null) {
if (jsdocBuilder.recordAuthor()) { String token = "" ; final
if  (!author) {
 token = null; if (if (!jsdocBuilder.shouldParseDocumentation()) {
if (jsdocBuilder.shouldParseDocumentation() ||!jsdocBuilder.recordAuthor(...)) {
if (jsdocBuilder.recordAuthor()) { token = ""();
if (jsdocBuilder.shouldParseDocumentation()) { Token token = null ; final
 { String token = authorInfo.token();
if (jsdocBuilder.shouldParseDocumentation()) { String token = null ; final
if (jsdocBuilder.shouldParseDocumentation(parser)) { String token;
if (jsdocBuilder.shouldParseDocumentation() || (jsdocBuilder.recordAuthor(null))) {
 if (!token &&jsdocBuilder.shouldParseDocumentation()) {
if (jsdocBuilder.shouldParseDocumentation(token)) return token;
if (jsdocBuilder.shouldParseDocumentation() ||!jsdocBuilder.recordAuthor(author) {
 if (!token.isEmpty)) {
 if (!jsdocBuilder.parser(...).shouldParseDocumentation()) {
if (jsdocBuilder.shouldParseDocumentation() { String token = "" ; final
 token = eatUntilEOLIfNotAnnotation(); case AUTHOR: {
 if (jsdocBuilder.recordAuthor()) { Token token = null ; }
 { String author = extractSingleLineBlock(); final
 if (!authorInfo.jsdocBuilder.shouldParseDocumentation()) {
if (jsdocBuilder.author)) {
 token = null if(jsdocBuilder.shouldParseDocumentation()) {
 if (.){
 token = eatUntilEOLIfAnnotation());
 token = eatUntilEOLIf(if (!jsdocBuilder.shouldParseDocumentation()) {
if (jsdocBuilder.shouldParseDocumentation() && isSingleLineBlock (...)) {
 if (_docBuilder.recordAuthorInfo()) {
 token = eatUntilEOL; while(jsdocBuilder.shouldParseDocumentation()) {
if (jsdocBuilder.shouldParseDocumentation() && token == eatUntilEOLAnnotation) {
if (jsdocBuilder.shouldParseDocumentation() ||!jsdocBuilder.recordAuthor(token) {
 if (!jsdocBuilder.recordAuthor ||(jsdocBuilder.shouldParseDocumentation()) {
 if (jsdocBuilder.recordAuthor()) { String token = "" ; else
if (jsdocBuilder.recordAuthor()) { String author = "" ; final
 { String token = eatUntilEOL; final
if (jsdocBuilder.shouldParseDocumentation())  { String token = eatUntilEOL(); final
 if (jsdocBuilder.recordAuthor()) { String author = "" ; }
 if (jsdocBuilder.recordAuthor()) { String token = "" ; }
if (jsdocBuilder.shouldParseDocumentation() { Token token = null ; final
if (jsdocBuilder.shouldParseDocumentation() && isSingleLineBlock (token)) {
if (jsdocBuilder.shouldParseDocumentation() { Token token = eatUntilToken(); final
if (jsdocBuilder.shouldParseDocumentation() && token == -1) {
if (jsdocBuilder.shouldParseDocumentation())  { Token token = eatUntilEOL(); final
 if (!jsdocBuilderImpl.shouldParseDocumentation()) {
if (jsdocBuilder.shouldParseDocumentation() && (authorInfo == null)) {
if (jsdocBuilder.shouldParseDocumentation() || isSingleLineBlockRecorded()) {
if (jsdocBuilder.shouldParseDocumentation() || (authorInfo == null)) {
if (jsdocBuilder.shouldParseDocumentation() { Token token = eatUntilEOL(); final
if (jsdocBuilder.shouldParseDocumentation() || (authorInfo.string!= null) {
 if (!authorInfo.empty()) {
if (jsdocBuilder.shouldParseDocumentation() || isSingleLineBlock (authorInfo)) {
 (token) {
 if (token)) {
if (jsdocBuilder.shouldParseDocumentation()) { String token = '' ; final
if (jsdocBuilder.shouldParseDocumentation() ) return token;
if (jsdocBuilder.shouldParseDocumentation() || authorInfo.token!= null) {
if (jsdocBuilder.shouldParseDocumentation(token)) { token = eatUntilToken(); final
if (jsdocBuilder.shouldParseDocumentation() || token == eatUntilEOLAnnotation) {
 if (this.shouldParseDocumentation()) {
if (jsdocBuilder.shouldParseDocumentation() && (authorInfo!= null)) {
if (jsdocBuilder.shouldParseDocumentation() || isSingleLineBlock (...)) {
 if (!jsdocBuilder.recordAuth()) {
if (jsdocBuilder.recordAuthor()) { String author = null ; final
 token "" ; if(jsdocBuilder.shouldParseDocumentation()) {
 if (!jsdocBuilder).author())
if (jsdocBuilder.shouldParseDocumentation() || token == eatUntilEOL) {
if  (author) {
if (jsdocBuilder.shouldParseDocumentation() && authorInfo.string) {
if (jsdocBuilder.shouldParseDocumentation() { String token = null ; final
if (token == null) { continue ; }
 if (true)) {
if (jsdocBuilder.shouldParseDocumentation()) { String author = "" ; final
 if (token()) {
if (jsdocBuilder.shouldParseDocumentation() || token == eatUntilEOLIfEmpty) {
if (jsdocBuilder.shouldParseDocumentation(token)) { token = eatUntilToken(); }
if (jsdocBuilder.shouldParseDocumentation() && token == eatUntilEOLIfEmpty) {
if (jsdocBuilder.shouldParseDocumentation() { final
 if (jsdoc.builder.shouldParseDocumentation()) {
 if (author!= null)) {
if (jsdocBuilder.shouldParseDocumentation() ||!jsdocBuilder.recordAuthor(.)) {
if (jsdocBuilder.shouldParseDocumentation() || (authorInfo == null) {
 if (isAuthoring()) {
 if (builder.shouldParseDocumentation()) {
 if (hasAuthorInfo()) {
if (jsdocBuilder.shouldParseDocumentation() && extractSingleLineBlockEnabled) {
if (jsdocBuilder.shouldParseDocumentation() || token == eatUntilEOL();) {
 if ((jsdocBuilder.shouldParseDocumentation()) {
 token = null;{
if (jsdocBuilder.shouldParseDocumentation() && token == eatUntilEOLIfToken) {
if (jsdocBuilder.shouldParseDocumentation(token)) { token = token.token; final
 token null ; if(jsdocBuilder.shouldParseDocumentation()) {
if (jsdocBuilder!= null)
if  (token) { final
 if (!token)) {
if (jsdocBuilder.shouldParseDocumentation() || token == -1) {
if  (true)
if (jsdocBuilder.recordAuthor) { final
if (jsdocBuilder.shouldParseDocumentation())  { Author token = eatUntilEOL(); final
 if (!)) {
if (jsdocBuilder.shouldParseDocumentation() || (authorInfo.token == null) {
 if (record) {
if (jsdocBuilder.shouldParseDocumentation() ) { token = eatUntilEOL(); #
if (jsdocBuilder.shouldParseDocumentation() && isSingleLineBlock) {
if (jsdocBuilder.shouldParseDocumentation() || isSingleLineBlock (authorInfo.string) {
if (jsdocBuilder.shouldParseDocumentation() || isSingleLineBlock (authorInfo))) {
if (jsdocBuilder.shouldParseDocumentation() && author!= null) {
if (jsdocBuilder.shouldParseDocumentation())  { String token = eatUntilEOL; final
if (jsdocBuilder.shouldParseDocumentation(author)) { token = author; final
if (jsdocBuilder.record())
if (jsdocBuilder.shouldParseDocumentation(token))) { final
if (jsdocBuilder).recordAuthor()) {
 if (argParser.shouldParseDocumentation()) {
if (jsdocBuilder.shouldParseDocumentation() || token == eatUntilEOLIfNone) {
if (jsdocBuilder.shouldParseDocumentation(token)) { token = token; } final
if (jsdocBuilder.shouldParseDocumentation() && token == 'author') {
if (jsdocBuilder.shouldParseDocumentation(...)) {
if (jsdocBuilder.shouldParseDocumentation() { String author = "" ; final
if (jsdocBuilder.shouldParseDocumentation(token)) { token = author; }
 if (_jsdocBuilder.shouldParseDocumentation()) {
 Token = null;
if  (authorInfo) {
 token = "" if(jsdocBuilder.shouldParseDocumentation()) {
 if (hasAuthorBlock()) {
if (jsdocBuilder.shouldParseDocumentation() { token = eatUntilEOL(); } final
if (jsdocBuilder.shouldParseDocumentation())  { Token token = eatUntilEOL; final
 if (authorRecorded)) {
 if (parseAuthorBlock()) {
if (jsdocBuilder).author {
if (jsdocBuilder.shouldParseDocumentation() || author!= null) {
 token = eatUntilEOL(); while(jsdocBuilder.shouldParseDocumentation()) {
 if (documentation &&jsdocBuilder.shouldParseDocumentation()) {
if  (optional)
if (jsdocBuilder.shouldParseDocumentation() && token == "author") {
if (jsdocBuilder.shouldParseDocumentation() || (authorInfo!= null) {
if (jsdocBuilder.shouldParseDocumentation() { String author = null ; final
 if (token == " ")) {
 if (author()) {
 token = eatUntilEOL(); else
if (jsdocBuilder.shouldParseDocumentation() || isSingleLineBlock()) {
if (jsdocBuilder)) {
 if (!authorInfo &&jsdocBuilder.shouldParseDocumentation()) {
if (jsdocBuilder.shouldParseDocumentation() && isSingleLineBlock()) {
if (jsdocBuilder.shouldParseDocumentation() || isSingleLineBlock) {
if  (!author) { final
 if (debug) {
 if (!){
if (jsdocBuilder.shouldParseDocumentation() && author == null) {
 if (debug)) {
if (jsdocBuilder == null)
if (jsdocBuilder.shouldParseDocumentation() || token == "author") {
if  ()
 if (record)) {
if (jsdocBuilder.shouldParseDocumentation( ))) {
 token = eatUntilEOL++;
 if ($jsdocBuilder.shouldParseDocumentation()) {
 if (parse) {
 token = eatUntilEOL;;
if (jsdocBuilder.shouldParseDocumentation() || authorInfo.isEmpty) {
if (jsdocBuilder.shouldParseDocumentation() || token!= null) {
if (jsdocBuilder.shouldParseDocumentation() { String author;
if (jsdocBuilder.shouldParseDocumentation() || authorInfo.string) {
if (jsdocBuilder.shouldParseDocumentation(true)) {
if (jsdocBuilder.authors()) {
if (jsdocBuilder.shouldParseDocumentation())) { final
if (parser) {
 if (!authorFound)) {
 if (valid()) {
if  (author) { final
if (jsdocBuilder.shouldParseDocumentation(author)) { final
if (jsdocBuilder.shouldParseDocumentation() && token!= null) {
if (jsdocBuilder.shouldParseDocumentation() && token == "") {
 if (continue()) {
if (jsdocBuilder.shouldParseDocumentation() || token == "") {
 if (...jsdocBuilder.shouldParseDocumentation()) {
 if (!authorOnly)) {
if (jsdocBuilder.shouldParseDocumentation() { String author; final
if (jsdocBuilder.shouldParseDocumentation(true)) { final
 if (isAuthor()) {
 { if(jsdocBuilder.shouldParseDocumentation()) {
if  (...)
if (jsdocBuilder.shouldParseDocumentation(parser)) { final
if (jsdocBuilder.shouldParseDocumentation() && authorInfo) {
 if (recursive) {
if (jsdocBuilder.shouldParseDocumentation(token)) return token; final
if  token {
 if (!(jsdocBuilder.shouldParseDocumentation()) {
 if (!!shouldParseDocumentation()) {
if (jsdocBuilder.recordauthor()) {
 default : if(jsdocBuilder.shouldParseDocumentation()) {
 if (!authorFound) {
 if (!!jsdocBuilder.shouldParseDocumentation()) {
 case TEXT:
 (function()) {
if (jsdocBuilder.authors)
 if (...)
if (jsdocBuilder.author())
if (jsdocBuilder.shouldParseDocumentation(token)) { Author.
if (jsdocBuilder.shouldParseDocumentation() { String author();
 if any:
if  available {
if (jsdocBuilder.record)
if  (!)
if (jsdocBuilder.shouldParseDocumentation(author)) { Author.
 token = ' '();
 if (recordAuth()) {
if (jsdocBuilder.shouldParseDocumentation() && singleLine) {
 if({
 token = author; else
 if builder.shouldParseDocumentation()) {
if (jsdocBuilder.shouldParseDocumentation)) {
if (jsdocBuilder.recordAuth()) {
 if exists()) {
 (parser.shouldParseDocumentation()) {
 if (!)
if (block)
 function author()) {
if (jsdocBuilder.shouldParseDocumentation() || recordAuthor) {
 if ()
if (jsdocBuilder.shouldParseDocumentation() || authorInfo) {
if (jsdocBuilder.shouldParseDocumentation) { final
if (jsdocBuilder.shouldParseDocumentation()) { String
 if (!{
if (jsdocBuilder.shouldParseDocumentation())  { Author.
if (jsdocBuilder.shouldParseDocumentation() && authorFound) {
 token;
if (jsdocBuilder.shouldParseDocumentation() && authorEnabled) {
 if ){
if (jsdocBuilder.shouldParseDocumentation) {
if (jsdocBuilder.shouldParseDocumentation() &&! standalone) {
if (jsdocBuilder.shouldParseDocumentation()); {
 token:
 { try{
if (jsdocBuilder.shouldParseDocumentation() ||! skip) {
if (jsdocBuilder.shouldParseDocumentation() ||! standalone) {
if (jsdocBuilder.shouldParseDocumentation")) {
if (jsdocBuilder.shouldParseDocumentation() || authorOnly) {
if (jsdocBuilder.shouldParseDocumentation())  { Author:
if (jsdocBuilder.shouldParseDocumentation())  return token();
 if (_shouldParseDocumentation()) {
 if if(jsdocBuilder.shouldParseDocumentation()) {
 token =
if (jsdocBuilder.shouldParseDocumentation() { {
 if!(jsdocBuilder.shouldParseDocumentation()) {
 if {
if (jsdocBuilder.) {
if (jsdocBuilder.shouldParseDocumentation") {
 while (jsdocBuilder.shouldParseDocumentation()) {
if (jsdocBuilder++) {
 while (shouldParseDocumentation()) {
 else
 {
if (jsdocBuilder.shouldParseDocumentation())  {" final
