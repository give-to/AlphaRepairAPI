 return eatUntilEOLIfNotAnnotation;
 return token;
 return eatUntilEOLIfNotAnnotation();;
 return authorInfo.token;
 return eatUntilEOL+token;
 return jsdocBuilder.token;
 return eatUntilEOLIfNotAnnotation.token;
 return eatUntilEOLIfAnnotation;
 return eatUntilEOL;
 return eatUntilEOLIfNotToken;
 } else { token = eatUntilEOLIfNotAnnotation(); } return eatUntilEOLIfNotAnnotation();
 return token.token;
 return eatUntilEOLIfAuthorInfo.token;
 return eatUntilEOLIfNotAnnotation().token;
 } else { token = eatUntilEOLIfNotAnnotation(); }
 return eatUntilEOLIfNotAnnotation(token;
 } else { token = eatUntilEOLIfNotAnnotation(); } if ( token!= null ) {
 } else { token = eatUntilEOLIfNotAnnotation(); } return eatUntilEOLIfNotAnnotation;
 } else { token = eatUntilEOLIfNotAnnotation(); } }
 } else { token = eatUntilEOLIfNotAnnotation(); } if ( token!= null )
 } else { parser. addParserWarning("msg.jsdoc.incompat.token", stream.getLineno(), token); }
 return eatUntilEOLIfToken;
 } else { token = eatUntilEOLIfNotAnnotation(); } token = eatUntilEOLIfNotAnnotation();
 } else { token = eatUntilEOLIfNotAnnotation(); } return eatUntilEOLIfAnnotation();
 } else { parser. addParserWarning("msg.jsdoc.incompat.author", stream.getLineno(), token); }
 } else { token = eatUntilEOLIfNotAnnotation(); } return eatUntilEOLIfToken;
 } else { token = eatUntilEOLIfNotAnnotation(); } return eatUntilEOLIfNotAnnotation(); }
 } else { token = eatUntilEOLIfNotAnnotation(); } return eatUntilEOLIfNotToken;
 } else { token = eatUntilEOLIfNotAnnotation(); } token = eatUntilEOLIfNotAnnotation(); }
 } else { token = eatUntilEOLIfNotAnnotation(); } return eatUntilEOLIfNotToken();
 return eatUntilEOLIfNotAnnotation();
 } else { token = eatUntilEOLIfNotAnnotation ;
 return eatUntilEOLIfNotAnnotation+token;
 } else { parser. addParserWarning("msg.jsdoc.incompat.token", stream.getCharno()); }
 } else { token = eatUntilEOLIfNotAnnotation(); } return eatUntilEOL;
 } else { token = eatUntilEOLIfNotAnnotation(); } return eatUntilEOLIfToken();
 else { token = eatUntilEOLIfNotAnnotation(); } return eatUntilEOLIfToken;
 } else { token = eatUntilEOLIfNotAnnotation(); } if ( token!= eatUntilEOL ) { }
 } else { token = eatUntilEOLIfNotAnnotation();
 return eatUntilEOLIfNottoken;
 } else { token = eatUntilEOLIfNotAnnotation(); } if ( token!= null ) { parser. close ( ) ;
 return eatUntilEOLIfNotAnnotation();
 } else { parser. addParserWarning("msg.jsdoc.incompat.extra", stream.getLineeno()); }
 } else { token = eatUntilEOLIfNotAnnotation(); } return eatUntilEOLIfAnnotation;
 } else { token = eatUntilEOLIfNotAnnotation(); } if (token!= eatUntilEOL) {
 return eatUntilEOLIfNotAnnotation;;
 } else { token = eatUntilEOLIfNotAnnotation(); } if ( token!= null ) { token = token ; }
 } else { token = eatUntilEOLIfNotAnnotation(); } } else { token = eatUntilEOLIfToken ; }
 return eatUntilEOLIf!token;
 } else { token = eatUntilEOLIfNotAnnotation ; }
 } else { parser. addParserWarning ( "msg.jsdoc.incompat.token", stream.getLineeno()); } }
 } else { parser. addParserWarning("msg.jsdoc.incompat.token", stream.getLineno(), null); }
 } else { token = eatUntilEOL ; }
 if ( token!= null ) { parser. addParserWarning ( token ) ; }
 if ( token!= null ) {
 } else { token = eatUntilEOLIfNotAnnotation(); } token = eatUntilEOLIfNotAnnotation ;
 else { token = eatUntilEOLIfNotAnnotation(); } return eatUntilEOLIfToken();
 return eatUntilEOLIfTokenInfo.token;
 token = eatUntilEOLIfNotAnnotation(); if ( token!= null ) {
 } else { token = eatUntilEOLIfNotAnnotation(); } return eatUntilEOLIfNotAnnotation(); } }
 } else { token = eatUntilEOLIfNotAnnotation(); } return eatUntilEOLIfNotAnnotation()
 } else { token = eatUntilEOLIfNotAnnotation(); } } }
 } else { token = eatUntilEOLIfNotAnnotation(); } return eatUntilEOL();
 token = eatUntilEOLIfNotAnnotation(); if ( token!= null )
 } else { token = eatUntilEOLIfNotAnnotation(); } if ( token ) {
 return eatUntilEOLIfToken==token;
 } return eatUntilEOLIfNotAnnotation;
 return eatUntilEOLIfNotAnnotation;
 } else { token = eatUntilEOLIfNotAnnotation(); } if ( token!= null ) { }
 } else { token = eatUntilEOLIfNotAnnotation(); } return eatUntilEOLIfNotAnnotation(); } else {
 } else { token = eatUntilEOLIfNotAnnotation(); } return eatUntilEOLIfNotAnnotation(); } else:
 if ( token!= null ) { parser. addToken ( token ) ; }
 } else { token = eatUntilEOLIfNotAnnotation(); } if ( returnToken )
 } else { token = eatUntilEOLIfNotAnnotation(); } return eatUntilEOLIfNotAnnotation(); } else
 if ( token!= null ) { token = eatUntilEOL ; } }
 return eatUntilEOLIfNotNewtoken;
 token = eatUntilEOLIfNotAnnotation(); return eatUntilEOLIfToken;
 } else { token = eatUntilEOLIfToken ; }
 if ( token!= null ) { token = token. trim ( ) ;
 } else { token = eatUntilEOLIfNotAnnotation(); } return eatUntilEOL; }
 } else { token = eatUntilEOLIfNotAnnotation(); } token += " " ;
 return eatUntilEOLIfToken=token;
 if ( token!= null ) { break ; }
 return eatUntilEOLIfNotEndtoken;
 } else { token = eatUntilEOLIfNotAnnotation(); } if token!= null {
 } else { token = eatUntilEOLIfNotAnnotation(); break ; }
 return eatUntilEOLIfNotSubtoken;
 if ( token!= null )
 return eatUntilEOL if token;
 if ( token!= null ) { parser = token ; }
 token = eatUntilEOLIfNotAnnotation(); return eatUntilEOLIfToken();
 else { token = eatUntilEOLIfNotAnnotation(); } return eatUntilEOL; }
 return eatUntilEOLIfNotNotAnnotation;
 } else { token = eatUntilEOLIfAnnotation ;
 } else { token = eatUntilEOLIfNotAnnotation(); } } } }
 return eatUntilEOLIfEndtoken;
 return eatUntilEOLIf.token;
 } else { token = eatUntilEOLIfNotToken ;
 token = token. substring ( 0, - 1 ) ;
 if ( token!= null ) { parser. addParserWarning ( token ) ; } }
 if ( token!= null ) token = token ;
 return eatUntilEOLIfToken;
 } else { token = eatUntilEOLIfNotAnnotation }
 } else { token = eatUntilEOLIfNotAnnotation(); } if token!= null )
return token. toLowerCase ( ) + token ;
 if ( token!= null ) return token ;
 return eatUntilEOLIfNotToken;
 token = eatUntilEOLIfNotAnnotation(); return eatUntilEOL(); }
 parser. addToken ( token ) ;
 } else { token = eatUntilEOLIfNotAnnotation ; } }
 } else { token = eatUntilEOLIfNotAnnotation(); } break ; }
 return eatUntilEOLIfNotFound;
 return eatUntilEOLIfNotToken();
 return eatUntilEOLIfNotComment;
 if ( token!= null ) { token = token ; break ; }
 } else { token = eatUntilEOLIfAnnotation();
 } return eatUntilEOLIfAnnotation;
 } else { token = eatUntilEOL ; } }
 return eatUntilEOLIfNotAnnotation(); }
return token. toString ( ) ;
return  eatUntilEOLIfToken ; }
return  eatUntilEOL ( token ) ;
 } else { token = eatUntilEOLIfNotAnnotation(); } return token ; }
 token = eatUntilEOLIfNotAnnotation(); return eatUntilEOLIfToken++;
 return eatUntilEOLIfTokenWasNottoken;
 if ( token instanceof String ) {
 return eatUntilEOLIfTokenFound;
 if ( token!= null ) { return token ; }
 return eatUntilToken + token;
 return eatUntilEOL if!token;
 return eatUntilEOL.token;
 return eatUntilEOLIfTokenWas.token;
return  eatUntilEOL ( ) ;
return  eatUntilEOLIfNotToken ; }
 } else { token = eatUntilEOLIfNotAnnotation ; } } }
 return eatUntilEOLIfNotAnnotation(); else:
 return eatUntilEOLIfToken();
 return eatUntilEOLIfAuthorInfo().token;
 if ( token!= null ) { token = token. trim ( ) }
 return eatUntilEOL_token;
 token = eatUntilEOLIfNotAnnotation(); return token ; } }
 return eatUntilEOLIf token;
 return eatUntilEOLIfNotAuthorInfo.token;
 return eatUntilEOL ; }
 token = authorInfo ; }
 return eatUntilEOLIfNotAnnotation(); } }
 return readUntilEOLIfNotAnnotation;
 token = authorInfo ;
 token = authorInfo.token;
 return eatUntilEOLIfNotAnnotation(); else {
 token = jsdocBuilder.token;
 } return eatUntilEOLIfNotToken;
return  eatUntilEOLIfNotAnnotation ; }
 return jsondocBuilder.token;
 return parseUntilEOLIfNotAnnotation;
return token + eatUntilEOLIfNotToken ; }
 return eatUntilEOF;
 return token ; } else {
 token = tokenInfo.token;
 token = "" ;
 return eatUntilEOLLine;
 return token + '\n;
return token + eatUntilEOLIfAnnotation ; }
 return eatUntilEOL; }
return token + eatUntilEOL ; }
 return eatUntilEOLIfNotAnnotation; }
return token. toLowerCase ( ) ; }
return  eatUntilEOLToken ; }
return  eatUntilEOLIfNotAnnotation(); }
 return token ; } else:
 return token ; default :
 return eatUntilEOL; break;
return token + eatUntilEOL ( ) ; }
 return token ; }
 return eatUntilEOL;;
return  eatUntilEOL if token ; }
return token + eatUntilEOLIfToken ; }
return token. toString ( ) ; }
 if ( token ) {
return token. toLowerCase ( ) + token ; }
 return eatUntilEOL(); }
return token + eatUntilCharno ; }
 return ( token ) ;
 token = null ;
 return tokenInfo.token;
 token = '' ;
return token. toLowerCase ( ) ; } }
 token = author ; }
 return info.token;
return  eatUntilEOL ( token ) }
return token + eatUntilEOLIfAnnotation(); }
 return eatUntilEOL();;
return token + eatUntilEOL ; } }
return  eatUntilEOLIfNotToken(); }
return token. trim ( ) ; }
 return token ; } }
 token = "";
return  eatUntilEOOLIfToken ; }
 return token + "";
 if ( token )
 return token ; }
return token + eatUntilComment ( ) ; }
 return token + line;
return token || eatUntilEOL ; }
return token + '\n' ;
 return token + '';
 }
return token. toString ( ) }
 return token ; } ; }
 return eatUntilToken.token;
return token + eatUntilEOLIfNotToken(); }
 return token ; default : #
 return eatUntilEndLine;
 return token; break;
 return ' ';
return token + eatUntilEOLToken ; }
 } return token;
 token = '';
 token = null;
return token. trim ( ) ; } }
 return token + indent;
 return token ; } } }
 return eatUntilToken ; }
 token = token.token;
 return eatUntilEOF ; }
return token + ' ' ; }
return token ; } break ; }
 return ' ' ; }
return token ; } } ; }
 return eatUntilEOOL;
 } else {
 return token || "" ; }
 return this.token;
 return token+token;
return  eatUntilEOLIfNotAnnotation()); }
 return eatUntilEOL(); }
return token + '\n' }
 break ; }
return  parseUntilEOLIfNotAnnotation(); }
return token + " " ; }
 return token + _token;
 return ( token ) }
 token = "" ; }
 return token_token;
return token ; } else { #
 } } }
 } }
 return token + endtoken;
 return _token;
 return!token;
return token + line ; }
return  " " ; }
 return eatUntilEOF(); }
 } finally {
 token=token;
 break ; }
 #end if
 } break ; }
 break ; } }
 return ; }
 } } } }
 token ; }
 else {
 break ;
 } }
 } #
 } else
return  null ;
 break break;
return  null ; }
return token } ; }
return  "" ;
 else
return token + #
return token(); }
 #
