token = eatUntilEOLIfNotAnnotation();
 parser. addParserWarning("msg.jsdoc.authormissing", stream.getLineno(), stream.getCharno());
token  = authorInfo ;
 token = authorInfo.token;
 parser.addParserWarning("msg.jsdoc.authormissing", stream.getLineno()); }
 parser. addParserWarning("msg.jsdoc.authormissing", stream.getLineno(), stream.getToken()); }
 parser. addParserWarning("msg.jsdoc.authorormissing", stream.getLineno(), stream.getCharno());
 parser. addParserWarning("msg.jsdoc.authormissing");
 parser. addParserWarning("msg.jsdoc.authormissing", stream.getLineno(), stream.getChar()); }
 parser. addParserWarning("msg.jsdoc.authormissing, stream.getLineno(), stream.getCharno());
 parser.addParserWarning("msg.jsdoc.authormissing", stream.getLineno());
 parser. addParserWarning("msg.jsdoc.authormissing", stream.getLineno(), token); }
 parser.addParserWarning("msg.jsdoc.authormissing", stream.getLineno(), null);
 parser.addParserWarning("msg.jsdoc.author");
 parser. addParserWarning("msg.jsdoc.authormissing", stream.getLineno(), null); }
 parser. addParserWarning("msg.jsdoc.authormissing"); }
 parser. addParserWarning("msg.jsdoc.authormissing", stream.getLineno(), stream.token); }
token = eatUntilEOLIfNotAnnotation() ; }
 parser.addParserWarning("msg.jsdoc.authormissing", stream.getLineno(), token);
 parser.addParserWarning("msg.jsdoc.authormissing", stream.getLineno()); } }
 parser. addParserWarning("msg.jsdoc.authorormissing", stream.getLineno(), stream.getToken()); }
 parser. addParserWarning("msg.jsdoc.authormissing", authorInfo); }
 parser.addParserWarning("msg.jsdoc.authorormissing", stream.getLineno()); }
 parser. addParserWarning("msg.jsdoc.authormissing, stream.getLineno(), stream.getChar()); }
 parser.addParserWarning("msg.jsdoc.authormissing, stream.getLineno()); }
 parser. addParserWarning(msg.jsdoc.authormissing", stream.getLineno()); }
 parser.addParserWarning("msg.jsdoc.authormissing", stream.getLineno(), author); }
 parser. addParserWarning("msg.jsdoc.authormissing", stream.getLineno(), stream.name); }
 parser.addParserWarning("msg.jsdoc.unknown");
 token = eatUntilEOLAnnotation();
 parser. addParserWarning("msg.jsdoc.authormissing", stream.getLineno(), stream.strip()); }
 parser. addParserWarning("msg.jsdoc.authormissing", stream.getLineno(), stream.name()); }
 parser. addParserWarning("msg.jsdoc.authorormissing");
 parser. addParserWarning("msg.jsdoc.authormissing", stream.getLineno(), stream.token);
 parser.addParserWarning("msg.jsdoc.authormissing, stream.getLineno());
 parser. addParserWarning("msg.jsdoc.authormissing", stream.getLineno(), token); } }
 parser. addParserWarning("msg.jsdoc.authormissing", author); }
 parser. addParserWarning(msg.jsdoc.authormissing); }
 parser. addParserWarning("msg.jsdoc.authormissing", stream.getLineno(), stream.token());
 token = authorInfo.token ; }
 parser.addParserWarning("msg.jsdoc.authormissing", stream.getLineeno());
 parser. addParserWarning("msg.jsdoc.authorormissing", authorInfo); }
 parser. addParserWarning("msg.jsdoc.authormissing", token); }
 parser. addParserWarning("msg.jsdoc.authormissing", stream, author); }
 parser. addParserWarning("msg.jsdoc.authorormissing"); }
 parser. addParserWarning("msg.jsdoc.authormissing", stream.getLineno(), stream.getCharno()); }
 parser. addParserWarning(msg.jsdoc.authormissing);
 parser. addParserWarning("msg.jsdoc.authormissing", stream.line()); }
 parser.addParserWarning("msg.jsdoc.author"); }
 parser. addParserWarning("msg.jsdoc.authormissing", stream.line); }
token = eatUntilEOLIfNotAnnotation() ; token = authorInfo ;
 parser. addParserWarning("msg.jsdoc.authorormissing", author); }
 token = token + stream.getCharno);
 parser.addParserWarning("msg.jsdoc.authormissing", "");
 parser.addParserWarning("token")= eatUntilEOLIfNotAnnotation();
 token = "";
 parser. addParserWarning("msg.jsdoc.authormissing, author); }
 parser. addParserWarning("msg.jsdoc.authormissing, authorInfo); }
 parser.addParserWarning("msg.jsdoc.authormissing", stream.getLine());
 token = tokenInfo.token();
 token = authorInfo.token ; parser. addToken ( token ) ;
 token = token + authorInfo.token;
 parser.addParserWarning(author); }
 token = token + stream.getCharno();
 parser. addParserWarning("msg.jsdoc.incompat.author"); }
 token = token + eatUntilEOL ; }
token = eatUntilEOLIfNotAnnotation() ; token = "" ;
token = eatUntilEOLIfNotAnnotation() ; eatUntilEOLIfNotAnnotation();
token = eatUntilEOLIfNotAnnotation(stream.getCharno()); }
 token = token + eatUntilEOL ;
token = eatUntilEOLIfNotAnnotation ( stream. getLine ( ) ) ;
 parser.addParserWarning("msg.jsdoc.author); }
token = eatUntilEOLIfNotAnnotation(token);
 token = token + eatUntilEOL);
 parser.addParserWarning(token); }
 token = authorInfo.token ; token = authorInfo ;
 parser.addParserWarning("msg.jsdoc.token");
token = eatUntilEOLIfNotAnnotation() ; token = authorInfo.token;
 parser.addParserWarning("unknown") token= eatUntilEOLIfNotAnnotation();
 parser.addParserWarning("msg.jsdoc.author.missing");
 token = authorInfo.string;
 parser.addParserWarning("msg.jsdoc.unknown"); }
 parser. addParserWarning("msg.jsdoc.author", token);
 token = authorInfo.token ; parser. addAuthor ( token ) ;
 token = "" ;eatUntilEOLIfNotAnnotation();
 token = authorInfo.token ; } }
token = eatUntilEOLIfNotAnnotation ( stream. getLineNumber ( ) ) ;
token = eatUntilEOLIfNotAnnotation(authorInfo.token);
 token = authorInfo.token ; token = null ;
 token = token. substring ( 0, - 1 ) ;
 token = authorInfo.token ; token = "" ;
 parser.addParserWarning("msg.jsdoc.unknown author"); }
 token = authorInfo.token ; token = authorInfo.string ;
 token = authorInfo.token ; parser = null ;
token = eatUntilEOLIfNotAnnotation(); token = eatUntilEOL ; }
 parser.addParserWarning("unknown author"); token= eatUntilEOLIfNotAnnotation();
token = eatUntilEOLIfNotAnnotation() ; parser. addParserWarning ( token ) ;
 token = authorInfo.token
 token = authorInfo.token ; parser. addToken ( token )
 token = authorInfo.token ; parser. addAuthor ( token )
 parser.addParserWarning("unknown");
 token = token + token + token + token + token ;
 token = authorInfo.token ; parser. close ( ) ;
 token = authorInfo.token ; token= eatUntilEOLIfNotAnnotation();
 token = token + stream.getLine ();
 token = token + token + token + token + token ; }
 token = token + token + authorInfo.token;
token = eatUntilEOLIfNotAnnotation(); token = eatUntilEOLIfToken ;
token  = null ;
 token = token ; token = authorInfo.token;
 token = token. substring ( 0, 1 ) ;
 token = token + stream.getLineNumber();
token  = null
 parser.addParserWarning("msg.unknown author"); }
token = eatUntilEOLIfNotAnnotation(stream.getLineno(), authorInfo);
 token = authorInfo.token ; parser. skip ( ) ;
token = eatUntilEOLIfNotAnnotation(stream.getLineno(), stream.end());
 token = token + token + token + token ; }
token = eatUntilEOLIfNotAnnotation(); token = null ;
 token = tokenInfo.token ;
 token = token + authorInfo.string;
 token = authorInfo.token ; return token;
 parser. addParserWarning("msg.jsdoc.authormissing", "unknown") ;
 parser.addParserWarning("Unknown");
 parser.addParserWarning(); }
 token = token + eatUntilEOL ( ) ;
 token = authorInfo.token ; } } }
token = eatUntilEOLIfNotAnnotation() ; token = token + eatUntilEOL();
token = eatUntilEOLIfNotAnnotation() ; token = eatUntilEOL ( ) ;
 token = authorInfo.token ; token = authorInfo.string ; }
 parser. addParserWarning("no author"); returneatUntilEOLIfNotAnnotation();
 parser.addParserWarning("unknown"); token= eatUntilEOLIfNotAnnotation();
 parser.addParserWarning("Unknown") token= eatUntilEOLIfNotAnnotation();
 token = authorInfo.token ; break ; }
token = eatUntilEOLIfNotAnnotation() ; parser. addToken ( token ) ;
token = eatUntilEOLIfNotAnnotation ( stream. getCurrent ( ) ) ;
token = eatUntilEOLIfNotAnnotation() ; token = token + eatUntilEOL ;
token = eatUntilEOLIfNotAnnotation(); } token = eatUntilEOL ; }
token = eatUntilEOLIfNotAnnotation() ; token = tokenInfo.token;
token = eatUntilEOLIfNotAnnotation ( stream. next ( ) ) ;
 token = token + stream.getChars();
 token = token. toLowerCase();
 parser. addParserWarning("unknown author"); returneatUntilEOLIfNotAnnotation();
 token = info.token;
token = eatUntilEOLIfNotAnnotation(stream.getLineno(), stream.line());
 token = authorInfo.token.toString();
token  = ""
 token = authorInfo.token ; token = authorInfo.string
token = eatUntilEOLIfNotAnnotation(stream.getLineno(), stream.length());
 parser.addParserWarning("msg.unknown author"));
 token = authorInfo.token ; token = author ; }
token = eatUntilEOLIfNotAnnotation(); parser. close ( ) ;
 token = authorInfo.token ; parser = null ; }
token = eatUntilEOLIfNotAnnotation(stream.getCharno()); } }
 token = null ;eatUntilEOLIfNotAnnotation();
 token = authorInfo.token ; return null;
 parser.addParserWarning("missing author");
 parser.addParserWarning("Unknown token");
 parser.addParserWarning("token"); token= eatUntilEOLIfNotAnnotation();
 token = authorInfo.token();
 token = authorInfo ; token= eatUntilEOLIfNotAnnotation();
 parser.addParserWarning("unknown token"); token= eatUntilEOLIfNotAnnotation();
 parser. addParserWarning("unknown token"); returneatUntilEOLIfNotAnnotation();
 token = tokenInfo.toString();
 token = stream.getLine ();
token = eatUntilEOLIfNotAnnotation() { token = authorInfo.token;
 parser.addToken(token); }
token = eatUntilEOLIfNotAnnotation(stream.getCharno(), null);
 token = token + token + authorInfo.string;
 parser.addParserWarning("no author"); }
 parser.addParserWarning(token); returneatUntilEOLIfNotAnnotation();
 jsdocBuilder.addAuthor(token);
token = eatUntilEOLIfNotAnnotation() ; } }
 token = authorInfo ;
token = eatUntilEOLIfNotAnnotation(); token = eatUntilEOL ;
 parser. addAuthor ( ) ;
 parser.addParserWarning("unknown author"); }
 parser.addParserWarning("author")= eatUntilEOLIfNotAnnotation();
 parser.addParserWarning(token);
 jsdocBuilder.recordAuthor(author, token);
 parser.addParserWarning("Unknown author"); }
 token = tokenInfo.token ; }
 token = "" ; token= eatUntilEOLIfNotAnnotation();
 token = null ; token= eatUntilEOLIfNotAnnotation();
 parser.addParserWarning("unknown token");
 token = token + token + token + token ;
token = eatUntilEOLIfNotAnnotation(stream.getLineno(), stream.token);
 token = authorInfo.token ; } break ;
 parser.addParserWarning("unknown author type"); }
token = eatUntilEOLIfNotAnnotation(); return eatUntilEOLIfToken ;
 parser.addParserWarning("missing author"); }
 parser.addAuthor(token);
 return eatUntilEOL();
 parser.addParserWarning("msg.unknown author") ;
 parser.addParserWarning("Unknown token"); }
token = eatUntilEOLIfNotAnnotation(); return eatUntilEOL ; }
 token = token ; return eatUntilEOL();
 parser. addAuthor ( author ) ;
 token = authorInfo.token.eatUntilEOLIfNotAnnotation();
 parser.addParserWarning("Unknown author"); token= eatUntilEOLIfNotAnnotation();
 token = token + stream.getChunk();
 token = token + tokenInfo.token;
token = eatUntilEOLIfNotAnnotation() ; eatUntilEOLIfNotToken();
token = eatUntilEOLIfNotAnnotation(); return eatUntilEOL ;
 parser. skip ( ) ;
token = eatUntilEOLIfNotAnnotation(); return eatUntilEOLIfNotToken();
token = eatUntilEOLIfNotAnnotation(stream.getLineno(), stream.token());
token = eatUntilEOLIfNotAnnotation() ; token = authorInfo.token
 parser. addParserWarning("msg.jsdoc.author"); }
 token = token = authorInfo.token;
 token = authorInfo.token.toString(();
 parser.addParserWarning(); token= eatUntilEOLIfNotAnnotation();
 token = null);
 token = authorInfo ; }
 token = tokenInfo.getToken();
 token = stream.getToken ();
 parser. addParserWarning ( token )eatUntilEOLIfNotAnnotation();
 token = token + stream.getCharBuffer();
token = eatUntilEOLIfNotAnnotation() ; parser = null ;
 token = authorInfo.(token);
 token = token + stream.getContents();
 token = authorInfo.token + token ;
 token = token + stream.getText();
 parser.addParserWarning("no author information"); }
 token = authorInfo.token;eatUntilEOLIfNotAnnotation();
token = eatUntilEOLIfNotAnnotation(stream.getLineeno()); }
 token = token + eatUntil(token);
 token = authorInfo.token ; return "";
 token = authorInfo.token + " ";
 jsdocBuilder.recordAuthor(token, author);
 parser.addParserWarning("Author" "+eatUntilEOLIfNotAnnotation();
 token = "(unknown);
 token = authorInfo.token);
 token = 'unknown' ;
 parser.addParserWarning("author"); returneatUntilEOLIfNotAnnotation();
 parser.addParserWarning("unknown token")eatUntilEOLIfNotAnnotation();
 token = token + stream.getChar();
token = eatUntilEOLIfNotAnnotation() ; token = token + ' ' ; }
 token = token + stream.read();
 parser.addToken(token);
 parser.addParserWarning() returneatUntilEOLIfNotAnnotation();
token = eatUntilEOLIfNotAnnotation() ; token = ' ' ;
 parser.addParserWarning("missing author information"); }
 parser.addParserWarning("Unknown author type"); }
 token = token + stream.getToken ();
token = eatUntilEOLIfNotAnnotation() { token = authorInfo ;
 token = token();
 token = token.strip();
token = eatUntilEOLIfNotAnnotation(stream.getLine (line));
 token = token + authorInfo.extra;
 parser. addParserWarning("msg.unknown")();
token = eatUntilEOLIfNotAnnotation(stream.getLineeno(), null);
token = eatUntilEOLIfNotAnnotation(); } } }
token = eatUntilEOLIfNotAnnotation() ; token = token + ": " ;
 token = 'Unknown' ;
 parser.addParserWarning("unknown").eatUntilEOLIfNotAnnotation();
token = eatUntilEOLIfNotAnnotation() ; token = "unknown token";
 parser.addParserWarning("missing author info"); }
 token = authorInfo.string();
 token = authorInfo ; }
 token = "");
 token = stream.getLineNumber();
 parser.addParserWarning();
token = eatUntilEOLIfNotAnnotation(stream.getLineno(), null);
 token = "unknown";
token = eatUntilEOLIfNotAnnotation(stream.getLineno(), token); }
token = eatUntilEOLIfNotAnnotation() ; token = null ; }
 token = "$(token);
 parser.addParserWarning(); returneatUntilEOLIfNotAnnotation();
token = eatUntilEOLIfNotAnnotation(stream.getLineeno(), token);
 token = stream.token();
token = eatUntilEOLIfNotAnnotation() ; break ; }
 token = getToken();
 parser.addParserWarning("unknown")eatUntilEOLIfNotAnnotation();
 token = "Unknown";
 parser. addParserWarning("msg.noAuthor();
token = eatUntilEOLIfNotAnnotation(token); token = "" ;
token = eatUntilEOLIfNotAnnotation(authorInfo.token); }
 token = token + "\n");
 token = (string);
 parser. addParserWarning("msg.jsdoc.author", token");
 parser. addToken ( token )eatUntilEOLIfNotAnnotation();
token = eatUntilEOLIfNotAnnotation() ; token = eatUntilEOL(); }
 authorInfo = null ;
 token = authorInfo.text;
 parser. getToken ( ) |= eatUntilEOLIfNotAnnotation();
token = eatUntilEOLIfNotAnnotation() ; token = "Unknown token";
token = eatUntilEOLIfNotAnnotation(stream.getLineno(), author); }
 token = token + "(" + author);
 token = ' '();
 return null;
 return eatUntilEOLLine();
 token = '' ;eatUntilEOLIfNotAnnotation();
 parser. getToken ( token )= eatUntilEOLIfNotAnnotation();
 jsdocBuilder.eatUntilEOLIfNotAnnotation();
 token = authorInfo.token token= eatUntilEOLIfNotAnnotation();
 token = "author(");
 token = eatUntil(token);
 token = token + "(" + token);
 token = tokenInfo.tokenString;
 parser. addParserWarning("msg.unknown token();
token  = '' ;
 token = stream.getText ();
token = eatUntilEOLIfNotAnnotation(stream.getLineno()); }
 token = authorInfo.tokenString;
 token = authorInfo ; result= eatUntilEOLIfNotAnnotation();
 token = authorInfo.token += eatUntilEOLIfNotAnnotation();
token = eatUntilEOLIfNotAnnotation(token); token = null ;
 token = token + "\n();
 token = authorInfo.extract;
 token = token.text();
token = eatUntilEOLIfNotAnnotation ( authorInfo ) ;
token = eatUntilEOLIfNotAnnotation(token, authorInfo);
token = eatUntilEOLIfNotAnnotation(readerInfo.token);
 token = authorInfo.extracted;
 token = '' ; token= eatUntilEOLIfNotAnnotation();
token = eatUntilEOLIfNotAnnotation() ; token = authorInfo ; }
 token = tokenInfo(stream);
 token = authorInfo.string; }
 token = authorInfo.extraction;
 token = stream.line();
 token = authorInfo.content;
token = eatUntilEOLIfNotAnnotation(stream.getLineNumber()); }
token = eatUntilEOLIfNotAnnotation ( authorInfo. token )
 token = generateToken();
 token = authorInfo(true);
 token = authorInfo ; #= eatUntilEOLIfNotAnnotation();
 token = "unknown" ;eatUntilEOLIfNotAnnotation();
 token = authorInfo ; comment= eatUntilEOLIfNotAnnotation();
 if ( ignore ) {
token = eatUntilEOLIfNotAnnotation(); token += " " ;
 token = "" ;
 token = "(null);
token = eatUntilEOLIfNotAnnotation() { token = "" ;
 return "";
 token = author ; token= eatUntilEOLIfNotAnnotation();
 authorInfo.token ; }
 token = author ; }
 token = "(token);
 token = ");
 parser = null ;
token = eatUntilEOLIfNotAnnotation(); return eatUntilEOL();
token = eatUntilEOLIfNotAnnotation(); return token ;
 token = ""();
token = eatUntilEOLIfNotAnnotation(); token = token + token ;
 token = "token();
 token = indent();
token = eatUntilEOLIfNotAnnotation(token); }
 token = (null);
 token = null ; }
 token = extractToken();
 token = null ;
token = eatUntilEOLIfNotAnnotation(readerInfo.token); }
 token = null ; result= eatUntilEOLIfNotAnnotation();
token = eatUntilEOLIfNotAnnotation() token = "" ;
 return tokenSeatUntilEOLIfNotAnnotation();
token = eatUntilEOLIfNotAnnotation(authorInfo.string);
token = eatUntilEOLIfNotAnnotation() ; break ;
 authorInfo.token = ""
 token = "unknown token".eatUntilEOLIfNotAnnotation();
 token = "(unknown token);
 token = "(unknown ");
token = eatUntilEOLIfNotAnnotation() ; return null ;
 token = undefined;
token = eatUntilEOLIfNotAnnotation() + token ;
 token = "unknown token";eatUntilEOLIfNotAnnotation();
token = eatUntilEOLIfNotAnnotation(stream.getLine()); }
token = eatUntilEOLIfNotAnnotation() ; token = ""
 return tokenEeatUntilEOLIfNotAnnotation();
token = eatUntilEOLIfNotAnnotation(token); } }
 return tokenFeatUntilEOLIfNotAnnotation();
 token = null ; } returneatUntilEOLIfNotAnnotation();
 return token;
token = eatUntilEOLIfNotAnnotation(authorInfo); }
 token = '');
token = eatUntilEOLIfNotAnnotation(token); } } }
 token = "();
 token = '' ;
 if (!token)
 token = "unknown;
token = eatUntilEOLIfNotAnnotation(true);
token = eatUntilEOLIfNotAnnotation(parser);
token  = null ; }
token = eatUntilEOLIfNotAnnotation( "author" );
token = eatUntilEOLIfNotAnnotation ; }
 token = authorInfo ; #eatUntilEOLIfNotAnnotation();
 token = null();
 token = null |= eatUntilEOLIfNotAnnotation();
 token = ".";
token = eatUntilEOLIfNotAnnotation() break ; }
 token = null ; returneatUntilEOLIfNotAnnotation();
token = eatUntilEOLIfNotAnnotation ; } }
 token = empty();
 token = "" token= eatUntilEOLIfNotAnnotation();
 break ; }
token = eatUntilEOLIfNotAnnotation( "Author" );
token = eatUntilEOLIfNotAnnotation(author); }
 token = author;
 token = "" ; returneatUntilEOLIfNotAnnotation();
 token = author |= eatUntilEOLIfNotAnnotation();
 token = 'eatUntilEOLIfNotAnnotation();
 token += author *= eatUntilEOLIfNotAnnotation();
 return false;
 token + ":"= eatUntilEOLIfNotAnnotation();
 token |= eatUntilEOLIfNotAnnotation();
 token = '' ; returneatUntilEOLIfNotAnnotation();
 return '';
token  = ''
 return null ;
token = eatUntilEOLIfNotAnnotation(false);
token = eatUntilEOLIfNotAnnotation(null);
 parser.eatUntilEOLIfNotAnnotation();
 default :
token  = undefined
 return "" ;
token = eatUntilEOLIfNotAnnotation(true); }
 return token ;
token = eatUntilEOLIfNotAnnotation(parser); }
 break ;
 token ^= eatUntilEOLIfNotAnnotation();
 final String token= eatUntilEOLIfNotAnnotation();
 token + "= eatUntilEOLIfNotAnnotation();
 token *= eatUntilEOLIfNotAnnotation();
token  = ;
 return #eatUntilEOLIfNotAnnotation();
 returnFeatUntilEOLIfNotAnnotation();
 # skip();
 return "eatUntilEOLIfNotAnnotation();
 return indent();
token = eatUntilEOLIfNotAnnotation() break ;
 final token |= eatUntilEOLIfNotAnnotation();
 finalToken |= eatUntilEOLIfNotAnnotation();
 token += eatUntilEOLIfNotAnnotation();
 token. next= eatUntilEOLIfNotAnnotation();
 return null);
 #continue();
 return token();
 # ignore();
 # ();
 (break);
 # ignore);
 #default);
token = eatUntilEOLIfNotAnnotation() ; {
token = eatUntilEOLIfNotAnnotation() { }
 break }
 #
 String
token return eatUntilEOLIfNotAnnotation();
token -= eatUntilEOLIfNotAnnotation();
token + eatUntilEOLIfNotAnnotation();
