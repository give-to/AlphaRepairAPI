boolean allowDupe = false;
 allowDupe= false;
 boolean allowDupe;
 boolean allowDuplicate;
boolean  allowDupe = true;
boolean allowDupe = false ; if ( n!= null ) {
boolean allowDupe = false ; if (n) {
 } boolean allowDupe= false;
 boolean dup=false;
boolean allowDupe = false ; if (n!= null)
 boolean allowDupe = allowDupe==false;
boolean  allowDupe = parent. allowDupe ;
 boolean allowDupe =!false;
boolean  allowDupe
boolean  allowDupe =! origParent ;
 boolean allowDupe |= false;
 } else { Node n = scope. getNode ( name ) ; Node parent = scope. getParent ( ) ;
 else { var n = scope. getVar ( name ) ; var parent = scope. getParent ( ) ;
 } else { Node n = scope. getNode ( name ) ; Node parent = scope. getNode ( parent ) ;
 else { var n = scope. getVar ( name ) ; var parent = scope. getVar ( parent ) ;
 boolean allowDupe = allowDupe=false;
boolean allowDupe = false ; if (! allowDupe ) {
 } else { Node n = scope. getVar ( name ) ; Node parent = scope. getParent ( ) ;
 } else { boolean allowDupe=false;
 } else { Node n = scope. getNode ( name ) ; Node parent = scope. getParent ( name ) ;
boolean allowDupe  = parent. getSuppressions ( ) ;
 else { Node n = parent. getParentNode ( ) ; Node sourceName = n. getString ( ) ;
 boolean allowDupe ==false;
boolean allowDupe = false ; if (parent!= null) {
 } else { Node n = scope. getNode ( name ) ; Node parent = scope. getParentNode ( name ) ;
boolean  allowDupe = parent. allowDupes();
boolean  allowDu;
boolean  allowDupe = parent. allowDupes ;
 } else { Node n = scope. getNode ( name ) ; Node parent = scope. getParentNode ( ) ;
 else { var n = scope. getVar ( name ) ; var parent = scope. getParent ( parent ) ;
boolean  allowDupe =! origParent == parent ;
 boolean allowDupe = origVar==false;
boolean allowDupe = false ; if ( n instanceof Name ) {
 } else { Node origVar = scope. getVar ( name ) ; Node n = scope. getNode ( origVar ) ;
 } else { Node origVar = scope. getVar ( name ) ; Node n = parent. getParentNode ( ) ;
 } else { Node n = scope. getNode ( name ) ; Node parent = scope. getParentNode ( parent ) ;
boolean allowDupe = false ; if (! allowDupe ) return ;
 boolean allowDupe = origParent==false;
 else { var n = scope. getVar ( name ) ; var parent = scope. getParentNode ( parent ) ;
 } boolean allowDuplicate;
 else { Node n = parent. getParentNode ( ) ; Node origParent = n. getParentNode ( ). next ( ) ;
 else { Node n = parent. clone ( ) ; Node sourceName = n. name ;
boolean allowDupe  = parent. getSuppressions!= null;
 } else { Node n = scope. getNode ( name ) ; Node origVar = n ;
 else { var n = scope. getVar ( name, origParent ) ;
 else { Node n = parent. getNext ( ) ; Node sourceName = n. name ;
 boolean allowDupe =! ignore;
 else { Node n = parent. getNextNode ( ) ; Node sourceName = n. name ;
 boolean allowDupe = flag==false;
 else { Node n = parent. getNext ( ) ; Node sourceName = origName ;
 } else { boolean allowDupe |= false;
 else { compiler.report( JSError.make(name));
 boolean allowDupe = both==false;
 else { Node n = parent. getNext ( ) ; Node declaredType = null ;
boolean allowDupe = false ; if ( n instanceof Named ) {
 else { Node n = parent. getNextNode ( origParent ) ;
 } else { Node n = scope. getVar ( name, origParent ) ;
 else { Node n = parent. getNextNode ( ) ; Node declaredType = null ;
 } else { boolean allowDuplicate;
 } else { Node n = scope. getNode ( name ) ; Node parent = scope. parent ( ) ;
 else { Node n = parent. getNextNode ( ) ; Node sourceName = origName ;
 else { Node n = parent. getNext ( ) ; Node sourceName = name ;
 boolean allowDupe = flag=false;
 else { Node n = parent. getParentNode ( ) ; Node sourceName = origName ;
boolean allowDupe = false ; if ( n!= parent ) {
 } else { boolean allowDuplicate=false;
 else { Node n = parent. getNextNode ( ) ; Node sourceName = name ;
boolean allowDupe  = parent. isFunction ( ) ;
boolean  allowDupe =! allowDupe;
 } else { Node n = scope. getVar ( name ). next ( ) ;
boolean  allowDupe = ( boolean ) false ;
 boolean allowDupe = allowDuplicate;
 boolean allowDuplicate=false;
 } else { Node n = scope. getNode ( name ) ; Node origVar = origParent ;
 boolean allowDupe *= false;
boolean allowDupe  = parent. isDirective ( ) ;
 else { Node n = parent. getNext ( ) ; Node declaredType = n ;
 else { var n = scope. getVar ( name ). next ( ) ;
 if (n!= null && parent!= null) {
 else { Node n = parent. getNextNode ( ) ; Node declaredType = n ;
 else { boolean allowDupe=false;
boolean allowDupe = false ; if (!allowDupe)
boolean allowDupe = false ; if (n)
 else { throw new IllegalArgumentException ( ) ; }
 else { throw new IllegalArgumentException ( name ) ; }
 else { compiler.report( JSError.make(); }
 boolean allowDupe = allowDupe == true;
 boolean allowDupe = allowDuplicate=false;
 else { compiler.report( JSError.make()); }
 } } else { boolean allowDupe= false;
 } else { allowDupe= false;
boolean allowDupe =  parent. getSuppressions().contains();
 } else { boolean allowDupe = true;
 } boolean allowDupe = true;
 else { boolean allowDupe = origVar==false;
 else { Node n = parent. getParentNode ( ) ; Node origParent = n. getParentNode ( ) ; return ; } }
 else { return ; }
 else { Node n = parent. getNext ( ). next ( ) ;
 else { boolean allowDuplicate=false;
 allowDupe;
 else { var n = parent. getNode ( origParent ) ;
boolean allowDupe = false ; if (n!= null) { final
 else { throw new IllegalArgumentException(); } }
 else { var n = parent. getNext ( ) ;
 else { Node n = parent. getParentNode ( ) ; Node origParent = n. getParentNode ( ). parent ; } }
 if (!allowDupe) { allowDupe= false;
 else { var n = scope. getVar ( name ) ; var parent = scope. getVar ( parent ) ; } }
boolean allowDupe = false ; if ( isGlobal ) {
 else { throw new IllegalArgumentException(); } }
 boolean allowDupe = allowDupe;
 else { Node n = parent. getParentNode ( ) ; Node origParent = n. getParentNode ( ) ; } } } }
 boolean allowDupe = origVar=false;
 else { var n = scope. getVar ( name ) ; if ( n == null ) { return ; } } }
 else { throw new IllegalArgumentException(); }
boolean allowDupe = false ; if (debug) {
 } else { boolean allowDupe *= false;
 else { throw new IllegalArgumentException ( name ) }
boolean allowDupe =  parent. getSuppressions() == null;
 } else { Node origVar = scope. getVar ( name ) ; Node n = origVar. getNextNode ( ) ; } }
 boolean allowDupe!= false;
 } boolean allowDupe |= false;
 } allowDupe= false;
 } else { Node n = scope. getNode ( name ) ; Node parent = scope. getParentNode ( name ) ; final
 } else { Node origVar = parent. getParentNode ( ) ; Node n = parent. getNextNode ( ) ; } }
 boolean allowDupe =! suppress;
boolean allowDupe =  parent. getSuppressions()!= null;
 } else { Node origVar = parent. getParentNode ( ) ; Node n = parent. getNextNode ( ) ; } final
 } else { Node n = scope. getNode ( name ) ; Node parent = scope. getNode ( parent ) ; } }
 } else { Node origVar = parent. getParentNode ( ) ; Node n = origVar. getNextNode ( ) ; final
 else { throw new IllegalArgumentException ( name ) }
 } else { Node n = scope. getNode ( name ) ; Node parent = scope. getNode ( parent ) ; } } }
 boolean allowDupe = -1;
 boolean allowDupe = origVar!= null;
 } else { Node n = scope. getNode ( name ) ; Node parent = scope. getNode ( parent ) ; } final
 boolean allowDupe = allowDuplicate==false;
 } else { Node origVar = scope. getVar(name); Node n = origVar. getParentNode(); } } } }
 else { throw new IllegalArgumentException ( parent ) ; }
 boolean allowDupe = true=false;
 } else { Node origVar = scope. getVar ( name ) ; Node n = parent. getNextNode ( ) ; final
 boolean allowDupe ||= false;
 else { throw new IllegalArgumentException("Invalid scope"); }
boolean  allowDupe =! origVar ;
 boolean allowDupe = allowDupe == "false;
boolean allowDupe  = parent. getAllowDuplicates();
 else { boolean allowDupe = true;
 if (!allowDupe) allowDupe= false;
 } else { boolean allowDupe ||= false;
 } else { Node n = scope. getNode ( name ) ; Node parent = scope. getNode ( parent ) ; final
boolean allowDupe = false ; if (parent) {
 boolean allowDupe = allowDuplicates;
 } else { boolean allowDupe = true=false;
 else { compiler.report( JSError.make(name);
 } else { boolean allowDupe!= false;
boolean allowDupe = false ; if (ignoreDupe)
 else { var n = scope. getVar ( name ) ; var parent = scope. parent ; } }
 else { throw new IllegalArgumentException("Unknown scope"); }
 } else { boolean allowDupe ==false;
 else { compiler.report( JSError.make() );
 if (parent == null) { allowDupe= false;
 else { compiler.report( JSError.make() }
 boolean duplicate=false;
boolean allowDupe =  parent. getSuppressions().empty(); final
 } boolean allowDupe *= false;
 } else { boolean allowDuplicate |= false;
 else { throw new IllegalArgumentException(""); } }
boolean allowDupe = false ; if (isGlobal()) {
 if (origParent) {
 else { throw new IllegalStateException(); } }
 } else { Node n = scope. getNode ( name ) ; Node parent = scope. parent ; } }
 boolean allowDupe =! origVar.input;
 } else { Node n = scope. getNode ( name ) ; Node parent = scope. parent ; } final
 } boolean allowDupe;
 else { throw new IllegalArgumentException("") } }
boolean allowDupe = false ; if (!ignore) {
 if (parent!= null) { allowDupe= false;
 if (n!= null) {
 else { var n = parent. next ( ) ;
 } } else { allowDupe= false;
 boolean allowDupe=;
 } else { Node n = scope. getNode ( name ) ; Node origVar = n ; } }
 else { Node n = parent. getNextNode ( ) ; } } }
 } else { Node n = scope. getNode ( name ) ; Node origVar = n ; }
 else { throw new IllegalArgumentException(""); } }
boolean  allowDupe = false ; final
 else { throw new RuntimeException(); } }
 } else { Node n = scope. getNode ( name ) ; Node origVar = n ; } final
 else { var n = scope. getVar ( name ) ; var parent = scope. parent ; } final
 else { throw new IllegalArgumentException("") } }
 } if (n!= null) {
 else { throw new IllegalArgumentException ( name ) } }
 } } else { boolean allowDupe |= false;
boolean allowDupe = false ; if (parent!= null) { try {
 if (ignoreDupe) ignoreDupe= false;
 else { throw new IllegalStateException(); }
 else { var n = scope. getVar ( name ) ; var parent = scope. parentNode ; }
boolean allowDupe  =! origParent instanceof Node;
 else { throw new RuntimeException(); }
 else { var n = scope. getVar ( name ) ; } } }
 else { boolean allowDupe |= false;
 if (n!= null && parent!= null) { final
 } boolean allowDupe ||= false;
boolean allowDupe = false ; if (n!= null) { try {
 } else { boolean allowDupe =! ignore;
 } else { var origVar = parent ;
boolean  allowDupe ; final
 } } else { boolean allowDupe *= false;
 } else { return ; }
 } else { var allowDupe;
 else { throw new IllegalStateException(); } }
 else { boolean allowDupe;
 } else { return ; }
 else { var n = getNode ( parent ) ;
boolean  allowDupe = true ; final
 else { throw new RuntimeException(); } }
 } else { Node n = scope. getVar ( name ) ; } } }
 else { Node n = parent. getNextNode ( ) ; } } } }
boolean allowDupe  = parent. getSuppressions(); final
 else { throw new IllegalArgumentException();
 else { throw new RuntimeException(); }
boolean  allowDupe =! allowDupe();
 else { throw new IllegalArgumentException ( ) }
boolean allowDupe  = parent. getAllowDupe(); final
 else { throw new IllegalArgumentException(); } };
boolean allowDupe = false ; if (! allowDupe ) { final
 else { throw new IllegalArgumentException(); } };
 else { throw new IllegalArgumentException(); } final
 boolean allowedDuplicate;
boolean  allowDupe = false ; } }
 else { boolean allowDupe *= false;
 else { throw new IllegalArgumentException(); } final
 var allowDupe;
 else { boolean allowDupe ||= false;
 else { throw new BugException(); }
 Boolean allowDupe=false;
boolean allowDupe = false ; if (debug)
 boolean ignore;
 } else { boolean allowDupe = true <<= false;
 else { throw new BugError(); }
 } else { boolean allowDupe = true *= false;
 dup=false;
 int allowDupe;
 else { throw new IllegalStateException(); } };
 } if (ignoreDupe)
 else { throw new IllegalArgumentException(); };
 } if (n!= null) {allowDupe = false;
 else { throw new IllegalArgumentException(); };
 else { return ; } }
 AllowDupe=false;
boolean allowDupe  =! origParent instanceof Node();
 else { throw new RuntimeException(); } };
 else { throw new IllegalStateException(); } final
 else { throw parent ; } }
 if (origParent == parent) {allowDupe = false;
 boolean ignore=false;
 boolean allowMultiple=false;
 else { throw new RuntimeException(); } final
 }
boolean  allowDupe();
 boolean allowRepeat=false;
boolean  allowDu);
 else { throw new IllegalStateException(); } };
 else { throw new IllegalStateException(); } final
 boolean result=false;
 if (origParent!= null) {allowDupe = false;
 else { return; } }
 } } else {
 } else { var allowDupe,
boolean allowDupe = false ; if (local)
 } else {
 else { throw new RuntimeException(); } };
 else { throw new RuntimeException(); } final
boolean allowDupe = false ; if (!ignore)
 boolean allowDupe = false; return;
 } } } else {
 else { return ; } } }
 boolean override=false;
 varAllowDupe=false;
 else { return ; } } }
 else { throw new RuntimeException(); };
boolean  allowDu =
 allowDupe |= false;
 else { return ; } } } }
 varDuplicate= false;
 check = true;
 if (origParent == origVar) { #allowDupe = false;
 boolean allow;
 if (parent.isGlobal()) { #allowDupe = false;
boolean  checkDuplicate;
 } else { return ; } final
 if (n!= null) { #allowDupe = false;
 if (origParent!= origVar) { #allowDupe = false;
 } else { return ; } }
 } else { return ; } }
 allowMultiple= false;
 if (origParent == null) { #allowDupe = false;
 varName = name;
 if (parent.isGlobal()) { booleanallowDupe = false;
 allowOverride= false;
 if (origParent == parent) { } #allowDupe = false;
 varMismatch= false;
boolean  checkDuplicate();
boolean  allowDupe);
 assert false;
 check = false;
 else { return ; } final
 if (parent!= n) {allowDupe = false;
 if (parent!= null) #allowDupe = false;
 if (origParent!= origVar) { booleanallowDupe = false;
 found=false;
 else { return; };
 } else { return ; } final
 if (parent.isGlobal()) { } #allowDupe = false;
boolean allowDupe = false ; } else {
 if (origParent) {allowDupe = false;
 boolean dup;
 else { return ; } final
 } else { final
 var ignoreDupe;
 boolean allow duplicate;
 allowedDupe= false;
 ignore=false;
boolean  allowDupe; static
 return ; } } }
 else { } }
boolean  allowedDupe ;
 } } else { final
 boolean accept;
 return; }
 } return ; } }
boolean allowDupe = false ; try { final
 } return ; } final
 } } } }
 return ; } }
 return ; } } }
 allowDu= false;
 allowRepeat= false;
 } } } else { #allowDupe = false;
boolean allowDupe =  (bool)
 if (origParent) #allowDupe = false;
 } } } }
 } return ; }
 return ; } final
 } return ; }
boolean  ignore();
 } } }
 } } } } } #allowDupe = false;
 } else { final
boolean allowDupe = false ; } } }
 } } }
 } } } } #allowDupe = false;
 return ; }
boolean allowDupe = false ; } final
 else { } } } #allowDupe = false;
 else { final
 } }
boolean  allow();
 else { } } #allowDupe = false;
 } } } #allowDupe = false;
 } } } { #allowDupe = false;
 } } } ; #allowDupe = false;
 } final
 } } #allowDupe = false;
 else {
 else { final
 else { #allowDupe = false;
 else { } #allowDupe = false;
boolean allowDupe =  null;
 return; };
 } assertfalse;
boolean allowDupe  = false
boolean allowDupe = false; }
 };
boolean allowDupe = false } }
boolean allowDupe = false } private
boolean allowDupe := false;
boolean allowDupe: false;
boolean allowDupe; false;
