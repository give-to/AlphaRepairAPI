info = parent.getJSDocInfo();
 allowDupe = true;
 allowDupe |= parent.getJSDocInfo();
info = parent. getInfo ( ) ;
 return parent.getJSDocInfo();
 allowDupe = true
 allowDupe = true ; return ;
 info = origVar.parent.getJSDocInfo();
 parent.getJSDocInfo();
info = parent. getJSDocInfo ( name ) ;
info = parent. getJSDocInfo ( )
info = parent.getJSDocInfo() ; allowDupe = true
 allowDupe = origVar.input.getJSDocInfo();
info =  n. getJSDocInfo ( ) ;
 allowDupe;
 allowDupe = origParent.getJSDocInfo();
 allowDupe = allowDupe || parent.getJSDocInfo();
 allowDupe = parent.getJSDocInfo();
info  = n. getInfo ( ) ;
 info |= parent.getJSDocInfo();
 allowDupe = true ; info |= parent.getJSDocInfo();
info = parent.getJSDocInfo() ; } else { info = info. info ;
 allowDupe = true ; info= parent.getJSDocInfo();
info = parent.getJSDocInfo() ; } else { info = origInfo ;
info = parent.getJSDocInfo() ; allowDupe = true ;
 origInfo = parent.getJSDocInfo();
 allowDupe = allowDupe && parent.getJSDocInfo();
info = parent.info();
 allowDupe =
 info = parent.parent.getJSDocInfo();
info  = n. getJSDoc ( ) ;
info  = n. getSourceInfo ( ) ;
 info = origparent.getJSDocInfo();
 allowDupe = allowDupe = parent.getJSDocInfo();
 allowDupe = info = parent.getJSDocInfo();
info = parent.getJSDocInfo() ; } if ( info == null ) {
 return ; } if ( info == null ) { return ; } if ( info == null ) { return ; } if ( parent!= null )
info = parent.getJSDocInfo() ; return ;
info  = ;
info = parent.getJSDocInfo() ; } if ( info == null ) return ;
info = parent.getJSDocInfo(name); allowDupe = true
 allowDupe = true ; } else { info= parent.getJSDocInfo();
 allowDupe = info!= parent.getJSDocInfo();
 info = origParent.getJSDocInfo();
 allowDupe = allowDupe && origVar.getJSDocInfo();
 allowDupe = false ; origInfo = parent.getJSDocInfo();
 allowDupe = origVar.getJSDocInfo();
 return ; } if ( info == null ) { return ; } if ( info == null ) { return ; } if ( parent ) {
 allowDupe = info |= parent.getJSDocInfo();
 allowDupe = false ; info = parent.getJSDocInfo();
 allowDupe = origParent && origparent.getJSDocInfo();
 allowDupe = true ; origInfo = parent.getJSDocInfo();
info = parent.getJSDocInfo(name); allowDupe = true ;
 allowDupe = allowDupe ;
 return ; } if ( info == null ) { return ; } if ( info == null ) { allowDupe =
 allowDupe = true ; origVar *= parent.getJSDocInfo();
 return ; } if ( info == null ) { return ; } if ( info == null ) { if ( parent!= null )
info = parent. getJSDoc ( ) ;
info = parent. getInfo ( )
info = parent.getJSDocInfo() ; } else { info = info ;
info = parent.getJSDocInfo(); if (info == null) {
 return ; } if ( info == null ) { return ; } if ( info == null ) { if ( parent ) {
 return ; } if ( info == null ) { return ; } if ( info == null ) { if ( parent!= null ) {
 allowDupe = true ; info *= parent.getJSDocInfo();
 allowDupe = allowDupe && origParent.getJSDocInfo();
 return ; } if ( info!= null ) { allowDupe = info. getSuppressions().contains("duplicate");
info = parent.getJSDocInfo(); if (info == null) return;
 allowDupe = origVar.parent.getJSDocInfo();
info = parent. getInfo ( name ) ;
 return false;
 return ; } if ( info == null ) { return ; } if ( info == null ) {
 allowDupe = true ; } else {
 return ; } if ( info!= null ) { allowDupe = info. allowDupes ; } else {
 return ; } if ( info!= null ) { allowDupe = info. allowDupe ; } else {
 allowDupe = allowDupe || origVar.getJSDocInfo();
info = parent.getJSDocInfo(); if ( info == null ) { return ;
info = parent. getSourceInfo ( ) ;
 allowDupe = n. getSuppressions ( ) ;
 return ; } if ( allowDupe ) { return ;
 info = parent.getJSDocInfo(); } else {
 allowDupe = origParent!= origparent.getJSDocInfo();
 allowDupe = true ;
info  = n. getJsDocInfo ( ) ;
info = parent.getJSDocInfo(name); } else { info = origInfo ;
info = parent. getJSDocInfo ( ) ; }
info = parentInfo ( ) ;
 return ; } if ( info!= null ) { allowDupe = info. getAllowDupes ( ) ;
 allowDupe = true ; }
info = parent.getJSDocInfo() ; } if ( info ) return ;
info = parent. getJsInfo ( ) ;
 return ; } if ( info!= null ) { allowDupe = info. getSuppressions().contains();
 return ; } if ( info == null ) { return ; } if ( info == null ) { return ; } if ( parent )
 return ; } if ( info == null ) { allowDupe =
 return ; } if ( info!= null ) { allowDupe = info. getAllowDupe ( ) ;
info = parent.getJSDocInfo() ; } if ( info == null ) { return
 return ; } if ( info!= null ) { allowDupe = info. getSuppressions()!= null ;
 allowDupe = true ; return ; }
 allowDupe = false ; return ;
 return ; } if ( allowDupe ) { return ; }
info = parent. getNodeInfo ( ) ;
 allowDupe = origVar!= parent.getJSDocInfo();
 continue; } if (info == null) { continue; } if (info == null) {
 return ; } if ( info!= null ) { allowDupe = info. getSuppressions().contains("") ;
 allowDupe return;
info = parent. getJSDocInfoImpl ( ) ;
 allowDupe = true ; info &= parent.getJSDocInfo();
 allowDupe = n. isComment ( ) ;
 return ; } if ( info == null ) { return ; } if ( parent!= null ) {
info = parent. getJsDocInfo ( ) ;
 info = parent.getInfo(); origParent=parent.getJSDocInfo();
 return ; } if ( info == null ) { return ; } if ( info == null ) { return ; } else {
 allowDupe = true ; return false ;
info  = n. getAnnotationInfo ( ) ;
 allowDupe = n.isDuplicate();
info = parent.getJSDocInfo() ; return false ;
 allowDupe = origVar!= n.getJSDocInfo();
info = parent. get ( ) ;
 allowDupe = info == parent.getJSDocInfo();
info = parent.getJSDocInfo(name); } if ( info == null ) {
 allowDupe = n. isFunction ( ) ;
 allowDupe = n. isStatic ( ) ;
 allowDupe = origParent!= parent.getJSDocInfo();
info  = n. getClassInfo ( ) ;
 info = parent.getJSDocInfo(); } } else {
 allowDupe = info ||= parent.getJSDocInfo();
info  = n. getAnnotations ( ) ;
 continue; } if (info == null) { allowDupe = true ;
 allowDupe = n. isName ( ) ;
info  = n. getNodeInfo ( ) ;
 allowDupe = info == origVar.parent.getJSDocInfo();
info = parent. info ;
 return ; } if ( info == null ) { return ; } if ( parent!= null )
 info = parent.input.getJSDocInfo();
 allowDupe = true ; origVar |= parent.getJSDocInfo();
 return ; } if ( info!= null ) { allowDupe = info. getSuppressions().contains("duplicate"); }
 allowDupe = n. isDefined ( ) ;
 allowDupe = true ; origParent |= parent.getJSDocInfo();
 continue; } if (info == null) { continue; } if (parent!= null)
info  = n. getJSDocInfo ( )
 allowDupe = origVar == parent.getJSDocInfo();
 allowDupe = n. isDeprecated ( ) ;
 return ; } if ( info!= null ) { allowDupe = info. getSuppressions().contains("";")
 ignoreDupe = n. getSuppressions ( ) ;
 return ; } if ( info!= null ) { allowDupe = info. getSuppressions().contains("";)
 return ; } if ( info == null ) { allowDupe = true ;
 allowDupe = n. isIgnored ( ) ;
 allowDupe = info!= null && origparent.getJSDocInfo();
 return ; } if ( info!= null ) { allowDupe = info. getSuppressions().contains("duplicate"); else
 allowDupe = true ; origParent &= parent.getJSDocInfo();
info = parent.getJSDocInfo(); if (info) return;
 allowDupe = true ; origParent *= parent.getJSDocInfo();
info = parent. getInfo ( ) ; allowDupe ;
info = parent. getJsDocInfo ( ) ; return ;
 info = origParent && origparent.getJSDocInfo();
 allowDupe = n. isDeclared ( ) ;
 allowDupe = allowDupe ; }
 allowDupe = false ; info = parent.parent.getJSDocInfo();
 allowDupe = n.isGlobal();
 allowDupe = allowDupe && info.parent.getJSDocInfo();
 return ; } if ( info!= null ) { allowDupe = info. getSuppressions().contains("";
 return ; } if ( info!= null ) { allowDupe = info. getSuppressions().contains("duplicate";
info = parent.getJSDocInfo() if (info == null) { return;
 allowDupe = true ; else { info |= parent.getJSDocInfo();
 return ; } if ( info == null ) { throw new IllegalArgumentException ( "null");
 allowDupe = true ; } else { allowDupe
 allowDupe = origVar!= origparent.getJSDocInfo();
 continue; } if (info == null) { allowDupe = true
 if (parent!= null) {
 allowDupe = origParent.input.getJSDocInfo();
 return ; } if ( info!= null ) { allowDupe = info. allowDupe ; else {
info = parent.getJSDocInfo() ; allowDupe ;
 return ; } if ( info == null ) { if ( parent ) {
 info = origParent.parent.getJSDocInfo();
info = parent.getJSDocInfo() ; } return ;
info = parent.getJSDocInfo(); } if (! info ) return ;
 return ; } if ( info!= null ) { allowDupe = info. allowDupes ; else {
info  = n. getComments ( ) ;
 allowDupe = false ; info = origparent.getJSDocInfo();
 allowDupe = false ; return ; }
info = parent. getJsDocInfo ( name ) ;
 return ; } if ( info == null ) { throw new IllegalArgumentException ( ) ;
 allowDupe = allowDupe && info==parent.getJSDocInfo();
 return ; } if ( info!= null ) { allowDupe = info. getSuppressions().contains("duplicate")
 allowDupe = origVar.input.parent.getJSDocInfo();
 ignoreDupe = true ; return ;
info  = n. getSource ( ) ;
info = parent. getFirstInfo ( ) ;
info  = origInfo;
 ignoreDupe = n. isIgnoreCase ( ) ;
 allowDupe = true; else { info *= parent.getJSDocInfo();
 allowDupe = origParent == parent.getJSDocInfo();
 continue; } else { if (info == null) {
info =  n. getSourceInfo ( ) ; return ;
 info = parent.getJSDocInfo(); } else
 allowDupe = origParent == origparent.getJSDocInfo();
 allowDupe = allowDupe = true;
info = parent.getJSDocInfo() if (info == null) {
 return ; } if ( info!= null ) { allowDupe = info. getSuppressions().contains("")
 info = origVar.input.getJSDocInfo();
 return; } if (info == null) { allowDupe = true
 allowDupe = n. isIgnoreComments ( ) ;
info = parent.getJSDocInfo(name); } if ( info ) return ;
 allowDupe = false ; info = orig.parent.getJSDocInfo();
 return ; } if ( info!= null ) { allowDupe = info. getSuppressions().contains("catch"); }
 allowDupe = n. getSuppressions().empty() ;
 allowDupe = origParent = parent.getJSDocInfo();
 allowDupe = nodeWithLineNumber ; }
 return ; } if ( allowDupe ) { return
 return ; } if ( info!= null ) { allowDupe = info. allowDupe ; } else
info  = NodeInfo ( ) ;
 allowDupe = n. getSuppressions ( )!= null
 return ; } if ( info == null ) { return ; } if ( info == null ) { allowDupe &&
 return ; } if ( info!= null ) { allowDupe = info. allowDupes ; } else
 info = origVar.getJSDocInfo();
 return ; } if ( info!= null ) { allowDupe = info. getSuppressions().contains("catch"); else
info  = getInfo ( ) ;
 continue; } if (info == null) { allowDupe = true ; } else
info =  n. getInfo ( ) ; return false ;
 info = n.getJSDocInfo(_);
 allowDupe = origParent!= _parent.getJSDocInfo();
info = parent.getJSDocInfo() ; allowDupe = true ; }
info = parent.getJSDocInfo(name); } else { info = info ;
 info = parent.getJsDocInfo(); } else {
info = parent.getJSDocInfo(name); return;
 allowDupe = false ; } else { allowDupe
info  = new Info ( ) ;
info  = getDefaultInfo ( ) ;
 info = parent.getJsDocInfo(); } } else {
 if (parent!= null)
info = parent. getInfo ( ) ; return false ;
info = parent.getJSDocInfo() ; } if ( info ) {
info  = n. getInfo ( )
info = parent.getJSDocInfo() ; allowDupe =
 allowDupe = origParent.parent.getJSDocInfo();
 return; } if (info == null) { allowDupe = true ; } else
 allowDupe = true; parent.getJSDocInfo();
info = parent.getJSDocInfo().getInfo ( ) ;
 ignoreDupe = origVar.parent.getJSDocInfo();
 allowDupe = info &= parent.getJSDocInfo();
info  = parent ;
info  = n. getSourceInfo ( ) ; }
 info = n.getJSDocInfo());
 info = n.getJSDocInfo(();
 if (parent!= null) { JSDocInfo
info  = origParent ;
 allowDupe = allowDupe ; return;
 info = orig.parent.getJSDocInfo();
 info = origParent = origparent.getJSDocInfo();
 info = origVar.grandparent.getJSDocInfo();
 ignoreDupe = n. getSuppressions().empty() ;
 info = origVar.input.parent.getJSDocInfo();
info =  n. getJsDocInfo ( ) ; }
info = parent. getJSDocInfo ( ;
info  = NSDocInfo ( ) ;
 continue; } if (info == null) { allowDupe = true; }
info = parent.getJSDocInfo() if (info) return;
 info = origParent? :parent.getJSDocInfo();
 allowDupe = n. getSuppressions ( ) ; }
info  = globalInfo ( ) ;
 allowDupe = info!= null &&!parent.getJSDocInfo();
 allowDupe = true ; JSDocInfo
info = parent.getJSDocInfo() ; ignoreDupe = true
 allowDupe = false; parent.getJSDocInfo();
info  = scope ;
info = parent.getJSDocInfo(name) ; } return ;
 allowDupe = true ; return ; } }
 allowDupe = true ; return; return;
 info = n.getJSDocInfo (*);
 ignoreDupe = n. getSuppressions ( ) ; }
 allowDupe = allowDupe || true;
 ignoreDupe = true ; return ; }
 ignoreDupe = n.isGlobal();
 continue; } if (info == null) { allowDupe = true; else
info =  n. getSourceInfo ( ). info ;
 return; } if (info == null) { return; } if (info == null) { var
info  = n. get ( ) ;
 continue; } else { if (parent!= null)
 allowDupe = n.isDuplicated();
 allowDupe = true;;
info = parent.getJSDocInfo(name) ; allowDupe ;
 continue; } if (info == null) { allowDupe = false
 return; } if (info == null) { allowDupe = true; }
 return; } if (info == null) { allowDupe = true; else
info = parent.getJSDocInfo(name) ; allowDupe =
 info = origParentNode.getJSDocInfo();
 info = origVar.superparent.getJSDocInfo();
 allowDupe = true ; } } else {
 JSDoc info = parent.getJSDocInfo();
info  = getSourceInfo ( ) ;
info = parent ; return ;
 allowDupe = false ; return ; } }
info  = NSDocInfo. Unknown ;
 return ; } if ( info == null ) { throw new IllegalArgumentException(""); }
 info = n.getJSDoc(();
 return; } else { JSDocInfo
info = parent.getAnnotationInfo ( ) ;
 if (parent) {
 return ; } if (info == null) { allowDupe &&
 allowDupe = false ; return false ; }
 allowDupe = n.isInterface();
 allowDupe = true ; else {
 return ; } if ( info!= null ) { allowDupe = info. allowDupe ; } {
 return; } info = info.getJSDocInfo();
 return return();
 allowDupe = n.isCallable();
info = parentInfo ;
 return; } if (info == null) { return; } if (info == null) {...
info = parent.getJSDocInfo(name) ; return false ;
 allowDupe = return false;
 allowDupe =! info.isDefined();
 info = origParent? null :parent.getJSDocInfo();
 ignoreDupe = true ; return ; } }
 return ; } if ( info!= null ) { allowDupe = info. allowDupe ; }
 return ; } if ( info!= null ) { allowDupe = info. allowDupe ; else
 allowDupe = true ; } else
info = parent. getComments ( ) ;
info = parent.getJSDocInfo() ; ignore = true ;
 allowDupe =!info;
info = parent.getJSDocInfo() ; allowDupe();
 allowDupe = info &&= parent.getJSDocInfo();
 return nodeWithLineNumber();
 allowDupe = false
info = parent.getJSDocInfo() if (info) {
 info = n.getJSDoc(_);
 info = (Info) parent.getJSDocInfo();
info = parent. getSource ( ) ;
 allowDupe = true
 allowDupe = info *= parent.getJSDocInfo();
 allowDupe = true ; } return;
info  = n. getInfo ( ) ; }
 info *= parent.getJSDocInfo();
 return(null);
 return ; } if ( info == null ) { return ; } if ( parent!= null ) { var
 varInfo = parent.getJSDocInfo();
 allowDupe = true; else
 info = n.getJSDoc (*);
 allowDupe = ;
 allowDupe =!true;
info  = NodeInfo. Unknown ;
 allowDupe =!ignore;
 allowDupe = true ; } else { final Info
 allowDupe = allowDupe || false;
 allowDupe = true ; return null;
 throw new RuntimeException(name);
 ignoreDupe = (bool) true);
 throw new IllegalStateException(name);
 allowDupe = true ; return true;
 info = parent.child.getJSDocInfo();
info = parent.getJSDocInfo() ; return null ;
 allowDupe = compiler.report();
 return true;
info = parent.getInfo(); return;
info = parent.getJSDocInfo() ; } if ( info ) { return
 info = n.parent.getJSDocInfo();
 allowDupe && info= parent.getJSDocInfo();
 allowDupe = false ;
 return compiler.report();
info  = null;
info = parent.getJSDocInfo(name); info = null;
info = parent.getJSDocInfo(origVar); }
 allowDupe = false ; }
 allowDupe = compiler.debug();
 allowDupe = allowDuplicate;
 allowDupe = true ; } else { JSD
info = parent. currentInfo();
info = parent.getJSDocInfo() ; allowDupe = false
info  = origVar ;
 origInfo = parent.parent.getJSDocInfo();
 ignoreDupe = (bool) false);
info  = Node. Unknown ;
 info = new Info(n);
 ignoreDupe = isGlobal();
 info = this.parent.getJSDocInfo();
 ignoreDupe = compiler.report();
 info = scope.parent.getJSDocInfo();
 return; } else { if (info == null) { var
 ignoreDupe = n.name();
 info = getSourceInfo(n);
 info = parent ; origParent &= parent.getJSDocInfo();
 return false);
 if (!parent) {
 AllowDupe = true;
 allowDupe = false ; return ; } return;
 info = getJSDocInfo();
 info = n.getSourceInfo(_);
 origVar = parent.getJSDocInfo();
 return (!);
 return ();
 ignoreDupe = true ; }
 return; info = parent.getJSDocInfo();
 ignoreDupe = new Boolean();
 throw new IllegalStateException();
 allowDupe; info= parent.getJSDocInfo();
 allowDupe = true; }
 allowDupe = true ; } else { final Node
 compiler.report();
 return null);
info = parent. currentInfo;
info  = node ;
 throw new IllegalStateException(null);
info  = Node. error ;
 if (!parent!= null)
 break ; } else { if (info == null) { var
 allowDupe = true ; } else { var
 allowDupe
 allowDupe = n. isNameDeclaration;
 allowDupe = true ; return ; } return;
 throw new RuntimeException(n);
 return report();
 if (parent!= null) { } else
 throw new IllegalArgumentException(();
info = parent. docInfo ;
 throw new RuntimeException(null);
 info = getDefaultInfo(n);
 if (parent!= null) return; else
info = parent.getJSDocInfo() ; return ; }
 info = getInfo(n);
 throw new RuntimeException();
 allowDupe ||= parent.getJSDocInfo();
 allowDupe &= parent.getJSDocInfo();
 return (-1);
 info = scope.getJSDocInfo();
 if (parent!= null) { }
 allowDupe true;
info = parent.getJSDocInfo(name, false); }
info  = globalInfo ; }
 return null;
 throw new Error();
 AllowSDocInfo info= parent.getJSDocInfo();
 info = origNode.parent.getJSDocInfo();
 origInfo = orig.parent.getJSDocInfo();
 if (parent)
 info = info();
 info = _parent.getJSDocInfo();
info  = null
 AllowDuplicate
 allowDupe = false ; } else { var
 throw parent.getJSDocInfo();
 return n.getJSDocInfo();
 return(n);
 allowedDupe = true;
 n.getJSDocInfo();
 ignoreDupe = new boolean();
 allowDupe &&
 ignoreDupe return;
 info &= parent.getJSDocInfo();
 origInfo |= parent.getJSDocInfo();
 return (void) return);
 return; } info.clear();
info = parent.getJSDocInfo(name, true); }
 return(null) null);
 ignoreDupe = defaultHandler();
info = parent.getJSDocInfo(info);
info = parent.genInfo();
 return report(null);
 return(nil);
 allowDupe = false
 return compiler.throw();
 return.return();
 allowDupe *= parent.getJSDocInfo();
 if (!parent)
 info = p.getJSDocInfo();
info = parent.docInfo();
 info = getInfo(();
 info.empty();
 return; info.report();
info = parent ; }
 info = origInfo ||= parent.getJSDocInfo();
 return report(n);
 info = m.getJSDocInfo();
 ignoreDupe;
 allowedDupe |= parent.getJSDocInfo();
 JSDoc
info = parent.getJSDocInfo(name); }
 return report(nil);
info = parent.getInfo(); }
 return(sourceName);
 return; return;
 throw new Error(();
info = parent.getJSDocInfo() ; break ;
info = parent.getJSDocInfo(origParent); }
 return ignore();
info = parent.getJSDocInfo(name, parent); }
 return source.getJSDocInfo();
 info.info= parent.getJSDocInfo();
 return node.getJSDocInfo();
info  = [];
 origInfo *= parent.getJSDocInfo();
 info ||= parent.getJSDocInfo();
 compiler.getJSDocInfo();
 return -1;
info = parent.getJSDocInfo(). info;
 info.child= parent.getJSDocInfo();
info = parent.getJSDocInfo(...) ;
 this.
 return null();
 return throw();
 scope.getJSDocInfo();
info = parent info;
 source.getJSDocInfo();
 return 0;
 default:
 return return;
 try {
info  -- ;
 if needed,
info = parent.Info();
info = parent.comments;
 if needed?
info = parent.getJSDocInfo(n); }
 try { }
info = parent.getJSDocInfo(name)); }
info = parent.getJSDocInfo(name) }
 info.parent.getJSDocInfo();
info = parent.getJSDocInfo() }
 Info info= parent.getJSDocInfo();
info = parent.getJSDocInfo()); }
 info_parent.getJSDocInfo();
info = parent.getJSDocInfo()(); }
 var
info += parent.getJSDocInfo();
info -= parent.getJSDocInfo();
info WAS parent.getJSDocInfo();
