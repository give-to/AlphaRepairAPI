errorManager.report(level, error);
 report(error);
errorManager. report ( error ) ;
errorManager. report ( ) ;
 report(level, error);
errorManager.report(error, level);
errorManager = level ;
errorManager. report ( error ) ; }
 reporter.report(level, error);
 errorManager.report(level, error); } else if (level.isOff()) { errorManager.report(level, error); }
 errorManager.report(level, error); } else if (level.isOff()) {
 errorManager.report(level, error); } else {
 errorManager.report(level, error); } else if (level.isOff(error)) {
 errorManager.report(level, error); } else if (level.isOff()) { errorManager.report(level); } else
 level.report(error);
 errorManager.report(level, error); } else if (level.isOff()) { errorManager.report(error); }
 errorManager.report(level, error); } if (level.isOff()) { errorManager.report(level, error); }
 report(level);
errorManager.report(level, error.message);
 errorManager.report(level, error); } else if (level.isOff()) { errorManager.report(error); } else
 errorManager.report(level, error); } else if (error!= null) {
 errorManager.report(level, error); } if (level.isOff()) { errorManager.report(level, error); } else
errorManager.report(level, error) ; } else { report ( error ) ;
errorManager.report(level);
errorManager. reportError ( error ) ;
 errorManager.report(level, error); } else if (error.isOff()) {
 errorManager.report(level, error); } else
errorManager. reportError ( error, level ) ;
 errorManager.report(level, error); } else { if (level!= null) {
 errorManager.report(level, error); } else if (error.isOff()) { errorManager.report(level, error); }
 errorManager.report(level, error); } else if (level.isOff()) { errorManager.report(level); } else {
 errorManager.report(level, error); } else { if (level.isOff()) {
errorManager.report(level, error) ; } else { errorManager = null ; }
 errorManager.report(level, error); } else if (level.isOff()) { errorManager.report(level); }
errorManager.report(level); } else { errorManager = null ;
 errorManager.report(level, error); } else if (level.isOff()) { errorManager.disable(level); }
 errorManager.report(level, error); } else if (level.isOff()) { if (error!= null) {
errorManager. reportError ( error ) ; }
 errorManager.report(level, error); } else if (level.off()) {
 reporter. report ( error ) ;
 errorManager.report(level, error); } if (level.isOff()) { errorManager.report(level); } else
 errorManager.report(level, error); } else if (level!= null) {
 errorManager.report(level, error); } if (level.isOff()) { errorManager.report(error); }
 errorManager.report(level, error); } else if (error.isOff()) { errorManager.report(level); } else
 errorManager.report(level, error); } else if (level.isOff()) { errorManager = null; }
errorManager.report(level, error) ; } else { throw error ; }
 errorManager.report(level, error); } else if (level.isOff()) { errorManager = null ;
errorManager.report(level, error) ; } else { report ( error ) ; }
 errorManager.report(level, error); } else if (level.isOff()) { errorManager =
 errorManager.report(level, error); } else if (error.isOff()) { errorManager.report(error); }
 errorManager.report(level, error); } else if (level.isOff()) { if (error!= null)
 errorManager.report(level, error); } else if (level.isOff()) { errorManager.report(error);
errorManager.report(level, error) ; } else { errorManager = null ;
 reportError(level, error);
errorManager.report(level, error) ; } else { return false ;
errorManager. report ( error ) ; return true ;
errorManager.report(level, error) ; } else { return ;
errorManager. report ( error, level ) ; }
errorManager. report ( error ) ; return false ;
errorManager.report(level, error) ; } else { errorManager ( error ) ;
errorManager = level
errorManager.report(level, error) ; } else { throw error ;
 errorManager.report(level, error); } else if (level.isOff()) { errorManager.disable(level);
errorManager = errorManager ;
errorManager.report(level); } else { errorManager = null ; }
errorManager.report(level, error) ; } else { error = null ;
 errorManager.report(level, error); } else if (level.isOff()) { errorManager.off(error);
 errorManager.report(level, error); } else if (level.isOff()) { if (error) {
errorManager.report(level, error) ; } else { errorManager = errorManager ;
 errorManager.report(level, error); } else if (level.isOff()) { error = null ;
errorManager.report(level); } else { errorManager. report ( )
errorManager. report ( error ) ; } return false ;
 reporter. report ( error ) ; }
 reporter. report ( error, level ) ;
 errorManager.report(level, error); } } else {
errorManager. reportError ( error, level ) ; }
 errorManager.report(level, error); }
 errorManager.report(level, error); } else if (level.isOff()) { if (ignore) {
 errorManager.report(level, error); } else if (level.isOff()) { if (force) {
errorManager. report ( error ) ; return ;
 errorManager.report(level, error); } else if (level.isOff() { return
errorManager.report(level, error) ; } else { report ( ) ;
 errorManager.report(level, error); } else if (level.isOff(error))) {
 errorManager. report(level, error); } else if (level.isOff()) { errorManager.
errorManager. reportError ( error ) ; return false ;
 errorManager.report(level, error); } else if (level.isOff()) { if (!error)
errorManager. report ( error ) ; } return true ;
 errorManager.report(level, error); } else if (level.disable()) {
 errorManager = getErrorManager ( ). getErrorManager ( level ) ;
 errorManager.report(level, error); } else if (level.isOff()) { if (!debug)
 report(level, error); } else { reporter.report(level, error);
 errorManager.report(level, error); } else if (level.isOff()) { if (!enabled)
 errorManager.report(level, error); } else if (level.isOff()) { errorManager = {}; }
errorManager. report ( error ) ; } return level ;
 report ( error ) ; }
errorManager.report(level, error.stackTrace);
 errorManager.log(level, error); }
 errorManager.report(level, error); } else { if (ignore) {
 reporter. report ( ) ;
errorManager.report(level); } else { report ( ) ;
 errorManager.report(level, error); } else { if (debug) {
 if (error!= null) {
 errorManager.report(level, error); } else { return
 errorManager.report(level, error); } else { if (!level) {
 reporter.reportError(level, error);
 errorManager.log(level, error);
errorManager.report(error); } else { errorManager = null ;
errorManager.report(level, error) ; else { errorManager. report ( ) ;
errorManager.report(level); } else { errorManager ( error ) ;
errorManager.report(level, error) ; } return false ;
errorManager.report(level, error) ; return true ;
errorManager.report(level); } else { errorManager = errorManager ;
 errorManager = getErrorManager ( ) ;
 errorManager = getErrorManager ( ). getInstance ( ) ;
 report(, error);
 errorManager.report(level, error); } else { if (!ignore) {
 report(level, error); } else {report(level, error);
errorManager.report(level); } else { report ( error ) ;
 errorManager. report ( error ) ; } else { return ;
 report ( error, level ) ;
 errorManager.report(level, error); } else { if (logging)
 this. report ( error, level ) ;
 errorManager.report(level, error); } else if (report) {
 report();
 reportError(error);
errorManager.report(level, error) ; } else { throw error ; } }
errorManager.report(level); } else { throw error ; }
 errorManager.report(level, error); } else { if (!debug)
 errorManager.report(level, error); } else { } else {
 JSError.report(level, error);
 this. report ( error ) ; }
errorManager. report ( )
errorManager.report(level, error) ; } return error ;
errorManager.report(level, error) ; } return true ;
 errorManager.report(level, error); } else if (report()) {
 errorManager.report(level, error); } if (report) {
errorManager.report(level, error) ; } else { return error ;
 errorManager.report(level, error); } } else { return
errorManager.report(level, error) ; throw error ;
 reporter. report ( error, level ) ; }
 level.reportError(error);
errorManager.report(level,  error).getMessage ( ) ;
 errorManager.report(level, error); } else { if (!level)
 reporter. report ( error ) ; } else { return ;
errorManager.report ( error ) ; } else { return false ;
errorManager.report(level); } else { return false ;
errorManager.report ( error ) ; } else { throw error ;
errorManager.report(level, error) ; } throw error ;
errorManager. report ( error )
errorManager.report(level, error) ; return false ;
 reporter. report ( error ) ; } else { return false ;
errorManager.report(level, error) ; } else { return false ; }
 reporter. reportError ( error ) ;
errorManager.report(level,  error.stackTrace());
errorManager. report ( level ) ; }
errorManager.report(level, error) ; } else { return true ;
 report(level, error); } else reporter.report(level, error);
 report(_);
errorManager.report(error, level, guard);
 errorManager.report(level, error); } else { errorManager =
errorManager.report(level, error) ; } else { return - 1 ;
 errorManager.report(level, error); } if (report()) {
errorManager.report(error, level); } else { throw error ;
errorManager.report(error, level); } else { return false ;
 reporter.report(error.level, error);
errorManager. report ( error, level )
 errorManager.report(level, error); } else { error =
errorManager.report(level,  error.getMessage(), error);
 reporter. report ( error ) ; } else { throw error ;
 report(level, error); } reporter.report(level, error);
 errorManager.report(level, error)); } else {
 if (error!= null)
 reporter. report ( error ) ; return true ;
 errorManager.setLevel(level); }
 log. report ( error ) ;
errorManager.report(error); } else { report ( ) ;
 errorManager.report(level, error); } else { return ; }
errorManager.report(level, error) ; return ;
errorManager.report(level, error) ; else { errorManager = null ; }
errorManager.report(level); } else { throw error ;
 report(level, error); }
 errorManager.log(level); }
errorManager.report(level.name, error);
errorManager.report(level, error.cause, error);
errorManager.addError ( error, level ) ;
 errorManager. reportError ( error ) ; } return false ;
errorManager.report(JSError, level, error);
errorManager.report(error); } else { throw error ; }
errorManager.report(error, level); } else { return ;
 errorManager.report(level, error); else {
 log(level, error);
 reporter. report ( error, level )
 errorManager.setLevel(level);
 report(level, error);
errorManager.addError ( error ) ; }
 errorManager.report(level); } else
 reporter.report(level, error); } reporter.report(level, error);
errorManager. report ( error ) ; } }
 logger.error(level, error);
errorManager.report(error, level); return ;
 report(level, error); reporter.report(level, error);
 errorManager. report ( error ) return;
 errorManager. reportError ( error ) ; } return true ;
 reporter. report ( error ) ; } return false ;
 errorManager.log(error); }
errorManager.report(error, level); } return false ;
 if (report!= null) { report.report(level, error);
 level.report(this, error);
 reporter ( error ) ;
errorManager. report ( level )
errorManager.report(level,  error)); } else { throw error ; } }
errorManager.report(level, error); }
errorManager.report(error, level); return false;
errorManager.report(level, error) ; throw error ; }
errorManager.addError ( error ) ; return false ;
errorManager.reportError(error, level, guard);
 errorManager.remove(level); }
errorManager.report(error, level); } return true ;
errorManager.report(level); } else { throw error ; } }
 if (report!= null)
errorManager.report(level.name(), level, error);
 errorManager = LevelManager.createErrorManager(error);
 errorManager. reportError ( error ) ; return;
errorManager.report(level, error, options_.checkTypes);
errorManager.report(level, error.getMessage(), error.getCause()); }
 report(level, error); } report(level, error);
 errorManager.report(level, error); } else { throw
 log. report ( ) ;
 errorManager.addError(error);
 report(level); } else { report(error);
errorManager.report ( error ) ; } else { return true ;
 reporter. report ( error )
 errorManager. report ( error, level;
errorManager.report(error, error.level);
errorManager.addError ( error ) ; } return false ;
errorManager.reportError(error, level); } return false ;
 logger.log(level.getName ( ), error);
errorManager.report(error, level); } return error ;
 reportError(level);
errorManager.report(error, level); return true ;
errorManager.addError ( error ) ; return true ;
errorManager.reportError(error, level); return ;
errorManager.reportError(error, level); return false;
errorManager.report(error); } else { throw error ; } }
errorManager.report(level, error) ; } else { return null ;
errorManager.report(error.getCause()); } return level ;
 reporter. report ( error ) ; reporter. report(level, error);
 reporter.report(level, error); reporter.report(level, error);
 report(level.getName ( ), error);
errorManager.report(JSError error, level, error);
 report(level, error); } else super.report(level, error);
 report(level, error); } super.report(level, error);
 log ( error ) ;
errorManager.report(level); } return true ;
 logger.log(level, error);
errorManager.report(level); } return false ;
errorManager.report(error); } else { return - 1 ;
errorManager.addError ( error ) ; } return true ;
errorManager.report(level); } else { return true ;
 errorManager.log(level);
 this. report ( error ) ; return true;
 this. report ( error ) ; return false;
 logger.log(level, error); reporter.report(level, error);
 errorManager. report ( error ) ; return error;
 errorManager = LevelManager.getErrorManager(error);
errorManager.report(level, error) ; } return - 1 ;
 errorManager = ErrorManager.createErrorManager(level, error);
 logger.log(level, message, error);
 errorManager.report(JSError.level, error);
 LOGGER.info("Reporting error: ", error);
 reporter.report(level.name, error);
 if (error!= null) { return
 errorManager = LevelManager.getInstance(error);
 errorManager. report ( error ) break;
 logger.log(level.name(), message, error);
errorManager.report(level, error) ; } else { return false ; } }
errorManager.report(level, error, error.stackTrace);
 errorManager = level.getManager ( );
 report(level, error); } else { super.report(level, error);
 return level;
errorManager.report(level, error) ; } return errorManager ;
errorManager.report(level, error) ; } return ;
 errorManager = LevelManager.create(error);
 LOGGER.log(error.level, error);
errorManager.report(level,  error).getStackTrace()); }
errorManager. add ( error ) ;
 errorManager. report ( level, error;
 reporter.log(level, error);
errorManager.report(level.value( ), error);
errorManager.report(level, error) ; } return error ; }
 logger.log(level.name(), level, error);
 logger.log(level.toString ( ), error);
 logger.log(level.name, error);
 logger.log(error.level, error);
 report(level); }
errorManager = newLevel ;
errorManager.report(level.value, error);
 logger.getLogger( ).report(level, error);
 errorManager.reportError(error.level, error);
 errorManager.report(level, error); else
 errorManager.addError(level, error);
errorManager.report(level.getMessage ( ));
errorManager.report(error, level, reporter);
 errorManager = { } ;
 report(level, error); } else { report.report(level, error);
 logger.error(error);
errorManager.report(level, error.message(), error);
 reporter.reportError(error.level, error);
errorManager.report(error.getCause()); return ;
 level.setError(error);
 errorManager.reportError(level);
 this. report ( error );
errorManager.report(level.name( ), error);
 errorManager.log(error);
 errorManager = ErrorManagerFactory.createErrorManager(level, error);
 logger.log(error.message, error);
 report(level;
 logger.log("Reporting error: ", error);
 return true;
 LOGGER.error(error.level, error);
 errorManager = getErrorManager ( ) ; reporter.report(level, error);
 return false;
errorManager.report(error, level.get ( ));
 this. report ( error ) return;
 errorManager = getErrorManager(); errorManager.report(level, error);
 log. log(level, error);
 LOGGER.logError(level, error);
 report(level).throwInternalError(error);
errorManager.report(error.getCause(), level);
 reportErrors(level, error);
 reporter.logError(level, error);
 LOGGER.log(level, message, error);
 report(level, error); else { reporter.report(level, error);
errorManager.report(level, error.message());
 errorManager =
 logError(level, error);
 reporter. report ( error ) ; reporter. log(level, error);
 setError(error);
errorManager.report(error, level.warnings);
 errorManager = LevelManager.createManager(error);
 if (report) {
 errorManager = errorManager ; errorManager.report(level, error);
errorManager.report(error.getCause( ));
 errorManager = getErrorManager ( level ).report(level, error);
 reporter. report ( error ) return;
 logger.log(level.message, error);
 log. getLogger ( ).report(level, error);
 LOGGER.log(level.name, error);
 logger.log("Reporting error: "+level, error);
 if (error) {
 reporter = level ;
errorManager.report(level, error.class, error);
 reporter. add ( error ) ; reporter.report(level, error);
 errorManager.report(level);;
 errorManager = LevelManager.getManager(error);
 errorManager = getErrorManagerInstance ( ).report(level, error);
errorManager.report(level.name(), null, error);
 log.error(level, error);
 logger.log("Reporting error: {}",level, error);
 report(newLevel);
 logger.log(level, error.message, error);
 logger.log(level.name(), null, error);
 logger.log(level, " ", error);
 report(level); }
 log.log("Reporting error: "+level, error);
 logger.reportError(error);
 log.log("Reporting error: {}",level, error);
 level = level.level(error);
 logger.getLogger ( ).log(level, error);
 LOGGER.log.error(level, error);
 errorManager = level.errorManager(error);
errorManager.report(level, error) return false;
 errorManager = ErrorManager.newErrorManager(level, error);
errorManager.report(level,  error).report();
 logger.log.error(level, error);
 errorManager = level.setError(error);
 report(level, error); errorManager.report(level, error);
 log. getLevel ( ).report(level, error);
 errorManager = level.getManager(error);
 LOGGER.log(level.message, error);
 logger.log(level, error); reportError(level, error);
 logger.logError(level, error);
errorManager.report(error, level.value( ));
errorManager.report(error, level, this);
 log.error(error);
errorManager. report ( this ) ;
errorManager. report ( ;
 this. report ( level. name + ":error);
 errorManager.report(level).report(error);
 ParserRunner.report(level, error);
 report(level, error); super.report(level, error);
 reporter. getLogger ( ).report(level, error);
 errorManager.reportInternalError(error);
 error.report( );
 logger.log("Report: {} {}",level, error);
 errorManager.report(level);
 setError(level, error);
 report(level);;
errorManager.report(JSError message, level, error);
errorManager = null
errorManager.report(level, error.cause(), error);
 report(level, error); } log(level, error);
 report(level, error); }
 report(level); return;
errorManager.report(level.levelName, error);
errorManager.report(error, level.levelName);
 report = true;
 errorManager.setLevel(level); return
errorManager.report(level,  error.getMessage()); }
 reportInternal(level, error);
 errorManager.reportError(level, error);
 report(error, level;
 reporter. report ( error ) ; log. log(level, error);
 errorManager.report(level;
 logError(error);
 LOGGER.logIf(level, error);
 this.
 logger.log(level.error);
 errorManager = ErrorManager.createManager(level, error);
 errorManager.reportError(level.level, error);
 reporter.error(level, error);
 errorManager = ErrorManager.create(level, error);
errorManager.report(level, error.warnings);
errorManager = null;
 errorManager = ErrorManager.newInstance(level, error);
 this.report(level,error);
errorManager = { level ;
errorManager.report(jserror, level, error);
 reporter.report(error, level, guard);
errorManager.report(error, newLevel);
 errorManager = LevelManager.createLogger(error);
 logger.getLogger(name)().report(level, error);
errorManager.report(level); return false;
 logger.log("Reporting: {}",level, error);
 JSEvent.report(level, error);
 report(level, error); return report(level, error);
 errorManager.report(level.error);
 logger.log("Report: {}",level, error);
 logger.log("Reporting: "+level, error);
 logger.log(logLevel, error);
 errorManager = this.
 log.logIf(level, error);
 errorManager.reportInternalError(level, error);
errorManager.reportError();
 error.report();
 reporter.report(errorManager.level, error);
 if (report()) {
 reportWarnings(level, error);
errorManager.report(level); return true;
 this. report ( level. name + "\nerror);
 reporter.reportInternalError(level, error);
 logger.getLogger(name).report(level, error);
 reporter.report(error, level, this);
 logger.getLoggerClass( ).report(level, error);
 if (report)
 errorManager = ErrorManager.report(level, error);
errorManager.report(level.level, error);
 throw error;
 log.log("Report: {}",level, error);
errorManager.report(error, level.value()));
errorManager.report(level); return;
errorManager.report(level, error) return true;
 errorManager. reporter ( ).report(level, error);
 reportAll(level);
 error = error ;
errorManager.report(level, reporter, error);
 errorManager = errorManager.report(level, error);
 logger.log(logMessage);
 log.log(logLevel, error);
 errorManager. getReporting ( ).report(level, error);
 report(level); } else report(level, error);
errorManager.report(level, error, options);
errorManager.report(level, error, parserConfig);
 report(level); } reportError(level, error);
errorManager.report error;
 reporter.report(logger, error);
 addError(error);
 doReport(error);
 error.getCause ( ).report(level, error);
errorManager.report(error, checkLevel);
 errorManager.report.error(error);
errorManager.report(JSError exception, level, error);
 this.getReport ( ).report(level, error);
errorManager.report(error, errorLevel);
 report(level, error); } else { _report(level, error);
errorManager.report(level, error, options_checkTypes);
errorManager.report(level, null, error);
errorManager.report(level, error.message); }
 report(level, error); else unreport(level, error);
errorManager.report error();
 reporter.report(checkLevel, error);
 reportException(level, error);
 errorManager.reportErrors(level, error);
errorManager.report(level), error);
 reporter.reportError(level);
 errorManager.reportWithLevel(level, error);
 this.errorReporter.report(level, error);
 errorHandler.report(level, error);
 report(level, error); else {report(level, error);
 log. logError(level, error);
 report(level, error); log.report(level, error);
 log.getLevel(level).report(level, error);
errorManager.report(level, error, options_.warningsGuard);
 this.checker.report(level, error);
errorManager.report(level, error.reason);
 checker.report(level, error);
 report(level, error); unreport(level, error);
errorManager.report(JSError type, level, error);
errorManager.report(logger, error);
errorManager.report(JSError code, level, error);
errorManager.report(level, error, this);
errorManager.report(level, error) throw error;
errorManager.report(level, error, options.checkTypes);
errorManager.report(level, error.cause);
 log.getLevel(log).report(level, error);
errorManager.report(error, reporterFactory);
errorManager.report(level, error, error.message);
errorManager.report(error.message, level, error);
 errorManager.reportErrorInternal(level, error);
 ErrorReporting.report(level, error);
errorManager.report(logger);
 errorManager.reportLogError(level, error);
 report(), error);
errorManager.report(level.errorNumber, error);
 error.report(); reporter.report(level, error);
errorManager.report(newLevel);
 report($);
 report(_, error);
errorManager.report(level, error.logger);
errorManager.report(levelName, error);
errorManager.report(compiler, options, level, error);
 this.errorReportingService.report(level, error);
errorManager.report(level, error, options_.warnings);
 this.reportManager.report(level, error);
 log(logLevel, error);
 this.errorHandler.report(level, error);
errorManager.report(level, error.errorMessage);
 error = null;
errorManager.report(level.errorCode, error);
 return error;
errorManager.report(null, null, level, error);
 reporterManager.report(level, error);
errorManager.report(level.logLevel, error);
 this.errorManager.report(level, error);
 report(levelName, error);
errorManager = this ;
 this.reportErrorInternal(level, error);
errorManager.report(level, parserConfig);
errorManager.report((int) 0, level, error);
errorManager.report(error, errorHandler);
 errorManager.reporting ( ).report(level, error);
errorManager.report(checkLevel, error);
 errorManager.reportException(level, error);
 ErrorReporter.report(level, error);
 errorReportingService.report(level, error);
 return this.reportManager.report(level, error);
errorManager.report(level, error, null, null);
 errorReport =
 error =
 return
 error(level, error);
 this_checker.report(level, error);
 this.report.report(level, error);
 reporter(level, error);
errorManager.report(level, error, error.class, options);
errorManager.report(this.name, level, error);
errorManager.report(level), error;
errorManager.report(level, error, errorHandler);
errorManager.report(options, reporter, level, error);
 errorManager.report()).report(level, error);
errorManager = this
errorManager.report(options.name, level, error);
 this_reporter.report(level, error);
 output(level, error);
errorManager.report(logger, level, error);
 this.reporter.report(level, error);
errorManager.report(level, error, options_.checkType);
errorManager.report ( error ) ; return
errorManager.report(compiler, reporter, level, error);
errorManager.report(level, error, error.cause(), this);
errorManager.report(warnings);
errorManager.report(level, error, error.cause, this);
 log.report(level, error);
 JSEclipse.report(level, error);
errorManager.report(level, errorMessage);
errorManager.report(checkLevel);
 errorHandler =
 errorManager.reporter.report(level, error);
errorManager.report(level, error, true, false);
 level.report(level, error);
 JSEr.report(level, error);
errorManager.report(this, error);
 logger.report(level, error);
errorManager.report(level, error, null, true);
 report(", error);
errorManager.report(message, level);
errorManager = {
errorManager.report(compiler, level, error);
errorManager.report(level, error, null, false);
errorManager.report(message, error);
 reporterService.report(level, error);
 report(();
errorManager.report(level, error, ctx);
errorManager ++ ;
errorManager.report(errorLevel);
 errorReporting =
errorManager.report(level, error) return;
 ErrorReport.
errorManager.report(log); }
 super.report(level, error);
errorManager.report(level, reporterFactory);
errorManager.report(level, errorReport);
errorManager.report(level, errorMsg);
errorManager.report(levels, error);
errorManager.report(parserConfig, level, error);
errorManager.report(checker, level, error);
errorManager.reporting();
errorManager.report(options, level, error);
errorManager.report(level, error, newLevel);
errorManager.log();
errorManager.report(errorLevel, error);
errorManager.report(level,  exception); }
errorManager.report(level, error, null);
errorManager.close();
errorManager.report(level, error, newError);
errorManager.report(errorHandler, level, error);
errorManager.report(log);
errorManager.report(level, error) break;
errorManager.report(level,  exception);
errorManager.report(level,  reporter); }
 reporting(level, error);
errorManager.reset();
 default:
errorManager.report(this, level, error);
errorManager.report(level, error, reporter);
errorManager.report(null, level, error);
errorManager.report(error, level, error);
errorManager.report(level, error, true);
errorManager.report(level,  this);
errorManager.report(config, level, error);
 reporting(error);
errorManager.report(level,  errors);
 error(error);
errorManager.report(level,  null);
errorManager.report(level); return
errorManager.report(level, error); return
errorManager.report(level, error) }
 throw
errorManager.report(level)); }
 add(level, error);
errorManager.report(log, error);
errorManager.report(null, error);
errorManager.report(parent, error);
