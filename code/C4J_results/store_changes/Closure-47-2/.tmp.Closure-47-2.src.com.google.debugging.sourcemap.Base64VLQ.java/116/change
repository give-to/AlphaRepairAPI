char c = in.next();
 char c();
 c = in.next();
 char c = next();
 c.next();
char  c = in. nextChar ( ) ;
char  c = in;
 char c = (char) in.next();
char c = in.next(shift); do {
 char c = in.read ( );
 char c = charIterator(in).next();
 char c = in.readChar();
 char c = in.next(); char c >>>= in.next();
 char c = in.current(); c = in.next();
 char c = in.nextChars();
char c = in. nextChar ( ) ; continuation = true ;
 char c = in.next(); c = in.next();
 char c = in.next(); c = c.next();
 char c = charIterator.next();
 char c = (char) (char)in.next();
 char c = in.getChar();
char  c = in. nextChar ( c ) ;
 char c = CharIterator.next();
char  c = in. current ( ) ;
 char c = in.read(1);
 char c = ' ';
 char c = in(shift);
char  c;
 char c = 0 ; c |= in.next();
 char c = in.next(); char c |= in.next();
 while (true) {
 char c = in.getNextChar();
char c = in.next() ; do {
 char c = in.charAt(0);
 char c = in.next(); char c <<= in.next();
 char c = in.next;
char  c = in. nextChar ( 0 ) ;
 char c = in.next(); char d= in.next();
 char c = in.nextChar(();
char c = in. nextChar ( ) ; continuation = false ;
 char c = in.next(); c = out.next();
 char c = in.char;
 char c = in.readChar;
 char c = in.getCurrent ( ).next();
 char c = in.char();
char c = in.nextChar(); if (c!= 0) {
 char c = nextChar();
 char c = in(result);
 char c = in.charIterator ( ).next();
char  c = in. getCurrentChar ( ) ;
 char c = in.nextChar().toString();
 char c = in.next(); char r= in.next();
 char c = 0; c= in.next();
 char c = decode(in);
 char c = in.nextCharAt(0);
 char c = in.next(); char c= in.next();
 char c = in. next(); result = result + (char << shift); shift = 0;
 char c = in.next(); char c >>= in.next();
 char c = (char)c; c=in.next();
char c =  in. read ( ) ; continuation = true ;
 char c ; c |= in.next();
char c = in.next() if (c!= 0) {
 char c = in.next(); char c ^= in.next();
 char c = in. next(); char c = in. next(); char c = in. next(); char c = in. next(); char
 char c = in.readUTF8 ( );
 char c = (CharSequence)in.next();
 char c = in.getIterator ( ).next();
 int c = in. read ( ) ;
 char c = _next();
char c = in.nextChar(shift); do {
 char c = in. next ( ) ; shift = shift + VLQ_BASE_SHIFT ; while (c!= 0)
 char c = (char) (byte)in.next();
 char c = in. next ( ) ; shift = shift + VLQ_BASE_SHIFT ; while (continuation) {
 char in.next();
char c  = in. nextChar ( ) ; do {
char c =  in. next ( ) ; continuation = true ;
 char c = in. next(); if ( c == 0 ) { result = result + (shift << shift); } else {
char  c = in [ shift ] ;
 char c = in. next ; continuation = c. continuation ; shift = c. shift ; do {
 char c = in. next ( ) ; if ( c == ' ' ) { result = result + c ; } else {
char c  = in. charAt ( shift ++ ) ;
char c = in. read ( ) ; if ( continuation ) {
 char c = in.charAt(shift);
 char c = in.next(); char s= in.next();
char c = in.next(shift); continuation = true;
 char c = in.c;
 char c = in. next(); if ( c == 0 ) { result = result + (shift << shift); shift = 0 ; }
 char c = (char) ((char)in.next();
 char c = in.charIterator(0).next();
 char c = in. next ( ) ; if ( c == ' ' ) { result = result + shift ; } else {
 char c = in. next ( ) ; continuation = c == c ; shift = shift + VLQ_SHIFT ;
 char c = in. next(); if ( c == 0 ) { result = result + (digit << shift); shift = 0;
 char c next();
 char c = in.nextChar(shift);
 char c = in.readUTF ( );
 Char c = in. next ( ) ;
 char c = in. next(); if ( c == 0 ) { result = result + (shift << shift); shift = shift ; }
 char c = (char)charIterator.next();
 CharSequence c= in.next();
 char c = (char)char)in.next();
char c = in.next() while (c!= 0) {
 char c = in.next(();
 char c = in.next.next();
 char c = in.readCharAt(0);
 char c = char next();
 char c = in.char(0);
 char c = in. next(); if ( c == 0 ) { result = result + shift ; } else {
 char c = in. next(); if ( c == 0 ) { result = result ; } else {
 char c = in. next ( ) ; if ( c == ' ' ) { result = c ; } else {
 char c = in.nextChar().toChar();
 char c);
 char c = in.nextCharAt(shift);
 char c = in. next(); if ( c == c ) { result = result + (shift << shift); shift = 0 ; }
char c = in.nextChar(); if (c!= 0)
 char c = in. next ( ) ; if ( c == ' ' ) { result += c ; continue ; }
 char c = in. next ( ) ; continuation = c == c ; shift = shift + VLQ_SIZE ;
 char c = in.next(); do {
 char c = in.next(); char shift= in.next();
 char c = in.next().toCharArray();
 char c = in. next ( ) ; if ( c == ' ' ) { result = c ; continue ; }
 char c = in. next(); if ( c == null ) { result = 0 ; } else {
 char c = in.nextChars(shift);
 while (hasNext) {
 char c = in. next(); if ( c == 0 ) { result = 0 ; } else {
 char c = in. next ( ) ; continuation = c == c ; shift = shift + VLQ_BASE_Shift
 char c = in. next ( ) ; shift = shift + VLQ_BASE_SHIFT ; while (c) { final
 if ( in. hasNext ( ) ) { result = result + shift ;
 if ( in. hasNext ( ) ) { if (continuation) {
char c =  in. nextChar ( ) ; continuation = true
 Char c = (Char) in.next();
 char c = in. next ( ) ; if ( c == ' ' ) { result += c ; continue ; } else {
 char c = in.char(shift);
char  c = in. current ;
 char c = in.nextCharSequence();
 char c = in. next ( ) ; continuation = c == c ; shift = shift + VLQ_Shift ;
 if (hasNext) {
 char c = in.getNextChars();
 char c = readChar();
 if ( in. hasNext ( ) ) { while (continuation) {
 char c = in.next(); char c2c = in.next();
 char c = in. next ( ) ; if ( c == ' ' ) { result = result + c ; continue ; } else {
char c = in.next(shift); continuation = false;
 byte c = in.read ( );
char c =  in. read ( ) ; continuation = false ;
 if ( in. hasNext ( ) ) { if ( continuation ) break ;
 char c = in. next ( ) ; if ( c == ' ' ) { result = result + shift ; continue ; } else {
 char c = in.char().next();
 byte c = (byte) in.next();
 char c = in.readChar(1);
 char c = in. next(); result = result + c ; shift = shift ; do {
 char c = in.nextChar().getValue();
 char c = in.next(); char bc = in.next();
 char c = in. next ( ) ; continuation = c == c ; shift = shift + VLQ_BASE_ ;
 char c = in.charAt(i);
 char c = in.nextChr();
char c = in.next() if (c!= null) {
 char c = in. next(); if ( c == 0 ) { break ; } else {
char c = in.next() while (c!= null) {
 char c = in.getCurrentChar (in.next();
 char c = in. next(); char c = in. next(); char c = in. next(); char c = in. next(); }
 char c = in.readUnsignedByte();
char c = in.nextChar(); if (c!= -1) {
 char c = in.nextCharArray ( );
char c = in.next() if (c == 0) { break; }
char c = in.next() if (c!= 0)
 char c = *in.next();
 char c = in. next ( ) ; continuation = c == c ; shift = shift + VLQ_BASE_SIZE
char c = in.next(shift); if (c!= 0) {
 char c = in.next(); char b64c = in.next();
 char c = in. next(); if ( c == 0 ) { result = result + c ; } else {
char c =  in. next ( ) ; continuation = false ;
 char c = in. next ( ) ; if ( c == ' ' ) { result = result + shift ; }
 Char char = (Char) in.next();
 char c = in.readUTF8Char();
 char c = in. next(); result = result + c ; shift = shift ; } do {
 char c = in.nextChar;
 char c = in.currentChar (in.next();
 char c = in.getCurrentChar()).next();
char c = in.nextChar(); if (c!= null) {
 char c = in. next ( ) ; continuation = c == c ; shift = shift ; } else {
 char c = CharIterator(in).next();
char c = in.next() ; if (c!= 0) {
 char c = in.getNext();
char  c = in char;
char c = in.next() while (c!= -1) {
 result = result + (digit << shift);
char c = in.next() while (continuation) {
 char c = in.in().next();
 char c = (Char char)in.next();
 char c = in.next(); char dc = in.next();
 char c = in. next(); result = result + c ; shift = shift + 1 ;
 char c = in.getCurrent();
 char c = in. next(); if ( c == 0 ) { result = 0 ; }
 char c = in. read ( ) ; do {
char c = in.next(shift); if (c!= 0)
 int c = in;
 char c = in.next(); char nc = in.next();
 char c = in.nextChar(shift).next();
 char c = (char)char(char)in.next();
 char c = in.next(); while {
 char c = in.nextChar().getChar();
char c = in.next() while (c!= null) { do {
 char c = in.next(); char lc = in.next();
 char c ; while (continuation) {c = in.next();
 if ( in. hasNext ( ) ) { result = 0 ;
 char c = in.charIterator(1).next();
 if (c);
 char c = 0 ; c ^= in.next();
char c = in.nextChar(); while (c!= 0) {
 char c = CharIterator.in.next();
 char c = in.readUTF8LE();
 if ( in. hasNext ( ) ) { if ( continuation ) { do {
 if (continuation) {
char c = in.read ( ) ; if (c!= 0)
 char c = in.nextCharData();
 char c = in.currentChar(in).next();
 char c = in.getChar;
 while ( hasNext ) { while ( continuation ) {
 char c = in.next(); shift = shift + 1 ; do {
 char c = getChar();
 char c = '\\' ; c= in.next();
char c = in.next(shift); if (c) {
 char c = next(();
 char c = (C char)in.next();
 char c = in.iter().next();
 char c = in. currentChar;
char c = in.next() if (c == 0) { continue; }
 char c = in.next().next();
 char c = in. currentChar();
char c = in.next(shift); if (c!= -1) {
 char c = charIterator(in)->next();
 char c = in.next(); loop(); do {
char c = in.nextChar(); if (c!= 0) break;
char c = in.next() if (c) {
 char c; c= in.next();
 char c = in. next ; continuation = c. continuation ; shift = c. shift ; } ;
 if ( in. hasNext ( ) ) { continuation = true ;
 result = result + in.next(); shift = 0;
 for (char c) {
 char c = in.curr;
 char c = (CharIterator)in.next();
 if ( in. hasNext ( ) ) { result += (char << shift); }
 if (in.next()) {
 char c = (char) (char) *in.next();
 char c = in.next(); char prev_c = in.next();
 result = result + in.next(); do {
 char c = in.getCurrent (in.next();
 char c = (char) *in.next();
char c = in.nextChar(); if (c == ' ') {
 char c = CharIterator.in().next();
 char c = (char)character)in.next();
char c = in.next() if (c!= 0) break;
 char c = in.next(); while (true)
 while (true) {
char c = in.next(); if (c!= null) {
char c = in.next(shift); if (c!= null) {
 if ( in. hasNext ( ) ) { result = result + (int)
char c = in.next() while (c!= 0)
char c = in.next() if (c == 0) { break }
char c = in.nextChar(); if (c!= null)
 while (hasNext()) { do {
 if ( in. hasNext ( ) ) { while ( continuation ) { final
char c = in.nextChar(); continuation = true ; do {
 char c = charIterator(in)#next();
 char c = in. nextChar ( ) ; final
 char c.next();
 char c = (Char)charIterator.next();
char c = in.next(c); if (c!= -1) {
char c = in.nextChar(); if (c!= ' ') {
 char c = in.next(); ++c = in.next();
char c = in.nextChar(); if (c!= c) {
 while ( hasNext ) { while ( shift > 0 ) {
 char c = in(0);
char c = in.charAt(shift); do {
 if (in.hasNext()) { final
 char c = read(in);
char c = in.next() if (c!= 0) { continue; }
 if ( in. hasNext ( ) ) { result += 1 ;
 char c = in.next(); shift++; do {
 char c = in.readchar;
 if ( in. hasNext ( ) ) { result = -1 ;
 char c ; if (continuation)c = in.next();
 char c = ' ' ; c |= in.next();
 char c = in.next(); loop do {
 char c = c; c |= in.next();
char c = in.read ( ) ; if (c!= null)
 char c = null; c= in.next();
char c = in.next() if (c!= null)
 char c ; while (continuation)c = in.next();
 if ( in. hasNext ( ) ) { continue ; }
 char c = in. next ( ) ; if ( c == 0 ) { result = result + shift ; } else
char c = in.next() if (c!= null) { do {
char c = in.next(shift); continuation =! continuation ;
char c = in.next(c); continuation = continuation ||!shift;
 char c = in. next ; continuation = c. continuation ; shift = c. shift ; final
 char c = -1;
 char c; do {c = in.next();
 if ( in. hasNext ( ) ) { result += (int) shift; }
 char c = (char)shift=in.next();
 Char c = CharIterator.next();
 while (shift > 0) {
char c = in.next() if (c!= null) break;
char c = in.next(shift); if (c!= null)
 char c = in. next ; continuation = c. continuation ; shift = c. shift ; }
 char c = in.data.next();
 char c = char[]in.next();
char c = in.next() while (c!= null)
 if (in.hasNext()) break;
 CharIterator c= in.next();
 char c = in.c.next();
char c = in.next() while (true) {
 CharIterator cc = in.next();
char c = in.next(shift); continuation = continuation ||!c;
 char c = in. next ( ) ; continuation = c == c ; shift = shift + 1 ; } ;
 while (continuation) {
 char c = (Char) *in.next();
 char c= in.first(); c= in.next();
 Char c = null; c= in.next();
char c = in.readChar(shift); do {
 char c = in.iter.next();
char  c = in();
 char c = in.next(); char c_c = in.next();
 char c = in. next(); if ( c == 0 ) { result = result + shift ; } }
 c = next();
 char c = in.in.next();
 char c = in.next(); while (shift)
 char c = (char)next();
char c = in.next(c);
char c = in.next() ; if (c!= 0)
 char c = int)in.next();
 char c = in. next ( ) ; continuation = c == c ; shift = shift ; break ; } ;
 char c = in char c;
 while (hasNext()) {
 char c = in.character;
 char c(0);
 char c = in.current (in.next();
 char c ; c ^= in.next();
 char c = next(_);
char c  = in. read ( ) ; continuation = true
 if ( in. hasNext ( ) ) { if ( continuation ) break ; }
 char c = ' ' ; c ^= in.next();
 char c = charIterator().next();
char c = in.next() if (c == '\\') {
 char c0;
 if ( in. hasNext ( ) ) { continuation = true
 char c = char)in.next();
 if ( in. hasNext ( ) ) { result = result + (shift); }
 CharSequence cc = in.next();
char c = in.next() while (c) {
 char c = in. next ( ) ; continuation = c == c ; shift = shift ; continue ; } ;
char c = in.next(shift); continuation = continuation & 0xff;
 while (true);
 char c = currentChar();
 continuation = true;
 char c = in.next(); char in_c = in.next();
char c  = in. next ( ) ; continuation = true
char c = in.next(shift); if (c!= 0) break;
 if ( in. hasNext ( ) ) { if ( continuation ) break ; final
 if (continuation)
 char c = (Char char) *in.next();
 char c = (char) (byte) *in.next();
 if ( in. hasNext ( ) ) { result = result + shift ; }
char c = in.nextChar(); continuation = continuation ||! continuation ;
char c = in.next() ; if (c!= 0) break;
char c  = in. read ( ) ; continuation = {
char c = in.next(shift); continuation = true ; do {
 char c = in. next ( ) ; continuation = c == c ; shift = shift ; continue ; }
 byte[][]c = in.next();
 if (continuation);
 char c = (in);
char c = in.next(shift); continuation = continuation == true;
char c = in.next(shift); continuation = continuation || false;
 while (hasNext()) { final
 char c = in. next ( ) ; continuation = c == c ; shift = shift + 1 ; }
 while ( hasNext ) { while ( continuation ) { final
char c = in.readChar(shift); continuation = true;
 char c = in.next(); nextc = in.next();
 char c = in.next(); --c = in.next();
 char c = in.get();
 char c = in.next(); while { final
 final char c = in.next();
 result = 0;
char c = in.nextChar(); if (c!= 0) { final
 if (hasNext) { final
 if (hasNext()) {
char c = in.next(c); continuation = continuation & 0xFF;
 if ( in. hasNext ( ) ) { result += (int) shift ; final
 result = result + shift ; do {
 char c ; continuation = true;c = in.next();
 char c = next($);
 char c = _in.next();
char c = in.charAt(shift + 1) ;
 char c = -1;c = in.next();
 char c = $1;
 while (true)
char c = in.nextCharSequence(shift);
 char c = 0; while (c = in.next();
 char c = "next();
char c = in.nextChar(shift); final
 if ( in. hasNext ( ) ) { shift = 0 ; }
char c = in.read (c);
 char c=(0);
 c = in;
char c = in.read (shift); do {
 if ( in. hasNext ( ) ) { result += shift ; }
 char c = char(in.next();
 char c = 0x00;c = in.next();
char c = in.readChar(8);
 char c(in);
 byte c = in;
char  c = (char);
 if (hasNext()) { final
 char c ; continuation = false;c = in.next();
 int c = -1;
 char c char=in.next();
 if ( continuation ) {
char c = in.charAt(shift) + 1;
 char c = char()in.next();
 char c = current();
char c = in.next(shift);
 char c =!in.next();
 char c; char c |= in.next();
 if ( continuation )
 result = result + (digit << shift); final
char c = in.nextChar(shift); continuation = true
 char c = --next();
 char c = charsIterator.next();
char c = in.next(charIterator); do {
char c = in.nextChar(shift); continuation = false
char c = in.next(shift); continuation = true
 char[][]c = in.next();
 byte c ; c |= in.next();
 char c = inIterator.next();
 char c = in.next(); loop(); {
char c = in.next(c); continuation = true;
char c = in.next(shift); continuation = false
char c = in.nextChar().toChar(shift);
 while (shift) {
 char c ++;
 byte [ ] c= in.next();
char c = in.read (char);
char c = in.next(shift); continuation = true ; final
char c = in.next(Shift); do {
 final CharIterator c= in.next();
 char c = c();
char c = in.next(shift) | 0;
 char c = read();
 byte c = in.next();
char c = in.readUTF(8);
char c = in.read ( ) ; if (c!= 0);
char c = in.charAt(shift); continuation = false
char c = in.charAt(shift); continuation = true
 result = result ;
 char c |= in.next();
 if continuation {
char c = in.next() - 1;
char  c = in; final
 char c(i);
 char c = ++shift;
 char c = in.next(); final
char c = in.next(uint8) ;
 int c = in.next();
 char c = cIterator.next();
 char c = in char();
char c = in.nextChar().toCharArray(); final
 char c = 0;
char c = in.next(shift); continuation = false ; final
char c = in.next(shift); final
char c = in.nextChar(); if (c!= 0);
char c = in.readChar(shift); final
 result ++ ;
 char = 0;
char c = in.next() | 0;
char c = in.next() if ( continuation )
char c = in.nextCharAt(shift); final
 char c = in.next(); while
char c = in.charAt(shift) ; final
 char c[]= in.next();
char c = in.next() while ( continuation )
char c = in.next() while (true)
 boolean continuation;
char c = in.readUTF(shift); final
 if (in);
 char c = in.next(); next
char c = in.nextChars(shift); final
 char = in.next();
char c = in.nextChar(); continuation = true ; final
char c = in.charAt(shift + 1); final
char c = in.nextCharSequence(); final
char c = in.nextChar(shift); {
 char [ ]c = in.next();
 char c = input;
char c = in.readChar(); final
char c = in.read(); final
 char c == in.next();
char c = in.next() do {
char c = in.next() while (shift)
 char _c = in.next();
char  c ; do {
char c = in.next() + 1;
 char c ++();
 char c0();
 CharSequence charc = in.next();
 CharSequence _c = in.next();
char  c --;
 if continuation {
 char c = 0; _c = in.next();
 char c = 0; cc = in.next();
char  c; final
 CharIterator _c = in.next();
 if continuation);
 int c;
 if (continuation);
 CharIterator nextc = in.next();
char c = in.next(int);
 byte c;
 result = 0
 result ++;
 c := in.next();
char c = in.next(false);
 char nextc = in.next();
char c = in.next(shift); {
char c = in.next() ; final
char c = in.next(char);
 byte c = 0; _c = in.next();
 char cc = in.next();
char c = in.next() do { final
char c = in.c();
 loop do {
 result = {
char  c; {
 String c = in.next();
 char c_next();
char c = in.next(charIterator); final
char c = in.char(); final
char c = in.nextChar(); {
 char ();
 int c);
 char bc = in.next();
 char uc = in.next();
char c = inc;
char c = in ch;
 result++; ;
 do {
 c_next();
char c = in.next(Shift); final
 character = in.next();
char c = in.next(false); final
char c = in.nextByte();
 Char c.next();
 c in.next();
 int digit;
 char iterator.next();
 int c();
char c =  in);
char c = in.next() + 1
 try {
 final
 byte c();
 try {
 boolean continuation();
char c = in.next() + 2
char c = in.next() ; {
 c=$in.next();
char  char;
 do {}
 try {}
 try {}
char c := in.next();
char c; in.next();
char c: in.next();
