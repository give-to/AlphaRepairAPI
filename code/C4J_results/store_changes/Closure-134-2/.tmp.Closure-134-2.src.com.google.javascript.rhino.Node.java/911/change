 sb.append("] [base line: ");
 } else {
 } else { sb.append("] [base line: ");
 sb.append(""] [base line: ");
 sb.append(");
 }
 sb.append(";
 sb.append"] [base line: ");
sb.append
sb.append();
 } sb.append("] [base line: ");
 sb.append);
sb.append("] [base lineno: ");
sb.append("] [base line:"
 } else if (printAnnotations) {
 if (printAnnotations) sb.append("] [base line: ");
 } if (printAnnotations) { sb.append("] [base line: ");
 sb.append("] [");
 } if (printAnnotations) sb.append("] [base line: ");
 } else
 } else sb.append("] [base line: ");
 if (printAnnotations) { sb.append("] [base line: ");
 if (printType) {
sb.append("] [base line: "); sb.append();
 sb.append;
 if (printType) sb.append("] [base line: ");
 } if (printType) sb.append("] [base line: ");
sb.append("] [base line: "); sb.append(");
sb.append("] [base line: "); sb.append(" ");
 } if (printType) {
 if (printAnnotations) {
sb.append("] [base line: "); sb.append("] ");
 sb.append(" ");
 sb.append("] [base line: "); lineno =
 } } else {
sb.append("] [base line: "); sb.append("] [");
 sb. append ( ). append("] [base line: ");
 sb.append("] [base: ";
 sb.append("] [""] [base line: ");
 } else if (printType) {
 } if (printAnnotations) {
 if (printType)
 sb. append ( ) +("] [base line: ");
 sb.append("] [base line;
 sb.append("] ");
 sb. append("] [base line: "); sb. append(sof.getBaseLine());
 sb. append("] [end line: "); sb. append(sof.getEndLine()); }
 sb.append("] ";
 sb. append("] [base: ");
 sb. append("] [end line: "); sb. append(sof.getEndLineno()); }
 sb.append("] [base line:";
 sb. append("] [base line: "); sb. append(sof.getBaseLine()); }
 sb. append("] [base line ");
 sb.append("] [";
 sb. append("] [end line: "); sb. append(sof.getEndLine());
 } else if (printAnnotations) sb.append("] [base line: ");
 sb. append("] [end length: "); sb. append(sof.getEndLength()); }
 sb. append("] [end line: "); sb. append(sof.getLine());
 sb. append("] [base line: "); sb. append(sof.getLine());
sb.append( "[base line: ");
 } else if (type == Token.TEXT) {
 } if (printType)
 sb. append("] [end length: "); sb. append(sof.getEndLength());
 } else if (type == Token.LINE) {
 sb. append("] [end line: "); sb. append(sof.getEndLineno());
 sb. append("] [base line: "); sb. append(sof.getBaseLine ( )));
 sb.append("] [base line ";
sb.append("] [base line: ",
 sb. append("] [base line: "); } else {
 sb.append("] [base ");
 sb. append("] [end line: "); sb. append(sof.getEndLineNumber() ) ;
 sbappend("] [base line: ");
 sb. append("] [end line: "); sb. append(sof.getEndLine()); } } else {
 sb. append(sof.getEncodedSourceEnd()); }
 sb. append("] [base line: "); sb. append(sof.baseLine());
 sb. append("] [end line: "); sb. append(sof.getEndLine()); if (printType)
 sb. append("] [base name: "); sb. append(sof.baseName());
 sb. append("] [end line: "); sb. append(sof.getEndLineNumber()); } else
 sb.append(" ";
 sb. append("] [end line: "); sb. append(sof.getEndLine()));
 sb. append("] [end line: "); sb. append(sof.getEndLine()); sb. append());
.append("] [base line: ");
 sb.append("] base: ";
 sb. append("] [base line: "); sb. append(baseLine());
 sb. append("] [end line: "); sb. append(sof.getEndLineNumber()); }
 sb. append("] [base name: "); sb. append(sof.getName());
 sb. append("] [end line: "); sb. append(sof.getEndLineNumber ( )));
 sb. append("] [end line: "); sb. append(sof.getEndLineNumber()); } else {
 } else if (type == Token.CHAR) {
sb.append( "[base line: "); lineno =
 sb.append("""] [base line: ");
 sb. append("] [end line: "); sb. append(getLineno()); }
 sb.append(("] [base line: ");
 sb. append(sof.getEncodedSourceLength()); }
 sb. append("] [end line: "); sb. append(sof.getLineNumber());
sb.append("] [base line: "); getLineno();
sb.append( "[base lineno: ");
 sb. append("] [base line: "); sb. append(sof.getBaseLineNumber ( )));
 sb. append ( sb. append("] [base line: ");
 if (printAnnotations) { } sb.append("] [base line: ");
 sb. append("] [base line: "); sb.append(");
 sb. append("] [base name: "); sb. append(sof.name());
 sb.append("] [base line: "); ");
 sb. append("] [end line: "); sb. append(sof.getEndLineNumber() - 1);
 sb. append("] [end line: "); sb. append(sof.getEndLine()); sb. append();
 sb. append("] [base line: "); sb. append(baseLineno());
 sb. append ( "] [base line: " ) ;
sb.append("] [base line: ") sof.getBaseLineNumber());
 sb.append("] base line: ";
 s.append("] [base line: ");
 sb.append("]"] [base line: ");
 sb.append(" [base line:"
 sb.append("] base: ");
 sb. append("] [end line: "); sb. append(sof.getEndLineNumber() - 1));
 sb. append("] [source line: "); sb.append(");
sb.append(] [base lineno: ");
 } else { return sb.append("] [base line: ");
 sb. append("] [base line: "); sb. append());
 sb. append("] [end line: "); sb. append(getLineNumber());
 sb. append("] [base line: "); sb. append();
 sb. append("] [end line: "); sb. append(getLineNumber()); }
 sb. append("] [base line: "); sb. append(baseLineNumber());
 sb. append("] [end line: "); sb. append(sof.getEndLine()); } if (append)
sb.append("] [base line: ") sof.getBaseLine());
sb.append([base line: ");
 sb.append(" [");
 sb. append("] [base line: "); sb. append(getLineNumber());
 sb.append("] [base lineno: "); ");
 sb. append("] [base name: "); sb. append(sof.base());
 sb. append ( "] [base line: "); sb. append ( "");
sb.append(] [base line: ");
 } } else if (printAnnotations) {
 sb. append("] [end line: "); sb. append(sof.getEndLine()); } else if (...)
sb.append("] [base line: ") getLineno();
 sb.append("] [base line: "); lineno +=
 sb. append(sof.getEncodedSourceStart()); }
 sb. append("] [base line: "); sb. append(getLine()));
 sb.append("] [line ");
 sb.append("] ["] [base line: ");
 sb. append("] [base line: "); } else
 } else if (type == Token.BASE) {
 } if (printType) { sb.append();
 sb. append("] [end line: "); sb. append(getLine ( )));
sb.append("] [base line: "); sb.append(baseLine());
 sb. append ( "] [base line: "); sb. append ( "" )
 sb.append("] [base line: : ");
 sb. append ( "] [base line: "); getLineno());
 } else if (type == Token.LINES) {
 } else if (type == Token.TEXT)
 sb. append('] [base line: ");
 sb. append("] [end line: "); sb. append(lineNumber());
 sb.append("] [base line:
 sb.append("] [" + type +"] [base line: ");
 else if (printAnnotations) sb.append("] [base line: ");
 sb. append("] [base line: "); getLineno();
 } if (print) sb.append("] [base line: ");
 sb. append(sof.getEncodedSourceEnd()); } else
 } else { sb. append (("] [base line: ");
 } else if (printType) sb.append("] [base line: ");
 sb. append ( "("] [base line: ");
 } if (printType sb.append("] [base line: ");
sb.append(] [base line: "); getLine ();
 sb. append ( ")" ). append("] [base line: ");
sb.append("] [base line: ") getLineno());
 } else { sb. append ( ) +("] [base line: ");
sb.append("] [base line: "+
sb.append("] [base line: "); sb.append("]" ;
sb.append("] [base line: "); sb.append(getLine()); }
 sb. append ( "] [base line: "); if (baseLine)
 } else if (type == Token.LINE)
sb.append(] [base line: "); lineno =
 sb.append(" line: ";
 } else if ( type == Token.BASE_LINE ) {
 } else if (type == Token.LINEAR) {
 sb(""] [base line: ");
 sb.append("] [base:"
 else if (printAnnotations) { sb.append("] [base line: ");
sb.append("] [base line: ") sof.getBaseLineNumber() ;
sb.append([base lineno: ");
 sb.append("] [line ";
 sb.append(" [";
 sb.append("] [base line: "); "");
 sb.append(" base: ";
 sb.append("] [base ";
 sb.append("] [" + ""] [base line: ");
 } else { sb. append("");
sb.append("] [base line: "); sb.append(getLine()));
 sb.append("]" + ""] [base line: ");
 sb("] [base line: ");
sb.append("] [base lineno: : ");
 } else if (type == Token.CHAR)
 } else if ( type == Token.BASELINE ) {
sb.append( "[base line: "); getLineno());
 + ""] [base line: ");
 } if (printSource) sb.append("] [base line: ");
sb.append( "[base line: "); getLine ();
sb.append( "[base line: "); lineno++;
sb.append( "[base line: "); getLineno();
 if (printSource) sb.append("] [base line: ");
sb.append("] [base line: -");
 } } else { sb.append("] [base line: ");
 sb.append("["] [base line: ");
 } } else if (printType) {
 } else if (printType)
 else { sb.append("] [base line: ");
 sb. append("] [base line: "); }
sb.append("] [base line: ") sof.getBaseLine();
 if (print) sb.append("] [base line: ");
sb.append("] [base line: "); sb.append(":");
 } else if ( type == Token.LINEARING ) {
 sb.append('] ");
sb.append("] [base line: "); if (printBaseLineno)
 sb.append("]" + "["] [base line: ");
 sb.append("]" + type + ""] [base line: ");
 sb.append("] [base lin: ");
 sb.append(' '); sb.append("] [base line: ");
 sb.append(' ');
 sb.append("] " +"] [base line: ");
sb.append("] [base line: "); sb.append("";
sb.append("] [base line: "); getLineno());
sb.append("] [base line: ") this.getBaseLineno());
 } else { sb. append_append("] [base line: ");
 sb +=("] [base line: ");
sb.append("] [base line: "); sb.append());
 sb.append("] ["""] [base line: ");
sb.append([base line: "); getLineno(");
sb.append("] [base line: ") sof.getBaseLineNumber() ");
 sb.append("] [base line: "); "" ;
 } else if (print) sb.append("] [base line: ");
 } else { sb. append();
sb.append( "[base line: "); lineno +=
sb.append( "[base line: \n");
sb.append(]" [base line: "); getLine ();
sb.append("] [base line: ") sof.getBaseLineNumber() -
sb.append( "] [base lineno: "));
sb.append("] [base line: ") sof.getBaseLine() -
sb.append("] [start line: ");
 } else if (printType sb.append("] [base line: ");
 sb.append("]" + type + "\"] [base line: ");
 } else { sb. append(" [source ");
 sb.append(" [base ");
 sb.append(": ");
sb.append( "] [base line: "));
sb.append( "[base line ");
sb.append( "[base line: "));
 if (!printAnnotations) sb.append("] [base line: ");
sb.append("] [base line: ") sof.getBaseLine: ");
 if (!printType) sb.append("] [base line: ");
sb.append( "[base line: "); ");
 sb.append(":";
 if (printType sb.append("] [base line: ");
 } else { sb. append(" " ;
sb.append("] [base line: "); sb.append("));
 } else if (sb.append("] [base line: ");
 if (printSource) {
 sb.append("] [" + "\"] [base line: ");
sb.append( "[base lineno: "));
sb.append("] [base line: ") getBaseLineno();
sb.append("] [base line: "); if (printBaseLine)
sb.append("] [base line: ") sof.getBaseLine() +
 sb.append("] [" + name +"] [base line: ");
 } if (print); sb.append("] [base line: ");
 if (printType) printType();
 sb.append("]" + type +"] [base line: ");
 +("] [base line: ");
sb.append("] [base line: ") getBaseLine() ;
sb.append(] [base line: \n");
 sb.append(" line ");
 sb.append("] [" + prefix +"] [base line: ");
 else if (printType) {
 } else { sb. append (. +("] [base line: ");
sb.append(] [base line ");
 } else if (sb).append("] [base line: ");
sb.append("] [base line: ") sof.getBaseLineNumber() + 1
 sb.append("] ""] [base line: ");
sb.append( "base line: ");
 sb.append(');
sb.append("] [base line: ") this.getBaseLineno();
sb.append([base line: "); getLine ();
sb.append("] [base line: ") getBaseLineno() -
sb.append("] [base line: ") if (baseLine!= null)
 } if (printSource) {
sb.append("] [base line: ") getBaseLineno());
sb.append([base line: "); getLine(");
sb.append(' [base line: ',
sb.append("] [base line: "); getLine ( ) ;
sb.append([base line ");
 if (printSource)
sb.append("] [base line: ") this.getLineNumber());
 sb+"] [base line: ");
sb.append( "[base line: " + line);
 sb. append(" " +("] [base line: ");
sb.append( "[base: ");
 if (printAnnotations) { }
sb.append("] [base line: ") getBaseLineno() +
 if (!printType)
sb.append(baseLine: ");
sb.append("] [base line: ") + getBaseLineno());
sb.append("] [base line: ") getBaseLineNumber();
sb.append("] [base line: "); if (printSource)
sb.append(getLineNumber());
 sb = sb.append("] [base line: ");
 sb. append_append("] [base line: ");
sb.append(] [base line: " + ();
 if (print); sb.append("] [base line: ");
sb.append("] [base line: ") getBaseLineNumber());
 sb. append("]("] [base line: ");
sb.append( "[base line: " + this);
sb.append("] [base line: "); getBaseLine() ;
 } if (printSource)
 if (printTypes) {
sb.append('] [");
 sb +="] [base line: ");
sb.append( "base line ");
sb.append(baseLineno);
sb.append());
 } if (append)
sb.append( ", ");
 sb. append ( )append("] [base line: ");
 + 1);
 line: ";
sb.append("] [base line: "); getLineNumber());
sb.append("] [base line: ") ");
 append(' ');
sb.append("] [base line: "); (int)
sb.append("] [base line: "); getLineNumber();
 printSource ();
 sb.append ";
sb.append("] [base line: "); set lineno();
sb.append("] [base line: ") lineno++;
 sb(" ");
 int lineno;
 int baseLineno;
sb.append("] [base line: ") (int)
sb.append("] [base line: ") lineno =
 } } sb.append("] [base line: ");
sb.append("] [base line: ") + 1;
sb.append("] [base line: ") lineno);
sb.append( "["));
 sb.append(';
sb.append("] [base line: ") getLineNumber());
 lineno ++;
 getLine ();
 sb += 1;
sb.append(baseLineno());
 else sb.append("] [base line: ");
 sb+("] [base line: ");
sb.append("] [base line: ") getLineNumber();
 sb( ");
sb.append(appendBaseLine);
 } else if {
 + "\"] [base line: ");
sb.append("));
sb.append("] [base line: "); -1 =
sb.append("] [base line: "); lineno++;
sb.append("] [base line: ") this.line();
 getDouble ();
sb.append( "[line ");
 if (printType))
 sbappend(");
 } }
 appendLine ();
 line ++;
 return ; } sb.append("] [base line: ");
 sb.append(_);
 return sb.append("] [base line: ");
 sb(' ");
sb.append(', ');
 sb. +="] [base line: ");
 } sb.append"] [base line: ");
 sb.="] [base line: ");
sb.append(baseLineNumber);
 int baseLine;
 printSource = false
 printSource);
 printSource = true
sb.append("] [base line: " + this);
 printType = true
 if (!print)sb.append("] [base line: ");
 + 1;
sb.append("] [base line: "; ");
 " ");
 if (print)b.append("] [base line: ");
 int base;
 append("] [base line: ");
 if (sb.append("] [base line: ");
sb.append("]);
sb.append([");
 sappend("] [base line: ");
 printType);
sb.append("] [base line: "); }
sb.append("] [base line: ") "");
 + 2);
 append(""] [base line: ");
 ++ i;
sb.append(,");
 + """] [base line: ");
sb.append("] [base line: ")" ;
 else {
sb.append("] [base line: "");
 line 0;
. +("] [base line: ");
 b.append("] [base line: ");
 sb.end("] [base line: ");
 } } else
 continue ; }
 sb. +("] [base line: ");
sb.append("] [base line: ") + "+
sb."append
 print("] [base line: ");
sb.append()
 sb_append("] [base line: ");
sb." +
 } rb.append("] [base line: ");
 } seb.append("] [base line: ");
 sb).append("] [base line: ");
 rb.append("] [base line: ");
 } cb.append("] [base line: ");
 nb.append("] [base line: ");
 seb.append("] [base line: ");
 cb.append("] [base line: ");
 });
