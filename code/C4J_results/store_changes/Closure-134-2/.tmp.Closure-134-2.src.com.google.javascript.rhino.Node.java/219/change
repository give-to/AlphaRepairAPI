case SYNTHETIC_BLOCK_PROP: return "synthetic";
 case Synthetic: return "synthetic";
case SYNTHETIC_BLOCK_PROP: return "block";
 case SYnthetic_PROP: return "synthetic";
case SYNTHETIC_BLOCK_PROP: return "syntaxblock";
 case IS_SYNTHETIC_BLOCK_PROP: return "synthetic";
case  SOURCEFILE:
 case SYnthetic:return "synthetic";
 case SYNTAX_PROP:return "synthetic";
 case SYNTHETIC_PROP: return "synthetic";
 case Symbol: return "synthetic";
 case synthetic: return"synthetic";
 case SYNETIC_PROP: return"synthetic";
case SYNTHETIC_BLOCK_PROP: return "syncblock";
 case SYNTHETIC:return "synthetic";
 case SYNTHETIC_PROPERTY: return "synthetic";
case SYNTHETIC_BLOCK_PROP: return "syntolicblock";
 case SYNTAX:return "synthetic";
case SYNTHETIC_BLOCK_PROP: return block;
 case SYnthetic_PROPERTY: return "synthetic";
case  SOURCE_PROP:
 case SYNETIC:return "synthetic";
 case SOURCEFILE_PROP: return "sourcefile"; case EMPTY_BLOCK: return "empty_block";
 case SYntheticPROP: return "synthetic";
case SYNTHETIC_BLOCK_PROP: return "symbol";
 case SYnthetic_NAME: return "synthetic";
case  SOURCE_FILE:
 case SYnthetic_PROP_PROP: return "synthetic";
 case SYNTHETIC_SYNTHETIC_BLOCK_PROP: return "synthetic";
 case SYNTAX_PROPERTY: return "synthetic";
case SYNTHETIC_BLOCK_PROP: return "symbolblock";
 case SYNTAXED_PROP: return "synthetic";
 case SOURCEFILE_PROP: return "sourcefile"; case EMPTY_BLOCK: return "emptyblock";
case SYNTHETIC_BLOCK_PROP: return "syntholicblock";
 case SYNCHRONIC_PROP:return "synthetic";
case SYNTHETIC_BLOCK_PROP: return "symblock";
 case SYNTAX_FILE_PROP: return "synthetic";
 case SYNETIC_PROPERTY: return "synthetic";
 case SYNTHON_PROP: return "synthetic";
case SYNTHETIC_BLOCK_PROP: return  "syntotic_block";
 case SYnthetic_FILE_PROP: return "synthetic";
 case SYNTHETIC_NAME: return"synthetic";
case SYNTHETIC_BLOCK_PROP: return "syntacticblock";
case SYNTHETIC_BLOCK_PROP: return "synthetic" case SOURCE_PROP:
 case SYNTAX_PATH_PROP: return "synthetic";
 case SOURCEFILE_PROP: return "sourcefile"; case EMPTY_BLOCK: return "empty_block"; case Symbol:
case SYNTHETIC_BLOCK_PROP: return "sync_block";
 case COMMENT_PROP: return "comment_props";
case SYNTHETIC_BLOCK_PROP: return  "syntolic_block";
 case SOURCEFILE_PROP: return "sourcefile"; case EMPTY_BLOCK: return "empty_blocked";
 case SYNETIC_NAME: return"synthetic";
 case SYNTAX_NAME: return"synthetic";
 case SOURCEFILE_PROP: return "sourcefile"; case EMPTY_STRING: return "empty_string";
 case SYnthetic_PROP: return \"synthetic";
 case EXTENDED_PROP: return "extended_props";
 case SOURCEFILE_PROP: return "sourcefile_props";
 case SOURCEFILE_PROP: return "sourcefile"; case EMPTY_STRING: return "emptystring";
 case SOURCEFILE_PROP: return "sourcefile"; case EMPTY_BLOCK: return "empty_block" case Symbol:
 case COMPUTED_PROP: return "computed_props";
 case COMPUTED_PROP: return "compute_props";
case  SOURCE_PROP: return "source";
 case SOURCEFILE_PROP: return "sourcefile"; case SOURCEFILE_PROP: return "source_file";
 case SOURCEFILE_PROP: return "sourcefile"; case EMPTY_BLOCK: return "empty_block; case Symbol:
 case SOURCE_PROP: case IS_SYNTHETIC_BLOCK_PROP: return "synthetic";
 case SOURCEFILE_PROP: return "sourcefile"; case EMPTY_FILE: return "empty_file";
 case SYNThetic:return "synthetic";
case SYNTHETIC_BLOCK_PROP: return "blocks";
case  METHOD_PROP: return "method";
 case SOURCEFILE_PROP: return "sourcefile"; case SOURCEFILE_PROP: return "sourcefile";
 case SYNTAX: return \"synthetic";
 case COMPUTED_PROP: return "computed";
 case SYNTHETIC_OR_SYNTHETIC_BLOCK_PROP: return "synthetic";
case SYNTHETIC_BLOCK_PROP: return "systemblock";
case  SCRIPT_PROP: return "script";
 case COMMENT_PROP: return "comment_property";
case  SOURCEFILE_NAME:
 case IS_SYNTHETIC_SYNTHETIC_BLOCK_PROP: return "synthetic";
 case SOURCEFILE_PROP: return "sourcefile"; case SYNTHETIC_NAME:
case  STRING_PROP: return "string";
case  SOURCEPROP:
 case METHOD_PROP: return "method_props";
 case SYntheticNAME: return "synthetic";
 case SYNTHIC_SYNTHETIC_BLOCK_PROP: return "synthetic";
 case EXTENDED_PROP: return "extended_properties";
 case SOURCEFILE_PROP: return "sourcefile"; case EMPTY_SYnthetic:
 case EXTENDED_PROP: return "extended_property";
 case SOURCEFILE_PROP: return "sourcefile"; case EMPTY_CLOCK: return "empty_block";
 case SYNTHETIC_PROP:: return "synthetic";
 case COMPUTED_PROP: return "computeed";
 case SOURCEFILE_PROP: return "sourcefile"; case IS_SYNTHIC:
 case SOURCEFILE_PROP: return "sourcefile"; case SYNTHETIC:
 case SCRIPT_PROP: case IS_SYNTHETIC_BLOCK_PROP: return "synthetic";
case SYNTHETIC_BLOCK_PROP: return "sync";
 case COMPUTED_PROP: return "compute_properties";
 case EXTENDED_PROP: return "extended";
case  SCRIPT_PROP:
case SYNTHETIC_BLOCK_PROP: return "syntax";
 case SOURCEFILE_PROP: return "sourcefile"; case IS_SYNTHETIC:
 case SOURCEFILE_PROP: return "sourcefile"; case EMPTY_BLOCK: return "empty_block_name";
 case SOURCEFILE_PROP: return "sourcefile"; case EMPTY_BLOCK:
 case COMPUTED_PROP: return "compute_procedure";
 case SOURCEFILE_PROP: return "sourcefile"; case SYnthetic:
 case SOURCEFILE_PROP: return "sourcefile"; case EMPTY_BLOCK: return "empty_block"; break;
 case COMMENT_PROP: return "comment";
 case _SYNTHETIC_BLOCK_PROP: return "synthetic";
 case SYnthetic: return \"synthetic";
 case SYNTHETETIC: return "synthetic";
 case SYnthetic_TYPE: return "synthetic";
 case Synthetic_PROP: return "synthetic";
case  SOURCEFILE_PROP:
 case SYNTHETIC_TYPE:return "synthetic";
case  SOURCEPROP: return "source";
 case SOURCEFILE_PROP: return "sourcefile"; case CLASS_PROP:
 case SYnthetic: return +"synthetic";
 case COMPUTED_PROP: return "compute_property";
 case SOURCEFILE_PROP: return "sourcefile"; case SYNTHIC:
 case SOURCEFILE_PROP: return "sourcefile"; case SYNTHETIC
 case SOURCEFILE_PROP: return "sourcefile"; case EMPTY_BLOCK_NAME:
 case SYNTAXPROP: return "synthetic";
 case SOURCEFILE_PROP: return "sourcesource_property";
case SYNTHETIC_BLOCK_PROP: return "synthetic" case SOURCEFILE:
 case SOURCEFILE_PROP: return "sourcefile"; case IS_SYnthetic:
 case SOURCEFILE_PROP: return "sourcefile"; case SYNTHETIC_FILE:
 case SOURCEFILE_PROP: return "sourcesource_file";
 case SOURCE_PROP: return "source_props";
 case SYNTAX_TYPE:return "synthetic";
 case SYNTHETIC: return \"synthetic";
 case COMMENT_PROP: return "comment_prop";
 case SOURCE_PROP: return "source;
 case METHOD_PROP: return "method_property";
case SYNTHETIC_BLOCK_PROP: return "synchronized";
case SYNTHETIC_BLOCK_PROP: return "synthetic" case SOURCE_FILE:
 case METHOD_PROP: return "method_name";
 case SYNETIC: return \"synthetic";
 case COMMENT_PROP: return "comment;
 case SOURCEFILE_PROP: return "sourcefile"; case EMPTY_BLOCK_ALL:
 case SCRIPT_PROP: return "script;
 case COMMENT: return "comment;
case  SOURCE_FILE_NAME:
 default: Kit.codeBug();
case  SOURCE_PROP: return source;
 case STRING_PROP: return "string;
case  STRING_PROP:
 case STRING: return "string;
 case IS_SYNTHIC_SYNTHETIC_BLOCK_PROP: return "synthetic";
 case SOURCEFILE_PROP: return "sourcefile"; case EMPTY_STREAM:
 case SYNTHETIC_AND_SYNTHETIC_BLOCK_PROP: return "synthetic";
 case COMMENT: return "comment";;
case  STRING_PROP: return string;
 case IS_SYNTHETIC or ISSYNTHETIC_BLOCK_PROP: return "synthetic";
 case SOURCEFILE_PROP: return "sourcefile"; case SYNTHET:
 case NTSTATIC: return"synthetic";
case SYNTHETIC_BLOCK_PROP: return "synthetic" case SOURCEPROP:
 case IS_SYNTHETIC | ISSYNTHETIC_BLOCK_PROP: return "synthetic";
 default: return "unknown";;
 case EXTENDED_PROP: return "extended_property"; case CLASS_NAME:
case SYNTHETIC_BLOCK_PROP: return symbol;
 case SOURCEFILE_PROP: return "sourcefile"; case SYNTIC:
 case SYNTHETETIC_SYNTHETIC_BLOCK_PROP: return "synthetic";
 case SOURCEFILE_PROP: return "sourcefile"; case SOURCEFILE:
 case COMPUTED_PROP: return "computed_property"; default: return "unknown_props";
 case STRING_PROP: return "string_props";
 case SOURCEFILE_PROP: return "sourcefile"; case EMPTY_BLOCK: return "empty_block"; case
 default: Kit.codeBug(); }
case SYNTHETIC_BLOCK_PROP: return "synthetic" case SOURCE_FILE_NAME:
 case SOURCEFILE_PROP: return "sourcefile"; case EMPTY_BLOCK: return "empty_blocked;
 case SOURCE_PROP: return "source_property"; case SOURCE_FILE_PROP:
 case SOURCEFILE_SYNTHETIC_BLOCK_PROP: return "synthetic";
 case COMPUTED_PROP: return "compute_properties";
 case COMPUTED_PROP: return "computed_property"; default: return "unknown_proto";
 case SYNCHROME:return "synthetic";
 case COMPUTED_PROP: return "component";
case SYNTHETIC_BLOCK_PROP: return "synthetic" case SCRIPT_PROP:
 case COMMENT_PROP:
 case SCRIPT: return "script;
 case SOURCEFILE_PROP: return "sourcefile"; case SYNThetic:
 case SYNTHON_SYNTHETIC_BLOCK_PROP: return "synthetic";
 case COMPUTED_PROP: return "comp";
 case SOURCE_PROP;
 default: return "unknown property";
 case SOURCEFILE_PROP: return "sourcefile"; case SYNTH:
 case SYNTAX_PROP: {return "synthetic";
 case SOURCE_PROP: return "sources_props";
case SYNTHETIC_BLOCK_PROP: return "synthetic" case SOURCE_BLOCK:
 case EXTENSION_PROP: return "extension_name"; default: Kit.codeBug(); }
 case SOURCEFILE_PROP: return "sourcefile"; case EMPTY_BLOCK: return "empty_block;" ;
case SYNTHETIC_BLOCK_PROP: return "synthetic" case SOURCE_PROP: return source;
 default: return "unknown_property;
 case SOURCE_PROP: return "source_property"; case SOURCE_FILE:
 case STRICT_PROP: return "strrict_props";
 case SOURCE_PROP: case ISSYNTHETIC_BLOCK_PROP: return "synthetic";
 case METHOD_PROP: return "method_name"; case SOURCE_PROP:
case  SCRIPT_PROP: return script;
 case SOURCE_PROP: return "source_property"; case SOURCE_FILE_NAME:
 case CLASS_PROP:
 case SOURCE_PROP: return "source_name"; case SOURCE_FILE_PROP:
case  STRICT_PROP:
 case Synthesized: return "synthetic";
 case COMPUTED_PROP: return "computeable";
 case COMPUTED_PROP: return "computed_properties";
 case SOURCE_PROP: return "sourcesource"; case SOURCE_FILE_PROP:
 case SOURCE_PROP: return "source_property"; case SOURCEFILE_PROP:
 case SOURCEFILE_PROP: return "sourcefile"; case EMPTY_BLOCK: return "empty_block"; break
 case SOURCEFILE_PROP: return "sourcefile"; case EMPTY_BLOCK: return "empty_block"; break:
 case SOURCE_PROP: return "source_proto";
 case SOURCE_PROP: return "source_property"; case SOURCEFILE_NAME:
case  SOURCE_FILE_PROP:
 case ANALYZE_SYNTHETIC_BLOCK_PROP: return "synthetic";
 case COMMENT: return "comment";
 case SOURCE_PROP: return "source"; case SOURCE_FILE:
 case SYNTHONYMIC_SYNTHETIC_BLOCK_PROP: return "synthetic";
 case SOURCE_PROP: return "source_property"; case SOURCEFILE:
 case SOURCE_PROP: case _SYNTHETIC_BLOCK_PROP: return "synthetic";
case  sourcefile:
 case COMPUTED_PROP: return "computed_property"; default: Kit.codeBug('');
 case SYNC:return "synthetic";
case SYNTHETIC_BLOCK_PROP: return "synthetic" ; case SOURCE_PROP:
 default: return "unknown_props";
 case COMPUTED_PROP: return "compute_state";
 case SOURCE_PROP: return "source_name"; case SOURCE_FILE_NAME:
 case STRING_PROP: return "string_property"; case SOURCE_FILE:
 case DEFAULT_SYNTHETIC_BLOCK_PROP: return "synthetic";
 case STRING_PROP;
 case SOURCE_PROP: return "sourcesource"; case SOURCE_PROP: return source;
 case COMMENT_PROP: return "comment_property"; case SOURCE_PROP:
case  SCRIPT_FILE_NAME:
 case SOURCE_PROP: return "source" case SOURCEFILE:
 case SOURCE_FILE;
case  STRICT_PROPER_PROP:
 case ANONYMOUS_SYNTHETIC_BLOCK_PROP: return "synthetic";
 default: return "unknown_proto";
 case SOURCE_PROP: return "source"; case SOURCEFILE_PROP:
 case SOURCE_PROP: return "source_property"; case SOURCE_PROP:
case  STRING:
case  STRING_PROP: return "strings";
 default: return "unknown";
 case METHOD_PROP: return "method_name"; case SOURCE_FILE:
 default: return "unknown type";
 case SOURCE_PROP: return "source"; case SOURCE_FILE_NAME:
case SYNTHETIC_BLOCK_PROP: return "";
 case SOURCEFILE_PROP: return "source_file_props";
case SYNTHETIC_BLOCK_PROP: return "synthetic" case SOURCE_BLOCK_NAME:
 case STRICT_PROP: return "strrict"; case SOURCEPROP:
 case IS_SYNTHETIC_ISSYNTHETIC_BLOCK_PROP: return "synthetic";
 case SOURCEFILE_PROP: return "sourcefile"; case QUOTED_STRING:
 case SOURCEFILE_PROP: return "sourcefile"; case SOURCEFILE:
case SYNTHETIC_BLOCK_PROP: return "synthetic" case SOURCEFILE_BLOCK:
 return "quoted"; default: return "unknown";
case  SCRIPT_FILE:
 case EXTENDED_PROP: return "extended_property"; default: Kit.codeBug(...) }
 case STRICT: return "strrict;
 case SOURCE_PROP: return "source_property"; case SOURCE_FILE_PATH:
 case SYNTHETIC_UNSYNTHETIC_BLOCK_PROP: return "synthetic";
 case COMPUTED_PROP: return "computed_property"; default: Kit.codeBug(...) }
 case COMPUTED_PROP: return "computed_property"; default: Kit.codeBug(...) {
 case STRICT_PROP: return "strrict"; case SOURCE_FILE:
 case SOURCE_PROP: return "source_property"; case SOURCEFILE_PROPERTY:
 case IS_BLOCK:
 case EXTENDED_PROP: return "extended_property"; default: Kit.codeBug(...) {
case  SOURCE:
 case SOURCE_PROP: return "source_property"; case SOURCE_PROP_PROP:
 case COMMENT_PROP: return "comment_props"; default: Kit.codeBug(...) }
 case SOURCE_PROP: return "source_property"; case SOURCE_PROP: return source;
 case Synthetic: return \"synthetic";
 case SOURCEFILE;
 case EXTENSION_PROP: return "extension_name"; default: Kit.codeBug(); });
 case STRING_PROP: return "string_to_proto";
 default: return "unknown_type;
 else: return "unknown_props";
 case SYNOPSY: return "synthetic";
 else: return "unknown_proto";
 default: return null;
 case SYntheticTYPE: return "synthetic";
 case STRING_PROP: return "string_to_props";
 case STRING: return "string";
 case SOURCE_PROP: return "source_property"; case SOURCE:
 case SOURCEFILE:
 case SYNTHETICSYNTHETIC_BLOCK_PROP: return "synthetic";
 case STRING: return "stringify;
 case SYN: return"synthetic";
 case COMMENT: return comment;
case SYNTHETIC_BLOCK_PROP: return "synthetic" or "synthetic_block";
 case STRING_PROP: return "";
 default: return "unknown";
 case SOURCEFILE_OR_SYNTHETIC_BLOCK_PROP: return "synthetic";
 return "quoted";
 case SOURCE_PROP: return "sourcesource"; case SOURCE_PROP: return "";
 case SCRIPT_NAME: return "script;
 case STRICT: return "strict";;
 case SYSTEM: return"synthetic";
 case TEXT_PROP;
 case CLASS_NAME:
case  SCRIPT_NAME:
 case STRICT_PROP: return strictprop;
 case NON_SYNTHETIC_BLOCK_PROP: return "synthetic";
 case SOURCE_SYNTHETIC_BLOCK_PROP: return "synthetic";
 default: return"synthetic";
 case SOURCEFILE_PROP: return "sourcefile"; case SCRIPTFILE:
 case SYNTHETIC_INSYNTHETIC_BLOCK_PROP: return "synthetic";
case SYNTHETIC_BLOCK_PROP: return "synthetic" case IS_BLOCK:
 case SOURCE_PROP: return "source_property"; case SOURCE_FILE_PROPS:
 case SYNOPS:return "synthetic";
 case STRING:
case  SOURCEFILE_STORE:
case SYNTHETIC_BLOCK_PROP: return "synthetic" case SOURCEBLOCK:
 default: return "unknown;
case  PROPS:
 case SOURCEPROP;
 case SOURCE_PROP: return "sourcesource"; case SOURCE_PROP: return source";
 case COMMENTING_PROP: return;
 case COMMENTING_PROP : break ;
 case SOURCE_PROP: return "source_props;
 case COMPUTED_PROP: return "compute_procedure;"
case SYNTHETIC_BLOCK_PROP: return "synthetic" ; default : return "unknown block" ; }
 case EXTENDED_PROP: return "extended_props;"
case SYNTHETIC_BLOCK_PROP: return namespace;
case  PROP:
case SYNTHETIC_BLOCK_PROP: return null;
 case SOURCE_PROP: return "source_property"; case SOURCE;
 case SOURCE_FILE:
 case SOURCE_PROP: return "source_property"; case SOURCEFILE_NAME,
 return "quoted"; default: return "Unknown";
 case STRICT_STRICT_SYNTHETIC_BLOCK_PROP: return "synthetic";
 case COMPUTED_PROP: return "compute_procedure;
case SYNTHETIC_BLOCK_PROP: return "blocking";
 case PROP:
case SYNTHETIC_BLOCK_PROP: return "synthetic" ; default : Kit.codeBug(); }
 case EXTENDED_PROP: return "extended_props");
 case STRICT:
case SYNTHETIC_BLOCK_PROP: return "static";
 case UNIQUE_SYNTHETIC_BLOCK_PROP: return "synthetic";
 case COMMENT_SYNTHETIC_BLOCK_PROP: return "synthetic";
 case UNKNOWN_SYNTHETIC_BLOCK_PROP: return "synthetic";
 case SyntheticName: return "synthetic";
 default: Kit.codeBug(); });
 case COMPUTED_PROP: return "compute_procedure");
 case SYNTHETIC|SYNTHETIC_BLOCK_PROP: return "synthetic";
case SYNTHETIC_BLOCK_PROP: return "synthetic" case "sourceblock";
 case SYNTHETIC.SYNTHETIC_BLOCK_PROP: return "synthetic";
case SYNTHETIC_BLOCK_PROP: return "synthetic" case SOURCE_NAME:
 case QUOTED_PROP: return "quoted_props"; }
case  NAME:
 case BLOCK:
 case SOURCE_PROP: return "source"; case SOURCE_FILE;
 case MEMBER_SYNTHETIC_BLOCK_PROP: return "synthetic";
 case synthetic:"synthetic";
case  SCRIPTFILE:
case  FILE:
 case NAME: return"synthetic";
 case MIXED_SYNTHETIC_BLOCK_PROP: return "synthetic";
case SYNTHETIC_BLOCK_PROP: return "synthetic" case SOURCE_PROP: return source";
 case MAPPED_SYNTHETIC_BLOCK_PROP: return "synthetic";
 case PROPS:
 case STRING_TYPE;
 case NTSTAT:return "synthetic";
 default: break;
 case STRING_PROP: return "string_to_proto;"
case  IS_FILE:
 default: return '"synthetic";
 case CLASS_REF:
case SYNTHETIC_BLOCK_PROP: return "synthetic" case SCRIPTFILE:
case SYNTHETIC_BLOCK_PROP: return "syntolicblock;"
 default: #"synthetic";
 default: null;
case SYNTHETIC_BLOCK_PROP: return "syntolicblock;
 case Symbol::"synthetic";
case SYNTHETIC_BLOCK_PROP: return "synthetic" case SOURCE_PROP: return source,
 case IS_OR_SYNTHETIC_BLOCK_PROP: return "synthetic";
 case USE_SYNTHETIC_BLOCK_PROP: return "synthetic";
case SYNTHETIC_BLOCK_PROP: return "synthetic" for "block";
 return "quoted"; default: return "unknown");
 case "string";;
 case "quoted";
case SYNTHETIC_BLOCK_PROP: return "syntotic_block;
case SYNTHETIC_BLOCK_PROP: return "syntholicblock;"
 case COMMENT_PROP: return "comment;"
 case NO_SYNTHETIC_BLOCK_PROP: return "synthetic";
case SYNTHETIC_BLOCK_PROP: return "synthetic" ; default : Kit.codeBug(); {
 case "empty";;
 default: throw "unknown property"; }
case  SOURCE_FILE_PROPS:
case  CLASS:
case SYNTHETIC_BLOCK_PROP: return "synthetic" block_properties;
case SYNTHETIC_BLOCK_PROP: return "synthetic" block_property;
case  STRING_PROP: return;
 default: Kit.codeBug;
 case __SYNTHETIC_BLOCK_PROP: return "synthetic";
case SYNTHETIC_BLOCK_PROP: return "synthetic" block_name;
 case ISSYNTHETIC_BLOCK_PROP: return "synthetic";
 default: return "unknown property"; }
case  SPEC:
 default: return "unknown_property"; }
 case *SYNTHETIC_BLOCK_PROP: return "synthetic";
case SYNTHETIC_BLOCK_PROP: return  "synthetic_block_property"; case
 case "comment";;
case SYNTHETIC_BLOCK_PROP: return "synthetic" case SOURCE_BLOCK_NAME;
case SYNTHETIC_BLOCK_PROP: return  "synthotic_blocked"; case
case SYNTHETIC_BLOCK_PROP: return  "synthetic_blocked"; case
case  SCRIPT_PROP: return;
case SYNTHETIC_BLOCK_PROP: return "synthetic_block"; case
 case Synthetic::return "synthetic";
case SYNTHETIC_BLOCK_PROP: return  "synthotic_blocked"; }
case SYNTHETIC_BLOCK_PROP: return  "synthetic_block_property"; }
case SYNTHETIC_BLOCK_PROP: return  "synthetic_block_properties"; case
 case NOT_SYNTHETIC_BLOCK_PROP: return "synthetic";
case SYNTHETIC_BLOCK_PROP: return  "syntotic_blocked"; case
 default: return "unknown type"; }
case SYNTHETIC_BLOCK_PROP: return "syntactic_block"; case
case SYNTHETIC_BLOCK_PROP: return "synthetic" block_prop;
case SYNTHETIC_BLOCK_PROP: return  "syntactic_blocked"; case
case SYNTHETIC_BLOCK_PROP: return "syntholic_block"; case
 case NThetic: return "synthetic";
 case SPECIAL:return "synthetic";
case SYNTHETIC_BLOCK_PROP: return "synthotic_block"; case
case SYNTHETIC_BLOCK_PROP: return "syntactic_block"; }
case  source:
 case CLASS:return "synthetic";
 case CLASS:
 case Symbol:
 break ; }
case  SOURCEFILE_PROP: switch
 default: continue;
 default: undefined;
case  SOURCEFILE():
 return null;
case SYNTHETIC_BLOCK_PROP: return "synthetic" case SOURCEFILE;
 break;
 case syntheticreturn "synthetic";
 break switch;
case SYNTHETIC_BLOCK_PROP: return;
 case \"synthetic";
 # default;
 case!"synthetic";
 # break;
 case :"synthetic";
 default: }
 return #"synthetic";
 case #"synthetic";
 case Symbolreturn "synthetic";
 # switch;
case SYNTHETIC_BLOCK_PROP(s):
case SYNTHETIC_BLOCK_PROP : break ;
case SYNTHETIC_BLOCK_PROP: {}
case SYNTHETIC_BLOCK_PROP: {
case SYNTHETIC_BLOCK_PROP: return "synthetic" block; case
 #:return "synthetic";
case SYNTHETIC_BLOCK_PROP: return "synthetic"block; }
case SYNTHETIC_BLOCK_PROP: return "synthetic"block"; case
case SYNTHETIC_BLOCK_PROP: switch
case SYNTHETIC_BLOCK_PROP: return "synthetic" ; }
 break:
case SYNTHETIC_BLOCK_PROP:  return [];
 },
 } }
case SYNTHETIC_BLOCK_PROP:  return";
case SYNTHETIC_BLOCK_PROP: return "synthetic"; case
case SYNTHETIC_BLOCK_PROP: return "synthetic""; case
case SYNTHETIC_BLOCK_PROP : #
case SYNTHETIC_BLOCK_PROP: return "synthetic""; }
case SYNTHETIC_BLOCK_PROP:::
 }
case SYNTHETIC_BLOCK_PROP(): return "synthetic";
case SYNTHETIC_BLOCK_PROP': return "synthetic";
case SYNTHETIC_BLOCK_PROP, return "synthetic";
