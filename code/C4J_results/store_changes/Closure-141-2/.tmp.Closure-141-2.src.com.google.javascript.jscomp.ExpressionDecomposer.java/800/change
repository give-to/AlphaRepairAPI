if  ( followingSideEffectsExist ) {
 if ( followingSideEffectsExist )
 if ( followingSideEffects ) {
if (followingSideEffectsExist)  return true;
 if (! followingSideEffectsExist ) return ;
if (followingSideEffectsExist && n instanceof Call) {
 if (inlined) {
 if (! followingSideEffectsExist ) {
if (followingSideEffectsExist)  { return true ; } else {
 if (followingSideEffectsPresent) {
if (followingSideEffectsExist)  { return true ; } } else {
 if (n.followingSideEffectsExist) {
 if ( followingSideEffectsExist ) return ;
 if ( n. getType ( ) == Token. CALL ) {
 if (! followingSideEffectsExist ) return true ;
if (n.getType() == Token.INLINE) {
 if (! followingSideEffectsExist ) return false ;
if (followingSideEffectsExist && n. isCall ( ) ) {
if (followingSideEffectsExist && n!= null) {
 if ( followingSideEffectsExist == true ) {
 if ( n instanceof Call ) { return true ; } else {
if (followingSideEffectsExist)  { return true ; }
if (n.getType() == Token.NAME) {
 return isExpressionTreeUnsafe(n, this.knownConstants); } else
 if (! followingSideEffectsExist ) { return true ; }
 if ( followingSideEffectsExist{
 if (! followingSideEffectsExist ) { return false ; }
if (followingSideEffectsExist || n instanceof Call) {
 return n. isCall ( ) ; if(followingSideEffectsExist) {
 return!isExpressionTreeUnsafe(n.getFirstChild(), n.getLastChild(), seenSideEffects); } else
 return isExpressionTreeUnsafe(n, seenSideEffects);
 return!isExpressionTreeUnsafe(n.getFirstChild(), n.getLastChild(), seenSideEffects); }
 return isExpressionTreeUnsafe(n, this.knownConstants); }
 if (n &&!followingSideEffectsExist) {
if (followingSideEffectsExist)  { return false ; } } else {
 if ( n instanceof CallToInline ) {
 return isExpressionTreeUnsafe(n, followingSideEffectsExist);
 return isExpressionTreeUnsafe(n, seenSideEffects); }
 return isExpressionTreeUnsafe(n, this.knownConstants, seenSideEffects);
 return!isExpressionTreeUnsafe(n.getFirstChild(), n.getLastChild(), seenSideEffects);
if (followingSideEffectsExist)  { return false ; } else {
 if (! followingSideEffectsExist ) { return true ;
 return!isExpressionTreeUnsafe(n, this.knownConstants); } else
 return true; if(followingSideEffectsExist) {
 return!isExpressionTreeUnsafe(n, this.knownConstants); }
 return!isExpressionTreeUnsafe(n.getFirstChild(), seenSideEffects); } else
 if ( inline ) {
if (followingSideEffectsExist || n. isCall ( ) ) {
 if ( n. getType ( ) == Token. CALL )
 return!isExpressionTreeUnsafe(n, seenSideEffects); }
 return! isExpressionTreeUnsafe(n, seenSideEffects);
 return isExpressionTreeUnsafe(n, this.knownConstants);
 return!isExpressionTreeUnsafe(n.getFirstChild(), seenSideEffects); }
 return isExpressionTreeUnsafe(n, this.knownConstants, followingSideEffectsExist);
 if (! followingSideEffectsExist ) { return false ;
 return!isExpressionTreeUnsafe(n, followingSideEffectsExist);
 return isExpressionTreeUnsafe(n, this.knownConstants, seenSideEffects); }
 if ( n instanceof CallToInlineCall ) {
 if ( followingSideEffectsExist == false ) {
 if (n.isInline(true) {
 return true; } if(followingSideEffectsExist) {
 return!isExpressionTreeUnsafe(n, this.knownConstants); } private boolean canBeSideEffected();
if (followingSideEffectsExist && n!= this) {
 return isExpressionTreeUnsafe(n, this.knownConstants); } private boolean canBeSideEffected() {
 if ( followingSideEffectsExist! ) {
 if (FollowingSideEffectsExist) {
 return n instanceof Call; if(followingSideEffectsExist) {
 return!isExpressionTreeUnsafe(n, this.knownConstants); } private boolean canBeSideEffected() {
 if ( followingSideEffectsExist ) ) {
if (n.getType() == Token.INSERT) {
 return isExpressionTreeUnsafe(n, this.knownConstants); } private boolean canBeSideEffected();
 return!isExpressionTreeUnsafe(n, this.knownConstants);
 return isExpressionTreeUnsafe(n, this.knownConstants); } } else
if (followingSideEffectsExist && n.isCallInlined) {
 return! isExpressionTreeUnsafe(n); } else
if  ( {
 return n. isFunctionCall ( ) ; if(followingSideEffectsExist) {
 return n. isFunction ( ) ; if(followingSideEffectsExist) {
if (followingSideEffectsExist || n.isCallInlined) {
 if (behindSideEffects){
 return isExpressionTreeUnsafe(n, this.knownConstants); } private boolean canBeSideEffected;
 if (n.getType() == Token.followingSideEffectsExist) {
 if ( followingSideEffectsExist ) { {
 return!isExpressionTreeUnsafe(n.getFirstChild(), seenSideEffects); } } else
 return!isExpressionTreeUnsafe(n, this.knownConstants); } private boolean canBeSideEffected;
 return isExpressionTreeUnsafe(n); } else
 if (! followingSideEffectsExist ) return false ; else {
if (followingSideEffectsExist)  { return true ;
 return!isExpressionTreeUnsafe(n, this.knownConstants); } private boolean canBeSideEffected (...) {
 return isExpressionTreeUnsafe(n, this.knownConstants); } private boolean canBeSideEffected (...) {
if (followingSideEffectsExist && n. isFunction ( ) ) {
if (followingSideEffectsExist || n instanceof Name) {
 return isExpressionTreeUnsafe(n, this.knownConstants); } private boolean canBeSideEffects() {
 return!isExpressionTreeUnsafe(n, this.knownConstants); } private boolean canBeSideEffects();
 return!isExpressionTreeUnsafe(n, this.knownConstants); } private boolean canBeSideEffects (...) {
 if (n.isInlineCall) {
if (followingSideEffectsExist)  { return true ; } } } else {
 return! isExpressionTreeUnsafe(n); }
 return false; } if(followingSideEffectsExist) {
 return!isExpressionTreeUnsafe(n.getFirstChild(), n.getLastChild(), seenSideEffects); } } else
 return isExpressionTreeUnsafe(n, true); }
if (n.getType() == Token.FUNC) {
 if (! followingSideEffectsExist )
 return isExpressionTreeUnsafe(n, false); }
 return n. isCall ( ) ; } if(followingSideEffectsExist) {
if (n.getType() == Token.METHOD) {
 return isExpressionTreeUnsafe(n, this.knownConstants); } private boolean canBeSideEffects();
 if (! followingSideEffectsExist ( ) ) {
 return n. isCall ( ) ; if (!followingSideEffectsExist) {
 if (leadingSideEffectsExist) {
 return isExpressionTreeUnsafe ( n, followingSideEffectsExist )
 if (! followingSideEffectsExist ( n ) {
if (n.getType() == Token.USE) {
 return true; } else if(followingSideEffectsExist) {
if (followingSideEffectsExist && n. isInline ( ) ) {
 if (n instanceof Call) {
 if (! followingSideEffectsExist ) return true ; }
 return isExpressionTreeUnsafe(n, this.knownConstants, false); }
 if (next().x == n){
 return n instanceof CallStatement; if(followingSideEffectsExist) {
 if ( n. getType ( ) == Token. CALL {
if (followingSideEffectsExist)  { return false; }
 return isExpressionTreeUnsafe ( n, seenSideEffects )
 return!isExpressionTreeUnsafe(n, this.knownConstants); } } else
if (followingSideEffectsExist && n instanceof Name ) {
 return!isExpressionTreeUnsafe(n, this.knownConstants); } private boolean canBeSideEffected (() {
 if (n.isFunctionCall()&&followingSideEffectsExist) {
 if (n.isInline(...)) {
 if (n.isInline(true)){
 if (followSideEffects) {
 return!isExpressionTreeUnsafe(n, this.knownConstants); } else { return!isExpressionTree(n);
 return n. isCallable ( ) ; if(followingSideEffectsExist) {
 if (leadingSideEffects) {
 if (n.getType() == CallStatement) {
 if (n.isCallInlined) {
 if (FollowingSideEffectsExist{
if (followingSideEffectsExist && n. getType ( ) == Token.NAME) {
 return!isExpressionTreeUnsafe(n.getFirstChild(), n.getLastChild()); } public boolean isSafeCall() {
if (followingSideEffectsExist && n instanceof CallNode ) {
 return! isExpressionTreeUnsafe(n, true); }
 return! isExpressionTreeUnsafe(n, false); }
if (followingSideEffectsExist && n instanceof FunctionCall ) {
if (followingSideEffectsExist)  { return true ; } if ( recursive ) {
 return!isExpressionTreeUnsafe(n.getFirstChild(), n.getLastChild()); } private boolean canBeSideEffects();
if (followingSideEffectsExist)  { return true ; } else { return false ;
 return isExpressionTreeUnsafe(n, this.knownConstants); } private boolean isCall ( ) {
if  ( ) {
 return!isExpressionTreeUnsafe(n, this.knownConstants); } else { return!isExpressionTreeUnsafe;
 return isExpressionTreeUnsafe(n); }
if (followingSideEffectsExist ) { return true ; } }
 return isExpressionTreeUnsafe(n, this.knownConstants); } private boolean canBeSideEffects;
 return!isExpressionTreeUnsafe(n, this.knownConstants); } else { return!isExpressionTreeUnsafe();
if (followingSideEffectsExist || n!= null) {
if (followingSideEffectsExist)  { return false ; } if ( recursive ) {
 return false; } else if(followingSideEffectsExist) {
 if (n!= null) {
 return n. isCall ( ) ;
if (followingSideEffectsExist || n. getType ( ) == Token.NAME) {
 if (n.isInline(this) {
 return isExpressionTreeUnsafe ( n, true ) ;
 return n. isCall ( ) if (followingSideEffectsExist) {
 return!isExpressionTreeUnsafe(n.getFirstChild(), seenSideEffects); } } else {
if (followingSideEffectsExist && n.isInlined) {
 if (leadingSideEffectsPresent){
 if ( followsSideEffects ) {
if (followingSideEffectsExist && n.isInlineCall) {
 if (n.isInline(this)){
 return n. isFunctionCall ( ) ;
if (followingSideEffectsExist)  { return true ; } if ( implicit ) {
 return n. isCallNode ( ) ; if(followingSideEffectsExist) {
 if ( implicit ) {
if (n.getType() == Token.IMPORT) {
 if (n.getType() == Call){
 if (n.getType() ==!followingSideEffectsExist) {
 return isExpressionTreeUnsafe(n, this.knownConstants, seenSideEffects); else
if (n.getType() == Token.GET) {
 if ( recursive ) {
 return!isExpressionTreeUnsafe(n, this.knownConstants); } private boolean isSafe() {
 if (n.getType() == NodeCall) {
if (n.getType() == Token.UNSET) {
 if ( followsSideEffectsExist ) {
 if (next().x == foo())){
 if (n.getType() == FunctionCall) {
if (followingSideEffectsExist || n == this) {
 return n. isFunction ( ) ; if (!followingSideEffectsExist) {
 } else{
 if (n.getType()&&followingSideEffectsExist) {
 if (n.isInline( )) {
 if (*) {
if (followingSideEffectsExist && n instanceof CallStatement ) {
 return isExpressionTreeUnsafe ( n, this. knownConstants ) ; } } ; } else
 return n. isFunctionCall ; if (followingSideEffectsExist) {
 if (n).isUnsafe(followingSideEffectsExist) {
if (followingSideEffectsExist)  return true; } else {
 return false; if(followingSideEffectsExist) {
 if (n.getFirstChild!= null) {
 if (n.getFirstChild() == n) {
 return n instanceof CallNode; if(followingSideEffectsExist) {
if (followingSideEffectsExist)  return false;
 return!isExpressionTreeUnsafe(n.getFirstChild(), seenSideEffects); } } } else
 if (n.isFunction()&&followingSideEffectsExist) {
 if (next().x == foo()) {
 return n. isCallable ( ) ;
 return n!= null ; } if(followingSideEffectsExist) {
 NodeUtil.mayHaveSideEffects(followingSideEffectsExist) {
 return isExpressionTreeUnsafe(n, false);
 if (this.followingSideEffectsExist) {
if (followingSideEffectsExist)  { return false ; } if ( recursive )
 if (n.isCall(this)){
if (followingSideEffectsExist || n. getType ( ) == Token. CALL) {
 return isExpressionTreeUnsafe ( n, this. knownConstants ) ; } } else { } else
if (followingSideEffectsExist && n. getType ( ) == Token. CALL) {
 if (n.getType() == CallTarget) {
 if (followSideEffectsPresent) {
 return n. isCall ( ) ; } else
 if (next().x) {
if (followingSideEffectsExist ) { return true ; } if ( ) {
 if (n) { if (followingSideEffectsExist) {
if (followingSideEffectsExist ) { return false ; } if ( ) {
if (followingSideEffectsExist)  { return true ; } if ( recursive )
 return!isExpressionTreeUnsafe(n, this.knownConstants); } else { } else
 if (n!= null&&followingSideEffectsExist) {
if (followingSideEffectsExist && n instanceof CallInline) {
 if (! followingSideEffectsExist ) { {
 if ( isCall ) {
 if ( followsSideEffectsExist )
 return isExpressionTreeUnsafe(n, this.knownConstants, followingSideEffectsExist)
if (followingSideEffectsExist || n.isInlineCall) {
if (followingSideEffectsExist!= true) {
if (followingSideEffectsExist || n.isCallToInline) {
 NodeUtil.mayHaveSideEffectsIf(followingSideEffectsExist) {
 return isExpressionTreeUnsafe ( n, this. knownConstants ) ; } } ; else
 return!isExpressionTreeUnsafe(n.getFirstChild(), seenSideEffects); } }
 if (n.getType()!==followingSideEffectsExist) {
if (followingSideEffectsExist && n.isCallToInline) {
 return n. isCall ( this ) ; }
 boolean affected = false ;
 return n. isFunction ( ) ; } if(followingSideEffectsExist) {
 if (n && n.followingSideEffectsExist) {
if (followingSideEffectsExist || n. getType ( ) == Token.USE) {
 return n. isCall ( this ) ; } else
if (followingSideEffectsExist || n.getFirstChild().isCall) {
if (followingSideEffectsExist || n.getFirstChild!= null) {
 if (n.contains(followingSideEffectsExist) {
if (followingSideEffectsExist && n. getType ( ) == Token.USE) {
 return n. isFunction ( ) ;
 return n. isFunctionCall ( ) ; }
 return!isExpressionTreeUnsafe(n.getFirstChild(), seenSideEffects); } else { else
if (followingSideEffectsExist && n.isInline(...)) {
if (followingSideEffectsExist || n.isInlined) {
 return n. isFunctionCall ( ) ; } else
 if (FollowingSideEffectsPresent) {
 return!isExpressionTreeUnsafe(n.getFirstChild(), seenSideEffects); } } ; else
 if (n == this.followingSideEffectsExist) {
 if (n!= null)
if (followingSideEffectsExist || n.getType() == Token.ASSIGN) {
 if (nextSideEffectsPresent) {
 if (n!= this) {
 if (n instanceof Func) {
 if ( hasEffects ) {
if (followingSideEffectsExist!= false) {
if (followingSideEffectsExist && n. getType ( ) == Token.METHOD) {
if (followingSideEffectsExist || n.getFirstChild() == n) {
if (followingSideEffectsExist)  { return false;
 if (n.isCall(this)) {
if (followingSideEffectsExist && n.getType() == Token.Moved) {
if (followingSideEffectsExist || n!= this) {
if (followingSideEffectsExist || n instanceof FunctionCall) {
 if ( hasSideEffects ) {
 NodeUtil.mayHaveSideEffects if(followingSideEffectsExist) {
if (followingSideEffectsExist || n.getFirstChild() == null) {
 if (n.getType()==followingSideEffectsExist) {
 return n. isCallable ( ) ; }
 if (inslined){
if (followingSideEffectsExist || n instanceof CallNode) {
 if (n.isFunctionCall();followingSideEffectsExist) {
if (followingSideEffectsExist || n instanceof CallStatement) {
 if ( leadingSideEffectsExist )
if (followingSideEffectsExist || n.isInline(...)) {
if (followingSideEffectsExist!== true) {
 if (n!==followingSideEffectsExist) {
 return false; } else
if (followingSideEffectsExist && n.getFirstChild().isCall) {
if (followingSideEffectsExist || n.getFirstChild()!= null) {
 if (inlineCall){
 if (n.hasChildren&&followingSideEffectsExist) {
if (followingSideEffectsExist || n.isSynthetic) {
if (followingSideEffectsExist && n.isSynthetic) {
if (followingSideEffectsExist || this.knownConstants) {
if (followingSideEffectsExist)  { return false ; } }
 if (debug){
 if (! followingSideEffectsPresent ) {
 return n instanceof CallStatement;
 return true; } else
if (followingSideEffectsExist && n.hasSideEffects()) {
if (followingSideEffectsExist || n.getFirstChild().isCallStatement) {
if (followingSideEffectsExist || n.getFirstChild().isCallNode) {
 return true;
if (followingSideEffectsExist || n.getFirstChild() == this) {
 if (FollowingSideEffectsExist!) {
if (followingSideEffectsExist && n instanceof Func) {
 if (n instanceof Call)
if (followingSideEffectsExist || n.getFirstChild == null) {
if (followingSideEffectsExist == true)
if (followingSideEffectsExist || n.getFirstChild == n) {
 return n instanceof CallStatement; } if(followingSideEffectsExist) {
if (followingSideEffectsExist ) return true ; else
if (followingSideEffectsExist)  { return true ; } else
if (followingSideEffectsExist && n.getFirstChild() == n) {
 if ( ignoreCall ) {
if (followingSideEffectsExist && n.isInlineCall ( )) {
 if (! followingSideEffectsExist ) return{
if (followingSideEffectsExist && n.isInlineCallTarget) {
if (followingSideEffectsExist || n.isCallInline) {
 return n. isCall ( ) ; }
if (followingSideEffectsExist || n.getFirstChild().isCallable) {
 return n instanceof Name; if(followingSideEffectsExist) {
 if (n.isUnsafe(followingSideEffectsExist) {
if (followingSideEffectsExist)  { return true ; } else { }
if (followingSideEffectsExist && n. getType ( ) == Identifier) {
 return n. isCall ( ) ; } } else
if (followingSideEffectsExist && n.getFirstChild()!= null) {
 return n. isFunction ( ) ; } } else
 return true; }
if (followingSideEffectsExist && n.getNext ( ) == n) {
 if (!){
 if (n.isNode(followingSideEffectsExist) {
 if (n.isNode().followingSideEffectsExist) {
if (followingSideEffectsExist!== false) {
 if (n.ok(followingSideEffectsExist) {
if (followingSideEffectsExist && n.getFirstChild().isCallNode) {
if (followingSideEffectsExist && n.getFirstChild().isCallStatement) {
 if ( optimize ) {
if  ) {
if (followingSideEffectsExist || n.isFunction (n) {
if (followingSideEffectsExist === true) {
 if ( ignore ) {
 if (!this.followingSideEffectsExist) {
 return false; }
if (followingSideEffectsExist)  return true; } } else {
 if (n&&followingSideEffectsExist) {
 if (n!= this)
if (followingSideEffectsExist!== {
 if ( next. x ) {
 if ( isFunction ) {
if  ( recursive )
 if (true){
 if(.){
 return n instanceof CallStatement ; }
 if (n).if(followingSideEffectsExist) {
 if (true)){
if (followingSideEffectsExist)  return true; }
 return false;
if (followingSideEffectsExist || n instanceof Function) {
 if (insline) {
 if (running){
 return true ; } } else
if (followingSideEffectsExist)  return true; } }
 return false ; } } else
if  ( following {
 return n. isCall ( ) ; else
if (followingSideEffectsExist && n instanceof Function) {
if (followingSideEffectsExist && n instanceof Node) {
if (followingSideEffectsExist || n instanceof Const) {
 } else if(followingSideEffectsExist) {
 return true if(followingSideEffectsExist) {
if  ( following )
 if (include) {
if (followingSideEffectsExist || seenSideEffects) {
if (followingSideEffectsExist && n instanceof Const) {
if (followingSideEffectsExist || n instanceof Node) {
if (followingSideEffectsExist && n == this) {
 if (impl) {
if  ( recursive {
 if (n!= null);
if (followingSideEffectsExist || n == null) {
if (followingSideEffectsExist && n!= n) {
 if (this) {
 } else
 if n.is(followingSideEffectsExist) {
 if (&) {
 } if (followingSideEffectsExist) {
if (followingSideEffectsExist && n!= node) {
 if (!{
if (followingSideEffectsExist && inlined) {
 return false if(followingSideEffectsExist) {
if (followingSideEffectsExist || inlined) {
 return true; else
if (followingSideEffectsExist &&!move) {
 if (!!followingSideEffectsExist) {
if (followingSideEffectsExist || isCall) {
if  following {
if (followingSideEffectsExist && isCall) {
 return ; if(followingSideEffectsExist) {
 } if (!followingSideEffectsExist) {
if  else {
if (insensitive) {
 { if(followingSideEffectsExist) {
if  this {
 } else {
if (followingSideEffectsExist || isFunction) {
if (followingSideEffectsExist &&!copy) {
if (followingSideEffectsExist ||!move) {
if (followingSideEffectsExist && not moved) {
if (followingSideEffectsExist)  { return }
if (followingSideEffectsExist || ignoreCall) {
if (followingSideEffectsExist)  return true
if (followingSideEffectsExist)  return false
if (followingSideEffectsExist)  continue;
 } }
if (followingSideEffectsExist()) {
 if (_followingSideEffectsExist) {
if (followingSideEffectsExist...) {
 else
 }
 while (followingSideEffectsExist) {
 } while(followingSideEffectsExist) {
 }If(followingSideEffectsExist) {
