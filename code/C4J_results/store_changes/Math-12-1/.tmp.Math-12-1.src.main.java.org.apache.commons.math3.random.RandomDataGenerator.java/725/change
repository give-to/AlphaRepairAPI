 }
 return rand ;
 } return rand ;
 }
 return rand ; }
 } return rand ; }
 } else { rand = new Well19937c ( System. currentTimeMillis ( ) ) ;
 } else { rand = new Well19937c ( System. currentTimeMillis ( ) ) ; }
 } else { rand = new Well19937c ( System. currentTimeMillis() + System.identityHashCode(this));
 } else { rand = new Well19937c ( System. currentTimeMillis() + System.identityHashCode()); }
 } else { rand = new Well19937c ( System. currentTimeMillis ( ) + System. identityHashCode ) ;
 } else { rand = new Well19937c ( System. currentTimeMillis ) ;
 } else { rand = new Well19937c ( System. currentTimeMillis() + System.identityHashCode());
 } return rand ;
 } else { rand = new Well19937c ( System. currentTimeMillis ( ) + System. identityHashCode ( ) )
 } return defaultRand ;
 } else { rand = new Well19937c ( System. currentTimeMillis() + System.identityHashCode()); } }
 } else { rand = new Well19937c ( System. currentTimeMillis ( ) )
 } else { rand = new Well19937c ( System. currentTimeMillis() + System.identityHashCode));
 } else { rand = new Well19937c ( System. currentTimeMillis ) ; }
 } return rand ; } else { secRand = SecureRandom. getInstance ( algorithm, provider ) ; } return secRand ;
 } else { rand = new Well19937c ( System. currentTimeMillis ( ) ;
 } return rand ; } else { secRand = SecureRandom. getInstance ( algorithm, provider ) ; } return secRand ; }
 } else { rand = new Well19937c ( System. currentTimeMillis ( ), provider ) ;
 return rand ; } return rand ;
 } else { rand = new Well19937c ( System. currentTimeMillis ( ) ) ; } }
 } else { rand = new Well19937c ( System. currentTimeMillis ) ; } return rand ;
 } return rand ; } else { secRand = SecureRandom. getInstance ( algorithm, provider ) ; return rand ;
 } return rand ; } else { secRand = SecureRandom. getInstance ( algorithm, provider ) ; }
 } else { rand = new Well19937c(System.currentTimeMillis() + System.identityHash());
 } else { rand = new Well19937c ( System. currentTimeMillis ( ), this ) ;
 } return rand ; } else { secRand = SecureRandom. getInstance ( algorithm, provider ) ;
 } } else { rand = new Well19937c ( System. currentTimeMillis ) ;
 } else { rand = new Well19937c ( System. currentTimeMillis ( this ) ) ;
 } return rand ; } else { secRand = SecureRandom. getInstance ( algorithm, provider ) ; } }
 } else { rand = new Well19937c ( System. currentTimeMillis ( ), this ) ; }
 } else { rand = new Well19937c ( System. currentTimeMillis ) ; return rand ;
 } return rand ; } return secRand ;
 } else { secRand = SecureRandom. getInstance ( algorithm, provider ) ; } return secRand ; } ;
 return rand ; } return secRand ;
 } else { rand = new Well19937c ( System. currentTimeMillis() + System.random()); }
 } else { rand = new Well19937c ( System. currentTimeMillis() + System.randomUID()); }
 return rand ; } } ;
 } else { rand = new Well19937c ( System. INSTANCE ) ;
 } else { rand = new Well19937c ( System. currentTime ( ) ;
 } else { rand = new Well19937c ( System. currentTime ( ) )
 } else { rand = new Well19937c ( System. currentTimeMillis() + System.random()));
 } else { rand = new Well19937c(System.currentTimeMillis() + this); }
 } else { rand = new Well19937c ( this ) ; } return rand ;
 } return rand ; } else { secRand = SecureRandom. getInstance ( algorithm, provider ) ; return secRand ; } return rand ;
 } else { rand = new Well19937c ( System. currentTime ( ) ) ;
 } return rand ; } else { secRand = SecureRandom. getInstance ( algorithm, provider ) ; } return secRand ; } ) ;
 } return rand ; } else { secRand = SecureRandom. getInstance ( algorithm, provider ) ; return secRand ; } return null ;
 } return initRan ;
 } if ( rand == null ) { rand = new Random ( ) ;
 } return rand ; } else { secRand = SecureRandom. getInstance ( algorithm, provider ) ; } return secRand ; } } ;
 } return rand ; } return rand ;
 return rand ; } private RandomGenerator rand = null ;
 } else { rand = new Well19937c ( System. in ( ) ) ;
 } else { rand = new Well19937c ( System. random ( ) ) ;
 } if ( rand == null ) { rand = Random. current ( ) ;
 } return rand ; } else { secRand = new SecureRandom ( algorithm, provider ) ; } return secRand. getRandom ( ) ;
 } if ( rand == null ) { initRan ( ) ;
 } return rand ; } private RandomGenerator secRand = null ;
 return rand ; } return defaultRand ;
 } else { rand = new Well19937c ( this ) ; } return rand ; }
 return rand ; } private RandomGenerator secRand = null ;
 } else { rand = new Well19937c ( System. currentTimeMillis ( ) ; }
 } else { rand = new Well19937c ( this ) ; return rand ;
 return rand ; } return initRan ;
 return rand ; } else { rand = new Well19937c ( this ) ;
 } else { rand = new Well19937c(System.currentTimeMillis() + this));
 return rand ; } else { rand = new Random ( ) ;
 } if ( rand == null ) { initRand ( ) ;
 } if ( rand == null ) { initRan ( ) ; }
 return rand ; } else { rand = new Random ( ) ; }
 } } else { rand = new Well19937c ( System. currentTime ( ) )
 } if ( rand == null ) { rand = new Random ( ) ; }
 } if ( rand == null ) { rand = new Random ( seed ) ;
 } return rand ; } ;
 } return rand ; } private RandomGenerator secRand ;
 return rand ; } return rand ; } return secRand ;
 return rand ; } private RandomGenerator secRand ;
 } return rand ; } private RandomGenerator secRand = secRand ;
 return rand ; } return rand ; } ;
 } return rand ; } private RandomGenerator rand = null ;
 return rand ; } return rand ; } ) ;
 } if ( rand == null ) { initRan ( ) ; } }
 return rand ; } else { rand = null ; }
 } return rand ; } private RandomGenerator secRand = new SecureRandom ;
 return rand ; } else { rand = new Well19937c ( ) ; }
 } return rand ; }
 return rand ; } else { rand = new Random ( seed ) ;
 } return rand ; } return null ;
 } return rand ; } ) ;
 rand. init ( ) ;
 } else { rand = new Well19937c ( System. rng ) ;
 } return rand ; } private SecureRandom secRand ;
 } return rand ; } } ) ;
 return rand ; } private RandomGenerator secRand = null ; }
 rand();
 } if ( rand == null ) { rand = Random. USER ;
 } return rng ;
 return rand ; } private RandomGenerator rand ( ) {
 rand. init ( seed ) ;
 } return rand ; } private RandomGenerator secRand = SecureRandom ;
 return rand ; } else { rand = null ; } }
 } return rand ; } return secRand ; }
 return rand ; } return rand ; } } ;
 return rand ; } return rand ; } return null ;
 return rand ; } private SecureRandom secRand ;
 return rand ; } return rand ; } return rand ;
 } return rand ; } } ;
 return initRan();
 return rand ; } return defaultRan ;
 return rand ; } private RandomGenerator rand = null ; }
 return initRan ;
 } return rand. nextInt ( ) ; }
 } } ;
 return rand ; }
 return rng ;
 return r ; }
 } return random ; }
 rand;
 } }
 } return random ;
 return rand ;
 return rand ; } }
 rand++;
 return rand ; } ;
 return ; }
 } return rand
 } } {
 } } }
 } } ;
 } return ;
 } }
 } ;
 };
 ;
 }; }
