if (val[index] <= previous) {
 (val[index] <= previous) {
 if (val[index<= previous) {
if (val[index] <=  previous)
 if (previous) {
if (val) {
 if val[index] <= previous) {
if (val[index] <= previous &&! abort) {
if (prev) {
 val[index] <= previous) {
if (val[index] <= previous ||! abort) {
if (prev)
 if (val[index]) {
if (val[index] <=  previous) { break ITEM;
if (val[index] <= previous)  { if (val[index] >= previous)
 if (val[index] >previous) {
 if (val[index] > -previous) {
 if (val[index > previous) {
 if (val[index] > previous{
if (val[index] <= previous) { if (val[index]) {
 if (val[index] > previous)
 if (val[index] >= previous) { break ITEM; } } else {
 if (val[index]++){
 if (val[index] > previous) { break ITEM;
 if (val[index] >= previous) { break ITEM;
 if (val[index] > previous) { break ITEM; } } else {
 if (val[index] >= previous && val[index] <= previous) {
 if (val[index] <= previous) { break ITEM; } } else {
 if (val[index] + 1<= previous) {
 if (val[index] < previous) {
if (val[index] <= previous)  { if (val[index] > previous)
 break ITEM; } } else {
 if (val<= previous) {
 if (val[index] <= previous) { break ITEM; } break; case DECREASING: if (strict) {
 if (val[index] + val[index] <= previous) {
 if (val[index] >= previous) { break ITEM; } break; case DECREASING: if (strict) {
 if (val[index] >= previous) {
 if (val[index] <= previous) { break ITEM; } } break; case DECREASING:
 if (val[index]=previous) {
if (val[index] <= previous || val[index] > previous) {
 if (val[index] >= previous) { break ITEM; } break; case DECREASING: if (strict)
 if (val[index] >= previous) { break ITEM; } else
 if (val[index] >= previous) { break ITEM; }
 if (val[index++] <= previous) {
 if (val[index] > previous + 1) {
 if (val[index] < previous) { break ITEM;
 if (val[index+1] <= previous) {
 if (val[index] >= previous) { break ITEM; } else {
 if (val[index] <= previous) { break ITEM; } break; case DECREASING: if (strict)
 if (val[index] > previous) { break ITEM; } break; case DECREASING: if (strict) {
 break ITEM; } else {
 if (val[index] < previous)
if (val[index] <= previous && val[index] >= previous) {
 if (val[index] >= previous) { break ITEM; } } break; case DECREASING:
 if (val[index] > previous) { break ITEM; } else
 if (val[index] >= previous)
 if (val[index]previous) {
 if (val[index] > previous) { break ITEM; } break; case DECREASING: if (strict)
 if (val[index] > previous) { break ITEM; } else {
 if (val[index] <= previous) { break ITEM; } else
 if (val[index] <= previous) { break ITEM; } } break; case DECREASING: {
 if (val[index] <= previous) { break ITEM; } break; case DECREASING:
 if (val[index] < previous) { break ITEM; } } else {
 if (val[index] > previous && val[index] <= previous) {
if (val[index] <= previous)  { if (val[index] < previous)
 if (val[index] > previous) { break ITEM; }
 if (val[index] <= previous) { break ITEM; } } break; case INCREASING:
 if (val[index] <= previous) { break ITEM; }
if (val[index] <= previous && val[index] >= previous + 1) {
if (val[index] <= previous || val[index] >= previous) {
 if (val[index] <= previous) { break ITEM; } else {
 if (val[index] >= previous) { break ITEM; } } break; case DECREASING: {
 if (val[index] <= previous) { break ITEM; } } break; case DECREASING: if (strict)
 if (val[index] <= previous) { break ITEM; } break; case DECREASING: {
 if (val[index] >= previous) { break ITEM; } } else
if (val[index] <=  previous) { if (!abort) {
 if (val[index] >= previous + 1) {
if (val[index])
 if (val[index] > previous) { break ITEM; } } else
 if (val[index] < previous + 1) {
 if (val[index] < previous) { break ITEM; }
 if (val[index] >= previous) { break ITEM; } } break; case DECREASING: if (strict)
 if (val[index] < previous) { break ITEM; } else
 if (val[index] <= previous) { break ITEM; } } break; case INCREASING: {
 if (val[index >= previous) {
 if (val[index] >= previous) { break ITEM; } break; case DECREASING: {
 if ([index] <= previous) {
if (val[index] <= previous) { if (val[index]++) {
 if (val[index] < -previous) {
 if (val[index] <= previous) { break ITEM; } break; case INCREASING:
 if (val[index] >= previous) { break ITEM; } } } else {
 if (val[index] <= previous) { break ITEM; } break; case DECREASING: if strict {
if (val[index] <= previous || val[index] > -1) {
 if (val[index] >= previous) { break ITEM;
 if (val[index] < val[index] <= previous) {
 if (val[index] <= previous + 1) {
 if (val[index] >= previous) { break ITEM; } break; case DECREASING: if strict {
if (val[index] <= previous && val[index] >= previous) if ( abort) {
 break ITEM; } else
 if (prev < previous)
 if (val[index] > previous) { break ITEM; } break; case DECREASING: if strict {
if (val[index] <= previous || val[index] >= previous + 1) {
 if (val[index] <= previous) { break ITEM; } } else { } else {
 if (val[index] > -prev) {
 if (val[index] > previous) { break ITEM;
 if (val[index] > -1) {
 if (val[index] > previous && index<= previous) {
 if (val[index] >= previous) {
 if (val[index] < previous && index<= previous) {
 if (val[index] >= previous) { break ITEM; } } else { } else {
if (val[index] <= previous && val[index >= previous) {
 if (val[index] >= previous) if(val[index] <= previous) {
 if (val[index] <= previous) { break ITEM; } } break; default: {
if (val[index] <= previous && val[index] < previous) {
 if (val[index] > previous) if(val[index] <= previous) {
 if (val[index] <= previous) { break ITEM; } } break; case LEADING:
if (val[index] <= previous || val[index >= previous) {
if (val[index] <= previous || val[index > previous) {
if (val[index] <= previous && val[index] >= previous &&! abort) {
 if (<= previous) {
 if (val[index] >= val[index] <= previous) {
 if (val[index] >= previous)
 if (val[index] <){
 if (val[index] >= previous) { break ITEM; } break; case DECREASING: if (! strict {
 if (val[index][index] <= previous) {
 if (val[index] >= previous) { } else
 if (val[index] >= previous) { break ITEM; } } break; case LEADING:
 if (val[index] <= previous) { break ITEM; } break; case DECREASING: if (! strict {
 if (val[index] < previous) { break ITEM;
 if (val[index] + dir<= previous) {
 if (val[index] <= previous) { break ITEM;
 if (val[index] >= previous) { break ITEM; } } break; default: {
 if (index++<= previous) {
 if (val[index] > previous) { break;
 if (val[index] >= previous) { break; }
if (val[index] <=  previous) { if (prev > previous) {
 if (val[index] >= previous) break ITEM;
 if (val[index] > previous) {
if (val[index] <= previous) if ( abort) {
 if (val[index] < -prev) {
 if (val[index] > previous) { continue;
 if (val[index]-previous) {
 if (val[index] <= -previous) {
 if (!prev){
 if (val[index] >= previous|val[index] <= previous) {
 if (val[index] <= previous) { break ITEM; } } else { case STrict: {
if (val[index] <= previous || val[index] >= -1) {
if (val[index] <=  previous) { if (prev >= previous) {
 if (val[index] >= previous) { break;
 if (val[index] [0] <= previous) {
if (val[index] <=  previous) { if (val[index] {
 if (val[index] >= previous && -val[index] <= previous) {
if (val[index]  > previous) { if (!abort) {
 if (val[index] >= previous) { break ITEM; } } else { } else
 if (val[index] < previous) { break; }
 if (val[index] <= previous) { break ITEM; } } else { } else
if  previous {
 if (val[index] >= previous && index<= previous) {
 if (val[index] <= previous) { break ITEM; } } break; case INIT:
 if (val[index] >= previous &&!val[index] <= previous) {
if (val[index] < previous) if ( abort) {
 if (val[index] >= previous) { continue;
 if (val[index] > previous) { break; }
if (val[index] <=  previous) { break ITEM; }
if (val[index] >= previous) if ( abort) {
 if (val[index] <= previous) { break; }
 if (val[index] >= && val[index] <= previous) {
 if (val[index] < previous) { } else
if (val[index]  > previous) { if (prev < previous)
 if (val[index]++<= previous) {
 if (val[index] >= previous{
if (val[index] <= previous || val[index] >= previous) if ( abort) {
if (val[index] <=  previous) { if (prev > previous)
if (val[index] <= previous && val[index] > -1) {
if (val[index] > previous) if ( abort) {
 if (val < previous){
 break ITEM; }
 if (val[index] <= previous) { break ITEM; } } break; case NOTING:
if (val[index] <= previous || val[index] > previous + 1) {
if (val[index] <=  previous) { if (abort) {
 if (val[index] <= -prev) {
if (val[index] <= previous && val[index] >= -1) {
 if (val[index] > previous) { break ITEM; } } else { } else
 } else { if(val[index] <= previous) {
 if (val[index] <=){
 if (val[index] == previous) { break ITEM;
 if (val[index] <= previous) { break; } else
 if (val[index] > previous) { } else
 if (val[index] - val[index] <= previous) {
 if (val[index] > previous) (val[index] <= previous) {
if (val[index] <=  previous) { if (prev >= previous)
 if (val[index] <= previous) { break ITEM; } } else { break; default:
 if (val[index] <= val[index] <= previous) {
 if (val[index] > previous|val[index] <= previous) {
 if (val[index] <= previous) { break ITEM; } } break; case INVERT:
 if (val[index] < previous && val[index] <= previous) {
 case DECREASING: if(val[index] <= previous) {
if (val[index] <= previous || val[index] > previous) if ( abort) {
if (val[index] <=  previous) { if (prev < previous) {
 if (val[index] > previous && previous<= previous) {
 if (val[index] <= previous && index<= previous) {
 if (!{
 if (val[index]; val[index] <= previous) {
 if (val[-1] <= previous) {
 if (val[index] - 1<= previous) {
 if (val[index]) { if(val[index] <= previous) {
 if (val[index] <= previous) { break ITEM; } } break; case DOWN:
 if (] <= previous) {
 if (val[index] >= previous &&!previous) {
 if (val[index-1] <= previous) {
if (val[index] <= previous || val[index] >= previous ||! abort) {
if (val[index] <= previous && val[index] < previous + 1) {
 if (val[index] >= [prev] <= previous) {
 if (val[index] <= previous) { } else
if (val[index] <=  previous) break ITEM;
 if (val[index] >= previous) (val[index] <= previous) {
 if (val[index] <= previous) if(val[index] <= previous) {
 if (prev > previous)
 if (val[index] >= previous) { break ITEM; } } else { else
 break ITEM; } break; case DECREASING: if strict {
 if (!val[index]) { if(val[index] <= previous) {
if  (!prev)
 if (val[index] < previous) { break ITEM; } } else { } else
 if (val[index] > previous &&!previous) {
if (val[index] <= previous && val[index] >= previous) if (! abort) {
if (val[index] <= previous && val[index] < -prev) {
 case DECREASING:
 if (prev < previous) {
 if (val[index] < previous) {
 if (val[index] >= -previous) {
 if (val > previous){
 case DECREASING: { if(val[index] <= previous) {
 break ITEM; } if(val[index] <= previous) {
 if (val[index] < [prev] <= previous) {
 if (val[index] + previous<= previous) {
if (val[index] > previous) { break ITEM; }
if (val[index] <= previous && val[index] > previous) {
 if (val[index] > previous - 1) {
 if (val[index] >= previous;val[index] <= previous) {
if (val[index] <= previous && val[index] >= -prev) {
 if (val[index] < previous) if(val[index] <= previous) {
 if (val[index] <= previous) { break ITEM; } } else { break; } else
 if (val[index] <= previous) { break ITEM; } } else { else
 if (val[index] >){
 if (val[index] < previous &&!previous) {
 if (val[index] > previous) { break ITEM; } } else { else
 if (val[index] <= previous) { break ITEM; } break; default: {
if (val[index] >= previous) { break ITEM; }
 if (index] <= previous) {
 if (val[index] > previous &&!val[index] <= previous) {
if (val[index] <= previous) { if (val[index] = previous
 case DECREASING: {
 if (val[index] + delta<= previous) {
 if (val[index].length<= previous) {
if (val[index] <= previous && val[index] < -1) {
 if (val[index < previous) {
 if (val[index] < previous val[index] <= previous) {
 if (val[index] {
 if (val[index] > previous || val[index] <= previous) {
 if (prev) { if(val[index] <= previous) {
 if (val >= previous){
 if (val[index] > previous)
 if (prev >= previous)
if (val[index] <=  previous) { if (prev < previous)
if (val[index] <= previous || val[index] >= previous &&! abort) {
 if (val[index] < -val[index] <= previous) {
 if (val[index] > previous) { break; }
 if (val[index] [1] <= previous) {
if (val[index] < previous) while (true) {
 if (val[index] >= previous val[index] <= previous) {
 if (val[index] < -1) {
if (val[index] <= previous) { if (val[index] > {
if (val[index] <= previous || val[index] > previous ||! abort) {
 break ITEM; } break; default: {
 if (val[index] <= previous) { break; }
 if (val[index] > previous < -previous) {
 if (val[index] > previous-previous) {
 if (val[index]) {
 if (val[index] <= previous) { break ITEM; } } break; case DECREASING: else
 if (val[index] < previous) { break; }
 if (val[index] --<= previous) {
 if (val[index] >= || val[index] <= previous) {
 if (val[index] <= previous) { break ITEM; } } break; case INCREASING: else
 if (val[index] > -val[index] <= previous) {
if (val[index] <= previous && val[index] > previous + 1) {
 if (val[index] < previous-previous) {
if (val[index] <= previous && val[index] <= previous + 1) {
if (val[index] <= previous || val[index] == -1) {
 if (val[index] >= previous) { }
if (val[index] <= previous) { if (val[index] > previous
 if (val[index] [prev] <= previous) {
 if (val[index] + [index] <= previous) {
 break ITEM; } else { if (strict) { break ITEM; }
if (val[index] <= previous && index < max) {
 if (val[index] <= previous-previous) {
 if (val[index] < previous) { break ITEM; } } else { else
if (val[index] <= previous || val[index] >= -prev) {
if (val[index] <= previous)  { if (val[index] >= previous);
 if (index < previous) {
 if (prev < previous) if (val[index] <= previous) {
if (val[index] <= previous && val[index < previous) {
if (val[index] <= previous && val[index]) {
if (val[index]  >= previous) { if (prev < previous)
 if (val[index] >= previous) { break; }
if (val[index] <= previous || val[index] > -prev) {
 if (val[val[index] <= previous) {
 if (index > -previous) {
if (val[index] <= previous && val[index] >= prev + 1) {
if (val[index] <= previous || val[index] >= previous) if (! abort) {
 if (val[index]+1] <= previous) {
if (val[index] <= previous && val[index] >= previous,! abort) {
 if (val[index] < previous previous<= previous) {
 if (val[index] + -1<= previous) {
 if (!abort) if(val[index] <= previous) {
 if (val[index] <= previous) { break ITEM; } } break; case DECREASING: { }
if (val[index] <= previous)  { if (val[index] <= previous)
 if (prev <){
 if (val[index] increasing {
 if (val[index] >= -val[index] <= previous) {
 if (val[prev][index] <= previous) {
if (val[index] <= previous && val[index] > previous) if ( abort) {
if (val[index]  < previous) { if (prev >= previous)
if (val[index] <= previous && val[index] >= previous) if (ort) {
if (val[index] <= previous || val[index] > previous) if (! abort) {
 if (val[index] < previous>previous) {
 case DECREASING: } else {
 if (val[index] - prev[index] <= previous) {
 if (val[index] >= previous)*(val[index] <= previous) {
 if (prev<val[index] <= previous) {
 if (index == -previous) {
 if (val[index]<=prev<= previous) {
 if (val[index] >= previous) { break ITEM; } } break; case DECREASING: { }
 if (val[max][index] <= previous) {
 if (vals[index] <= previous) {
 if (val[index] < previous) { }
 if (val[index].prev<= previous) {
if (val[index] <= previous || val[index] < previous) {
if (val[index] <=  previous) { continue;
 if (index > previous) {
 if (prev <= previous)
 if (prev > previous) {
 if (val[val]index] <= previous) {
if (val[index] <= previous && val[index] > previous &&! abort) {
 if (val[index] < previous)*(val[index] <= previous) {
if (val[index] <=  previous) { break;
 if (prev == -1 || val[index] <= previous) {
if (val[index] < previous) { break ITEM; }
 if (val[index] > previous+previous) {
if (val[index] <= previous && val[index] >= next) if ( abort) {
 if (val[index] > previous)*(val[index] <= previous) {
 if (val[index] >= (val[index] <= previous) {
 if (index>=previous) {
 if (val[index] > previous) { }
 if (val[index] < previous prev<= previous) {
 if (val[index] <= previous<=previous) {
 break ITEM; if(val[index] <= previous) {
 if (val[index] <= if(val[index] <= previous) {
 if (val[index] < (val[index] <= previous) {
 if (val[index] + prev[index] <= previous) {
 if (val[index] < previous index<= previous) {
 if (val[index] && val[index] <= previous) {
 if (val[index] val[index] <= previous) {
if (val[index] <= previous || if (val[index] > -1) {
if (val[index] <= previous || val[index] == previous + 1) {
 if (val[index] >= previous)|(val[index] <= previous) {
 if (val[index] > previous) { } else
if (val[index] <= previous && val[index > previous) {
if (val[index] <=  previous) { break itEM;
 } else {
 break ITEM;
 if (index] >previous) {
if (val[index] < previous) break () {
 if (prev previous) {
if (val[index] <= previous && val[index] >= previous + -1) {
if (val[index] <= previous || if (val[index] > previous) {
 if (val[index])){
if (val[index] <= previous || val[index] < previous + 1) {
 if (val[index] > previous val[index] <= previous) {
 if (val[index] == previous) {
if (val[index] <= previous || val[index]) {
 if (prev < previous && val[index] <= previous) {
 if (val[index] >= if(val[index] <= previous) {
 if (prev-val[index] <= previous) {
if (val[index] <= previous || val[index] >= previous) if (ort) {
 if (abort) {
 if (val[index]++) {
 if (prev <= val && val[index] <= previous) {
if (val[index] <=  previous) { if (prev) {
 if (prev >= previous) {
if (val > previous)
 if (val[index] >= [index] <= previous) {
 if (val[index]= previous)
if (val[index] > previous) break () {
if (val[index] <= previous && val[index++) {
if (val[index] <= previous && val[index] <= previous) {
 if (val[index]++{
 if (val[index] < previous) break; else
if (val[index] < previous) break (-) {
if (val[index] <= previous) break () {
 break ITEM; } break; case DOWN: {
 break ITEM; } break; case INIT:
 if (val[0][++index] <= previous) {
if (val[index] < previous) break (() {
 if (val[-index] <= previous) {
 if (prev > previous{
 if (val[index] < if(val[index] <= previous) {
 if (val[index] < previous) { continue; }
 if (prev >= 0 && val[index] <= previous) {
if (val[index] <= previous && val[index >= prev) {
 if (val.length[index] <= previous) {
 if (index] <previous) {
 if (val[index][++index] <= previous) {
 break; } if(val[index] <= previous) {
 if (val[index] > previous) *{
 if (val[]<= previous) {
if (val[index] <= previous && val[index] >= prev) {
if (val[index] <= previous || val[index] == previous) {
 if (prev <= previous) if(val[index] <= previous) {
 if (val[index] >= previous {
 if if (val[index] <= previous) {
 if (val[index] < prev val[index] <= previous) {
 if (val[index1] <= previous) {
 if (val[index] > previous) {{
 if (prevPrevious) {
 if (val[index] >= previous
 if (val[]index<= previous) {
 if (val[index] <= previous) *{
if (val[index] <=  previous) { break TEM;
if (val[index] <=  previous) { break TIMEM;
 if (previous &&!val[index] <= previous) {
 if (val[index] < previous) *{
 if (prev prev) {
 break ITEM; } break; case DOWN:
if (val[index] <= previous || if (val[index] > -prev) {
 if (prev) if(val[index] <= previous) {
 break; } else if(val[index] <= previous) {
if (val[index] <= previous || index == max) {
 if (!(val[index] <= previous) {
 if (prev < previous) {
 break; } else
 if (val[] < previous) {
 if (previous < val[index] <= previous) {
 if (!abort) {
 if (val[index] >= previous);
 if (val[index] {
 if (prev!=){
 if (prev!= 0) if(val[index] <= previous) {
 if (previous && val[index] <= previous) {
 if (index<= previous) {
if (val[index] <=  previous) { break ITER;
 if (val[] >= previous) {
if (val[index] <=  previous) { continue loop;
if (val >= previous)
if (val[index] <= previous && val[index] >= previous, abort abort) {
 if (prev >){
if (val[index] <= previous || index == -1) {
if (val[index] <= previous && val[index >= 0) {
 if (if (val[index] <= previous) {
 if (val[index]) if(val[index] <= previous) {
 if (prev >= previous && -val[index] <= previous) {
if (val[index] <= previous || val[index < previous) {
 if (val[index] > previous) { }
 if (previousVal[index] <= previous) {
 if (val-val[index] <= previous) {
 if (prev+val[index] <= previous) {
 if (val[index] < previous) { }
 if (!previous) {
 if (previous) if(val[index] <= previous) {
 if (prev < previous) (val[index] <= previous) {
 if (prev > 0 &&val[index] <= previous) {
if (val[index] <= previous || val[index] >= prev) {
 if (val+val[index] <= previous) {
 if (prev < previous &&!val[index] <= previous) {
if (val[index] <= previous || val[index++) {
 if (prev<= previous) {
 if (val[index] <= previous) { }
if (val[index] <=  previous) { break ITEM; else
 if (prev >= previous &&!val[index] <= previous) {
 if (val.length<= previous) {
if (val[index] <= previous || val[index >= prev) {
 if (previous + val[index] <= previous) {
if (val!= previous)
 if (prev <= previous &&!val[index] <= previous) {
 if (previous <= val[index] <= previous) {
 if (previous-val[index] <= previous) {
if (val <= previous)
if (val < previous)
 if (prev last) {
if (val[index] <= previous || prev == -1) {
 if (--previous) {
 if (!){
 break ; default: if(val[index] <= previous) {
 if ($prev) {
if (val[index] <= previous && index <= max) {
if (val[index] <= previous || val[index >= 0) {
if (val[index] <= previous || index > max) {
 if (prev < previous|val[index] <= previous) {
 if (prev < 0|val[index] <= previous) {
 if (prev >= previous &&val[index] <= previous) {
 case 0: if(val[index] <= previous) {
 if previous-{
 if (<previous) {
 break ITEM; else
 } if (val[index] <= previous) {
 if (previousval[index] <= previous) {
if (val[index] <=  previous) { } else
 if (!if (val[index] <= previous) {
 if (prev)){
 break; }
if (val[index] <= previous && index < -1) {
if (val[index] <=  previous) break; else
 break ITEM; } }
if (val[index] <= previous && prev < -1) {
if (prev == previous)
 break ; } else {
 if (prevVal[index] <= previous) {
if (val[index] <= previous && index!= max) {
 if (inverse-val[index] <= previous) {
 if () {
 if (prev) {
if (val[index] <=  previous) { continue; }
 case ALL: if(val[index] <= previous) {
if (val[index] <= previous || index > -1) {
if (val[index] <= previous || abort == true) {
 if previous.{
if (val[index]);
if (val[index]
 if (current<= previous) {
 } else if(val[index] <= previous) {
 if (!prev{
 if previous){
 do { if(val[index] <= previous) {
 if (!!previous) {
if (val[index] <= previous || index == 0) {
if (val[index] <= previous && val[index]+) {
if (val[index] <= previous && index == max) {
if (val[index]); {
 if ($<= previous) {
 if (-] <= previous) {
if (val[index] <= previous && abort == true) {
 if (pow[index] <= previous) {
 continue ITEM;
 { if (val[index] <= previous) {
 if [index] <= previous) {
if  (! previous {
 if ({
 while (val[index]<= previous) {
 if (!val[index]<= previous) {
 case 0:
 } { if(val[index] <= previous) {
 if (v[index]<= previous) {
 (index] <= previous) {
 while () {
 case ascending:
if (val[index) {
if Previous {
 if (-val[index] <= previous) {
if (Previous) {
if (reverse) {
 if { if(val[index] <= previous) {
if (val[index++) {
 if ($] <= previous) {
 (> previous) {
 default: {
if (val++) {
if (val)) {
if  before {
 (prev) {
 if (++val[index] <= previous) {
 if!!(val[index] <= previous) {
if  prev {
 } else
 default:{
 if (-{
if (val[prev])
 do {
if (reverse)
 if(_<= previous) {
if (prev {
if (val[index] <= previous && abort) {
if (val[index] <=  prev) {
if (val[index]  -- {
if (val[index] <=  last) {
if (val[index] <= previous || abort) {
if (val[index];
 else {
if (val[index] <=  previous);
if (val[index] <=  previous)) {
if (pre)
if (val[index] <=  prev) { }
if (val[index] <=  before) {
if (val[index] <= previous || --max) {
if (val[index] <=  previously) { }
if (val[index] <= previous && abort()) {
if (val[index] <= previous && abort true) {
if (val()) {
if (val[index] <= previous && aborting) {
 } {
if (val[index] <= previous || --index) {
if (val[index] <= previous) {} {
 v[index] <= previous) {
if (val[index] <= previous || abort()) {
if (val[index] <=  prev)
 while (previous) {
if (val[index] <=  previous).
if (val[index] <= previous)) { }
 (!val[index] <= previous) {
 if ($previous) {
 if!(val[index] <= previous) {
 } }
 (v[index] <= previous) {
if (last) {
 {
if (val[index] <= previous), {
 else
if (val[index] <= previous)  {} }
 }
