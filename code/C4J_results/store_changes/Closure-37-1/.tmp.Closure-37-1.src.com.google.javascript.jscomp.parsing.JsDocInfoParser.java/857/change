ExtractionInfo  returnDescriptionInfo =
 returnDescriptionInfo =
 token =
ExtractionInfo DescriptionInfo =
ExtractionInfo returnDescriptionInfo  = parser.
 token = eatTokensUntilEOL(token); } else { token = eatTokensUntilEOL(token); }
ExtractionInfo returnDescriptionInfo  = jsdocBuilder.
 token = eatTokensUntilEOL(token);
 continue retry; }
 token = eatTokensUntilEOL(token); continue retry;
ExtractionInfo  info =
 token = eatTokensUntilEOL(token); } else { token = eatTokensUntilComment(token); }
 token = eatTokensUntilEOL(token); } else { token = eatTokensUntilEOL(token); continue retry; }
 returnDescription=
 returnDescriptionInfo = jsdocBuilder.
 token = eatTokensUntilEOL(token); } else { token = eatTokensUntilEOL(token); } continue retry;
 token = eatTokensUntilEOL(token); continue retry; }
 token = eatTokensUntilEOL(token); } else { token = eatTokensUntil ( token ) ;
 token = eatTokensUntilEOL(token); } else { token = eatTokensUntilEOL ( token ) ;
 token = eatTokensUntilEOL(token); } else { continue retry; }
 token = eatTokensUntilEOL(token); } else { token = eatTokensUntil ( token); }
ExtractionInfo returnDescriptionInfo  = (ExtractionInfo)
 token = eatTokensUntilEOL(token); } if ( token!= null ) {
 token = eatTokensUntilEOL(token); } else { token = eatTokensUntilEOL(token); } final
 token = eatTokensUntilEOL(token); } else { token = eatTokensUntilEOL(); }
 token = eatTokensUntilEOL(token); } else { token = eatTokensWhileEOL(token); }
ExtractionInfo returnDescriptionInfo  = ExtractionInfo.
 token = eatTokensUntilEOL(token); } continue retry;
 token = eatTokensUntilEOL(token); continue retry; } else { final
 token = eatTokensUntilEOL(token); } else { token = eatTokens ( token ) ;
 var returnDescriptionInfo = jsdocBuilder.
 token = eatTokensUntilEOL(token); } else { token = eatTokensUntilEOL(); } final
 token = eatTokensUntilEOL(token); } else { token = eatTokens(token); }
 token = eatTokensUntilEOL(token); } else { final
 token = eatTokensUntilEOL(token); } else { token = eatTokensUntilEOL(token); } else { final
ExtractionInfo returnDescriptionInfo  = extractor.
 token = eatTokensUntilEOL(token); continue retry; } if (debug) {
 token = eatTokensUntilEOL(token); } else { token = eatTokensUntilEOL ; }
 token = eatTokensUntilEOL(token); } else { token = eatTokensUntilEOL(token); continue retry; };
ExtractionInfo returnDescriptionInfo  = (ExtractionInfo) jsdocBuilder.
 token = eatTokensUntilEOL(token); break; }
 returnDescriptionInfo = JsDocParser.
 token = eatTokensUntilEOL(token); } else { token = next(); }
 token = eatTokensUntilEOL(token); } else { token = eatTokensUntilEOF(); } final
 token = eatTokensUntilEOL(token); } if (token!= null) { final
 token = eatTokensUntilEOL(token); } else { token = eatTokensUntilEOL ( token ) ; break ; }
 token = eatTokensUntilEOL(token); } else { token = eatTokensUntilEOL(token); } } else { final
ExtractionInfo returnDescriptionInfo  = (ExtractionInfo) parser.
 token = eatTokensUntilEOL(token); } else { token = eatTokensUntilEOL ; final
 token = eatTokensUntilEOL(token); } else { token = next ( ) ; final
 token = eatTokensUntilEOL(token); } else { token = eatTokensUntilComment(token); };
 token = eatTokensUntilEOL(token); } else { token = eatTokensUntilEOL ( token ) ; final
 token = eatTokensUntilEOL(token); } else { token = next(); } final
 token = eatTokensUntilEOL(token); } else { token = eatTokensWhileEOL(token); } final
 token = eatTokensUntilEOL(token); } else { token = eatTokensUntilEOL ; } final
ExtractionInfo  extractInfo = jsdocBuilder.
ExtractionInfo returnDescriptionInfo  = getExtractionInfo ( ).
 token = eatTokensUntilEOL(token); } else { token = eatTokensUntilEOL(token); } else { #
 token = eatTokensUntilEOL(token); continue; }
 token = next(); returnDescriptionInfo =
 returnDescriptionInfo = JsDocBuilder.
 token = eatTokensUntilEOL(token); continue retry; } else {
 returnDescriptionInfo = getReturnDescriptionInfo ( ).
 token = eatTokensUntilEOL(token); } else { token = next ( token ) ; final
 token = eatTokensUntilEOL(token); } else { continue retry; };
 var returnDescriptionInfo = returnDescriptionInfo=
 token = eatTokensUntilEOL(token); continue retry();
 returnDescriptionInfo = parseDescription(); returnDescriptionInfo=
ExtractionInfo returnDescriptionInfo  = new ExtractionInfo ( ).
ExtractionInfo returnDescriptionInfo  = parseReturnDescription ( token ) ; token =
 token = eatTokensUntilEOL(token); } else {
 var returnDescriptionInfo = {}; returnDescriptionInfo=
 token = eatTokensUntilEOL(token); } else { token = eatTokensUntilEOL(token); } break ; }
 var returnDescriptionInfo; returnDescriptionInfo=
 returnDescriptionInfo = JsDocHelper.
 token = eatTokensUntilEOL(token); } else { token = eatTokens ( ) ; final
 returnDescriptionInfo = parseDocumentation(token);
 token = eatTokensUntilEOL(token); } continue retry; final
 var returnDescriptionInfo = JsDocParser.
 var returnDescriptionInfo = JsDocBuilder.
 returnDescriptionInfo = JsDocUtils.
ExtractionInfo  extractTextualBlock(token); returnDescription =
 var returnDescriptionInfo = null; returnDescriptionInfo=
ExtractionInfo  retDescriptionInfo = jsdocBuilder.
 token = eatTokensUntilEOL(token); continue retry };
 token = eatTokensUntilEOL(token); } else { token = eatTokensUntilEOL(token); } } final
 token = eatTokensUntilEOL(token);returnDescriptionInfo =
ExtractionInfo Info =
 token = eatTokensUntilEOL(token); continue retry; } final
ExtractionInfo  (returnDescriptionInfo) =
ExtractionInfo returnDescriptionInfo  = extractDescription ( token ) ; token =
 token = eatTokensUntilEOL(token); } final
 token = eatTokensUntilEOL(token); } else { token = next(); } String
ExtractionInfo  returnDescriptionInfo = jsdocBuilder.parser.
 parser.parseDocumentation(token); }
ExtractionInfo  extractInfo = extractor.
 token = eatTokensUntilEOL(token); } else { token = eatTokensUntilEOL(token); } } #
ExtractionInfo  extractTextualBlock(token); returnDescriptionInfo
ExtractionInfo  returnDescriptionInfo = (ExtractionInfoImpl)
 returnDescriptionInfo = parseDocumentation(token); }
 token = eatTokensUntilEOL(token); final
ExtractionInfo  extractDescriptionInfo = jsdocBuilder.
 token = eatTokensUntilEOL(token); } if (token!= null) { String
 token = eatTokensUntilEOL(token); } if ( token!= null ) break ; final
 token = eatTokensUntilEOL(token); } else { continue ; } final
 var returnDescriptionInfo = parser.
 token = eatTokensUntilEOL(token); } else { token = eatTokensUntilEOL ( token ) ; final final
ExtractionInfo returnDescriptionInfo  = getExtractionInfo ( token ).
 returnDescriptionInfo = getReturnDescriptionInfo(); token =
 returnDescriptionInfo := jsdocBuilder.
 var returnDescriptionInfo = this.returnDescriptionInfo=
ExtractionInfo returnDescriptionInfo  = getExtractionInfo(token); token =
 token = eatTokensUntilEOL(token); } else { token = next(); } } final
 var returnDescriptionInfo = {}; returnDescription=
 token = eatTokens ( token ) ;
 String returnDescriptionInfo =
 returnDescriptionInfo = Parser.
 token = eatTokensUntilEOL(token); } else { token = eatTokensUntilEOL ( token ) ; final String
ExtractionInfo  returnDescriptionInfo = jsdocExtractor.
 returnDescriptionInfo.string += ""; token=
ExtractionInfo  returnDescriptionInfo = Parser.
ExtractionInfo  extractTextualBlock(token); } else {
ExtractionInfo returnDescriptionInfo  = new ExtractInfo ( ).
ExtractionInfo (returnDescriptionInfo)
ExtractionInfo  returnDescriptionInfo = JsDocParser.
 returnDescriptionInfo.string.textBlock=
 token = eatTokensUntilEOL(token); }
 returnDescriptionInfo.textualBlock=
ExtractionInfo  returnDescriptionInfo = JsDocBuilder.
ExtractionInfo  returnDescriptionInfo = extractInfo.
ExtractionInfo .returnDescriptionInfo =
ExtractionInfo returnDescriptionInfo  = extractReturnDescription(token);
 String returnDescriptionInfo = parser.
ExtractionInfo  returnDescriptionInfo = jsdocUtils.
 returnDescriptionInfo = getReturnDescriptionInfo ( ) ;
 var returnDescriptionInfo = this.descriptionInfo=
 final String returnDescriptionInfo =
 returnDescriptionInfo = parser.
 token = next(); } else { final
 returnInfo=
ExtractionInfo returnDescriptionInfo  = (ExtractionInfo) jsdocBuilder;
 returnDescriptionInfo.string.textContent=
ExtractionInfo returnDescriptionInfo  = new ExtractionInfo ( ) ;
 returnDescriptionInfo = parseDescription(); returnDescription=
ExtractionInfo (returnDescriptionInfo);
 returnDescriptionInfo = null;returnDescriptionInfo =
 returnDescriptionInfo.string = ""; token=
 returnDescriptionInfo.string += " "=
 returnDescriptionInfo = parseDocumentation(token); }
 token = eatTokensUntilEOL(token); } continue retry; } final
ExtractionInfo  extract returnDescriptionInfo =
 var returnDescriptionInfo = this.
 token = next(); break; }
ExtractionInfo  extractReturnDescriptionInfo =
ExtractionInfo returnDescriptionInfo  = new ExtractionInfo ( token ).
 token = eatTokensUntilEOL(); final
 token = eatTokensUntilEOL(); } final
 returnDescriptionInfo = parseReturnDescription(token); }
 parser.parseDocumentation(token); } final
 TextualBlockInforeturnDescriptionInfo =
 returnDescriptionInfo = this.returnDescriptionInfo =
 returnDescriptionInfo.documentationString=
 token = eatTokensUntilEOL(token).returnDescriptionInfo =
 returnDescriptionInfo = parseDocumentation(token); } final
 token = eatTokensUntilEOL (token));
 token = eatTokenUntilEOL(token); } final
ExtractionInfo returnDescriptionInfo  = getExtractionInfo ( token ) ;
 continue retry;
 var returnDescriptionInfo =
 token = eatTokenUntilEOL(token); final
 Token returnDescriptionInfo =
ExtractionInfo returnDescriptionInfo  = Extractor.
 token = eatTokensUntilEOL(token); } String
 final Node returnDescriptionInfo =
ExtractionInfo returnDescriptionInfo  = this.
 returnDescriptionInfo.string *=
 returnDescriptionInfo = token.returnDescriptionInfo =
 token = next(); continue; }
 returnDescriptionInfo.string |=
 String(returnDescriptionInfo)=
 token = eatTokensUntilEOL(); #returnDescriptionInfo =
 if (returnDescriptionInfo) {returnDescriptionInfo =
 returnDescriptionInfo.documentationText=
ExtractionInfo returnDescriptionInfo  = new ExtractionInfo ( token ) ;
ExtractionInfo  textInfo = extractor.
 returnDescriptionInfo = {};returnDescriptionInfo =
 String [ ] returnDescriptionInfo=
ExtractionInfo returnDescriptionInfo  = jsdocParser.
 token = eatTokensUntilEOL(); }
 token = eatTokensUntilEOL(token)returnDescriptionInfo =
 token = eatTokensUntilEOL(token));returnDescriptionInfo =
 JsDocTokenImplreturnDescriptionInfo =
 returnDescriptionInfo.string ||=
 parser.parseDocumentation(token); };
 final TextualBlockreturnDescriptionInfo =
 parser.parseDocumentation(token); final
 returnDescriptionInfo.documentationInfo=
 token = next ( ) ; final
 token = eatTokensUntilEOL(); TokenInforeturnDescriptionInfo =
 JsDocBlockreturnDescriptionInfo =
 returnDescriptionInfo.documentationDescription=
 JsDocToken>returnDescriptionInfo =
 token = next(); continue ; } final
ExtractionInfo  extractInfo = extractFactory.
 returnDescriptionInfo = token;returnDescriptionInfo =
 returnDescriptionInfo :=
 final TextualBlockInforeturnDescriptionInfo =
 return description ; } else {
 TextualBlockDescription info=
ExtractionInfo Description info =
 final Token returnDescriptionInfo=
 continue retry; } final
 final String[][]returnDescriptionInfo =
 Token returnDescriptionInfo ==
 final JsDocBlockreturnDescriptionInfo =
 token = eatTokensUntilEOL; #returnDescriptionInfo =
 continue retry };
 continue retry }
 token = next(); } break ; }
 token = next(); } else { String
 returnDescriptionInfo = parse(token); #returnDescriptionInfo =
 continue retry; };
 final returnDescriptionInfo=
 final String [ ]returnDescriptionInfo =
 JsDocTokenreturnDescriptionInfo =
 continue ; } final
 token = next(); } final
 varDescriptionInfo=
ExtractionInfo  descriptionInfo =
 continue; }
 TextualBlockreturnDescriptionInfo =
 returnDescriptionInfo = newNode(); #returnDescriptionInfo =
 returnDescriptionInfo
 if (returnDescriptionInfo) #returnDescriptionInfo =
 returnDescription :=
ExtractionInfo returnDescriptionInfo  = context.
 var info =
 var descriptionInfo =
ExtractionInfo returnDescriptionInfo  = super.
 returnDescriptionInfo = null; } #returnDescriptionInfo =
ExtractionInfo  returnDescriptionInfo :=
 var returnInfo =
 final DescriptionInforeturnDescriptionInfo =
 returnDescriptions =
 returnDescriptionInfo = parser,
 descriptionInfo=
 returnDescriptionInfo = newNode; #returnDescriptionInfo =
 constDescriptionInfo=
ExtractionInfo DescriptionInfo :=
 token = next(); } }
 ReturnDescriptionInfo=
ExtractionInfo  retDescriptionInfo =
 final NodeInforeturnDescriptionInfo =
 final ReturnDescriptionInfo=
 try { final
ExtractionInfo  returnDescInfo =
 commentInfo=
ExtractionInfo returnDescriptionInfo , =
ExtractionInfo  ret =
ExtractionInfo returnDescriptionInfo . =
ExtractionInfo Info :=
ExtractionInfo  result =
 final
 String.returnDescriptionInfo =
 TokenInforeturnDescriptionInfo =
 continue; };
 token +=
 text =
 parser.
ExtractionInfo returnDescriptionInfo  = =
ExtractionInfo returnDescriptionInfo  = new
 final final
 final String
 String
ExtractionInfo returnDescriptionInfo +=
ExtractionInfo returnDescriptionInfo:
