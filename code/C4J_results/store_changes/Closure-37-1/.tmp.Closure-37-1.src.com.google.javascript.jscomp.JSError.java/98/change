 return new JSError(
 return make(
 return new JSErrorImpl(
 return new Error(
 return new JSError(null,
 return new
 return new JSErr(
 return new JSEror(
 return JSError ( sourceName, null, lineno, charno, type, arguments ) ;
 return JSError.JSError(
 return JSError ( sourceName, null, lineno, charno, type ) ;
 return JSError ( sourceName, null, lineno, charno, type, level, arguments ) ;
 return JSError ( sourceName, null, lineno, charno, type, null, arguments ) ;
 return new JSError(sourceName, null, lineno, charno, type, arguments); }
 return new JSError ( sourceName, null, lineno, charno, type, arguments ) ;
 return JSError. make ( sourceName, null, lineno, charno, type, arguments ) ;
 return new JSError(sourceName, null, lineno, type, arguments); }
 return JSError ( sourceName, null, lineno, charno ) ;
 return JSError.make(new JSError(
 return new JSError(sourceName, null, lineno, type, level, arguments); }
 return new JSError(sourceName,new JSError(
 return JSError ( sourceName, null, lineno, type, arguments ) ;
 return new JError(
 return new JSError ( sourceName, null, lineno, charno, type, arguments ) ; } else {
 return JSError.createJSError(
 return JSError(new JSError(
 return JSError ( sourceName, null, lineno, charno, arguments ) ;
 return new JSError(null, null,
 return new JSError(sourceName, null, lineno, charno); }
 return JSError ( sourceName, null, lineno, charno, type, arguments ) ; } else {
 return JSError ( sourceName, null, lineno, charno, type, null, arguments ) ; } else {
 return new JSError ( sourceName, null, lineno, charno, type ) ;
 return new JSError(sourceName, null, level, arguments); }
 return new JSError(sourceName, null, type, arguments); }
 return new JSError ( sourceName, null, lineno, type, arguments ) }
 return JSError.makeJSError(
 return new JSError(null,new JSError(
 return new JSError ( sourceName, null, lineno, charno, type, arguments ) }
 return JSError. make ( sourceName, null, lineno, charno, type, arguments ) ; } else {
 return JSError. make ( sourceName, null, lineno, charno, type, null, arguments ) ; } else {
 return JSError ( sourceName, null, lineno, type, arguments ) }
return new  JSError(null, -1,
 return new JSError(sourceName, null, level, arguments);
 return new JSError(sourceName,
 return new JSE(
 return new JSError(new String(
 return JSErrorImpl.new JSError(
 return new JSError ( sourceName, null, lineno, charno, type ) }
 return new JSError ( sourceName, null, lineno, charno ) ;
 return JSError ( sourceName, null, lineno, charno ) }
 return JSError ( sourceName, null, lineno, charno, type, level, arguments ) ; } else {
 return JSError ( sourceName, null, lineno, charno, type, arguments ) }
 return new JSError(sourceName, n, arguments);
 return new JSError(sourceName, null, type, arguments);
 return JSError.new JSError(
 return new JSError(sourceName, null, lineno, type); }
 return JSError ( sourceName, null, lineno, type ) ;
 return new JSError(sourceName, null, arguments); }
 return JSError ( sourceName, null, lineno, charno, type, level, arguments ) }
 return new JSError ( sourceName, null, lineno, charno, type, null, arguments ) ; }
 return JSError ( sourceName, null, lineno, charno, type ) ; }
 return JSError ( sourceName, null, level, arguments ) ;
 return new Make(
 return JSError ( sourceName, null, lineno, level ) ;
 return new JSError(sourceName),new JSError(
 return JSError ( sourceName, null, lineno, charno, type, null, arguments ) }
 return new JSError(sourceName, n, arguments); }
 return new JSError(sourceName, n, type, arguments);
 return new JSError(null).make(
 return new JSError(sourceName, n); }
 return new JSError(sourceName, type, arguments); }
 return new JSErrorWrapper(
 return new JSErrorImplicit(
 return JSErrorFactory.createJSError(
 return JSError ( sourceName, null, lineno, charno, type, null, arguments ) ; } } else {
 return new JSError(sourceName, null, lineno, type, arguments); } else
 return new JSError(0, 0,
 return new JSError(sourceName); }
 return JSError ( sourceName, null, lineno, charno, type, null, arguments ) ; } else
 return new JSError(new Error(
 return JSError(sourceName,new JSError(
 return JSError ( sourceName, null, type, arguments ) ;
 return new JSError("make",
 return new JSError ( sourceName, null, level, arguments ) }
 return new JSError(sourceName);JSError(
 return new JSError ( sourceName, null, lineno, type ) ;
 return new JSError ( sourceName, null, lineno, charno, type, arguments ) {
 return JSError ( sourceName, n, arguments ) ;
 return JSError ( sourceName, null, lineno, charno, type, arguments ) ; }
 return JSError ( sourceName, null, lineno, charno, type, null, arguments ) ; }
 return new JSError(-1,
 return JSError. make ( sourceName, null, lineno, charno, type, arguments ) ; }
 if ( sourceName!= null ) {
 return new JSError(sourceName, null, arguments);
 return new JSError(sourceName, level, arguments);
 return JSError. make ( sourceName, null, lineno, charno, type, null, arguments ) ; } #
 return JSError.create(new JSError(
 return new JSError(0,
 if ( sourceName!= sourceLocation ) {
 return new JSError('make',
return new  JSError(0, -1,
 return new JSError(new JSError(
 return new JSError(new Node(
 return new JSError(N).make(
 return JSErrorFactory.new JSError(
 return JSError. make ( sourceName, null, lineno, charno, type, arguments ) ; } }
 return JSError. make ( sourceName, null, lineno, charno, type, arguments ) ; } else
 return new JSError ( ) ;
 return new JSError(sourceName, level); }
 return new JSError(sourceName, null);
return new  JSError(\"\n\" +
 return JSError(sourceName),new JSError(
 return new JSErrrorImpl(
 return new SimpleJSError(
 return new JSError((String)
 return JSErrorImpl.makeJSError(
 if ( sourceName == null ) { return null ; } else {
 if ( sourceName == null ) { return null ; }
 return new JSError(null); }
 return new JSError(nodes,
return new JSError(null, null, null, -1,
 return new JSError(sourceName)JSError(
 return new JSErrorInternal(
 return new JSError(0x00,
 return JSError ( sourceName, null, lineno, charno, type, null, arguments ) ; } else,
 return JSError. make ( sourceName, null, lineno, charno, type, null, arguments ) ; } } ;
 return new JSError(sourceName, null); }
 return JSErrorFactory.makeJSError(
 if ( sourceName!= null ) return null ;
 return (JSError)JSError(
 return JSError.class.new JSError(
 return JSError. make ( sourceName, null, lineno, charno, type, null, arguments ) ; } else,
 return JSError ( sourceName, null, lineno, charno, type, null, arguments ) ; } } ;
 return new JSError(sourceName, arguments);
 if ( sourceName == null ) return null ;
 return new JSError(sourceName)new JSError(
 return new JSError(null), make(
 return JSErrorImpl.createJSError(
 return new JSErrorFromSource(
return new  JSError(Nodes.make(),
 return new JSError(new Info(
 return JSError. make ( sourceName, null, lineno, charno, type, null, arguments, null ) ; }
 if (level > 0) {
 return new JSErrorImpl(new JSError(
return new  JSError(1.0,
 if (level!= null) {
 return new JSError().make(
 return new JSError(); }
return new JSError(null, null, null, null,
 return new JSError(0.0,
return new JSError(null, null, -1,
 return new JSError.Impl(
return new JSError(sourceName, n, -1,
 return new JSError(n, 0,
 return new JSError ( sourceName ) ;
 return new JSError(new)JSError(
 return new JSError(String
 return new JSError(baseLocation,
 return JSErrorUtils.createJSError(
 return JSErrorUtils.makeJSError(
 return new JSError(null),new JSError(
 return JSError.getJSError(
 return new JSError(sourceName),JSError(
return new JSError(0, 0, 0, 0,
 return new JSErrorFromString(
return new JSError(0, 0, 0, -1,
 return new JSError(baseName,
return new JSError(sourceName, n, type); make(
 return JSErrorFactory.JSError(
 return new JSError({})(new JSError(
return new JSError(sourceName, n, type, null,
 return new JSError( arguments); }
 return new JSError( sourceName ) }
return new JSError(0, 0, -1,
 return new JSSError(
 return (JSError)new JSError(
return new JSError(0, 0, 0,
return new JSError(sourceName, n, type, arguments,
return new JSError(null, null, null,
 return new JSError ( arguments ) ;
 return new JSError(sourceName, n) }
 if ( sourceName!= null ) return ;
return new JSError(sourceName, null, charno,
 return JSError ( sourceName, n ) ; }
 return JSErrorBuilder.new JSError(
 return new JSError(sourceName).JSError(
 return new JSEError(
 return new JSErrorImpl({
 return JSErrorFactory. createFromJSError(
 return JSError ( sourceName, null, level ) ; }
 return new JSError(SourceLocation).JSError(
return new  JSError(Nodes.make,
 return JSError ( sourceName, n, type ) ; }
return new JSError(null, 0, 0, 0,
return new JSError(null, 0, -1,
return new JSError(sourceName, 0, 0,
 return (JSError) (new JSError(
 return new JSError
 return new JJSError(
 return (String)new JSError(
 if (debug) {
 return new JSource(
return new JSError(sourceName, n, null,
 return (void)new JSError(
return new JSError(null, 0, 0,
 return JSError_new JSError(
 return new JSErrorJSError(
 return (Object)new JSError(
 return new JSRror(
 return new JSError(...) {
 return new DefaultJSError(
 if (level < 0) {
 return new JSEr(
 return new JSError() {
 return new Jse(
 return new JException(
return new JSError(n, type, arguments,
 return JSError().new JSError(
 return jserror(new JSError(
 return new JSError(...) {}
 return new StaticJSError(
 return (T)new JSError(
 return JSErrror.JSError(
 return new JSError({
 return new JSErrror(
return new JSError(0, 0, null,
 return null ; } return newJSError(
 return new JRror(
 return new NullableJSError(
 return New JSError(
 return new static ( ) ;
 return (null)new JSError(
 if (sourceName) {
 return (String) makeJSError(
 return JSError2JSError(
 return JSEARCH.JSError(
 return make(new JSError(
 return new Error ( ) ;
 return new UnrecognizedJSError(
 if (!debug) {
 return new PlainJSError(
 return (String) createJSError(
 return new staticJSError(
 if (isDebug) {
 return new Mirror(
 if (useDefault) {
 return new Info(
 return new JSE(new JSError(
 return (void) (new JSError(
 return new UndefinedJSError(
 return new Bug(
 return new UnusedJSError(
 make(
 return new UnnamedJSError(
 return null; }
 return new JSEerror(
 return new UndocumentedJSError(
 return (new JSError(
 return create(new JSError(
 return (void)^new JSError(
 if (debug)
 if (!debug)
 return new MAKE(
 String sourceName() {
 return null||new JSError(
 return new JSEprror(
 return (null)^new JSError(
 String sourceName() {}
 return (...new JSError(
 return createJSError(
 } else {
 return _new JSError(
 return null; };
 return ()new JSError(
 return null; } }
 return "new JSError(
 return makeJSError(
 return create(
 return build(
 throw(
 build(
return new JSError2(
 throw make(
 return buildJSError(
 return getJSError(
 } } ;
 } }
 throw new
 } ;
 } } }
return  convert(
 throw (new JSError(
 }
 *
