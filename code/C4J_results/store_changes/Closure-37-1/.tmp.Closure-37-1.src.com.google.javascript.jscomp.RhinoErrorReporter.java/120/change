 }
 compiler.report( makeError(message, sourceName, line, lineOffset, defaultLevel));
 compiler.report( makeError(message, sourceName, line, lineOffset, CheckLevel.ERROR));
 compiler.report( makeError(message, sourceName));
 compiler.report( makeError(message, sourceName, line, lineOffset));
 } else { compiler. report ( makeError ( message, sourceName, line, lineOffset, defaultLevel ) ) ;
 } else { compiler. report ( makeError ( message, sourceName, line, lineOffset ) ) ; }
 } else { compiler. report ( makeError ( message, sourceName, line, lineOffset ) ) ;
 } else { compiler. report ( makeError ( message, sourceName, line, lineOffset ) )
 compiler. report ( makeError ( message, sourceName, line, lineOffset, defaultLevel )));
 compiler.report( makeError(message, sourceName, lineOffset));
 } else { compiler. report ( makeError ( message, sourceName, line, lineOffset, defaultLevel ) )
 compiler.report( makeError(message, sourceName, line));
 return JSError. make ( sourceName, line, lineOffset, defaultLevel, PARSE_ERROR, message ) ; }
 } else { compiler. report ( makeError ( message, sourceName, line, lineOffset, CheckLevel. ERROR ) ) ; }
 compiler. report ( makeError ( message, sourceName, line, lineOffset )));
 } else { compiler. report ( makeError ( message, sourceName, line ) ) ;
 compiler.report( makeError(message, sourceName, line, lineOffset, ERROR));
 compiler. report ( makeError ( message, sourceName, line, lineOffset, CheckLevel.ERROR )));
 } else { compiler. report ( makeError ( message, sourceName, line, lineOffset, CheckLevel.INFO ) ) ;
 } else { compiler. report ( makeError ( message, sourceName, line, lineOffset, CheckLevel.WARNING ) ) ; }
 } else { compiler. report ( makeError ( message, sourceName, line, lineOffset, CheckLevel. ERROR ) ) ;
 } else { compiler. report ( makeError ( message, sourceName, line, lineOffset, DefaultLevel ) ) ;
 compiler.report( makeError(message, sourceName, line, lineOffset); });
 } else { compiler. report ( makeError ( message, sourceName, line, lineOffset, CheckLevel. ERROR ) )
 } else { compiler. report ( makeError ( message, sourceName, line ) )
 } else { compiler. report ( makeError ( message, sourceName, line, lineOffset, CheckLevel.WARNING ) ) ;
 } else { compiler. report ( makeError ( message, sourceName, line, lineOffset, CheckLevel.INFO ) )
 compiler. report ( makeError ( message, sourceName, line, lineOffset, defaultLevel ) )
 compiler.report( makeError(message, sourceName, line, lineOffset)); }
 compiler.report( makeError(message, sourceName, line, lineOffset, defaultLevel); });
 compiler.report( makeError(message, sourceName, line, lineOffset, DefaultLevel));
 compiler.report( makeError(message, sourceName, line, lineOffset, CheckLevel.ERROR)); }
 } else { compiler. report ( makeError(message, sourceName, line, lineOffset, defaultLevel)); }
 } else { compiler. report ( makeError ( message, sourceName ) ) ;
 return JSError. make ( sourceName, line, lineOffset, defaultLevel, PARSE_ERROR, message, compiler ) ;
 } else { compiler. report ( makeError ( message, sourceName, line, lineOffset, CheckLevel. ERROR ) ) ; } }
 } else { compiler. report ( makeError ( message, sourceName, line, lineOffset, CheckLevel.WARNING ) )
 } else { compiler. report( makeError(message, sourceName, line, lineOffset, CheckLevel.INFO)); }
 compiler.report( makeError(message, sourceName, line, lineOffset, CheckLevel.ERROR); });
 return compiler. report ( makeError ( message, sourceName, line, lineOffset, CheckLevel.ERROR ) ) ;
 compiler.report( makeError(message, sourceName, line, lineOffset, defaultLevel)); }
 } else { compiler. report( makeError(message, sourceName, line, lineOffset, defaultLevel); }
 compiler.report( makeError(message, sourceName, line, lineOffset, error));
 } else { compiler. report ( makeError ( message, sourceName, line, lineOffset, DefaultLevel ) )
 compiler.report( makeError(message, sourceName, line, lineOffset, CheckLevel.ERROR); }
 } else { compiler. report ( makeError ( message, sourceName, line, lineOffset, CheckLevel ) ) ;
 return JSError. make ( sourceName, line, lineOffset, defaultLevel, PARSE_ERROR, message, null ) ;
 } else { compiler. report ( makeError ( message, sourceName, line, lineOffset, defaultLevel ) ) }
 compiler.report( makeError(message, sourceName); });
 compiler.report( makeError(message, sourceName, lineOffset); });
 compiler.report( makeError(message, sourceName, lineOffset)); }
 } else { compiler. report ( makeError ( message, sourceName ) )
 compiler. report ( makeError ( message, sourceName, line )));
 return JSError. make ( sourceName, line, lineOffset, defaultLevel, PARSE_ERROR, message ) ; } }
 } else { compiler. report ( makeError ( message, sourceName, line, lineOffset, CheckLevel. ERROR ) ) }
 compiler. report ( makeError ( message, sourceName, line ) )
 compiler.report( makeError(message, sourceName); }
 compiler.report( makeError(message); });
 } else { compiler. report ( makeError ( message ) ) ;
 return JSError. make ( sourceName, line )
 compiler.report( makeError(message, line));
 return JSError. make ( sourceName ) ;
 compiler. report ( makeError ( message ) ) ;
 compiler. report ( makeError ( message, sourceName )));
 compiler.report( makeError(message, lineOffset));
 compiler.report( makeError(message, sourceName)); }
 } else { compiler. report ( makeError ( message, sourceName, line ) ) }
 compiler. report ( makeError ( message, line ) )
 } return compiler ;
 return compiler. report ( makeError ( message, sourceName ) )
 compiler.report( makeError(message), message);
 return defaultLevel;
 compiler. report ( makeError ( message ) )
 compiler.report( makeError(message); );
 } return defaultLevel ;
 return new ErrorReporter ( ) ;
 compiler.report( makeError(sourceName); });
 compiler.report( makeError(message); }
 return new Error ( message ) ;
 return null;
 compiler.report( error(message)) ;
 return error ( sourceName ) ;
 compiler. report ( error ( message ) )
 compiler.report( makeError(sourceName); );
 return - 1 ;
 compiler.report( error(message)); }
 compiler.exit(1);
 return new ErrorReporter ( compiler);
 compiler. report ( error ( message )));
 return new Error ( ) ;
 super(compiler);
 compiler.report( 'error' );
 compiler.report( defaultLevel); }
 return null ; return compiler ;
 compiler.report( defaultLevel );
 return - 1 ; }
 } return null ;
 return error(sourceName); }
 } return compiler ; } ;
 return false;
 }
 return this;
 return true;
 return null ; } }
 } } } ; }
 } } ; } }
 } } ; }
 } } ; } static
 } } } } }
 } } static final
 } } else { }
 } } static static
 } static final
 } } ; static
 return;
 } } } }
 } } static
 } static static
 } }
 } } }
 } }
 } static public
 }...
 } static
 return();
 };
 },
...
 }, }
