return containsAny(cs,  searchChars);
 return containsAny(cs, searchChars.toCharArray());
 return true;
 return cs.toCharArray());
return containsAny(cs);
return containsAny(cs, searchChars
 return contains(cs, searchChars.toCharArray());
 return containsAny(searchChars.toCharArray());
 return contains(searchChars.toCharArray());
return containsAny ( cs, searchChars )
 else { return true;
 return searchChars.toCharArray());
 return containsAny, searchChars.toCharArray());
 return containsAny(cs.toCharArray());
 else { return StringUtils.containsAny(cs, searchChars.toCharArray());
 return containsAny(cs));
 return contains(cs));
return containsAny(cs, searchChars); *
return containsAny(cs, searchChars.toCharArray()); *
return containsAny ( cs, searchChars ) ; }
 else { return containsAny(cs);
 return (cs.toCharArray());
 return cs.length());
 return contains(cs);
 return StringUtils.containsAny(cs, searchChars.toCharArray());
return containsAny(cs, searchChars.length()); *
 return contains(cs.toCharArray());
 return cs.contains(searchChars.toCharArray());
 else { return searchChars.toCharArray());
 return (searchChars.toCharArray());
return  cs. containsAny ( searchChars ) ;
return containsAny(cs); *
 return containsAny());
return  cs. containsAny ( searchChars )
 else { return cs.contains(searchChars.toCharArray());
 else { return contains(cs);
 return containsAny(cs, chars));
 else { return containsAny(searchChars.toCharArray());
 return containsAny(chars.toCharArray());
return containsAny ( cs ) ; }
 return containsAnyOf(cs, searchChars.toCharArray());
return containsAny(cs, chars);
 return (true);
 else { return (searchChars.toCharArray());
 return cs.equals(searchChars.toCharArray());
 else { return StringUtils.contains(cs, searchChars.toCharArray());
 else { return cs!= null;
 else { return cs.equals(searchChars.toCharArray());
 else { return StringUtils..containsAny(cs, searchChars.toCharArray());
 else { return Arrays.contains(cs, searchChars.toCharArray());
return  cs. containsAny ( searchChars
 else { return Arrays.containsAny(cs, searchChars.toCharArray());
 return containsAny(cs, null, searchChars.toCharArray());
 return cs.match(searchChars.toCharArray());
 else { return (searchChars.length());
 else { return -1;
 else { return (true);
 return true);
 else { return cs.length());
return containsAny ( cs, searchChars ) ; } }
 if (cs == null) { return false; } if (searchChars!= null) {
 return containsAny(cs, 0, searchChars.toCharArray());
 else { return! searchChars ; }
 return (toCharArray());
 else { return containsAny(cs));
 else { return true; } StringUtils.containsAny(cs, searchChars.toCharArray());
 else { return cs.containsAny(searchChars.toCharArray());
 else if (searchChars!= null) {
 return containsAny((cs));
 else { return (cs.length());
 else { return cs. containsAny ( searchChars )
 else { return true ; } return cs. containsAny ( searchChars ) ;
 if (cs == null) { return false; } if (searchChars!= null)
 if (cs == null) { return false; } if (searchChars) {
return containsAny(cs, searchChars, false); *
 else { return containsAny(chars);
 else { return containsAny(cs, searchChars); } if (searchChars!= null) {
return containsAny(cs, searchChars) == true;
 return containsAny(cs, searchCharstoCharArray());
 if (searchChars!= null) {
return containsAny(cs, searchChars.length(), searchChars);
 else { return true ; } return containsAny ( cs, searchChars ) ;
 StringUtils.containsAny(cs, searchChars.toCharArray());
 if (cs == null) { return true; } if (searchChars!= null) {
 else { return cs. containsAny ( searchChars ) ;
 else { return true; } return Utils.containsAny(cs, searchChars.toCharArray());
 return containsAnyChar(cs, searchChars.toCharArray());
 return Utils.containsAny(cs, searchChars.toCharArray());
return containsAny(cs, searchChars.length);
 else { return containsAny(cs, chars));
return ! searchChars ;
 else { return cs.indexOfAny(searchChars.toCharArray());
 if (cs == null) { return true; } if (searchChars) {
 if (cs == null) { return true; } if (searchChars!= null)
 else { return containsAny(cs, searchChars); } else { return false ; } if ( searchChars!= null ) {
 else { return true ; } return cs. containsAny ( searchChars ) ; }
 else { return containsAny(cs, null, searchChars.toCharArray());
return  true; *
 else { return ( boolean ) searchChars ;
 return (cs.length());
 else { return containsAny(cs, 0, searchChars.toCharArray());
 else { return cs. containsAny ( searchChars
 else { return cs!= searchChars ;
 else { return true ; } return containsAny ( cs, searchChars ) ; }
 else { return ArrayUtils.contains(cs, searchChars.toCharArray());
 else { return true ; } return cs. containsAny ( searchChars )
return  cs!= searchChars ;
 else { return contains(searchChars.toCharArray());
 else { return CharUtils.containsAny(cs, searchChars.toCharArray());
 else { return searchChars;
return containsAny ( cs )
 else { return cs!= searchChars ; }
 else { return containsAny(chars.toCharArray());
return  ( boolean ) searchChars ;
 if (cs == null) { return false; } if (cs!= null) { return cs!= null; }
return containsAny(cs, searchChars, true); *
 return containsAny(cs, false, searchChars.toCharArray());
 else { return CharUtils.contains(cs, searchChars.toCharArray());
 else { return containsAny(cs, searchChars.toCharArray());
 else { return Utils.containsAny(cs, searchChars.toCharArray());
 else { return cs == searchChars ; }
return containsAny(cs, searchChars) == true; *
 return cs.containsAny(searchChars.toCharArray());
 else { return cs.indexOfAnyBut(searchChars.toCharArray());
 if (cs == null) { return false; } if (searchChars!= null) { return true; }
 if (cs == null) { return false; } if (searchChars!= null) { return false; }
return containsAny ( cs, searchChars ) ; } *
 else { return containsAny(cs, chars);
 else { return ( boolean ) cs == searchChars ;
 return containsAny(cs, searchChars));
 else { return!! searchChars ; }
return  ( boolean ) cs == searchChars ;
 else { return containsAny(charSequence cs, searchChars.toCharArray());
return  cs == searchChars ;
 else if (cs!= null) { return true; } else {
 if (cs == null) { return false; } if (cs!= null) { return true; }
 else { return cs.matchAnyBut(searchChars.toCharArray());
 else { return containsAny(CharSequence cs, searchChars.toCharArray());
 if (! containsAny ( cs, searchChars ) ) { return false ; }
 else { return cs.match(searchChars.toCharArray());
 if (cs == null) { return false; } if (searchChars!= null) { return true;
return  cs!= searchChars
 else { return true ; } return cs!= searchChars ;
return containsAny(cs, searchChars.length(), searchChars); *
 if (cs == null) { return false; if (searchChars!= null) {
 if (cs == null) { return false; } if (cs!= null) { return cs!= null;
 else { return cs == searchChars ;
return  cs. containsAny ( ) ;
 if (cs == null) { return false; } if (searchChars)
 else { return containsAny(cs, searchCh));
 return containsAny(cs, searchChars); } else { return containsAny(cs, searchChars.toString()); } else {
 return Arrays.contains(cs, searchChars.toCharArray());
 if (cs == null) { return false; if (searchChars) {
 else { return ( boolean ) true ; }
 else { return!searchChars.toCharArray());
 return containsAnyBut(cs, searchChars.toCharArray());
 else if (searchChars instanceof String) {
 return containsAny(cs, searchChars); } else if (searchChars!= null) {
 else { return cs.containsAnyBut(searchChars.toCharArray());
 if (cs == null) { return false; } if (cs!= null) { return cs!= null }
 return Utility.containsAny(cs, searchChars.toCharArray());
 return containsAnyCharArray(cs, searchChars.toCharArray());
 return containsAny(cs, searchChars); } else { return containsAny(cs, searchChars.toCharArray()); } }
return containsAny ( cs, searchChars, false ) ;
return containsAnyChar ( cs, searchChars ) ;
 else { return StringUtils.any(cs, searchChars.toCharArray());
 else if (searchChars instanceof CharArray) {
return  ( boolean ) cs!= searchChars ;
 else { return true ; } return cs == searchChars ; }
 else { return containsAnyChar(cs, searchChars.toCharArray());
return  cs == searchChars
 if (cs == null) { return true; } if (searchChars)
 return containsAny(charSequence cs, searchChars.toCharArray());
 else if (cs == null) { return true;
return  cs. matchesAny ( searchChars )
 else { return containsAny(cs, searchChar.toCharArray());
 if (cs == null) { return false; } if (cs!= null) { return cs. containsAny ( ) ; }
 if (cs == null) { return false; } if (searchChars instanceof String) {
 return! containsAny(cs, searchChars.toCharArray());
 return Arrays.containsAny(cs, searchChars.toCharArray());
 if (cs == null) { return false; } if (cs!= null) { return cs. length > 0 ; }
 else { return!null(searchChars.toCharArray());
 if (searchChars!= null)
 else { return containsAny(charSequence, searchChars.toCharArray());
 return containsAny(cs, searchChars); } else { return containsAny(cs, searchChars).toCharArray()); } }
 else { return ( boolean ) cs!= searchChars ;
 if (cs == null) { return true;
 return cs, searchChars.toCharArray());
 return cs.matchAnyBut(searchChars.toCharArray());
 else { return ( boolean ) cs == searchChars ; }
 else { return (int)searchChars);
 if (cs!= null) {
 return containsAny*(cs, searchChars.toCharArray());
 else { return cs == null;
 return containsAny(cs, "", searchChars.toCharArray());
 else { return true ; } return cs == searchChars ;
 if (cs == null) { return false; } if (searchChars!= null) { return true };
 if (cs == null) { return false; } if (searchChars!= null) { return true }
 else { return ( boolean ) cs. containsAny ( searchChars
return  ( boolean ) cs == searchChars
 return containsAny(cs, searchChars); } else { return containsAny(cs, searchChars.toString()); } }
 else { return true; } return Utility.containsAny(cs, searchChars.toCharArray());
 else { return containsAny(chars));
return containsAny(cs, searchChars.toCharArray()) == -1;
 return containsAny(cs, searchCh));
return containsAny(cs, searchChars) == false; *
 if (cs == null) { return false; } if (cs!= null) { return true; } else {
 else { return containsAny(cs, false, searchChars.toCharArray());
 if (cs == searchChars) return true;
 else { return true ; } return cs!= searchChars ; }
 if (cs == null) { return false; } if (cs!= null) { return cs == null; } else {
 return containsAny(cs(cs));
 return containsAny(cs, searchChars); } else { return containsAny(cs, searchChars, toCharArray()); } }
 return (true));
 else { return contains(cs));
return containsAny(cs, searchChars) *
return containsAny(cs, search);
 if (cs == null) { return true; } else { return false; }
return containsAny(); *
 else { return ArrayHelper.contains(cs, searchChars.toCharArray());
 else { return!searchChars;
 else { return (int)(cs.toCharArray());
 else { return!empty(searchChars.toCharArray());
 return containsAny(cs, searchChars); } else { return containsAny(cs, searchChars.toCharArray()); } else
 else { return!(searchChars.length());
 if (cs!= null) { return cs!= null; }
return containsAnyAll ( cs, searchChars ) ;
return  cs == searchChars ; }
 else { if (searchChars) return true;
return containsAny(cs, searchChars) == false;
 else { return containsAny(searchChars);
 else { return true ; } return false;
 return containsAny(cs, searchChars); } else { return containsAny(cs, searchChars).toString()); } }
return containsAnyChar ( cs, searchChars ) ; }
 if (cs == null) { return false; } if (cs!= null)
 else { return!(searchChars.toCharArray());
return containsAny(cs, searchChars.toCharArray(), false); *
 else { return StringUtils.match(cs, searchChars.toCharArray());
 else { return cs.equalsAny(searchChars.toCharArray());
 return containsAnyAny(cs, searchChars.toCharArray());
 else { return cs.equalsAnyBut(searchChars.toCharArray());
 else { return StringUtilsImpl.containsAny(cs, searchChars.toCharArray());
 return (searchChars.length());
return containsAny(cs, searchChars); * *
 return cs.indexOfAny(searchChars.toCharArray());
 if (cs == null) { return false; } if (cs) {
return containsAnyChar ( cs, searchChars )
 else { return (int) (searchChars);
 return! containsAnyOf(cs, searchChars.toCharArray());
 if (cs == null) { return false; } if (cs!= null) { return true;
 else { return Arrays.match(cs, searchChars.toCharArray());
 else { return cs.hasAny());
return ! ( cs == searchChars )
 else { return StringUtilsHelper.containsAny(cs, searchChars.toCharArray());
 else { return true ; } else { return false ; } return true ; }
 else { return (char)searchChars.toCharArray());
 return containsAny(charSequence, cs, searchChars.toCharArray());
 else if (searchChars!= null)
return ! ( cs == null ) ;
 else { if (searchChars!= null) {
 else { return!searchChars.length());
 else { return * searchChars.toCharArray());
return containsAny(cs, * searchChars); *
 return StringUtils.contains(cs, searchChars.toCharArray());
 else { return * true;
 else { return (int) cs;
 else { return cs.matchAllOf(searchChars.toCharArray());
return  ( boolean ) cs == searchChars ; }
 if (cs == null) { return true; } else {
 else { return containsAny());
 else { return StringUtils.ains(cs, searchChars.toCharArray());
 else { return * searchChars;
 return (cs.isEmpty());
 return cs.indexOfAnyBut(searchChars.toCharArray());
return containsAny(cs,  searchChars) ; } return false ; }
return containsAny ( searchChars )
 return containsAny(cs, searchChars); } else { return containsAny(cs, searchChars.toString()); } else
 if (cs!= null) { return true; } else {
 else { return searchChars!= null;
 else { return (searchChars!= null());
return containsAny(cs, searchChars.length(), searchChars, false); *
 else { return true; } return String.containsAny(cs, searchChars.toCharArray());
 else if (searchChars instanceof String[]) {
 return (!searchChars.toCharArray());
 return containsAny(cs, searchChars); } else { return containsAny(cs, searchChars.toString()); } *
 return!searchChars.toCharArray());
return  ( boolean ) true ;
 else { return Arrays.existsAny(cs, searchChars.toCharArray());
 else { return ArraysUtils.containsAny(cs, searchChars.toCharArray());
 else { return (bool) cs;
 if (cs!= null) { return true; }
 return StringUtils.containsAnyAny(cs, searchChars.toCharArray());
 else { return containsAny((cs));
 if (cs == null) { return false; } if (cs!= null) { return cs!= null; } *
 else { return true ; } return cs == searchChars ; } }
 return ArrayHelper.containsAny(cs, searchChars.toCharArray());
 else { return cs.contains(cs);
 if (cs == null) { return false; } if (cs!= null) { return cs == null; } *
return containsAnyAll ( cs, searchChars ) ; }
return containsAny(cs,  searchChars) ; } return true ; }
return containsAny(cs, searchChars.toCharArray()) == true;
 return containsAny(cs, searchChar.toCharArray());
 else { return true; } return Array.containsAny(cs, searchChars.toCharArray());
 else { return true);
 if (cs == null) { return true; } else { return false;
 return containsAny(cs, -1, searchChars.toCharArray());
 else { return matchChars;
return containsAny(cs, searchChars.toCharArray()), searchChars); *
 else { return cs.equals(null,searchChars.toCharArray());
 else { return containsAny(cs, searchCh);
 else { return true ; } else { return false ; } return true ; } }
 else { return containsAny(cs, searchChar);
 return _containsAny(cs, searchChars.toCharArray());
 else {
 if (cs == null) { return false; } if (cs == null) { return false; } return true; }
return  ( boolean ) cs ; }
 return StringUtils.containsAnyOf(cs, searchChars.toCharArray());
 else { return containsAny(searchCharstoCharArray());
return containsAny(cs, searchChars.toCharArray()), searchChars);
 else { return! containsAny(cs, 0, searchChars.toCharArray());
 else { return cs.isEmpty());
 else { return containsAny(cs, searchCh.toCharArray());
 else { return! containsAny(searchChars);
return containsAnyAll ( cs, searchChars )
 if (cs == null) { return false; } if (cs!= null) { return true; } return false; }
 if (cs == null) { return false; } if (cs == null) { return false; } return true; } *
 else { return Strings.containsAny(cs, searchChars.toCharArray());
 return containsAny((cs, chars));
 else if (cs!= null) { return true; } else
 else { return true ; } return cs!= null ; }
 return containsAny(chars);
 else { return true; } return Arrays.containsAny(cs, searchChars.toCharArray());
return  cs!= searchChars ; }
 return containsAny(chars));
return containsAny(cs, searchChars.length() * searchChars); *
 return containsAnyImpl(cs, searchChars.toCharArray());
 else { return cs.contains(search);
 else { return (cs.isEmpty());
 else { return true ; } else { return false ; } return true ;
return  ( boolean ) cs. containsAny ( ) ;
 else { return containsAny(cs, searchCharacters.toCharArray());
 if (cs == null) { return true; } if (cs == null) { return false; } return true; }
 if (cs == null) { return false; } else {
 else { return cs.indexOf(searchChars.toCharArray());
 if (cs == null) { return false; } if (cs!= null) { return true; } return false; } *
 if (cs == null) { return false; } if (cs!= null) { return cs!= null; } else
 else { return true ; } return cs == searchChars ; } *
 else { return (chars.length());
 return cs.hasAny());
 if (cs!= null) { return false; }
return  ( boolean ) cs!= null ; }
 else { return containsAny(cs(cs));
 if (cs == null) { return true; } if (cs == null) { return false; } return true; } *
 else { return! cs;
 else { return (char) (searchChars.toCharArray());
return containsAny(cs, searchChars.length() * searchChars);
 else { return match(cs, chars);
 return (cs.contains());
 return isContainsAny(cs, searchChars.toCharArray());
 else { return true; }
return containsAny(cs, searchChars.toCharArray()) == -1; *
 if (searchChars) {
 if (cs == null) { return false; } if (cs!= null) { return cs == null; } else
 else { return true ; } else { return false ; } } }
 else { return (int)searchChars.toCharArray());
 return! containsAny(cs, 0, searchChars.toCharArray());
 else { return equals(searchChars.toCharArray());
 else { return Arrays.isAny(cs, searchChars.toCharArray());
 else { return ( boolean ) cs == searchChars
 else if (cs!= null) {
 else { return (isEmpty(searchChars));
 if (cs == null) { return false; } if (cs!= null) { return true }
 else { return containsAnyBut(cs, searchChars.toCharArray());
 return containsAny(*(cs));
 else { return ((searchChars).toCharArray());
 return containsAny(cs*, searchChars.toCharArray());
 return StringUtils.any(cs, searchChars.toCharArray());
 else { return true; } return Character.containsAny(cs, searchChars.toCharArray());
 if (cs == null) { return false; } if (searchChars!= null)) {
 else { return true ; } else { return false ; } } } ;
return containsAny(cs, searchChars.length(), false); *
 return matches(cs.toCharArray());
return containsAny(cs, searchChars) ; } } ;
 return containsAnyChars(cs, searchChars.toCharArray());
 else { return get(cs.length());
 else { return ArrayUtils.containsAny(cs, searchChars.toCharArray());
 if (cs == null) { return true; } else { return false }
 else { return true; } return By.containsAny(cs, searchChars.toCharArray());
 else { return (contains(cs));
return containsAny(cs, searchChars.length(), searchChars, true); *
 if (cs == null) { return false; } if (cs!= null) { return true};
 else { return "StringUtils.containsAny(cs, searchChars.toCharArray());
 else { return CharSequenceUtils.any(cs, searchChars.toCharArray());
 return cs.isEmpty());
 else { return (isAny(cs, chars));
 else { return containsAny(cs, searchStr.toCharArray());
 return matchesAny(searchChars.toCharArray());
 if (cs == null) { return false; } if (cs!= null) { return cs!= null ; } }
 else return true;
 else { return true ; } else { return false ; } return true ; } ;
 else { return true ; } return cs!= null ; } } ;
 return ArrayHelper.contains(cs, searchChars.toCharArray());
 return (cs.hasAny());
return containsAny(cs, searchChars) ; } return containsAny ( cs ) ;
 else { return (cs.toCharArray());
 else { return (cs.hasAny());
 else { return chars.contains(searchChars.toCharArray());
 else { return true ; } return true ; } }
 * StringUtils.containsAny(cs, searchChars.toCharArray());
 else { return!cs.length());
 else { return containsAnyCharArray(cs, searchChars.toCharArray());
return  ( boolean ) cs!= searchChars ; }
 else { return true ; } else { return true ; } } } ;
 else { return contains(cs, chars);
 else { return!null;
 else { return true ; } else { return false ; } return false ; }
return containsAnyChar ( cs, searchChars
 return! containsAny(cs, null, searchChars.toCharArray());
 else { return * cs;
 else { return containsAnyOf(cs, searchChars.toCharArray());
 else { return true ; } return cs. containsAny ( searchChars));
 else { StringUtils.containsAny(cs, searchChars.toCharArray());
 else { return searchChars);
 else { return true ; } else { return false ; } } return false ; } ;
 else { return String.contains(cs, searchChars.toCharArray());
 if (cs == null) { return true; } else { return false };
return containsAny ( cs, "" ) ;
 if (cs == null) { return false; } if (searchChars!= null) { } *
 else { return true ; } else { return false ; } return true ; } } ;
 return! containsAnyChar(cs, searchChars.toCharArray());
 return containsAny(searchCharstoCharArray());
 else { return! containsAnyOf(cs, searchChars.toCharArray());
 else { return true ; } return true;
 else { return Arrays.excludeNulls(cs, searchChars.toCharArray());
return  ( boolean ) true ; }
 else { return CharSequenceUtils. contains(cs, searchChars.toCharArray());
 else { return true ; } else { return false ; } } return false ; } }
return containsAny(cs, searchChars.length(), searchChars) == true;
 else { return containsAny(cs, searchCharacters);
return containsAny(cs, searchChars, false) ; }
 else { return (isEmpty(chars));
 return StringUtils.match(cs, searchChars.toCharArray());
 else { return containsAny(cs, new String());
 return check(cs.toCharArray());
 else { return containsAny(searchChars));
return containsAny(cs, searchChars.toCharArray(), true); *
return  cs!= null ;
 else { if (searchChars!= null) { }
 return!empty(searchChars.toCharArray());
 return containsAny((cs, searchCh));
 else { return true ; } else { return false ; } } } ) ; }
 else { return cs.containsAnyOf(searchChars.toCharArray());
 return containsAny(cs, searchCharacters.toCharArray());
 else { return true ; } return false ; } }
 else { return matches(cs);
 else { return true ; } return true ; } *
 return containsAny(cs*.toCharArray());
 return isAny(cs, chars));
return containsAny(cs, searchChars) == true; * *
return containsAny(cs, searchChars) ; } } ) ;
 else { return cs.isEmpty(());
 else { return (cs.contains(cs));
 else { return cs == "";
return containsAny(cs, searchChars.length(), searchChars, 0); *
 if (cs == null) { return false;
 else { return any(cs);
 else if (cs == null) { return false;
 return CharUtils.containsAny(cs, searchChars.toCharArray());
 match(cs, searchChars.toCharArray());
 else { return cs.match(cs);
 if (cs!= null) { return cs!= null; } *
 else { return searchChars!= -1;
 else { return (true));
 return containsAnySearch(cs.toCharArray());
 return containsAll(chars.toCharArray());
return containsAny(cs, searchChars.toCharArray())? true : false ; } return false ; }
 else { return (int)cs.charCount());
return containsAny(cs, searchChars) ; } return false ; } }
 return containsAny(cs(*));
return containsAny(cs, searchChars.length()) == -1;
 return new CharSequence(searchChars.toCharArray());
return containsAny(cs, searchChars.length(), chars); *
 else { return containsAny(cs, chars[]));
return  cs!= null ; }
return containsAny(cs, searchChars) ; } } ; }
 if (cs!= null) { return true;
return containsAny(cs, searchChars.toCharArray())!= -1;
return containsAny(cs, searchChars) ; } return false ; } ;
 else { return!searchChars);
 return contains((cs));
 else { return (-1);
 else { return cs == searchChars + 1;
return containsAny(cs, searchChars.toCharArray()) == false;
 if (cs!= null) { return false;
 return true, searchChars.toCharArray());
return containsAny(cs, searchChars.length(), searchChars).length(); *
return containsAny(cs,  searchChars) ; } } ) ; }
 else if (searchChars!= "") {
return containsAny(cs, searchChars.length());
return containsAny(cs, searchChars.length(), searchChars).length() * *
 return Array.containsAny(cs, searchChars.toCharArray());
 return containsAnyFrom(cs, searchChars.toCharArray());
return containsAny(cs, searchChars); } return containsAny ( cs ) ; }
 return cs.in(searchChars.toCharArray());
return containsAny(cs, searchChars) ; } return! searchChars ;
 if (cs!= null) { return cs!= null; } else
return containsAny(cs, searchChars.toCharArray(), 0, searchChars);
return containsAny(cs, searchChars.length(), true); *
 else { return cs * searchChar;
return containsAny(cs, searchChars.length(), searchChars) ; }
 return String.containsAny(cs, searchChars.toCharArray());
return containsAny(cs, searchChars.length(), searchChars.length()); * *
 else if (cs!= null) { return true; } else { }
 else { return (searchChars == null());
 return cs.array(searchChars.toCharArray());
 else { return (searchChars == trim());
return containsAny(cs, searchChars.toCharArray()).length() == 0; *
 return scan(cs.toCharArray());
 return cs.anyAny());
return containsAny(cs, searchChars.length() * searchChars) *
 if (cs == null) { return false; } return true; }
 return cs.search(searchChars.toCharArray());
return containsAny(cs, searchChars, false) ; } *
return containsAny(cs, searchChars.toCharArray(true)) ; } return false ; }
return containsAny(cs, searchChars.toCharArray(true)) ; } return false ; } }
return containsAny(cs, searchChars.toCharArray()); } return containsAny ( cs ) ; }
return containsAny(cs, searchChars.toCharArray()) ; } return false ; } }
return  searchChars ;
return containsAny(cs, searchChars.toCharArray()).length() > 0; *
return containsAny(cs, searchChars.length()); * *
 return Strings.containsAny(cs, searchChars.toCharArray());
 else { return match(cs, cs);
 else { return (cs);
return containsAny(cs, searchChars.length(), searchChars.length()); *
return containsAny(cs, searchChars) == true ; } *
 return ok(cs.toCharArray());
return containsAny(cs, searchChars.toCharArray(), false) ; } return false ; } }
return containsAny(cs, searchChars.toCharArray(), 0); *
 return cs.isEmpty(());
 if (matchChars) {
 return Arrays.match(cs, searchChars.toCharArray());
return containsAny(cs, searchChars.length() * 2); *
 else { return CharArray.containsAny(cs, searchChars.toCharArray());
return containsAny(cs, searchChars.toCharArray(), false) ; } return false ; }
return containsAny(cs, searchChars.length(), searchChars, false); * *
return containsAny(cs, searchChars.toCharArray(), null) ; } return false ; } }
return containsAny(cs, searchChars) ; } return true ; } }
 if (cs!= null) { return true; } *
return containsAny ( cs, chars )
return containsAny(cs, searchChars.toCharArray()); return true ; }
return  true ; } *
return containsAny(cs, searchChars.toCharArray()).length() > 0;
return containsAny(cs, searchChars.toCharArray(null)) ; } return false ; } }
return containsAny(cs, searchChars) ; } return containsAny ( ) ; }
return containsAny(cs, searchChars.toCharArray(false)) ; } return false ; } }
 else { return Utility.containsAny(cs, searchChars.toCharArray());
 return searchChars(toCharArray());
return containsAny(cs, searchChars.toCharArray(), 0, -1); *
return containsAny(cs, searchChars.toCharArray(), null) ; } return false ; }
 else { return Array.containsAny(cs, searchChars.toCharArray());
return containsAny(cs, searchChars.toCharArray(false)) ; } return false ; }
return containsAny(cs, searchChars.split(\"")); *
 else { return searchChars == ",";
return containsAny(cs, searchChars.toCharArray()); * *
return containsAny(cs, searchChars.toCharArray()) ; } return false ; } ;
return containsAny(cs, searchChars.toCharArray(), 0, 0); *
return containsAny(cs, searchChars.toCharArray())? true : false ; return false ; }
return containsAny(cs, searchChars) ; } return true ; } ;
return containsAny(cs, searchChars) ; } return - 1 ; }
return containsAny(cs, searchChars, false) ; } return false ; }
return containsAny(cs, searchChars.toCharArray(), null); *
 else { return searchChars!= ",";
 else if (cs!= null) { return true; } else,
 else { return CharSequences.containsAny(cs, searchChars.toCharArray());
return containsAny(cs, searchChars.toCharArray(null)) ; } return false ; }
return containsAny(cs, searchChars.toCharArray()) ; } return false ; }
return containsAny(cs,  searchChars, false) ; } } ;
return containsAny(cs, searchChars.toCharArray()) || (cs == null) == false;
return containsAny(cs, searchChars.length(), searchChars) *
 return charsContains(cs, searchChars.toCharArray());
return containsAny(cs,  searchChars) ; } return false; *
return containsAny(cs, searchChars.toCharArray(true)) ; } return true ; }
 else { return true;
return containsAny(cs, searchChars.length); *
return containsAny(cs, searchChars.length()) == true;
return containsAny(cs, searchChars.toCharArray()) ; } return true ; }
return containsAny(cs, searchChars) ; } return false ; } } ;
return containsAny(cs, searchChars.toCharArray(), false) ; } return true ; }
return containsAny(cs, searchChars)? true : false ; } } ; }
return containsAny(cs, searchChars, false) ; } return false ; } }
return containsAny(cs, searchChars.length()) == 0;
return containsAny(cs, searchChars.toCharArray(true)) == -1;
return containsAny(cs, searchChars.toCharArray()), false); *
return containsAny(cs, searchChars.toCharArray()).length() == 0;
return  true ; }
return containsAny(cs, searchChars.toCharArray())? true : false ; } } ) ;
return containsAny(cs, searchChars.toCharArray())? true : false ; } return true ; }
return containsAny(cs, searchChars.toCharArray(true)) ; } return false ; } ;
 return Character.containsAny(cs, searchChars.toCharArray());
 return cs.contains(search);
return containsAny(cs, searchChars.toCharArray())!= null;
return containsAny(cs,SearchChars
return containsAny(cs, searchChars.toCharArray()); return true; *
return containsAny(cs, searchChars.toCharArray()) || (cs == null) return false;
 search(cs, searchChars.toCharArray());
 else if (cs!= null) { return true; } else, {
return containsAny(cs, searchChars.toCharArray(), false) ; } return false ; } ;
 if (cs!= null) { return true; } else
 if (cs == null) { return false; } return true; *
return containsAny(cs, searchChars.toCharArray(), 0) == -1;
 return (false));
return containsAny(cs, searchChars, false) ; } return true ; }
return containsAny(cs, searchChars.length(), false);
return containsAny(cs, searchChars.toCharArray()) ; } return true ; } }
return containsAny(cs, searchChars.toCharArray(), null) ; } return false ; } ;
return containsAny(cs, searchChars.toCharArray(), true); } return false ; } }
return containsAny(cs, searchChars.toCharArray()) == 0; *
 else { return (true | false);
 return cs".length());
return containsAny(cs, searchChars.toCharArray(null)) == -1;
return containsAny(cs, searchChars) ; } return true ; } } ;
 return (chars.toCharArray());
 return matches(cs, searchChars.toCharArray());
return containsAny(cs, searchChars.split("\"")) == true;
return containsAny(cs, searchChars.toCharArray(), null) ; } return true ; } }
 else return contains(cs));
return containsAny(cs, searchChars.toCharArray(false)) ; } return false ; } ;
return containsAny(cs, searchChars.toCharArray(0, 1)) ; } return false ; }
return containsAny(cs, * searchChars);
return containsAny(cs, searchChars.toCharArray()) == true ; } return false ; }
return containsAny(cs, searchChars.toCharArray())? true : false ; } } ) ; }
return containsAny(cs, searchChars.toCharArray(), true); } return false ; }
 return cs.any());
return containsAny(cs, searchChars.toCharArray()); return true;
 containsAny(cs, searchChars.toCharArray());
return containsAny(cs, searchChars.toCharArray(), 0, true); *
return containsAny(cs, searchChars.toCharArray()) == false ; } return false ; }
 return ArrayHelper.any(cs, searchChars.toCharArray());
return containsAny(cs, searchChars.toCharArray())? true : false ; } } ; }
 return matches(cs);
return containsAny(s, searchChars);
return containsAny(cs, searchChars.toCharArray() + 1); *
 return searchChars.(toCharArray());
return containsAny(cs, searchChars.toCharArray()) ; } return false ; } } ;
return containsAny(cs, searchChars.toCharArray()) == 0;
return containsAny(cs, searchChars.toCharArray()).length == 0;
 else if (cs!= null) { return true; } else, *
return containsAny(cs, searchChars.toCharArray()) ; } return true ; } ;
 else { return containsAny, searchChars.toCharArray());
return containsAny(cs, searchChars.length()); } *
 * return true;
return containsAny(cs, searchChars.toCharArray()) == false ; } return true ; }
 return Pattern.containsAny(cs, searchChars.toCharArray());
return containsAny(cs, searchChars.toCharArray()).findIndexOfAnyBut(cs);
 return CharSupport.containsAny(cs, searchChars.toCharArray());
return containsAny(cs, searchChars.toCharArray()); return true ; } }
return containsAny(cs, searchChars.toCharArray()) ; } return false ; } } }
 return (-1);
 return (cs);
return containsAny(cs, searchChars.toCharArray(cs)) ;
 return matches(cs));
return containsAny(cs, searchChars.toCharArray(null)); *
return  cs == null ;
return containsAny(cs, chars); *
 return matchesAny(cs, searchChars.toCharArray());
return containsAny(cs, searchChars.toCharArray()).findIndexOfAnyBut()); *
return containsAny(cs, searchChars.toCharArray(true)) == true;
 if (searchChars!= null)) {
return containsAny(cs, searchChars.toCharArray(charArray)) ;
return containsAny(cs, searchChars.toCharArray()); return true; } *
return containsAny(cs, regex);
return containsAny(cs, searchChars.toCharArray(), 0, 0) ;
return containsAny(cs, searchChars.toCharArray(null)) == true;
return containsAny(cs, searchChars.toCharArray()), true); *
 return any(cs);
return containsAny(cs, searchChars.toCharArray(null)) ; } return false ; } } ;
return containsAny(cs, searchChars.toCharArray(true)); *
return containsAny(cs) *
return containsAny(cs, searchChars.toCharArray(), 0) == 0; *
return containsAny(cs, searchChars.toCharArray()); } return containsAny ( cs, chars )
 return contains(*cs));
 return matches(searchChars.toCharArray());
return containsAny(cs, searchChars.toCharArray(false)); *
 return containsAny({cs));
return containsAny(cs, searchChars.toCharArray(), false); * *
return containsAny(cs, searchChars.toCharArray(true)) ; } return false ; } } ;
 return get(cs());
 return (!cs.toCharArray());
return containsAny(cs, searchChars.toCharArray(null)) ; } return false ; } } }
return containsAny(cs, searchChars.toCharArray() + 1);
return containsAny(cs, searchChars.toCharArray()).length() > 0; } *
return containsAny(cs, searchChars.*);
return containsAny(cs, searchChars.toCharArray()).length > 0;
return containsAny(cs, searchChars.toCharArray()).length() == 0; } *
return containsAny(cs, searchChars.toCharArray(true)) ; } return false ; } } }
return containsAny(cs, searchChars.toCharArray(charArray)); *
 matches(cs, searchChars.toCharArray());
return containsAny(cs, searchChars.toCharArray() ) ; } return false ; } ; }
return containsAny(cs, searchChars.toCharArray()) == false ; } return false ;
 (cs));
return containsAny(cs, searchChars.toCharArray()) == false ; } return false ; } } ;
return containsAny(cs, searchChars.toCharArray()); } return containsAny ( cs, ) ;
return containsAny() *
 else { return true; } *
return containsAny(cs, searchChars.toCharArray()); } return containsAny ( cs, null )
 check(cs));
 return contains($cs));
return containsAny(cs, searchChars.toCharArray(true)) ; } } ) ;
return containsAny(cs, searchChars.toCharArray()) == false ; } return false ; } } }
 return ((cs).toCharArray());
 check(cs, searchChars.toCharArray());
return containsAny(cs, searchChars.toCharArray() ) ; }
 return! cs;
return containsAny; *
return containsAny(cs, searchChars.toCharArray(), false);
return containsAny(cs, searchChars.toCharArray(), false) ; } } ; }
return containsAny(cs, searchChars.toCharArray()) == 0; * *
 return containsAll(searchChars.toCharArray());
 else return contains(searchChars.toCharArray());
 return "containsAny(cs, searchChars.toCharArray());
 else { return true }
 if (searchChars!= null))
return containsAny(cs, searchChars.toCharArray() ) ; } return false ; } } ; }
return containsAny(cs, searchChars.toCharArray(true)) ; } } ; }
return containsAny(cs, searchChars());
 else return contains(cs, searchChars.toCharArray());
return containsAny(cs, searchChars.toCharArray()) == false; * *
 return ((cs));
return containsAny(cs, searchChars.toCharArray(), null) ; } } ; }
return containsAny(cs, searchChars.toCharArray(true)) ; }
return containsAny(cs, searchChars.toCharArray()) * *
 return match(cs, searchChars.toCharArray());
 return any(cs, searchChars.toCharArray());
 else { return true; } } *
 cs.toCharArray());
 return!cs.toCharArray());
 if (searchChars!= null).
return containsAny(cs, searchChars.toCharArray()) == -1 ; }
return containsAny() ;
return containsAny(cs, searchChars.toCharArray())) ; *
return containsAny(cs, searchChars.toCharArray()); } *
 else if (searchChars!= null))
 return equals(cs, searchChars.toCharArray());
 return (true, searchChars.toCharArray());
 return hasAny());
 check(cs());
 return false, searchChars.toCharArray());
 else { return true; } }
 return true; } *
return containsAny(cs, searchChars) * *
 contains(cs, searchChars.toCharArray());
 return "(true);
 return true; * } *
 return matches.size());
(cs);
return containsAny(cs, searchChars.toCharArray(true));
return containsAny(cs, searchChars.toCharArray(true)) ; } } } }
return containsAny(cs, searchChars.toCharArray(...));
return containsAny(cs, searchChars.*()); *
 return *containsAny(cs, searchChars.toCharArray());
return containsAny(cs), searchChars);
return containsAny(cs, searchChars.toCharArray()) == false; } * *
return containsAny(cs, searchChars.toCharArray()) ; } } ; }
return containsAny(cs, searchChars.*());
return containsAny(cs, searchChars.toCharArray()) == true ; } } ;
return containsAny(cs, searchChars.toCharArray()) == false ; } } ;
 else { return true };
 return any(searchChars.toCharArray());
 return matches());
return containsAny(cs, searchChars.strip()); *
 return containsAll(cs, searchChars.toCharArray());
 checkAny(cs, searchChars.toCharArray());
return containsAny(searchChars
 return contains());
 assert(searchChars.toCharArray());
return containsAny(cs, searchChars.split()); *
 cs.length());
 return contains(*, searchChars.toCharArray());
 return equals(searchChars.toCharArray());
 boolean containsAny(cs, searchChars.toCharArray());
 return -1;
(cs.toCharArray());
 else { return 1;
 return * true;
 assert(cs());
 * else {
return containsAny(cs,  SearchChars);
 return count());
 return containAny(cs, searchChars.toCharArray());
 check(cs.toCharArray());
 return 0, searchChars.toCharArray());
 return match(searchChars.toCharArray());
 return cs(toCharArray());
 compare cs, searchChars.toCharArray());
 matches(toCharArray());
 return cs.(toCharArray());
return containsAny ; }
 } ());
 match(toCharArray());
 } }));
return containsAny(cs, searchChars.toCharArray()) *
 return true());
 return (());
 else { } *
 callback(());
return  true. *
 return chars.toCharArray());
return  true(); *
 return true; }
 return true; *
return containsAny(cs,  *);
 return ();
return containsAny(cs, searchChars.strip());
 * *
 $(cs.toCharArray());
 else { *
 return includes(cs, searchChars.toCharArray());
return containsAny(cs, searchChars.toCharArray()) * ;
 else, {
 else {containsAny(cs, searchChars.toCharArray());
return containsAny(cs)); *
return  true();
 else, *
return containsAny(cs()); *
return  true *
 *
 return cs;
return containsAny(cs());
return containsAny(cs, searchChars)); *
return containsAny(cs, searchChars()); *
 return false;
 return 1;
 else,
 * else
