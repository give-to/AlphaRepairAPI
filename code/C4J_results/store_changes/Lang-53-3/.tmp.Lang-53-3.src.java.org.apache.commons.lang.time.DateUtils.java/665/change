val. setTime ( time ) ;
 } else { val.setTime(date);
val = null ;
 done = true;
val. reset ( ) ;
 } else {
val = null
val. setTime ( time ) ; }
val. clear ( ) ;
 } else { date. setTime ( time ) ;
 }
val. resetTime ( ) ;
val. setTime ( time )
 if (field == Calendar.DATE) { done = true;
val = { } ;
 if (field == Calendar.DATE) {
 } else { date. setTime ( time ) ;
val.setTime(date.getTime());
val.setTime(time, date);
 if (field == Calendar.DATE)
 } return;
val. setTime ( time ) ; } }
val. setTime ( time ) ; } return ;
val.setTime(date.getTime()); } return ;
val.setTime(date); }
val. set ( date. getTime ( ) )
 } val.setTime(date);
 } else { date. setTime ( time )
 } else { time = 0 ;
val.reset(); }
 if (field == Calendar.TIME)
 } if ( field == Calendar.DATE ) { val. setTime ( date ) ; } if ( field == Calendar.TIME ) {
val.setTime(date.getTime()); }
val. add ( date. getTime ( ) )
 val.setTime(date);
 } if ( field == Calendar.DATE ) { val. setTime ( date ) ; if ( field == Calendar.MONTH ) {
val = null ; }
 } else { val. setTime ( date. getTime ( ) ) ; if ( field == Calendar.DATE ) {
 date. setTime ( time ) ;
 val.add(date);
 if (field == Calendar.DATE) { date.setTime(time);
 if (field == Calendar.DATE) { date.setTime(date); }
val. setTime ( time ) ; return ;
 } else { date. setTime ( time ;
val. setTime ( time ) ; } } }
 } } else { val.setTime(date);
 if (field == Calendar.DATE) { date.setTime(time); }
val. set ( field, date ) ;
val. setTime ( time ;
val.setTime(date.getTime()); time = 0 ;
 } else { val. setTime ( date. getTime ( ) ) ; } if ( field == Calendar.DATE ) {
 } else { val. setTime ( date. getTime ( ) ) ; if ( field == Calendar.TIME ) {
val. set ( field, time ) ;
val.setTime(date) ; } return ;
val.setTime(date.getTime()); } }
 time = time - (date.getTime());
val. add ( date, done ) ; }
val. set ( field, date ) ; }
 } else { date. setTime = time;
 } else { date. setTime ( );
 if (field == Calendar.DATE) { date.resetTime(); }
 date. setTime ( time ) ; } return ;
 if (field == Calendar.DATE) { date = null; }
 } else { time = 0 ; }
val.setTime(date.getTime(), time); } return ;
 } else { date. setTime ( time )
val. set ( date, time ) ;
 } else { val. setTime ( date. getTime ( ) ) ; } if ( field == Calendar.TIME ) {
 } else { val. setTime ( date. getTime ( ) ) ; } } else {
 if (field == Calendar.DATE) { done = true; }
val. set ( date, time ) ; }
 if (field == Calendar.DATE) { date.setTime(date); } }
val.setTime(date.getTime()); } return done ;
val. setTime ( time ) ; return ; }
 } else { resetTime ( );
 if (field == Calendar.MOND) { done = true;
 } else { date. reset ( ) ;
 } else { date. time = time;
 if (field == Calendar.DATE) { date = date; }
 if (field == Calendar.DATE) { } }
val.setTime(date.getTime();); } return ;
 if (field == Calendar.DATE) { }
 date. getTime ( ) = time;
 date. setTime ( time ) ; } }
val. put ( field, date ) ;
 date. setTime ( time ) ; }
val.setTime(time); } else { time = 0 ;
 } else { date. setTime(date);
 } else { date. getTime = time;
val.setTime(date); } }
 } else { val. setTime ( date. getTime ( ) ) ; } if (! done ) {
 } else { date. setTime ( time ) ; }
val.setTime(date, time); }
 } else { date. setTime ( time ) ; } else { date. setTime ( time ) ;
 date. setField ( field ) ; } } }
 setTime(time);
 date. setTime ( time ) ; } } }
 if (field == Calendar.DATE) { date.setTime(date);
 if (field == Calendar.DATE) val.setTime(date);
 } else { date. setTime ( time ) ; } } else { if (date!= null) {
 } else { val. setTime ( date. getTime ( ) ) ; if ( field == Calendar.DAY ) {
 } else { date. getTime() = time;
 } else { val. setTime ( date. getTime ( ) ) ; if (round) {
val.setTime(date.getTime()); } if ( done ) {
 date. setField ( field ) ; } }
 if (field == Calendar.DATE) { } else {
 } else { date. setTime ( time ) ; } else { date. setTime ( ) ;
 } else { DateUtils.resetTime(date);
val.setTime(); }
 } else { val. set(date);
val.add(date.getTime(), time); }
val.setTime(date.getTime()); return;
 date. setField ( field ) ; } return ;
 } else { date. setTime ( time ) ; } else { date. setTime ( 0 ) ;
 if (field == Calendar.DATE) { done } }
 } else { val.add(date);
 } else { val. setTime ( date. getTime ( ) ) ; } else { val. setTime ( null ) ;
val.setTime(date) } else { val. setTime ( time )
 } else { val. setTime ( date. getTime ( ) ) ; } else { val. setTime ( time ) ;
 DateUtils. reset ( ) ;
 } else { val. setTime ( date. getTime ( ) ) ; if ( field == Calendar.UTC ) {
 } else { date. getTime ( );
 } else { date. setTime ( ) ;
 } else { val. setTime ( date. getTime ( ) ) ; } else { if (!round) {
val.setTime(date.getTime()); } } return ;
val.setTime(time); val. reset ( ) ;
 } else { time.setTime(date);
 } else { val. setTime ( date. getTime ( ) ) ; } else { time = 0 ;
 if (field == Calendar.DAY) val.setTime(date);
 if (field == Calendar.TIME) val.setTime(date);
 DateUtils.resetTime(date);
val.setTime(date.getTime()); } else { return ; }
 if (field == Calendar.DATE) { done = true }
 if (field == Calendar.DATE) { date. reset ( ) ;
val.set(date.getTime(), time);
 } else { date. setTime() ( time);
 date.setTime(date);
 date. setTime ( time )
 } else { val. setTime ( date. getTime ( ) ) ; } else { if (!round)
val.setTime(time); } return done ;
 if (field == Calendar.DATE) { date. reset ( ) }
 } else { return ; }
 } else { if (date.getTime()!= date)
val.setTime(date, time);
val.add(date.getTime(), time);
val.setTime(time, -1);
 } else { date. setTime ( time ) ; } else { date. reset ( ) ;
 DateUtils.reset(date);
 } time = 0 ;
 if (round && roundUp) { round.setTime(date);
val.setTime(date.getTime(), time); }
 if (field == Calendar.TIMESTAMP)
 if (field == Calendar.DATE) { date.setTime(time); } }
 date. reset ( ) ;
val.resetTime(time);
 } else { val. setTime ( date. getTime ( ) ) ; } else { val. setTime ( time ) ; }
 } else { val. setTime ( date. getTime ( ) ) ; } } } else {
val.setTime(time); } } return ;
 } else { Date date = val. clone ( ) ;
val.setTime(date) } else { time = 0 ;
val.setTime(date.getTime()); } return ( done )
 } else { setTime(time);
 if (field == Calendar.MONDARY) {
 if (round && roundUp) round.setTime(date);
 if (field == Calendar.DATE) { date.setTime(); } }
val.setTime(date.getTime();); }
 } else { date. setTime ( time ) }
 } else { if (!round) { val.setTime(date);
val.setTime(date.getTime(), time); } } return ;
 Date.setInstance(date);
 } else { val.setCurrentTime(date);
val.setTime(time, date.getTime(); } return ;
 if (field == Calendar.DATE) { date = date - time }
val.setTime(date.getTime();); return;
val. set ( date ) ; }
val.setTime(date) } else { date. setTime ( time )
val.resetTime(); }
 } else { val. setTime ( date. getTime ( ) ) ; } else { if (round) {
 } else { date. reset ( ) ;
val.setTime(date.getTime(), time); } return done ;
val.setTime(time, date.getTime()); } return ;
 } else { DateUtils.reset(date);
val.setTime(date.getTime();); time = 0;
 } else { date. reset ( ) ; val.setTime(date);
 if (round) { done = true;
 setTime(date);
 } else { DateUtils.resetDate(date);
val.setTime(date.getTime(), time); time = 0 ;
val.setTime(time); time = 0 ;
 DateUtils.round(date);
val.setTime(time); } else { time = 0 ; }
 } else { val. setTime ( date. getTime ( ) ) ; } else { if (reset) {
 DateUtils. resetTime ( ) ;
val.setTime(time, date.getTime()); }
val.setTime(date.getTime);
 } else { val. setTime ( date. getTime ( ) ) ; } else { val. setTime ( time ) }
val.setTime(time); } else { return ; }
val.setTime(time, date); }
 if (field == Calendar.DATE) { date.setTime(now); }
 if (field == Calendar.DAY)
 } else { val. setTime ( date. getTime ( ) ) ; } else { val. setTime ( null ) ; }
val.setTime(date.getTime();); } }
 } val.add(date);
 } else { date. setTime ( time ) ; if ( field == Calendar.TIME)
 } else { date. setTime ( time ) ; } else { date. setTime ( time ) }
 if (field == TIME) {
 } }
 } else { date. clearTime ( ) ;
val.add(date.getTime(), 0); }
 } else { val.setCurrentDate(date);
val.setTime(date) ; } else { time = 0 ;
 } else { date. set ( time);
 if (round) { round.setTime(date);
 } else { val. setTime ( date. getTime ( ) ) ; } else { val. setTime ( null ) }
 if (field == Calendar.DATE) { date.setTime(date); } else
 if (round && roundUp) { val.setTime(date);
val.add(date.getTime(), -1);
 } else { date = null ; }
 } else { date. clearTime ( )
 DateUtils.setTime(date);
val. add ( date ) ; }
val.setTime(date) } else { resetTime ( ) ;
 date. setTime ( time ;
val.resetTime(); } }
val.setTime(date) } else { time = 0 ; }
val.setTime(time, date); } return ;
 } else { setTime(date);
 date.set(date);
 DateUtils.resetDate(date);
 } else { val. setTime ( date. getTime ( ) ) ; } else { time = 0 ; }
val. set ( date ) ;
val.setTime(date) ; } else { resetTime ( ) ;
val.setTime(time, date.getTime()); } }
 if (field == Calendar.DAY) { val.setTime(date);
 date.setDate(date);
 } else { time = time - 1 ;
 if (field == Calendar.DATE).setTime(date);
val.setTime(date, time, done);
 time.setTime(date);
 } else { date. setTime ( time ) ; } else { date. setTime ( 0 ) }
 } else { if (!round) val.setTime(date);
 } if ( done ) {
val. setDate ( date ) ;
val.setTime(time); } return ( done )
val.setTime(date) ; } } }
val.setTime(time, date.getTime(); }
 time = 0 ;
 } else { time = 0 ; }
 } else { date = Date. getInstance(date);
 date.setDay(day);
 } else { date. setTime ( time ) ; } if ( field == Calendar.DATE ) { val. reset ( ) ; }
 } else { val.reset(date);
val.setTime(date) ; } } return ;
 if (round) {
val.setTime(date, time); } }
 } else { val. setTime ( date. getTime ( ) ) ; if ( field == Calendar.DATE ) { } }
 if (round) done = true;
 } else { calendar.setTime(date);
val.setTime(date).getTime(); }
val.setTime(date) } else { time = time - 1 ;
 DateUtils. reset ( date )
 } return done ;
 } else { date. getTime ( ) return;
val = date ; }
 DateUtils.resetDateTime(date);
 if (field == Calendar.MONTH)
 if (round && roundUp) val.setTime(date);
val.setTime(date.getTime(); }
 } else { val.set(time,date);
 } else { date. setTime ( time ) ; } }
val.setTime(date) ; } else { time = 0 ; }
val.setTime(date) ; return ; }
 if (field == Calendar.DATE) { done } else
val.setTime(date) } if ( done ) { return ;
 done = true);
 DateUtils. reset ( )
val.setTime(date) } else { val. resetTime ( )
val.setTime(date) ; } else { return ; }
 if (round && roundUp)
 if (field == Calendar.DATE)setTime(date);
 date.setTime()(time);
val.setTime(date) ; } return done ;
 } } return ;
 time = time ; done = true;
 if (round) { roundUp = round(date);
 date. setTime ( time ) ;
 date. setTime ( time ) return;
 } if ( field == Calendar.DATE ) { val. setTime ( date ) ; if ( field == Calendar.MONTH ) }
 } else { date. setTime ( time ) ; if (round) { }
 } if ( field == Calendar.DATE ) { val. setTime ( date ) ; if ( field == Calendar.MONTH ) return
 } val.set(date);
val.setTime(date) } else { val. setTime ( null )
val.setTime(date) ; } if ( done ) {
val.setTime(time, date.getTime()); return ; }
val.setTime(date) ; } else { time = time - 1 ;
 if (round) { roundUp = roundUp(date);
 } else { val. setTime ( date. getTime ( ) ) ; if ( field == TIME ) { }
 return(date);
val.setTime(date) } else { time = - 1 ;
 } else { date. setTimeInDay(date);
 } else { time = time ; } val.setTime(date);
val.setTime(date) ; } } } }
 } else { time = 0 ; val.setTime(date);
 } else { val. setTime ( date. getTime ( ) ) ; } } } else
 } else { date. setTime ( time ) ; } else { date. setTime ( ) }
 } else { val. setTime ( date. getTime ( ) ) ; } if ( field == Calendar.DATE ) { }
val.setTime(date); return;
val.clear(); }
 time = 0 ; }
 } done = true;
 } else { val. setTime ( date. getTime ( ) ) ; } } } }
 } else { date. setTime ( 0 ) ; }
val. remove ( ) ;
 } else { time = time ; val.setTime(date);
 } else { time = time - time ; val.setTime(date);
 } time.setTime(date);
 } else if (done) { val.setTime(date);
 } else { date. setTime ( time ) ; } else { date. reset ( ) }
val.setTime(date) } else { time = time + 1 ;
 } else { date = Date. from(date);
 date. getTime = time;
val.setTime(date) } else { return ; }
 } else { date. setTime(this.date);
 if (field == Calendar.DATE) { } else
 } else { time = 0 ;
 } else { date = null ; } val.setTime(date);
val.setTime(date, time); return;
 if (round) { roundUp && round(date);
val.resetTime(time); }
val.setTime(date) ; time = 0;
 if (field == Calendar.DATE) field.setTime(date);
 } else { Date. setTime(date);
 } else { time = time - 1 ;
 } else { val. setTime ( date. getTime ( ) ) ; } } } } }
 date. setTime = time;
 if (round) { roundUp.setTime(date);
 } else { date = val.setTime(date);
 if (!round) { val.setTime(date);
 } return ; } }
 } else { val. setTime ( date. getTime ( ) ) ; } if (! done ) return
val.reset(time);
 } if (done) { val.setTime(date);
val.setTime(date) } else { val. setTime ( ) ;
 if (round) { roundup.setTime(date);
val. resetTime ( )
val = [ ] ;
 val.remove(date);
 } else { date. setTime ( _date);
 } return(date);
 } } return done ;
val.reset(date);
val.setTime(date, -1);
 date.getTime = null;
 } return ; }
 } else { DateUtils.round(date);
val.setTime(date) } if ( done ) return ;
val.setTime(time, date, done);
 if (round) { }
 if (round && done) round.setTime(date);
 } else { date. setDateTime(date);
val.setTime(date) } else { time = 0
 date. setTime ( time
 if (field == DAY) {
 } } }
 date.set(time);
 } else { resetTime(date);
 date.setDateTime(date);
 Date.parse(date);
val.setTime(date) } return ;
 if (round) { val.setTime(date);
 } val.remove(date);
 return ; }
val.setTime(date) } } return ;
 } else { date = DateUtils.clone(date);
 if (!round) {
 } else { this.setTime(date);
 if (round) { roundUp = roundDate(date);
val.setTime(now); }
val.setTime(date) ; } } return done ;
val.setTime(date) ; } } } } }
val.reset(); } }
val.setTime(date) ; } } } return ;
 } return);
val.setTime(date, time + 1);
 } else { date = DateUtils.format(date);
 } else { time = val.setTime(date);
val = date ;
 if (round) round.setTime(date);
 setDate(date);
 return date;
 } else { return false ;
 } else { date = val.setDateTime(date);
 } setTime(date);
 date.resetTime();
 } else { currentDate.setTime(date);
val.setTime(date, time + delta);
val = null ; } }
 if (round) { } val.setTime(date);
 } } else { date.setTime(date);
val.setTime(date.setTime);
 } else if (done) val.setTime(date);
 } else { dateUtils.setTime(date);
 date.setTime();
 } else { date. reset ( ) }
 if (round && done)
val.setTime(date, -time);
 } else { time = 0 val.setTime(date);
val.setTime(date) return ; }
 } return(done);
 } else val.setTime(date);
 setTime(now);
 return;
 DateUtils.END;
 if (!round)
 if (round) break;
 if (round == true)
 } else { dateTime.setTime(date);
 } } } else { val.setTime(date);
 if (field == TIME)
 if (round)
 return date);
 } } else { calendar.setTime(date);
 } else { return time;
 } } else {
 } else { return; val.setTime(date);
 if (round) { roundUp().setTime(date);
 time = - 1;
 if (round) { time.setTime(date);
 reset(date);
 update(date);
 round(date);
 } date.set(date);
val = {
 updateDate(date);
val.setTime(newTime);
 } else time.setTime(date);
 } calendar.setTime(date);
 } else { resetDate(date);
val.setTime(time, done);
 } } else { time.setTime(date);
 } date.setTime(date);
val = date
val.setTime(time, time);
 else { val.setTime(date);
 } round(date);
val.setTime(date); break;
 return(done);
val.setTime ( time
 } time = now;
val.setTime(time, 0);
val.setTime(date) return;
 date = null;
val.setTime(resetTime);
val.setTime(-time);
val = undefined ;
 return time;
 done(true);
val.setTime(date) } }
 save(date);
 } return time;
 if (!round)setTime(date);
val = None ;
val.setTime(new Date);
 calendar.setTime(date);
val.remove(); }
 } this.setTime(date);
val.setTime(done); }
 break;
val.setTime ( )
 } reset(date);
val = ;
 return false;
val.setTime(date) break;
 return time);
val.setTime(timestamp);
 return true;
 if (!round) return
 if (round) return
val = undefined
 if (!round).setTime(date);
 } }
 this.setTime(date);
 return; val.setTime(date);
 } });
 } } val.setTime(date);
 break; }
 } } } }
 if round {
 reset();
 } else { }
 } else
val.setTime(now);
 } } }
val.setTime(0);
val.set();
val.setTime(date) }
val.close();
 else {
val.setTime(date); };
 break;
 } return
 return
