 mValue= value;
mValue  = value
 return value;
 mValue = value.value;
 mValue = value; mValue= value;
 mValue = value; return 1;
 mValue = value; }
 mValue = value; return mValue.value;
 mValue = value; *
 mValue = value; return mValue.length;
 mValue = value; return mValue;
 mValue = value; mValue *= value;
 return mValue;
 String
 mValue = value; } else { mValue= value;
 mValue = value; return -1;
 mValue = value.length();
 mValue = value; return value.length;
 mValue = value.length;
 mValue = value ;
 mValue = (String)value;
mValue  = value; return mValue.length();
 mValue = value; return 0;
 mValue = value; return value.value;
 mValue = $value;
 mValue = value; mValue = value.value;
 mValue *= value;
 mValue = value; buffer= value;
 mValue = value.length;
mValue  = value; } return mValue ;
 mValue = value; } return mValue.value;
 mValue = value; return this.value;
 mValue = value; }
 return value
 mValue[0]= value;
 mValue = value; } return 1;
 mValue = * value;
mValue  = value; return value.length();
 mValue = value; mValue = this.value;
 mValue = value; mValue = "";
 mValue = value.toString();
 mValue = value; mValue = -value;
...
 mValue = value; return buffer.length;
 mValue = value; mValue = -1;
 mValue = value; buffer[0]= value;
 mValue = value; mValue ^= value;
 mValue = value.length(); }
mValue  = value; return mValue.length(); }
 return mvalue;
 mValue = value; mValue[0]= value;
 mValue = value; mValue = $value;
 mValue.value= value;
 mValue = value; mValue.length= value;
 mValue = value; } else {
 mValue = value; mValue.value= value;
 mValue = value; return mvalue;
 mValue = value; } else
 mValue = value; mValue ||= value;
 mValue = value; return buffer.value;
 mValue = value; } return mValue= value;
 mValue = value; return value;
 mValue = value; mValue = mValue;
mValue  = value; mValue = value.length();
 mValue = value; mValue = +value;
mValue  = value; return mValue.length(); *
 mValue = value; mValue = mvalue;
 mValue = value; return mValue + mvalue;
 mValue = value; return string.value;
 mValue = this.value;
 mValue = + value;
 mValue = value; mValue |= value;
 mValue = value; buffer.stringValue= value;
 mValue = value; return mValue + _value;
 mValue = value.value();
 mValue = -1;
 mValue = (String) *value;
mValue = value ; mValue = value. trim ( ) ;
 mValue = value.length() ;
mValue  = value; return mValue.length() *
mValue  = value; return mValue ; }
 mValue.string= value;
 mValue = stringliteral(value;
 mValue = value + '';
 mValue = StringBuilder(value;
 mValue = String value;
 mValue = value.value;
 mValue = value.string;
 mValue = value; mValue[field]= value;
mValue  = value; return Math.randomInt();
 mValue = value.length(); mValue *= value;
 mValue = value; mString= value;
 mValue = value.text;
 mValue = value.length(); } else
 mValue = stringliteral.value;
 return value;
 mValue = value.toString ( ) ;
 mValue = "" ;
 mValue = value; return -value;
 mValue = StringBuffer(value;
mValue = value ; mValue = value ; return mValue ;
mValue = value.toString(); return mValue.length();
 mValue |= value;
 mValue = value; } else { mValue = value ; } else {
mValue =  value; return mValue.length(value);
 mValue = value + "";
 mValue = -value;
 mValue = value; mValue[' ' ]= value;
 mValue = value.length(); } else {
mValue =  value; return mValue.length(1);
 mValue = value.toString;
 mValue = value; } *
 mValue = value; value= value;
 mValue = string; mValue= value;
 mValue = value; } else { mValue = "" ;
 mValue = value.length(); } *
 mValue = value.toString(); } else {
 mValue = value; } else { mValue = null ;
 mValue = value; } else { mValue = "null" ;
 mValue = value; } else { mValue = "" ; }
mValue = value.toString(); return mValue. length ;
mValue = value; return mValue.length() + 1;
 mValue = value. *
 mValue = string.value;
 return 1;
 mValue = value.toString(null); }
 mValue = value; } else { mValue = ' ' ;
 mValue = value.$value;
 mValue = value; } else { mValue = '' ; }
 mValue = value; } else { mValue = null ; } else {
 mValue = value; } else { mValue = null ; }
 mValue = null ;
 mValue = value; } else { mValue = value ; }
 mValue = '' ;
 mValue = value; } else { mValue = "" ; } else {
 mValue = value.toString(); } else
 mValue ^= value;
 mValue = value; } else { return
 mValue.length(); *= value;
 mValue = value; } else { mValue = value ;
 mValue = value.toString(UTF-8);
 mString = mValue ;
 mValue = value.length() }
 mValue = value.toString(null) ;
 mValue['string']= value;
 mValue = '' mValue= value;
 mValue = value; *
 mValue; }
 mValue = value; } else { String value = value ;
 value = value;
 mValue.value *= value;
 mValue = _value;
 mValue.text= value;
 mValue = value.toString(UTF8) ;
 mValue = value.toString(\"\");
 mValue } {
 mValue = value; } else { mValue = value; } else
mValue =  value; return mValue.length(); } *
 mValue = value.toString(String) ;
 mValue = value.toString(); } *
 mValue = value; } else { mValue = value ; } }
 mValue = value; } else { mValue = value; } return
 m = value;
 mValue ++ ;
 mValue ||= value;
 mValue = value.toString(UTF8) }
 mValue = value.toString(UTF8); }
 mValue =
 mValue.string||= value;
 mValue = value; } else { mValue = value ; } } else
 mValue.length= value;
 this.
 mValue = value.toString(); } else { return
 mValue.str= value;
 mValue } ;
 mValue.= value;
 mValue;
 mValue = String.value;
 mValue = buffer.value;
 mValue value;
 return 0;
 return -value;
 mValue;
 * * * * } * * * * * * * * * * * * * * * * * * * * * * * *
 * * * * } * * * * * * * * * * * * * * * * * * * * * * *
 return value.length();
 * * * } * * * * * * * * * * * * * * * * * * * * * * * * *
 * * * * } * * * * * * * * * * * * * * * * * * * * * * * String
 * * * * } * * * * * * * * * * * * * * * * * * * * * *
 * * * * } * * * * * * * * * * * * * * * * * * * * *
 * * * * } * * * * * * * * * * * * * * * * * * * * * * String
 value;
 * * * * * } * * * * * * * * * * * * * * * * * * * * *
 * * * } * * * * * * * * * * * * * * * * * * * * * * * *
 * * * } * * * * * * * * * * * * * * * * * * * * * * * * String
 * * * } * * * * * * * * * * * * * * * * * * * * * * *
 * * * * * } * * * * * * * * * * * * * * * * * * * *
 * * * * } * * * * * * * * * * * * * * * * * * * *
 * * * * } * * * * * * * * * * * * * * * * * * * * * String
 * * * } * * * * * * * * * * * * * * * * * * * * * *
 return $value;
 * * * } * * * * * * * * * * * * * * * * * * * * * * * String
 * * * * } * * * * * * * * * * * * * * * * * * * * * * * }
 * * * * * } * * * * * * * * * * * * * * * * * * * * String
 * * * * } * * * * * * * * * * * * * * * * * * * * * * }
 * * * * } * * * * * * * * * * * * * * * * * * * * String
 * * * } * * * * * * * * * * * * * * * * * * * * *
 * * } * { * * * * * * * * * * * * * * * * * * * *
 * * * } * * * * * * * * * * * * * * * * * * * * * String
 * * * * } * * * * * * * * * * * * * * * * * * *
 * * } * { * * * * * * * * * * * * * * * * * * *
 return 1;
 * * * * } * * * * * * * * * * * * * * * * * * * String
 * * * } * * * * * * * * * * * * * * * * * * * *
 return value; *
 * * * * } * * * * * * * * * * * * * * * * * * * }
 return 0
 * * } * { * * * * * * * * * * * * * * * * * * String
 * * * * } * * * * * * * * * * * * * * * * * * String
 * * } * { * * * * * * * * * * * * * * * * * *
 return;
 * * {int mValue = value; * * } * * * {String
 * * * * } * * * * * * * * * * * * * * * * * *
 * * {int mValue = 0; * * } * * * {String
 * * * } * * * * * * * * * * * * * * * * * * *
 * * } * { * * * * * * * * * * * * * *
 * * } * { * * * * * * * * * * * * * * * * * String
 return value ; }
 * * {int mValue = value; * * } * * * {string
 * * {int mValue = value.length(); * * } * * *
 * * } * { * * * * * * * * * * * * *
 mValue =;
 return value.value;
 * * {int mValue = value.length(); * } * * {String
 * * } * { * * * * * * * * * * * * * * * * * }
 * * } * { * * * * * * * * * * * * * * *
 * * } * { * * * * * * * * * * * * * * * * *
 * * } * { * * * * * * * * * * * * * * * *
 return 1
 return value.length;
 * * * * } * * * * * * * * * * * * * * * * *
 return 0;
 * * } * { * * * * * * * * * * * * * * * * String
 * * * } * * * * * * * * * * * * * * * * * *
 * * } * { * * * * * * * * * * * * * * * String
 * * } * { * * * * * } * * * * * * * *
 * * } * { * * * * * * * * * * * * * * String
 * * } * { * * * * * * * * * * * * String
 * * * * } * * * * * * * * * * * * * * * *
 * * } * { * * * * * * * * * * * * * String
 * * } * { * * * * * * * * * * * * * * * * }
 * * } * { * * * * * * } * * * * * * *
 * * } * { * * * * * * * * * * * * * * * }
 return +value;
 * * } * { * * * * * } * * * * * * *
 * * } * { * * * * } * * * * * * * *
 * * } * { * * * * * * * * * * * * * * }
 * * } * { * * * * * * * * * * * * * }
 * * } * { * * * * * * } * * * * * * * *
 * * } * { * * * * * * * } * * * * * * * *
 * * } * { * * * * * * * } * * * * * * *
 * * } * { * * * * * * } * * * * * *
 return.value;
 * *
 *
 return this.value;
 mValue.value;
mValue  = value();
 this instance
 return "";
 this:
 return null;
mValue  = null
 *
mValue  = ''
 return
 }
 string
mValue =  null;
mValue =  value);
 mString= value;
 sValue= value;
 mText= value;
mValue += value;
mValue: value;
mValue is value;
