if (this ==  partial) {
if (this ==  partial)
if (partial instanceof ReadablePartial) {
 if (!partial) {
if (partial instanceof Date) {
if (partial == null)
 comparisons if (this == partial) {
if (partial == this) {
 comparisons if (this!== partial) {
if (partial == null) {
 comparisons if (!partial) {
if (this  instanceof ReadablePartial) {
 comparisons if (partial == this){
if (this .equals(partial)) {
if (this  instanceof ReadablePartial)
if (this == partial)  return false;
 comparisons if (partial instanceof Date){
if (this == partial || partial == null) {
 comparisons if (partial instanceof ReadablePartial) {
 comparison if (partial == this) {
 comparison if (this!== partial) {
 if (this!== partial) {
 comparison if (partial instanceof Date) {
if (partial instanceof ReadablePartial)
 comparison if (partial instanceof ReadablePartial) {
if (this  instanceof Date) {
if (partial instanceof ReadableInstant) {
if (partial == this)
 comparisons if (partial == null)
if (this ==  partial) { return false; } else {
 comparisons if (partial == this)
if (this ==  partial) { return false;
 comparisons if (partial == null) {
 comparison if (partial == null) {
if (partial instanceof Instant) {
if (partial instanceof ReadableDate) {
 comparison if (partial instanceof ReadablePartial)
 comparisons if (partial instanceof Instant) {
 comparisons if (partial instanceof ReadableInstant) {
if (this  instanceof LocalDate) {
if (this == partial) { return this.equals(partial);
 comparison if (partial == null)
if (this  == partial
 comparison <DC> public boolean equals(Object partial) { return this. equals ( partial ) ; } public boolean equals(Object partial) {
 checks if (partial instanceof ReadablePartial) {
if (this .equals(partial) == true)
if (this == partial && partial instanceof ReadablePartial) {
if (this .equals(partial)) { return false;
 comparisons if (partial instanceof ReadablePartial)
if (this  instanceof ReadablePartial) return false;
 comparison if (partial instanceof Instant) {
 comparison if (partial == this)
if (partial instanceof Timestamp) {
 comparison <DC> public boolean equals(Object partial) { return super. equals ( partial ) ; } public boolean equals(Object partial) {
 comparison <DC> public boolean equals(Object partial) { return this. equals ( partial ) ; } public boolean equals(Object) {
 comparison <DC> public boolean equals(Object partial) {
 comparisons if (partial instanceof ReadableDate) {
 comparison if (partial instanceof ReadableInstant) {
if (this ==  partial) { return false; }
if (this == partial || partial == null || partial instanceof Date) {
if  (partial instanceof Calendar) {
if (this == partial || partial == null || partial instanceof LocalDate) {
 comparisons * if (partial instanceof Date) {
 int hash = iHash ; if (hash == 0) { hash = iHash ; }
 comparisons
 comparisons * if (this.partial!== partial) {
 comparisons if (isSupported) {
 comparison <DC> public boolean equals(Partial partial) {
 comparisons if (partial == null) if (this == partial) {
 comparisons if (super.equals(partial) {
 comparisons if (partial instanceof Calendar) {
 comparisons if (this == partial) { if (this == partial) {
 checks if (partial instanceof Date) {
 comparison if (this == partial) {
 comparisons if (partial == null) { if (this == partial) {
if (this ==  partial) { return true; } else {
 comparison * if (partial instanceof Date) {
 comparisons if (partial instanceof DateTime){
 if (== partial) {
 comparison <DC> public boolean equals(Object partial)
 comparisons if (partial instanceof Date) if (this == partial) {
 comparison <DC> public boolean equals(Object partial) { public int equals(Object partial) { public boolean equals(Object partial) {
 comparisons if (partial == partial) if (this == partial) {
 checks if (partial == this) {
if (partial instanceof DateTime) {
 comparisons if (partial instanceof InstantDate){
 comparison * if (this.partial!== partial) {
 comparison if (partial instanceof DateTime){
 comparisons if (partial instanceof Chronology){
if (this == partial && partial!= null) { if (partial == this) {
 comparison if (!partial){
if (this ==  partial) { return this. isSupported(); }
 comparisons if (partial instanceof Date && this!== partial) {
 comparison if (partial instanceof Date && this!== partial) {
 comparisons for performance int hash = this. hashCode ( ) ;
if (this ==  partial) { if (partial == null)
if (this ==  partial) { return partial. equals(this);
 comparison if (partial == null) if (this == partial) {
 comparisons for performance int hash = this. hashCode ( partial ) ;
if (this == partial && partial!= null) { if (partial == partial) {
 comparison if (super.equals(partial) {
if (this .equals(partial) == false)
 comparison <DC> public boolean equals(Object partial) { return this. equals ( partial ) ; } public boolean equals(Object...) {
 comparison <DC> public boolean equals(Object partial) { return this. equals ( partial ) ; } public boolean equals(object) {
if  (partial instanceof Chronology) {
 } public int equals(Object partial) { return 0 ; } public boolean equals(Object partial) {
 comparison <DC> public boolean equals() { if(this == partial) {
 comparison if (partial instanceof Date) if (this == partial) {
if (this ==  partial).isSupported()) {
 comparison if (isSupported) {
 if (!compatible) {
 comparisons if (partial instanceof Date) equals(partial) {
if (this == partial && partial!= null && partial instanceof LocalDate) {
 int hash = iHash ; if (hash == 0) { hash = iHash = superHash(); }
 comparisons * if (this.equals(partial) {
 comparison <DC> public boolean equals(Object partial) { return this. equals ( partial ) ; } public boolean equals(object partial) {
 comparisons if (this == partial) if (this == partial) {
 comparison if (partial instanceof Date) equals(partial) {
if (this == partial) { return this. equals(partial); }
if (this == partial || partial instanceof Date) {
 comparisons * if (partial instanceof ReadableInstant) {
if (this == partial)  { return false ; } if (partial) {
 comparison if (partial instanceof ReadableDate){
 comparison * if (this.equals(partial) {
if (this == partial && partial == null) { if (partial == null) {
if (this == partial || this == partial || partial instanceof Date) {
if (this == partial && this == partial && partial instanceof Date) {
if (this == partial)  { return true ; } if (!partial) {
if (this == partial || partial == null) { if (partial == this) {
if (this == partial || partial == this) {
if (this == partial && this.isSupported) {
if  (partial instanceof Time) {
 comparison if (partial instanceof Date) { return true ; } if (partial instanceof LocalDate) { return false ; } } else
 return false ; } else if (partial instanceof Date) { Date this = (Date) partial; return false; } else
 comparison <DC> public boolean equals(Object partial) { if (partial instanceof Instant) {
 return true ; } else if (partial instanceof Date) { Date this = (Date) partial; return false; } else
 comparisons if (partial == null || this!== partial) {
 comparison performance int hash = this. hashCode ( partial ) ;
 comparisons for performance int hash = 0;
 comparison if (partial == null || this!== partial) {
 static int hashCode() { int hash = iHash ; if (hash == 0) { hash = iHash; }
 checks if (this!== partial) {
 return false ; } else if (partial instanceof Date) { Date this = (Date) partial; return true; } else
 comparisons * if (partial == null || partial!== partial) {
if (this == partial && partial == null) {
 comparisons * if (this!== partial) {
if (partial instanceof ChronoDate) {
if (this == partial || this == partial || partial instanceof LocalDate) {
 comparisons * if (partial instanceof DateTime) {
 } public boolean equals(Object partial) { return true ; } public boolean equals(Object partial) { return false;
 comparisons if (this.equals(partial) {
 } public boolean equals(Object partial) { public boolean equals(Object partial) { super.equals(partial);
 comparison <DC> public boolean equals(Object partial) { return this. equals ( partial ) ; } public boolean equals(Object partial) {}
 comparisons * if (partial instanceof ReadableDate) {
if  (partial instanceof Chrono) {
 comparisons if (partial == null || partial!== partial) {
 comparison if (partial == null || partial!== partial) {
if (this == partial && partial!= null) { if (this == partial) {
if (partial == null) { return false; }
 comparisons * if (partial instanceof Chronology) {
if (this == partial && partial == null) { if (partial == this) {
if (this ==  partial.iInstant) {
 static int hashCode() { int hash = iHash = super. hashCode(); if (hash == 0) { }
 comparisons if (partial instanceof Instant) { if(this == partial) {
if (this == partial && partial!= null && partial instanceof Date) {
 comparisons if (partial instanceof Date) { if(this == partial) {
 } public int equals(Object partial) { public boolean equals(Object partial) { return false ; }
 comparison <DC> public boolean equals() {
if (partial instanceof Date) { date = partial;
 return true ; } else if (partial instanceof Date) { Date this = (Date) partial; return true; } else
 } public boolean equals(Object partial) { return true ; } public boolean equals(Object partial) { return true;
 comparisons for performance int hash = super.hashCode();
 comparison performance int hash = this. hashCode ( ) ;
if (this .isSupported()) {
if (this == partial && partial == this) {
 int hash = iHash ; if (hash == 0) { hash = iHash = 0 ; } else
 } public int equals(Object partial) { public int equals(Object partial) { return 0 ; }
 comparison <DC> public boolean equals(Object partial) { public boolean equals(Object partial) { public boolean equals(Object partial) { }
 comparisons * if (partial == null || this!== partial) {
if (this == partial) { return partial. equals(this); }
if (this == partial || partial == null || partial. length == 0) {
 comparisons if (partial instanceof Date) if (!partial) {
 comparisons for performance if (partial == null) if(this == partial) {
 } public int equals(Object partial) { public boolean equals(Object partial) { return true; }
 comparisons * if (this.partial()!== partial) {
 comparison if (partial instanceof Date && date!== partial) {
 checks if (partial == null)
 comparison if (partial instanceof Chronology) {
 comparison * if (this ==partial) {
if (this == partial || partial == null || partial instanceof DateTime) {
if (this == partial || partial == null) { if (partial == null) {
 comparisons * if (super.equalspartial) {
 performance int iHash = this. hashCode(); int hash = iHash;
 comparison * if (this!== partial) {
if (partial instanceof Date) { return false; }
if (this  ==)
 static int hashCode() { int hash = iHash = super.hashCode(); } return hash ; } else
 comparisons if (this.partial!== partial) {
 } public boolean equals(Object partial) { public boolean equals(Object partial) { public boolean equals(Object) {
if (this == partial && this.iLocalMillis) {
 if (!== partial) {
if (partial instanceof PlainDate) {
 comparisons * if (this ==partial) {
 comparison if (partial instanceof Date) if (!partial) {
 performance int hash = iHash ; if (hash == 0) { return ; }
 int hash = iHash ; if (hash == 0) { return false ; } return hash ; } else
 comparison <DC> public boolean equals(Object) {
 comparison <DC> public boolean equals(Object partial) { super. equals ( partial ) ; return this == partial ; } } else
if (this == partial || partial == null || partial == this) {
 checks * if (this.partial!== partial) {
 comparisons for performance int hash = 0 ; if(this == partial) {
 comparison <pre> public boolean equals(Object partial)
 comparison <DC> public boolean equals(Object partial) { return false ; }
if (this == partial && partial instanceof LocalDate) {
 } public boolean equals(Object partial) { public boolean equals(Object partial) { public boolean equals(Object partial);
 comparisons if (partial instanceof ReadableSubpartial) {
 comparisons if (partial instanceof Date) if (partial) {
 comparisons if (partial == null || _this == partial) {
 comparison <DC> public boolean equals(Object partial) { if (partial instanceof Date) { return true; } } else {
if (partial instanceof UTC) {
 comparisons if (partial == null || (this == partial) {
 comparisons if (!compatible) {
if (partial instanceof Date) { return false;
 comparisons if (compare){
 comparison <DC> public boolean equals(Object partial) { return false;
 comparison if (this.partial!== partial) {
if (partial instanceof InstantDate) {
if (this == partial || partial == null || this. equals(partial)) {
 comparison * if (super.equalspartial) {
 comparison <DC> public boolean equals(Object partial) { if (partial instanceof Date) { return true; } } } else
if (this == partial || partial == null || partial instanceof DateTimeField) {
 comparison <DC> public boolean equals(Object partial) { super.equals(partial); }
if (this == partial && partial instanceof Date) {
 comparisons for performance if (partial == partial || (this == partial) {
 static int hashCode() { int hash = iHash ; if (hash == 0) { hash = 0; } }
 comparisons for performance int hash = iHash;
 comparisons if partial == this {
 int hash = iHash ; if (hash == 0) { hash = iHash = 0 ; } }
 comparisons if (this.equals()==partial) {
 } public boolean equals(Object partial) { super.equals(partial); } else
 comparison <DC> public boolean equals(Object partial) { if (partial instanceof Date) { return true; } else { }
 comparisons if (partial == null ||this == partial) {
 comparison * if (this == *partial) {
if (this  instanceof Calendar) {
 comparison <DC> public boolean equals(Object partial) { return this. equals ( partial ) ; } public boolean equals() { }
 static int hashCode() { int hash = iHash ; if (hash == 0) { hash = 0; } else
 comparisons * if (this == *partial) {
 comparisons if (partial == this) { if(this == partial) {
 static int hash = iHash ; if (hash == 0) { return false ; } return hash ; } else
if (partial instanceof LocalTime) {
 static int hash = iHash ; if (hash == 0) { hash = iHash = 0 ; } else
 comparison <DC> public boolean equals(Object partial) { super. equals(partial); } else
if (this == partial || this == partial.getTimeZone()) {
if (this == partial && partial == null || this. partial == partial) {
if (this ==  partial).isSupported() {
if (this == partial || this == partial.iLocalDate) {
 comparison if partial == this {
 comparisons if (partial instanceof Date) (this == partial) {
if (this == partial || iHash == 0) {
 comparison if (partial == null || (this == partial) {
if (this == partial || partial instanceof LocalDate) {
if (this == partial || partial == null || this == -1) {
if (partial == null || partial == this) {
if (this == partial && this == partial && partial instanceof Calendar) {
if (this == partial || this == partial.iInstant) {
if (this  instanceof Instant) {
if (this == partial || this.isSupported) {
if (partial instanceof ReadablePartial) { *
 performance int hash = iHash ; if (hash == 0) { return false ; } else
if (this == partial && this == partial && partial == partial) {
if (this == partial && this.isSupported(...)) {
 comparisons if (this.equals()*partial) {
if (this == partial || this == partial || partial == -1) {
if (this == partial && this.isSupported()) {
if (this == partial && other == partial) {
 static int hash = iHash ; if (hash == 0) { return true ; } return hash ; } else
 comparison <DC> public boolean equals(Partial) { return false;
 comparison if partial == null {
if (this == partial || partial == null || partial instanceof NullDateTime) {
 comparisons if (partial == partial || (this == partial) {
 comparisons for performance return false ; } if(this == partial) {
if (partial instanceof DateTimeField) {
 comparison if (partial == null || _this == partial) {
 comparisons if (partial == null) { } if(this == partial) {
if (this == partial && this!= partial && partial instanceof Date) {
 comparisons if partial == null {
if  (partial == partial) {
if (this ==  partial == true) {
 comparison <DC> public boolean equals(Object partial) { super. equals(partial); } }
if (partial instanceof DateTimeInstant) {
 comparison <DC> public boolean equals(Partial) { return false ; }
if (this == partial || this == partial.iPartial) {
 comparisons if (isSupported()){
 comparison <DC> public boolean equals(Object partial) { return this == partial ; } } else
if (this == partial || partial == null || partial. equals == false) {
if (this == partial && iLocalMillis) {
 comparison if (!compatible) {
 int hash = iHash ; if (hash == 0) { hash = 0 ; } else
 comparisons if (disabled){
 comparisons if (this.partial()!== partial) {
if  partial instanceof Date {
 comparison <DC> public boolean equals(Object partial) { } else
if (this == partial || this.isSupported(partial) {
 comparison <DC> public boolean equals(Object partial) { return true;
 comparisons if (partial) {
if (this == partial && this == partial && this.isSupported) {
 comparisons * if (this.object!== partial) {
 performance int hash = iHash ; if (hash == 0) return false; else
if (this == partial || this.length == 0) {
 comparison <DC> public boolean equals(...) {
 comparison <DC> public boolean equals(Partial) { } else
if (this  instanceof ReadablePartial) { *
if (this ==  partial.this) {
 comparisons if (== partial) {
 comparisons for performance return false;
if (this == partial && this.iIsSupported) {
if (this ==  partial)) { return false; }
 } public boolean equals(Object partial) { super.equals(partial); } {
if (this == partial && this == partial.iLocalDate) {
 checks if (isSupported) {
if (this == partial && partial == null && this. partial == partial) {
if (this .equals(partial)) { *
if (this == partial && this == partial.iPartial) {
 comparisons if (partial == this) if(this == partial) {
 comparisons if (super.equalspartial) {
 comparisons for performance return false ; if(this == partial) {
 comparisons for performance int iHash = 0;
 comparison if (disabled){
 } public boolean equals(Object partial) { super.equals(partial); } }
if (this ==  partial) { return true; }
 comparisons if (super.equ(partial) {
 comparisons for performance int hash = super.hashCode(); } else
if (this  == partial) { return false; } else
 comparison * if (!partial) {
if (this == partial || this == partial.iInstantID) {
 comparisons for performance return true ; if(this == partial) {
if (this == partial || this == -1) {
 comparisons for performance return true ; } if(this == partial) {
if (this == partial && this == partial && partial == null) {
 comparisons * if (this.this== partial) {
 comparisons if (partial) { if(this == partial) {
 comparisons if (this.this== partial) {
 } public boolean equals(Object partial) { public boolean equals(Object partial) { }
if (partial == null) { return false; } else
 comparisons * if (this.!== partial) {
 performance int hash = this. hashCode ( partial ) ; return hash ; } else
if (isSupported) {
 comparison for performance return false ; } if(this == partial) {
 comparison <DC> public boolean equals(Object partial) {}
if (this == partial && this == partial) {
if (this == partial || this == partial.get (...)) {
if (this == partial)  { return this. equals(partial); } else
 } public boolean equals(Object partial) { public boolean equals(Object partial) { *
 comparisons if (partial == partial.this == partial) {
 comparisons * if (iInstant!== partial) {
 comparisons if (partial instanceof Date) { *
if (this ==  partial) { this = partial ; }
if (this == partial || this. iLocal == partial) {
 comparisons * if (!this.partial) {
 comparisons if (static){
 comparison * if (!this.partial) {
 comparison <DC> public boolean equals(Partial partial) {}
if (this ==  partial) return false; else {
 comparison if (partial instanceof Date) { *
 comparisons if (partial instanceof Instant) { *
if (this == partial && partial!= null && partial instanceof DateTime) {
if (this == partial || this.isCompatible) {
 comparisons * if (!partial) {
if (partial instanceof ReadableDateTime) {
if (this .equals(partial) == true){
if (this == partial && partial!= null && partial instanceof PlainDate) {
 comparison if (partial instanceof Instant) { *
 comparisons if (this == *partial) {
 comparison performance int hash = iHash ;
 comparisons if (this.partial== partial) {
if  (partial instanceof Date) { *
 comparisons if (iInstant!== partial) {
 checks if (this== partial) {
if (this == partial || this == partial) {
 comparisons if (enabled) {
if (partial instanceof ReadableInstantDate) {
 if (static) {
if (this == partial && this.isSupported(partial) {
if (partial == partial)
if (this ==  partial) { return false; } }
 comparison *
 comparisons for performance return true;
 comparisons for performance boolean result = false;
 performance int hash = iHash ; if (hash == 0) return false; }
 comparison. * if (this == partial) {
if  (partial instanceof ReadablePartial).
if (this == partial && this.isDateTime) {
 if (!) {
 comparison for performance return false;
if (this ==  partial) return ;
 comparison if partial is null *
 comparisons if (!== partial) {
 comparisons for performance * if (this == partial) {
if (this == partial)  { return this. equals(partial); } }
 comparisons for performance * else if (this == partial) {
 comparisons if (partial == null|this == partial) {
if (partial ==)
 comparison <DC> public boolean equals(Object partial) { } }
if (this == partial && this. iLocal == partial) {
 comparison of partial objects if (this == partial) {
if  (partial instanceof Date) { return
if (this == partial) { return this.equals(partial)
if (partial == instance) {
if (this == partial ||!compatible) {
if (this == partial || this == partial.iOffset) {
 checks if (!partial) {
 if (sync) {
if (this == partial || this == partial.iDate) {
 comparisons for performance * * if (this == partial) {
if (this == partial || partial instanceof Instant) {
if (partial instanceof Period) {
if (partial instanceof Date)
if (this == partial && partial instanceof Calendar) {
if (this ==  partial) { return true; } else
 if (partial) {
if (this ==  partial) { return partial. equals (this)
 comparison for performance * if (this == partial) {
if (this != partial) {
 if (!sync) {
 comparison if (== partial) {
if (this == partial && partial instanceof Instant) {
 comparison in performance * if (this == partial) {
 comparison. if (this == partial) {
 comparisons for performance int hash = super.hashCode(); }
 comparison of the object if (this == partial) {
if  performance improves *
if  performance matters
 comparison <DC> public boolean equals() { *
if (this == partial || this.isSameDate) {
 comparison * * if (this == partial) {
if (this == partial || this.isSame()) {
if  performance improvement *
 if (enabled) {
if (this == partial ||!partial) {
 comparison if (partial) {
if (this == partial && partial!= null) {
 comparisons * * if (this == partial) {
if  performance improves
if (partial == null
if (this == partial)  { return true;
if  partial == null {
if (disabled) {
if  partial is null *
 comparison for performance *
 comparison if partial is null
 comparisons for performance *
if (this ==  partial) return false
 comparison * else if (this == partial) {
if (this == partial && this.isSameInstant) {
 comparison in performance *
 comparisons * else if (this == partial) {
if (this == partial || other == partial) {
 comparison <DC> public boolean equals(...) {}
 comparison
 comparisons * *{
 comparisons *
if (this == partial && isSupported) {
if (this == partial || isSupported) {
 comparisons *
 comparison for performance *
 comparisons return false ; } else
if (this == partial || partial == 0) {
 comparison of objects *
 if () {
 comparison of objects *
 comparisons for performance *
if  the object is null
if (sync)
 if (*) {
 checks * if (this == partial) {
if (disabled)
if (this  == partial) { *
 comparisons for performance. *
if (partial == object)
 comparison of the fields *
 comparisons for performance return false ; }
if (this == partial)  { return false }
 comparison of the object *
if  performance is needed
if  performance {
 comparisons for performance else{
if (debug)
 comparison for performance else{
 comparisons if performance else{
if (precise)
if (static)
if (this == partial &&!compatible) {
if (partial == instance)
 comparison of the fields * if(this == partial) {
if (this == partial)  return true;
if (this != partial)
 comparison performance *
 comparisons for performance int hash = iHash ; else
 comparison of objects * if(this == partial) {
 comparison * *{
if (this  == {
 comparisons for performance int hash = iHash ; }
if (performance)
 comparison of partial *
 comparisons like: *{
if  performance matters *
if (this  === partial) {
 comparison. *
 comparisons *{
if  partial is null.
 compare * if (this == partial) {
 comparison of partial objects *
if (this ==  partial) return true
 comparisons if performance improves *
if (compare) {
 comparison of fields *
 comparison if partial is immutable
if  performance needed
 comparison of partial objects * if(this == partial) {
 comparisons for performance return true ; }
 comparisons in performance * if(this == partial) {
if  performance improvement
 comparison performance *
 comparison. *
if  the object is immutable
if  performance is desired
 comparison *
if (this == partial)  { return 0;
 comparison of partial objects *
if (this  is partial) {
 comparison over performance *
 if ((== partial) {
if (this  == partial)) {
 comparison of instant fields *
 comparison of partial fields * if(this == partial) {
 compare if (this == partial) {
 comparison of partial instances *
 comparison performance * if(this == partial) {
 comparison methods *
 comparisons else{
 comparison operations *
if (this == partial)  { return }
if (partial!= null) {
 comparisons * else{
 performance checks *
 comparisons.
 checks * *{
 comparisons for performance return false; else
if (partial == object) {
if (this == partial)  return 0;
 comparisons for performance *{
 comparisons.{
 comparison.
if (this == partial &&!disabled) {
 compare performance * if(this == partial) {
 performance checks * if(this == partial) {
 comparison below * if(this == partial) {
if (this == partial ||!match) {
 if ($) {
 comparison else{
if (this == partial ||!equal) {
 performance checks *
if (this  === partial
if (this  === partial)
 compare performance *
if (isSupport) {
if (this == partial &&!reverse) {
if (this  is partial)
 comparison *{
if (this  equals)
if (this == partial && iHash) {
 performance comparisons *
 synchronized (partial) {
if (override) {
 if ($== partial) {
if (isDefault) {
 if (!this == partial) {
 compare *
 compare. if(this == partial) {
 comparisons.
 tests if(this == partial) {
if (debug) {
 compare *
if (this ==  null) {
 comparison.
if (this ==  partial).
 synchronized (!partial) {
if (this ==  partial);
 if ((this == partial) {
 if ($this == partial) {
 checks
if (this == partial) {}
 compare
 tests
if (this < partial) {
if (this equals partial) {
