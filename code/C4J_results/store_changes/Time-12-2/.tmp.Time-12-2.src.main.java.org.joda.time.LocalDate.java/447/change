iChronology = chronology;
iChronology  = null ;
 chronology=chronology;
iChronology =  chronology. withUTC ( ) ;
iChronology =  chronology. withUTC ( instant ) ;
 if ( iLocalMillis == - 1 ) {
 if (iChronology == null) {
 if (iChronology == null) { return new LocalDate(iLocalMillis, instant); } else {
 if (iChronology == null) { return new LocalDate(iLocalMillis, instant); }
iChronology  = chronology. getInstanceUTC ( ) ;
 this. chronology |= chronology;
 if (iChronology == null) { return new LocalDate(iLocalMillis);
 this (year, monthOfYear, dayOfMonth, instant, iLocalMillis);
iChronology . withUTC ( instant ) ;
 if ( iLocalMillis == null ) {
 if ( instant!= - 1 ) {
 if (iChronology == null) { return new LocalDate(iLocalMillis, iChronology.withUTC()); }
 if ( iLocalMillis == null ) return this ;
 if (iChronology == null) { return new LocalDate(iLocalMillis, instant);
 if (iChronology == null) { return this;
 if (iChronology == null)
 iLocalMillis = instant ; iChronology = chronology ;
 this (year, monthOfYear, dayOfMonth, instant);
iChronology  = chronology. clone ( ) ;
 this (year, monthOfYear, dayOfMonth, instant, iLocalMillis) {
 if ( instant < iLocalMillis ) {
iChronology =  chronology. getInstanceUTC ( instant ) ;
 if ( iLocalMillis == null ) return null ;
 if (iChronology == null) return;
 iChronology |= chronology;
 this (year, monthOfYear, dayOfMonth, instant); this (year, monthOfYear, instant);
 iChronology = this.chronology;
iChronology  = chronology ; super.
 if (iChronology == null) return this;
 if (iChronology == null) { return new LocalDate(iLocalMillis, instant); } else { super();
 if (iChronology == null) { return new LocalDate(iLocalMillis, instant, chronology); }
 if (iChronology == null) { return new LocalDate(iLocalMillis, instant); } else { return instant ; }
 if (iChronology == null) { return new LocalDate(iLocalMillis, -1); }
 this (year, monthOfYear, dayOfMonth) {
 if ( instant!= 0 ) {
 this (year, monthOfYear, dayOfMonth, instant, iLocalMillis) { super();
 if (iChronology == null) { return new LocalDate(iLocalMillis, instant); } if (i == null)
 this (year, monthOfYear, dayOfMonth, instant, iLocalMillis); this.
 if (iChronology == null) { return new LocalDate(iLocalMillis, instant); } return this;
 if (iChronology == null) { return new LocalDate(iLocalMillis, null); } else {
 if (iChronology == null) { return new LocalDate(iLocalMillis) ; }
 this (year, monthOfYear, dayOfMonth, instant, iLocalMillis); super();
 if (iChronology == null) { return new LocalDate(iLocalMillis, instant); } if (i == 0)
 if (iChronology == null) { return null; }
 if (iChronology == null) { return this; }
 if (iChronology == null) { super();
 if ( instant < iLocalMillis ) return ;
 this(year, monthOfYear, instant,chronology;
 this |= chronology;
iChronology  = chronology ; if ( instant!= 0 )
iChronology  = chronology. withUTC ( instant )
 this(year, monthOfYear, instant;
 if (iChronology == null) { return new LocalDate(iLocalMillis, instant); } if (iUTC)
 if ( instant!= 0 ) return this ;
 if ( instant!= 0 ) { super.
 if (iChronology == null) { return null;
 this (year, monthOfYear, dayOfMonth, instant, iLocalMillis, chronology) {
 this (year, monthOfYear, dayOfMonth);
 if (iChronology == null) return null;
 iLocalMillis = instant + iChronologyOffset ;
iChronology =  chronology ; if ( instant!= 0 ) {
 if (iChronology == null) { return new LocalDate(iLocalMillis, instant); } else
 this(year, monthOfYear, instant);
iChronology  = chronology. chronology ;
 if ( instant!= 0 ) return instant ;
 if (iChronology == null) { return new LocalDate(iLocalMillis, instant); } else { return this;
 this (year, monthOfYear, dayOfMonth, instant, iLocalMillis); this(year);
 this (year, monthOfYear, dayOfMonth, instant, iLocalMillis); } else {
 if ( iLocalMillis == 0 ) {
 this (year, monthOfYear, dayOfMonth, instant, iLocalMillis) { super(); }
 iChronology = _chronology;
 if ( instant < iLocalMillis )
 this (year, monthOfYear, dayOfMonth, instant, iLocalMillis); this =
 if (iChronology == null) { return new LocalDate(iLocalMillis, instant); } else { return instant ;
iChronology  = chronology. get ( ) ;
 this. iChronology |= chronology;
 this (year, monthOfYear, dayOfMonth, instant, iLocalMillis); this;
 this (year, monthOfYear, dayOfMonth, instant, chronology) {
 this(year, monthOfYear, instant),chronology;
 if ( instant!= 0 )
 this (year, monthOfYear, dayOfMonth, instant, iLocal) {
 if (iChronology == null) { return new LocalDate(iLocalMillis, instant); } else,
iChronology =  Chronology. getInstanceUTC ( instant ) ;
 this (year, monthOfYear, dayOfMonth, instant); this (year, monthOfYear, instant); }
 this. instant = instant ; this.
 if (iChronology == null) { return new LocalDate(iLocalMillis));
iChronology = chronology. withUTC ( instant, 0 ) ;
iChronology . withUTC ( instant ) ; super.
 if (iChronology == null) { return new LocalDate(iLocalMillis, instant); } else { super().
 this(year, monthOfYear,chronology;
iChronology = chronology ; if ( instant!= - 1 ) {
iChronology =  chronology. copy ( ) ;
 iLocalMillis = iLocalMillis;
 if (iChronology == null) { return new LocalDate(iLocalMillis, instant));
 iLocalMillis = instant ; super();
iChronology  = null
iChronology = chronology. withUTC ( instant ) ; super.
 if (iChronology == null) { return this; } else {
 if (iLocalMillis == null) return;
iChronology =  chronology. withoutUTC ( ) ;
iChronology . withUTC = false ;
 DateTimeUtils.UTC=chronology;
 if (iChronology == null) { return new LocalDate(iLocalMillis, instant); } *
 iLocalDay = instant;
 this(year, monthOfYear);
 DateTimeZone.UTC=chronology;
iChronology . reset ( ) ;
 if (iChronology == null) { return new LocalDate(iLocalMillis, instant); } else { super.
 this (year, monthOfYear, dayOfMonth, instant, iLocalMillis); }
 this.iChronology= chronology;
 if (iChronology == null) { return new LocalDate(iLocalMillis, instant); } else { super()
 this(year, monthOfYear),chronology;
iChronology = chronology. withUTC ( instant, chronology ) ;
 if (iChronology == null) { return new LocalDate(iLocalMillis, instant); } return this; }
 if ( instant!= 0 ) {
 this (year, monthOfYear, dayOfMonth, instant, iLocalMillis, chronology) ;
 this (year, monthOfYear, dayOfMonth, instant); this(year);
 iChronology = (LocalDate)chronology;
iChronology  = chronology. UTC ;
 iLocalMillis = instant + offset;
 this (year, monthOfYear, dayOfMonth, instant, iLocalMillis)
 this (year, monthOfYear, dayOfMonth, instant, chronology) ;
 iLocalMillis = instant ; this |= chronology;
 this (year, monthOfYear, dayOfMonth, instant, iCalendar) {
 iLocalMillis = instant + - 1;
 iLocalMillis = instant + dayOfMonth;
 this. iLocalChronology |= chronology;
iChronology =  chronology. toUTC ( ) ;
iChronology = chronology. getInstanceUTC ( instant ) ; super.
 iLocalMillis += instant * 1000;
 iLocalMillis = instant + 1;
iChronology = chronology. withUTC ( instant ) ; return this ;
 if (iChronology) {
 iLocalMillis = - 1;
 IChronology=chronology;
 this (year, monthOfYear, dayOfMonth, instant, iLocalMillis).
iChronology . withUTC ( instant )
 iLocalMillis = instant * 1000;
 iLocalMinute = instant;
 this (year, monthOfYear, dayOfMonth, instant, iLocalMillis());
 iLocalChronology = this.chronology;
 this (year, monthOfYear, dayOfMonth, instant, iLocal) ;
 this.iChronology_= chronology;
 if ( instant!= - 1 ) {
 this (year, monthOfYear, dayOfMonth, instant)
 iLocalMinutes = 0;
 int iLocalMillis ;
 iChronology. withUTC |= chronology;
 this(year, monthOfYear, instant).chronology;
 this(year, monthOfYear, instant)chronology;
iChronology  = chronology. withUTC ;
 iLocalMillis = instant ; chronology=chronology;
 this.chronology =chronology;
iChronology . withUTC ( ) ;
 this.chronology = this.chronology;
 iLocalMillis = instant * 3600;
 iChronology = (Object)chronology;
iChronology =  chronology ; if ( instant > 0 )
 iLocalMillis = instant ; } else {
 if (iChronology == null) { return this; } *
 this(year, monthOfYear,)chronology;
 iLocalOffset = instant;
 iLocalDayOfMonth = 0;
iChronology . setInstanceUTC ( instant ) ; super.
 this(year, monthOfYear, &chronology;
 iOffset = 0;
 iLocalMillis = 0;
 this(year, monthOfYear, *chronology;
iChronology . clear ( ) ;
 IChronology |= chronology;
 if (iChronology == null) { return null ; } else {
 iLocalMillis = instant ; iZone |= chronology;
 iChronology = null ; this |= chronology;
 iDay = day;
 if ( instant > 0 ) {
 this(year, monthOfYear, --chronology;
 iLocalMillis = instant ; iChronology = chronology.
 instant -= 1;
 iChronology = ichronology;
 iChronology. chronology |= chronology;
 iLocalDayOfMonth = 1;
 if ( instant ) {
 iLocalMillis = instant ; iPattern |= chronology;
 iChronology. getZone() |= chronology;
 if ( instant!= - 1 ) { return
 iChronology = chronology ; iLocal= chronology;
iChronology = chronology. withUTC ( instant ) ; return this.
 iChronology = chronology ; iZone= chronology;
 if (iChronology == null) { return this; } else { *
 this. instant = instant ; super.
iChronology =  iLocalMillis ;
 if (iChronology == null) { return this; } else,
 iLocalMillis = instant + iMillis;
 int iLocalMillis;
iChronology =  chronology. defaultZone ;
 iLocalMillis = instant + " ";
 iLocalMinute = - 1;
 if ( instant!= null ) {
 iChronology = (long)chronology;
 iLocalMillis = instant ;
iChronology =  chronology.UTC();
 this.cronology =chronology;
 IChronology = _chronology;
 iLocalMillis = 0 ;
 if (iChronology == null) { return null; } else { *
 iLocalDay = 0;
 iChronology = this().chronology;
 this(year, monthOfYear, instant);;
 this.iLocalChronology_= chronology;
 iChronology = chronology ; iOriginal= chronology;
 iLocalMillis = chronology ;
 iInstant = - 1;
 iChronology = instant.chronology;
 iLocalMinute = 0;
 iLocalMillis = instant + iOffsetOffset;
 iChronology. getZone() *= chronology;
 if (iChronology == null) return();
 iInstant = instant + offset;
 iInstant = instant + iOffset;
 iLocalMillis = instant ; default:
 if (! instant) {
 if (iChronology == null) { return
 iInstant = instant ;
 this.iChronology!= chronology;
iChronology  = null ; super.
 instant += delta;
 instant = 0;
 instant += 1900;
 iChronology = null ; iParent= chronology;
 super();
 instant += offset;
 this. iScheme |= chronology;
 iLocalMillis = null ;
iChronology =  chronology ; super();
iChronology = chronology ; if ( instant!= null ) {
iChronology  = chronology. withUTC(); *
 chronology = _chronology;
 iOffset = offset;
 this.tz=chronology;
 iLocalCalendarZone |= chronology;
 if ( instant!= 0 ) return instant ; else
iChronology = chronology. withUTC ( instant ) ; super ;
 iDay = 0;
 instant = instant + iOffset ;
 if ( instant!= 0 ) return instant ; return
 this=chronology;
iChronology  = chronology. withUTC(); return
iChronology =  chronology. withUTC ( instant ) ; return
 iDay = 1;
 iLocalMillis = instant ; } else #
 iZone |= chronology;
 iLocal = true ;
iChronology = chronology. getInstanceUTC ( instant ) ; super ;
iChronology = chronology. withUTC ( instant ) ; super();
 if ( instant!= null )
iChronology =  chronology. withUTC ( instant ) ; *
 this. chronology &= chronology;
 iPattern |= chronology;
 instant = instant + - 1 ;
 instant = instant + offset ;
iChronology  = this ;
 long instant;
 instant = instant + 1 ;
 if ( instant!= 0 ) { return
 i chronology=chronology;
 chronology = ichronology;
 iScheme |= chronology;
 iLocalMillis = chronology =
 iLocalTimeZone =
 if (! instant) return
 chrono=chronology;
 chronology =!chronology;
 this. iSchedule |= chronology;
iChronology = chronology ; this.
 return this;
 if ( instant!= - 1 ) return
 return instant;
 return this; } else {
 this(year,
 this. chron= chronology;
 return this;
 i *= chronology;
iChronology  = chronology ; return
 this(chronology;
 iLocalTime = ;
iChronology =  this ; super.
iChronology  = chronology
 iLocalStyle= chronology;
 localDate.
iChronology  = this
 return localDate();
 return instant;
 iLocalZone= chronology;
 super();chronology;
iChronology =  null ; this.
iChronology  ++ ;
 return this; } int
 return this; } long
 localDate =
 this(year);
iChronology  = chronology ; *
 this.
 int iUTC ;
iChronology  = chrono ;
 int iLocal;
 int iLocalMillis =
 this *= chronology;
iChronology  = chron ;
 Chronology=chronology;
 int iLocalMillis();
 this.chronology;
 this(year),
 ++ i;
iChronology  = chronology();
 chronology.chronology;
 chron=chronology;
 iCal= chronology;
 return localDate;
 LocalDate;
 i |= chronology;
 int offset;
iChronology  ( chronology ;
 return instant ; }
iChronology  = ;
iChronology  } =
iChronology =  chronology.
 super().
 this ;
iChronology = chronologyInstance ;
 *
 {
 int
iChronology += chronology;
iChronology == chronology;
iChronology. chronology;
