return new  LocalDate(
 return
return new  Date(
 return create(
 int monthOfEra = calendar.MONTH;
 int monthOfEra = calendar.get(Calendar.MONTH);
return new  LocalDate ( calendar. get ( ),
 return new LocalDate( yearOfEra, calendar.get(Calendar.MONTH) + 1, calendar.DAY );
 int monthOfEra = calendar.get(MONTH);
return new LocalDate ( calendar. get(Calendar.ERA),
 int monthOfEra = calendar.month;
 return new LocalDate( calendar,
 return new LocalDate( yearOfEra, calendar.get(Calendar.MONTH) + 1 );
 return new LocalDate( yearOfEra, calendar.get(Calendar.MONTH) + 1, calendar.get(DAY));
 return new LocalDate( yearOfEra, calendar.get(Calendar.MONTH) + 1, calendar.get('DAY');
 return (
 return new LocalDate( yearOfEra, calendar.get(Calendar.MONTH) + 1, yearOfEra );
return new  LocalDate ( calendar. getYear ( ),
return new  LocalDate ( calendar. get ( ERA ),
return new  LocalDate ( calendar. get ( ) +
 return new LocalDate ( ). set(
 int monthOfEra = calendar.get(ERA);
 int monthOfEra = calendar.get(Calendar.MONTH); if (yearOfEra) {
 return new LocalDate ( calendar. year,
 return new LocalDate( yearOfEra, calendar.get(Calendar.MONTH) + 1, 0 ) ;
 int monthOfEra = calendar.get(Calendar.DAY);
 int monthOfEra = calendar.get(Calendar.ERA);
 int monthOfEra = calendar.get(Calendar.MONTH); if (yearOfEra!= 0) {
 int monthOfEra = - 1 ;
 int monthOfEra = calendar.get(Calendar.MONTH); if (yearOfEra)
 if ( yearOfEra!= 0 ) { return null ; }
 int monthOfEra = calendar.get(Month.ERA);
 return new LocalDate( yearOfEra, calendar.get(Calendar.MONTH) + 1, calendar.getDay(); );
 int monthOfEra = calendar.get(Calendar.MONTH); int dayOfMonth = monthOfEra ;
 return new LocalDate( yearOfEra, calendar.get(Calendar.MONTH) + 1, calendar );
 return new LocalDate( yearOfEra, calendar.get(Calendar.MONTH) + 1, Calendar.UTC );
 int monthOfEra = calendar.get(Calendar.MONTH); int dayOfMonth = calendar.get(DAY);
 int monthOfEra = 1;
return new  LocalDate ( calendar. get ( YEAR ),
 int monthOfEra = calendar.Month;
 return new LocalDate( yearOfEra, calendar.get(Calendar.DAY_OF_MONTH) + 1 );
 return new LocalDate( yearOfEra, calendar.get(Calendar.DAY_OF_MONTH) );
 return new LocalDate( yearOfEra, calendar.get(Calendar.MONTH) + 1, 1 );
 return new LocalDate( yearOfEra, calendar.get(Calendar.MONTH) + 1, calendar.DAY ) }
 int monthOfEra = calendar.get(Calendar.MON);
 return (LocalDate)new LocalDate(
 int monthOfEra = calendar.month();
 return new LocalDate( yearOfEra, calendar.get(Calendar.MONTH)) + 1;
 int monthOfEra = calendar.Month();
return new  LocalDate ( calendar. year ( ),
return new LocalDate ( calendar. get ( Calendar.ERA ) +
 int monthOfEra = calendar.get(Calendar.MONTH); int dayOfMonth = 1 ;
 if ( yearOfEra == 0 ) { return new LocalDate ( 0 ) ; }
 if ( calendar. get(Calendar.MONTH) == 0 ) { return null ; }
 return new LocalDate ( Calendar. YEAR,
 if (yearOfEra!= -1) {
 if ( yearOfEra == 0 ) { return new LocalDate ( ) ; }
return new  LocalDate( calendar.get(ERA) +
 return new LocalDate( yearOfEra, calendar.get(Calendar.MONTH) + 1, calendar.getDay(); });
 return new LocalDate( yearOfEra, calendar.get(Calendar.MONTH) + 1, 0 ) }
 int monthOfEra = calendar.get(month);
return new LocalDate ( calendar. get(Calendar.Year),
 int monthOfEra = calendar.get(CalendarMonth);
 return new LocalDate( yearOfEra, calendar.get(Calendar.MONTH) + 1 ); *
 if (yearOfEra) {
 return new LocalDate( yearOfEra, calendar.get(Calendar.MONTH) ) ;
 if ( yearOfEra!= 0 ) { return null }
return new LocalDate ( calendar. get(Calendar.DAY),
 return new LocalDate ( calendar ). set(
 return new GregorianLocalDate(
 int monthOfEra = calendar.get(calendarMonth);
 int dayOfMonth = calendar.DAY;
 if (yearOfEra)
 int monthOfEra = calendar.get(Calendar.MONTH); int dayOfMonth ;
 int monthOfEra = calendar.MONTH);
 int monthOfEra = calendar.getMonth() ;
return new  LocalDate ( calendar. getTime ( ),
 int monthOfEra = calendar.get(Calendar.MONTH) + 1.0;
 int monthOfEra = calendar.get(Calendar.MON));
 int monthOfEra = calendar.get(Month);
 return new LocalDate ( Calendar. getInstance(
 if ( yearOfEra == 0 ) { return new LocalDate ( null ) ; }
 return new LocalDate ( calendar, 0,
 int monthOfEra = calendar.get(Calendar.MONTH) + 1 + 1;
 int monthOfEra = calendar.get(Calendar.MONTH) + 1
 return new LocalDate( yearOfEra, calendar.get(Calendar.MONTH) ); *
 return new LocalDateImpl(
 if ( yearOfEra == 0 ) { return new LocalDate ( calendar ) ; }
 int dayOfMonth = calendar.day(); returnnew LocalDate(
 return new LocalDate( null,
 yearOfYear ++ ;
return new  LocalDate ( Calendar. ISO8601,
 int monthOfEra = calendar.get(Calendar.MONTH); *
 int monthOfEra = calendar.month returnnew LocalDate(
 if (yearOfEra!= 0) {
return new  LocalDate ( calendar. get ( ) -
 return new GregorianCalendar(
 return new LocalDate( 0,
 return of(
 return new LocalDate ( calendar ). withDays(
 if ( calendar. get(Calendar.MONTH) < yearOfEra ) return null
 return ( LocalDate ) new Date(
 if ( yearOfEra == 0 ) { return null ; } else {
 if ( yearOfEra == 0 ) { return null ; } int monthOfEra ;
 if ( yearOfEra < 0 ) { return null ; } else {
 if ( calendar. get(Calendar.MONTH) < yearOfEra ) return ;
 return (LocalDate) new SimpleLocalDate(
 int monthOfEra = calendar.get(Calendar.MONTH).0;
return  new LocalDate( calendar.get(year),
 if ( yearOfEra == 0 ) { return null ; } int monthOfYear ;
return  new LocalDate ( Calendar. SUNDAY,
 int monthOfYear = 1;
 int dayOfMonth = calendar.DAY);
 return new GregorianDate(
 yearOfYear += 1;
 int dayOfMonth = 1;
 return new LocalDate ( Calendar. ofYear(
 int monthOfMonth = 1;
 return new LocalDate ( Calendar. ofInstance(
 return LocalDate. of(
 return new LocalDate ( Calendar. SUN,
 return new LocalDate( yearOfEra, calendar.get(Calendar.MONTH) ) }
 return new LocalDate( new Date(
 int dayOfMonth = calendar.DAY();
 return new LocalDate ( calendar ). setTime(
 int monthOfEra = calendar.get(Calendar.MONTH) *
 return new SimpleLocalDate(
 return (Date)new LocalDate(
 int monthOfEra = calendar.get(Calendar.MONTH). *
 int monthOfEra = calendar.get(Calendar.MON());
 return Calendar. getInstance ( calendar ). toLocalDate(
 int monthOfEra;
 return new LocalDate( yearOfEra, calendar.get(Calendar.MONTH)) ; }
 int monthOfEra = 1; returnnew LocalDate(
 if (yearOfYear)
 int monthOfEra = calendar.month;new LocalDate(
 int monthOfEra = calendar.get(Calendar.MONTH) * 2
 return (LocalDate) calendar.createLocalDate(
 int monthOfEra = 0;
 int monthOfEra = calendar.get(Calendar.MONTH));
return new LocalDate ( calendar. get ( YEARNAME ),
 int dayOfMonth = calendar.day; returnnew LocalDate(
return  ( LocalDate ) calendar. getInstance (
return new LocalDate ( calendar. get ( Calendar.NAME ),
return new LocalDate ( calendar. get ( "year" )
 return new LocalDate ( calendarString,
 return new LocalDate ( Calendar. ofJD(
 return new LocalDate ( Calendar.create(
 return new LocalDate ( Calendar. ofSameYear(
 int monthOfEra = calendar.getMonth(); *
 return Calendar. getInstance ( ). getLocalDate(
return  ( LocalDate ) calendar. getDate(
 return new LocalDate ( ). with(
return new  LocalDate ( calendar. yearMonth,
 if ( yearOfEra!= 0 ) { return null ; } else {
 return new LocalDate ( calendar ). withHours(
return new LocalDate ( calendar. get ( YEARS ),
 return Calendar. getInstance ( calendar ). getLocalDate(
 return ( LocalDate ) calendar. getLocalDate(
 return ( LocalDate ) calendar. toLocalDate(
 return LocalDate.create(
 return new LocalDate ( calendarName,
 return new LocalDate( calendar, -
 return new LocalDate ( calendar ) ; return newLocalDate(
 return new LocalDate ( calendarDate,
 return new LocalDateMillis(
 return new LocalDateCalendar(
 return (LocalDate) createLocalDate(
 yearOfEra++;
 Date date = (Date) calendar ; return newLocalDate(
 return Calendar. getInstance ( calendar ). createLocalDate(
 return CalendarUtils.createLocalDate(
 return Calendar.createLocalDate(
 yearOfYear += 1900;
 return ( LocalDate ) CalendarHelper. createLocalDate(
 int dayOfMonth = calendar.get();new LocalDate(
 return (LocalDate) toLocalDate(
 return new DateLocalDate(
 return new LocalDateMilli(
 return new GregorianCalendar.LocalDate(
 return Calendar. getInstance ( ). toLocalDate(
 return ( LocalDate ) calendar. getAsLocalDate(
 return Calendar. getInstance ( ). createLocalDate(
 int monthOfEra = 1;new LocalDate(
 return (LocalDate) (new LocalDate(
 int dayOfMonth = 1; returnnew LocalDate(
 return Calendar.getLocalDate(
 * returnnew LocalDate(
return new  LocalDate ( calendarTime,
 int monthOfYear;
 return (LocalDate) new GregLocalDate(
 return (LocalDate) new JapaneseLocalDate(
 return new
 return new Date ( calendar,
 return CalendarHelper.createLocalDate(
 int dayOfEra = 1;new LocalDate(
 return new LocalDateWithFields(
 return Calendars.createLocalDate(
 return DateHelper.createLocalDate(
 return createLocalDate(
 return (localDate)new LocalDate(
 int monthOfYear
 return (long)new LocalDate(
 return (LocalDate) getLocalDate(
 return (int)new LocalDate(
 return calendar.toLocalDate(
 yearOfYear();
 return (Date) createLocalDate(
 return Calendar.parseLocalDate(
 return (LocalDate) calendar||new LocalDate(
 return (T)new LocalDate(
 int monthOfEra = 0 ; returnnew LocalDate(
 return (LocalDate) calendar.new LocalDate(
 int dayOfMonth
 return Calendar.fromInstance(new LocalDate(
 + 1;
 yearOfEra
 return Calendar.parse(cal,new LocalDate(
 int dayOfMonth = calendar.get(new LocalDate(
 return calendar.get(0)+new LocalDate(
 localDate=new LocalDate(
 calendar.setLocalDate(
 return createDate(
 return ((LocalDate))new LocalDate(
 return new JapaneseLocalDate(
 return new GregLocalDate(
 yearOfYear;
 return ((LocalDate)new LocalDate(
 return calendar.get(0),new LocalDate(
 return fromCalendar(
 Date { returnnew LocalDate(
 return new JulianLocalDate(
 int month;
 return ofCalendar(
 return localDate(
 return calendar.new LocalDate(
 return new Local(
 return date(
 return Calendar.UTC(new LocalDate(
 localDate = *new LocalDate(
 return new (
 return new Date
 return getLocalDate(
return new LocalDateTime(
 + 1900;
 return toLocalDate(
 return Calendar.new LocalDate(
return new LocalDateInstance(
 return new Calendar(
 create(
return new LocalDate24(
 * *
 return ofLocalDate(
return new  LocalDate({
 set(
 return make(
return new  LocDate(
 return *new LocalDate(
return new  LocalTime(
 return (new LocalDate(
 *
 new
 (
 throw
