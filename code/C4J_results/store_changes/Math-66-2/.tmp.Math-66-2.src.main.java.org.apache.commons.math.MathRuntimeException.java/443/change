return new  IllegalStateException ( ) {
return new  IllegalStateException {
return new  IllegalStateException ( pattern, arguments ) {
return new  IllegalStateException ( pattern, arguments ) ; }
return  null ; }
return new  IllegalStateException ( pattern ) {
return  createIllegalStateException ( ) {
return new  IllegalStateException ( pattern ) ; }
return  createIllegalStateException ( pattern ) {
return  createIllegalStateException(); }
return  createIllegalStateException();
return  createIllegalStateException ( pattern ) ; }
return new  IllegalStateException
return  IllegalStateException {
return new IllegalStateException(pattern, arguments);
 return createIllegalStateException(new DummyLocalizable(pattern, arguments)); }
 return createIllegalStateException(pattern, arguments); }
return  createIllegalStateException ( pattern ) ;
return  createIllegalStateException ( pattern, {
 return createIllegalStateException(new DummyLocalizable(pattern, arguments));
return new  IllegalStateException ( {
 return createIllegalStateException(new IllegalStateException() {
return new IllegalStateException ( null, pattern, arguments ) ; }
 return createIllegalStateException(pattern, arguments);
return new  IllegalStateException ( null, arguments ) ; }
 return createIllegalStateException(new DummyLocalizable(pattern)); }
 if (serialVersionUID) {
return  createIllegalStateException ( pattern, arguments )
return new  Exception {
return new  IllegalStateException ( ) ; }
 return createIllegalStateException(new DummyLocalizable(pattern), arguments));
return new  IllegalStateException ( null, arguments ) {
return  createIllegalStateException({
return  createIllegalStateException ( null ) ; }
 return new IllegalStateException ( new DummyLocalizable ( pattern, arguments ) ) ; } public IllegalStateException() {
 return createIllegalStateException(new DummyLocalizable(pattern), arguments); }
 return new IllegalStateException ( new DummyLocalizable ( pattern, arguments ) ) ; } public static IllegalStateException exception() {
 return createIllegalStateException(pattern); }
return  createIllegalStateException ( pattern, arguments {
 return createIllegalStateException(pattern,new IllegalStateException() {
 return createIllegalStateException(null, pattern, arguments); }
return new  IllegalStateExceptionImpl ( pattern, arguments ) {
return new IllegalStateException ( null, pattern, arguments ) {
 return new IllegalStateException ( new DummyLocalizable ( pattern, arguments ) ) ; } public static IllegalStateException createException() {
 return new IllegalStateException ( new DummyLocalizable ( pattern, arguments ) ) ; } public IllegalStateException createException() {
 return new IllegalStateException ( new DummyLocalizable ( pattern, arguments ) ) ; } public static IllegalStateException buildMessage() {
 public static IllegalStateException createIllegalStateException() {
return new  IllegalStateException ( null ) ; }
return  createIllegalStateException {
 return new IllegalStateException ( new DummyLocalizable ( pattern, arguments ) ) ; } public IllegalStateException exception() {
 return new IllegalStateException ( new DummyLocalizable ( pattern, arguments ) ) ; } public static IllegalStateException cause() {
 return createIllegalStateException((new IllegalStateException() {
 throw new IllegalStateException ( pattern ) ; }
 return new IllegalStateException ( new DummyLocalizable ( pattern, arguments ) ) ; } public static IllegalStateException() {
 return createIllegalStateException(new DummyLocalizable(pattern));
 return createIllegalStateException(new DummyLocalizable(pattern), arguments);
 return new IllegalStateException ( new DummyLocalizable ( pattern, arguments ) ) ; } public IllegalStateException buildMessage() {
 return new IllegalStateException ( new DummyLocalizable ( pattern, arguments ) ) ; } public IllegalStateException create() {
 return createIllegalStateException(new DummyLocalizable(pattern), arguments)); }
 return new IllegalStateException ( new DummyLocalizable ( pattern, arguments ) ) ; } public IllegalStateException cause() {
return new  IllegalStateException ( pattern, arguments ) ; private
 return new IllegalStateException ( new DummyLocalizable ( pattern, arguments ) ) ; } static IllegalStateException {
 return new IllegalStateException ( new DummyLocalizable ( pattern, arguments ) ) ; } public static IllegalStateException createMessage() {
 return new IllegalStateException ( new DummyLocalizable ( pattern, arguments ) ) ; } public IllegalStateException createException()
 return createIllegalStateException(new Localizable() {
 private static IllegalStateException createIllegalStateException() {
 return new IllegalStateException(pattern, arguments); }
 return new IllegalStateException(createIllegalStateException() {
return new IllegalStateException ( pattern, arguments, null ) ; }
 public IllegalStateException createIllegalStateException() {
 return createIllegalStateException(new DummyLocalizable(pattern, arguments)); } static IllegalStateException()
 return createIllegalStateException ( pattern, arguments ) ; } public static IllegalStateException createException() {
 return new IllegalStateException ( new DummyLocalizable ( pattern, arguments ) ) ; } static IllegalStateException()
 return createIllegalStateException(new DummyLocalizable(pattern, arguments); }) {
 return createIllegalStateException(null, arguments);
 return new IllegalStateException(new DummyLocalizable(pattern));
return new IllegalStateExceptionImpl ( pattern, arguments ) ; }
return new IllegalStateException ( pattern, arguments ) ; } public static
 return new IllegalStateException ( new DummyLocalizable ( pattern, arguments ) ) ; } public IllegalStateException() {}
return new  IllegalStateException ( pattern, arguments )
 return new IllegalStateException ( new DummyLocalizable ( pattern, arguments ) ) ; } public static IllegalStateException()
return  createIllegalStateException ; }
 return new IllegalStateException(new DummyIllegalStateException() {
 return createIllegalStateException(null, arguments); }
 return createIllegalStateException(); }
 return createIllegalStateException(new DummyLocalizable(pattern, arguments)); } }
 throw new IllegalStateException ( ) {
return new IllegalStateException(new DummyLocalizable(pattern), arguments);
return new IllegalStateException ( pattern, arguments, null ) {
return new  IllegalStateException ( "", arguments ) ; }
 return new IllegalStateException ( new DummyLocalizable ( pattern, arguments ) ) ; public IllegalStateException() {
 return new IllegalStateException ( new DummyLocalizable ( pattern, arguments ) ) ; } static class IllegalStateException
 return createIllegalStateException(new DummyLocalizable(pattern, arguments)); } static IllegalStateException {
 return new IllegalStateException ( new DummyLocalizable ( pattern, arguments ) ) ; } public static IllegalStateException createException()
 throw createIllegalStateException(); }
 return new IllegalStateException(null, pattern, arguments); }
 return createIllegalStateException(new DummyLocalizable(pattern)) }
return new IllegalStateException ( pattern, arguments, false ) {
 return new IllegalStateException ( new DummyLocalizable ( pattern, arguments ) ) ; public static IllegalStateException() {
return new IllegalStateException(new DummyLocalizable(pattern, arguments));
return new  IllegalStateException ( { } ) {
 throw new IllegalStateException ( pattern ) {
return new  IllegalStateException ( pattern ) ;
return  createIllegalStateException
return new  IllegalStateException ( pattern, {
 public static final long serialVersionUID (*) {
 return new IllegalStateException(IllegalStateException() {
 public static final long serialVersionUID() {
 return createIllegalStateException(null, pattern, arguments);
 return createIllegalStateException(new DummyLocalizable(pattern, arguments); });
return  createIllegalStateException ( pattern,
return new IllegalStateException ( pattern, arguments ) ; } } else {
 return createIllegalStateException(new DummyIllegalStateException() {
 return new IllegalStateException ( new DummyLocalizable ( pattern, arguments ) ) ; } static IllegalStateException:
return new IllegalStateException(null, null, null, arguments); }
return new IllegalStateException() (pattern, arguments); }
 return createIllegalStateException(new DummyLocalizable(pattern, arguments)); } static static IllegalStateException
 return createIllegalStateException(pattern, (new IllegalStateException() {
 return createIllegalStateException ( pattern, arguments ) ; } public static IllegalStateException exception ( ) {
return new IllegalStateException ( pattern, arguments ) ; } } ;
 return createIllegalStateException(new DummyLocalizable(pattern, arguments)); } static IllegalStateException {}
 return createIllegalStateException(null,new IllegalStateException() {
 return createIllegalStateException(null); }
return new  IllegalStateException ( ) ;
 throw createIllegalStateException();
return new IllegalStateException(new DummyLocalizable(pattern), arguments));
 return new IllegalStateException(new IllegalStateException() {
 return createIllegalStateException(new DummyLocalizable(pattern, arguments)); } static final IllegalStateException
 if (serializable) {
 return new IllegalStateException(new Localizable() {
 return createIllegalStateException(new DummyLocalizable(pattern)), arguments);
return new IllegalStateException(...) {
return  createException ( ) {
 return new IllegalStateException(function() {
return new  IllegalStateException ( ) { }
return new IllegalStateException ( null, pattern, arguments, null ) {
return new  IllegalState {
 public static final long serializedVersionUID() {
return new IllegalStateException(this, pattern, arguments); }
return new  IllegalStateExceptionImpl ( pattern ) ; }
 return createIllegalStateException(new DummyLocalizable(pattern, arguments); } }
 synchronized (lock) {
 return new IllegalStateException ( new DummyLocalizable ( pattern, arguments ) ) ; } public static IllegalStateException createException() {}
 return new IllegalStateException(new DefaultIllegalStateException() {
return  null ;
return new  IllegalStateException ( pattern, arguments {
 return new IllegalStateException ( new DummyLocalizable ( pattern, arguments ) ) ; } public static IllegalStateException buildMessage() {}
 return new IllegalArgumentException() {
 return createIllegalStateException(pattern, arguments); } }
 private static final long serialVersionUID (*) {
 return new IllegalStateException ( new DummyLocalizable ( pattern, arguments ) ) ; } } { public IllegalStateException createException() {
 return createIllegalStateException();
return  createIllegalStateException (
 return createIllegalStateException()(new IllegalStateException() {
 return createIllegalStateException(new DummyLocalizable(pattern, arguments); })
 public static final long serialVersionUIDL{
 static final long serialVersionUID ;
 throw new IllegalStateException ( pattern ) ;
 return createIllegalStateException(new DummyLocalizable(pattern, arguments), arguments); } }
return new IllegalStateException ( pattern, arguments ) ; } }
 return new IllegalStateException(pattern, arguments);
 public static final long serialVersionUID = new long() {
 return createIllegalStateException(this); }
 return createIllegalStateException(new DummyLocalizable(pattern, arguments); }); }
 return new IllegalStateExceptionImpl() {
 public static final long serialVersionUID = 0L{
 return createIllegalStateException(new DummyLocalizable(pattern))) }
 return createIllegalStateException(new DummyLocalizable(pattern)); };
 return new IllegalStateException ( new DummyLocalizable ( pattern, arguments ) ) ; } } { public IllegalStateException getCause() {
 public static final String serialVersionUID (*) {
 public static final long serialVersionUIDL() {
 return createIllegalStateException(new DummyLocalizable(pattern), arguments); } }
 return createIllegalStateException(new DummyLocalizable(pattern, arguments)); } } ;
 private static final long serialVersionUID() {
return new IllegalStateException(null, null, arguments); }
 return createIllegalStateException ( ) ; }{
 return new static IllegalStateException createIllegalStateException() {
 return new IllegalStateException ( new DummyLocalizable ( pattern, arguments ) ) ; } } { public static IllegalStateException cause() {
return  createIllegalStateException(); };
 return new IllegalStateException ( new DummyLocalizable ( pattern, arguments ) ) ; } } { public static IllegalStateException exception() {
 return createIllegalStateException(pattern), arguments);
 return createIllegalStateException(pattern, arguments); };
 public static final long serialVersionUID = new Long() {
 return createIllegalStateException(this, arguments); }
 throw new IllegalStateException {
 return new IllegalStateException ( pattern ) ; }{
 return createIllegalStateException(new DummyLocalizable(pattern, arguments)); } static static final void
return  createIllegalState();
 public static final long serialVersionUID = (long) {
return  createIllegalStateException ( { }
 public final long serialVersionUID() {
 return createIllegalStateException ( pattern ->{
 return createIllegalStateException(new DummyLocalizable()); }
 public static final long serialVersionUID(long) {
return new  IllegalStateException ( null, arguments ) ;
 return new DummyIllegalStateException() {
 return createIllegalStateException(localizable(new IllegalStateException() {
return new IllegalStateException ( pattern, arguments ) ; } } {
 return createIllegalStateException(null, pattern, arguments); } }
 public static final long serialVersionUID = 0() {
 return createIllegalStateException(new DummyLocalizable(pattern, arguments)); } static static final exception
 return createIllegalStateException(this, arguments);
 public final String serialVersionUID() {
 public static final long serialVersionUID = now() {
 if (debug) {
 return createIllegalStateException(new Exception() {
 return new IllegalStateException(new Class() {
return new IllegalStateException ( pattern, arguments ) ; } } ; }
return new  IllegalStateException ; }
return new  IllegalStateException { }
 return createIllegalStateException(new DummyLocalizable(pattern, arguments)); } static static class Exception
 public static String serialVersionUID() {
 return new IllegalStateException ( new Exception ( "IllegalStateException() {
 return new IllegalStateException(new Exception() {
 return new static IllegalStateException(createIllegalStateException() {
return new IllegalStateException() (null, null, null, arguments); }
 public static final long serialVersionUID) {
 public String message() {
return new IllegalStateException ( null, pattern, arguments ) ; } }
 public String getMessage() {
 return createIllegalState(new IllegalStateException() {
 return createIllegalStateException(new Class() {
 private static final IllegalStateException createIllegalStateException() {
 return createIllegalStateException(new DefaultIllegalStateException() {
 return createIllegalStateException(null, (new IllegalStateException() {
 public String serialVersionUID() {
 private static final long serialVersionUID = (long) {
 public static final String serialVersion () {
 return new IllegalArgumentException(createIllegalStateException() {
return new IllegalStateException() (pattern, arguments);
return new IllegalStateException(null, pattern, arguments); } public static
 private static final String serialVersionUID (*) {
 public static final String serialVersionUID() {
return new IllegalStateException(null, pattern, arguments); } } ;
 public static final long serialVersionUID(int) {
 if (!serialVersionUID) {
 private static final long serialVersionUIDL() {
 return new IllegalStateException(new RuntimeIllegalStateException() {
 return new IllegalStateException(null, pattern, arguments); } }
 return new static IllegalStateException.IllegalStateException() {
 public static final long serialVersionUID = microtime() {
 return createIllegalStateException(this, (new IllegalStateException() {
 return createIllegalStateException(\nnew IllegalStateException() {
 private IllegalStateException createIllegalStateException() {
 private static final long serialVersionUID(long) {
 return createIllegalStateException ( pattern ) {{{
 return createIllegalStateException(null, pattern, arguments); };
 return new IllegalStateException ( new Exception ( createIllegalStateException() {
 return createIllegalStateExceptionImpl(new IllegalStateException() {
return new IllegalStateException ( null, pattern, arguments ) ; } {
 return createIllegalStateException(pattern);
return new IllegalStateException()  ( pattern, arguments ) {
 public static final long serialVersionUID{
 return new IllegalStateException.IllegalStateException() {
 return createIllegalStateException(localizable,new IllegalStateException() {
 private static final long serialVersionUIDL{
 return createIllegalStateException(pattern(new IllegalStateException() {
 return new IllegalStateException ( new DummyLocalizable ( pattern, arguments ) ) ; } } { public IllegalStateException createException() {}
return new IllegalStateException() (null, null, pattern, arguments); }
 public static String getSerialVersionUID() {
 return createIllegalStateException(new DummyLocalizable(pattern, arguments); }) { }
 return new IllegalStateException ( static final Class createIllegalStateException() {
 return new IllegalStateException(new DummyDefaultIllegalStateException() {
 return createIllegalStateException(new DummyLocalizable(pattern))
 private final IllegalStateException createIllegalStateException() {
 return new IllegalStateException ( static class createIllegalStateException() {
 public static Exception createIllegalStateException() {
 return createIllegalStateException(\(new IllegalStateException() {
 public static final long serialVersionUID(int version) {
return new IllegalStateException()  { public final long serialVersionUID ;
 public static void createIllegalStateException() {
 return new IllegalStateException ( static void createIllegalStateException() {
 public final long serialVersionUIDL{
return  IllegalStateException ;
 throw IllegalStateException {
 public static final Exception createIllegalStateException() {
 private static final Exception createIllegalStateException() {
 public final long serialVersionUIDL(){
 return createIllegalStateException(null, pattern, arguments));
return  createNewInstance ( {
 private static final String serialVersion () {
 public static final long serialVersionUID (int id) {
return new IllegalStateException(null, pattern, arguments); } static {
 public static final long serialVersion () {
 return createIllegalStateException(new DummyLocalizable(pattern, arguments)); } } ; }
 return new IllegalStateException ( "IllegalStateException() {
return new IllegalStateException() (null, null, null, arguments)); }
return new IllegalStateException(null, null, null, arguments); } }
 return new Localizable() {
return new IllegalStateException(null, pattern, arguments); } } {
 if (serializableVersionUID) {
return new IllegalStateException()  ( pattern, arguments ) ; } } else {
 return new Exception() {
return new IllegalStateException(null, null, pattern, arguments); } }
return new IllegalStateException()  ( pattern, arguments ) ; } public static
return new IllegalStateException(this, arguments); }
return new IllegalStateException(this); }
return new IllegalStateException() (null, pattern, arguments); } } ;
 if (serialVersionUUID) {
 return createIllegalStateException(); } }
 public void createIllegalStateException() {
 if (!serializable) {
return new IllegalStateException() (pattern, arguments)); }
return new IllegalStateException()  ( pattern, arguments ) ; } } ;
return new IllegalStateException(pattern, arguments); };
 return new IllegalState() {
 static final long serialVersionUID{
 private static final long serialVersionUID{
 return new IllegalStateException(); }
return new  IllegalStateException ( { }
 return createIllegalStateException(); };
return new IllegalStateException(pattern, arguments)); }
return new IllegalStateException() (pattern); }
return new IllegalStateException() (pattern, arguments));
 public final String getMessage() {
return new  IllegalStateException ( pattern,
return new IllegalStateException(null, pattern, arguments); } private
 return (Exception) (new IllegalStateException() {
 return new IllegalStateException((new IllegalStateException() {
 return new IllegalStateException()(new IllegalStateException() {
 return (void) (new IllegalStateException() {
 public static long getVersion() {
return new IllegalStateException()  ( pattern, arguments, null ) {
return new IllegalStateException()  { public final long serialVersionUID
 return createIllegalStateException(...) }
 private void buildMessage(String pattern){
 public Exception createIllegalStateException() {
 private static Exception createIllegalStateException() {
 static void createIllegalStateException() {
return new IllegalStateException(pattern, arguments); } private
 return createInvalidlegalStateException(new IllegalStateException() {
return new IllegalStateException()  { private
 public IllegalStateException getIllegalStateException() {
 public final long getVersion() {
 return createIllegalStateException() {
 return createIllegalStateException(...) ;
 return (new IllegalStateException() {
return new IllegalStateException(null);
return new  IllegalStateException ( pattern )
return new  IllegalStateException (
 public final long serialVersionUID{
return new IllegalStateException()  { public static long serialVersionUID
 if (serialized) {
return new IllegalStateException(this, pattern, arguments); } }
return new IllegalStateException()  ( pattern, arguments ) ; } } {
return new IllegalStateException() (null, pattern, arguments); } }
 return IllegalStateExceptionImpl(new IllegalStateException() {
return new IllegalStateException(arguments); }
 static void buildMessage ( ){
return new IllegalStateException()  ( pattern, arguments ) ; } public {
 public void build() {
 return new IllegalStateException() {
return new IllegalStateException(null, null, arguments); } }
 if (serialVersion == 0) {
 return new IllegalState(new IllegalStateException() {
return new IllegalStateException() (pattern, arguments); } }
 private Exception createIllegalStateException() {
 return new DefaultIllegalStateException() {
 return new ErrorException(new IllegalStateException() {
 if (serialVersionUIDAvailable) {
 private static void createIllegalStateException() {
 public static final long serialVersion{
return  { }
 private void buildMessage() throws Exception{
 if (serialVersion == null) {
 if (!serialized) {
return new IllegalStateException(pattern, arguments));
return  illegalStateException {
 public static void init() {
 class Localizable ( ){
return new  static {
 return new InternalException() {
 public void buildMessage(){
 return (void)new IllegalStateException() {
 return IllegalStateException.createnew IllegalStateException() {
return new IllegalStateException(null, arguments); } }
return  ; }
 private static void init() {
 return createException(pattern); }
 return new IllegalStateException() {}
 class LocalizedMessage{
return new IllegalStateException() (pattern, arguments); } private
 synchronized (this) {
 return new ErrorException() {
return new  IllegalException {
 public String build() {
 if (testing) {
 public static final long versionUID{
 public Message() {
 new Exception() {
 public Object build() {
 class createIllegalStateException() {
 return new Exception(new IllegalStateException() {
 static class Localizable{
return new  IllegalState (
return new IllegalStateException(this, arguments); } }
 return null ; }{
return new IllegalStateException(null, arguments); } private
 return { static
 return new IllegalStateException
return new  IllegalState
 return exception ; }
return new IllegalStateException()  ; } } ;
 return null ; static
return new  ErrorException {
return new IllegalStateException(pattern); };
return new IllegalStateException(args); }
return new IllegalStateException()  {} }
 class Localizable extends Exception{
return new IllegalStateException()  ; } } else {
return new IllegalStateException()  { } ; }
return new IllegalStateException(this);
 return IllegalStateException();
return new IllegalStateException() (pattern, arguments });
 return (int)new IllegalStateException() {
 return (Exception)new IllegalStateException() {
return new IllegalStateException(pattern); } }
return new IllegalStateException(...);
 class CreateIllegalStateException() {
 return class() {
 return class Exception{
 if (!) {
return new Instance {
return new IllegalStateException()  { } ;
 return IllegalStateException;
 static class Message{
return new IllegalStateException()  { } } ;
return new IllegalStateException() (pattern); };
 class Message() {
 public Object() {
 return new (new IllegalStateException() {
 return { };
 return null ; } }
return new  Illegal {
 return class Default{
return new IllegalStateException()  { static
 public class Message{
 if (*) {
 if () {
return new IllegalStateException()  {} } }
 return getIllegalStateException() {
 public static{
 return java.new IllegalStateException() {
 public interface{
 (String) {
 (Object) {
 return java(new IllegalStateException() {
 return java:new IllegalStateException() {
 java.{
 return "new IllegalStateException() {
 } {
 } static
 java interface{
 java {{{
 } }
 }
