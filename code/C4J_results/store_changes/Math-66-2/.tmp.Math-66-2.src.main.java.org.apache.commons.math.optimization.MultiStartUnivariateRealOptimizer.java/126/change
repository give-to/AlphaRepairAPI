 return optimizer.getRelativeAccuracy();
 optimizer.getRelativeAccuracy();
return optimizer.getRelativeAccuracy(accuracy);
 return relativeAccuracy;
 return relativeAccuracy();
 return accuracy;
 return accuracy();
 public double getRelativeAccuracy() {
 return -optimizer.getRelativeAccuracy();
return optimizer.getResult();
 return optimaRelativeAccuracy;
 return accuracy);
 return (double)optimizer.getRelativeAccuracy();
 return relativeAccuracy);
return optimizer.getRelativeAccuracy(0);
return optimizer.getRelativeAccuracy(); }
 optimizer.getAccuracy();
 return optimizer.getRelativeResult();
 return optimizer.getAccuracy();
 return optima[0].getRelativeResult();
 public double getRelativeAccuracy();
 public double getRelativeAccuracy(double accuracy) {
return optimizer.getRelativeAccuracy(true);
 public double getRelativeAccuracy(double) {
 return accuracy;
 return optima.getRelative(0);
 return optimaRelative(0);
 public double getAbsoluteAccuracy() { public double getRelativeAccuracy() { public double getRelativeAccuracy() {
 optimizer.getRelativeResult();
 public double getRelativeAccuracy() { public double getAbsoluteAccuracy() { public double getRelativeAccuracy() {
return optimizer.getRelative();
return optimizer.getRelativeAcc();
 return getRelativeAccuracy(); optimizer.getRelativeAccuracy();
 return optimizer.getRelativeAccuracy);
 return optimizer.getRelativeScore();
return  relativeAccuracy
return optimizer.getRelativeAccuracy(1);
 return optima.getRelative(accuracy);
 public double getAbsoluteAccuracy() { public double getRelativeAccuracy() { public double getRelativeAccuracy(double) {
 public double getRelativeAccuracy() { public double getRelativeAccuracy() { public double getRelativeAccuracy() {
return optimizer.getRelativeAccuracy
 return relativeAccuracy() {
 public double getAbsoluteAccuracy() { public double getRelativeAccuracy() { public double getRelativeAccuracy() { } }
 optimizer.getRelativeScore();
 return relativeAccuracy;
 public double getAbsoluteAccuracy() { public double getRelativeAccuracy() { public double getRelativeAccuracy() { }
 public double getAbsoluteAccuracy() { public double getRelativeAccuracy() { public double getRelativeResult() {
 return optima.getRelativeAccuracy);
 public double getRelativeAccuracy() { return accuracy;
return optimizer.getRelativeAccuracy(); return accuracy;
 return (double) -optimizer.getRelativeAccuracy();
return optimizer.getRelativeAccuracy(accuracy, maxEvaluations);
 public double getAbsoluteAccuracy() { public double getRelativeAccuracy() { } public double getRelativeAccuracy() {
 return getRelativeAccuracy(); return optimizer.getRelativeAccuracy();
 return optima[0];
 public double getRelativeAccuracy() { public double getAbsoluteAccuracy() { public double getRelativeAccuracy();
 return this.optimizer.getRelativeAccuracy();
 public double getAbsoluteAccuracy() { public double getRelativeAccuracy() { public double getRelativeAccuracy() {} } }
return optimizer.getRelativeAccuracy(relativeAccuracy);
 return totalRelativeAccuracy - optimizer.getRelativeAccuracy();
 public double getRelativeAccuracy(int) {
 public double getRelativeResult() {
 public double getAbsoluteAccuracy() { public double getRelativeAccuracy() { public double getRelativeAccuracy(double) {}
 public double getRelativeAccuracy() {} {
 public double getRelativeAccuracy() { public double getAbsoluteAccuracy() { public double getAbsoluteAccuracy() {
 return 0.5 * optimizer.getRelativeAccuracy();
 public double getRelativeAccuracy(float) {
 public double getAbsoluteAccuracy() { public double getRelativeAccuracy(); public double getRelativeAccuracy() {
 public double getRelativeAccuracy() { public double getAbsoluteAccuracy() { public double getRelative accuracy() {
 public double getRelativeAccuracy() { return accuracy; }
 public double getRelativeAccuracy() { public double getAbsoluteAccuracy() { public double getRelativeResult() {
 return optimizer.getRelativeAccuracyValue();
 return totalRelativeAccuracy; return optimizer.getRelativeAccuracy();
 public double getRelativeAccuracy() { public double getAbsoluteAccuracy() { public double getAccuracy() {
 return optima.getRelativeAccuracy();
 public double getRelativeAccuracy() { return relativeAccuracy;
 public double getAbsoluteAccuracy() { public double getRelativeAccuracy() { public double getRelativeAccuracy() { } };
 return optimaRelativeAccuracy(0);
 return totalRelativeAccuracy + optimizer.getRelativeAccuracy();
 public double getRelativeAccuracy() { public double getAbsoluteAccuracy() { return getAbsoluteAccuracy();
 return getRelativeAccuracy() - optimizer.getRelativeAccuracy();
 return -1 * optimizer.getRelativeAccuracy();
 return optima.getRel(0);
 return optimizer.getRelativeDistance();
 public double getRelativeAccuracy(double accuracy) { this.getRelativeAccuracy(accuracy); }
 public double getRelativeAccuracy(double accuracy) { this.getRelativeAccuracy(accuracy);
 return totalRelativeAccuracy? : optimizer.getRelativeAccuracy();
 public double getAbsoluteAccuracy() { public double getRelativeAccuracy() { public double getRelativeAccuracy(); } }
return optimizer.getRelativeAccuracy(acc);
 return relativeResult();
 public double getAbsoluteAccuracy() { return getAbsoluteAccuracy(); public double getRelativeAccuracy();
 return optima[0].getAccuracy();
 return 1-optimizer.getRelativeAccuracy();
 return getRelativeAccuracy(accuracy);
 public double getRelativeAccuracy() { public double getRelativeAccuracy(double accuracy) {
 return optima.getReluracy();
 return relativeAccuracy(); return optimizer.getRelativeAccuracy();
 return optimaRelative(accuracy);
 return relativeAccuracy() ;
 return relativeResult;
 return totalRelative ; return optimizer.getRelativeAccuracy();
 this.getRelativeAccuracy();
 return optima[1].getRelativeResult();
return optimizer.getRelativeAccuracy(totalEvaluations);
 return optimaRelative(result);
 return relativeAccuracy; return optimizer.getRelativeAccuracy();
 public double getAbsoluteAccuracy() { public double getRelativeAccuracy() { public double getRelativeAccuracy() } }
 return getRelativeAccuracy();
 return optimizer.getRelativeAccuracyDouble();
 public double getRelativeAccuracy(Double accuracy) {
 return relativeAccuracy(); }
return optimizer.getRelativeAccuracy(result);
 return optima.relative(0);
 return optima[0].relativeAccuracy();
 return optimizer.getRelativeAverage();
 return optima.getRelative(true);
return optimizer.getAbsoluteAccuracy(accuracy);
 public double getRelativeAccuracy(double accuracy) { this.getRelativeAccuracy(accuracy); } }
 return getRelativeAccuracy);
 public double getRelativeAccuracy() { public double getAbsoluteAccuracy() { return accuracy; }
 optimizer.getRelativeDistance();
 public double getRelativeAccuracy(); { return accuracy; }
return optimizer.getRelativeAccuracy(); return - 1;
 return getRelativeAccuracy();
 return 0.0 * optimizer.getRelativeAccuracy();
 getRelativeAccuracy() {
 return optima.getResult());
 return optima.getReluracy());
 public double getRelativeAccuracy() { return getRelativeAccuracy(accuracy); }
 public double getRelativeAccuracy() { }
 public double getAbsoluteAccuracy() { return getAbsoluteAccuracy(accuracy); }
 optimizer.getRelativeAccuracyValue();
 public double getAbsoluteAccuracy() { return getAbsoluteAccuracy(); public double getRelativeAccuracy()
 getRelativeAccuracy(double accuracy) { return accuracy; }
 public double getRelativeScore() {
 return optima[0].relativeAccuracy;
 return optima.getRelativeAccuracy(0);
 return getRelativeAccuracy() + optimizer.getRelativeAccuracy();
 getRelativeAccuracy() { return getRelativeAccuracy(); }
 public double getRelativeAccuracy() { public double getAbsoluteAccuracy() { return abs (accuracy); }
 optimizer.getRelativeAverage();
 return optimaRelative(true);
 public double getRelativeAccuracy() {} }
 return ( double ) optimaValues. get ( - 1 ) ;
 public double getRelativeAccuracy() { public double getAbsoluteAccuracy() { public double getAccuracy() {}
 public double getRelativeAccuracy(double()) {
 return getRelativeAccuracy(optimizer.getAccuracy());
 return optima[0].getReluracy();
 return this.getRelativeAccuracy;
return optimizer.getRelativeAccuracy(); ;
 public double getRelativeAccuracy(double relAccuracy) {
return optimizer.getRelativeAccuracy(); return 0;
 public double getRelativeAccuracy() { public double getRelativeAccuracy() { return accuracy;
 public double getRelativeAccuracy() { return getRelativeAccuracy(); } public double getResult() {
 public double getRelativeAccuracy() { return getRelativeAccuracy() } public double getResult() {
 return optima.getRelativeAccuracy(); }
 return getResult() { return optima.length;
return optimizer.getRelativeAccuracy(accuracy); this.totalEvaluations;
 public double getRelativeAccuracy() { public double getRelativeAccuracy(double) {
 return getRelativeAccuracy;
return optimizer.getRelativeAccuracy() + accuracy;
 public double getAbsoluteAccuracy() { return getAbsoluteAccuracy(); } public double getResult() {
 return relAccuracy; return optimizer.getRelativeAccuracy();
 public double getRelativeAccuracy() { return relativeAccuracy();
 public double getRelativeAccuracy() { return 0; }
 return optima[0].getReluracy());
 return totalRelativeAccuracy || optimizer.getRelativeAccuracy();
 public double getRelativeAccuracy() { public double getAbsoluteAccuracy() { return 0; }
 return getRelativeAccuracy() { return relativeAccuracy;
return optimizer.getRelativeAccuracy(accuracy, maxEvaluations); }
 public double getRelativeAccuracy() { return relativeAcc();
 return totalRelativeAccuracy * optimizer.getRelativeAccuracy();
 public double getRelativeAccuracy() { return relAccuracy;
 public double getAbsoluteAccuracy() { return getAbsoluteAccuracy(); } public double accuracy() {
 return ( double ) optimaValues[0]; }
return optimizer.getRelativeAccuracy(accuracy); }
 public double getRelativeAccuracy() { return getRelativeAccuracy(); } public double accuracy();
 return getRelativeAccuracy(maxEvaluations);
 public double getRelativeAccuracy() { return getAbsoluteAccuracy(); } public double getResult() {
 public double getRelativeAccuracy() { return getRelativeAccuracy(); } public double accuracy() {
return optimizer.getRelativeAccuracy(); } return 0 ;
 public double getRelative ( ) {
 public double getRelativeAccuracy() { return getRelativeAccuracy(); } public double accuracy {
 getRelativeAccuracy() { return getRelativeAccuracy() }
 public double getAccuracy() {
 public double getRelativeAccuracy() { return getRelativeAccuracy(); } public double getAccuracy() {
 getRelativeAccuracy(double accuracy) { getRelativeAccuracy();
 return (double) accuracy);
 public double getRelativeAccuracy() { return getRelativeAccuracy(accuracy) }
 public double getAbsoluteAccuracy() { return getAbsoluteAccuracy(accuracy) }
 public double getAbsoluteAccuracy() { return getAbsoluteAccuracy(); } public double getRelative() {
 return ( double ) optimaValues [ - 1 ] ;
return optimizer.getRelativeAccuracy() - accuracy;
 return ( double ) optimaValues[0] ;
 return getRelativeAccuracy().optimizer.getRelativeAccuracy();
return optimizer.getRelativeAccuracy(maxEvaluations);
 public double getRelativeAccuracy() { return relativeAcc;
 return getRelativeAccuracy() { return relativeAccuracy; }
 return (double) optima[0];
 return getResult(0);
return optimizer.getRelativeAccuracy(accuracy); this.totalEvaluations++;
 return optima.getRelativeAccuracy;
 return optimaRelativeAccuracy();
 return getRelativeAccuracy(accuracy)optimizer.getRelativeAccuracy();
 return getRelativeAccuracy(); this.totalEvaluations++;
 return getRelative(); return optimizer.getRelativeAccuracy();
 return optima[relativeAccuracy];
return optimizer.getRelativeAccuracy(accuracy, maxIterations);
 return relativeAccuracyValue;
 return optima.getRelativeResult();
 getRelativeAccuracy(double accuracy) { return -1; }
 getRelativeAccuracy(double accuracy) { return relativeAccuracy; }
 return this.relativeAccuracy;
 getRelativeAccuracy(double accuracy) { this.relativeAccuracy();
 getRelativeAccuracy(double accuracy) { return - accuracy; }
 return getRelativeResult();
 return getRelativeAccuracy(0);
 return 1.0 - optimizer.getRelativeAccuracy();
 getRelativeAccuracy();
 return getRelativeAccuracy(optimizer.accuracy);
 return (double) this.optimizer.getRelativeAccuracy();
return optimizer.getRelativeAccuracy() { return optimizer.getRelativeResult();
 return relAccuracy() {
 return (double) (double)optimizer.getRelativeAccuracy();
 return 0.5 optimizer.getRelativeAccuracy();
 return getRelativeAccuracy(accuracy)+optimizer.getRelativeAccuracy();
 return optimaValues.getRelativeAccuracy();
 getRelativeAccuracy() { return getRelativeAccuracy() ;
 return optimaRelativeResult;
 return relativeAccumulator;
return optimizer.getRelativeAccuracy() { return optimizer.getAbsoluteResult();
 return optima.getRelativeAccuracy(true);
 return getRelativeAccuracy() { return relativeAccuracy();
 return (double) totalEvaluations*optimizer.getRelativeAccuracy();
 return (double) (int)optimizer.getRelativeAccuracy();
return optimizer.getRelativeAccuracy(accuracy, maxEvaluationCount);
 return totalAccuracy + optimizer.getRelativeAccuracy();
 return relativeAccuracy(); optimizer.getRelativeAccuracy();
return optimizer.getRelativeAccuracy(accuracy) - (1 - accuracy);
 return optima.getRelative();
 final double getRelativeAccuracy() {
 return getRelativeAccuracy()? :optimizer.getRelativeAccuracy();
 return optima.getRelativeScore();
 return relAccuracy;
 return 0 - optimizer.getRelativeAccuracy();
 return relativeAccuracy? : optimizer.getRelativeAccuracy();
 this.getRelativeAccuracy(); this.optimizer.getRelativeAccuracy();
 return getRelativeAccuracy(accuracy)*optimizer.getRelativeAccuracy();
 return getRelative(0);
 return ( double ) optimaValues [ 0 ] - accuracy ;
return optimizer.getRelativeAccuracy(accuracy) * Math.PI;
 return maxEvaluations; }
 return (double|float)optimizer.getRelativeAccuracy();
return optimizer.getRelativeAccuracy(accuracy); this.totalIterations;
 return getRelativeAccuracy(accuracy);optimizer.getRelativeAccuracy();
return optimizer.getReluracy();
 getRelativeAccuracy(double accuracy) { return 0.5; }
 return ( double ) optimaValues[0].length;
 return relativeAccuracy || optimizer.getRelativeAccuracy();
 return optima[0].accuracy;
 return ( double ) optimaValues [ 0 ] + accuracy;
 return getRelativeAccuracy() ; public double getRelativeAccuracy() {
 return getRelativeAccuracy() ; public double getAbsoluteAccuracy() {
 return (0);
 getRelativeAccuracy(double accuracy) { return relativeAccuracy(); }
 return optima.relativeAccuracy;
 return 0.optimizer.getRelativeAccuracy();
 return (1);
return optimizer.getRelativeAccuracy(); return optimaValues[0];
return optimizer.getAbsuracy();
return optimizer.getRelativeAccuracy(accuracy) - (accuracy);
return optimizer.getRelation();
 return optimizerResult.getRelativeAccuracy();
 return optima[1];
return optimizer.getRelativeAccuracy() { return this.getRelativeAccuracy();
 final double getRelativeAccuracy(); {
 return totalAccuracy - optimizer.getRelativeAccuracy();
 return relativeAccumulator();
return optimizer.getRelativeAccuracy(); this. relativeAccuracy = accuracy ;
return optimizer.getAbsoluteAccuracy();
 return relaAccuracy;
 return (double optimizer).getRelativeAccuracy();
 return getRelativeAccuracy() + -optimizer.getRelativeAccuracy();
 return relative(accuracy);
 return accuracy() ;
return optimizer.getRelativeAccuracy() { return optimizer.getAbsoluteAcc();
return optimizer.getRelativeAccuracy(); this. relativeAccuracy = 0 ;
return optimizer.getRelativeAccuracy(accuracy) + -1;
return optimizer.getRelativeAccuracy(accuracy); this. getResult ( ) ;
 return optimaRelativeAccuracyValue;
 return getRelative(true);
 return accuracy() {
 return optima.getRelative(); }
return optimizer.getRelativeAccuracy(this.maxIterations);
return optimizer.getRelativeAccuracy(accuracy); this.totalEvaluations();
 return optima[0].getAccuracy;
return optimizer.getRelativeAccuracy(); this.totalIterations++;
 return accuracy + optimizer.getRelativeAccuracy();
 return (double) optima.size ( );
 return getResult() { return optimaRelative;
return optimizer.getRelativeAccuracy(); return optima[0];
 optimizer.getRelative();
 return optimizer.relativeResult();
 return { double ) optimizer.getRelativeAccuracy();
return optimizer.getRelativeAccuracy() { return optimizer.getAbsoluteScore();
return optimizer.getRelativeAccuracy() { return optimaValues[0]; }
 return optimaRelativeScore;
return optimizer.getRelativeAccuracy(accuracy) + accuracy;
 return optimaRelativeAcc ;
 return getRelativeAccuracy(); return accuracy;
 return relativeAccuracyValue();
 optimizer.getReluracy();
return optimizer.getRelativeAccuracy(this.accuracy);
 return (double) relativeAccuracy;
 return (double) (acc);
 return relativeAccuracyDistance;
 return accuracy; }
return optimizer.getRelativeAccuracy(accuracy) * -1;
return optimizer.getRelativeAccuracy() { return optima[0]; }
 return totalRelative &&! optimizer.getRelativeAccuracy();
return optimizer.getRelativeAccuracy(maxEvaluations); }
return optimizer.getRelativeAccuracy(accuracy) - accuracy;
return optimizer.getRelativeAccuracy() || 0;
 return optimaRelativeAccuracy0;
 return relativeAccuracy; }
 return getRelativeAccuracy((double) (int) totalEvaluations); }
 return getRelativeAccuracy() + -1;
 return getRelativeAccuracy(int) - getAbsoluteAccuracy(int);
 return getRelativeAccuracy() ; public double getRelativeAccuracy() { }
 return relativeScore;
 return relativeScore();
 return getRelative(1);
return optimizer.getRelativeAccuracy() { return maxEvaluations; }
 return (accuracy);
 return 1.0 optimizer.getRelativeAccuracy();
 return getRelativeAccuracy() ; public double getAbsoluteAccuracy() { }
 return -1.0*optimizer.getRelativeAccuracy();
return optimizer.getRelativeAccuracy(); this.totalIterations;
 return getRelativeAccuracy() ; public double getRelativeAccuracy() {} {
 return getRelativeScore();
return optimizer.getRelativeAccuracy(accuracy); this.totalEvalsuations;
return optimizer.getRelativeAccuracy(accuracy) - -1;
 return -1-optimizer.getRelativeAccuracy();
 return getRel(0);
return optimizer.getRelativeAccuracy(accuracy) + (accuracy);
 return relativeAccuracy0;
return optimizer.getRelativeAccuracy(); this. rel = - 1 ;
return optimizer.getRelativeAccuracy;
return optimizer.getRelativeAccuracy() + Math.NaN;
return optimizer.getRelativeAccuracy(accuracy) * Math.MAX;
return optimizer.getRelativeAccuracy() { return optima[0] ;
return optimizer.getRelativeAccuracy(accuracy); } return 0 ;
return optimizer.getRelativeAccuracy(); this. rel = rel ;
 return getResult();
return optimizer.getRelativeAccuracy() { return relativeAccuracy; }
return optimizer.getRelativeAccuracy() { return optimaValues[0] ;
 return approxAccuracy;
 return getRelativeAccuracy((double) (int) (totalEvaluations));
 return getRelativeAccuracy(int) - getAbsoluteAccuracy(int)
return optimizer.getRelativeAccuracy() + -1;
return optimizer.getRelativeAccuracy() * Math.PI;
 return Math.abs(optimizer.getRelativeAccuracy();
return optimizer.distance;
 return accuracy(); }
return optimizer.getRelativeAccuracy() - (1 - accuracy);
return optimizer.getRelativeAccuracy(accuracy) + 1;
 return (double) optima[1];
 return getRelativeAccuracy() ; }
return optimizer.getRelativeAccuracy() + Math.random(1000);
 return getRelativeAccuracy((double) (int) totalEvaluations; }
return optimizer.getRelativeAccuracy(); return 0.0;
return optimizer.relativeAccuracy
 return (true);
 return -1d;
return optimizer.getRelativeAccuracy(accuracy) - 1.0;
return optimizer.getRelativeAccuracy(totalIterations);
return optimizer.getRelativeAccuracy() - 1.0;
return optimizer.getRelativeAccuracy() { return relativeAccuracy;
 return relative(result);
 return getRelativeAccuracy() ; public double getRelativeAccuracy(); {
 return getResult(1);
return optimizer.getRelativeAccuracy() + Math.random ( ) ;
 return optimizer..getRelativeAccuracy();
return optimizer.getRelativeAccuracy(0, -1);
return optimizerResult;
 return relativeError();
return optimizer.getRelativeAccuracy() { return relativeAccuracy(); }
return optimizer.getRelativeAccuracy() { return optimaValues[0] };
 return relativeAverage();
return optimizer.getRelativeAccuracy() + Math.nanosqrt();
 return proportionalAccuracy;
return optimizer.distance();
 return 1d;
return optimizer.getRelativeAccuracy() + (1 - accuracy);
 return relativeError;
return optimizer.getRelativeAccuracy() || -1;
 return relativeAcc;
return optimizer.getRelativeAccuracy(); return optimaValues[1];
 return relativeAverage;
 return + optimizer.getRelativeAccuracy();
return optimizer.isRelativeAccuracy();
return optimizer.result;
 return relative(acc);
return optimizer.getRelativeAccuracy() * accuracy;
return optimizer.getRelativeAccuracy() || 0.0
return optimizer.getRelativeAccuracy() * Math.MAX;
return optimizer.getRelativeAccuracy(); this. accuracy = accuracy
return optimizer.getRelativeAccuracy() * -1;
 return RelativeAccuracy();
 return (result);
return optimizer.getRelativeAccuracy() || 0. ;
 return negativeAccuracy;
return optimizer.getRelativeAccuracy(); return 0.5;
return optimizer.getRelativeAccuracy() + ( double ) accuracy;
return optimizer.getRelativeAccuracy(baseAccuracy);
 super.getRelativeAccuracy();
return optimizerDistance;
return optimizer.getRelativeAccuracy() + 1;
return optimizer.getRelativeAccuracy() + (accuracy);
return optimizer.relative;
 return.getRelativeAccuracy();
return optimizer.relativeScore();
 return (double);
return optimizer.getDistance();
 return 0;
return optimizer.error;
 return 1+optimizer.getRelativeAccuracy();
 return 1;
 get RelativeAccuracy();
 get relativeAccuracy();
return optimizer.getRelativeAccuracy());
 return _getRelativeAccuracy();
return optimizer.getRelativeAccuracy() + Math.NaN();
return optimizerRel ;
 return RelativeAccuracy;
 return relAccuracy;
return optimizerAverage ;
 getRelativeResult();
 get relativeAccuracy;
return optimizer.getRelativeAccuracy() || 0
 return this.getRelativeAccuracy();
 return -getRelativeAccuracy();
return optimizer.getRelativeAccuracy() - accuracy
return optimizer.getRelativeAccuracy(acuracy);
return  0;
return optimizer.getRelativeAccuracy() return ;
 return 0);
return optimizer.getRelativeAccuracy(Accuracy);
 do {
 return scorer.getRelativeAccuracy();
 return distance();
return optimizer.getRelativeAccuracy(accuracy;
 return 1);
 return optimization.getRelativeAccuracy();
return optimizer.getRelativeAccuracy() - 1
return  1;
return optimizer.getRelativeAccuracy(accuracy());
 return result();
return  distance;
 return minimizer.getRelativeAccuracy();
 this.optimizer.getRelativeAccuracy();
 return distance);
 return *optimizer.getRelativeAccuracy();
 return average();
 return optimizers.getRelativeAccuracy();
 return optimalizer.getRelativeAccuracy();
 do nothing
 return Accuracy();
 return -
 return result;
 do not
 this will
 optimizeFunction.getRelativeAccuracy();
 optimizeResult.getRelativeAccuracy();
 optimizationizer.getRelativeAccuracy();
 return
 {
