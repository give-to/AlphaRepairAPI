while ((i >= 0) && ((goalType == GoalType.MAXIMIZE) ^ (currY < mIY))) {
 if ((goalType== GoalType.MAXIMIZE) ^ (currY < mIY))) {
while ((i >= 0) && ((goalType == GoalType.MAXIMIZE) ^ (i))) {
while ((i >= 0) && ((mIX) ^ (currY < mIY))) {
 if ((MAXIMIZE) ^ (currY < mIY))) {
 if ((goalType == Goal.MAXIMIZE) ^ (currY < mIY))) {
 if ((goalType.MAXIMIZE) ^ (currY < mIY))) {
while ((i >= 0) && ((goalType == GoalType)) {
 if ((goalType == (GoalType.MAXIMIZE) ^ (currY < mIY))) {
 if ((GoalType.MAXIMIZE) ^ (currY < mIY))) {
while ((i >= 0) && ((goalType == GoalType.MAXIMIZE) )) {
while ((i--!= 0) && ((goalType == GoalType.MAXIMIZE) ^ (currY < mIY))) {
while ((i >= 0)) {
while ((i >= 0) && ((i--))
 if (((goalType == GoalType.MAXIMIZE) ^ (currY < mIY))) {
 if ((goalType == MAXIMIZE) ^ (currY < mIY))) {
while ((i >= 0) && ((goalType ==  GoalType.MAXIMIZE)) {
while ((i >= 0) && ((i--!= 0) ^ (currY < mIY))) {
 if ((goalType == (MAXIMIZE) ^ (currY < mIY))) {
while ((i >= 0) && (i--))
 if ((goalType == GoalType(Double.MAXIMIZE) ^ (currY < mIY))) {
 ((i>= 0) && ((goalType == GoalType.MAXIMIZE) ^ (currY < mIY))) {
while  (i--!= 0) {
 if ((mIX< mIY))) {
 if ((Double.MAXIMIZE) ^ (currY < mIY))) {
while ((i >= 0) && ((goalType == GoalType.MAXIMIZE) ^ (currY <  prevY))) {
while ((i >= 0) && ((goalType == GoalType.MAXIMIZE) ^  i)) {
while ((i >= 0) && ((goalType == GoalType.MAXIMIZE) ^ (mIX))) {
 if ((goalType == MINIMIZE) ^ (currY < mIY))) {
while ((i >= 0) && ((i) ^ (currY < mIY))) {
while ((i >= 0) && ((goalType )) {
 if ((i== GoalType.MAXIMIZE) ^ (currY < mIY))) {
while ((i >= 0) && (i--)) {
while ((i >= 0) && (i--!= 0)) {
 if ((goalType == GoalType.MIN) ^ (currY < mIY))) {
while ((i >= 0) && ((goalType == GoalType.MAXIMIZE) ^ (currX < mIX + 1))) {
 if ((mIX) ^ (currY < mIY))) {
while ((i--!= 0)) {
 if ((i>= 0) && ((goalType == GoalType.MAXIMIZE) ^ (currY < mIY))) {
 if ((< mIY))) {
while ((i >= 0) && ((goalType == GoalType.MAXIMIZE) ^ (currY <  prevY)))
 if ((goalType == GoalType.MIN_MAXIMIZE) ^ (currY < mIY))) {
 if (i++!= 0) {
while ((i >= 0) && ((goalType == GoalType.MAXIMIZE) ^ (i--)) {
while ((i >= 0) && ((goalType == GoalType.MAXIMIZE) ^ (i < j))) {
 if (((MAXIMIZE) ^ (currY < mIY))) {
while ((i >= 0) && ((goalType == GoalType.MAXIMIZE) ^ (currX < mIY))) {
 if ((goalType == GoalType.MAX) ^ (currY < mIY))) {
 if (((GoalType.MAXIMIZE) ^ (currY < mIY))) {
 if ((^ (currY < mIY))) {
 if (i--!= 0){
 } else{
while  (i--)
 if (i--!= 0) { mIX = optima[i]; } else { mIX = Double.NaN; mIY =
 if (i--!= 0) { mIX = optima[i]; mIY = Double.NaN; } else {
 if (i--!= 0) && ((goalType == GoalType.MAXIMIZE) ^ (currY < mIY))) {
 if ((IX< mIY))) {
 if (i--!= 0) { mIX = optima[i]; mIY = Double.NaN; } } else {
 if (((currY < mIY))) {
 if ((i--!= 0) && ((goalType == GoalType.MAXIMIZE) ^ (currY < mIY))) {
 if (i--!= 0) { if ((goalType == GoalType.MAXIMIZE) ^ (currY < mIY))) {
 if ((i-->= 0) && ((goalType == GoalType.MAXIMIZE) ^ (currY < mIY))) {
 if (i--!= 0) { if (((goalType == GoalType.MAXIMIZE) ^ (currY < mIY))) {
 if (i--!= 0) { mIX = optima[i]; } else { mIX = Double.NaN; } }
 if (i--!= 0) { mIX = optima[i]; } else { mIX = Double.NaN; } } else {
 if (i--&& ((goalType == GoalType.MAXIMIZE) ^ (currY < mIY))) {
 if (i--!= 0 && ((goalType == GoalType.MAXIMIZE) ^ (currY < mIY))) {
while (i--!= 0) { mIY =
while ((i--!= -1) && ((goalType == GoalType.MAXIMIZE) ^ (currY < mIY))) {
while ((i--) && ((goalType == GoalType.MAXIMIZE) ^ (currY < mIY))) {
 if (i--!= 0) { mIX = mIX; } else { mIX = Double.NaN; }
 GoalType.MAXIMIZE) ^ (currY < mIY))) {
while ((i >= 0) && ((goalType  == GoalType.MINIMIZE)) {
 if ((goalType == Double.MAXIMIZE) ^ (currY < mIY))) {
while ((i >= 0) && ((i < j) ^ (currY < mIY))) {
 if (i--!= -1){
 while ((mIX< mIY))) {
 if (i--!= 0) { mIX = optima[i]; } else { mIX = Double.NaN; mIY; }
 if ((goalType == GoalType(goalType.MAXIMIZE) ^ (currY < mIY))) {
 if (i--!= 0) { mIX = optima[i]; } else { mIX = Double.NaN; }
 if ((mIX ^ (currY < mIY))) {
 while (i >= 0) && ((goalType == GoalType.MAXIMIZE) ^ mIX)))
while ((i >= 0) && ((i --)) {
while ((i!= 0) && ((goalType == GoalType.MAXIMIZE) ^ (currY < mIY))) {
 if ((mIX < (mIY))) {
while ((i >= 0) && ((goalType == GoalType.MAXIMIZE) ^ (currX > mIY))) {
while ((i >= 0) && ((i--!= 0)) {
 if ((currY < mIY))) {
 if ((== GoalType.MAXIMIZE) ^ (currY < mIY))) {
 if ((goalType == GoalType(GoalType.MAXIMIZE) ^ (currY < mIY))) {
 if (i--!= 0) { mIX = optima[i]; mIY = Double.NaN; } else { mIY =
 if (i--!= 0) { mIX = mIX; if (i--!= 0) { mIY =
while ((i >= 0) && ((goalType == GoalType.MAXIMIZE) ^ mIX)) {
 if (i--!= 0) { mIX = optima[i]; } else { mIX = Double.NaN; } else {
 if (i--!= 0) { mIX = optima[i]; } else { mIX = Double.NaN; } } }
 if (i--!= 0)) {
 while ((i-->= 0) && ((goalType == GoalType.MAXIMIZE) ^ (currY < mIY))) {
 if (i--)) {
 if (i--!= 0) { mIX = optima[i]; mIY = Double.NaN; } else { } else {
 if (i++!= 0)) {
 while ((goalType == GoalType.MAXIMIZE) ^ (currY < mIY))) {
 if (i--!= 0) { mIX = mIX ; } else { mIX = Double.NaN; } }
 if ((goalType == GoalType) ^(i >= 0) && ((goalType == GoalType.MAXIMIZE) ^ (currY < mIY))) {
while ((i >= 0) && ((goalType  == MINIMIZE)) {
 if (() ^ (currY < mIY))) {
 if (i--!= 0) { mIX = mIX; } else { mIX = mIY;
 if (i--!= 0) { mIX = mIX ; } else { mIX = mIY ; }
 if (i--!= 0) { mIX = optima[i]; mIY = Double.NaN; } }
while ((i >= 0) && ((i < j)) {
while ((i >= 0) && ((goalType == GoalType.MAXIMIZE) ^ (i)) {
while ((i >= 0) && ((goalType  == MAXIMIZE)) {
 if (i--!= 0) { mIX = optima[i]; } else { mIX = Double.NaN; mIY = 0;
while ((i >= 0) && ((i-- == -1) ^ (currY < mIY))) {
while  (i--!= 0) { mIX =
 if (i > 0) {
 if (i--!= 0) { mIX = optima[i]; mIY = Double.NaN; } else { } }
 if ((==0) && ((goalType == GoalType.MAXIMIZE) ^ (currY < mIY))) {
while ((i >= 0) && ((goalType == GoalType.MAXIMIZE) ^ )) {
 while ((goalType == (GoalType.MAXIMIZE) ^ (currY < mIY))) {
while ((i >= 0) && ((goalType == GoalType.MAXIMIZE) ^ (currY )) {
 if (i--!= 0) { mIX = optima[i]; } else { mIX = Double.NaN; mIY;
 if (i--!= 0) { mIX = optima[i]; } else { mIX = Double.NaN; } {
 if ((goalType=.MAXIMIZE) ^ (currY < mIY))) {
 if ((goalType == GoalType.ADD) ^ (currY < mIY))) {
while ((i >= 0) && ((goalType == GoalType.MAXIMIZE) ^ (currX > mIX + 1))) {
while ((i >= 0) && (i--!= 0)) { mIY =
 if (i--!= 0) { mIX = mIX ; } else { mIX = mIY ; } } else {
 if (i--!= 0) { } if((goalType == GoalType.MAXIMIZE) ^ (currY < mIY))) {
while ((i >= 0) && ((goalType == GoalType.MAXIMIZE) ^ (currY > mIY))) {
while ((i >= 0) &&  mIX) {
while ((i >= 0) && ((goalType == GoalType.MAXIMIZE) ^ (currX < mIX))) {
while ((i >= 0) && ((goalType == GoalType.MAXIMIZE) ^ (currY < mIX + 1))) {
 if (i--!= 0) { mIX = optima[i]; } else { mIX = Double.NaN; mIY = ; }
 if (i--!= 0) { mIX = optima[i]; } else { mIX = Double.NaN; mIX = 0; }
 if (i--!= 0) { mIX = optima[i]; mIY = Double.NaN; } else { }
 if (&& ((goalType == GoalType.MAXIMIZE) ^ (currY < mIY))) {
while ((i >= 0) && ((goalType == GoalType.MAXIMIZE) ^ (currX < mIX + prevY))) {
while ((i >= 0) &&  mIX < mIY)) {
while ((i >= 0) && ((goalType  == GoalType.MAX)) {
 while (i >= 0) && ((goalType == GoalType.MAXIMIZE) ^ mIX))
 if (i--!= 0) { mIX = optima[i]; } else { mIX = Double.NaN; } if (i--)
 if ((goalType == GoalType.END) ^ (currY < mIY))) {
 if ((goalType == GoalType.MAX) && ((goalType == GoalType.MAXIMIZE) ^ (currY < mIY))) {
while ((i--!= 0) { mIY =
 if (i--!= 0) && (((goalType == GoalType.MAXIMIZE) ^ (currY < mIY))) {
while ((i >= 0) && ((i--!= 0))) {
 if (i--!= 0) { mIX = optima[i]; } else { mIX = Double.NaN; mIY }
while ((i >= 0) && ((i--!= -1) ^ (currY < mIY))) {
 if (i--!= 0) { mIX = optima[i]; mIY = Double.NaN; } else { mIY;
 if (i--!= 0) { mIX = optima[i]; } else { mIX = Double.NaN; mIY } }
 if (i--!= 0) { mIX = mIY; } else { mIX = mIY;
 if (i--!= 0) { if((i >= 0) && ((goalType == GoalType.MAXIMIZE) ^ (currY < mIY))) {
 if (i--!= 0) { mIX = optima[i]; } else { mIX = Double.NaN; } } {
while ((i >= 0) { if (i--!= 0) {
 if ((i--==0) && ((goalType == GoalType.MAXIMIZE) ^ (currY < mIY))) {
 if (i--!= 0) { mIX = optima[i]; mIY = Double.NaN; } {
 if ((type ==GoalType.MAXIMIZE) ^ (currY < mIY))) {
 if (i--==0) && ((goalType == GoalType.MAXIMIZE) ^ (currY < mIY))) {
 if ((goalType == GoalType.MINimize) ^ (currY < mIY))) {
 if (i--!= 0 && ((mIX< mIY))) {
 if ((i--!= -1) && ((goalType == GoalType.MAXIMIZE) ^ (currY < mIY))) {
 int i = j;
while ((i >= 0) && ((goalType  == GoalType.MAXIMIZE))
 if (i--!= 0) { mIX = mIX; if (i--!= 0) { mIY }
while  (i > j)
 if (i--!= 0) { } else{
 if ((Type.MAXIMIZE) ^ (currY < mIY))) {
while  (i > j) {
 if (i--!= 0) if (((goalType == GoalType.MAXIMIZE) ^ (currY < mIY))) {
while ((i >= 0) && ((goalType == GoalType.MAXIMIZE) ^ (currY < mIY)))  { if (i--!= 0) {
 optimaValues[i + 1] = mIY; if (i--!= 0) { mIX = mIY; }
 while ((goalType == Goal.MAXIMIZE) ^ (currY < mIY))) {
 if (i--!= 1) {
 if ((i--) && ((goalType == GoalType.MAXIMIZE) ^ (currY < mIY))) {
 if ((goalType == GoalType.NONMAXIMIZE) ^ (currY < mIY))) {
 if (i--!= 0) || ((goalType == GoalType.MAXIMIZE) ^ (currY < mIY))) {
 if (i--!= 0) { mIX = mIY; } else { mIX = mIX ;
 if (i--!= 0) { mIX = mIX ; } else { mIX = Double.NaN; } } }
while ((i >= 0) { if (i--)
while ((i >= 0) &&  i--)
 optimaValues[i + 1] = mIY ; optimaValues[i + 1] = mIX ; } }
while ((i >= 0) && ((goalType  == GoalType.MINIMIZE))) {
while ((i--!= 0)) { mIY =
 if (i--!= 0) { mIX = mIX; } else { mIX = Double.NaN; } {
 if (i--) {
 if ((goalType == GoalType.INSERT) ^ (currY < mIY))) {
 if (i > j){
 if (i-- == -1){
while ((i >= 0) && (i < j)) {
while ((i!= j) && ((goalType == GoalType.MAXIMIZE) ^ (currY < mIY))) {
 if (i--!= 0 && ((currY < mIY))) {
 if (i--!= 0 && (((goalType == GoalType.MAXIMIZE) ^ (currY < mIY))) {
while ((i--)
 if (i++!= -1){
 if ((goalType == GoalType.i >= 0) && ((goalType == GoalType.MAXIMIZE) ^ (currY < mIY))) {
 if ((mIY>= 0) && ((goalType == GoalType.MAXIMIZE) ^ (currY < mIY))) {
 while (i--!= 0) && ((goalType == GoalType.MAXIMIZE) ^ (currY < mIY))) {
 while (i >= 0) && ((goalType == GoalType.MINIMIZE) ^ mIX)))
 while ((goalType == MAXIMIZE) ^ (currY < mIY))) {
 if (i--!= 0) && ((currY < mIY))) {
while ((i >= 0) && ((i--!= 0) && ((i--!= 0) ^ (currY < mIY))) {
while ((i >= 0) && ((goalType == GoalType.MAXIMIZE) ^ mIX))) {
 if (i--))) {
 while (i >= 0) && ((goalType == GoalType.MAXIMIZE) < mIX)))
while ((i >= 0) && ((goalType == GoalType.MAXIMIZE) ^ (currY  < prevY)) {
while  (i--!= 0)
 int i-- = j - 1;
 if (i-- == 0) { if (((goalType == GoalType.MAXIMIZE) ^ (currY < mIY))) {
while ((i >=  0))
while ((i >= 0) && ((goalType == GoalType.MAXIMIZE) ^ (currX < mIX) < mIY))) {
 if (i--!= 0) { if (((currY < mIY))) {
 if (i-- == 0) { } else{
 if (i-- == 0) { if ((goalType == GoalType.MAXIMIZE) ^ (currY < mIY))) {
while ((i >= 0) && (i--!= 0))) {
while ((i >= 0) && ((goalType == GoalType.MAXIMIZE)  ^ (i--))) {
while  (i--!= -1) {
while ((i >= 0) && ((goalType == GoalType.MAXIMIZE)  ^ (i--!= 0)) {
 while (i--!= 0 && ((goalType== GoalType.MAXIMIZE) ^ (currY < mIY))) {
 int i-- = -1;
 if ((goalType!= null && GoalType.MAXIMIZE) ^ (currY < mIY))) {
 if (i++ && i--!= 0) {
while ((i >= 0) &&  i < lastNaN; ++i) {
 while (i--!= 0) { if ((goalType == GoalType.MAXIMIZE) ^ (currY < mIY))) {
while ((i >= 0) && ((goalType == GoalType.MAXIMIZE) ^ (i< mIX))) {
while ((i >= 0) && ((goalType == GoalType.MAXIMIZE) ^ (currY < mIX + prevY))) {
 if (i--!= 0 || ((goalType== GoalType.MAXIMIZE) ^ (currY < mIY))) {
 if (i--!= 0) { mIX = optima[i]; mIY = mIX; } else { } } }
 if ((mIX > (mIY))) {
 if ((goalType == GoalType.MAX)(i >= 0) && ((goalType == GoalType.MAXIMIZE) ^ (currY < mIY))) {
 if (i--!= 0))) {
while ((i >= 0) && ((goalType == GoalType.MAXIMIZE) ^ (currY > prevY))) {
 if (i-- == 0) { if((i >= 0) && ((goalType == GoalType.MAXIMIZE) ^ (currY < mIY))) {
 optimaValues[i + 1] = mIY ; optimaValues[i + 1] = mIX ; } } }
 if ((goalType == GoalType.MAX(i >= 0) && ((goalType == GoalType.MAXIMIZE) ^ (currY < mIY))) {
while ((i >= 0) && ((goalType == GoalType.MAXIMIZE) ^ i--)) {
 while (i--!= 0) { if (((goalType == GoalType.MAXIMIZE) ^ (currY < mIY))) {
 if ((mIX. equals(mIY))) {
 int i-- = 0;
 if (i--!= 0) { while((i >= 0) && ((goalType == GoalType.MAXIMIZE) ^ (currY < mIY))) {
while ((i >= 0)  { if (i-- == -1) {
 if (i--!= 0) { optima[i] = mIX; } }
 if ((mIX < mIX)&& ((goalType == GoalType.MAXIMIZE) ^ (currY < mIY))) {
while ((i >= 0) && ((goalType == GoalType.MAXIMIZE) ^ (currY ))) {
while ((i --!= 0)) { double mIY =
while ((i >= 0) &&  i < j) {
 if ((goalType!= (GoalType.MAXIMIZE) ^ (currY < mIY))) {
while ((i >= 0) &&  i)
 optimaValues[i + 1] = mIY; if (i--!= 0) { mIX = mIX;
while ((i >= 0) && ((goalType == GoalType.MAXIMIZE)  ^ (i--!= 0))) {
while ((i >= 0) && ((i--!= 0)) { mIY =
while ((i >= 0) &&  i<lastNaN) {
while ((i >= 0) && ((goalType == GoalType.MAXIMIZE) ^ (currY < mIY)))  { if (i--!= 0) { }
while ((i >= 0) && ((goalType == GoalType.MAXIMIZE) ^ i))) {
 int i-- = i - 1;
 if (i--!= 0 && (mIX< mIY))) {
while ((i >= 0) && ((goalType == GoalType.MAXIMIZE) ^ (currY > mIX + 1))) {
while  (i > 0)
while ((i >= 0) && ((goalType == GoalType.MINIMIZE) ^ mIX)) {
while ((i >=  j) { if (i--)
while ((i >= 0) && ((i< j) && ((i--!= 0) ^ (currY < mIY))) {
while ((i >= 0) && ((goalType == GoalType.MAXIMIZE) ^ (currX < mIX + prevX))) {
 optimaValues[i + 1] = mIY ; optimaValues[i + 1] = mIX ; break ; }
 if (i > 0)) {
 if ((goalType == GoalType.MAX)|(i >= 0) && ((goalType == GoalType.MAXIMIZE) ^ (currY < mIY))) {
while ((i >= 0) && ((i--!= 0) && (i--!= -1) ^ (currY < mIY))) {
while ((i >= 0) && ((goalType == GoalType.MAXIMIZE) ^ (currX < mIX) < prevX))) {
 optimaValues[i + 1] = mIY ; optimaValues[i + 1] = mIX ; } } } }
 if (i--!= 1)) {
 optimaValues[i + 1] = mIY ; optimaValues[i + 2] = mIX ; } }
while ((i >= 0) && ((goalType == GoalType.MAXIMIZE) ^ (currX > mIX))) {
while ((i >= 0) &&  i--!= 0) {
while  (i-- > 0) {
while  (i--!= 0) { mX =
while  (true)
while ((goalType == GoalType.MAX) && ((goalType == GoalType.MAXIMIZE) ^ (currY < mIY))) {
while  (i++!= 0) {
while ((i >= 0) && ((i--!= 0) && (i--!= 0) ^ (currY < mIY))) {
while ((i >= 0) && ((goalType == GoalType.MAXIMIZE) ^ (currX < mIX) && --i))) {
while ((i >= 0) && ((goalType == GoalType.MAXIMIZE)  ^ (mIX < prevY))) {
 if (i--!= 0&&(goalType == GoalType.MAXIMIZE) ^ (currY < mIY))) {
 while ((currY < mIY))) {
 if ((goalType==.MAXIMIZE) ^ (currY < mIY))) {
while ((i >= 0) && ((goalType  == GoalType.END)) {
 if (i!= j) {
while ((i >= 0) { mIX = mIY; }
 if ((goalType == GoalType.DOWN) ^ (currY < mIY))) {
 if ((i--!= 0 && (mIX< mIY))) {
 if ((i==0) && ((goalType == GoalType.MAXIMIZE) ^ (currY < mIY))) {
 optimaValues[i + 1] = mIY ; optimaValues[i + 1] = mIX ; continue ; }
 if (i++!= 0) { if (((goalType == GoalType.MAXIMIZE) ^ (currY < mIY))) {
 if ((i--!= 0) ^ (currY < mIY))) {
 if (i--!= 0) { } if((i >= 0) && ((goalType == GoalType.MAXIMIZE) ^ (currY < mIY))) {
while ((i >= 0) && ((goalType == GoalType.MINIMIZE) ^ i)) {
while ((i >= 0) { if (i++!= 0) {
 if ((goalType == GoalType.SCALE) ^ (currY < mIY))) {
while ((i --!= 0) { double mIY =
 if (i--!= 0 &&!(currY < mIY))) {
while ((i >= 0) && ((goalType == GoalType.MAXIMIZE) ^ (currX < mIX) && i--))) {
 if (i++ && (i--!= 0)) {
 if (i--!= 0) { mIX = mIY; mIY = mIX; }
while ((i >= 0) && (i--!= 0)) { mIX =
while ((i >= 0) && ((goalType == GoalType.MAXIMIZE) ^ (currX < mIX || i--!= 0))) {
 optimaValues[i + 1] = mIY ; optimaValues[i + 1] = 0;
while ((i >= 0) && ((goalType == GoalType.MAXIMIZE) ^ (currY  < prevY))) { if (i--)
 if ((goalType == MaxIMIZE)^ (currY < mIY))) {
 while (i >= 0) && ((goalType == GoalType.MAXIMIZE) ^ mIX)
 if (i--!= (0) && ((goalType == GoalType.MAXIMIZE) ^ (currY < mIY))) {
while ((i >= 0) { mIX = mIY;
 if (i!= 0) {
while ((i--!= 0)) { mIX =
 if ((goalType == Optimize) ^ (currY < mIY))) {
 int i-- = i;
while ((i >= 0) && ((goalType == GoalType.MAXIMIZE) ^ (currY < mIY)))  { if (i-- == -1) {
 if (i++!= 0 && i < j) {
while ((i >= 0) { if (i--!= 1) {
 if (i-- == 0 && ((goalType== GoalType.MAXIMIZE) ^ (currY < mIY))) {
 if (i--!= 0 && mIX< mIY))) {
while ((i >= 0) && ((i--!= 0) && (mIX) ^ (currY < mIY))) {
 if ((goalType == GoalType.MAX&& ((goalType == GoalType.MAXIMIZE) ^ (currY < mIY))) {
 optimaValues[i + 1] = mIY; if (i--!= 0) { i --; }
 optimaValues[i + 1] = mIY ; optimaValues[i + 1] = j;
while ((i >= 0) && ((goalType == GoalType.MAXIMIZE)  ^ (mIX < mIY))) {
 if ((goalType!= 0 && GoalType.MAXIMIZE) ^ (currY < mIY))) {
 while (i--!= 0 &&!(currY < mIY))) {
 if (mIX < mIY){
 if ((goalType == GoalType.END)&& ((goalType == GoalType.MAXIMIZE) ^ (currY < mIY))) {
 if (i-- == 0) { } if((goalType == GoalType.MAXIMIZE) ^ (currY < mIY))) {
 if (i--!= -1) && ((goalType == GoalType.MAXIMIZE) ^ (currY < mIY))) {
 optimaValues[i + 1] = mIY ; optimaValues[i + 2] = mIX ; } } }
while ((i >= 0) &&  mIX < mIY) {
 if (i-- == 0) || ((goalType == GoalType.MAXIMIZE) ^ (currY < mIY))) {
 if ((mIX) ^ ((currY < mIY))) {
 if ((i-- == -1) && ((goalType == GoalType.MAXIMIZE) ^ (currY < mIY))) {
 if (i-- == 0) { } if((i >= 0) && ((goalType == GoalType.MAXIMIZE) ^ (currY < mIY))) {
 while ((IX< mIY))) {
 if (i--!= 0 &&!(goalType == GoalType.MAXIMIZE) ^ (currY < mIY))) {
 double mIX = mIY ;
while ((i >= 0) && ((goalType == GoalType.MAXIMIZE) ^ (currX < mIX - prevY))) {
 if ((goalType == GoalType.SAME) ^ (currY < mIY))) {
 if ((i!= 0) && ((goalType == GoalType.MAXIMIZE) ^ (currY < mIY))) {
 if ((i--!= 0 && goalType== GoalType.MAXIMIZE) ^ (currY < mIY))) {
while ((i >= 0) { if (i-- == 0) {
while ((i >= 0) && ((goalType  == GoalType.MIN)) {
while ((i >= 0) && ((goalType == GoalType.MAXIMIZE) ^ (currX >= mIY))) {
while ((i >= 0) && ((goalType == GoalType.MAXIMIZE) ^ (currX < prevX))) {
 if ((i--!= 0 && ((goalType== GoalType.MAXIMIZE) ^ (currY < mIY))) {
 if ((goalType!= null && (goalType.MAXIMIZE) ^ (currY < mIY))) {
while ((i >= 0) && ((goalType == GoalType.MAXIMIZE) ^ (currX >= mIX + 1))) {
 if ((goalType == GoalType.Double.MAXIMIZE) ^ (currY < mIY))) {
 if (i--!= -1)) {
 if (i++!= 0) { } else{
while  (i --) {
 optimaValues[i + 1] = mIY; if (i--!= 0) { break; }
 double mIX = mIY ; double mIY = 0 ;
while ((i >= 0) && ((goalType == GoalType.MAXIMIZE) ^ (currX < mIX) || i == j))) {
 if ((goalType == GoalType.MIN(MAXIMIZE) ^ (currY < mIY))) {
 optimaValues[i + 1] = mIY ; optimaValues[i + 1] = mIX ; }
 if (i++!= 0 && ((mIX< mIY))) {
 if ((goalType == GoalType.MIN-MAXIMIZE) ^ (currY < mIY))) {
 if (i&& ((goalType == GoalType.MAXIMIZE) ^ (currY < mIY))) {
while ((i >= 0) && ((goalType == GoalType.MAXIMIZE) ^ (currY  < prevY))
while ((i >= 0) && ((goalType  == MAXIMIZE))
while ((i >=  0)
while ((i >= 0) && ((goalType == GoalType.MAXIMIZE) ^ (currX < mIX) && i!= j))) {
while ((i >= 0)  { if (i--!= 0) { }
 if ((mIX &^ (currY < mIY))) {
while ((i >= 0) && ((i-- == 0 || mIX) ^ (currY < mIY))) {
 if ((goalType == GoalType.MIN)&& ((goalType == GoalType.MAXIMIZE) ^ (currY < mIY))) {
while (i-- > 0) { mIY =
 if (i--!= 0) &&! ((currY < mIY))) {
 if (i--!= 0) { if (!(i >= 0) && ((goalType == GoalType.MAXIMIZE) ^ (currY < mIY))) {
 if ((i--!= 0))) {
 int i-- = j;
while ((i >= 0) && ((i))
 if ((i-- == 0 || i>= 0) && ((goalType == GoalType.MAXIMIZE) ^ (currY < mIY))) {
 if (i--!= 0) { mIX = mIY; }
while ((i >= 0) && ((goalType == GoalType.MAXIMIZE) ^ (currX < mIX - prevX))) {
while ((i >= 0) { if (i--!= 0)
while ((i >=  j)) {
 while (i--!= 0 && ((currY < mIY))) {
while ((i >= 0) && ((goalType == GoalType.MAXIMIZE) ^ (currX < mIX) && i < j))) {
 while (((currY < mIY))) {
while ((i >= 0) && ((goalType == GoalType.MAXIMIZE) ^ (i < prevY))) {
 if (i--!= 0) && (((currY < mIY))) {
 optimaValues[i + 1] = mIY ; optimaValues[i + 1] = mIX ; } else { }
while ((i >= 0) && ((i--!= 0) && ((i--!= -1) ^ (currY < mIY))) {
 optimaValues[i + 1] = mIY; i-- = j;
 if ((mIX < mIY || i>= 0) && ((goalType == GoalType.MAXIMIZE) ^ (currY < mIY))) {
 if ((i--!= 0) ^ ((currY < mIY))) {
 double mIX = optimaValues[i + 1];
 if (i--!= 0) if((goalType == GoalType.MAXIMIZE) ^ (currY < mIY))) {
 if ((goalType == GoalType((goalType.MAXIMIZE) ^ (currY < mIY))) {
 if ((i--!= 0 && mIX< mIY))) {
while ((i >= 0) && (i-- == 0)) { mIY =
 optimaValues[i + 1] = mIY ; optimaValues[i + 2] = mIX ; } } } }
 while ((mIX < (mIY))) {
 } else if((i >= 0) && ((goalType == GoalType.MAXIMIZE) ^ (currY < mIY))) {
while ((i >=  j) { mIX = mIY;
while ((i >= 0) && ((goalType  == GoalType.MAXIMIZE)))
 if ((mIX[i]>= 0) && ((goalType == GoalType.MAXIMIZE) ^ (currY < mIY))) {
 } else if (((goalType == GoalType.MAXIMIZE) ^ (currY < mIY))) {
 if ((mIX < mIX(mIY))) {
 if ((i--=0) && ((goalType == GoalType.MAXIMIZE) ^ (currY < mIY))) {
 while (i--!= 0) && (((goalType == GoalType.MAXIMIZE) ^ (currY < mIY))) {
 while ((goalType == MINIMIZE) ^ (currY < mIY))) {
while ((i >= 0) && ((goalType == GoalType.MAXIMIZE) ^ (currY <  prevY))) { if (i >= 0)
while ((i >= 0) && ((i--!= 0 || mIX) ^ (currY < mIY))) {
 if (i--!= 0) || ((i >= 0) && ((goalType == GoalType.MAXIMIZE) ^ (currY < mIY))) {
 optimaValues[i + 1] = mIY ; } int i-- = j -- ;
 if (i>= 0 && mIY>= 0) && ((goalType == GoalType.MAXIMIZE) ^ (currY < mIY))) {
 while (i--!= 0) { if (((currY < mIY))) {
 optimaValues[i + 1] = mIY ; optima[i + 1] = mIX ; } }
while ((i >=  j) { if (i--!= 0)
 if ((i>0) && ((goalType == GoalType.MAXIMIZE) ^ (currY < mIY))) {
 if ((i--!= 0 || i>= 0) && ((goalType == GoalType.MAXIMIZE) ^ (currY < mIY))) {
 if ((i--!= 0 && (GoalType.MAXIMIZE) ^ (currY < mIY))) {
while ((i >= 0) && (i-- > 0)) {
 if (i-- == 0){
 if ((goalType == GoalType.MAX ||i >= 0) && ((goalType == GoalType.MAXIMIZE) ^ (currY < mIY))) {
 if ((mIX < mIX))&& ((goalType == GoalType.MAXIMIZE) ^ (currY < mIY))) {
 if (i--!= 0 && ((==GoalType.MAXIMIZE) ^ (currY < mIY))) {
while ((i >= 0) && ((i--!= 0) && ((mIX) ^ (currY < mIY))) {
while ((i >= 0) && ((goalType == GoalType.MAXIMIZE)  ^ (i-- == 0)) {
 if ((mIX < mIX) ^(currY < mIY))) {
while ((i >= 0) && ((goalType  == GoalType.MINIMIZE))
while ((i++!= 0)) {
 optimaValues[i + 1] = mIY ; int i = j ;
while ((i >= 0) && ((i <= j) ^ (currY < mIY))) {
 optimaValues[i + 1] = mIY ; optimaValues[i + 1] = mIX ; } else
 if ((goalType == GoalType.MIN=0) && ((goalType == GoalType.MAXIMIZE) ^ (currY < mIY))) {
 if ((goalType == MINIMIZE^ (currY < mIY))) {
while ((i >= 0) && ((goalType  == GoalType.MAXIMIZE)))) {
 if (i<lastNaN)) {
 if ((mIX < mIY)>= 0) && ((goalType == GoalType.MAXIMIZE) ^ (currY < mIY))) {
 if ((mIX > mIX(mIY))) {
 while (i--!= 0)) {
 if (i--!= 0) { } while((i >= 0) && ((goalType == GoalType.MAXIMIZE) ^ (currY < mIY))) {
 if ((mIX < prevY ^(currY < mIY))) {
 if ((goalType == GoalType.ADD)&& ((goalType == GoalType.MAXIMIZE) ^ (currY < mIY))) {
while ((i >= 0) && (i< lastNaN)) {
 optimaValues[i + 1] = mIY ; int i-- = j - 1 ;
while  (i-- > 0) { mIX =
 if ((goalType == ALPHA) ^ (currY < mIY))) {
 if (i-- == -1&& ((goalType == GoalType.MAXIMIZE) ^ (currY < mIY))) {
 if ((mIX + 1< mIY))) {
 if (i-- == 0 || ((goalType == GoalType.MAXIMIZE) ^ (currY < mIY))) {
 optimaValues[i + 1] = mIY ; optimaValues[i + 1] = mIX ; } } } else
while ((i >= 0) && ((i--!= 0) || (i--!= 0) ^ (currY < mIY))) {
 if (i-- == 0) && (((goalType == GoalType.MAXIMIZE) ^ (currY < mIY))) {
while ((i >= 0) && ((goalType == GoalType.MAXIMIZE) ^ (currY < mIY))) { if (i++!= 0) {
 if ((goalType == MAXIMIZE^ (currY < mIY))) {
while ((i >= 0) && ((goalType == GoalType.MAXIMIZE) ^ (currY < mIY))) { if (i-- == 0) {
 if (i--!= 0) { if ((currY < mIY))) {
 if (i--!= 0 && goalType== GoalType.MAXIMIZE) ^ (currY < mIY))) {
while ((i >= 0) && ((i< j) && ((i< j) < mIX) ^ (currY < mIY))) {
while ((i >= 0) && ((goalType == GoalType.MINIMIZE) ^ (i--)) {
while ((i >= 0) &&  i<lastNaN)) {
 optimaValues[i + 1] = mIY ; int i-- = i - 1 ;
 if (i-- == 0 && i!= j) {
 if (i--!= 0) if((i >= 0) && ((goalType == GoalType.MAXIMIZE) ^ (currY < mIY))) {
 while ((i--==0) && ((goalType == GoalType.MAXIMIZE) ^ (currY < mIY))) {
 optimaValues[i + 1] = mIY ; i-- = 0;
while  (i > 0) {
 if ((goalType == MINimize) ^ (currY < mIY))) {
while ((i >= 0) && ((goalType  == MINIMIZE))
 if ((goalType == GoalType.BEST) && ((goalType == GoalType.MAXIMIZE) ^ (currY < mIY))) {
while ((i >= 0) && ((goalType == GoalType.MAXIMIZE) ^ (mIX < prevX))) {
 double mIY = mIY ;
while ((i--!= 0) { mIX =
while ((i >= 0) && ((i--!= 0) && ((i--!= 1) ^ (currY < mIY))) {
 if (i++!= 0 && i!= j) {
while ((i --!= 0) { if (i--)
while ((i >= 0)  { if (i--!= -1) {
 if (i++ && i < j) {
 if (i!= j)) {
 while (i--)) {
 if (i--!= 0) { mIX = mIY;
 if (i--!= 0 && (i >= 0) && ((goalType == GoalType.MAXIMIZE) ^ (currY < mIY))) {
 if (i-- == 0 && ((mIX< mIY))) {
while ((i >= 0) && ((goalType == GoalType.MAXIMIZE) ^ (currY < mIY)))  { if (i--!= -1) {
while ((i >= 0) && ((goalType == GoalType.MAXIMIZE) ^ (currY  < mIX))) {
 if ((goalType == GoalType.MIN(i >= 0) && ((goalType == GoalType.MAXIMIZE) ^ (currY < mIY))) {
 if (i > 0&& ((goalType == GoalType.MAXIMIZE) ^ (currY < mIY))) {
while ((i >= 0) && (i--!= 0))) { mIY =
 if ((goalType == Maximize) ^ (currY < mIY))) {
 while (i--!= 0) { if((i >= 0) && ((goalType == GoalType.MAXIMIZE) ^ (currY < mIY))) {
 if ((goalType!= Double.NaN) && ((goalType == GoalType.MAXIMIZE) ^ (currY < mIY))) {
 if (i--!= 0) { mIX = mIY; } else { mIX = 0;
while ((i >= 0) && ((goalType == GoalType.MAXIMIZE)  ^ (i-- == 0))) {
 if (mIX ^ ((currY < mIY))) {
 if ((goalType == GoalType.NONE) && ((goalType == GoalType.MAXIMIZE) ^ (currY < mIY))) {
 if ((goalType == GoalType.MINOR) ^ (currY < mIY))) {
while ((i >= 0) && ((goalType == GoalType.MAXIMIZE) ^ (currY < mIY)))) { if (i--!= 0) {
while ((i >= 0) && ((goalType == GoalType.MAXIMIZE) ^ (i <= j))) {
while  (i<j) {
 if (i!= 0)) {
while ((i >= 0) && ((goalType == GoalType.MAXIMIZE)  ^ (mIX < mIY)) {
 if (i-- == (0) && ((goalType == GoalType.MAXIMIZE) ^ (currY < mIY))) {
 if (i--!= 0)(&& ((goalType == GoalType.MAXIMIZE) ^ (currY < mIY))) {
 if ((mGoalType ==GoalType.MAXIMIZE) ^ (currY < mIY))) {
while ((i >= 0) && ((goalType == GoalType.MAXIMIZE) ^ j)) {
 if ((goalType == GoalType.MAX>= 0) && ((goalType == GoalType.MAXIMIZE) ^ (currY < mIY))) {
while ((i >= 0) && ((i< j) && ((i< j) ^ mIX) ^ (currY < mIY))) {
while ((i--))
while ((i > j) && ((goalType == GoalType.MAXIMIZE) ^ (currY < mIY))) {
 if ((goalType == GoalType.MIN ||i >= 0) && ((goalType == GoalType.MAXIMIZE) ^ (currY < mIY))) {
while ((i >= 0) && ((i-- == 0) ^ (currY < mIY))) {
 double mIY = mIX + prevY;
while ((i >= 0) && ((goalType == GoalType.MAXIMIZE) ^ (currY  < prevY))) { mIY =
 if ((goalType == GoalType.mpi >= 0) && ((goalType == GoalType.MAXIMIZE) ^ (currY < mIY))) {
 if ((goalType == GoalType.SCALE) && ((goalType == GoalType.MAXIMIZE) ^ (currY < mIY))) {
 double mIX = mIY ; double mIX = 0;
 if (i++!= 0) { if (((currY < mIY))) {
while ((i >= 0) && ((goalType == GoalType.MAXIMIZE) ^ (currY < )) {
 if ((i--!= 0) &&!(goalType == GoalType.MAXIMIZE) ^ (currY < mIY))) {
 if (i--!= 0) { mIX = mIY; mIY = prevY; }
 if (i--!= 0 && (type ==GoalType.MAXIMIZE) ^ (currY < mIY))) {
while ((i++!= 0) { mIY =
 if (i-- == 0)) {
 } else if ((goalType == GoalType.MAXIMIZE) ^ (currY < mIY))) {
 optimaValues[i + 1] = mIY; if (i--!= 0) { i -- ; } }
while ((i >= 0) &&  i<lastNaN)
 if (i++ == 0 && i!= j) {
 if (i--!= 0) { if (((i >= 0) && ((goalType == GoalType.MAXIMIZE) ^ (currY < mIY))) {
while ((i >= 0) && ((goalType == GoalType.MAXIMIZE) ^ (currY < mIY))) { if (i--!= 1) {
 if (i > 0) { optima[i] = mIX;
 if (i--!= 0((goalType == GoalType.MAXIMIZE) ^ (currY < mIY))) {
 if ((goalType == GoalType.CUTMAXIMIZE) ^ (currY < mIY))) {
 optimaValues[i + 1] = mIX ; i-- = j ;
 optimaValues[i + 1] = mIY; if (i--!= 0) { } } }
 double mIY = mIX + 1;
 if (i > j&& ((goalType == GoalType.MAXIMIZE) ^ (currY < mIY))) {
 if (i-- > -1){
while ((i >= 0) &&  i < lastNaN; ++i)
while ((i >= 0) && ((i--!= 0) && (i--!= 1) ^ (currY < mIY))) {
 if ((i-1)==0) && ((goalType == GoalType.MAXIMIZE) ^ (currY < mIY))) {
 if ((i++!= 0))) {
 if ((goalType == GoalType.START) && ((goalType == GoalType.MAXIMIZE) ^ (currY < mIY))) {
 if (i-- == 0 || i--==0) && ((goalType == GoalType.MAXIMIZE) ^ (currY < mIY))) {
 if (()) {
 if ((mIX < mIY>= 0) && ((goalType == GoalType.MAXIMIZE) ^ (currY < mIY))) {
 if (i< 0) { } else if((i >= 0) && ((goalType == GoalType.MAXIMIZE) ^ (currY < mIY))) {
 if ((mIX < mIX ^ (currY < mIY))) {
 if (i-- == -1)) {
while ((i >= 0) { if (i++!= 0)
 if (i > 0) { optima[i] = mIX; i-- = 0;
while ((i >= 0) && ((goalType == GoalType.MAXIMIZE) ^ (currY  < prevY)))) {
 if (i== j) { if((i >= 0) && ((goalType == GoalType.MAXIMIZE) ^ (currY < mIY))) {
 if (i--!= 0 && goalType (GoalType.MAXIMIZE) ^ (currY < mIY))) {
while ((i --!= 0)) { if (i--)
 if (i > j)) {
 if ((i!= 0) ^ (currY < mIY))) {
 if (i++ && i!= j) {
while ((i >= 0) && ((goalType == GoalType.MAXIMIZE) ^ (currX < mIX) < prevY))) {
 if ((mIX < mIY ^(currY < mIY))) {
 if (i--!= 0) { mIX = optima[i]; mIY;
 if ((goalType!=GoalType.MAXIMIZE) ^ (currY < mIY))) {
 if (i<= 0 && mIY>= 0) && ((goalType == GoalType.MAXIMIZE) ^ (currY < mIY))) {
 double mIY = mIX - prevY;
 if (i-- == 0) || ((i >= 0) && ((goalType == GoalType.MAXIMIZE) ^ (currY < mIY))) {
 if (i++!= 0))) {
while ((i >= 0) && ((i-- == maximize) ^ (currY < mIY))) {
while ((i >= 0) && ((goalType == GoalType.MAXIMIZE) ^ (currX < mIX); i -= 1))) {
 if ((goalType == GoalType.mini >= 0) && ((goalType == GoalType.MAXIMIZE) ^ (currY < mIY))) {
 if (i--!= 0) { while (((currY < mIY))) {
 if (i--!= 0) { mIX = mIY; } }
 while (i--!= 0 && mIX^ (currY < mIY))) {
 if (i==0) && ((goalType == GoalType.MAXIMIZE) ^ (currY < mIY))) {
 if (i++!= mIY) {
 double mIY = prevY;
 if (i-- == 0 && ((currY < mIY))) {
 if (i--!= 0) { } while((goalType == GoalType.MAXIMIZE) ^ (currY < mIY))) {
while ((i >= 0) && ((i--!= 0) && (i-- < mIX) ^ (currY < mIY))) {
while ((i > j)) {
 if (i--=0) && ((goalType == GoalType.MAXIMIZE) ^ (currY < mIY))) {
 if (i--!= 0 && (mIX)) {
while ((i-- > 0)) {
 if (((i >= 0) && ((goalType == GoalType.MAXIMIZE) ^ (currY < mIY))) {
 if (i--!= 0 && i > j) {
while ((i >= 0) && ((i < j))) {
while ((i >= 0) && ((goalType == GoalType.MAXIMIZE) ^ (currY < mIY))) { if (i >= 0) {
while ((i--!= 0) {
 if (i--!= 0) && (!(currY < mIY))) {
 if ((goalType!= Goal.MAXIMIZE) ^ (currY < mIY))) {
 while (i--!= 0) &&! ((currY < mIY))) {
while ((i >= 0) && ((goalType == GoalType.MAXIMIZE) ^ (currY < mIY)) { if (i--!= 0) {
 if (i--!= 0) { mIX = optima[i]; mIY++;
 if (i-- == 0 && (i >= 0) && ((goalType == GoalType.MAXIMIZE) ^ (currY < mIY))) {
 while (((goalType== GoalType.MAXIMIZE) ^ (currY < mIY))) {
 if ((i--!= 0) ^(goalType == GoalType.MAXIMIZE) ^ (currY < mIY))) {
 double mIX = mIX + 1;
while ((i-- == 0)) { mIY =
 if ((goalType!= GoalType.MAX) && ((goalType == GoalType.MAXIMIZE) ^ (currY < mIY))) {
while ((i >= 0) && ((i-- == 0) || ((i--) ^ (currY < mIY))) {
 if ((mIX < mIY ^ (mIY))) {
 if (i-- == 0) { if (!(i >= 0) && ((goalType == GoalType.MAXIMIZE) ^ (currY < mIY))) {
 if ((goalType == GoalType.MAX()&& ((goalType == GoalType.MAXIMIZE) ^ (currY < mIY))) {
 if ((i--!= -0) && ((goalType == GoalType.MAXIMIZE) ^ (currY < mIY))) {
while ((i >= 0) && ((i< j) && ((i< j) + 1) ^ (currY < mIY))) {
while ((i >= 0) && ((goalType == GoalType.MAXIMIZE) ^ (currY <  prevY))) { if (i > 0)
while ((i >= 0) &&  i < lastNaN; ++i)) {
 if (i--!= 0 &&! ((currY < mIY))) {
while ((i-- == -1) && ((goalType == GoalType.MAXIMIZE) ^ (currY < mIY))) {
while ((i >= 0) && ((i-- == 0)) { mIY =
 int i-- = i -- - 1;
 if ((goalType!= (MAXIMIZE) ^ (currY < mIY))) {
 if (i!= j&& ((goalType == GoalType.MAXIMIZE) ^ (currY < mIY))) {
 if (i--!= 0) { mIX = optima[i]; } } else {
 if (i-- == 0 && goalType== GoalType.MAXIMIZE) ^ (currY < mIY))) {
while ((i >= 0) && ((i--!= 0) && (i < j) ^ (currY < mIY))) {
while ((i >= 0) && ((goalType  == MINIMIZE))) {
 if (i--!= 0) while((i >= 0) && ((goalType == GoalType.MAXIMIZE) ^ (currY < mIY))) {
 if (i== j) if((i >= 0) && ((goalType == GoalType.MAXIMIZE) ^ (currY < mIY))) {
 if (i--!= 0 && ((GoalType.MAXIMIZE) ^ (currY < mIY))) {
 if (i--!= 0) { while (((goalType == GoalType.MAXIMIZE) ^ (currY < mIY))) {
while ((i >= 0) && ((i< j) && ((i< j) && mIX) ^ (currY < mIY))) {
 if (((mIX< mIY))) {
 if (i--!= 0) { optima[i] = mIX; } } }
 if (i--!= 0(goalType == GoalType.MAXIMIZE) ^ (currY < mIY))) {
 double mIX = mIX - prevY;
 if (i-- = ((goalType == GoalType.MAXIMIZE) ^ (currY < mIY))) {
 if (i--!= 0.0) && ((goalType == GoalType.MAXIMIZE) ^ (currY < mIY))) {
 double mIY = mIX + mIY;
 optimaValues[i + 1] = mIY; if (i--!= 0) { break; } }
while ((i-- == 0) { mIY =
 if ((mIX < mIX && i< mIY))) {
while ((i >= 0) && ((goalType == GoalType.MAXIMIZE) ^ (currY  < prevY)))) { mIY =
 while (i--&& ((goalType == GoalType.MAXIMIZE) ^ (currY < mIY))) {
 while ((mIX > (mIY))) {
 if (i== j){
 if ((i-- == 0 || --==0) && ((goalType == GoalType.MAXIMIZE) ^ (currY < mIY))) {
 while ((mIY>= 0) && ((goalType == GoalType.MAXIMIZE) ^ (currY < mIY))) {
while ((i >= 0) && ((i--!= 0)) { mIX =
 double mIX = mIX + mIY;
 if (i-- == 0 && mIX< mIY))) {
 if (i-- == (j-0) && ((goalType == GoalType.MAXIMIZE) ^ (currY < mIY))) {
while ((i >= 0) &&  mIX)) {
 double mIX = mIX;
 if ((goalType == 0) ^(i >= 0) && ((goalType == GoalType.MAXIMIZE) ^ (currY < mIY))) {
while ((i >= 0) && ((goalType == GoalType.MAXIMIZE) ^ (currY < mIY)))  { if ((i--!= 0) {
while ((i >= 0) && (i--!= 0)) { mX =
 double mIX = mIX + prevY;
 if (i--!= 0) { if ((^ (currY < mIY))) {
 if ((goalType == GoalType.SORT) && ((goalType == GoalType.MAXIMIZE) ^ (currY < mIY))) {
 if (i--!=))) {
 if ((mIX(< mIY))) {
while ((i >= 0) && ((goalType == GoalType.MAXIMIZE) ^ (currY  > prevY)))
while ((i >= 0) && ((i--!= 0) && (i--!= maximize) ^ (currY < mIY))) {
 if (i--!= 0 && (i== GoalType.MAXIMIZE) ^ (currY < mIY))) {
 if (if ((goalType == GoalType.MAXIMIZE) ^ (currY < mIY))) {
while (i<j) { if (i--)
 if ((mIX>= 0) && ((goalType == GoalType.MAXIMIZE) ^ (currY < mIY))) {
while ((i >= 0) && ((i-- == 0 || i == j) ^ (currY < mIY))) {
 if ((goalType == GoalType.MINOR^ (currY < mIY))) {
while ((i >= 0) &&  mIX < mIY)
while ((i >= 0) && (i-- == 0)) {
 if ((goalType == GoalType.SAME.MAXIMIZE) ^ (currY < mIY))) {
 if ((goalType == MAXIZE) ^ (currY < mIY))) {
 if ((goalType == GoalType.-i >= 0) && ((goalType == GoalType.MAXIMIZE) ^ (currY < mIY))) {
 double mIX = mIY - prevY;
 if (i-- == 0))) {
while ((i >=  j - 1)) {
 if (mIX < ((goalType == GoalType.MAXIMIZE) ^ (currY < mIY))) {
 if (i-- ^ ((currY < mIY))) {
 if ((mIX >= (mIY))) {
 if (i--!= 0) || (((i >= 0) && ((goalType == GoalType.MAXIMIZE) ^ (currY < mIY))) {
while ((i >= 0) && ((i--!= 0) && (i-- == mIX) ^ (currY < mIY))) {
while (i--!= 0) { mIY -
while ((i >=  j) { if (i--!= 1)
 if (i-1!= j) {
while ((i >= 0) && (i--!= 0))
 if ((i--!= -1))) {
 if (i-- == 0 && (mIX)) {
 while (i--!= 0&&(goalType == GoalType.MAXIMIZE) ^ (currY < mIY))) {
 if ((i-- == 0 || i==0) && ((goalType == GoalType.MAXIMIZE) ^ (currY < mIY))) {
 if (i-- == 0) if((i >= 0) && ((goalType == GoalType.MAXIMIZE) ^ (currY < mIY))) {
 if (i++) {
while ((i >= 0) && ((goalType == GoalType.MAXIMIZE) ^ (mIX > prevY))) {
while ((i >= 0) && ((goalType == GoalType.MAXIMIZE) ^ (currY < mIY)) { if (i--!= 0) { }
 if (i!= 0) && ((goalType == GoalType.MAXIMIZE) ^ (currY < mIY))) {
 if ((goalType == GoalType.maxi >= 0) && ((goalType == GoalType.MAXIMIZE) ^ (currY < mIY))) {
 if (i--!= 0) { mIX = optima[i]; mIY }
while  (i)
 while ((goalType == (MAXIMIZE) ^ (currY < mIY))) {
while ((i++!= -1)) {
while ((i >= 0) && ((goalType == GoalType.MAXIMIZE) ^ (currY <  prevY)))) { if (i--)
while ((i >= 0) && ((i--!= 0))) { mIY =
 double mIX = mIX - 1;
 if (i--!= 0 && ((i== GoalType.MAXIMIZE) ^ (currY < mIY))) {
while ((i >= 0) && ((i-- > 0)) {
while ((i < j)) {
while ((i >= 0) && ((goalType  == GoalType.MIX)) {
 if (i-- == 0) || (((i >= 0) && ((goalType == GoalType.MAXIMIZE) ^ (currY < mIY))) {
 if (i-- == -1.0) {
while ((i >= 0) && ((i--!= 0) && mIX) ^ (currY < mIY))) {
while ((i >= 0) && ((goalType != MINIMIZE)) {
while ((i >=  j) { if (i == j)
 } if (((goalType == GoalType.MAXIMIZE) ^ (currY < mIY))) {
 int i-- = 1;
 if (i<int(mIX))) {
while ((i >=  j) { if (i!= j)
while ((i >= 0) && ((goalType  == GoalType.MINIMIZE)))
while ((i >= 0) && ((i--!= 0 || (mIX) ^ (currY < mIY))) {
 if (i--!= 0 || ((currY < mIY))) {
 if (i--!= 0 && (currY < mIY))) {
while ((i >= 0) &&  i < j)) {
while ((i >= 0) && ((goalType  == MAXIMIZE))) {
while ((i >= 0) { if (i-- == 0)
 if ((goalType == GoalType.MAXI^ (currY < mIY))) {
 if (i--!= 0 && mIX) {
 if ((goalType == GoalType.UNMAXIMIZE) ^ (currY < mIY))) {
 if (((mIX + 1< mIY))) {
 while (i--!= 0 && (i >= 0) && ((goalType == GoalType.MAXIMIZE) ^ (currY < mIY))) {
 if ((i == 0) ^ (currY < mIY))) {
 if ((mIX < mIX(< mIY))) {
while ((i >= 0) { if (i)
while ((i >= 0) && ((goalType  == GoalType.FIX)) {
while ((i >= 0) && ((i--!= 0) && (i >= 0) ^ (currY < mIY))) {
 if ((i-- && goalType== GoalType.MAXIMIZE) ^ (currY < mIY))) {
while ((i >= 0) && ((goalType == GoalType.MAXIMIZE) ^ (currY  < prevY)) { if (i--)
while ((i >= 0) { if (i--!= 1)
while ((i >= 0) && ((i <= j)) {
 if ((i--!= 0 && i< mIY))) {
 if (i))) {
 if ((mIX && ((goalType== GoalType.MAXIMIZE) ^ (currY < mIY))) {
 double mIY = mIY ; int i-- = i ;
 if ((i-- == 0 && (GoalType.MAXIMIZE) ^ (currY < mIY))) {
while ((goalType!= GoalType.MAX) && ((goalType == GoalType.MAXIMIZE) ^ (currY < mIY))) {
 if ((goalType == GoalType.MIN&& ((goalType == GoalType.MAXIMIZE) ^ (currY < mIY))) {
while ((i >= 0) && ((goalType == GoalType.MAXIMIZE) ^ (currY < mIY))) { if (i > 0) {
 while (i--!= 0) && (((currY < mIY))) {
while ((i >= 0) && ((goalType == GoalType.MAXIMIZE) ^ (currY < mIY))) { if (i--)
 if (i==j)) {
 if (i-- == (i--=0) && ((goalType == GoalType.MAXIMIZE) ^ (currY < mIY))) {
 double mIX = mIY ; double mIX = mIX ;
 if (mIY))) {
 if ((i-1)>= 0) && ((goalType == GoalType.MAXIMIZE) ^ (currY < mIY))) {
 if ((i!= j) && ((goalType == GoalType.MAXIMIZE) ^ (currY < mIY))) {
 while ((i--!= 0) ^ (currY < mIY))) {
 if ((i < 0) ||((i >= 0) && ((goalType == GoalType.MAXIMIZE) ^ (currY < mIY))) {
 if (i--!= 0 ||(goalType == GoalType.MAXIMIZE) ^ (currY < mIY))) {
 while (true){
 optimaValues[i + 1] = mIY ; } } } }
 if ((i--!= 0.0) && ((goalType == GoalType.MAXIMIZE) ^ (currY < mIY))) {
 if ((goalType == GoalType.MAXSIZE>= 0) && ((goalType == GoalType.MAXIMIZE) ^ (currY < mIY))) {
 while (0) && ((goalType == GoalType.MAXIMIZE) ^ (currY < mIY))) {
 if ((i--))) {
 if (i<= 0 && (j>= 0) && ((goalType == GoalType.MAXIMIZE) ^ (currY < mIY))) {
while ((i >= 0) { if (i > 0)
while ((i >= 0) { if (i!= 0)
 if (i--!= 0) {else{
while ((i >= 0) { if (i < j)
while ((i >= 0) && ((i-- == 0 && mIX) ^ (currY < mIY))) {
 if (i-- == (i--==0) && ((goalType == GoalType.MAXIMIZE) ^ (currY < mIY))) {
while ((i >= 0) && ((goalType == GoalType.MAXIMIZE) ^ (currY <  prevY))) { if (i < j)
 while (i > j&& ((goalType == GoalType.MAXIMIZE) ^ (currY < mIY))) {
 while (i--!= 0 && ((==GoalType.MAXIMIZE) ^ (currY < mIY))) {
while ((i >= 0) && ((goalType == GoalType.MINIMIZE) ^ i))) {
 if (i++!= mIY)) {
 } else { if((i >= 0) && ((goalType == GoalType.MAXIMIZE) ^ (currY < mIY))) {
while ((i >= 0) && ((i--!= 0) && (i >= j) ^ (currY < mIY))) {
while ((i >= 0) && ((goalType == GoalType.MAXIMIZE) ^ (currY < mIY)) {
 if ((i--!= 0!>= 0) && ((goalType == GoalType.MAXIMIZE) ^ (currY < mIY))) {
 while ((goalType.MAXIMIZE) ^ (currY < mIY))) {
 while (i--!= 0&&(currY < mIY))) {
while ((i >= 0) && ((goalType == GoalType.MAXIMIZE) ^ (currY  > prevY)) {
while  (i--!= 0) { mIX,
 if (i-- == 0((goalType == GoalType.MAXIMIZE) ^ (currY < mIY))) {
while ((i >= 0) && ((i< j) && ((i< j) ^ (currY < mIY))) {
 if (i++!= 0&&((goalType == GoalType.MAXIMIZE) ^ (currY < mIY))) {
while ((i >= 0) && ((goalType == GoalType.MAXIMIZE) ^ (currY < mIY)))  { if (i >= 0)
 if (i--!= 0 || (i >= 0) && ((goalType == GoalType.MAXIMIZE) ^ (currY < mIY))) {
 if ((goalType == GoalType.MINUS^ (currY < mIY))) {
 if (i-- == 0 && i--==0) && ((goalType == GoalType.MAXIMIZE) ^ (currY < mIY))) {
 if (i--!= 0) { mIX = mIX;
 if (i--!= 0) && (^ (currY < mIY))) {
while ((i >= 0) && ((goalType  == GoalType.MAXIMIZE)) { }
 if (i--!= 0 && (IX< mIY))) {
while ((i >= 0) { while (i--)
while ((i >= 0) && ((i< j) && ((i< j) && (i) ^ (currY < mIY))) {
 if (i++)) {
while ((i >= 0) && ((goalType == GoalType.MAXIMIZE) ^ (currY < mIY)))  { if (i++!= 0) { }
while ((i >= 0) && ((goalType == GoalType.MAXIMIZE) ^ (currY < mIY)))) {
while ((i >= 0) && ((i--!= 0 && mIX) ^ (currY < mIY))) {
 double mIX = mIY ; double mIX = null;
while ((i >= 0) && (i--!= 0))) { mIX =
 if (i--!= 0) { mIX = mIY; } } } }
 if (((goalType == Goal.MAXIMIZE) ^ (currY < mIY))) {
 double mIX = 0 ;
 if (i++ && i--!= 0)) {
 if ((i-1==0) && ((goalType == GoalType.MAXIMIZE) ^ (currY < mIY))) {
 int i = 0;
 if ((i--!= 0 || i==0) && ((goalType == GoalType.MAXIMIZE) ^ (currY < mIY))) {
 if ((i++!= mIY))) {
 if (i!= 0&& ((goalType == GoalType.MAXIMIZE) ^ (currY < mIY))) {
 if ((mIX < mIX ((< mIY))) {
 if (i--!= 0 && i--==0) && ((goalType == GoalType.MAXIMIZE) ^ (currY < mIY))) {
 if (i-- == 0 && ((GoalType.MAXIMIZE) ^ (currY < mIY))) {
while ((i--!= 0)) { mX =
while ((goalType == GoalType.MIN) && ((goalType == GoalType.MAXIMIZE) ^ (currY < mIY))) {
 if (mIX){
while ((i >=  j)) { if (i--)
 if ((int(goalType== GoalType.MAXIMIZE) ^ (currY < mIY))) {
 if (i--!= 0|((goalType == GoalType.MAXIMIZE) ^ (currY < mIY))) {
 if ((i == j) ^ (currY < mIY))) {
 if ((i-- == 0 || i-->= 0) && ((goalType == GoalType.MAXIMIZE) ^ (currY < mIY))) {
 if ((goalType == GoalType).(i >= 0) && ((goalType == GoalType.MAXIMIZE) ^ (currY < mIY))) {
while ((i >= 0) && ((i--!= 0 || i == j) ^ (currY < mIY))) {
while ((i >= 0) { if (i--))
 if (i-- == (0)) {
 if ((i--!= 0 && i== GoalType.MAXIMIZE) ^ (currY < mIY))) {
while ((i >= 0) && ((i< j) && ((i> j) ^ (currY < mIY))) {
while ((i >= 0) && ((goalType == GoalType.MAXIMIZE) ^ (currY < mIY)))  { if ((i--!= 0) { }
while ((i++!= 0) { mIX =
 if (i--==((goalType == GoalType.MAXIMIZE) ^ (currY < mIY))) {
while ((i >= 0) && ((goalType  == GoalType.MAXIMIZE)) { double
 if ((i--!= 0) && ((GoalType.MAXIMIZE) ^ (currY < mIY))) {
while ((i >= 0) && ((goalType == GoalType.MAXIMIZE) ^ (currY < mIY))) { if (i < j) {
 if (i--) if((i >= 0) && ((goalType == GoalType.MAXIMIZE) ^ (currY < mIY))) {
 if ((i--!= 0 && (==GoalType.MAXIMIZE) ^ (currY < mIY))) {
 if (((goalType.MAXIMIZE) ^ (currY < mIY))) {
while ((i >= 0) && ((goalType == GoalType.MAXIMIZE) ^ (currY  < prevY))) { if (i)
while ((i++!= 0)) { mIX =
while ((i >= 0) &&  i <= j) {
 int i-- = i -- ;
 if ((i--!= 0&&(goalType == GoalType.MAXIMIZE) ^ (currY < mIY))) {
 if ((mIX < mIX< mIY))) {
while  (i--!= 0) { do {
while ((i >=  -1)) {
 if ((i-- == 0 && i>= 0) && ((goalType == GoalType.MAXIMIZE) ^ (currY < mIY))) {
 if (mIX ^ (currY < mIY))) {
 if (i-- && (i >= 0) && ((goalType == GoalType.MAXIMIZE) ^ (currY < mIY))) {
while ((goalType == GoalType.END) && ((goalType == GoalType.MAXIMIZE) ^ (currY < mIY))) {
 if ((i++!= -1))) {
while ((i >= 0) && ((goalType == GoalType.MAXIMIZE) ^ (i--!= 0)) { }
while ((i >= 0)) { if (i--)
 if (i < 0) ||((i >= 0) && ((goalType == GoalType.MAXIMIZE) ^ (currY < mIY))) {
while ((i >= 0) && (i <= j)) {
 if (i-- == 0 || i-->0) && ((goalType == GoalType.MAXIMIZE) ^ (currY < mIY))) {
while ((i --!= 0) { double mIY;
 while (i--!= 0 && ((GoalType.MAXIMIZE) ^ (currY < mIY))) {
 if (i++ && i!= 0) {
 if (i++!=))) {
 if ((i--!= 0 && i>= 0) && ((goalType == GoalType.MAXIMIZE) ^ (currY < mIY))) {
while ((goalType == GoalType.ADD) && ((goalType == GoalType.MAXIMIZE) ^ (currY < mIY))) {
while ((i >= 0) && ((goalType == GoalType.MAXIMIZE) ^  (i--!= 0)) { mIX =
while ((i >= 0) && ((goalType == GoalType.MAXIMIZE) ^ (currY < mIY))) { if (i== -1)
 if (i--!= 0 || ((==GoalType.MAXIMIZE) ^ (currY < mIY))) {
while ((i--!= 0))
 if ((goalType == GoalType.SIZE>= 0) && ((goalType == GoalType.MAXIMIZE) ^ (currY < mIY))) {
while ((i >= 0) &&  mIX < mIY))
 if (i++ && i <= j) {
while ((i-- == j - 1) && ((goalType == GoalType.MAXIMIZE) ^ (currY < mIY))) {
while ((i > 0)) {
while ((i >= 0) { if (i < 0)
 if ((isNaN) ^ (currY < mIY))) {
while ((i >= 0) && ((goalType == GoalType.MAXIMIZE) ^ (mIY < i))) {
while ((i >= 0) && ((goalType  == GoalType.MAX)))
 if ((i-- == -1))) {
 if ((i--!= 0 ^(currY < mIY))) {
while ((i >= 0) && ((goalType ==  GoalType.MAXIMIZE))) { }
while ((i >= 0) && ((i < j) && i>0)) {
 int i--;
 if (i--) while((i >= 0) && ((goalType == GoalType.MAXIMIZE) ^ (currY < mIY))) {
while ((i >= 0) && ((goalType == GoalType.MAXIMIZE) ^ (mIY < 0))) {
 if (i-- == -((goalType == GoalType.MAXIMIZE) ^ (currY < mIY))) {
 while ((mIX(< mIY))) {
 if ((mIX < mIY < (mIY))) {
 if (i++!= 0 && i<j)) {
 if ((mIX < mIY)&& ((goalType == GoalType.MAXIMIZE) ^ (currY < mIY))) {
while ((i >= 0) && ((i < j) && i >= 0)) {
 if ((mIX > min(mIY))) {
 double mIX = optimaValues[i + 1]; }
 if (i--!= -1))) {
 if ((mIX < min(mIY))) {
 if (i--==(i >= 0) && ((goalType == GoalType.MAXIMIZE) ^ (currY < mIY))) {
 if (i--!= 0 && i< mIY))) {
 if (i++!= 0 && i<j))) {
 if ((mIX < abs(mIY))) {
 if (i>0 && ((currY < mIY))) {
 if ((mIX > max(mIY))) {
while ((i >= 0) && ((goalType == GoalType.MAXIMIZE) ^ (currY < mIY))) { if (i > 0)
while ((i >= 0) && (i-- == 0)) { mIX =
 if ((i-- == 0!>= 0) && ((goalType == GoalType.MAXIMIZE) ^ (currY < mIY))) {
 } else { if((goalType == GoalType.MAXIMIZE) ^ (currY < mIY))) {
 if (i-- == (j>0) && ((goalType == GoalType.MAXIMIZE) ^ (currY < mIY))) {
while ((i >= 0) && ((goalType ==  GoalType.MAXIMIZE))) { double
while ((i >=  j) { if (i)
 if (i++ && (i < j)) {
 if (i-- == (j==0) && ((goalType == GoalType.MAXIMIZE) ^ (currY < mIY))) {
 if (i--!= 0) (((i >= 0) && ((goalType == GoalType.MAXIMIZE) ^ (currY < mIY))) {
 if (mIX > ((goalType == GoalType.MAXIMIZE) ^ (currY < mIY))) {
 while (i--!= 0 ((goalType == GoalType.MAXIMIZE) ^ (currY < mIY))) {
 if ((i-1>0) && ((goalType == GoalType.MAXIMIZE) ^ (currY < mIY))) {
while ((i >= 0) && (i--!= 0)) { mIY &&
 if ((mIX < mIX < (mIY))) {
 if ((i-- || goalType== GoalType.MAXIMIZE) ^ (currY < mIY))) {
 if ((j---i >= 0) && ((goalType == GoalType.MAXIMIZE) ^ (currY < mIY))) {
while ((i >= 0) { if (i== j)
while ((i >= 0) && (i--!= 0)) { mIY +
 while (i--!= 0(goalType == GoalType.MAXIMIZE) ^ (currY < mIY))) {
 if ((goal == Goal.MAXIMIZE) ^ (currY < mIY))) {
 if (mIX < mIY)){
 if ((mIX < prevY)^ (currY < mIY))) {
 while (i--))) {
 if (i-- == 0) {else{
 if (((mIX!< mIY))) {
while ((i >= 0) && ((i-- == 0 || i < 0) ^ (currY < mIY))) {
while ((i >= 0)  { if (i-- > 0) { }
 if (i-1!= 0) {
 if ((mIX!< mIY))) {
 while ((mIX) ^ (currY < mIY))) {
while ((i >= 0) && (i-- > 0)) { mIX =
 if (i++ && i<== j)) {
 if ((goalType == GoalType.MINOR>= 0) && ((goalType == GoalType.MAXIMIZE) ^ (currY < mIY))) {
while ((i >= 0) && ((i--!= 0)) { mX =
 if ())) {
 if (i--!= -1)(&& ((goalType == GoalType.MAXIMIZE) ^ (currY < mIY))) {
 while (i--!= 0 && (^ (currY < mIY))) {
 if (i++ && (i!= j)) {
while ((i >= 0) && ((i-- == 0.0) ^ (currY < mIY))) {
while ((i >= 0) && ((goalType == GoalType.MAXIMIZE) ^ (currY < mIY)) { if (i--!= 1) {
while ((i >= 0) && ((goalType == GoalType.MAXIMIZE) ^ (currY < mIY)))) { if (i >= 0) {
while ((i--!= j - 1) && ((goalType == GoalType.MAXIMIZE) ^ (currY < mIY))) {
 if (i==j && ((goalType == GoalType.MAXIMIZE) ^ (currY < mIY))) {
 if (i>0) && ((goalType == GoalType.MAXIMIZE) ^ (currY < mIY))) {
 if (i-- (i >= 0) && ((goalType == GoalType.MAXIMIZE) ^ (currY < mIY))) {
 if ((mIX < 0) ^ (currY < mIY))) {
 if (i--!= ((goalType == GoalType.MAXIMIZE) ^ (currY < mIY))) {
while ((i >= 0) && ((i-- == 0.5) ^ (currY < mIY))) {
 if (i--!= 0 && i<j))) {
while ((i >= 0) && ((goalType == GoalType.MAXIMIZE) ^ ()) {
 if (i--!= 0) ((i >= 0) && ((goalType == GoalType.MAXIMIZE) ^ (currY < mIY))) {
 if (i-1!= j)) {
while ((i >=  j) { int i-- =
 if (i--) && ((goalType == GoalType.MAXIMIZE) ^ (currY < mIY))) {
 if (if (i >= 0) && ((goalType == GoalType.MAXIMIZE) ^ (currY < mIY))) {
 double mIX = optimaValues[j]; } }
while  (i--!= 0) { continue }
while  (i--!= 0) { }
 if ((1^ (currY < mIY))) {
while ((i--!= 0) { }
 if (i-- == (j+0) && ((goalType == GoalType.MAXIMIZE) ^ (currY < mIY))) {
while  (i--!= 0) { continue;
 if (j--==(i >= 0) && ((goalType == GoalType.MAXIMIZE) ^ (currY < mIY))) {
 if ((goalType == MIN) ^ (currY < mIY))) {
while ((i > 0)
while ((mIX < mIX) && ((goalType == GoalType.MAXIMIZE) ^ (currY < mIY))) {
 if (i--!= 0 ^(currY < mIY))) {
while  (i++)
 if ((mIX + 1>= 0) && ((goalType == GoalType.MAXIMIZE) ^ (currY < mIY))) {
while ((i >= 0) && ((goalType == GoalType.MAXIMIZE) ^ (currY < mIY)) { if (i-- == 0) {
 if (i-- == -1)(&& ((goalType == GoalType.MAXIMIZE) ^ (currY < mIY))) {
 if ((mIX>mIY))) {
while ((i >= 0) &&  i--!= 0)) {
 if (i++ && i--!= 1) {
while ((i >= 0) &&  i < j)
while ((i >= 0) && ((goalType == GoalType.MAXIMIZE) ^ (currY < mIY))) { if (i<== 0)
 if ((mIX < mIY ^ ((mIY))) {
 if ((mIX >>>(< mIY))) {
while  (i--!= 0) { } }
while ((i > 0) && ((goalType == GoalType.MAXIMIZE) ^ (currY < mIY))) {
 if ((mIX < (mIX-mIY))) {
 if ((i > 0) ^ (currY < mIY))) {
while ((i >= 0) && ((i--) {
while ((i >= 0) && ((i--!= 0))) { mIX =
while ((i >= 0)  { if (i--!= 0)) { }
 if (i--!= 0 && (^ (currY < mIY))) {
 if (i++ && i<=j)) {
 double mIX = optimaValues[j] ; }
while ((i >= 0) && ((goalType ) {
while ((i >= 0) && (i--!= 0)) { do {
 while (i<j))) {
while ((i >= 0) && ((i <= j))) {
 if ((i-- == 0) ^ (currY < mIY))) {
while ((i--) {
while ((i--!= 0) { } }
 while (!(currY < mIY))) {
while ((i >= 0) && ((goalType == GoalType.MAXIMIZE) ^ (currY <  mIX)) {
 if (i-- == 0 ||((i >= 0) && ((goalType == GoalType.MAXIMIZE) ^ (currY < mIY))) {
while ((i >= 0) && ((goalType == GoalType.MAXIMIZE)  ^ ((i--!= 0)))) { }
 if (i-- == 0 && (mIX))) {
 if ((j-i >= 0) && ((goalType == GoalType.MAXIMIZE) ^ (currY < mIY))) {
while ((i >= 0) &&  mIX)
while ((i >= 0) && ((goalType  == 0)) {
 if ((mIX + (IX< mIY))) {
 if ((i++ && goalType== GoalType.MAXIMIZE) ^ (currY < mIY))) {
 if ((i-- == mIX==0) && ((goalType == GoalType.MAXIMIZE) ^ (currY < mIY))) {
while ((i >= 0) && ((goalType == GoalType.MAXIMIZE) ^ (currY <  prevY))) { if (i++)
while ((i >= 0) && ((goalType == GoalType.MAXIMIZE) ^ (currY  < prevY)))) { }
 if ((mIY))) {
 if (0) && ((goalType == GoalType.MAXIMIZE) ^ (currY < mIY))) {
 if ((mIX<(goalType == GoalType.MAXIMIZE) ^ (currY < mIY))) {
 if (i++ && (i<=j)) {
 double mIX = mIY + mIX ; } }
while ((i >= 0) && (i)
 if ((i-- == 0 && i== GoalType.MAXIMIZE) ^ (currY < mIY))) {
while ((i >= 0) { mIY =
 if ((i-- == (0))) {
 if (i==j))) {
while ((i >= 0) && ((goalType  == MAXIMIZE)))
 if (i-- && ((currY < mIY))) {
 if ((i-- == 0)>= 0) && ((goalType == GoalType.MAXIMIZE) ^ (currY < mIY))) {
 if (i-- ==))) {
 while ((i--!= 0!>= 0) && ((goalType == GoalType.MAXIMIZE) ^ (currY < mIY))) {
 if ((mIX > (1-mIY))) {
 if ((mIX < (mIX|mIY))) {
 if (i-1<mIX)) {
while ((i >= 0) && ((goalType == GoalType.MAXIMIZE) ^ mIX)) { }
while ((i >=  0) {
 if (i--!= 0 &&! (mIY))) {
 double mIX = mIY + mIX ; }
while ((i >= 0) && ((goalType == GoalType.MAXIMIZE) ^ (currY  < prevY))) { }
 if ((i-1)>0) && ((goalType == GoalType.MAXIMIZE) ^ (currY < mIY))) {
 if (i--(currY < mIY))) {
 if (i--!= 0 && (i--))) {
 if ((i-1>= 0) && ((goalType == GoalType.MAXIMIZE) ^ (currY < mIY))) {
while ((i >= 0) && ((goalType  == MINIMIZE)))
while ((i++!= -1) && ((goalType == GoalType.MAXIMIZE) ^ (currY < mIY))) {
while ((i >= 0) && ((i-- == 0)) { mIX =
 if (() && ((goalType == GoalType.MAXIMIZE) ^ (currY < mIY))) {
 if ((goalType == GoalType.(i >= 0) && ((goalType == GoalType.MAXIMIZE) ^ (currY < mIY))) {
while ((i--!= 0)
while ((i >= 0) && ((goalType == GoalType.MAXIMIZE)  ^ (i--!= 0))) { } }
 while ((mIX>= 0) && ((goalType == GoalType.MAXIMIZE) ^ (currY < mIY))) {
while ((i >= 0) && ((goalType == GoalType.MAXIMIZE) ^ (currY < mIY))) { if (i < 0)
while ((i >= 0) && ((goalType == GoalType.MAXIMIZE) ^ (currY  < prevY))) { } }
while ((i >= 0) && ((goalType == GoalType.MAXIMIZE) ^ (currY < mIY))) { if (i!= 0)
 if (mIX && (i >= 0) && ((goalType == GoalType.MAXIMIZE) ^ (currY < mIY))) {
 if (i--!= 0 ||((i >= 0) && ((goalType == GoalType.MAXIMIZE) ^ (currY < mIY))) {
 } } else{
while ((mIX)
while ((i >= 0) && ((goalType == GoalType.MAXIMIZE) ^ (i--!= 0))) { }
 double mIX = mIY - mIX ; }
while ((i >= 0) && ((goalType == GoalType.MAXIMIZE) ^ (currY  < prevY))) { if (false)
while ((i >= 0) && ((goalType == GoalType.MAXIMIZE)  ^ ((i--!= 0)))) { double
 while ((i-- || i>= 0) && ((goalType == GoalType.MAXIMIZE) ^ (currY < mIY))) {
 while (i--!= 0 (^ (currY < mIY))) {
while ((i >= 0) && ((goalType == GoalType.MAXIMIZE) ^ (currY < mIY)))  { if (i== j) {
 if ((++i >= 0) && ((goalType == GoalType.MAXIMIZE) ^ (currY < mIY))) {
while ((i >= 0) && ((goalType == GoalType.MAXIMIZE) ^ (currY  < prevY)) { if (i)
 if (i-- == j-0) && ((goalType == GoalType.MAXIMIZE) ^ (currY < mIY))) {
while ((i >= 0) && ((goalType  == MINOR)) {
 if ((goalType=GoalType.MAXIMIZE) ^ (currY < mIY))) {
 while (true)){
while ((i >= 0) && ((goalType == GoalType.MAXIMIZE) ^ (currY  < prevY))) { if (true)
 if (i--!= (prevY) && ((goalType == GoalType.MAXIMIZE) ^ (currY < mIY))) {
while ((i >= 0) && ((goalType != 0)) {
while ((i >= 0) && ((goalType == GoalType.MAXIMIZE) ^ (currX < prevX)))) { }
 if ((mIX < (1-mIY))) {
 if (((mIX++< mIY))) {
 if (i++ == (mIX)) {
while ((i >= 0) && ((i <= 1)) {
 while ((i-1)>= 0) && ((goalType == GoalType.MAXIMIZE) ^ (currY < mIY))) {
 if (i==0 && ((currY < mIY))) {
 if ((mIX > mIY++))) {
while ((i >= 0) { while (i)
while ((i >= 0) && ((goalType == GoalType.MAXIMIZE) ^ (i)))) {
 if ((mIX + 1!== GoalType.MAXIMIZE) ^ (currY < mIY))) {
while ((i >= 0) && ((goalType ==  GoalType.MINIMIZE))) { }
 if ((mIX) && ((goalType == GoalType.MAXIMIZE) ^ (currY < mIY))) {
 while ((i-1>= 0) && ((goalType == GoalType.MAXIMIZE) ^ (currY < mIY))) {
while ((i >= 0) && ((goalType == GoalType.MAXIMIZE) ^ (currY < mIY)))) { if (i > 0)
 if ((!== GoalType.MAXIMIZE) ^ (currY < mIY))) {
 while (i--) && ((goalType == GoalType.MAXIMIZE) ^ (currY < mIY))) {
while ((i >= 0) && ((goalType == GoalType.MAXIMIZE) ^ (currY  > prevY))
 if ((i---i >= 0) && ((goalType == GoalType.MAXIMIZE) ^ (currY < mIY))) {
 while (i--) while((i >= 0) && ((goalType == GoalType.MAXIMIZE) ^ (currY < mIY))) {
while ((i++!= 0) && ((goalType == GoalType.MAXIMIZE) ^ (currY < mIY))) {
 if ((i) && ((goalType == GoalType.MAXIMIZE) ^ (currY < mIY))) {
while ((i<j+1) && ((goalType == GoalType.MAXIMIZE) ^ (currY < mIY))) {
 if ((>0) && ((goalType == GoalType.MAXIMIZE) ^ (currY < mIY))) {
 if ((maximize == 1^ (currY < mIY))) {
 if (i++!= (mIX)) {
 if ((goal (Type.MAXIMIZE) ^ (currY < mIY))) {
while ((i >= 0) && ((goalType == GoalType.MAXIMIZE) ^ (currY < mIY))) { if (i < j)
 if ((mIX < mIY++))) {
while ((i >= 0) && ((goalType == GoalType.MAXIMIZE) ^ (currY < mIY)))) { if (i--)
while ((i >= 0) && ((goalType == GoalType.MAXIMIZE) ^ (i--)) { }
while ((i >= 0) && ((goalType == GoalType.MAXIMIZE) ^ (currY  >= prevY)))
while ((i > 0))
 if ((mIX > mIX<mIY))) {
 if (i-- ^(currY < mIY))) {
 if (i++ == (prevY)) {
 if ((i++ == (mIX))) {
while ((i >= 0) &&  i--) {
while ((i >= 0) && ((i--!= 0)) { do {
while ((i >= 0) && ((goalType == GoalType.MAXIMIZE) ^ (currY < mIY)) { if (i--)
 if (j--(i >= 0) && ((goalType == GoalType.MAXIMIZE) ^ (currY < mIY))) {
while ((i >= 0) && ((goalType == GoalType.MAXIMIZE) ^ (i))
 if ((mIX |^ (currY < mIY))) {
while ((i >= 0) && ((i < j))
while ((i > j)
 if ((i++!= (mIX))) {
 if ((maximize == 0^ (currY < mIY))) {
 if ((i-- ^(currY < mIY))) {
 if (true)){
 if ((mIX + 1 ==GoalType.MAXIMIZE) ^ (currY < mIY))) {
 if ((mIX < 0^ (currY < mIY))) {
 if (((mIX!== GoalType.MAXIMIZE) ^ (currY < mIY))) {
 if (i--<((goalType == GoalType.MAXIMIZE) ^ (currY < mIY))) {
 if (j-- && (i >= 0) && ((goalType == GoalType.MAXIMIZE) ^ (currY < mIY))) {
while ((i >= 0) &&  mIX < prevY)
while ((i >= 0) && (i--!= 0)) { }
 if (i-- == ((currY < mIY))) {
 if ((mIX) ^(i >= 0) && ((goalType == GoalType.MAXIMIZE) ^ (currY < mIY))) {
while ((i >= 0) && ((goalType == GoalType.MAXIMIZE) ^ (currY < mIY)))) { if (i >= 0)
 while (true) && ((goalType == GoalType.MAXIMIZE) ^ (currY < mIY))) {
while ((i >= 0) && ((goalType == GoalType))) {
 if ((i--!= 0 &&^ (currY < mIY))) {
while ((i >= 0) && ((goalType ==  MaxIMIZE)) {
 if ((mIX*^ (currY < mIY))) {
 if (!empty(mIY))) {
while ((i >= 0) && ((goalType == GoalType.MAXIMIZE) ^  (mIX < mIY))) { }
while ((i--!= 0) { continue }
while ((i >= 0) && ((goalType == GoalType.MAXIMIZE) ^ (currX < prevX))) { } }
 if ((i--!= 0)(^ (currY < mIY))) {
while ((i >= 0) && ((goalType == GoalType.MAXIMIZE) ^ (currY < mIY)) { if (i >= 0)
 int i -= 1;
 if (i--!= 0(currY < mIY))) {
while ((i >= 0) && (i--!= 0)) { } }
 while ((mIY))) {
 if (i--&&(goalType == GoalType.MAXIMIZE) ^ (currY < mIY))) {
 if ((i--&& ((goalType == GoalType.MAXIMIZE) ^ (currY < mIY))) {
 if (i< ((goalType == GoalType.MAXIMIZE) ^ (currY < mIY))) {
while ((i >= 0) && ((i--!= 0)) { }
 if ((i-- == (mIX))) {
 if (j--&& ((goalType == GoalType.MAXIMIZE) ^ (currY < mIY))) {
 if ((i-1-->= 0) && ((goalType == GoalType.MAXIMIZE) ^ (currY < mIY))) {
while ((i >= 0) && (i--)
while ((i >= 0) && (i--!= 0)) { continue }
 if (((mIX << 1< mIY))) {
 if ((maximize)^ (currY < mIY))) {
 if (mIX + (i >= 0) && ((goalType == GoalType.MAXIMIZE) ^ (currY < mIY))) {
while ((i >= 0) && (i--) {
 if (+) {
while ((i >= 0) && ((i-- = -1) ^ (currY < mIY))) {
while ((i >= 0) && ((goalType == GoalType.MAXIMIZE) ^ (currY < mIY)) { if (i > 0)
while  (i--!= 0) { double
while ((i >= 0) && ((goalType == GoalType.MAXIMIZE) ^ i)) { }
while ((i >= 0)  { if (i++)
 if ((mIX < mIY --))) {
 if (i) && ((goalType == GoalType.MAXIMIZE) ^ (currY < mIY))) {
while ((i >= 0) && ((i-- > -1) ^ (currY < mIY))) {
while ((i >= 0) &&  (i--!= 0)) { mIX;
while ((i >= 0) && ((goalType  == 1)) {
while ((i >= 0) && ((i--!= 0)) { } }
while ((i--!= 0)) { } }
 if (((mIX >>> 1< mIY))) {
while ((i >= 0) && ((goalType == GoalType.MAXIMIZE) ^ (i++)) {
while ((i >= 0) && ((goalType == GoalType.MAXIMIZE) ^ (currY  < prevY)))) { double
 if ((mIX == 0)|(i >= 0) && ((goalType == GoalType.MAXIMIZE) ^ (currY < mIY))) {
 if ((mIX == Double(GoalType.MAXIMIZE) ^ (currY < mIY))) {
 while (i< ((goalType == GoalType.MAXIMIZE) ^ (currY < mIY))) {
 if ((mIX + 1<GoalType.MAXIMIZE) ^ (currY < mIY))) {
 if (i-- == 0 ||i >= 0) && ((goalType == GoalType.MAXIMIZE) ^ (currY < mIY))) {
while ((i >= 0) && ((goalType == GoalType.MAXIMIZE) ^ (currY  < prevY))) { double
 if (i--!= 0|(i >= 0) && ((goalType == GoalType.MAXIMIZE) ^ (currY < mIY))) {
 if ((mIX > mIY --))) {
while  (i--!= 0) { } {
 if ((mIX!= Double(GoalType.MAXIMIZE) ^ (currY < mIY))) {
while ((i--!= 0)) { }
 if (i-- == 0 (i >= 0) && ((goalType == GoalType.MAXIMIZE) ^ (currY < mIY))) {
while ((i >= 0) && ((i--!= -1d) ^ (currY < mIY))) {
while ((i >= 0) && ((goalType == GoalType.MAXIMIZE) ^ (i--))) { }
 if (++(i >= 0) && ((goalType == GoalType.MAXIMIZE) ^ (currY < mIY))) {
 if ((ix<mIY))) {
while ((i >= 0) && (i--!= 0)) { double
 if ((type.MAXIMIZE) ^ (currY < mIY))) {
 if (i--!= 0 &&currY < mIY))) {
while ((i >= 0) &&  i < lastNaN; ++i))
 if ((++mIY))) {
while ((i >= 0) && (i--!= 0)) { continue;
while ((i >= 0) && ((i--!= 0)) { continue }
while ((i >= 0) && ((goalType == GoalType.MAXIMIZE) ^ (currY  < prevY))) { if (!)
 if (mIX ^ (i >= 0) && ((goalType == GoalType.MAXIMIZE) ^ (currY < mIY))) {
while ((i >= 0) && ((i)
 i -= 1;
 if ((goal(MAXIMIZE) ^ (currY < mIY))) {
 i = j;
 if (i--!= -(currY < mIY))) {
while ((i >= 0) && ((goalType == GoalType.MAXIMIZE) ^ (currY < mIY))) { if (i)
 if (i== j&&(i >= 0) && ((goalType == GoalType.MAXIMIZE) ^ (currY < mIY))) {
while ((i >= 0) && ((i-- == 0 || 0) ^ (currY < mIY))) {
 while (while (i >= 0) && ((goalType == GoalType.MAXIMIZE) ^ (currY < mIY))) {
while ((i >= 0) &&  mIX < mIY)) { }
while ((i >= 0) && ((goalType != 0))) {
while ((i >= 0) && ((goalType == GoalType.MAXIMIZE) ^ (currY < mIY)))) { if (i < 0)
 if ((minimize == 1^ (currY < mIY))) {
 if ((mIX == 0 ||i >= 0) && ((goalType == GoalType.MAXIMIZE) ^ (currY < mIY))) {
 if ((--i >= 0) && ((goalType == GoalType.MAXIMIZE) ^ (currY < mIY))) {
 if (i--!= 0 ||i >= 0) && ((goalType == GoalType.MAXIMIZE) ^ (currY < mIY))) {
 } if (((i >= 0) && ((goalType == GoalType.MAXIMIZE) ^ (currY < mIY))) {
 if (!(currY < mIY))) {
while ((i >= 0) { if (0)
 if ((i == j ||(currY < mIY))) {
 while (i--&&(currY < mIY))) {
while ((i >= 0) && ((goalType != 0))
while ((i >= 0) && (i < j))
while ((i >= 0) && ((goalType  == MIN)) {
 if (i--&&(currY < mIY))) {
 } else { if(i >= 0) && ((goalType == GoalType.MAXIMIZE) ^ (currY < mIY))) {
while ((i >= 0) { mIY)
 while (i--<((goalType == GoalType.MAXIMIZE) ^ (currY < mIY))) {
while ((i >= 0) && ((goalType == GoalType.MAXIMIZE) ^ (currY ++))) {
 } else if (!(i >= 0) && ((goalType == GoalType.MAXIMIZE) ^ (currY < mIY))) {
while ((i >= 0) { } else {
while ((i >= 0) && ((goalType == GoalType.MAXIMIZE) ^ (i--)) { double
 if ((type=MAXIMIZE) ^ (currY < mIY))) {
while ((i >= 0) && ((goalType == GoalType.MAXIMIZE) < i)) {
 if (while (i >= 0) && ((goalType == GoalType.MAXIMIZE) ^ (currY < mIY))) {
 if (i<(currY < mIY))) {
 if (i-- == -(i >= 0) && ((goalType == GoalType.MAXIMIZE) ^ (currY < mIY))) {
 if ((type(MAXIMIZE) ^ (currY < mIY))) {
 while ()) {
while ((i--!= 0) { continue;
while ((i) && ((goalType == GoalType.MAXIMIZE) ^ (currY < mIY))) {
while ((i++!= 0) { } }
while ((i >= 0) && ((goalType == GoalType.MAXIMIZE) ^ (mIX)) {
while ((i >= 0) &&  i--))
 if ((i--==(i >= 0) && ((goalType == GoalType.MAXIMIZE) ^ (currY < mIY))) {
 if (i-- == 0|(i >= 0) && ((goalType == GoalType.MAXIMIZE) ^ (currY < mIY))) {
while ((i >= 0) && ((goalType == GoalType.MAXIMIZE) ^ (currY  < prevY)))) { } }
while ((i >=  j) {
 if ((mIX ^(goalType == GoalType.MAXIMIZE) ^ (currY < mIY))) {
 } } else if((i >= 0) && ((goalType == GoalType.MAXIMIZE) ^ (currY < mIY))) {
while ((i >= 0) && ((goalType == GoalType.END))
 if ((IX^ (currY < mIY))) {
 while ((i--))) {
while ((i >= 0) && ((goalType == GoalType.MAX))
 if (i--=(goalType == GoalType.MAXIMIZE) ^ (currY < mIY))) {
 if (true) {
 if ((goalType=MAXIMIZE) ^ (currY < mIY))) {
 if ((i--!= 0 || i) && ((goalType == GoalType.MAXIMIZE) ^ (currY < mIY))) {
while ((i >= 0) && ((i--!= 0)) { continue;
while ((i >= 0) && ((i-- > 0) ^ (currY < mIY))) {
 if (!(mIY))) {
 if ((0^ (currY < mIY))) {
 if (((goalType == MINimize) ^ (currY < mIY))) {
while ((i >= 0) && (i--!= 0)) { } {
 if ((0) ^ (currY < mIY))) {
 while ((GoalType.MAXIMIZE) ^ (currY < mIY))) {
 while ((ix< mIY))) {
 if (if ((currY < mIY))) {
while ((i >= 0) && ((goalType == GoalType.MAXIMIZE) ^ ) {
 while (i >= 0) && ((goalType == GoalType.MAXIMIZE) ^ (currY < mIY))) {
while ((i++!= 0) { }
 if ((Float.MAXIMIZE) ^ (currY < mIY))) {
while ((i >= 0) && ((goalType == GoalType.END)))
while ((i--!= -1..) && ((goalType == GoalType.MAXIMIZE) ^ (currY < mIY))) {
 if (!)) {
while ((i >= 0) && ((i-- == 0 || (i) ^ (currY < mIY))) {
 if ((!mIY))) {
 if (i&& ((currY < mIY))) {
 ((i== GoalType.MAXIMIZE) ^ (currY < mIY))) {
 if (i--==((i >= 0) && ((goalType == GoalType.MAXIMIZE) ^ (currY < mIY))) {
while  (0)
while ((i >= 0) && ((goalType == GoalType.MAXIMIZE) ^ (currY < mIY))) { int i =
 while () {
 while (true))) {
 } else if(i >= 0) && ((goalType == GoalType.MAXIMIZE) ^ (currY < mIY))) {
while ((i--!= 0) { double
 if (==0) && ((goalType == GoalType.MAXIMIZE) ^ (currY < mIY))) {
while ((i >= 0) &&  --)
 if (!((goalType == GoalType.MAXIMIZE) ^ (currY < mIY))) {
while ((i >= 0) &&  i<lastNaN) { }
while ((i >= 0) && ((i--!= 0)) { } {
 if ((IX) ^ (currY < mIY))) {
while  (i-- > 0) { }
while ((i >= 0) && ((goalType == GoalType.MAXIMIZE) ^ (currY < ) {
 if ((i--!= 0 ||!) && ((goalType == GoalType.MAXIMIZE) ^ (currY < mIY))) {
 if ((type!=GoalType.MAXIMIZE) ^ (currY < mIY))) {
while ((i >= 0) || i--)
while ((i >= 0) && ((i--!= 0)) { double
while ((i >= 0) && ((goalType == GoalType.MAXIMIZE) ^ (currY  < prevY))) { if (!==
 if (int ((currY < mIY))) {
 if ((MIX^ (currY < mIY))) {
 } else if (((i >= 0) && ((goalType == GoalType.MAXIMIZE) ^ (currY < mIY))) {
while ((i >= 0) && ((i< 0))
 if ((i--!= 0 || --) && ((goalType == GoalType.MAXIMIZE) ^ (currY < mIY))) {
while ((i >=  j - 1) {
while ((i >=  0) { if i)
 if (is(mIY))) {
while ((mIX < mIY) && ((goalType == GoalType.MAXIMIZE) ^ (currY < mIY))) {
while ((i >= 0) && ((goalType == GoalType.MAXIMIZE) ^ (currY < mIY))) { if (!mIX)
while ((i >= 0) && ((goalType == GoalType.MAXIMIZE) != 0)) {
while ((i >= 0) && ((goalType == GoalType.MAXIMIZE) ^ (currY < mIY))) { if (false)
while ((i >= 0) && ((goalType == GoalType.MAXIMIZE) ^ (currY < mIY))) { if (!i--)
 while ((< mIY))) {
while ((i >= 0) && ((goalType == GoalType.MAXIMIZE) ^ (currY < mIY))) { if (true)
 if ((false) ^ (currY < mIY))) {
 while ((i== GoalType.MAXIMIZE) ^ (currY < mIY))) {
while ((i >= 0) && ((goalType == GoalType.MAXIMIZE) ^ (currY < mIY))) { if (i++)
 if ((i--) ^ (currY < mIY))) {
 if (! ((currY < mIY))) {
 if (mIX < -(i >= 0) && ((goalType == GoalType.MAXIMIZE) ^ (currY < mIY))) {
 if ((i--) ^(i >= 0) && ((goalType == GoalType.MAXIMIZE) ^ (currY < mIY))) {
while ((i >= 0) && ((i--)))
 ((Double.MAXIMIZE) ^ (currY < mIY))) {
 if (i) {
while ((int)
 if (!(i >= 0) && ((goalType == GoalType.MAXIMIZE) ^ (currY < mIY))) {
 while ((i--!= 0 || i) && ((goalType == GoalType.MAXIMIZE) ^ (currY < mIY))) {
 if ((goal ==GoalType.MAXIMIZE) ^ (currY < mIY))) {
 if ((X^ (currY < mIY))) {
 } if (!(i >= 0) && ((goalType == GoalType.MAXIMIZE) ^ (currY < mIY))) {
 if ((((goalType == GoalType.MAXIMIZE) ^ (currY < mIY))) {
 while (((GoalType.MAXIMIZE) ^ (currY < mIY))) {
 if (!))) {
while ((i >= 0) && ((goalType == GoalType.MAXIMIZE) ^ (currY  < prevY))) { } } }
 while (!((goalType == GoalType.MAXIMIZE) ^ (currY < mIY))) {
 } else if (!((goalType == GoalType.MAXIMIZE) ^ (currY < mIY))) {
while ((i >= 0) && ((goalType == GoalType.MAXIMIZE) ^ (currY <  mIX)))
 if (!(((goalType == GoalType.MAXIMIZE) ^ (currY < mIY))) {
while ((i-- > 0) && ((goalType == GoalType.MAXIMIZE) ^ (currY < mIY))) {
while ((i >= 0) { } {
while ((i >=  j) { int i --
 while ())) {
while ((i)
while ((i >= 0) && ((goalType == GoalType.MAXIMIZE) ^ (currY  < prevY))) { if (++
 if (mIX-(i >= 0) && ((goalType == GoalType.MAXIMIZE) ^ (currY < mIY))) {
 if () {
while ((i >= 0) && ((goalType == GoalType.MAXIMIZE) ^ (currY < mIY))) { } }
 if (!mIY))) {
 } } else if((goalType == GoalType.MAXIMIZE) ^ (currY < mIY))) {
 if ((true) ^ (currY < mIY))) {
while ((i >= 0) && (i))
while ((i >=  0) { if ()
 while (i&& ((goalType == GoalType.MAXIMIZE) ^ (currY < mIY))) {
 while ((i--!>= 0) && ((goalType == GoalType.MAXIMIZE) ^ (currY < mIY))) {
 if (i--|((i >= 0) && ((goalType == GoalType.MAXIMIZE) ^ (currY < mIY))) {
while ((i >= 0) && ((i-- == 0)) { }
while ((i >=  j) { int i)
while ((i >= 0) && ((goalType == GoalType.MAXIMIZE) ^ (i > j))) {
while ((i++))
while ((i >= 0) && ((goalType == GoalType.MAXIMIZE)) { mIX =
 if ((1) ^ (currY < mIY))) {
 if ((0) && ((goalType == GoalType.MAXIMIZE) ^ (currY < mIY))) {
while ((i))
while ((i >= 0) && (i-- > 0)) { }
while ((i >= 0) && (i-- == 0)) { }
 if (!(^ (currY < mIY))) {
 if (mIX<((i >= 0) && ((goalType == GoalType.MAXIMIZE) ^ (currY < mIY))) {
while ((i >=  j) { } }
while ((i >= 0) && ((goalType == GoalType.MAXIMIZE) ^ (currY < mIY)) { if (i)
while ((i >= 0) && ((i!= 0) ^ (currY < mIY))) {
 if (i)) {
while ((i >= 0) && ((goalType  == 0))
 if (!^ (currY < mIY))) {
 } if ((i >= 0) && ((goalType == GoalType.MAXIMIZE) ^ (currY < mIY))) {
while ((i >= 0) && ((goalType  == OPEN))
 if ((optimgoalType== GoalType.MAXIMIZE) ^ (currY < mIY))) {
while ((i >= 0) && ((goalType == GoalType.MAXIMIZE) ^ (currY < mIY)))) { if (i)
while ((i >= 0) { } }
while ((i >= 0 && i--))
while ((i >= 0) && ((goalType ==  MAX)) {
while ((i >= 0) && ((goalType == GoalType.MAXIMIZE) ^ (currY < )))) {
 if ((true) && ((goalType == GoalType.MAXIMIZE) ^ (currY < mIY))) {
while ((i >= 0) && ((goalType == GoalType.MAXIMIZE) ^ (i >= j))) {
while ((i >= 0) && ((i--)
 while (mIY))) {
 if ((=0) && ((goalType == GoalType.MAXIMIZE) ^ (currY < mIY))) {
 if (false)) {
while ((i >= 0) && (i++)
 if ((MAXMAXIMIZE) ^ (currY < mIY))) {
while ((i >= 0) && ((goalType == GoalType.MAXIMIZE) ^ (currY < mIY))) { if (!)
while ((i >= 0) { mIX =
 if (true))) {
 while (==0) && ((goalType == GoalType.MAXIMIZE) ^ (currY < mIY))) {
 } else {
while  (false)
while ((i >= 0) && ((goalType == GoalType.MAXIMIZE) ^ (currY < mIY))) { }
 while (mIX< mIY))) {
 while ((Double.MAXIMIZE) ^ (currY < mIY))) {
 if (!i))) {
while ((i >= 0) && ((goalType ==  RIGHT)) {
while ((i >= 0) && ((i!= j) ^ (currY < mIY))) {
 if (j&& ((goalType == GoalType.MAXIMIZE) ^ (currY < mIY))) {
 if (!i&& ((goalType == GoalType.MAXIMIZE) ^ (currY < mIY))) {
while ((i >= 0) && ((goalType == GoalType.MAXIMIZE) ^ (i)))
while ((i >= 0) { continue;
while (i-- {
while ((i >= 0) && ((i--!= 1) ^ (currY < mIY))) {
 if (i--((goalType == GoalType.MAXIMIZE) ^ (currY < mIY))) {
 if (i++(currY < mIY))) {
 if (++) {
 if (((mIY))) {
 if (true((goalType == GoalType.MAXIMIZE) ^ (currY < mIY))) {
while ((i >= 0) && ((goalType  == 1))
while ((i++)
 if ((-(GoalType.MAXIMIZE) ^ (currY < mIY))) {
while ((i >= 0) && ((goalType == GoalType.MAXIMIZE) ^ (i++) {
while ((i >= 0) { continue }
while ((i >= 0) && ((goalType == GoalType.MAXIMIZE) ^ (currY <  mIX))
 if (())) {
while ((i >= 0) && ((goalType == GoalType.MAXIMIZE) ^ (currY < mIY)))) { }
 if (i<(goalType == GoalType.MAXIMIZE) ^ (currY < mIY))) {
while ((i >=  0) { }
 if ((mmIX^ (currY < mIY))) {
 while (true&&(currY < mIY))) {
while ((i >= 0) && ((goalType == GoalType.MAXIMIZE) ^ (currY < )))
 if (++)) {
 if ((I== GoalType.MAXIMIZE) ^ (currY < mIY))) {
 while (&& ((goalType == GoalType.MAXIMIZE) ^ (currY < mIY))) {
 if ((INMAXIMIZE) ^ (currY < mIY))) {
while ((i >= 0) && ((goalType == GoalType.MAXIMIZE) ^ (i!= j))) {
while ((i >= 0) && ((goalType == GoalType.MAXIMIZE) ^ (currY < mIY)))) { } }
 while (!0) && ((goalType == GoalType.MAXIMIZE) ^ (currY < mIY))) {
 if ()) {
while ((i >= 0) && ((goalType  == RIGHT))
 if(!(goalType == GoalType.MAXIMIZE) ^ (currY < mIY))) {
while ((i >= 0) && ((goalType == GoalType.MAXIMIZE) ^ (currY < mIY)) { if (false)
while ((i >= 0) && ((goalType == GoalType.MAXIMIZE) ^ (currY < mIY)) { if (true)
while ((i >= 0) && ((i <= 1) ^ (currY < mIY))) {
 while ((MAXIMIZE) ^ (currY < mIY))) {
while ((i >= 0) && ((goalType == GoalType.MAXIMIZE) ^ (currY < mIY))) { continue }
while ((i >= 0) && ((goalType == GoalType.MAXIMIZE) ^  i))
while ((i >= 0) && ((goalType == GoalType.MAXIMIZE) ^ (currY <  i))) {
 (Double.MAXIMIZE) ^ (currY < mIY))) {
while ((i >= 0) && ((goalType == GoalType.MAXIMIZE) ^ (currY < mIY)))  { if (!i)
 goalType.MAXIMIZE) ^ (currY < mIY))) {
while ((i >=  1)) {
 if ((i++) ^ (currY < mIY))) {
 } } if((i >= 0) && ((goalType == GoalType.MAXIMIZE) ^ (currY < mIY))) {
 (i>= 0) && ((goalType == GoalType.MAXIMIZE) ^ (currY < mIY))) {
 if ((j>= 0) && ((goalType == GoalType.MAXIMIZE) ^ (currY < mIY))) {
while ((i >= 0) && ((goalType == GoalType.MAXIMIZE) ^ (currY < mIY)))  { } else {
 if (false((goalType == GoalType.MAXIMIZE) ^ (currY < mIY))) {
while ((i >=  j) { }
while ((true))
 if ((-MAXIMIZE) ^ (currY < mIY))) {
 else { if((i >= 0) && ((goalType == GoalType.MAXIMIZE) ^ (currY < mIY))) {
while ((i >= 0) && ((goalType == GoalType.MAXIMIZE) ^ (currY < mIY)) { } else {
 } else if (!(goalType == GoalType.MAXIMIZE) ^ (currY < mIY))) {
 } else { while((i >= 0) && ((goalType == GoalType.MAXIMIZE) ^ (currY < mIY))) {
 while (() && ((goalType == GoalType.MAXIMIZE) ^ (currY < mIY))) {
while ((i >= 0) && ((goalType == GoalType.MAXIMIZE) ^ (currY < mIY)))) { if (!==
 if (!) {
 if (--(i >= 0) && ((goalType == GoalType.MAXIMIZE) ^ (currY < mIY))) {
while ((i >= 0) && ((goalType == GoalType.MAXIMIZE) ^ (currY < mIY))) { } } }
while ((i >= 0))) {
 for ((goalType== GoalType.MAXIMIZE) ^ (currY < mIY))) {
while ((i >=  j))
while ((i >= 0) && ((goalType == GoalType.MAXIMIZE) ^ (i")) {
while ((i >= 0) && ((goalType == GoalType.MAXIMIZE) ^ (currY < mIY)))) { if (!)
while ((i >= 0) && ((goalType == GoalType.MAXIMIZE) ^ (")) {
while ((i >= 0) && (--))
while ((i >= 0) && ((goalType == GoalType.MAXIMIZE) ^  j))) {
 if (^ (currY < mIY))) {
while ((i >= 0) && ((i++)
while ((i >= 0) && ((goalType == GoalType.MAXIMIZE) ^ (currY < mIY))) break; }
while ((i >= 0) && ((i++))
 while (!^ (currY < mIY))) {
 if (!&& ((goalType == GoalType.MAXIMIZE) ^ (currY < mIY))) {
while ((i >= 0) && (i++))
while ((i >= 0) && (true))
 if (-) {
while ((i >= 0) && ((goalType == GoalType.MAXIMIZE) ^ (currY < mIY))) { if (!==
while ((i >= 0) && (i--)))
while ((i >= 0) && ((goalType == GoalType.MAXIMIZE) ^ (currY < mIY))) { double
while ((i >= 0) && ((goalType == GoalType.MAXIMIZE) ^ (++) {
 while (() ^ (currY < mIY))) {
while ((i >= 0) && ((goalType == GoalType.MAXIMIZE) ^ (currY < mIY))) { continue;
 while (((i >= 0) && ((goalType == GoalType.MAXIMIZE) ^ (currY < mIY))) {
 } } } if((i >= 0) && ((goalType == GoalType.MAXIMIZE) ^ (currY < mIY))) {
while ((mIX) && ((goalType == GoalType.MAXIMIZE) ^ (currY < mIY))) {
while ((i >=  j)
while ((i >= 0)  { break;
 if (else{
 if (j--((i >= 0) && ((goalType == GoalType.MAXIMIZE) ^ (currY < mIY))) {
while ((i >= 0) && ((goalType == GoalType.MAXIMIZE) ^ (currY < mIY)) { if (i++)
 while (()) {
while ((i >= 0) && ((goalType == GoalType.MAXIMIZE) ^ (currY < mIY)))  { final double
while ((i >=  0) { double
while ((i >= 0) && ((goalType == GoalType.MAXIMIZE) ^ (currY )) { }
while ((i >= 0) && ((--))
while ((i >= 0) &&  i++)
while ((0))
while ((i >= 0) && ((goalType == GoalType.MAXIMIZE) ^ (currY < mIY)) { if (true))
 } else (!((goalType == GoalType.MAXIMIZE) ^ (currY < mIY))) {
while ((i >= 0) &&  --){
while ((i >= 0) && ((goalType == GoalType.MAXIMIZE) ^ (currY )))) {
 ((!== GoalType.MAXIMIZE) ^ (currY < mIY))) {
while ((i >= 0) && ((goalType == GoalType.MIN))
 } if((goalType == GoalType.MAXIMIZE) ^ (currY < mIY))) {
 } } if((goalType == GoalType.MAXIMIZE) ^ (currY < mIY))) {
while ((i >= 0) && ((goalType == GoalType.MAXIMIZE) ^ (currY < ")) {
 ((IX< mIY))) {
 while (++){
while ((true) && ((goalType == GoalType.MAXIMIZE) ^ (currY < mIY))) {
while ((i >= 0) && ((goalType == GoalType.MAXIMIZE) ^ ))) {
while ((i >= 0) && ((goalType == GoalType.MAXIMIZE) ^ )))) {
while ((i >= 0) && ((0))
while ((i >= 0) && ((goalType == GoalType.MAXIMIZE) ^ (currY < mIY)) { } } }
while (--)
while ((i >= 0) && ((goalType == GoalType.MAXIMIZE) ^ (currY < mIY)) { }
while ((i >= 0) && ((goalType == GoalType.MAXIMIZE)))) { }
while ((i >= 0) && ((goalType ))) {
while ((i >= 0) &&  --))
while ((i++) && ((goalType == GoalType.MAXIMIZE) ^ (currY < mIY))) {
 if (i >= 0) && ((goalType == GoalType.MAXIMIZE) ^ (currY < mIY))) {
 ((j>= 0) && ((goalType == GoalType.MAXIMIZE) ^ (currY < mIY))) {
 } }
while ((i >= 0) && ((goalType ==  OPEN)))
while ((i >= 0) && ((goalType == GoalType.MAXIMIZE) ^ (currY < mIY)))) { double
while ((i >=  1)
 while ((== GoalType.MAXIMIZE) ^ (currY < mIY))) {
while  loop {
while ((i >= 0) && ((i--) ^ (currY < mIY))) {
 (IX< mIY))) {
while ((i >= 0) && ((goalType == GoalType.MAXIMIZE) ^ (currY )) { double
while  ( {
while ((i >= 0) && ((goalType == GoalType")) {
while ((j--) && ((goalType == GoalType.MAXIMIZE) ^ (currY < mIY))) {
 (i== GoalType.MAXIMIZE) ^ (currY < mIY))) {
 else if((i >= 0) && ((goalType == GoalType.MAXIMIZE) ^ (currY < mIY))) {
while ((i >= 0) && ((goalType == GoalType.MAXIMIZE")) {
 if ((>= 0) && ((goalType == GoalType.MAXIMIZE) ^ (currY < mIY))) {
while ((i >= 0) && ((goalType == GoalType.MAXIMIZE) ^ (MIX))) {
 } } }
while  ()
 do { }
while  { }
 ((0) ^ (currY < mIY))) {
 ((i) ^ (currY < mIY))) {
while ((i >= 0) && ((goalType == GoalType)))) {
while ((i >= 0) && ((goalType == GoalType) {
 ((false) ^ (currY < mIY))) {
 else { while((i >= 0) && ((goalType == GoalType.MAXIMIZE) ^ (currY < mIY))) {
 if (!) && ((goalType == GoalType.MAXIMIZE) ^ (currY < mIY))) {
while ((i >= 0) && ((MIX) ^ (currY < mIY))) {
 while () && ((goalType == GoalType.MAXIMIZE) ^ (currY < mIY))) {
 ((Float.MAXIMIZE) ^ (currY < mIY))) {
while ((--) && ((goalType == GoalType.MAXIMIZE) ^ (currY < mIY))) {
while ((i >= 0) && ((miIX) ^ (currY < mIY))) {
while ((i >= 0) && ((goalType == GoalType.MAXIMIZE) ^ (mi++))) {
while ((i >= 0) && ((goalType )))) {
 } (() && ((goalType == GoalType.MAXIMIZE) ^ (currY < mIY))) {
 } while((i >= 0) && ((goalType == GoalType.MAXIMIZE) ^ (currY < mIY))) {
while ((i >= 0) && ((goalType == GoalType.MAXIMIZE) {
 while (currY < mIY))) {
while ((i >= 0) && ((goalType == GoalType.MAXIMIZE) ^ (currY < mIY)))
while  { {
 try { }
 if (currY < mIY))) {
while ((i >= 0) && ((goalType ")) {
while ((i >= 0) && ((ix) ^ (currY < mIY))) {
while ((false) && ((goalType == GoalType.MAXIMIZE) ^ (currY < mIY))) {
while ((i >= 0) && ((goalType == GoalType.MAXIMIZE) ^ (currY < mIY))))) {
while ((i >= 0) && ((goalType == GoalType.MAXIMIZE) ^ (currY ")) {
while ((i >= 0) && ((goalType == GoalType.MAXIMIZE) ^ (currY )))
 } } else
while ((i >= 0) && ((goalType == GoalType.MAXIMIZE) ^ (currY < mIY)))  break;
while ((i >= 0) && ((goalType!= GoalType.MAXIMIZE) ^ (currY < mIY))) {
 switch ((MAXIMIZE) ^ (currY < mIY))) {
 for ((MAXIMIZE) ^ (currY < mIY))) {
 } else
while ((i >= 0) && ((miX) ^ (currY < mIY))) {
while ((i >= 0) && ((goalType == GoalType.MAXIMIZE) ^ (currY < mIY)))  continue;
 for ((GoalType.MAXIMIZE) ^ (currY < mIY))) {
while ((++) && ((goalType == GoalType.MAXIMIZE) ^ (currY < mIY))) {
while ((i >= 0) || ((goalType == GoalType.MAXIMIZE) ^ (currY < mIY))) {
while ((i >= 0) && ((goalType == GoalType.MAXIMIZE) ^ (currY <= mIY))) {
 switch ((GoalType.MAXIMIZE) ^ (currY < mIY))) {
while ((i >= 0")) {
while ((i == 0) && ((goalType == GoalType.MAXIMIZE) ^ (currY < mIY))) {
while ((i >= 0) && ((goalType == GoalType.MAXIMIZE) ^ (currY >= mIY))) {
 { }
while ((i >= 0) & ((goalType == GoalType.MAXIMIZE) ^ (currY < mIY))) {
 }
while ((i >= 0) && ((IX) ^ (currY < mIY))) {
while ((i >= 0) && ((goalType == GoalType.MAXIMIZE) ^ (j))) {
while ((i >= 0) && ((I) ^ (currY < mIY))) {
 } finally{
while ((i >= 0) ^ ((goalType == GoalType.MAXIMIZE) ^ (currY < mIY))) {
while ((i >= 0) && ((xi) ^ (currY < mIY))) {
while ((i >= 0) && ((goalType == GoalType.MAXIMIZE) ^ (I))) {
while ((i >= 0) and ((goalType == GoalType.MAXIMIZE) ^ (currY < mIY))) {
while ((i >= 0) && ((goalType == GoalType.MAXIMIZE) ^ (currY == mIY))) {
while ((i >= 0) && ((goalType == GoalType.MAXIMIZE) ^ (ix))) {
while ((i >= 0) && ((goalType == GoalType.MAXIMIZE) ^ (jj))) {
while ((i < 0) && ((goalType == GoalType.MAXIMIZE) ^ (currY < mIY))) {
while ((i >= 0) && ((goalType == GoalType.MAXIMIZE) || (currY < mIY))) {
 {
while ((i >= 0) && ((goalType == GoalType.MAXIMIZE) && (currY < mIY))) {
while ((i >= 0) && ((goalType < GoalType.MAXIMIZE) ^ (currY < mIY))) {
while ((i >= 0) && ((goalType = GoalType.MAXIMIZE) ^ (currY < mIY))) {
while ((i >= 0) && ((goalType == GoalType.MAXIMIZE) | (currY < mIY))) {
while ((i >= 0) && ((goalType > GoalType.MAXIMIZE) ^ (currY < mIY))) {
while ((i >= 0) && ((goalType == GoalType.MAXIMIZE) * (currY < mIY))) {
