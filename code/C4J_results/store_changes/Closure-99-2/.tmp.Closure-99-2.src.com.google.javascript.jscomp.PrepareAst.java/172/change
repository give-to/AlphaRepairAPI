fnInfo = parent.getJSDocInfo();
fnInfo = parent.getParent().getJSDocInfo();
fnInfo = parent.getParent();
 parent.getJSDocInfo();
fnInfo  = parent ;
fnInfo  = parent.getParent().info();
fnInfo  = parent
fnInfo  = parent.getParent().getParent();
fnInfo  = parent.getParent().getNext();
fnInfo = parent.getParent().getJsDocInfo();
fnInfo  = parent.getParent().getInfo();
fnInfo  = parent.getParent().getNodeInfo();
fnInfo  = parent.getParent().info;
fnInfo = parent.getParent().getJSDocInfo(); }
fnInfo  = parent.getParent().getFunctionInfo();
fnInfo  = parent.getParentInfo();
fnInfo  = parent.getParent().getParentInfo();
 fnInfo.getJSDocInfo();
fnInfo = parent.getJSDocInfo(); fnInfo = parent.getParent();
, fnInfo = parent.getJSDocInfo();
fnInfo  = parent.getParent().getFirstChild();
 info = parent.getJSDocInfo();
fnInfo = parent.getJSDocInfo(); fnInfo = parent. getParent ( )
fnInfo = parent.getJSDocInfo(); fnInfo = parent. parent ;
fnInfo  = parent.info();
fnInfo = parent.getJSDocInfo(false); fnInfo = parent.getParent();
 if (parent.getType() == Token.CALL) { } else if (parent.getType() == Token.STRING)
fnInfo = parent.getJSDocInfo(); } break;
fnInfo = parent.getJSDocInfo(); if (fnInfo == null) {
... fnInfo = parent.getJSDocInfo();
 if (parent.getType() == Token.CALL) { if (parent.getType() == Token.FUNCTION) {
 if (parent.getType() == Token.CALL) { if (parent.getType() == Token.STRING)
fnInfo = parent.getJSDocInfo(); fnInfo = parent ; }
fnInfo = parent.getJSDocInfo(); fnInfo = parent. getParentInfo();
 if (parent.getType() == Token.CALL) { if (parent.getType() == Token.STRING) {
 if (parent.getType() == Token.CALL) { if (parent.getType() == Token.NAME)
fnInfo = parent.getParent().getJsdocInfo();
 if (parent.getType() == Token.CALL) { if (parent.getType() == Token.FUNCTION)
 = parent.getJSDocInfo();
 if (parent.getType() == Token.FUNCTION) { } else if (parent.getType() == Token.NAME)
 if (parent.getType() == Token.CALL) { } else if (parent.getType() == Token.CALL)
fnInfo = parent.getJSDocInfo(true); fnInfo = parent.getParent();
fnInfo = parent.getJSDocInfo(); fnInfo = nInfo ;
fnInfo  = parent.getParent().getNode();
 if (parent.getType() == Token.FUNCTION) { if (parent.getType() == Token.STRING)
, if (parent.getType() == Token.CALL) { if (parent.getType() == Token.STRING)
 if (parent.getType() == Token.FUNCTION) { if (parent.getType() == Token.NAME)
 if (parent.getType() == Token.FUNCTION) { if (parent.getType() == Token.CALL)
 if (parent.getType() == Token.FUNCTION) { if (parent.getType() == Token.STRING) {
fnInfo = parent.getNext().getJSDocInfo();
, if (parent.getType() == Token.CALL) { if (parent.getType() == Token.NAME)
fnInfo = parent.getNode().getJSDocInfo();
fnInfo  = parent.getParentNode();
 if (parent.getType() == Token.CALL) { if (parent.getType() == Token.CALL)
. fnInfo = parent.getJSDocInfo();
fnInfo  = parent.getParent().get();
fnInfo  = parent.getParent(); break;
 the function fnInfo = parent.getJSDocInfo();
fnInfo  = parent.parent;
fnInfo  = parent.parent();
fnInfo = parent.getJSDocInfo(); if (fnInfo == null) { }
 function() {... };
 var fnInfo= parent.getJSDocInfo();
fnInfo = parent.getJSDocInfo(); fnInfo = parent. info ;
 parent = parent.getJSDocInfo();
fnInfo = parent.getJSDocInfo(false);
 let parent = parent.getParent(); info=parent.getJSDocInfo();
 if (parent.getType() == Token.CALL) { if (fnInfo == null) {
fnInfo = parent.getJSDocInfo(). getJSDocInfo ( ) ;
fnInfo = parent.getJSDocInfo(); fnInfo = parent ; break ;
fnInfo  = parent.getJSDocInfo(); }
fnInfo = parent.getJSDocInfo(); n = parent ; break ;
 = function();
 if (parent.getType() == Token.CALL) { if (parent.getType() == Token.NAME
 var NAME = parent.getString();
 if (parent.getType() == Token.FUNCTION) { } else if (parent.getType() == Token)
 if (parent.getType() == Token.FUNCTION) { if (fnInfo == null) {
 if (parent.getType() == Token.CALL) { if (parent.getType() == Token.USE)
 if (parent.getType() == Token.FUNCTION) { if (parent.getType() == Function) {
 let fnInfo = parent.getParent();
 if (parent.getType() == Token.CALL) { if (parent.getType() == Token.STR)
 if (parent.getType() == Token.CALL) { if (parent.getType() == Function) {
fnInfo = parent.getJSDocInfo(false); fnInfo = parent. parent ;
 if (parent.getType() == Token.CALL) { if (parent.getType() == Token.VALUE)
, fnInfo = parent;
fnInfo = parent.getParent().getJsSDocInfo();
 if (parent.getType() == Token.CALL) { if (fnInfo == null)
 if (parent.getType() == Token.CALL) { if (parent.getType() == "call")
fnInfo = parent.getJSDocInfo(false); fnInfo = parent. info ;
fnInfo = parent.getJSDocInfo(); fnInfo = parent. node ;
 if (parent.getType() == Token.FUNCTION) { } else if (parent!= null)
 if (parent.getType() == Token.FUNCTION) { } else if (parent!= null) {
 if (parent.getType() == Token.FUNCTION) { if (fnInfo == null)
fnInfo = parent.getJSDocInfo(); fnInfo = n.getParent();
 if (parent.getType() == Token.CALL) { if (parent.getType() == "function")
fnInfo = parent.getJSDocInfo(); n = parent ; }
 if (parent.getType() == Token.CALL) { if (parent.getType() == Function)
 if (parent.getType() == Token.CALL) { if (parent.getParent() == null)
 if (parent.getType() == Token.CALL) { if (parent.getType() == Token)
fnInfo = parent.getJSDocInfo(); } } break ;
fnInfo = parent.getJSDocInfo(this).getJSDocInfo(this);
 if (parent.getType() == Token.CALL) { if (parent.getParent()!= null)
fnInfo = parent.getJSDocInfo(this).getJSDocInfo(false);
 if (parent.getType() == Token.FUNCTION) { function() {... };
fnInfo  = parent ; }
fnInfo = parent.getJSDocInfo(true); fnInfo = parent. parent ;
fnInfo = parent.getParent().getNodeInfo(); }
 if (parent.getType() == Token.FUNCTION) { if (parent.getType() == Function)
 if (parent.getType() == Token.CALL) { if (fnInfo == null) { }
 the function name fnInfo = parent.getJSDocInfo();
 if (parent.getType() == Token.CALL) { if (fnInfo == null) return;
fnInfo = parent.getJSDocInfo().getJSDocInfo(); } break;
fnInfo = parent.getJSDocInfo(); fnInfo = null;
 if (parent.getType() == Token.CALL) { if (fnInfo == null) break;
 if (parent.getType() == Token.CALL) { if (parent!= null) {
fnInfo = parent.getParent().getJSDocInfo();...
fnInfo = parent.getJSDocInfo(false); fnInfo = parent ; break ;
fnInfo = parent.getJSDocInfo(false); fnInfo = parent ; }
fnInfo = parent.getJSDocInfo(). getFirst ( ) ;
 if (parent.getType() == Token.FUNCTION) { if (parent!= null)
 parent = n.getJSDocInfo();
 the fnInfo = parent.getJSDocInfo();
: fnInfo=parent.getJSDocInfo();
 if (parent.getType() == Token.CONSTANT_NAME)
fnInfo = parent.getJSDocInfo() ; fnInfo = n. getParent ( )
, if (parent.getType() == Token.NAME)
 this.fnInfo = parent.getJSDocInfo();
, function names fnInfo = parent.getJSDocInfo();
fnInfo  = parent.getParent() ; }
 fnInfo = n.getJSDocInfo();
 name = parent.getJSDocInfo();
fnInfo = parent.getJSDocInfo(); fnInfo = null ; }
fnInfo = parent.getJSDocInfo(); fnInfo = parent. parentInfo ;
 if (parent.getType() == Token.FUNCTION) { var
fnInfo = parent.getParent().getFirstChild(); }
fnInfo = parent.getParent().getJSDocInfo());
fnInfo  = Node. ASSIGN ;
 if (parent.getType() == Token.CALL) { if (parent instanceof Call)
, the doc is attached to the value. fnInfo = parent ; }
fnInfo  = node.getParent();
, var names fnInfo = parent.getJSDocInfo();
fnInfo = parent.getJSDocInfo().getFirstChild();
fnInfo = parent.getJSDocInfo(); return fnInfo ;
fnInfo = parent.getJSDocInfo(true); fnInfo = parent ; }
fnInfo = parent.getJSDocInfo(false); fnInfo = nInfo ;
fnInfo = parent.getJSDocInfo(true); fnInfo = nInfo ;
fnInfo  = parent.info;
, function() {... };
 if (parent.getType() == Token.FUNCTION) { }
fnInfo = parent.getJSDocInfo(); fnInfo = parent ;
 fnInfo = parentNode.getJSDocInfo();
 if (parent.getType() == Token.FUNCTION) { return; }
fnInfo  = parent.getNext();
 if (parent.getType() == Token.FUNCTION) { } else {
 if (parent.getType() == Token.CALL) { if (parent!= null) break;
 if (parent.getType() == Token.CALL) { if (parent!= null) { }
fnInfo = parent.getJSDocInfo(); break;
 this JSDocInfo=parent.getJSDocInfo();
 the function name. fnInfo = parent.getJSDocInfo();
 if (parent.getType() == Token.FUNCTION) { } else if (parent) {
fnInfo  = parent.getNode();
fnInfo = parent.getJSDocInfo().getJSDocInfo(false);
 if (parent.getType() == Token.CALL) { if (parent instanceof Name)
 if (parent.getType() == Token.FUNCTION) { function() { };
 n.getJSDocInfo();
 parent fnInfo.getJSDocInfo();
fnInfo = parent.getJSDocInfo() ; n = parent. getParent ( )
, if (parent.getType() == Token.FUNCTION) { } }
, var fnInfo = parent.getJSDocInfo();
 fnInfo = otherNode.getJSDocInfo();
 if (parent.getType() == Token.CALL) { return; }
fnInfo = parent.getJSDocInfo(false); fnInfo = parent ;
 if (parent.getType() == Token.CALL) { } else {
 let parent = parent.getParent(); parent=parent.getJSDocInfo();
fnInfo =  parent.getParent().getFunctionInfo(); }
fnInfo = parent.getJSDocInfo() ; } else { break ; }
fnInfo = parent.getParent().getJSDocInfo()); }
fnInfo = parent.getJSDocInfo(NODE_ASSIGN);
fnInfo = parent.getJSDocInfo( ). getNext ( ) ;
, function fnInfo = parent.getJSDocInfo();
, if (parent.getType() == Token.USE)
 if (parent.getType() == Token.FUNCTION) { if (function() {
fnInfo = parent.getJSDocInfo(assigns);
 NAME = function();
 if (parent.getType() == Token.FUNCTION) { function() {... }
 if (parent.getType() == Token.FUNCTION) { return ; } else {
 if (parent.getType() == Token.FUNCTION) { let
 var NAME = parent.parent().getJSDocInfo();
 name = function();
, the doc is attached to the function name. fnInfo = parent ;
 if (parent.getType() == Token.CALL) { } else { } }
fnInfo = parent.getNode().getJSDocInfo(); }
 if (parent.getType() == Token.CONSTANT_NAME) { }
 if (parent.getType() == Token.FUNCTION) { function() { }
 if (parent.getType() == Token.FUNCTION) { } else { } }
, function callers fnInfo = parent.getJSDocInfo();
, if (parent.getType() == Token.STR)
 let parent = parent.getParent(); fn=parent.getJSDocInfo();
fnInfo = parent.getJSDocInfo(NODE_NAME);
 if (parent.getType() == Token.FUNCTION) { } }
 if (parent.getType() == Token.FUNCTION) { function() {} }
 parent = n;
fnInfo = parent.getJSDocInfo(); return ; }
, the function info = parent.getJSDocInfo();
fnInfo = parent.getJSDocInfo() ; } break ; }
 let fnInfo = parent;
 if (parent.getType() == Token.FUNCTION) { return }
 functionInfo = parent.getJSDocInfo();
 fn = parent.getJSDocInfo();
fnInfo = parent.getJSDocInfo(false); fnInfo = null;
 let fnInfo = n.getParent();
fnInfo = parent.getJSDocInfo(null);
, if (parent.getType() == Token.FUN)
fnInfo = parent.getJSDocInfo(this).getJSDocInfo(); } }
, if (parent.getType() == Token.VALUE)
, function() {... }; function() {... };
(NAME);
 if (parent.getType() == Token.CONSTANT) { }
, let fnInfo=parent.getJSDocInfo();
, use the function name fnInfo = parent.getJSDocInfo();
fnInfo = parent.getJSDocInfo().getJSDocInfo(); }
, the fnInfo = parent.getJSDocInfo();
, function(...) {... }; fnInfo.getJSDocInfo();
, the function name fnInfo = parent.getJSDocInfo();
, function() {... }; if (parent!= null)
fnInfo = parent.getJSDocInfo(). getJSDocInfo ( )
, fnInfo = null;
, function name info = parent.getJSDocInfo();
fnInfo = parent.getJSDocInfo(); } } }
fnInfo = parent.getJSDocInfo(); } else { } }
fnInfo = parent.getJSDocInfo() ; break ; }
, var names = parent.getChildren();
 in function names fnInfo = parent.getJSDocInfo();
, the function fnInfo = parent.getJSDocInfo();
 the function name. fnInfo = parent;
 the function name name = parent.getString();
, var_args = parent.getNext();
fnInfo = parent.getJSDocInfo().getJSDocInfo(); } }
fnInfo = parent.getJSDocInfo( 'assign' );
fnInfo = parent.getJSDocInfo( "assign" );
, the doc is attached to the value. fnInfo = nodeInfo ;
, function(...) {... }; fnInfo=getJSDocInfo();
 let fnInfo = parent.getInfo();
, the doc is attached to the value. fnInfo = nInfo ;
 function() {... }; } else {
 fnInfo=getJSDocInfo();
, function() {... }; var NAME = function() {
 the function name. fnInfo = parent.next();
, use the function fnInfo = parent.getJSDocInfo();
, function(... }; fnInfo = parent.getJSDocInfo();
, use function name fnInfo = parent.getJSDocInfo();
, use the function name. fnInfo = parent.getJSDocInfo();
, the info on other nodes. fnInfo= parent.getJSDocInfo();
 return false;
, the function name is fnInfo.getJSDocInfo();
 let fnInfo = parent.getNode();
 parent.addAssign();
, var_args = parent.getChildren();
 the function name. fnInfo = parent.info();
 let parent = parent.getParent(); returnparent.getJSDocInfo();
, function literals fnInfo= parent.getJSDocInfo();
 var NAME = parent.getName();
, the name of the function is used.
 the function name. fnInfo = new Name();
fnInfo = parent.getJSDocInfo(NODE_REF);
 the info fnInfo= parent.getJSDocInfo();
 node.fnInfo= parent.getJSDocInfo();
 let fnInfo = null;
, function() {... }; } else {
 the function fnInfo = function();
, var_args = parent.getVarArgs();
fnInfo = parent.getJSDocInfo(assign);
 the function name. fnInfo = parent.parent();
, var_args = parent.getArguments();
(parent);
, the name of the function will be "function() {... };
fnInfo  = parentNode;
 the function fnInfo = n.getJSDocInfo();
, function() {... }; var NAME = function() {}
, use the info fnInfo= parent.getJSDocInfo();
, the function name is optional fnInfo = parent.getJSDocInfo();
, the function is named fnInfo = parent.getJSDocInfo();
 the function name = NAME;
, var names. fnInfo=parent.getJSDocInfo();
, make sure it's a function if (fnInfo == null)
 fnInfo = child.getJSDocInfo();
 fnInfo = node.getJSDocInfo();
 the function name. fnInfo = new Node();
 info = n.getJSDocInfo();
, use the original function name fnInfo = parent.getJSDocInfo();
 let fnInfo = nInfo;
, var names are optional fnInfo=parent.getJSDocInfo();
, we don't need to look for the info on any other nodes.
fnInfo  = parent. }
fnInfo = parent.getInfo();
 this node is not a function fnInfo = parent;
, function() {... }; var NAME = function();
, function(...) {... } = parent.getJSDocInfo();
, use the function name. fnInfo.getJSDocInfo();
, function() {... }...
, function() { var NAME =... };
, this is a function literal. fnInfo= parent.getJSDocInfo();
 n.setFirstChild();
, the function name is fnInfo=parent.getJSDocInfo();
 parent.popAssign();
, use the function name. fn = parent.getJSDocInfo();
, the name of the function will be used.
, the name of the function is the same as the function name.
fnInfo  = nodeInfo;
, the info on this node. fnInfo= parent.getJSDocInfo();
, function() {... }; var NAME = null;
, the function name is named fnInfo.getJSDocInfo();
, use the original function. fnInfo = parent.getJSDocInfo();
, function() {... }; var NAME = name;
, the info on this node is undefined fnInfo= parent.getJSDocInfo();
, the name of the function is the function name.
fnInfo = parent.getJSDocInfo(assignName);
, function() {... }; var NAME =
, the name of the function is the function name
, the name of the function is the name of the function.
, function() {... }... }
, var_args = function() {... });
 function(NAME);
, function() {... } = function()
, make sure it's a function if (parent!= null) {
fnInfo  = null
 the function name. fnInfo = parse(parent);
 function() {... }; } else
 name = NAME;
, function() {... }; var NAME = 1;
 function() {... }... }
fnInfo = parent.getJSDocInfo(NODE);
, the name of the function is undefined.
, the info on other nodes fnInfo= parent.getJSDocInfo();
fnInfo = parent.getJSDocInfo(argName);
, the info on this node fnInfo= parent.getJSDocInfo();
, function() {... };... };
 return true;
, make sure it's a function. if (parent!= null)
, function() {... } };
fnInfo = parent.getJSDocInfo(); } }
 let fnInfo = parentNode;
 var NAME = name;
, function() {... }... };
 the function name. fnInfo = n.getJSDocInfo();
fnInfo  = null;
, the name of the function is the name of the variable.
, the name of the function is ignored.
, var names, fnInfo=parent.getJSDocInfo();
 function() {
 function() {... }... };
, function() {... }; function() {... }...
 var NAME = function;
 parent.setAssign();
, function() {... }; for(...)
, the name of the function will be the function name
, function() {... } for(...)
, the name of the function will be the same as the function name
 fnInfo = function();
 var NAME = function() {}();
, the function name is named fnInfo=parent.getJSDocInfo();
 NAME = function;
, the function name will be the name of the function.
 parent.pushNode();
, the name of the function will be used as the name.
, var_args = function() {... args);
, the name of the function is (NAME);
, var NAME = new Name();
, the name of the function will be "function() {...}"
, the name of the function is optional.
fnInfo = parent.getJSDocInfo().getFirst (...) ;
, the info on this node is fnInfo= parent.getJSDocInfo();
 the function name parent.assign();
, the name of the function is the name.
, the name of the function is used;
, the name of the function should be used.
, the name of the function is (name);
, function() {... }; for(...);
, the info on other nodes are optional fnInfo= parent.getJSDocInfo();
 var NAME = parent.getValue();
, the info on this node is null fnInfo= parent.getJSDocInfo();
 var NAME = parent.getText();
, the info on the function fnInfo= parent.getJSDocInfo();
 this node will be named (name);
, the info on other nodes is undefined fnInfo= parent.getJSDocInfo();
, the name of the function is named NAME.
, the function name is named NAME;
, the name of the function is undefined;
 this.addAssign(parent);
 function() { };
, the info on other nodes is null fnInfo= parent.getJSDocInfo();
, function() {... }; if (optional)
fnInfo = parent.getJSDocInfo().getFirstChild(); }
 function() {... }...
, make sure it's a function if (fnInfo!= null)
 let fnInfo = parent ; }
, the name of the function is in the function.
, the name of the function is NAME;
 var NAME = null;
, the info on assignment fnInfo= parent.getJSDocInfo();
fnInfo = parent.getJSDocInfo(); continue;
, function() {... };... }
 the function name. fnInfo = function(NAME);
 this node will be named (NAME);
 name = function;
, the name of the function is name;
 parent.addChildren();
, use the original function fnInfo= parent.getJSDocInfo();
, use the original info fnInfo= parent.getJSDocInfo();
, the name of the function is used. break;
, the function name is named (name);
 this node is not a function fnInfo = null;
 the function name. fnInfo = function(...);
 the function name. parent = n;
 parent.popNode();
, the name of the function is used
 of the same name.
 parent.addAssignment();
, the name of the function should be the function name
, function declarations fnInfo= parent.getJSDocInfo();
 name = name;
, the name of the function will be named NAME;
 function() {... } }
 this.addNode(parent);
 the function name. } break;
, the info on other nodes info= parent.getJSDocInfo();
 this node is named function. fnInfo= parent.getJSDocInfo();
 let fnInfo = parent. }
 func(NAME);
, the function name is the name.
 this.addAssign(n);
, the function name is the function info = parent.getJSDocInfo();
, the function name will be used as the function name.
 function(...);
, this is the default. fnInfo= parent.getJSDocInfo();
, function() {... }; var NAME;
, the name of the function is (...);
, the name of the function is in the function name
 of the same name
, the info on this node info= parent.getJSDocInfo();
, the name of the function is optional
, the function name is the name of the assignment function.
fnInfo = parent.getJSDocInfo(false); } break; }
 this node is named (name);
 function() {... }; else
(N);
 the function name fnInfo = n.getJSDocInfo();
 function() {...);
 fnInfo = assignment();
, the function name will be named (name);
, the name of the function is ignored
 function(name);
, the name of the function is the function
fnInfo = parent.getJSDocInfo(assignStatement);
 the function function name = NAME;
 the function name. return false;
, make sure it's a function if (parent instanceof Name)
fnInfo = parent.getJSDocInfo(true);
, the function name is named (NAME);
, the name of the function is undefined
 NAME = func();
, we don't need to look for the info on other nodes. }
, we don't need to look for the info on any other nodes...
 return null;
 the function function name return null;
 node.push(parent);
 this.addFunction(n);
 this node is not a function. } break;
, the name of the function is the function name;
, we don't need to look for the info on other nodes. else
, the name of function is NAME;
, we don't need to look for the info on any other nodes,
 this node is assigned to(fnInfo);
 the function fnInfo = Function();
 function()(...);
, the function name is undefined;
, the function name will be function(...);
, var NAME = new Var();
, the name of the function is the name of the function name
fnInfo = parent.getJSDocInfo(null); } break; }
 this.addNode(n);
 this node is named (NAME);
, function(...);
 node.init(parent);
, the name of the function is the name of the function function
 this node is not in the function. break;
, the name of function is name;
(n);
 node.set(parent);
fnInfo = parent.getJSDocInfo(NAME);
, the function name of the assignment is used;
 name = name();
 this node is assigned to (var NAME);
, the function name of the assignment is NAME;
 this node will be named "function(");
: parent.getJSDocInfo();
 name = func();
fnInfo = parent.getJSDocInfo() } break;
 of the same name,
, the function name will be used;
 this node is not a function. return false;
 init(parent);
 function parent.getJSDocInfo();
, the function name will be the name of the function name
fnInfo = parent.getJSDocInfo() + 1;
 node.push(n);
 use func(NAME);
 use function(...);
 return n;
, the function name will be the name of the function function
... };
fnInfo = parent.node();
...
Info=parent.getJSDocInfo();
 function() {}
fnInfo  = [];
 node.init(null);
 = function()
fnInfo = parent.getFunction();
.
 return parent;
fnInfo  = node;
 of the same type
 = functions();
fnInfo = parent.getJSDocInfo(null); } }
 (...)
 function name.
. parent.getJSDocInfo();
fnInfo = parent.getJSDocInfo(false); }
fnInfo = parent.getJSDocInfo(NODE); }
fnInfo = parent.getJSDocInfo(...) ;
 function.
,
 this node
 = array();
 = Function();
fnInfo  = Parent
 name.
 = func();
fnInfo = parent.getJSDocInfo(this); }
 function()
 funcInfo=parent.getJSDocInfo();
fnInfo = parent. ;
 child.getJSDocInfo();
:
 this.getJSDocInfo();
fnInfo = parent.getJSDocInfo();...
fnInfo = parent.getJSDocInfo() } }
 node.getJSDocInfo();
 fInfo= parent.getJSDocInfo();
 var info= parent.getJSDocInfo();
fnInfo = parent.getJSDocInfo() } else
fnInfo: parent.getJSDocInfo();
fnInfo is parent.getJSDocInfo();
fnInfo += parent.getJSDocInfo();
