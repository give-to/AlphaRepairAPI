traverseBranch(fnName, n);
traverseBranch(fnName, curNode);
traverseBranch(n);
 traverseBranch(fnName, n;
traverseBranch(fnName, n, parent);
traverseBranch(fnName, n, curNode);
 pushScope(n);
 traverseBranch(functionExpression, n);
traverseBranch(fnName, n
 traverseBranch(fnName, n); return;
 traverseBranch(fnName);
 traverseFunctionExpression(n);
 traverseBranch(n, n);
 traverseBranch(n, n;
 return n;
 traverseBranch(fnName, n);;
 traverseBranch(n, curNode);
 traverseBranch, n;
 traverse(fnName, n);
 traverseBranch(fnName, n); n = parent;
 traverseFunction(fnName, n);
 traverseBranch(functionExpressionName, n);
 traverseBranch(functionName, n, parent);
 traverseBranch(fnName, parent,n);
 traverseBranch(parent,fnName, n);
 push(n);
 traverseBranch(fnName, pushScope(n);
 traverseBranch(functionName, n); return;
 traverseFunctionExpression(fnName, n);
 traverseBranch(FunctionExpression,n);
 traverseBranch(FunctionExpression.fnName, n);
 parent = n;
 traverseFunctionExpression(n;
 traverseBranch(functionName, n);;
 traverseBranch(function,n);
 traverseBranch, n);
 traverseFunctionExpression, n;
 traverseBranch(fnName.getNext(),n);
 traverseBranch(fnName.getNext, n);
 pushScope(n;
 traverseBranch(fnName, n); } break;
traverseBranch(fnName, n); pushScope(n);
 traverseBranch(functionExpression,fnName, n);
 traverseBranch(n, parent);
 traverseBranch(n, n); return;
 traverseBranch(functionName.getNext(), n);
 traverseFunctionName(n);
 traverseBranch(functionName.getNext, n);
 traverseBranch(fnName, n); break;
 traverseBranch(n, n, parent);
 traverseBranch(fnName, n, parent;
 traverseBranch(functionName, parent,n);
 traverseBranch(functionName, pushScope(n);
 traverseBranch(, n);
 traverseFunction(parent, n);
 traverseBranch(functionName, n);
 traverseBranch(fnName, n); popScope();
 traverseBranch(fnName, n); n = curNode;
traverseBranch(fnName, n, parent, false);
 traverseBranch(n;
 traverseBranch(fn, n);
traverseBranch(functionName, n, curNode);
 traverseBranch(FunctionExpression.NAME, n);
traverseBranch(fnName, n, parent, true);
 traverseBranch(fnName, n); return n;
 traverseBranch(functionName, n); n = parent;
 traverseBranch(args, n;
 traverseBranch(functionExpressionName,fnName, n);
 traverseBranch(fnName, n,n);
 traverseBranch(fnName, n); parent = n;
 traverseBranch(fnName, curNode,n);
 traverseBranch(functionName, curNode, n);
 traverseBranch(args, n); return;
 traverseBranch(n); traverseBranch(fnName, n);
 traverseBranch(parent, n);
 traverseBranch(n, n); n = parent;
 traverseBranch(n, parent;
 traverseFunction(n, parent);
 traverseBranch(args, n);
traverseBranch(fnName, n, parent, n);
 traverseBranch(fn, n;
 traverseBranch(fnName.next(),n);
traverseBranch(fnName, n); popScope(n);
 traverseBranch(n, n); return n;
 traverseBranch(fnName, n); return curNode;
 traverseBranch(n, parent, n);
traverseBranch(fnName, n.getNext());
traverseBranch(fnName, n, parent).pushScope(n);
traverseBranch(fnName, n, parent.getNext());
 traverseBranch(FunctionExpressionName, n);
 traverseBranch(functionName, n,n);
 traverseBranch(fnExpression,n);
 traverseBranch(fnName.next, n);
 traverseBranchExpression(fnName, n);
 traverseBranch(fnName, parent, n, n);
 traverseFunction(fnName);
 traverseBranch(parent.fnName, n);
 traverse(parent, n);
 traverseFunctionExpression(), n;
 traverseBranch(FunctionExpressionName.fnName, n);
 traverseFunction(n, parent;
 traverseBranch(', n);
 traverseBranch(functionName, n;
 traverseBranch(expression,n);
 traverseBranch(ns, n;
 traverseBranch(functionExpression(fnName, n);
 traverseBranch(functionName, parent, n, n);
traverseBranch(fnName, n, parent, callback);
 traverseBranch(funcName, n, parent);
 traverseBranch(functionExpressionNameNode, n);
 traverseBranch(fnName.getFirstChild, n);
 traverseBranch(ns, n);
traverseBranch(fnName, n, parent, curNode);
 traverseBranch(expr,n);
 traverseFunctionExpression(n); traverseBranch(fnName, n);
 pushScope, n);
 traverseBranch(functionExpression.fnName, n);
 traverseBranch(functionExpressionName.fnName, n);
 traverseBranch(fnName, n, false);
 traverseFunctionExpressionBranch(fnName, n);
 traverseBranch(functionScope,fnName, n);
 traverseBranch(FunctionExpression(n);
 if (parent == null) {
traverseBranch(FunctionExpression.NAME, fnName, n);
 popScope(n);
 traverseBranch(this.fnName, n);
 if (!isFunctionExpression) {
 traverseBranch(null,fnName, n);
 traverseBranch(functionExpressionNames,fnName, n);
 traverseBranch(funcExpression,n);
 if (fnName!= null) {
traverseBranch(fnName, n); n = parent; break;
 if (!isFunctionExpression)
 if (parent!= null) {
 traverseBranch(fnName, n); n = curNode();
 if (isFunctionExpression) { final Node fnName = n.getFirstChild(0);
 if (isFunctionExpression) { final Node fnName = n.getFirstChild(n);
traverseBranch(fnName, n, curNode, parent);
 traverseFunctionExpression(n); pushScope(fnName, n);
 traverseBranch(), n;
 traverseBranch(functionName.getNext().fnName, n);
 popScope(n;
 traverseBranch(n, n);;
 traverseBranch(Expression.fnName, n);
 traverseBranch(FunctionExpression::fnName, n);
 traverseFunction(n, n;
traverseBranch(fnName, n) return;
 if (isFunctionExpression) { final Node fnName = n.getFirstChild(1);
 if (isFunctionExpression) { final Node fnName = n.getNextChild(n);
 traverseBranch(fnName); traverseBranch(fnName, n);
 traverseFunctionName, n;
 if (isFunctionExpression) {
 traverseBranch(functionExpressions, n);
 traverseBranch(functionExpressionName(fnName, n);
traverseBranch(fnName, n); n = parent; } break;
traverseBranch(functionExpressionNodes, fnName, n);
 if (!isFunctionExpression) { return ; } if ( isFunctionExpression ) { if ( isFunctionExpression ) {
 traverseBranch(funcName, n;
 traverseFunction(n, n);
traverseBranch(curNode, fnName, n);
 traverseBranch(FunctionExpression.NAME_fnName, n);
traverseBranch(fnName, n); parent = n; break;
 traverseBranchExpr(fnName, n);
 traverseBranch(fnName, n); n = parent ; }
traverseBranch(fnName, n, parent, curNode, n);
 traverseBranch(fnName); pushScope(fnName, n);
 if (parent!= null)
 traverse(n);
traverseBranch(n, n.getNext());
traverseBranch(fnName, n, parent); pushScope(n);
 traverseFunctionExpressionName(fnName, n);
 if (!isFunctionExpression) { return ; } if ( isFunctionExpression ) { return ; } if ( isFunctionExpression)
 traverseFunction(n);
 TraverseFunction(n, parent); pushScope(fnName, n);
traverseBranch(fnName, n); n = parent.getNext();
 if (!isFunctionExpression) { return ; } if ( isFunctionExpression ) { final Node fnName = fnName ;
 if (parent == null)
 if (!isFunctionExpression) { return ; } if ( isFunctionExpression ) { if (! isFunctionExpression ) { return
 traverseBranch(functionExpressionNameScope,fnName, n);
 traverseBranch(function,fnName, n);
 if (!isFunctionExpression) { return ; } if ( isFunctionExpression ) { if (!isFunctionExpression) {
traverseBranch(fnName, n); } else { n = parent;
 If (isFunctionExpression) { if (parent == null) return;
 if (!isFunctionExpression) { return ; } if ( isFunctionExpression ) { if ( isFunctionExpression ) { return
 if (isFunctionExpression) { if (parent!= null) {
 traverseBlockExpression(fnName, n);
 if (parent == null) { return
 if (isFunctionExpression) { if (parent == null) {
 n = parent;
 if (!isFunctionExpression) { return ; } if ( isFunctionExpression ) { final Node fnName = parent ;
 if (isFunctionExpression) { if (parent == null) { return ; }
 if (!isFunctionExpression) { return ; } if ( isFunctionExpression ) { if (!isFunctionExpression)
 if (isFunctionExpression) { if (parent == null) return;
traverseBranch(FunctionExpression. class, fnName, n);
 traverseBranch(functionName,fnName, n);
 if (isFunctionExpression) { if (parent == null) { return null; }
 if (!isFunctionExpression) { return ; } if ( isFunctionExpression ) { if ( isFunctionExpression )
 if (parent == null) { parent =
 if (!isFunctionExpression) { return ; } if ( isFunctionExpression ) { if ( isFunctionExpression ) { return;
 pushScope(fnName, n);
 if (parent!= null) { parent.
 if ( isFunctionExpression ) { if ( isFunctionExpression ) { return
 If (isFunctionExpression) { if (parent == null) {
 If (isFunctionExpression) { if (parent!= null) {
 traverseBranch(FunctionScope.fnName, n);
 TraverseBranch(fnName, n);
 traverseBranch(functionName); pushScope(fnName, n);
 if (!isFunctionExpression) return;
 if (isFunctionExpression) { if (parent!= null) { parent.
 if (isFunctionExpression) { if (parent!= null) { parent = n; }
 traverseBranch(funcName, n);
traverseBranch(functionExpressionNamesScope, fnName, n);
traverseBranch n;
traverseBranch(fnName, n); } else { n = parent ; break;
 if (parent == null) { parent = n ; } else {
 If (isFunctionExpression) { if (!isFunctionExpression)
 if ( isFunctionExpression ) { if ( isFunctionExpression ) { if ( isFunctionExpression ) {
 traverseBranch(funName,n);
 if (isFunctionExpression) { if (parent == null) { return n; }
 if (!isFunctionExpression) { return ; } if ( isFunctionExpression ) { if (parent == null)
 If (isFunctionExpression) { return ; } if ( isFunctionExpression ) { if ( isFunctionExpression ) { return
 if (isFunctionExpression)
traverseBranch(fnName,  n); } else { n = parent ; }
traverseBranch(fnName, n); functionScope(n, parent);
 if (!isFunctionExpression) { return ; } if ( isFunctionExpression ) { if (parent!= null)
 if (isFunctionExpression) { return ; } if ( isFunctionExpression ) { if ( isFunctionExpression ) { return
 if (!isFunctionExpression) { return ; } if ( isFunctionExpression ) { if ( parent == null ) {
 if (isFunctionExpression) { if (parent!= null) { parent = n;
 n = curNode;
 if (isFunctionExpression) { if (parent == null) { return null; } } else {
 if ( isFunctionExpression ) { if ( isFunctionExpression ) { if ( isFunctionExpression )
 TraverseBranch(n);
 TraverseFunctionExpressionBranch(fnName, n);
 if (isFunctionExpression) { if (parent == null) { return
 return traverseBranch(n);
 while (n!= null) {
traverseBranch(fnName, n, parent, false, true);
 if (!isFunctionExpression) { return ; } if ( isFunctionExpression ) { final Function fnName =
 traverseFunctionName(n;
traverseBranch(fnName, n, parent.getNext(...));
 traverseBranch(nName,n);
 if (isFunctionExpression) { if (parent!= null)
traverseBranch(functionExpressionScope, fnName, n);
traverseBranch(functionExpressionNamesInScope, fnName, n);
 if (isFunctionExpression) { if (isFunctionExpression == false) {
 traverseFunctionExpressionInFunctionScope(fnName, n);
 traverseBranch(fnName, n); traverse(fnName, n);
 return traverseBranch(fnName, n);
 if (isFunctionExpression) { if (parent == null) { return null; } return
 if (isFunctionExpression) { if (parent == null) { return n ; } } else {
 if (isFunctionExpression) { if (parent == null) { return null; } else { return
 if (!isFunctionExpression) { return ; } if ( isFunctionExpression ) { return ; } } else {
 if (isFunctionExpression) { if (parent == null)
 traverseBranchFunctionExpression(fnName, n);
 if (parent == null) { parent = n ; }
 curNode = n;
 traverseBranch(fnName, parent;
traverseBranch(fnName, n, parent, true, false);
 if (isFunctionExpression) { if (parent == null) { return n ; } else { return
 if (parent == null) { return ; }
 If (isFunctionExpression) { if (isFunctionExpression) {
traverseBranch(fnName, n, parent, false, false);
 if (!isFunctionExpression) { return ; } if ( isFunctionExpression ) { if (parent == n)
 traverseBranch(n); } traverseBranch(fnName, n);
traverseBranch(fnName, n) ; parent = n ; } break;
 if (!isFunctionExpression) { return ; } if ( isFunctionExpression ) { return ; } else {
 if (isFunctionExpression) { if (parent == null) { return n ; } return
 If (isFunctionExpression) { if (isFunctionExpression == true) {
traverseBranch(fnName, n, parent.getParent());
 If (isFunctionExpression) { if (isFunctionExpression == false) {
 pushScope(); return;
 If (isFunctionExpression) { if (parent == null)
 functionName = n;
 if (isFunctionExpression) { if (parent == null) { return parent; }
traverseBranch(functionExpressionNameInScope, fnName, n);
 if (!isFunctionExpression) { return ; } if ( isFunctionExpression ) { if (block) {
 if (!isFunctionExpression) { return ; }
traverseBranch(FunctionExpressionName. class, fnName, n);
 traverseFunctionExpressionInFunctionScopeNode(fnName, n);
 if (!isFunctionExpression) { return
traverseBranch(fnName, n); n = parent.getNext(); break;
 If (isFunctionExpression) { if (isFunctionExpression) return
traverseBranch(FunctionExpressionName.NAME, fnName, n);
traverseBranch(FunctionExpression, fnName, n);
traverseBranch(fnName, n) ; n = n. getNext ( ) ;
 if (!isFunctionExpression) { return ; } if ( isFunctionExpression ) { final Function function =
 traverseFunctionExpressionNode(fnName, n);
 if (isFunctionExpression) { if (parent!= null) { parent =
 if (!isFunctionExpression) { return null; }
 traverseFunctionExpressionNodes(fnName, n);
traverseBranch(fnName, n); } else { n = n ; break;
 if (isFunctionExpression) { final Node fnName = n.getFirstChild(n));
 traverseBranch(function).push(fnName, n);
 while (n!= null)
 if (!isFunctionExpression) { return ; } if ( isFunctionExpression ) { final FunctionFunction =
 If (isFunctionExpression) { if (parent == null) return; }
 traverseFunctionExpression(n); traverseFunction(fnName, n);
 if (!isFunctionExpression) { break; }
 traverseBranch(functionName); traverse(fnName, n);
 TraverseFunctionExpressionName(fnName, n);
 if (!isFunctionExpression) { return ; } if ( isFunctionExpression ) { return ; } } else
traverseBranch(fnName, n) ; n = parent.getFirstChild();
 traverseFuncExpression(fnName, n);
 if (!isFunctionExpression) { return ; } if ( isFunctionExpression ) { final FunctionFunctionFunction
 traverseCallee(fnName, n);
 functionName(n);
 if (parent == null) { parent = n.parent;
 if (parent == null) { return null; }
traverseBranch(fnName, n) ; parent = n ; n = parent ;
 functionExpressionNamesInFunctionScopeCheck(fnName, n);
 if (!isFunctionName)
 traverseBranch(fnName, n); }
traverseBranch(n, curNode, fnName, n);
 traverseFunctionExpressionInFunctionScopeOnly(fnName, n);
 traverseBranchImpl(fnName, n);
traverseBranch(fnName, n) ; parent = n ; n = parent ; }
traverseBranch(functionExpressionNode, fnName, n);
 traverseFunctionExpression() ;
 if (n!= null)
 (n);
 traverseFunctionExpressionInFunctionScopeName(fnName, n);
 if (parent == null) { return n; }
 traverseFunctionExpression(parent, n);
 traverseBranch(n, n); } }
traverseBranch(fnName, n) ; n = parent ; return ;
traverseBranch(fnName, n) ; parent = n ; return ;
 traverseBranch(function).append(fnName, n);
traverseBranch(fnName, n.getNext(n);
 traverse(n, n);
traverseBranch(parent, n, fnName, n);
 if (parent!= null) { return
traverseBranch(fnName, n) ; parent = n ; n = null;
 traverseBranch(n, curNode());
 traverseBranch(n, curNode)
traverseBranch(fnName, n, parent, cfgs);
 traverseFunction(function, n);
traverseBranch(fnName, n, parent, null);
 if (parent == null) { parent = n.parent();
traverseBranch(this, parent, fnName, n);
 traverseBranch(n, n, parent)
 traverseCfg(n);
 traverseBranch(fn);
traverseBranch(fnName, parent, curNode);
 if (parent == null) { parent = n ; } else
 popScope(); return;
traverseBranch(functionName);
 if (parent == null) { parent = n; return
traverseBranch(fnName, n); parent = n ; }
 traverseBranch(ns);
traverseBranch(n, parent, fnName, n);
 if (parent == null) { parent = n ; } return
 (parent, n);
 pushScope();
traverseBranch(fnName, n.getNext);
 if (parent == null) { return null; } return
 if (!isFunctionExpression) { return null; } return
traverseBranch();
traverseBranch(fnName,  n); return n ; } return n ; }
traverseBranch(fnName, n) return n;
 TraverseFunctionExpressionNode(fnName, n);
 root(n);
 if (curNode)
 if (!curNode)
 traverse(function, n);
 if (!isFunctionExpression) return; return
 append(n);
 TraverseFunctionName(n);
 if (!isFunctionExpression) return; else
 if (!parent)
traverseBranch(fnName, n, parent, prevScope);
traverseBranch(fnName, n) break;
 popScope);
 traverseBlock(fnName, n);
 if (!isFunction)
traverseBranch(fnName, fnName);
traverseBranch(fnName, n, parent, cfg);
 addScope(n);
 if (useScope)
traverseBranch(fnName, n) while n = parent;
traverseBranch(fnName,  n); n = n. getNext(); }
 return null;
 namespace = n;
 node = n;
traverseBranch(fnName, n) return curNode;
 if (debug)
traverseBranch(fnName,  n); n = parent.getNext(); }
 traverseFunction(, n);
 if (stackEmpty)
 descendFunction(fnName, n);
 traverseScope(fnName, n);
traverseBranchn();
traverseBranch(fnName, n) popScope();
traverseBranch(cfg, fnName, n);
traverseBranchN();
traverseBranch(fnName, curNode, parent);
 traverseFunc(n);
traverseBranch({ n);
 parent = null;
traverseBranch(...)
traverseBranch(fnName, n, true);
 traverseBranch(*n);
push(, n);
 traverseFunctionCall(n);
traverseBranch(), n);
 traverseExpressionName(fnName, n);
 navigateBranch(fnName, n);
push();
pop();
 traverseCfg(fnName, n);
traverseBranch(opScope, fnName, n);
 if (true)
traverseBranch(currentScope, fnName, n);
traverseBranch(funcName, fnName, n);
 traverseFunctionName(fnName, n);
 pop(n);
traverseBranch(n, fnName, n);
 visit(fnName, n);
 PushScope(n);
traverseBranch(nName);
 addScope(fnName, n);
 traverseFunc(fnName, n);
 if ()
push(', n);
 emit(n);
 } else {
traverseBranch(fnName,);
 return parent;
 pushNode(n);
 branch(fnName, n);
 appendScope(fnName, n);
 if (!)
traverseBranch(fnName, parent);
 return false;
 return true;
traverseBranch(fnName, {
traverseBranch(fnName n);
 register(fnName, n);
 bind(fnName, n);
 if (...)
traverseBranch(fnName, n, prevScope);
traverseBranch(curNode);
traverseBranch(fnName, node);
traverseBranch(fnName, curNode;
traverseBranch(fnName, n, cfgs);
traverseBranch(fnName, n, currentScope);
traverseBranch(fnName, n, ctx);
traverseBranch(N);
 else {
traverseBranch(fnName, -1);
traverseBranch(fnName, n) return();
traverseBranch(this, fnName, n);
traverseBranch(fnName, cb);
traverseBranch(fnName, ctx);
traverseBranch(fnName, prevNode);
 assign(fnName, n);
 else return
 else:
 else,
 } else
traverseBranch(fnName, n, null);
traverseBranch(fnName, n; });
traverseBranch(fnName, n;)
traverseBranch(fnName, n; }
 return
traverseBranch(fnName, p);
.
traverseBranch(fnName, c);
