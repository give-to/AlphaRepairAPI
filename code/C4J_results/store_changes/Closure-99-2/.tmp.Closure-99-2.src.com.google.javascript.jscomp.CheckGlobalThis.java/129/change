 return false;
 assignLhsChild = null;
return false; } else { return true;
 compiler.report(t.makeError(n, level, GLOBAL_THIS)); } if (n == rhs) {
 if (n == assignLhsChild) {
 compiler.report(t.makeError(n, level, GLOBAL_THIS));
 assignLhsChild = lhs;
 if (n == assignLhsChild)
 if (n == lhs) {
 compiler.report(t.makeError(n, level, GLOBAL_THIS)); }
 compiler.report(t.makeError(n, level, GLOBAL_THIS)); } if (n == lhs) {
 compiler.report(t.makeError(n, level, GLOBAL_THIS)); } } } else {
return  false; } else { return true ; }
 compiler.report(t.makeError(n, level, GLOBAL_THIS)); if (n == assignLhsChild)
 compiler.report(t.makeError(n, level, GLOBAL_THIS)); } if (n!= lhs) {
 if (parent == assignLhsChild)
 compiler.report(t.makeError(n, level, GLOBAL_THIS)); } else {
 if (parent == assignLhsChild) {
 if (n == lhs) { if (parent == rhs) {
return  true; } else { return false;
 compiler.report(t.makeError(n, level, GLOBAL_PROP)); }
 if (parent == lhs) {
 compiler.report(t.makeError(n, level, GLOBAL_THIS); } } } else {
 if (parent!= null && parent == assignLhsChild)
 if (parent!= null && parent == assignLhsChild) {
 if (n == lhs) { returnfalse;
return false; } else { lhs = rhs ;
 compiler.report(t.makeError(n, level, GLOBAL_LHS)); }
 if (n == lhs) { if (n == assignLhsChild)
 if (parent!= null && parent == lhs) {
 if (n == lhs) { if (parent == assignLhsChild)
 compiler.report(t.makeError(n, level, GLOBAL_SUPPROP));
 return false; } if (n == assignLhsChild) { if (parent!= null && parent == n) {
 if (lhs == assignLhsChild) {
 compiler.report(t.makeError(n, level, GLOBAL_THIS); } else {
 if (n == lhs) { if (n == assignLhsChild) {
return  false; } lhs = rhs ;
 compiler.report(t.makeError(n, level, "prototype."));
 if (parent == lhs) { returnfalse;
 if (n == lhs) { if (parent!= lhs) {
 return false; } if (n == assignLhsChild) { if (parent!= null && parent == lhs) {
 if (parent!= null && parent. isGet(lhs)) {
 if (n == lhs)
 if (n == lhs) { if (n == rhs) {
 if (n == lhs) { if (parent == null) {
 if (n == lhs) { assignLhs = null;
return  false; } else { return true ; } }
 if (n == lhs) { assignLhsChild = null;
 compiler.report(t.makeError(n, level, GLOBAL_PROP));
 compiler.report(t.makeError(n, level, GLOBAL_THIS); }
 if (n == lhs) { if (parent!= null && parent == n) {
 if (lhs == assignLhsChild)
 compiler.report(t.makeError(n, level, GLOBAL_LHS));
 if (n == lhs) { if (parent!= null) {
 if (n == lhs) { parent = lhs;
 if (n == lhs) returnfalse;
 return false; } if (n == assignLhsChild) { if (parent!= null && parent!= n) {
 return false; } if (n == parent) { if (n == lhs) { if (n == assignLhsChild) {
 if (parent == lhs)
 return false; } if (n == parent) { if (n == lhs) { if (n == rhs) {
 if (parent!= null && parent == n) {
return false; } if (parent == lhs) {
 return false; } if (n == assignLhsChild) { if (parent!= null && parent!= lhs) {
return  false; } lhs = parent ;
return  true; } else { return false ; }
 assignLhsChild = n;
 compiler.report(t.makeError(n, level, GLOBAL_PROPERTY)); }
 lhs = rhs ;
 return false; } if (n == assignLhsChild) { if (parent == null && parent == lhs) {
 compiler.report(t.makeError(n, level, GLOBAL_This)); }
 return false; } if (n == assignLhsChild) { if (parent == null || parent == n) {
 return rhs;
 compiler.report(t.makeError(n, level, GLOBAL_THIS)); } if (debug)
 return false; } if (n == assignLhsChild) { if (parent == null || parent == lhs) {
 if (parent!= null && parent!= lhs) {
return false; } if (n == rhs) {
 compiler.report(t.makeError(n, level, GLOBAL_LHS); }
 assignLhsChild = rhs;
 lhs. getNextChild ( ) break;
return  false; } else { lhs = parent ;
 assignLhsChild = parent;
 if (n == lhs) { if (parent!= null) { parent = n;
 return false; } if (n == parent) { if (parent!= null && parent == lhs) {
 return false; } if (n == assignLhsChild) { if (parent == null && parent == n) {
 return false; } if (n == assignLhsChild == null) {
 if (lhs == rhs) {
 lhs = rhs; returnfalse;
 compiler.report(t.makeError(n, level, GLOBAL_THIS)); } else
 if (parent == lhs) returnfalse;
 return false; } if (n == parent) { if (n == lhs) { if (parent == rhs) {
 if (n == lhs) { if (parent!= null && parent == n)
 if (parent!= null && parent. isGet(n)) {
return  false; } parent = n ;
 if (n == lhs) { return true; }
 return false; } if (n == parent) { if (n == lhs) { if (n == parent) {
 if (n == lhs) { if (parent!= null && parent!= n) {
 if (n == lhs) { if (parent == null) { return true;
 if (parent == lhs) { parent = lhs;
 return false; } if (n == parent) { if (n == child) { if (n == assignLhsChild)
 if (n == lhs) { if (parent == null) { return true; }
 compiler.report(t.makeError(n, level, "prototype"));
 lhs. getQualifiedName() = null;
 return false; } if (parent!= null && parent. getType() == Token.PARENT) { if (parent == n) {
 if (n!= lhs) {
 return false; } if (n == parent) { if (parent!= null && parent!= lhs) {
return  false; } return true;
 compiler.report(t.makeError(n, level, GLOBAL_PROP)); } else
 lhs. getNextChild ( ) ; returnfalse;
 lhs = rhs ; }
return  true; } else { return false ; } }
 compiler.report(t.makeError(n, level, LOCAL));
 if (n == lhs) { if (parent == null) { if (n == rhs) {
 if (parent!= null && parent == n)
 return false; } if (n == parent) { if (n == lhs) { if (parent!= lhs) {
 return false; } if (parent!= null && parent. getType() == Token.THIS && parent == assignLhsChild)
 assignLhsChild = lhsChild;
 lhs. getFirstChild ( ) = parent;
 if (n == lhs) { parent = lhs ; }
 if (n == lhs) { if (parent == null) { return false;
 if (n == lhs) { if (parent == null) { if (n == lhs) {
 compiler.report(t.makeError(n, level, GLOBAL_PROP)); } }
 if (n == lhs.getNextChild()) {
 lhs. getNextChild ( ) = n;
return false; } else { return true ; } } }
 return false; } if (n == assignLhsChild) { if (parent!= null && parent == n)) {
 if (n == lhs) { if (parent!= null) { return true;
 lhs = rhs;
 if (parent!= lhs) {
 if (n == lhs) { return true;
return false; } } else { return false;
 compiler.report(t.makeError(n, level, GLOBAL_THIS)); } } } } }
 lhs. getLastChild ( );
return  false; } else { return false ; } }
 return false; } if (n == parent) { if (parent!= null && parent. isGet()) {
 return false; } if (n == parent) { if (n == lhs) { if (parent == null) { return true;
 if (n == lhs.getNext()) {
 return false; } if (parent == null || parent == null || parent == null || n == null || parent == null || n == {
 return false; } if (parent == null || parent == null || parent == null || n == null || n == null || parent) {
 lhs. getNextChild ( ) ;
return  true; } else { return false
 lhs. getFirstChild ( );
 if (parent!= null) {
 lhs. remove ( ) ;
 if (n == lhs) { return!false;
 lhs. getNextChild ( );
 if (n == assignLhs) {
return  false; } else { break;
 lhs. removeNext ( ) ;
 assignLhsChild = null;false;
 assignLhs = null;
 if (parent == lhs) { return!false;
return  true; } return false;
return false; } else { return false ; } } }
 lhs. getNext ( );
 lhs. getNextChild ( ) continue;
 lhs.getLastChild(); returnfalse;
 lhs. getNext ( ) = parent;
 lhs.getNextChild() returnfalse;
 lhs. getNextChild ( ) ; }
 lhs.getLastChild()returnfalse;
 return false; } else { returnfalse;
 if (n == lhs) { break; } else
return  true; } else { break;
 return true; }
 return false
 return false; } break;
 return true; } else {
 if (n == lhs) { return $false;
 lhs.getLastChild(null)+false;
 lhs. getFirstChild ( ) ; returnfalse;
 parent = lhs ; }
 return false; } else return true;
 return false; } returnfalse;
 return false; } } }
 lhs.getNextChild(null)+false;
 return;
return false; } parent = child ;
 lhs.getLastChild(null);false;
 return false; } } } }
 if (debug) {
 if (n == assignLhsChild) { }
 return false; }
 return lhs!= null;
 return false; } }
 lhs = parent;
 assignLhsChild = $false;
 lhs.getLastChild(false;
 return false; break;
 assignLhsChild = node;
 assignLhs = parent;
 if (parent == n)
 lhs = rhs;false;
 return false; } else returnfalse;
 lhs = rhs||false;
 lhs = null;
 return false; }
 if (!debug) returnfalse;
 return true; } else
 lhs = rhs.false;
 lhs = parent ;
 lhs=false;
 return true;
 return -1;
 return true;
 return true; } } }
 return true|false;
 break;
 lhsChild=false;
return false; parent = n;
 return true; } }
 return false; };
 return true; break;
 lhs = $false;
 return true; } }
 lhs.value=false;
return false; } else {
 continue; }
 if (!debug)
 break; }
 lhs = null;false;
 return lhs.false;
 return!false;
 return lhs==false;
 return true; }
 return true
 return false;
 } else {
 return $false;
 return false; returnfalse;
 return lhs;
 continue; } else
 break; } }
 return -false;
 parent = n;
 return false|false;
 return true||false;
 return false||false;
 return _false;
 throw false; }
 throw false;
 continue;
 assert=false;
 } }
 } else
return  false();
 return False;
 return null;
 }
 continue();
 break
return false(); }
return false;; }
 }
