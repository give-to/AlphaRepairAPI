Node lhs = parent.getFirstChild();
 Node lhs.getFirstChild();
 Node assignLhsChild = lhs.getFirstChild();
 Node lhs = parent.getNext();
 lhs= parent.getFirstChild();
 Node lhs = parent.next();
 Node lhs = parent();
 Node lhs = parent;
 Node lhs = rhs.getFirstChild();
 parent.getFirstChild();
 Node assignLhsChild = parent.getFirstChild();
Node lhs = parent.getFirstChild() ; Node assignLhsChild = null ;
 Node lhs = parent.getFirstChild;
 Node assignLhsChild = assignLhs.getFirstChild();
 Node lhs;
 Node lhs = parent.getNext(();
 Node assignLhsChild = null;lhs = parent.getFirstChild();
 Node lhs = parent.getFirstSibling();
Node lhs = parent.getFirstChild() ; Node assignLhsChild ;
 Node lhs = parent);
 Node lhs = parent.getFirstChild(();
 Node lhsChild;
 Node assignLhs = parent.getFirstChild();
 Node lhs = parent.hs;
 Node assignLhsChild = null ;
 Node lhs = parent; Node assignLhs= parent.getFirstChild();
 Node lhs = parent.getNext;
Node lhs = parent.getFirstChild(); if (lhs!= null) {
 Node assignLhsChild;
 Node assignLhsChild = (Node)parent.getFirstChild();
 Node lhs = parent.next(();
 Node lhs = parent.firstChild;
 Node assignLhsChild = parent. getNext ( ) ;
Node lhs = parent.getFirstChild(); if (lhs!= null)
 Node lhs =.getFirstChild();
 Node lhs = parent; Node lhs= parent.getFirstChild();
 Node lhs = parent. getFirstChild(); Node assignLhsChild = null ;
 Node lhs = parentgetFirstChild();
 Node lhs = parent.getFirstChild().parent.getFirstChild();
 Node lhs = getNext();
 Node assignLhsChild = parent. getFirstChild ( ) ; Node n = parent. getNext ( ) ;
 Node assignLhsChild = assignLhsNode.getFirstChild();
 Node lhs = parent; Node n = parent.getFirstChild();
 Node lhs = parent.getNext(...);
 Node assignLhsChild = parent. getFirstChild ( ) ;
 Node assignLhsChild = parent. getFirstChild ( ) ; Node n = parent. getLastChild ( ) ;
 Node lhs = parent. getNextChild ( ) ;
 Node assignLhsChild = parent. getSecondChild ( ) ;
 Node assignLhsChild = parent. getFirstChild ( ) ; Node assignLhsChild = null ;
 Node lhs = parent.getLeafNode();
 Node assignLhsChild = assignLhsParent.getFirstChild();
 Node assignLhsChild lhs= parent.getFirstChild();
 Node lhs = parent. getFirstChild(); Node assignLhsChild ;
Node lhs = parent.getFirstChild(); if (lhs) {
 Node lhs = parent.getParent ( ).getFirstChild();
 Node parent = parent. getFirstChild(); Node assignLhsChild ;
 Node n = parent. getFirstChild(); Node assignLhsChild = null ;
 Node n = parent. getFirstChild(); Node assignLhsChild = n ;
 Node assignLhsChild = parent. getFirstChild(); } else {
 Node lhs = parent.getParent();
 Node n = parent. getFirstChild(); Node assignLhsChild ;
Node lhs = parent.getFirstChild() ; Node assignLhs ;
 Node n = parent();
 Node assignLhsChild = parent. getFirstChild(); Node n = parent. getFirstChild(); Node parent = n ;
 Node assignLhsChild = parent. clone ( ) ;
 Node assignLhsChild = null ; Node nlhs = parent.getFirstChild();
 Node assignLhsChild = parent. getFirstChild(); Node n = parent. getFirstChild();
 Node assignLhsChild ; lhs= parent.getFirstChild();
 Node parent = parent. getFirstChild ( ) ;
 Node lhs = parent. getFirstChild(); Node assignLhsChild = lhs ;
 Node assignLhsChild = parent. getFirstChild ( ) ; Node assignLhsChild ;
 Node assignLhsChild ; Node lhs= parent.getFirstChild();
 Node assignLhsChild = parent ;
 Node lhs = (Node) parent);
 Node lhs = parent.getLHSChild();
 Node parent = parent. getParent ( ) ; Node assignLhsChild = null ;
 Node lhs = parent.getLhsChild();
 Node assignLhsChild = parent. getFirstChild(); Node n = parent. getFirstChild(); Node parent = rhs ;
 Node assignLhsChild = parent. getFirstChild(); Node n = parent. getFirstChild(); Node assignLhsChild ;
 Node lhs = parent.getSecondChild().parent.getFirstChild();
 Node assignLhsChild = parent. next ( ) ;
 Node lhs = parent.getNextNode();
 Node lhs = parent.getLastChild();
 Node assignLhsChild = n.parent.getFirstChild();
 Node assignLhsChild = parent. getFirstChild(); if (parent) {
 Node n = parent; Node lhs = n.getFirstChild();
 Node assignLhsChild = parent. getFirstChild(); Node n = parent. getFirstChild(); } else {
 Node lhs = parent.getFirst();
 Node lhs = parent.getLastSibling();
 Node assignLhs();
 Node n = parent.getFirstChild();
 Node assignLhsChild = parent. getFirstChild(); Node n = parent. getFirstChild(); Node parent = parent. parent ;
Node lhs = parent.getFirstChild().getNext(); if (lhs) {
 Node assignLhsChild = parent. getFirstChild ; Node n = parent. getFirstChild ; Node parent = parent. parent ;
 Node assignLhsChild = parent. getFirstChild(); if (parent!= null && parent. isAssign) {
 Node lhs = parent
 Node lhs = parent.getParent;
 Node lhs = getParent();
 Node lhs = parent.getNext(_);
 Node assignLhsChild = parent. getFirstChild(); Node n = parent. getFirstChild(); Node n = rhs ;
 Node assignLhsChild = null ; Node rlhs = parent.getFirstChild();
Node lhs = parent.getFirstChild(true); if (lhs!= null) {
 Node assignLhsChild = parent. getFirstChild(); Node n = parent. getFirstChild(); Node assignLhsChild();
 Node assignLhsChild = parent. getFirstChild(); Node n = parent. getFirstChild(); Node parent = parent ;
 Node assignLhsChild = parent. getFirstChild(); Node n = parent. getFirstChild(); Node r = null ;
 Node assignLhsChild = parent. getFirstChild(); Node n = parent. getFirstChild(); if (n)
 Node lhs = parent.getFirstChild(_);
 Node assignLhsChild = null ; Node vlhs = parent.getFirstChild();
 Node assignLhsChild = parent. getFirstChild(); Node n = parent. getFirstChild(); Node rhs ;
 Node lhs = parent.getSecondChild;
Node lhs = parent.getFirstChild(); Node assignLhsChild = lhs ;
 Node lhs = parent.hs.getFirstChild();
 Node assignLhsChild = parent. parent ;
 Node lhs = parent.getLastChild;
 Node n = parent; Node lhs=parent.getFirstChild();
Node lhs = parent.getFirstChild() ; Node assignLhsChild
 Node assignLhsChild = null ; Node parentlhs = parent.getFirstChild();
 Node assignLhsChild = parent. getFirstChild(); Node n = parent. getLastChild(); } else {
 Node lhs = lhs.getFirstChild();
 Node lhs = parent.nextChild;
 Node assignLhsChild = parent. getFirstChild(); Node n = parent. firstChild();
 Node lhs = parent.getNext(*);
 Node parent = parent; Node lhs=parent.getFirstChild();
 Node assignLhsChild();
 Node assignLhsChild = parent. getFirstChild(); Node n = parent. getNextChild(); } else {
 Node lhs = parent.hs();
 Node lhs = parent.getFirstChild.parent.getFirstChild();
 Node lhs = parent(_);
 Node assignLhsChild = parent. getFirstChild(); Node n = parent. getFirstChild(); Node parent = parent. parent();
 Node lhs = pParent;
 Node assignLhsChild = parent.nextChild();
Node lhs = parent.getFirstChild(); while (lhs!= null) {
 Node lhs = (Node parent);
 Node lhs = parent.getFirstChild();parent.getFirstChild();
 Node lhs = parent.getFirstChild()parent.getFirstChild();
 Node assignLhsChild = this.parent.getFirstChild();
 Node lhs = parent.next(_);
 Node lhs = parent.parent().getFirstChild();
 Node lhs();
 Lhs=parent.getFirstChild();
 Node lhs = getFirst();
Node lhs = parent. getNext(); if (lhs) {
 Node n = parent. getFirstChild(); Node assignLhs = null ;
 Node lhs = parent.getFirst;
 Node assignLhsChild = assign().parent.getFirstChild();
 Node assignLhsChild = parent. getFirstChild(); Node n = parent. getFirstChild; } else {
Node lhs = parent.getNext(); if (lhs!= null)
 Node assignLhsChild = null ; Node llhs = parent.getFirstChild();
 Node assignLhsChild
 Node assignLhsChild = _parent.getFirstChild();
 final Node lhs = parent.getFirstChild();
 Node lhs =();
 Node lhs = parent.left;
 Node lhs = parent. getFirstChild(); Node assignLhsChild();
 final Node assignLhsChild=parent.getFirstChild();
 Node assignLhsChild ; Lhs= parent.getFirstChild();
 Node assignLhsChild = assignmentLhs.getFirstChild();
Node lhs = parent.getFirstChild(true); if (lhs!= null)
 Node lhs = parent; Node lhs.getFirstChild();
Node lhs = parent.getFirstChild() ; Node assignLhsChild = parent ;
 Node assignLhsChild = parent.parent.getFirstChild();
 Node lhs = node(parent);
 Node assignLhsChild = parent ; lhs= parent.getFirstChild();
 Node assignLhsChild = null ; Lhs= parent.getFirstChild();
 Node assignLhsChild = assign.parent.getFirstChild();
 Node lhs = parent.getSecondChild();
 Node lhs = parent (();
Node lhs = parent.getFirstChild(n); if (lhs!= null) {
 Node assignLhsChild = parent. getFirstChild(); Node n = parent. getFirstChild(); Node parent = parent. next; }
 Node lhs = parentNode;
 Node n = parent.getFirstChild();
 Node lhs = parent. getFirstChild(); Node assignLhsChild = lhs();
Node lhs = parent.getFirstChild(LHS) ; Node assignLhsChild ;
 Node lhs = parent.next(*);
 Node[][]lhs = parent.getFirstChild();
 Node assignLhsChild = parent.parent().getFirstChild();
 Node lhs = parent.hs().getFirstChild();
 Node lhs = (Node);
 Node lhs = getLeft();
 Node assignLhsChild = parent. getFirstChild(); Node n = parent. getFirstChild(); Node parent = parent. next; final
 Node assignLhsChild = parent. getFirstChild(); Node n = parent. getFirstChild(); Node parent = parent. next(); }
 Node lhs = parent.getFirstChild(); } else {
 Node assignLhsChild = parent. getFirstChild(); Node n = parent. getFirstChild(); Node parent = parent. parent ; final
Node lhs = parent.getFirstChild(true); if (lhs) {
 Node assignLhsChild = parent. node ;
 Node assignLhsChild = parent. next ;
 Node assignLhsChild = parent. getFirstChild(); Node n = parent. getFirstChild(); Node parent = parent. parent ; }
 final Node lhs = parent;
 final Node assignLhs = parent.getFirstChild();
 Node assignLhs;
 Node lhs = parent.getLeftChild();
 Node lhs = parent.next;
 Node lhs = parent.getParent().parent.getFirstChild();
 Node assignLhsChild = null.parent.getFirstChild();
Node lhs = parent.getFirstChild(); if (lhs!= null) { final
 Node assignLhsChild = *parent.getFirstChild();
 Node lhs = parent. getFirstChild(); Node assignLhsChild =
 Node lhs = getThis();
 Node lhs = parent.getNext().parent.getFirstChild();
 Node assignLhsChild = parent. getFirstChild(); Node n = parent. getFirstChild;
 Node assignLhsChild = parent. getFirstChild(); Node n = parent. getLastChild(); final
 Node assignLhsChild = parent. getFirstChild(); Node n = parent. getNext(); final
 Node lhs = parent.prev();
 Node n = parent;
Node lhs = parent.getFirstChild().getNext(); if (lhs)
 Node assignLhsChild = parent.nextChild;
 Node lhs = parent.getPrevious();
 Node assignLhsChild = assign_hs.getFirstChild();
 n=parent.getFirstChild();
 Node lhs = parent.get();
 Node assignLhs = lhs= parent.getFirstChild();
 Node lhs = parent(parent);
 final Node lhs = rhs.getFirstChild();
 Node lhs = parent.parent;
 Node assignLhsChild = parent. getFirstChild ( ) ; if ( assignLhsChild ) { final
 Node assignLhsChild = parent. getFirstChild ( )();
 Node assignLhsChild = parent. getFirstChild ( ) ; Node assignLhsChild = null ; final
 Node assignLhsChild = assignHhs.getFirstChild();
 Node lhs = *parent.getFirstChild();
Node lhs = parent.getFirstChild(null); if (lhs) {
 Node assignLhsChild = parent. getFirstChild(); Node n = parent. getNext(); }
 lhs.getFirstChild();
 Node assignLhsChild = parent. getFirstChild(); Node n = parent. getFirstChild(); } }
 Node lhs = parent. getFirstChild ( ) ; final
 Node assignLhsLhs= parent.getFirstChild();
 Node lhs = _parent.getFirstChild();
 Node n = parent. getFirstChild(); Node assignLhsChild = n ; } }
 Node lhs = nodegetFirstChild();
 Node lhs = parent. firstChild();
 Node assignmentLhsChild = lhs.getFirstChild();
 Node assignLhsChild = n ;
Node lhs = parent.getFirstChild(); while (lhs!= null)
 final Node lhs = parent.getNext();
 Node lhs = parent. getFirstChild(); Node assignLhsChild = lhs);
 Node lhs = parent.right;
Node lhs = parent.getFirstChild() ; Node assignLhsChild = n ;
 if (parent!= null) { Nodelhs = parent.getFirstChild();
Node lhs = parent.getFirstChild().getNext(); } else {
 Node assignLhsChild = parent.lhs = parent.getFirstChild();
 Node assignLhsChild = parent.node.getFirstChild();
 Node l = parent.getFirstChild();
 Node lhs=getFirstChild();
 Node lhs = parent.getFirstChild().getNext(); final
 Node assignLhsChild =!parent.getFirstChild();
 Node lhs = pNode;
Node lhs = parent.getFirstChild(n);
 Node assignLhsChild == parent.getFirstChild();
 Node lhs = parent.getPrev();
 Node lhs = parentChild;
 Node assignLhsChild = null.lhs = parent.getFirstChild();
 Node assignLhsChild = $parent.getFirstChild();
Node  lhs
 Node lhs = getParent(();
Node lhs = parent.getFirstChild() ; Node assignLhsChild = null ; final
 Node lhs = parent ; Node n ~= parent.getFirstChild();
 Node lhs(parent);
 Node lhs = parent.parent();
 Node lhs = parent ; Node n!= parent.getFirstChild();
Node lhs = parent.getFirstChild(LHS.NODE);
 Node lhs = parent.closer().getFirstChild();
 Node assignLhsChild = parent. getNext ( )();
 Node assignLhsChild.lhs = parent.getFirstChild();
 Node assignLhsChild = parent. getNextChild(); final
 if (parent!= null) Nodelhs = parent.getFirstChild();
 Node lhs = node.next();
 Node lhs = parent. getFirstChild ( )();
 return false; }
 Node lhs = parent.getNext(); final
Node lhs = parent.getFirstChild() ; Node n = parent ;
 Node lhs = parent. getFirstChild ( ) ; }
Node lhs = parent.getFirstChild() ; while (lhs) {
Node lhs = parent.getFirstChild().getFirstChild();
Node lhs = parent.getFirstChild(LHS) ;
 Node assignLhsChild = parent.getSecondChild(); final
Node lhs = parent.getFirstChild(); while (lhs!= null) { final
 Node lhs = parent. getFirstChild ( ) ; } final
 Node lhs = (Node) parent.getFirstChild();
Node lhs = parent.getFirstChild() ; Node assignLhs();
 Node assignLhsChild,lhs = parent.getFirstChild();
 Node(lhs);
 Node assignLhsChild = parent. getNext(); final
 Node assignLhs = null ;
 Node lhs = ngetFirstChild();
 Node assignLhsChild = null; Nodelhs = parent.getFirstChild();
 Node lhs = parent ; final
Node lhs = parent.getFirstChild() ; Node assignLhs
 Node assignLhsChild = null
 Node lhs = parent. getFirstChild ( ) ; } }
 Node lhs = parent.lhs.getFirstChild();
 Node lhs = &parent.getFirstChild();
 if (parent!= null) { Node nlhs = parent.getFirstChild();
 return false; } } else {
 Node lhs = parent. getNextChild ( ) ; final
 return false;
 Node assignLhs = lhs.getFirstChild();
Node lhs = parent.getFirstChild(LHS.LHS);
 Node lhs = (Node)
 Node assignLhsChild = parent. getNext(); }
 return true; }
 Node assignLhs = parent += parent.getFirstChild();
 Node assignLhsChild := parent.getFirstChild();
 Node lhs = parent.getFirstChild(n); final
 Node lhs = node();
 Node lhs = parent.getFirst(); final
 Node lhs = parent.getFirstChild().getNext(); }
 Node lhs(_);
 Node assignLhs = n += parent.getFirstChild();
 Node assignLhs lhs= parent.getFirstChild();
 Node lhs = parentNode.getFirstChild();
 final Node lhsChild= parent.getFirstChild();
Node lhs = parent.getFirstChild(); if (lhs!= null).
 Node <? >lhs = parent.getFirstChild();
 Node lhs = parent. getNext ( )();
 Node lhsChild= parent.getFirstChild();
 Node lhs = this
 Node lhs = parent. getFirstChild ( 0 ) ; final
 Node assignLhsChild = null ; final
 Node assignLhs = parent<?= parent.getFirstChild();
 Node assignLhsChild =
 Node lhs =!parent.getFirstChild();
 Node n = parent);
Node lhs = parent.getFirstChild() ; if (lhs!= null) { }
Node lhs = parent.getFirstChild().getNextChild(); final
 Node n;
 Node lhs = this();
 if (parent!= null) { Node rlhs = parent.getFirstChild();
Node lhs = parent.getFirstChild(LHS).next;
 Node assignLhsChild(); Nodelhs = parent.getFirstChild();
 Node assignLhsChild = parent ; final
Node lhs = parent.getFirstChild(LHS_NAME);
 final Node lhs = _parent.getFirstChild();
 Node lhs = [];
 lhs = parent();
 Node lhs = parent.getNext(),
 Node assignLhsChild = [];
 Node assignmentLhsChild = parent.getFirstChild();
 Node n.getNext();
Node lhs = parent.getFirstChild(LHS).next();
 Node node = parent();
 node=parent.getFirstChild();
Node lhs = parent.getFirstChild( ) ; Node assignLhsChild();
Node lhs = parent.getChild();
 Node assignLhs,lhs = parent.getFirstChild();
 Node lhs = this);
 final Node lhs = *parent.getFirstChild();
 node n = parent;
Node lhs = parent.getFirstChild(LHS.NAME);
Node lhs = parent.getFirstChild().getNext( ) ;
 Node lhs = expression();
Node lhs = parent.getFirstChild(0);
 parent.remove();
 Node parentLhsChild= parent.getFirstChild();
 parent.next();
 node lhs = parent ;
 Node n.getFirstChild();
 final Node[][]lhs = parent.getFirstChild();
 Node node = parent.getFirstChild();
Node lhs = parent.getFirstChild(); if (lhs!= null))
 Node assignL ;
 let n.getFirstChild();
Node lhs = parent.getFirstChild(LHS).property;
Node lhs = parent.getFirstChild() ; Node assignLhsChild ; final
 Node node = parent;
Node lhs = parent.getFirstChild(true); if (lhs!= null).
 Node lhsNode;
 Node assignLhsChild = parent ; }
 Node n = lhs ;
 Node assignLhs_lhs = parent.getFirstChild();
Node lhs = parent.getFirstChild() ; if (lhs) { final
 Node n = node();
 Node lhs = node.getFirstChild();
 var n.getFirstChild();
 Lhs lhs;
Node lhs = parent.getFirstChild(null);
Node lhs = parent.getFirstChild(true); if (lhs) { final
 final Node assignLhsChild.lhs = parent.getFirstChild();
 return; }
 JSDocInfolhs = parent.getFirstChild();
Node lhs = parent.getLastChild().getNext(); final
Node lhs = parent.getFirstChild(true); if (lhs!= null))
 return true;
 final Node lhs = parentgetFirstChild();
 if (parent!= null) {lhs = parent.getFirstChild();
 final Node n = parent;
 parent.break();
 N lhs = parent.getFirstChild();
 AstNode lhs= parent.getFirstChild();
Node lhs = parent.getFirstChild().getNextChild(); }
 final Node lhsChild;
 parent.continue();
 Node lhs = this;
 n = parent;
 parent.reset();
 let n=getFirstChild();
 Node lhs = node;
 final Node nlhs = parent.getFirstChild();
 node lhs;
 Node parentLhs= parent.getFirstChild();
Node lhs = parent. getNext(); if (lhs) {}
 Node lhsLhs= parent.getFirstChild();
Node lhs = parent.getNext(n);
Node  lhs = parent ; }
 parent(parent);
 Node nlhs = parent.getFirstChild();
Node lhs = parent.getFirstChild(null); final
 assert false;
 final NodeTraversal parentlhs = parent.getFirstChild();
 return true; };
 Node lhsparent.getFirstChild();
 assert true;
 final Node parentlhs = parent.getFirstChild();
Node  lhs =
 final NodeTraversal nlhs = parent.getFirstChild();
Node lhs = parent.getFirstChild(Lhs) ;
 return false; };
Node lhs = parent.getFirstChild(true); final
 node lhs = parent.getFirstChild();
Node  lhs = (Node).
 final Node clhs = parent.getFirstChild();
Node lhs = parent.getFirstChild() + 1;
 return false };
 let parent.getFirstChild();
 lhsparent.getFirstChild();
Node lhs = parent.getFirstChild(LHS).getNext(); final
Node lhs = parent.getFirstChild(this);
 final Node rlhs = parent.getFirstChild();
Node lhs = parent.getFirstChild().getFirstChild(); final
 final Node llhs = parent.getFirstChild();
Node lhs = parent.getLastChild(); final
Node  parent ;
Node lhs = parent.getFirstChild(LHS.NODE); final
 node = parent ; } }
Node lhs = parent.getFirstChild(LHS).next(); final
 return true };
 Node [ ] nlhs = parent.getFirstChild();
 assert parent.getFirstChild();
Node lhs = parent.getFirstChild(LHS.NODE).
Node lhs = parent.getFirstChild(LHS.NODE)
 return true();
 Node [ ] vlhs = parent.getFirstChild();
Node  node ;
 Node lhs);
Node lhs = parent.getFirstChild(); { final
 parent=parent.getFirstChild();
Node lhs = parent.getFirstChild(LHS_NODE); final
Node lhs = parent.getFirstChild(); {
Node lhs = parent.getFirstChild(LHS.LHS); final
Node lhs = parent.getFirstChild.getNext(); final
Node lhs = parent.getFirstChild(LHS); final
Node lhs = parent.getParent(); final
 Node rlhs = parent.getFirstChild();
 Node llhs = parent.getFirstChild();
 Node parentlhs = parent.getFirstChild();
 return false;
 parent(n);
 int lhs=parent.getFirstChild();
 node lhs.getFirstChild();
 Node rhs;
 if (debug);
 Node lhs=(parent.getFirstChild();
 Leaf lhs= parent.getFirstChild();
Node lhs = parent.getFirstChild().next(); final
 return false();
Node lhs = parent.getFirstChild(). nextChild; final
 Node(n);
Node lhs = parent.getFirstChild(LHS); }
 boolean traverse();
Node lhs = parent.getFirstChild() ; try { final
 boolean result();
 node = parent;
 LHS n= parent.getFirstChild();
 boolean descend();
 Node rhs.getFirstChild();
Node lhs = parent.getFirstChild(). next; final
 Node dhs.getFirstChild();
 Parent lhs.getFirstChild();
 LHS l= parent.getFirstChild();
Node lhs = parent.getFirstChild(false); final
 LHS parent= parent.getFirstChild();
Node lhs = parent.getFirstChild() + 2;
Node lhs = parent.getFirstChild() + parent;
 n.getFirstChild();
 let node.getFirstChild();
 })();
 } });
 let n= parent.getFirstChild();
 } }
 parent().getFirstChild();
Node lhs = parent. ;
Node lhs = parent.getFirstChild() { };
 } };
Node lhs = parent.getFirstChild() { final
Node lhs = parent.getFirstChild()); final
 final
 { final
 { }
Node lhs := parent.getFirstChild();
Node lhs, parent.getFirstChild();
Node lhs is parent.getFirstChild();
