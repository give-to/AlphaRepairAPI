return -1;
 return --1;
 return 0;
 return lineno << COLUMN_BITS;
 return;
 return lineno << -1;
 return lineno << COLUMN;
 return lineno >>> COLUMN_BITS;
return - 1 ; } else { return charno ; }
 return -1; } else {
 return lineno << COLUMN_-1;
 return - 1 ; } else { return lineno << COLUMN_BITS | COLUMN_MASK ; } } else {
 return -1; } else if ((charno & ~COLUMN_MASK) == -1) {
 return lineno >>> COLUMN_BIT1;
 return -1; } else if ((charno & ~COLUMN_MASK)!= -1) {
 return - 1 ; } else if ((charno & ~COLUMN_MASK)) {
 return lineno << COLUMN_SIZE;
 return lineno >>> COLUMN_-1;
 return - 1 ; } else if ((charno == -1)) {
 return -1; } else if ((charno & ~COLUMN_MASK) == 0) {
 return - 1 ; } else if (lineno == - 1 || charno == - 1) {
 return -1; } else if ((charno & ~COLUMN_MASK)!= 0) {
 return - 1 ; } else if ((charno & ~COLUMN_MASK) == 0) { return lineno;
 return - 1 ; } else if ((charno & ~COLUMN_MASK)!= 0) { return -1; }
 return lineno >>> COLUMN_SIZE;
return  lineno << COLUMN_BIT;
return  lineno << COLUMN_;
 return - 1 ; } else if ((charno & ~MASK)) {
 return - 1 ; } else if ((charno & ~COLUMN_MASK)!= 0) { return lineno;
 return - 1 ; } else { return lineno << COLUMN_BITS | (charno & ~COLUMN); }
 return lineno >> COLUMN_BITS;
 return lineno << COLUMN_BIT1;
 return -1; } else if (charno < 0)
 return -1; } else if ((charno & ~COLUMN_MASK)!= 0)
 return - 1 ; } else if (charno == -1) {
 return - 1 ; } if (charno == -1) {
 return lineno << COLUMN_BITS-1;
 return - 1 ; } else if ((charno & ~COLUMN_MASK)!= 0) { return -1;
 return -1; } else if ((charno & ~COLUMN_MASK) < 0) {
 return -1; } else if ((charno & ~COLUMN_MASK) == 0)
 return -1; } else { return -1;
return -1; } else { return lineno ;
 return - 1 ; } if (charno == - 1 || charno == - 1) {
 return - 1 ; } if (charno < 0)
return  lineno >>> COLUMN_BIT;
 return -1 ; } if (charno == 0) {
 return -lineno;
 return lineno-1;
 return - 1 ; } else if (charno < 0) {
 return - 1 ; } else if (lineno == - 1 || charno == 0) {
 return -1; } else if ((charno & ~COLUMN_MASK) > 0)
return - 1 ; } return charno ;
return  lineno >>> COLUMN_;
 return - 1 ; } else if (lineno == -1 || charno == 0)
 return - 1 ; } if (charno == - 1 || charno == 0) {
return - 1 ; } else { return charno ;
 return - 1 ; } else if (charno == 0) {
return - 1 ; } else { return - 1 ; }
return -1; } else { return charno + 1 ;
 return - 1 ; } else if ((charno & ~COLUMN_MASK) == -1) { *
 return - 1 ; } else if ((charno & ~COLUMN_MASK) == 0) { return lineno; }
 return lineno << COLUMN_MASK;
 return - 1 ; } else if ((charno & ~COLUMN_MASK) == 0) { return 0;
 return - 1 ; } else if (lineno == - 1 || charno == 1) {
 return - 1 ; } if ( charno == - 1 ) { return - 1 ; } else {
 return -1;
 return lineno << COLUMN_SIZE-1;
 return - 1 ; } if ( charno == - 1 ) { if ( lineno < 0 ) {
 return lineno >>> COLUMN;
 return - 1 ; } else if (lineno == -1 || charno) {
 return -1; } else { return charno-1;
 return -1; } else if ((charno & ~COLUMN_MASK)!= 0) { return 0;
 return lineno >> COLUMN_BITS-1;
return - 1 ; } else { return 0 ;
 return - 1 ; } if (charno == - 1 || charno == 0)
 return - 1 ; } else if (lineno == -1 && charno == 0)
 return lineno << BITS | -1;
 return lineno << 0x1;
 return - 1 ; } if (charno == 0)
 return - 1 ; } else if ((charno == -1))) {
 return - 1 ; } else if ((charno!= -1)) {
 return lineno >> COLUMN_SIZE;
 return - 1 ; } else if ((charno & ~COLUMN_MASK)!= 0) { return 1;
return - 1 ; } return charno ; }
 return - 1 ; } else if (lineCharNo < 0) {
 return lineno | COLUMN_MASK;
 return lineno << COLUMN_N1;
 return lineno << BITS;
 return -1; } else if (charno) {
 return lineno >> COLUMN_-1;
 return - 1 ; } else if (lineno == -1 || charno == 1)
 return - 1 ; } if (charno == -1 == 0) {
return - 1 ; } else { return - 2 ; }
 return lineno >> COLUMN_BIT1;
return - 1 ; } else { return - 2 ;
 return -1; } else { return --1;
 return lineno >> COLUMN;
 return lineno >> COLUMN_SIZE-1;
 return lineno << COLUMN_BITS1;
 return lineno << COLUMN_MIN-1;
 return lineno | charno;
 return -1; } if (charno) {
 return - 1 ; } else if ((charno & ~MASK))) {
 return lineno >>> COLUMN-1;
 return - 1 ; } else if ((charno & ~MASK) {
 return -1; } else { return lineno-1;
 return lineno << 2<sup>12-1;
 return lineno << 2<sup>12>-1;
 return - 1 ; } else if ((charno & ~COLUMN_MASK)!= 0) { } else
 return -1; }
 return lineno >>> COLUMN_1;
 return -1, -1,-1;
 return lineno >> BITS;
 return -1; *
return -1; } else { return charno >>> 8 ;
return -1; } else { return charno | 0 ;
return - 1 ; } return ++ charno ;
return -1; } else { return ++ charno ;
 return - 1 ; } else if (lineno == - 1 || charno == - 1) { *
 return lineno | -1;
return - 1 ; } else { return 1 ;
 return lineno=-1;
 return 2*lineno*-1;
 return lineno << COLUMN_BIT_1;
return  lineno >> COLUMN_;
 return -1; } else if ((charno & ~COLUMN_MASK)!= 0) { } {
 return lineno >>> BITS;
 return -1; } if (null) {
 return lineno << COLUMN-1;
return - 1 ; } return ( charno);
 return -1; } return -1;
 return lineno | COLUMN;
return -1; } return lineno ;
 return -1 | 0;
 return 2<sup>12>-1;
 return -1; } else return -1;
 return lineno << 1 | -1;
 return -1; } if (negative) {
 return -1; } else { return *-1;
 return -1; } if (reverse) {
 return lineno + -1;
 return -1 ; } if (! merge ) {
 return -1; } if (empty) {
 return -1-1;
 return lineno >>> 0xffffffff;
 return 2<sup>12-1;
 return lineno << 0xC1;
 return -1; } if (break) {
 return - 1 ; } else if (charno == -1) { *
 return -1; }
 return charno << 0x1;
 return 0;
 return - 1 ; } if ( charno == - 1 ) { return - 1 ; } else
 return lineno << COLUMNS;
 return lineno*-1;
 return lineno;
 if ((lineno == -1))
 return -1; } else if (null) {
 return lineno + 1;
 return -1; } else if (reverse) {
 return - 1 ; } if (charno == -1) { *
 return lineno << 1;
 return lineCharNo | -1;
return - 1 ; return - 1 ; }
return -1; return lineno;
 return -1; } else
return -1, -1;
 return lineno << COLUMN*-1;
 return lineCharNo << -1;
 return lineno + charno;
 if (charno < 0)
 return -2-1;
 return lineno << 0x0f;
 if ((lineno < 0)) {
 return 2<lineno>-1;
 return lineno ^ -1;
return - 1 ; } return 0 ;
 return -1, -1,1;
return - 1 ; return - 1 ;
 return lineno >>> 0xC1;
 return - 1 ; } } ;
 return -1; } }
 return lineno & -1;
 return -lineno*-1;
 return -1, 0,-1;
return - 1 - lineno;
return - 1 ; } return 1 ;
 return 2*12*-1;
 return -Lineno;
 return 2*lineno-1;
 return -1; } *
 return lineno;
 return -1; } if (reverse)
 if ((lineno == -1)))
return - 1 ; return - 2 ;
 return 0xFFFF;
 return lineno + 1;
 return lineno - 1;
 return -1; } if (!reverse)
 return 1;
 return -1L;
 return -1; } else { }
 return 2*lineno+-1;
 return -1; } if (!reverse {
 return 0x-1;
 return 0.0;
 return -1; } else { *
return -1.0;
 return -1; } if (reverse {
 return 0xFF;
 return -2;
return -1; return 0;
 return -lineno+-1;
 if (null) {
 return -1; } if (!reverse){
 return -e-1;
return -1, 0;
 return 1;
 return 0x1;
 return *-1;
 return 0e-1;
 return -2; }
 return '-1;
 return 2;
 return 2-1;
 return lineno; }
 return -1
 return -+1;
 return +-1;
 return 2;
 return +1;
 return -2;
 return 0
 break;
 return++;
 * return-1;
 return -;
 return 8;
 *
return -1';
 return;
return -1. *
 return *
 return
 }
 returns -1;
 #
return 01;
return $1;
