 case Token.BITXOR: return "||";
 case Token.OR: return "||";
case  Token.BITXOR:
 case Token.BITXOR:
 case Token.BITXOR: case Token.OR: return "||";
 case Token.BITXOR;
 case Token.BITOR:
 case Token.BITOR: return "||";
case  Token.OR:
 case Token.BITORXOR: return "||";
 case Token.BIT.OR: return "||";
 case Token.BITOR;
 case Token.Token.OR: return "||";
case Token.OR: return "|";
 case Token.BITOR:
 case Token.BITAND: return "^|";
 case Token.BITXOR: return "^|";
 case Token.OR;
 case Token.BITXOR: return "^"||";
 case Token.BITAND: return "|";
 case Token.BITAND: return "|;
 case Token.BITOR: return "^|";
 case Token.BITOR.OR: return "||";
 case Token.BITOR: return "^|";
 case Token.BITXOR: return "^";
 case Token.BITAND: return "^";
 case Token.BITXOR: return \"||";
 case Token.BITAND: return "";
 case Token.AND:
 case Token.BITAND: case Token.OR: return "||";
 case Token.BITOR: return "^";
 case Token.BITXOR case Token.OR: return "||";
 case Token.BITAND: return "^|&";
 case Token.BITAND: case Token.BITOR: return "||";
 case Token.BITXOR: return "^: return "||";
 case Token.BITXOR: return "";
 case Token.BITOR: return "^";
 case Token.BITOR: return "|";
case Token.OR: return "|^";
 case Token.BITAND: break;
 case Token.AND: case Token.OR: return "||";
 case Token.BITAND: return "^|;
 case Token.BITOR: return "^="; case Token.BITXOR: return "^=";
 case Token.BITAND:return "||";
 case Token.BITOR: return \"||";
case Token.OR: return "^|";
 case Token.BITXOR: return "^|^";
 case Token.BITOR: return "^"; case Token.BITOR:
 case Token.BITOR: case Token.OR: return "||";
 case Token.BITOR: return "^="; case Token.BITXOR:
 case Token.BITXOR: case "^: return "||";
 case Token.BITOR: return "^="; case Token.BITXOR: return "^|=";
 case Token.BITOR: case Token.XOR: return "||";
case  "^";
 case Token.BITOR: return "|;
 case Token.BITOR: return "^"; case Token.OR:
 case Token.BITOR: return "^|^";
 case Token.BITAND: return "^&|";
 case Token.BITAND:
 case Token.BITXOR: case ^Token.OR: return "||";
 case Token.BITOR: return "^;
 case Token.BITXOR: return "^|";
 case Token.BITOR: return "^"; case Token.BITXOR:
 case Token.BITOR: return "^="; case Token.BITOR:
 case Token.BITOR: return "^"; case Token.BITXOR: return "^|";
 case Token.BITXOR: return "^|$";
 case Token.BITXOR: return "";return "||";
 case Token.BITOR: return "^"; case Token.BITXOR: return "^";
case Token.OR: return "||" case Token.BITXOR:
 case Token.BITOR: return "^|;
 case Token.BITAND: return "^|";
 case Token.OR return"||";
 case Token.BITOR: return "";
case Token.OR: return "||" ; case Token.BITXOR:
 case Token.BITOR: return "^"; case Token.BITXOR: return "|";
 case Token.BITOR: return "^="; case Token.BITXOR: return "|";
 case Token.BITOR: return "^|&";
 case Token.BITOR: return "^="; case Token.BITXOR: return "^="; default:
 case Token.BITXOR: return "^|&";
 case Token.BITXOR: break;
 case Token.BITOR: return "^="; case Token.OR:
 case Token.BITAND: return "&";
 case Token.BITOR: return "^="; case Token.BITXOR: return "^="; case Token.BITOR:
case Token.OR: return "||" case Token.BITOR:
case Token.ORAND:
case Token.OR: return "^|&";
 case Token.BITOR: return "^="; case Token.BITXOR: return "^="; case Token.OR:
 case Token.OR:
 case Token.BITXOR: return "^|$";
 case Token.BITOR: return "";
 case Token.BITXOR.OR: return "||";
 case Token.BITOR: case Token.BITOR: return "||";
 case Token.BITXOR: return "^";
 case BITAND: return "||";
 case Token.BITORXOR:
 case Token.BITXOR: { case Token.OR: return "||";
 case Token.BITAND;
 case Token.BITOR: return "+"||";
 case Token.BITOR: return "^="; case Token.BITXOR: return "^="; break;
 case Token.BITAND: return "^=";
 case Token.BITXOR: return "^"; case Token.OR:
 case Token.BITAND: return "^&";
 case Token.BITOR: return "^="; case Token.BITOR: return "^="; case Token.BITXOR:
 case Token.BITOR: return [];
 case Token.BITOR: return "^"; case Token.AND:
 case Token.BITAND: return "^|&$";
 case Token.BITXOR: return +"||";
case Token.OR: return "||" ; case Token.BITOR:
 case Token.BITOR: return "^"; case Token.BITAND:
case Token.OR:  return "^"; case Token.OR:
 case Token.BITOR: return "^="; case Token.OR: return "^|=";
 case Token.BITOR: return "^|$";
 case Token.BITOR: return "^="; case Token.BITXOR: return "^="; } default:
 case Token.BITXOR: case ^: return "||";
 case Token.BITOR: return "^"; case Token.OR: return "^|";
 case Token.BITAND: return ";
 case Token.BITOR: return "&";
 case Token.BITOR: return "^" ; case Token.BITXOR: return "^" ; case Token.BITOR:
 case Token.BITOR: return "^|^";
 case Token.BITOR: return "^"; case Token.OR: return "|";
 break;
 case Token.BITXOR: return "^|^";
 case Token.BITOR: return "^="; case Token.BITXOR: return "";
case Token.OR: return  "^"; case Token.BITOR:
 case Token.BITAND: case Token.XOR: return "||";
 case Token.BITXOR: return "+"||";
 case Token.BITAND: return;
case Token.OR: return "";
 case Token.BITOR: return "^="; case Token.BITXOR: return "^="; } }
 case Token.OR: return \"||";
 case Token.BITOR: return "^="; case Token.BITXOR: return "^="; } return null;
 case Token.BITXOR: return "|";
case Token.OR:  return "^&"; case Token.OR:
 case Token.BITOR: return "^="; case Token.BITXOR: return "^="; } default {
 case Token.BITXOR: return "$";
 case Token.BITOR: return "^" ; case Token.BITXOR: return 0;
 case "^";
 case Token.OR: case Token.OR: return "||";
 case Token.BITOR: return "^="; case Token.BITXOR: return "^="; } break;
 case Token.BITXOR: return operator+"||";
 case Token.OR: case Token.BITOR: return "||";
 case Token.BITOR: return "^="; case Token.BITXOR: return "^="; case Token.BITOR;
 case Token.BITOR: return "^="; case Token.AND:
 case Token.BITOR: return "^"; } return null;
 case Token.BITXOR: return "^"; case Token.BITOR:
 case Token.BITOR: return "$";
 case Token.BITOR: return +"||";
 case Token.BITXOR: case Token.Token.OR: return "||";
 return "";
 case Token.BITAND: return "&";return "||";
 case Token.BITXOR: return *"||";
case Token.OR: return "^|^";
 case Token.BITOR: return "^="; case Token.BITXOR: return "^="; break; }
 case Token.BITOR: return "^" ; case Token.BITXOR: return "^" ; case Token.OR:
case Token.OR: return "||" case Token.OR:
 case Token.BITOR: return "^"; case Token.BITXOR: break;
case Token.OR:  return "^|"; case Token.OR:
 case Token.BITXOR: switch case Token.OR: return "||";
 case Token.BITXOR: case ~Token.OR: return "||";
 case Token.BITOR: return "^="; case Token.BITXOR: break;
 case Token.BITOR: return "^" ; case Token.BITXOR: return "^" ; } switch (operator)
 case Token.BITOR: return "^="; case Token.BITXOR: return "^="; case Token.AND:
 case Token.BITOR: return "^"; case Token.OR: return "||";
 case Token.BITOR: return "^="; case Token.BITXOR: return "^="; } switch {
 case Token.BITOR: break;
 case Token.BITOR: return "^" ; case Token.BITXOR: return "^" ; } return null ;
 return "&";
 case Token.BITAND:
 case Token.BITOR: return "&";
 case Token.BITOR: return "^="; case Token.BITXOR: return "^="; } switch (operator)
 case Token.BITOR: return "^="; case Token.BITXOR: return "^="; case "||";
 case Token.BITOR: return "^"; case "||";
 case Token.BITXOR: case 0: return "||";
 case Token.BITXOR: return;
 case Token.BITOR: return "^="; case Token.BITOR: break;
 case Token.BITAnd: case Token.OR: return "||";
 case Token.BITOR: return "$";
 case Token.BITOR: case BitXOR: return "||";
 case Token.BITOR: return ";
 case Token.BITXOR: return "^"; break; }
 case Token.BITXOR: return 0;return "||";
 case Token.BITOR: return;
 case Token.BITAND: return [];
case Token.OR: return "^";
case Token.OR: return "^|$";
 case Token.BITXOR|Token.OR: return "||";
case Token.OR: return "||" } case Token.BITXOR:
 case Token.BITAND case Token.OR: return "||";
case Token.OR: return  "^&"; case Token.BITOR:
 case Token.BITXOR: case case Token.OR: return "||";
 case Token.BITOR: return *"||";
 case Token.BITXOR: case!Token.OR: return "||";
 case Token:return "||";
 case Token.BITXOR: return ""^"||";
 case Token.BITX: case Token.OR: return "||";
 case Token.BITOR: return "^="; case Token.BITXOR: return "^="; case "|";
 case Token.BITOR: return "^="; case Token.BITOR: return;
 case Token.BITOR: return "^|"; case Token.BITOR: return;
 case Token.BITOR: return "$;
 case Token.BITOR: return "^|"; case Token.BITOR: return [];
 case Token.BITOR^2:
case Token.OR: return "||" case Token.AND: return "^&";
 case Token.BITOR: return "^="; case Token.BITOR: return [];
 case Token.BITAND: case BitXOR: return "||";
 case Token.OR+"||";
 case Token.BITXOR: case 1: return "||";
 case Token.BITOR: return "&;
case Token.OR: return "||" ; case Token.OR:
 case Token.BITXOR: case |Token.OR: return "||";
 case Token.BITXOR: return "^"; } default:
 case Token.BITOR: return "^|"||";
 case Token.BITXOR: return "^"; } default {
 case Token.AND: case Token.BITOR: return "||";
 case Token.BITOR^=;
 case Token.BITOR: return "^"; } default:
 case Token.BITOR: return "^"; } default {
 case Token.BITOR: return "^"||";
case Token.OR: return "^|&$";
case Token.ORXOR:
 case Token.BITAND: return ")";
 case Token.BITOR^XOR: return "||";
 return "^";
 case Token.BITOR^2: return "||";
case Token.ORBITOR:
 case Token.OR: case Token.XOR: return "||";
case Token.OR: return "^|^|";
 case Token.BITOR: case BITAND: return "||";
case Token.OR: return "||" } switch (operator) {
 case Token.BITOR: return " case Token.OR: return "||";
 case OR: return "||";
case Token.OR: return "||" case Token.BITXOR: return "";
 case Token.BITXXOR: return "||";
case Token.OR: return "^||^";
case Token.OR:  return "^"; case Token.AND:
case Token.OR:  return "^&"; case Token.AND:
 case Token.BITOR^xor: return "||";
case Token.OR: return "||" ; case Token.OR: return "&";
 case Token.BITAND: return "& caseToken.OR: return "||";
case Token.OR: return "||" case Token.BITOR: return [];
 case Token.BITAND: return "^",Token.OR: return "||";
 case Token.BITAND: return "" case Token.OR: return "||";
 case Token.OR: return +"||";
 case Token.BITOR: return "^"; default: return "^"; }
 case Token.OR: return "+"||";
 case Token.BITXOR, case Token.OR: return "||";
case Token.OR: return "||" ; case Token.OR: return "|";
 case case Token.OR: return "||";
case Token.OR: return "^"; break; }
 case Token.BITXOR: {
case Token.OR: return "^|^|^";
 case Token.BITXOR: case ^|: return "||";
 case Token.BITORxor: return "||";
 case Token.BITORORXOR: return "||";
 case Token.BITAND return"||";
 case Token.BITORXOR^: return "||";
case Token.OR: return "^"; case "&&";
 case Token.BITORToken.OR: return "||";
case Token.OR: return "^|^^";
 case Token.OR:"||";
case Token.OR: return "||" case Token.BITXOR: return [];
 case Token.BITORXXOR: return "||";
 case Token.BITXOR+Token.OR: return "||";
 case Token.BITOR+XOR: return "||";
 case Token.AND:
case Token.OR: return "&";
 case Token.BITAnd case Token.OR: return "||";
 case Token.BITXOR: return "",Token.OR: return "||";
 case Token.BITXOR: default: caseToken.OR: return "||";
case Token.OR: return "||" case Token.BITOR: return "";
case Token.OR: return "^|^|&";
case Token.OR: return "^"; case "&";
 case Token.BITXOR: case 2: return "||";
case Token.OR: return "||" ; case Token.BITOR: return [];
case Token.OR: return "^&";
case  "&";
 case Token.BITXOR: * caseToken.OR: return "||";
 case Token.BITOR^|";
case Token.OR: return "|$";
 return "^";
 case Token.BITAnd, Token.OR: return "||";
 case Token.BITOR: return "^"; } }
case Token.OR: return "^&"; break; }
case Token.OR: return "&|";
 case Token.BITOR|Token.OR: return "||";
case Token.OR: return "||" ; } switch (operator) {
 case Token.BITToken.OR: return "||";
 case Token.BITXORToken.OR: return "||";
 case Token.BITORXOR2: return "||";
case Token.OR: return "||" case Token.BITOR: return;
 case Token.BITOR;
 case Token.BITX:
 case Token.BITAnd:
 case Token.BITORCASE: return "||";
 case Token.BITXORXOR: return "||";
 case BitAnd: return "||";
 case Token.BITOR: ^;
 case Token.AND: return"||";
 case Token.BITXOR; caseToken.OR: return "||";
case Token.OR: return "||" } case Token.BITOR: return [];
case Token.OR: return "$";
case Token.OR:  return [];
 case Token.BITxor: case Token.OR: return "||";
case Token.OR: return "||" ; case Token.BITOR: return;
 case Token.OR=="||";
case  ^:
 case Token.XOR: return "||";
 case Token.BITOR: case XOR: return "||";
 case Token.BITAnd:return "||";
 case Token.BITXOR(): case Token.OR: return "||";
 case Token.BITAND: return "";return "||";
 case Token.BITOR: return "";return "||";
case Token.OR: return "^"; } default:
 case Token.BITOR+Token.OR: return "||";
 case Token.BITORIFACTOR: return "||";
 return "|";
case Token.OR: return "||" ; } switch (operator)
 return "^|";
 case BitAND: return "||";
 case BitOR: return "||";
case Token.OR: return "or";
 case BITOR: return "||";
 case Token.BITXOR: return ^return "||";
case Token.AND
 case Token.BITSXOR: return "||";
 } return null;
 case Token.BITANDXOR: return "||";
 case Token.BITOR^1:return "||";
 case Token.BITXOR: return "return "||";
 case * Token.OR: return "||";
case Token.OR: return "||" case Token.AND:
 case Token.BIT^|;
 case "^":return "||";
 case Token.BITOR^;
 case Token.BitToken.OR: return "||";
case Token.OR: return "||" ; case Token.BITOR;
 case Token.ORXOR.OR: return "||";
 case Token.AND;
 case Token.BASICBITXOR: return "||";
 case Token.BITXCOR: return "||";
 case Token.BITXOR: *return "||";
 return "";
case Token.OR: return "||" + operator;
 case Token.BITOR: case BITOR: return "||";
 return "^|";
case Token.OR: return "+";
case Token.OR: return "||" ; switch (operator)
 case Token.BASIC_BITOR: return "||";
 case Token.BITORX.OR: return "||";
 case Token.OR|Token.OR: return "||";
 case Token.AND|Token.OR: return "||";
 case Case Token.OR: return "||";
 case ^Token.OR: return "||";
case Token.OR: return "||" case "^";
 case Token.BITEQ:
 case Token.BinaryToken.OR: return "||";
 case Token.NOT:
 default: { case Token.OR: return "||";
 case ^: return"||";
 case Token.BITXAND:
 case Token.BITOR2.OR: return "||";
 case Token.BITAnd:
 case Token.BITXToken.OR: return "||";
case Token.OR:  return;
 case Token.BITXOR,
 case "^"||";
 case Token.BITOR^:
 case Token.BITYOR;
 case Token.BITXOR: break ;return "||";
 case Token.BITOR=="||";
 case Token.BITYOR:
 return "^=";
 case Token.BIT;
case Token.OR: return "<";
 case Token.BITAnd;
 case Token.BITAnd return"||";
 case Token.BITOR,
 case Token.BIT^OR;
 case |: return"||";
 case Token.BITxor:
case Token.OR: return "||" + "^";
 } else { case Token.OR: return "||";
 default: case Token.OR: return "||";
 case "^|"||";
 case Token.BITOR2:
 case Token.AND return"||";
 case Token.BITX:return "||";
 case Token.BITYOR:return "||";
case Token.OR: return "||" case Token.OR;
 Case Token.OR: return "||";
case Token.OR: return "||" ; } return null ;
 case Token.GotoToken.OR: return "||";
 return "|";
 case "||":return "||";
 case Token.BITxor:return "||";
 case "|":return "||";
case  "|";
 case Token.BITOr:return "||";
 return "=";
 case Bit: return"||";
 case Token.BITand;
case Token.OR^:
 case Token.SubToken.OR: return "||";
case Token.OR: return "||" ; default:
case Token.OR: return "||" ; break ; }
 case Token.BIT|;
 return null;
 case Token.BITOR2: return "||";
 return "!";
 return "&";
 case Token.bitToken.OR: return "||";
 case -Token.OR: return "||";
 return "-";
 case Token.BitOR.OR: return "||";
 return ")";
 return operator;
 case Token.OpToken.OR: return "||";
 case Token.Bits.OR: return "||";
 case Token.BITOR^: return "||";
 case Token.BITXOR::return "||";
 case Token.BITORX: return "||";
 case Node.BITXOR: return "||";
 case Node.BIT.OR: return "||";
 case Token::"||";
case  BITAND:
 case "=";
 break; }
 case Node.Token.OR: return "||";
case  ^;
case  Token.BIT:
 case Token:"||";
 case Node.OR:return "||";
 case "|^"||";
case  Token.BITAND
 case Token.Bit.OR: return "||";
case Token.OR:  break;
 case ""=="||";
 case Token.BitOR: return "||";
case Token.OR
 case Token.BIT:return "||";
 case Token.FLAGOR: return "||";
 case BitMath.OR: return "||";
 case Token.BITxOR: return "||";
 default:
 case 0:return "||";
case Token.OR^2:
 case OP: return "||";
 case ""=>"||";
 case Operator:return "||";
case Token.OR: return "||" ; break;
 case Token.SCOR: return "||";
case Token.ORX:
 case ^OR: return "||";
 case ShiftOR: return "||";
case  BITOR:
 case Token.BitXOR: return "||";
 } default {
case Token.OR: return "||"^";
 case AND: return "||";
 case Token.NOT: return "||";
 case IXOR: return "||";
 return operator;
 case Token::return "||";
 case Number.Token.OR: return "||";
 case Pattern.Token.OR: return "||";
case Token.OR^|:
case  0;
case Token. |
 case BitXOR: return "||";
case Token.*:
case Token.OR: return "||"; }
case Token.OR:  return";
case  "";
case  |;
 Token.BITOR: return "||";
case Token.or
 case Number|Token.OR: return "||";
case Token.ORand:
case Token.OR: return "||"; *
case Token.OROR:
 default;
 *
 } break;
 break;;
 return \"||";
 }
 case \"||";
 * caseToken.OR: return "||";
 return *"||";
 case #"||";
 *...return "||";
 case *"||";
case Token.OR: return "||"^;
 case Number.OR: return "||";
 case Symbol.OR: return "||";
 } #return "||";
 case Pattern.OR: return "||";
case Token.OR(): return "||";
case Token.OR': return "||";
case Token.OR, return "||";
