case Token.MUL: return "*";
case Token.MUL:
 case Token.MUL;
case Token.MUL: return "*=";
 case Token.ASSIGN_MUL: return "*";
 Token.MUL: return "*";
 case Token.BITMUL: return "*";
case Token.MUL: return "*" ; case Token.SUB:
 case Token.SUB:
case Token.MUL: return  "*="; case Token.SUB:
case Token.MUL:  return "*="; case Token.DIV:
 case Token.LE: case Token.MUL: return "*";
 case Token.DIV:
case Token.MUL: return "*" ; case Token.ADD:
 case Token.LE: return ">="; case Token.SUB:
 case Token.LE; case Token.MUL: return "*";
 case Token.LE: return ">=";
 case Token.SUB: case Token.MUL: return "*";
 case Token.LE: return "*=";
 case Token.LE: return "<=";
 case Token.ADD:
 case Token.LE: return "<="; caseToken.MUL: return "*";
 case Token.LE: return "<"; case Token.MUL: return "*";
 case Token.LE: return ">="; case Token.ADD:
 case Token.LE: return "<=";
case Token.MUL: return "%";
 case Token.GE: return ">=";
 case Token.LE: return "<";
 case Token.LE: return ">=";
 case Token.GE_MUL: return "*";
 case Token.GT_MUL: return "*";
 case Token.LE: return ">>=";
 case Token.GE: case Token.MUL: return "*";
 case Token.GE: case Token.GE_MUL: return "*";
case Token.MUL:  return "*="; case Token.ADD:
 case Token.UL:
 case Token.LE: return ">>>=";
 case Token.MUL: return *"*";
 case Token.GE: return ">="; case Token.SUB:
 case Token.GE|Token.MUL: return "*";
 case Token.LE: return "<="; case Token.SUB:
 case Token.LE: return ">>="; case Token.SUB:
 case Token.LE: return ">="; case Token.ADD: return "+";
 case Token.LE: return ">=";return "*";
 case Token.LE: case Token.BITMUL: return "*";
 case Token.LE:return "*";
 case Token.GE: return ">="; case Token.LE: return ">=";
 case Token.ASSIGN.MUL: return "*";
 case Token.LE: return "<;
 case Token.LE: return "%;
 case Token.GE; case Token.MUL: return "*";
 case Token.GE: return ">="; case Token.LE: return ">="; case Token.SUB:
 case Token.LE: return ">="; case Token.SHNE: return ">=";
 case Token.LE: return ">="; case Token.ADD: return;
 case Token.LE: return "%"; case Token.MUL: return "*";
 case Token.LE: return "<>=";
case Token.MUL: return "*" ; case Token.DIV:
 case Token.LE: return ">="; case Token.LE: return ">=";
 case Token.LE: return ">>="; case Token.ADD:
 case Token.LE: case Token.LEMUL: return "*";
 case Token.LE: return ">="; case Token.GE: return ">="; case Token.SUB:
 case Token.LE: return ">="; case Token.OR: return "|=";
case Token.MUL: return "%=";
 case Token.GE: return ">="; case Token.LE: return "<=";
 case Token.GE: return ">="; case Token.ADD:
 case Token.GE: return ">="; case Token.LE: return ">="; case Token.LT: return "<";
 case Token.LE: return ">="; case Token.OR: return "||";
 case Token.LE: return "<<=";
 case Token.GE: case Token.BITMUL: return "*";
 case Token.LE: return "%=";
 case Token.GE: return ">=";return "*";
 case Token.LE: case Token.LT: return "*";
 case Token.GE: return ">="; case Token.LE: return ">="; case Token.SUB;
 case Token.UL: return "*";
 case Token.LE: return ">=" case Token.SUB:
 case Token.LE: return ">="; case Token.ADD: return [];
 case Token.LE: return ">="; case Token.GE: return ">="; case Token.ADD: return "+";
 case Token.GE: return ">="; case Token.LE: return ">>=";
 case Token.LE: return ">="; case Token.OR: return ">=";
 case Token.NEG: return ">=";
 case Token.GE: return ">="; case Token.LE: return ">="; case Token.LT: return "<=";
 case Token.GE: return "%=";
 case Token.GE: return "=";
 case Token.GE: return ">=";
 case Token.GE: return ">="; case Token.GT: return ">="; case Token.ADD: return "+";
 case Token.LE: return ">="; case Token.GE: return ">="; case Token.SUB;
 case Token.BIG: return ">=";
 case Token.LE: return "<="; case Token.ADD:
 case Token.LE: return "<="; return "<=";
 case Token.GE: return *"*";
 case Token.GE: return "*=";
 case Token.LE: return ">="; case Token.OR: return "|";
 case Token.GE: return ">="; case Token.LE: return ">="; case Token.ADD:
 case Token.LE: return ">="; case Token.ADD;
 case Token.LE: return ">="; case Token.ADD: return "*";
case Token.MUL: return "*" ; case Token.ADD: return "+";
 case Token.LE: return "<>";return "*";
 case Token.LE: return ">="; case Token.GE: return ">="; case Token.GT: return "<=";
 case Token.GE: return ">="; case Token.LE: return ">="; case Token.GT: return "<";
 case Token.LE: return ">="; case Token.GE: return ">="; case Token.GT: return "<";
 case Token.MUL: return "*<=";
 case Token.LE: return ">="; case Token.GE: return ">="; case Token.ADD: return;
 case Token.LE: return "=";
 case Token.LE: return ">="; case Token.GE: return ">="; case Token.GT: return ">";
 case Token.LE: return "+"; case Token.MUL: return "*";
 case Token.GE: return "%;
 case Token.GE: return ">="; case Token.LE: return "<="; case Token.SUB:
 case Token.LE: return "<";
 case Token.LE: return "+="; caseToken.MUL: return "*";
 case Token.DIV: return "*=";
 case Token.LE: return ">="; case Token.GE: return ">="; case Token.LT: return "<=";
 case Token.LE: return ">="; case Token.ADD: return ",
 case Token.GE: return "%"; case Token.MUL: return "*";
 case Token.LE: return "%="; caseToken.MUL: return "*";
 case Token.UL;
 case Token.LE: case Token.LE_MUL: return "*";
 case Token.GE: return ">="; case Token.GT: return ">="; case Token.ADD: return;
 case Token.GE: return ">="; case Token.LE: return ">="; case Token.LT: return;
 case Token.GE: return ">="; case Token.LE: return "<>=";
 case Token.LE: return ">="; case Token.GE: return ">="; case Token.ADD: return [];
 case Token.LE: return ">>=";return "*";
 case Token.GE: return ">="; case Token.LE: return ">="; case Token.GT: return "<=";
 case Token.LE: return "< case Token.MUL: return "*";
 case Token.LE: return "<>=";
 case Token.GE: return ">="; case Token.LE: return ">="; case Token.ADD;
 case Token.LE: case Token.LT_MUL: return "*";
 case Token.LE: return ">="; return ">";
 case Token.LE|Token.MUL: return "*";
 case Token.LE: return ">>";
 case Token.GE: return ">="; case Token.LE: return ">="; case Token.MOD:
 case Token.GE: return ">="; case Token.LE: return ">="; case Token.ADD: return;
 case Token.LE: return *"*";
 case Token.LE: return ">="; case "*";
 case Token.LE: return "";
 case Token.LE: return ">="; case Token.SHNE: return ">==";
 case Token.LE: return ">="; return "<=";
 case Token.LE: return ">="; case Token.ADD: return "%";
case Token.MUL: return [];
 case Token.LE: return ">="; case Token.OR: return "|>=";
 case Token.LE: return ">="; case Token.OR: return "|" ; case Token.ADD:
 case Token.LE: return ">="; case Token.INS: return "%";
 case Token.LE: return ">="; case Token.OR: return "|" + operator;
 case Token.LE or Token.MUL: return "*";
 case Token.LE: return "<>";
case Token.MUL: return "*="; case "~";
case Token.MUL: return "*" ; case Token.ASSIGN_DIV:
case Token.MUL:  return "*="; case Token.OR:
 case Token.LE"; case Token.MUL: return "*";
 case Token.MUL: return \"*";
 case Token.NEG: case Token.BITMUL: return "*";
 case Token.GT.MUL: return "*";
 case Token.NEG: return "<"; caseToken.MUL: return "*";
case Token.MUL: return  ">="; case Token.SUB:
case Token.MUL: return "*" ; case Token.IGN_DIV:
 case Token.NEG: case Token.POS: return "*";
 case Token.LE: return ">="; return "<=";
 case Token.MUL: case Token.SHMUL: return "*";
 case Token.DIV: return "<";
 case Token.NEG: case case Token.MUL: return "*";
 case Token.ADD: return "+";
 case Token.MUL: return "*==";
 case Token.LE: return ">="; return "<>";
 case Token.DIV: return"*";
 case Token.GE: return ">="; case Token.LE: return ">="; return "<=";
 case Token.LE: return ">>"; caseToken.MUL: return "*";
 case Token.GE: return ">";return "*";
 case Token.LE: return "<<";
 case Token.LE: return ">="; return ">>";
 case Token.LE: return ">=>";
 case Token.LE: return "<";return "*";
 case Token.GE: return ">="; case Token.LE: return ">==";
 case Token.GE: return ">";
 case Token.LE: return ">";
 case Token.LE: return ">==";
 case Token.MUL: return "*="; default:
 case Token.SUB, case Token.MUL: return "*";
 case Token.GE: return "*=": return "*";
 case Token.LE: return ">="; case Token.SHNE: return ">="; }
 case Token.GE.ASSIGN_MUL: return "*";
 case Token.LE: return "" case Token.MUL: return "*";
 case Token.LE: return %;
 case Token.LE: return ">>==";
 case Token.MUL: return +"*";
 case Token.UB:
 case Token.MUL: return "*="; break;
 case Token.GE: return ">="; case Token.LE: return ">="; case "<<";
 case Token.BIG: return *"*";
 case Token.NEG: return "" case Token.MUL: return "*";
case Token.MUL: return "*" ; case Token.OR:
 case Token.LE: case Token.LMUL: return "*";
case Token.MUL: return;
 case Token.DIV: case Token.MUL: return "*";
 case Token.MUL: return "*="; return "";
 case Token.GE: return ">==";
 case Token.LE: return "<="return "*";
 case Token.MUL: return '"*";
 case Token.GE+Token.MUL: return "*";
case Token.MUL: return "*" ; case Token.DIV: return "+";
 case Token.GE: return ">="; case Token.LE: return ">="; return ">";
 case Token.LE: return "<<<";return "*";
 case Token.MUL: return "*="; return "%";
 case Token.DIV;
 case Token.LE: return ">>";return "*";
case Token.MUL: return "*="; return "%=";
 case Token.DIV:
 case Token.GE: return ">="; case Token.LE: return ">="; case ">";
 case Token.CUSTOM_MUL: return "*";
 case Token.DIV: return "";
 case Token.GE: return ">="; case Token.LE: return ">="; case ">>";
case Token.MUL: return "*" ; case Token.DIV: return "%";
 case Token.LE: return " case Token.MUL: return "*";
case Token.MUL: return "*="; case "+=";
case Token.MUL: return "*" ; case Token.NEG: return;
 case Token.LE: return ">";return "*";
 case Token.SUB,
 case Token.MOD:
 case Token.DIV: return ">";
 case Token.DIV: return "%";
 case Token.GE: return"*";
 case Token.SUB;
 case Token.LE: return "%";return "*";
 case Token.LE: return ">="; case Token.GE: return ">="; return "<";
 case Token.SUB; caseToken.MUL: return "*";
 case Token.LE: return ">="; break;
 case Token.LE, Token.MUL: return "*";
 case Token.GE: return ">"; default: return "*";
case Token.MUL: return "*="; case "-";
 case Token.LI:return "*";
case Token.MUL: return "*" ; case Token.ADD: return "+=";
case Token.MUL: return "*="; case "=";
case Token.MUL: return *;
 case Token.NEG: case 0: return "*";
 case Token.DIV: return "%";
 case Token.ADD: return "+
 case Token.MOD:
 case Token.LE: case Token.LE: return "*";
 case Token.MUL: return "*="; case "" :
 case Token.LETE_MUL: return "*";
 case Token.MUL: return "*="; }
case Token.MUL: return "*" case Token.SUB:
 case Token.ADD: return ",
 case Token.LE: return "%";
 case Token.LSH: case Token.MUL: return "*";
 case Token.MUL: return "%";return "*";
 case Token.ADD: return [];
case Token.MUL: return "*" ; case Token.DIV: return "";
 case Token.MUL: return "<>"*";
 case Token.LE: return "<"*";
 case Token.DIV: return;
 case Token.LE: return ">="; case Token.GE: return ">="; case 0:
 case Token.LE: case Token.LCMUL: return "*";
 case Token.LE: return ">=<>";
 case Token.LE: return ">="; case Token.GE: return ">="; case *:
 case Token.LE: return "<="; return ">>";
 case Token.GE: return ">="; case Token.LE: return ">="; case 0:
 case Token.GE: return ">="; case Token.LE: return ">="; case *:
 case Token.LE: return "<="; return ">";
 case Token.SHGT: case Token.MUL: return "*";
 case Token.NEG: return ">: return "*";
case Token.MUL: return "*" ; case Token.NEG: return "+";
 case Token.MUL: return "%=>"*";
 case Token.LE: return ">="; case Token:
 case Token.LSH:
case Token.MUL: return "<=";
 case Token.SHMUL: return "*";
 case Token.LE: return "*=": return "*";
 case Token.LE||Token.MUL: return "*";
 return "<=";
case Token.MUL: return "*="; case "";
 case Token.GE-SUB-MUL: return "*";
 case Token.GE: return :"*";
 case Token.GT-MUL: return "*";
 case Token.MUL: return "%=="*";
case Token.MUL: return "%*=";
 case Token.GE: return +"*";
 case Token.MUL: return "%"+"*";
 case Token.DIV: break;
case Token.MUL: return "*" ; case Token.ADD: return;
case Token.MUL: return "*" ; } switch (operator) {
 case Token.MUL: return "<=>"*";
 case Token.MUL: return "~"*";
 case Token.GE.SUB.MUL: return "*";
case Token.MUL: return "*" ; case Token.ADD: return [];
case Token.MUL: return %;
 case Token.GE: return "";return "*";
 case Token.DIV: return [];
 case Token.ADD;
 case Token.NEG: return 0|Token.MUL: return "*";
 case Token.BIG: return "<="+"*";
 case Token.OR: return [];
 case Token.LE: return "";return "*";
 case Token.LE_MUL: return "*";
 case Token.MUL: return "<="+"*";
 case Token.NEG: return "<="+"*";
 case Token.RSH:
 case Token.LE: %;
 case Token.MOD: return;
 case Token.LE: return "<"; case IN: return "*";
 case Token.ADD:
 case Token.MOD;
case Token.MUL: return "%;
case  "*";
 case Token.GE.MUL: return "*";
case Token.MUL: return  "*="; case Token.SUB,
 case Token.LEI|Token.MUL: return "*";
 case Token.LT_MUL: return "*";
 case Token.MOD:return "*";
case Token.MUL: return "*" ; case Token.NEG:
 case Token.UL: return;
 case Token.NEG: case 1: return "*";
 case Token.NEG: case!Token.MUL: return "*";
case Token.MUL: return "*="; case %:
 case Token.SUB,|Token.MUL: return "*";
 case Token.SUB, orToken.MUL: return "*";
 case Token.GT+MUL: return "*";
 case Token.MIN:
 case Token.ADD: return;
 case Token.SHNE: caseToken.MUL: return "*";
 case Token.NEG: case -Token.MUL: return "*";
 case Token.GT|Token.MUL: return "*";
 case Token.UPLOAD_MUL: return "*";
 }
 case Token.MOD: break;
 case Token.GTEQ: return "*";
case Token.MUL: return "*" ; case Token.OR: return [];
case Token.MUL: return "";
 case Token.Mul;
 case Token.NEGMUL: return "*";
 case Token.LE: return ">="; } }
case Token.MUL: return "*" case Token.ADD:
 case Token.MULT:return "*";
 case Token.LEMUL: return "*";
 case Token.LE+1;
case Token.MUL: return "*" ; } return null ;
 case Token.SUB: case!Token.MUL: return "*";
 case Token.GT+Token.MUL: return "*";
 case Token.LEQMUL: return "*";
 case Token.UL: break;
 case Token.MUL: return "*="; } }
 case Token.GE-TEST-MUL: return "*";
 case Token.SUB: case -Token.MUL: return "*";
 case Token.NEG: case *: return "*";
 return "%=";
 case Token.NEG: return "<="|"*";
 case Token.MUL,
case Token.MUL: return "*" ; case Token.INSH:
 case Token.LE: return ">="; break };
 case Token.NEG: case *Token.MUL: return "*";
 case Token.Token.MUL: return "*";
case  "~";
 case Node.ASSIGN_MUL: return "*";
 case token.ASSIGN.MUL: return "*";
 case Token: return"*";
 case Token.ADD;
 case Token.Mul:return "*";
 case Token.LEU|Token.MUL: return "*";
 return "<=";
case Token.MUL: return "*" ; return "";
case Token.MUL: return "*"; }
case Token.MUL: return "<*=";
 return "<";
case Token.MUL: return "*" ; } return "" ;
 return "%=";
case Token.MUL: return "+";
 case Token.MIN;
 case Token.NEG, MUL: return "*";
 return ">";
 case Token.NEG_MUL: return "*";
 case Token.MULR: return "*";
 case Token.NEGATIVE_MUL: return "*";
 case Token.Mul:
 case Token.LT.MUL: return "*";
 case Token.ORMUL: return "*";
 case (int)Token.MUL: return "*";
 case Token.SUB.MUL: return "*";
 case "*":return "*";
 return ">>";
 case Token.Gt*: return "*";
 case Token.MUL2: return "*";
case Token.DIV
 case "<<";
case  ">";
 case Token.LE: return *return "*";
 case Token.SUB_MUL: return "*";
 case "":return "*";
 case Token.LE: return "return "*";
 case Node.MUL:
case Token.MUL: return "*" ; case "-" :
 case Parser.MUL: return "*";
 case -1:return "*";
 return "=";
 case Token.GLEQ_MUL: return "*";
 case Token.NEG:return "*";
 case Token.DIV :"*";
 case Node.MUL;
 case Token.TGT_MUL: return "*";
 case "*", Token.MUL: return "*";
 case Token.COUNT:return "*";
 case Token.GE: return "return "*";
 case Token.DIV=="*";
case Token.MUL: return";
 case Pattern.Token.MUL: return "*";
 case Token:MUL;
 case Token.GE: return *return "*";
 case ">":return "*";
 case Token.NEG, |MUL: return "*";
 case Token.UL return"*";
 case Token.MIN return"*";
 case Token.UL #"*";
 case "%: return"*";
 case W Token.MUL: return "*";
 case "+: return"*";
 case Token.NE.MUL: return "*";
 break;
 case MUL: return "*";
 case null:return "*";
 case *:return "*";
 case Token.LE: return...return "*";
 return ">";
 case Token.NSMUL: return "*";
 case case Token.MUL: return "*";
 case Node.Token.MUL: return "*";
 return "%;
case Token.MUL: return "*" ; default:
case  "+=";
 return "";
 case Token.NEG.MUL: return "*";
 case Token.OR.MUL: return "*";
case Token.MUL: return++;
case Token.MUL: return "*" ; case "";
 case Token.USMUL: return "*";
case Token.MUL: return "*" + "%";
 case token.MUL;
 return "+=";
case Token.MUL: return "*" ; } break ;
case  "^";
case  "%";
case Token.MOD
 case ">="return "*";
 case "=="*";
 case Node.MUL: return "*";
case Token.MUL: return "*" + 1;
 case ""=="*";
case  %;
 case Token.MIX: return "*";
 case SUB: return "*";
 default:
 return "%";
 case Number|Token.MUL: return "*";
 case PLUS: return "*";
 case "+";
 case!Token.MUL: return "*";
 case (char)Token.MUL: return "*";
case Token.ADD
 case WORD: return "*";
 case ">",Token.MUL: return "*";
 case "UL: return "*";
case  "";
 } case Token.MUL: return "*";
 case *Token.MUL: return "*";
 return "";
 case Number.Token.MUL: return "*";
case Token.MUL: return "*" + "%;
 case SIZE: return "*";
 default: }
 case LE: return "*";
case Token.MULT:
 case Token.NToken.MUL: return "*";
case  0:
 case -Token.MUL: return "*";
case Token.MULA:
 case Token:"*";
case Token.MUL2:
case  "":
 case ""=>"*";
 case Pars Token.MUL: return "*";
 return "<;
 Case.MUL: return "*";
 case ^Token.MUL: return "*";
 case ""|"*";
 case IN: return "*";
 case.MUL: return "*";
 token.MUL: return "*";
case Token.*:
case Token.UL
 case Token::return "*";
case Token.MUL8:
 Node.MUL: return "*";
 return ";
 return *"*";
 switch {
 return "<"*";
case Token.MUL: {
case Token.MUL2;
 return :"*";
 return #"*";
case Token.MUL: return "*"break }
 case Number.MUL: return "*";
 case Symbol.MUL: return "*";
 } #return "*";
 case
case Token.MUL, return "*";
case Token.MUL': return "*";
case Token.MUL.: return "*";
