 case Token.BITOR:  return 5;
case  Token.BITOR:
 case Token.COMMA:
 case Token.COMMA:return 5;
 case Token.BITXOR:  return 5;
 case Token.BITXOR:
case  Token.BITXOR:
 case Token.ASSIGN_BITOR:  return 5;
 case Token.OR: case Token.BITOR:  return 5;
case Token.BITOR:  return 5; case Token.BITXOR:
 case Token.OR: case Token.OR_BITOR:  return 5;
case Token.BITOR:  return 5; case Token.BIT:
 case Token.BITOR: return -5;
 case Token.BIT:
case Token.BITOR:  return 5; case Token.COMMA:
 case Token.5;
case Token.BITOR:  return 5; case Token.BITOR:
 case Token.BITOR return 5;
 case Token.OR:
 case Token.OR:  return 5;
 case Token.COMMA: case Token.BITOR:  return 5;
case Token.BITOR:  return 5; case Token.BITOR: return 6;
 case Token.EQ: case Token.NE: case Token.SHEQ:
 case Token.EQ: case Token.NE: case Token.SHEQ: case Token.SHNE: return 4;
 case Token.EQ: case Token.NE: case Token.SHEQ: case Token.SHNE:
 case Token.AND:
 case Token.EQ: case Token.NE: case Token.SHNE:
 case Token.EQ: case Token.NE: case Token.SHNE: return 4;
 case Token.EQ: case Token.NE: case Token.SHEQ: case Token.BITXOR:
 case Token.EQ: case Token.NE: case Token.SHEQ: case Token.SHNE: return 5;
 case Token.BITOR:5;
 case Token.OR case Token.BITOR:  return 5;
 case Token.AND: case Token.BITOR:  return 5;
 case Token.COMMA;
 case Token.OR: case Token.COMMA:  return 5;
 case Token.OR: case Token.BITBITOR:  return 5;
 case Token.BITOR5;
 case Token.EQ: case Token.NE: case Token.SHEQ: return 4;
 case Token.EQ: case Token.NE: case Token.SHEQ: case Token.OR:
case Token.BITOR:  return  5; case Token.AND:
case  BITOR:
case Token.BITOR:  return  6; case Token.BITXOR:
 case Token.NOT: case Token.BITOR:  return 5;
 case Token.OR: case Token.AND:  return 5;
 case Token.BITOR: case Token.BITOR:  return 5;
 case Token.NOT: case Token.NOT_BITOR:  return 5;
 case Token.BITXOR;
 case Token.EQ: case Token.NE: case Token.SHEQ: return 5; case Token.COMMA:
 case Token.EQ: case Token.NE: case Token.SHEQ: case Token.NE:
 case Token.EQ: case Token.NE: case Token.SHEQ: case Token.BITEQ:
case Token.BITOR:  return  5; case Token.OR:
case Token.BITOR:  return  5; case Token.BITAND:
 case Token.AND:return 5;
 case Token.EQ: case Token.NE: case Token.SHNE: return 5;
 case Token.EQ: case Token.NE: case Token.NE: case Token.SHNE:
 case Token.EQ: case Token.NE: case Token.SHEQ: return 5; case Token.BITXOR:
 case Token.EQ: case Token.NE: case Token.SHNE: case Token.SHNE:
 case case Token.BITOR:  return 5;
 case Token.AND: case Token.AND_BITOR:  return 5;
 case Token.OR: case Token.ORBITOR:  return 5;
 case Token.EQ: case Token.NE: case Token.NE: return 4;
case Token.BITOR:  return 5; case Token.BITOR: return 5;
 case Token.OR:
case Token.BITOR:  return  6; case Token.BITOR:
 case Token.EQ: case Token.NE: case Token.SHEQ: case Token.SHNE: return 6;
 case Token.NOT: case Token.COMMA:  return 5;
 case Token.EQ: case Token.NE: case Token.SHNE: case Token.OR:
 case Token.OR: return 5;
 case Token.EQ: case Token.NE: case Token.SHEQ: return 5; case Token.OR:
 case Token.EQ: case Token.NE: case Token.SHEQ: return 5;
 case Token.EQ: case Token.NE: case Token.SHEQ: return 4; case Token.COMMA:
 case Token.BITBITOR:  return 5;
 case Token.BITOR: case Token.AND:  return 5;
 case Token.EQ: case Token.NE: case Token.NE: case Token.SHEQ:
 case Token.EQ: case Token.NE: case Token.SHEQ: case Token.AND:
 case Token.EQ: case Token.NE: case Token.SHEQ: case Token.BITNEG:
 case Token.EQ: case Token.NE: case Token.SHNE: case Token.SHEQ:
 case Token.BITOR: return;
 case Token.OR: case Token.NBITOR:  return 5;
 case Token.EQ: case Token.NE: case Token.SHEQ: return 4; case Token.BITXOR:
 case Token.EQ: case Token.NE: case Token.NEQ: return 4;
 case Token.NEG: case Token.POS:  return 5;
 case Token.EQ: case Token.NE: case Token.SHEQ: return 4; case Token.OR:
 case Token.AND case Token.BITOR:  return 5;
 case Token.BITOR: return 5; case Token.BITXOR:
 case Token.OR: case Token.AND_BITOR:  return 5;
 case Token.BITOR: case Token.OR:  return 5;
 case Token.BITOR: return 5;
 case Token.EQ: case Token.NE: case Token.SHNE: case Token.AND:
 case Token.COMMA: return 5;
case Token.BITOR:  return  6; case Token.COMMA:
 case Token.EQ: case Token.NE: case Token.NE: return 5;
 case Token.EQ: case Token.NE: case Token.SHNE: case Token.BITEQ:
 case Token.EQ: case Token.NE: case Token.SHEQ: case Token.BITSIDE:
 case Token.EQ: case Token.NE: case Token.NE: case Token.OR:
 case Token.COMMA_BITOR:  return 5;
 case Token.EQ: case Token.NE: case Token.SHEQ: return 5; case Token.AND:
 case Token.BITOR: return 5 case Token.BITOR:  return 5;
 case Token.EQ: case Token.NE: case Token.COMMA:
 case Token.EQ: case Token.NE: case Token.SHEQ: case Token.SHNEGE:
 case Token.EQ: case Token.NE: case Token.SHEQ: return 5; case Token.NOT:
 case Token.AND: case Token.BITBITOR:  return 5;
 case Token.EQ: case Token.NE: case Token.SHNEQ:
 case Token.BITOR: return 5; case Token.COMMA:
 case Token.OR: return 5; case Token.COMMA:
 case Token.OR: return 5; case Token.BITXOR:
 case Token.EQ: case Token.NE: case Token.SHNE: return 6;
 case Token.NOT: case Token.NBITOR:  return 5;
 case Token.OR_BITOR:  return 5;
 case Token.EQ: case Token.NE: case Token.SHEQ: case Token.SHNE: case Token.OR:
 case Token.OR: case Token.OR:BITOR:  return 5;
 case Token.BIT;
 case Token.EQ: case Token.NE: case Token.NEQ: return 5;
 case Token.OR: case Token.COMMA:
 case Token.BITOR: return 4 case Token.BITOR:  return 5;
case Token.BITOR:  return  6; case Token.BIT:
case Token.BITOR:  return 5; case Token.BITAND: return 5;
 case Token.AND_BITOR:  return 5;
 case Token.BITOR;
 case Token.EQ: case Token.NE: case Token.SHEQ: case Token.BITXOR;
 case Token.EQ: case Token.NE: case Token.SHEQ: case Token.SHNE: case Token.AND:
 case Token.OR: return 5; case Token.AND:
case Token.BITOR:  return 5; case Token.BITAND: return 6;
case Token.BITOR:  return  5; case Token.ADD:
 case Token.AND:
 case Token.EQ: case Token.NE: case Token.SHEQ: return 5; case Token.OR: return 6;
 case Token.BITOR: return 4;
 case Token.EQ: case Token.NE: case Token.SHEQ: case Token.SHNE: case Token.ADD:
 case Token.BITOR: return 5; case Token.AND: return 6;
 case Token.ADD: case Token.BITOR:  return 5;
 case Token.EQ: case Token.NE: case Token.NEQ:
 case Token.EQ: case Token.NE: case Token.LEQ:
 case 5;
 case Token.NOT: case Token.NOT:  return 5;
 case Token.EQ: case Token.NE: case Token.SHEQ: case Token.SHNE: case Token.NOT:
 case Token.EQ: case Token.NE: case Token.SHEQ: case Token.SHNE;
 case Token.BITOR 6;
 case Token.BITEQ:
 case Token.CUSTOM_BITOR:  return 5;
case  Token.BITOR: return - 1;
 case Token.NOT: case Token.COMMA:
 case Token.EQ: case Token.NE: case Token.NE: return 6;
 case Token.NOT: case Token.NOT: case Token.COMMA:
 case Token.OR|Token.BITOR:  return 5;
 case Token.BITOR: return 5; case Token.AND:
 case Token.BITOR-5;
case  Token.SUB: return 5;
 case Token.OR: return 5; case Token.BITOR:
 case Token.BITOR: case case Token.BITOR:  return 5;
 case Token.EQ: case Token.NE: case Token.SHEQ: case Token.SHNE,
case Token.BITOR:  return 5; case Token.COMMA: return 6;
 case Token.EQ: case Token.NE: case Token.SHEQ: case Token.SHNE: return 4; switch
 case Token.NOT: case Token.POS:  return 5;
 case Token.BITOR 1;
 case Token.BIT-BITOR:  return 5;
 case Token.UNIQUE_BITOR:  return 5;
 case Token.XOR: case Token.BITOR:  return 5;
 case Token.EQ: case Token.NE: case Token.SHEQ: case Token.SHNE: return 5; switch
 case Token.BITOR: return 5-5;
 case Token.BITOR 2;
 case Token.EQ: case Token.NE: case Token.SHEQ: case Token.SHNE: return 4; case
 case Token.NOT:
 case Token.BITOR=5;
 case Token.AND: case Token.OR:  return 5;
 case Token.EQ: case Token.NE: case Node.SHEQ:
 case Token.BIT:  return 5;
 case Token.COMMA: return 4;
 case Token.OR: case Token.OR:  return 5;
 case Token.EQ: case Token.NE: case Token.SHNEE:
 case Token.BIT5;
 case Token.BITOR: return 5; case Token.OR:
 case Token.BITOR*5;
 case Token.OR: case Token.OR: case Token.COMMA:
 case Token.BITORAND:  return 5;
 case Token.OR: return 5; case Token.AND:
 case BITOR:  return 5;
case Token.BITOR:  return  7; case Token.BITXOR:
 case COMMA:  return 5;
 case Token.NOT:return 5;
 case Token.BITORX:  return 5;
 case Token.BITOR: return 5.5;
 case Token.BigBITOR:  return 5;
 case Token.BITOR: case |Token.BITOR:  return 5;
 case Token.OR: return 5; case Token.BITOR:  return 5;
 case Token.COMMA.BITOR:  return 5;
 case Token.COMMA:
 case Token.COMMA: case Token.COMMA:
 case Token.BASIC_BITOR:  return 5;
 case Token.OR: case Token.AND:
 case Token.OR: return 4;
 case Token.ADD:
 case Token.return 5;
 case Token.COMMA: case |Token.BITOR:  return 5;
 case Token.COMMA: case ^Token.BITOR:  return 5;
 case Token.ASIGN_BITOR:  return 5;
 case Token.BITOR: return 0x5;
case Token.BITOR:  return  5; case Token.BITEQ:
 case Token.OR: case Token.OR: return 4;
 case Token.EQ: case Token.NE: case Token.SHEQ;
 case Token.EQ: case Token.NE: case Token.SHNE: case Token.OR;
 case Token.OR: case Token.OR: return 5;
 case Token.BITOR: case!Token.BITOR:  return 5;
 case Token.MASK_BITOR:  return 5;
 case Token.EQ: case Token.NE: case Token.SHEQ: return 4,
 case Token.BITORCASE:  return 5;
 case Token.COMMA: return -5;
 case Token.COMMA: case Token.BITXOR:
 case Token.EQ: case Token.NE: case Token.SHNE: case Token.OR,
 case Token.BITORBITOR:  return 5;
 case Token.BitBITOR:  return 5;
 case Token.BITSUB:
 case Token.OR, Token.BITOR:  return 5;
case Token.BITOR:  return  5; case Token.OR: return 6;
 case Token.SUB_BITOR:  return 5;
 case Token.BITOR: case?:  return 5;
 case Token.BITOR: return 5; case Token.ADD:
 case Token.BITOR: case Token.Token.BITOR:  return 5;
 case Token.AND|Token.BITOR:  return 5;
 case Token.COMMA: case!Token.BITOR:  return 5;
 case Token.BITOR: return 5 - 1;
 case Token.BITOR: return 5; case Token.NOT:
 case Token.OR: return 4; case Token.BITOR:  return 5;
 case Token.BITOR: case Token.BITOR:
 case COMMA:
case Token.BITOR:  return 5; case Token.SUBBITOR:
 case Token.LongBITOR:  return 5;
 case Token.BITOR: return 5
 case Token.BITOR:
 case Token.BITOR: case Token.BITXOR:
 case Token.PUSH: return 5;
 case Token.BIT:
 case Token.OR: return 5; case Token.BITEQ:
 case Token.EQ: case Token.NE: case Token.SHEQ: switch
 case Token.BITORXOR:  return 5;
 case Token.OR: case Token.AND: return 4;
 case Token.BITEQ:
 case Token.OR: case Token.BITXOR:
 case Token.BITOR: switch case Token.BITOR:  return 5;
 case Token.BIT_BITOR:  return 5;
 case Token.BITOR: return 6.5;
case Token.BITOR:  return 5; case Token.BITXAND:
 case Token.BITOR: if case Token.BITOR:  return 5;
 case Token.EQ: case Token.NE: case Token.SHEQ: {
case Token.BITOR:  return  5; case BITOR:
 case?: case Token.BITOR:  return 5;
 case Token.NOT case Token.BITOR:  return 5;
 case Token.BITSOR:
 case Token.LEQ: return 5;
 case Token.BITSOR:
 case Token.SUB: case?:  return 5;
 case Token.BITreturn 5;
 case Token.BITORM:
 case Token.OR: return 5; case Token.BIT:
 case Token.AND5;
 case Token.BITOR: return 6 case Token.BITOR:  return 5;
case Token.BITOR:  return  5; case Token.BITOR(?):
 case Token.OR: return 5; case Token.OR:
 case Token.BITOR: return 5+5;
 case '?':
 case Token.OR5;
 case Token:return 5;
 case Token.NOT: case!Token.BITOR:  return 5;
 case Token.OR: case Token.COMMA:
 case Token.BITOR: return 5
 case Token.BITOR: return 4; caseToken.BITOR:  return 5;
case ?:
 case Token.BITAND: caseToken.BITOR:  return 5;
 case Token.BITOROR:  return 5;
case Token.BITOR:  return 5; case Token.NOT:
 case Token.BITORC: case Token.BITOR:  return 5;
 case Token.OR: return 5 case Token.BITOR:  return 5;
 case Token.BITOR: return 5 + 1;
 case Token.BITOR: return $5;
case Token.BITOR:  return  5; case Token.BITOR: break;
 case Token.BITOR: return 5 + 7;
 case Token.OR.BITOR:  return 5;
 case Token.OR: case Token.ORXOR:
 case Token.BITOR case Token.BITOR:  return 5;
case Token.BITOR: case Token.BITAND: return 5;
 case Token.BITOR(?):
 case Token.OR+Token.BITOR:  return 5;
 case Token.OR: return -5;
case Token.BITOR:  return  5; case Token.OR: return 5;
 case Token.BITOR: case Token.AND:
 case Token.OR: return 6;
 case Token.NEG: Token.BITOR:  return 5;
 case Token.BITOR: case Token.OR:
 case Token.NOT: case Token.NOT: case Token.OR:
 case Token.BITOR: case Token.BIT5;
 case Token.BITYOR:  return 5;
 case Token.COMMA: return 5; caseToken.BITOR:  return 5;
 case Token.OR: case Token.BITXOR:
 case Token.OR;
 case Token.BITOR: case 0:  return 5;
 case Token.BITORCALL:  return 5;
 case Token.ADD:return 5;
 case Token.BITOR: return 4
case Token.BITOR:  return  5; case?:
 case Token.SBITOR:  return 5;
 case Token.BITOR: return.5;
 case Token.BITOR: return 5; return5;
 case Token.BITOR: return 5 + 6;
 case Token.BITOR: return +5;
case Token.BITOR:  return  5; case Token.BITOR: return 6
case Token.BITOR:   switch (type) { case Token.BIT:
 case Token.BINARYBIT:  return 5;
 case Token.ADD:
 case Token.OR: case |Token.BITOR:  return 5;
 case Token.BITOR: return 6 + 7;
 case Token.AND;
 case Token.BITAND|Token.BITOR:  return 5;
 case Token.OR: return 5; case?:
 case Token.BITOR: case 1:  return 5;
 case Token.BITORL: return 5;
 case Token.BITOR: case Pattern.Token.BITOR:  return 5;
 case Token.COMMA::return 5;
case Token.BITOR:  return 5; case Token.BITNOT:
 case Token.BITOR: return 5; #5;
 case Token.COMMA: case Token.COMMENT:
 case Token.NOT: case case Token.BITOR:  return 5;
 case Token.OR: return 5; case caseToken.BITOR:  return 5;
 case Token.BITOR | BITBITOR:  return 5;
 case Token.BITOR(?):return 5;
case Token.BIT
 case.BITOR:  return 5;
 case Token.OR: return 5; case BITOR:
 case Token.BINARYCAST:  return 5;
 case Token.OR: case case Token.BITOR:  return 5;
 case Token.NOT:
 case Token.BITORC: return 5;
case Token.BITOR:   switch (type) { case Token.OR:
 case Token.COMMA: case Token.COMMIT:
 case Token.BITOR: break;
 case Token.ASSIGN.BITOR:  return 5;
 case Token.SUB:
 case Token.BITOR: return 5; case Token.BITXOR,
 case Token.BITOR: return 5; break;
 case Token.OR: return 5; break;
 case Token.BITOR: return 5; case Token.BITXOR():
case Token.BITOR: return 5; case Token.MOD:
 case Token.AND+Token.BITOR:  return 5;
 case Token.BITOR: return 5,Token.BITOR:  return 5;
 case Token.BITOR: case?:Token.BITOR:  return 5;
 case?:Token.BITOR:  return 5;
 case Token.ANDreturn 5;
 } case Token.BIT:
 case Token.OR: return 5; default:
 case Token.BITOR: return 5:  return 5;
 case Token.BITXOR+BITOR:  return 5;
 case Token.OR: return 4; case caseToken.BITOR:  return 5;
 case?:
 case Token.BITOR: return 5; break;
 case Token.BITOR: case Token.BIT:
 case Token.BITOR: return 6;
 case '=':
 case Token.OR: return 5; case Token.BITXOR,
 case Token.OP5;
 case Token.BITOR: case?|Token.BITOR:  return 5;
 case Token.BITOR: case Token.OR5;
 case |: case Token.BITOR:  return 5;
case Token.BITOR:  return  5; case Token.BITXOR,
 case Token.BITOR(1)
 case Token.AND.BITOR:  return 5;
 case -5;
 case Token.ORreturn 5;
 return 5;
 case Token.BITOR: case Token.AND5;
 case Token.BITOR: return 5,
 case Token.OR: case Token.AND::return 5;
 case BIT:  return 5;
 case Token.NOT;
 case ' ':
 switch (type)
 case Token.SUB:
case Token.BITOR:  return  5; case '?':
 case Token.BITOR: case Token.BITOR;
case Token.BITOR:  return  5; case COMMA:
 case Token.OR: case Token.COMMA,
case Token.BITOR:  return  5; case '=':
 case Token.BITOR: case Token:return 5;
 case Token.BITOR(...):return 5;
 case Token.BITOR: return -2;
 case Token.COMMA5;
 case Token.BITOR(??):return 5;
case Token.BITOR:  return  5; case BitOR:
case  BitOR:
 case Token.BITOR: return 5,
 case 0:return 5;
case Token.AND
 case Token.ASIGN.BITOR:  return 5;
 case Token.BITXOR,
 case Token.BITOR: case Token.return 5;
 case Token.BITOR: return 5; }
 case Token.OR:5;
 case Token.BITXOR::return 5;
case Token.BITOR: switch (type) {
case Token.BITOR: case Token.COMMA:
 case Token.ADD;
case  COMMA:
 case Token.$5;
case Token.BITOR: return 5; return 6;
 case Token.BITOR: {
 case Token.BYTE:  return 5;
 case Token.BITOR: return - 1,
 case Token.Token.BITOR:  return 5;
 case!BITOR:  return 5;
case  '=':
 case Token.BITOR: { }return 5;
 case :BITOR:  return 5;
 case Token.OR: case Token.AND...return 5;
 case Token.OR: case Token.AND,
 case Token.BITAND:
 case Token.Bitreturn 5;
 } case Token.BITOR:  return 5;
case Token.BITOR:  return  6; case?:
 case Token.BITOR: \nreturn 5;
case Token.BITOR:   switch (type) { case Token.BIT,
 switch { case Token.BITOR:  return 5;
 case Token.BITOR(...)return 5;
 case?:  return 5;
case  BIT:
 case 1 case Token.BITOR:  return 5;
 case Token.BASE5;
 case Token.LEQ:
 case Token.bitOR5;
case Token.BITOR: case Token.BITAND:
case  ' ':
 switch case Token.BITOR:  return 5;
 case Token: :return 5;
case Token.BITOR:  return  5; case 0:
 case 0 case Token.BITOR:  return 5;
case Token.BITOR:  return  5; switch type {
case  Token.LSH:
 case Token.BYTE;
case Token.BITOR: return 5; case Token.AND
case Token.BITOR:  return  5; case ^:
 case return 5;
 case '?':  return 5;
 } case Token.BIT;
 } return 5;
case Token.BITOR:  return  5; switch;
case Token.*:
 case 0:
case Token.BITOR:  return  5; switch:
 case 7;
 case?: |Token.BITOR:  return 5;
 case |:  return 5;
 case |Token.BITOR:  return 5;
case Token.OR
 case Token.COUNT:  return 5;
 case '=':  return 5;
case  ^:
 case ^:  return 5;
 case?::Token.BITOR:  return 5;
 case ' ':  return 5;
 case 6;
case  |:
case  0:
 case %:  return 5;
 case (int)Token.BITOR:  return 5;
 case *Token.BITOR:  return 5;
case Token.BITOR+1:
 case 1:
case Token.BITORR:
 case ^5;
 case ^Token.BITOR:  return 5;
case Token.BITOR(): return 5;
case Token.BITORB:
 case Token.COUNT;
 case?: ^Token.BITOR:  return 5;
case Token.BITOR:  return 5; case |:
case Token.BITOR:  return  5; switch {
 if (type==Token.BITOR:  return 5;
 case |:
 break;
 case Case Token.BITOR:  return 5;
case Token.BITOR:  return 5.0;
case Token.BITOR: returns 5;
 case -1;
 switch Token.5;
 switch (type;
 case?.Token.BITOR:  return 5;
 switch token.5;
 case *5;
 case Token:5;
 } return 1;
case Token.BITOR:  return  5; case
 case Node.5;
case Token.ADD
 case ::
 switch:
case Token.BITOR:  return  4; }
case Token.BITOR:   return 7;
case Token.BITOR:  return  6; }
 return 6;
 case Node.BITOR:  return 5;
 case!Token.BITOR:  return 5;
 switch;
 case Symbol.BITOR:  return 5;
 switch {
 case Number.BITOR:  return 5;
 break case5;
case Token.BITOR:  return  4;
case Token.BITOR:   switch;
 case?return 5;
 case :return 5;
case Token.BITOR: switch
 case...return 5;
case Token.BITOR:   return 6
 }
 case!return 5;
 case
case Token.BITOR:  return 5.0
case Token.BITOR':  return 5;
case Token.BITOR,  return 5;
