case Token.BITOR: return "|";
 case Token.BITXOR: return "|";
 case Token.BITBITOR: return "|";
case Token.AND:
 case Token.AND: return "|";
 case Token.OR:return "|";
 case Token.OR: return \"|";
 case 0:return "|";
 default: case Token.BITOR: return "|";
case Token.BITOR: return "";
 case Token.BITAND: case Token.BITOR: return "|";
 case Token.BITOR: return \"|";
 case Token.BITOR:
 case Token.OR: return "";
 case Token.BITAND:
case Token.BITOR: return "|" ; case Token.BITXOR:
 case Token.OR: case Token.AND:return "|";
 case Token.OR: return "|;
 case Token.BITXOR:
 case Token.OR: case Token.BITOR: return "|";
case Token.BITOR: return "|^";
 case 0: case Token.BITOR: return "|";
case  0:
 case Token.BITOR: return "";
 case Token.BITOR: return "^";
 case Token.OR: case Token.OR_BITOR: return "|";
 case Token.BITOR: return "|";
 case 0: return null;
 case Token.OR: return "|=";
 case Token.AND: return "";
 case Token.BITOR: return "&";
 case Token.BITOR: return "^"|";
 case Token.BITORXOR: return "|";
case Token.BITOR: return "|^|";
 case Token.BITOR: return "^|";
case Token.BITOR: return "|" ; case Token.BITAND:
 case Token.BITAND: return "&";
 case Token.BITOR: case Token.BITOR: return "|";
 case Token.BITOR: return "^|^";
 case Token.BITOR: return "^^^^^^^";
 case Token.BITOR: return "^" ; case Token.BITXOR:
case Token.OR: return "||";
 case Token.OR: return "||;
 case Token.BITOR: return "^^^^^^^^";
 case Token.BITOR: case Token.AND: return "|";
 case Token.OR: case Token.BITBITOR: return "|";
 case 0:
 case Token.BITOR: return "^^^^^^^^^";
case Token.AND: return "&&";
 case Token.BITOR: return "";return "|";
 case Token.BITOR: return "^^^";
 case Token.BITOR: return "^^^^^^";
 case Token.AND: return "|;
 case Token.AND: case Token.OR:return "|";
 switch (operator) { case Token.BITOR: return "^|";
 case Token.BITOR: return "^^^^^";
 case -1: case Token.BITOR: return "|";
 return operator;
 case Token.BITOR: return "^" ; case Token.BITOR:
 case Token.BITOR: return "^|$";
 case Token.BITOR: break;
 switch (operator) { case Token.BITOR: return "";
 case Token.OR:
 case Token.AND: return \"|";
 case Token.BITAND: return "" case Token.BITOR: return "|";
 case Token.BITOR: return "^" ; case Token.AND:
 case Token.OR: return "^" ; case Token.AND: return "^" ; case Token.OR: return "|";
case Token.BITOR:  return "|" ; case Token.AND:
case Token.BITOR: return "|" case Token.BITAND: return "&";
 case Token.BITOR: return "" case Token.BITOR: return "|";
 case Token.BITOR: return "^^^^^^^^^^";
 case Token.OR: return operator+"|";
 case Token.BITOR: return "^^^^^^^^^^^^";
 case Token.BITOR: return "^^^^";
 case Token.OR:
 case Token.OR: return "|^=";
 case Token.OR: return "^" ; case Token.AND: return "&" ; case Token.OR: return "||";
 case Token.BITOR: return;
 switch (operator) { case Token.BITOR: return "^^^^^^^^^^";
 case Token.AND:
 case Token.BITOR: return "|";return "|";
 case Token.AND: return "&";
 case Token.BITAND: return "";
 case Token.BITOR: return "|^";
 switch (operator) { case Token.BITOR: return "^";
 case Token.: return "|";
case Token: {
 case Token.BITOR: case Token.OR: return "|";
 case Token.BITOR: case 0:return "|";
 case Token.BITOR: return "^&";
 case Token.BITOR: return "||";
 case Token.OR: return "^" ; case Token.AND: return "&" ; case Token.OR: return "|";
 case 0: return \"|";
 case Token.BITOR: return "^" ; case Token.OR:
case Token.AND: return "&||";
 case Token.BITOR: return "^^^^^^^^^^^";
 switch (operator) { case Token.BITOR: return "^^^^^^^^^^^";
 case Token.OR: return "^" ; case Token.AND: return "^" ; case Token.OR: return "||";
 switch (operator) { case Token.BITXOR:
 switch (operator) { case Token.AND: return "";
 case Token.AND: case Token.BITOR: return "|";
 case Token.OR: return "|"+"|";
 case Token.BITOR: return "^";return "|";
 switch (operator) { case Token.BITOR: return "|";
 switch (operator) { case Token.BITOR: return "^|^";
 switch (operator) { case Token.BITOR: return "^" ; case Token.BITXOR:
 switch (operator) { case Token.AND: return "&&";
case Token.BITOR: return "|" case Token.BITXOR:
 switch (operator) { case Token.BITOR: return "^^^^^^^^^^^^";
 switch (operator) { case Token.BITOR: break;
 case Token.AND: return "&|^";
 case Token.AND: return "&" case Token.OR:
 switch (operator) { case Token.OR: case Token.AND: case Token.OR: case Token.OR: return "|";
 switch (operator) { case Token.BITOR: return "^||";
 switch (operator) { case Token.AND:
 switch (operator) { case Token.BITOR: return;
 switch (operator) { case Token.AND: return "|";
case Token.BITOR: return "||";
 case Token.BITOR: return "|=";
 case Token.BITOR: return 0;return "|";
 case 0: return "-";
 case Token.OR: return "^" ; case Token.AND: return "^" ; case Token.OR: return "";
 case Token.OR: return +"|";
 case Token.OR: return "^"+"|";
case Token.BITOR: return "|" ; case Token.BITXOR: break;
 case Token.BITXOR: case Token.BITOR: return "|";
 switch (operator) { case Token.BITOR: return "&";
case Token.BITOR: return "|" ; case Token.BITAND: return "";
 case Token.OR: return "^" ; case Token.AND: return "^" ; case Token.BITXOR:
 case Token.OR: return "^" ; case Token.AND: return "&" ; case Token.BITAND:
 case Token.OR: return "^" ; case Token.AND: return "&" ; case Token.OR: return "";
 case Token.OR: return "^" ; case Token.AND: return "^&" ;
 case Token.BITOR: return operator+"|";
 case Token.OR: return "^" ; case Token.AND: return "&" ; case Token.OR:
case Token.AND: return "||";
 switch (operator) { case Token.BITOR: return "^" ; case Token.BITOR:
 case Token.BITOR: return "^" ; break;
case Token.BITOR: return "|"; return "";
 case Token.BITORBITOR: return "|";
case Token.BITOR: return;
 case Token.AND: break;
case Token.BITOR: return "|" case Token.BITXOR: return "";
 case case Token.BITOR: return "|";
 case Token.AND: return "&&;
 case Token.OR: return "|"; case Token.AND: return "&"; case Token.OR:
 case Token.BITOR: return "^" ; case Token.BITOR: break;
 case Token.OR: return "|"; caseToken.BITOR: return "|";
 case Token.AND: case Token.AND_BITOR: return "|";
 case Token.BITOR: return "^" ; case Token.BITXOR: return "";
 case Token.OR: return "|^|";
 case Token.BITOR: return "^" ; return "";
 switch (operator) { case Token.OR: case Token.AND: case Token.OR: case Token.BITXOR:
 case Token.OPEN: case Token.AND: return "|";
 case Token.OR: return "^" ; case Token.AND: return "&" ; case Token.BITXOR:
case Token.OR: return "|^";
 case Token.OR: return "^" ; case Token.AND: return "^" ; case Token.BITAND:
 case Token.BITOR: return "^" ; case Token.BITOR: return "^=";
 switch (operator) { case Token.BITOR: return "^" ; case Token.OR:
 case Token.OR: return "^" ; case Token.AND: return "^" ; case Token.BITEQ:
 switch (operator) {
 case Token.AND: return "&||^";
 switch (operator) { case Token.OR: case Token.AND: case Token.OR: case Token.OR: return "";
 switch (operator) { case Token.AND: return "&";
 case Token.BITOR: return "^="; case Token.BITOR: break;
 switch (operator) { case Token.BITOR: return "^" ; case Token.BITOR: break;
 case Token.BITOR: return ""; caseToken.BITOR: return "|";
 switch (operator) { case Token.OR: case Token.AND: return "|"; case Token.OR:
 switch (operator) { case Token.BITOR: return "^" ; case Token.BITAND:
 case Token.OR: return null;
 switch (operator) { case Token.OR: case Token.AND: case Token.OR: return "^|";
 case Token.BITOR: return [];
 case Token.OR: return operator;
 case Token.AND: return "&"+"|";
 switch (operator) { case Token.AND: return "||";
 case Token.AND: return "||;
case Token.BITOR: return "|$";
 case Token.OR: return "|"; case Token.OR: return "^|"; case Token.OR:
 case Token.OR: return "|";return "|";
 case Token.BITOR: return "^" ; case Token.BITOR: return "";
case Token.BITOR:  return "|" ; case Token.OR:
 case Token.BITOR: return ^"|";
 case Token.BITXOR:
case Token.BITOR: return "|" ; case Token.BITOR:
case Token.BITOR: return "|" case Token.BITOR: return "^";
 case Token.OR: return "|"; case Token.AND: return "|"; case Token.OR:
 case Token.BITOR: {
 switch (operator) { case Token.OR: case Token.AND: case Token.OR: return "&";
 case Token.OR: return "^"=>"|";
 case Token.AND: case Token.BITBITOR: return "|";
 case Token.OR: return "|"; break;
 switch (operator) { case Token.BITOR: return "||";
 case Token.OR: return "&"+"|";
case Token.BITOR: return 0;
 case Token.OR: return "^" ; case Token.AND: return "^" ; case Token.BITOR:
 case Token.OR: case Token.BigBITOR: return "|";
 case Token.BITOR: return 0;
 case Token.AND: return "&";return "|";
case Token.BITOR: return "|" ; case Token.BITAND: break;
 case Token.OR: return "^|"|";
 case Token.BITAND: return;
 case Token.BITOR: return "^" ; case Token.BITOR: return "&" ;
case  -1:
 case Token.BITOR: return "^" ; case Token.BITXOR: break;
case Token.BITOR: return "|^|^";
 case Token.BITOR: break; case Token.BITOR: return "|";
 case Token.BITAND: return ""; caseToken.BITOR: return "|";
 case Token.BIT|BITOR: return "|";
 case Token.OR: return *"|";
case Token.BITOR: return "|^&";
 switch (operator) { case Token.OR: case Token.AND: case Token.OR: return "|";
 case Token.OR: return "|";
 case Token.BITOR: return "^" ; case Token.BITOR: return;
case Token.BITOR: return "|"; break;
 case Token.BITOR: return +"|";
case Token.BITOR: return "|" + "^";
 case 0: break;
 case Token.BITOR: { case Token.BITOR: return "|";
 case Token.OR: return "|"; case Token.AND: return "|"; case Token.AND:
 case Token.BITOR: return "^="; case Token.BITOR: return;
case Token.BITOR: return "|" ; case "^";
 case Token.OPEN: case Token.BITBITOR: return "|";
case Token.BITOR: return "|" case Token.BITXOR: return [];
 switch (operator) { case Token.BITOR: return "^" ; case Token.BITXOR: {
 case Token.OR: return "&"; caseToken.BITOR: return "|";
 case Token.BITAND: break;
 case Token.BITOR: break;
 case OP: return"|";
 case Token.BITOR: return " case Token.BITOR: return "|";
case Token.BITOR: return "|^||";
 case Token.OR: return "|"; case Token.AND: return "&"; case Token.AND:
 case Token.LE: case Token.LE_BITOR: return "|";
 case Token.BITXOR: return \"|";
 case Token.BITX:
 case 0: return "=";
 switch (operator) {
 case Token.ORBITXOR: return "|";
case Token.BITOR: return "|^|&";
 case Token.OR: break;
 case Token.BITOR: {
 case Token.OR, case Token.BITOR: return "|";
case Token.BITOR:  return "|"; return "^";
 case Token.AND: return;
 case Token.OR_BITOR: return "|";
 case Token.OR: case Token.OR: return "|";
 case Token.BITAND: { case Token.BITOR: return "|";
 case Token.BITOR: return [];
 case 0: return "";
case Token.BITOR: return "||^";
 case Token.BIT:
 case Token.OR: return ^"|";
case Token.BITOR: return "|" case Token.BITXOR: break;
 case Token.OR: case Token.OR.BITOR: return "|";
 case Token.BITOR: return "^" ; case Token.BITXOR: return;
 case Token.OR: case Token.BitBITOR: return "|";
 case 0: return '"|";
 case Token.BITOR: return "^" ; break; }
 case 0: break; case Token.BITOR: return "|";
 case Token.OR: return "^" ; case Token.AND: return "^" ; case Token.BITXOR;
 case 0: return null; case Token.BITOR: return "|";
 case Token.BITOR: case BITAND: return "|";
 case Token.BITAnd:
 case 0: case Token.BITBITOR: return "|";
 case Token.BIT_BITOR: return "|";
case Token.BITOR: return "|" + "^" + "&";
 switch (operator) { case Token.BITOR: return "^" ; } }
 case Token.OR: {
 case Token.PLUS:
 case -1:
case Token.BITOR: return  "|" ; case Token.BITAnd:
 case 0: { caseToken.BITOR: return "|";
case Token.BITOR: return "|"; break; }
 case 1: case Token.BITOR: return "|";
case Token.BITOR: case Token.BITXOR: return;
 case Token.OR: return "|"; break; }
case Token.BITOR: return "|"; return null;
 case Token.OR: return "" case Token.BITOR: return "|";
case Token.BITOR: return "|" ; case Token.BITAND: return [];
 case Token.OR: {return "|";
 switch (token) {
case Token.BITOR: return "|" ; case Token.BITAND: return;
 case Token.OR, Token.AND: return "|";
 case Token.BITORX: return "|";
 case Token.OPEN:
 case Token.BITORCASE:return "|";
 case Token.AND: return [];
 case "|", case Token.BITOR: return "|";
 case Token.AND: return null;
 case -1:return "|";
case Token.BITOR: return "|" case Token.BITAND: return [];
 case Token.BITIN: case Token.BITOR: return "|";
 case 0: case 0: Token.AND: return "|";
 case Token.BITOR: default: caseToken.BITOR: return "|";
 switch (token) {
 case Token.BITX: case Token.BITOR: return "|";
 case Token.OR: return [];
 switch (token.type()) {
 case Token.COMMA_BITOR: return "|";
 case 0: case 0=="|";
 case Token.LE: return "" case Token.BITOR: return "|";
 case Token.BITORxor: return "|";
 case Token: return null;
 case "+" : case Token.BITOR: return "|";
case Token.BITOR: return  "|"; return "&";
 case Token.OR: case BITOR: return "|";
case Token.BITOR: return "|" case Token.BITAND: return;
 case Token.AND;
 case Token.BITOR: {return "|";
 case 0: return +"|";
 case Token.NEG_BITOR: return "|";
 case |: return"|";
 case Token.BIT-BITOR: return "|";
 case Token.BIT: case Token.BITOR: return "|";
 case 1:return "|";
 case Token.AND: {return "|";
 case Token.BITOR: case 1: return "|";
 case 0: return "0"; caseToken.BITOR: return "|";
 case Token.OR: case Token.AND::return "|";
 switch (token.type) {
 case -1: return \"|";
 case Token.BITOR_AND: return "|";
 case Token.AND: {
case Token.BITOR: return "|" + operator;
 switch (operator)
 case 0: return ""|";
case Token.BITOR: return null;
 case 0: case Token.OR_BITOR: return "|";
 case -1: { caseToken.BITOR: return "|";
 switch (operator) { default:
case Token.BITOR: return "&&";
 case Token.OR;
 case Token.OR: return "||" ; break ; }
 case Token.SBITOR: return "|";
 case ||:return "|";
 case Token.SCORE:
 case Token.OR case Token.BITOR: return "|";
 case Token.BITOR: *return "|";
 case 0: return null case Token.BITOR: return "|";
 case Token.BITORGOR: return "|";
 case 0: {return "|";
 case 0: case Token.BITORBITOR: return "|";
 case Token.OPTIONS_BITOR: return "|";
 case Token.NOT:
 case 0: case 0=>"|";
 case Token.BITOR^: return "|";
case Token.BITOR: return operator;
 case 1: return "";
 default: { case Token.BITOR: return "|";
case Token.BITOR: return "or";
 case null: return;
 case Token.OR: *return "|";
 case Token.BITXOR: {return "|";
 case OP: return \"|";
 case Token.BigBITOR: return "|";
 case Token.BITORG: return "|";
 case Token.BITXOR: *return "|";
case  0: {
 case 0: case Token.SBITOR: return "|";
 case Token: return "";
 case 0: {
 default:
 case Token.BITWISE: return "|";
 case Token.BITAND, caseToken.BITOR: return "|";
 case null: case Token.BITOR: return "|";
 switch (operator) { case
 case Token.BitBITOR: return "|";
 case "": return"|";
 case null: break;
case Token.BITOR: return "|"; *
 case operator=="|";
 case!Token.BITOR: return "|";
 case Token.NBITOR: return "|";
 case "|" :return "|";
 case Token.BITAND|BITOR: return "|";
 case Token.AND: *return "|";
 case ""=>"|";
 switch (token)
 case Token.OR::return "|";
 case "+" :
 } case Token.BITOR: return "|";
 case -1;
case Token.BITOR: return "&";
 case Token.BITAND: return "|";
 case Token.BITOPEN: {return "|";
case  "+" :
 case ""=="|";
 case Token.BITOR: * {return "|";
case Token.BITOR: return";
 case!BITOR: return "|";
 case 1:
 case Token.BITAND,BITOR: return "|";
 case "|",Token.BITOR: return "|";
 case:BITOR: return "|";
 case 0: { case!Token.BITOR: return "|";
 case { case Token.BITOR: return "|";
 return null;
 return "";
 case Token.*: return "|";
 case Token.LEFT: {return "|";
 case ^Token.BITOR: return "|";
 case Token.IN: return "|";
 case 0: { case ^Token.BITOR: return "|";
 case None: return "|";
 case AND: return "|";
 case Token::: return "|";
 case Token.BitOR: return "|";
 case 0: case!Token.BITOR: return "|";
 case Token.PLUS: {return "|";
 case *Token.BITOR: return "|";
 case Token.NOT: return "|";
 case 0;
 return "";
 case 0*Token.BITOR: return "|";
 case 0: Token.BITOR: return "|";
 case " case Token.BITOR: return "|";
 case Token:: return "|";
 case Token.AND::return "|";
case  0: return;
 case Node.BITOR: return "|";
case  "|";
 case 1*Token.BITOR: return "|";
 case null():"|";
 case "|: return "|";
 return "=";
 case 0x;
 case "=";
case  1:
 case Token.And: return "|";
 case "BITOR: return "|";
 case operator+"|";
 case null:
 case |Token.BITOR: return "|";
 case Case Token.BITOR: return "|";
 return ";
 case \"|";
 case BitBITOR: return "|";
case Token.IN:
case Token.IF:
 default :"|";
 case :"|";
 return \"|";
case  null:
 case
 case Number.BITOR: return "|";
 case {
 case Symbol.BITOR: return "|";
 case "+"|";
case Token.BITOR*:
case Token:::
case Token.BITOR: :
case TokenType:
case Token.BITOR: return "|"; }
case Token.BITORC:
case Token*:
case Token:: {
case Token.BITOR: return "|"*;
case Token.BITOR(): {
case Token.BITOR: return "|"++;
 default {
 case:
case Token.BITOR: return "|"break }
} {return "|";
 } #return "|";
case Token.BITOR(): return "|";
case Token.BITOR': return "|";
case Token.BITOR): return "|";
