case OR:              return "OR";
case OR:              return  OR;
 case XOR:              return "OR";
 case ASSIGN_OR:              return "OR";
 case ASSIGN_XOR:              return "OR";
 case ASSIGN_OR: case OR:              return "OR";
 case OR: case OR:return "OR";
case OR:              return  "OROR";
case OR:               case AND:
case  OR:
case ORX:
 case ASSIGN_OR: case ASSIGN_OR:              return "OR";
 case ASSIGN_BITXOR:              return "OR";
case OR:              return  "OR"; case CASE:
 case OR: case AND:return "OR";
 case AND_OR:              return "OR";
 case OR: case OR: #"OR";
 case OR: case Or:              return "OR";
 case ASSIGN_OR:
 case ASSIGN_OR; case OR:              return "OR";
case OR:              return  "OR"; case INC: return "INC";
case OR:              return  "OR"; case AND: return "AND";
 case OR: return "OR;
case OR:              return  "OR; case AND:
case OR:              return  "OR"; case AND:
case OR:              return  "OR"; case ASSIGN_AND:
 case ORX:              return "OR";
case OR:              return  "OR"; case ASSIGN_OR:
case  ASSIGN_OR:
case OR:              return  "OR"; case ASSIGN:
 case OR:
case OR:              return  "OR"; case CASE: case CASE:
 case ORreturn "OR";
 case OR;
 case AND:
 case XOR: return "XOR";
 case OR: case OR: case OR: return"OR";
 case ASSIGN_ORX:              return "OR";
case OR:              return  "OR"; case OR:
 case OR; case OR:              return "OR";
 case ASSIGN_OR: case AND_OR:              return "OR";
 case ASSIGN_OR: case XOR:              return "OR";
case OR:              return  "OR; case CASE:
 case ASSIGN_OR_OR:              return "OR";
case OR:              return "OR" case INC: return "INC";
case OR:              return  "OR"; case INC: case DEC:
case OR:              return  "OR"; case ASSIGNMENT:
case OR:              return  "OR"; case EXPRESSION:
case OR:              return "OR" case CASE: case CASE:
 case OROR:              return "OR";
case OR:              return  "OR"; case COMMA:
 case OR:"OR";
 case CASE:
case OR:              return  "OR"; case ASSIGN_DIV:
 case ASSIGN_OR: return "OROR";
 case ASSIGN:
 case ASSIGN_AND:
 case ASSIGN_ORIGIN:              return "OR";
 case ASSIGN_OR: return "ASSIGNOR";
 case ASSIGN_AND_OR:              return "OR";
 case OP: return "OP;
case OR:              return "OR" case AND:
case OR:              return  "OR_AND";
case OR:              return "OR" case CASE:
 case OR: case None:return "OR";
case OR: return "ORM";
 case OR: case OR: case OR=="OR";
 case OR: case OR: case AND: return"OR";
case  ASSIGN:
 case OR: return \"OR";
 case ASSIGN_OR: case OP_OR:              return "OR";
 case OR; case Or:              return "OR";
 case ASSIGN_OR: case OROR:              return "OR";
 case ASSIGN_OR: case OR_OR:              return "OR";
case  ASSIGN_DIV:
case OR:              return "OR" case DEC: return "DEC";
 case OR: case OR;
 case OR: case OR+"OR";
 case OR::"OR";
case OR:              return  "OR"; case WILD:
 case ASSIGN_OR"; case OR:              return "OR";
 case OR: case OR: case OR+"OR";
 case COMPARE : return "COMPARE";
 case INC: return "INC";
 case OR: case OR: return \"OR";
case OR: return "ORAND";
 case ASSIGN_OR: return "OR;
case OR:              return  "OR"; case BOTH:
 case OR: case OR: return '"OR";
 case NOT: return "NOT;
case OR: case OR: case AND:
 case ASSIGN_UNKNOWN: return "UNKNOWN";
 case OR: case OR: case OR::"OR";
 case ASIGN_OR: case ASIGN_OR:              return "OR";
 case ASSIGN_OR: case ORX:              return "OR";
 case OR: case OR: case OR: #"OR";
 case OR: case or:return "OR";
 case OR: case OR::"OR";
case ORM : return "ORM" ;
 case ASSIGN_CASE: return "CASE";
 case ASSIGN_MOD:
 case ASSIGN_HOOK_OR:              return "OR";
case OR:              return  "OR"; case NEG;
 case ASSIGN_CASE: return "ASSIGN CASE";
 case ASSIGN_ORG:              return "OR";
 case OR: case OR: case AND: #"OR";
case OR:              return  "OR-AND";
 case ASSIGN_OR: return "ASSIGN_OR";
 case OR: case OR=="OR";
 case ASSIGN_OR: case OPERATOR:              return "OR";
case OR:              return "OR" case CASE: return "Case";
 case ASSIGN_OR, case OR:              return "OR";
 case OR: return return"OR";
 case ASSIGN_END:
 case ASSIGN_ORCASE:              return "OR";
 case SUB: return "Sub;
 case ASSIGN_ORAND:              return "OR";
 case ASSIGN_OR, ASSIGN_AND:              return "OR";
case OR:              return "OR" case AND: return "AND AND";
case OR: return "OR case CASE";
 case OR+"OR";
case OR:              return  "OR"; case ASSIGN_ORG:
case OR:              return "OR" case CASE: return "CASE";
 case COMPARE : return "COMARE";
 case ASSIGN_ORXOR:              return "OR";
 case ASSIGN_DIV:
case OR:              return "OR" case INC: case DEC:
case OR:              return "OR" or "OR" or "HOOK";
 default :return "OR";
case OR case And:
 case ASSIGN_NEGATIVE: return "NEGATIVE";
 case ASSIGN_ORG:
 case ASSIGN_HOOK : return "ASSIGN_HOOK";
 case ASSIGN_NONE:
 case ASSIGN_OR: case OR_:              return "OR";
 case OR: case OR: case OR*"OR";
 case ASSIGN_OR; case XOR:              return "OR";
 case XOROR:              return "OR";
 case ASSIGN_MOD: return "MODULE";
 case ASSIGN_ORIGINAL:              return "OR";
 case ASSIGN_WITH: return "WITH";
 case ASSIGN_COMMA:
 case ASSIGN_OR: return "OR";
case  ASSIGN_MOD:
 case ASSIGN_OR: case OOR:              return "OR";
 case OR: case OR: return +"OR";
case  ASSIGN_COMMA:
case OR case AND:
case OR:              return  "OR(OR);
case OR:               case OR:
 case OR: return "OR OR";
 case ASSIGN_OR_AND:              return "OR";
 case ASSIGN_UNKNOWN: case ASSIGN_UNKNOWN: return "UNKNOWN";
 case ASSIGN_OREGATE:              return "OR";
case OR:              return "OR" case ASSIGN_AND:
 case OR: case ORX:              return "OR";
 case ASSIGN_ORIF:              return "OR";
case  EXACTIVE: return "ACTIVE";
 case ASSIGN_OR: return "ALTER";
 case ASSIGN_UNKNOWN: return "ASSIGN_UNKNOWN";
 case COMPARE: return "Compare;
 case ASSIGN_CASE: return "ASSIGN_CASE";
 case OR_AND:              return "OR";
case  ASSIGN_EQ:
 case OR: case OR=>"OR";
case  ASSIGN_ORG:
 case OR, case Or:              return "OR";
 case ASSIGN_UNKNOWN: case ASSIGN_UNKNOWN: return "ASSIGN_UNKNOWN"; case ASSIGN_OR:
 case ASSIGN_DIV: return "DIVIDE;
 case ASSIGN_OR: case ASSIGN_OR: case ASSIGN_AND: return "ASSIGNAND";
 case ASSIGN_UNION: return "UNION";
case  ASSIGN_OR: return "XOR";
case  ASSIGN_AND:
case  ASSIGN_NONE:
 case OR: return '"OR";
 case ASSIGN_UNKNOWN: return "ASSIGN_UNKNOWN";
 case ASSIGN_OR: case NOT_OR:              return "OR";
 case ASSIGN_OR: case OR_AND:              return "OR";
 case COMPARE : return "COMP";
case  ASSIGN_MOD: return "MODULE";
case  ASSIGN_OP:
case  ASSIGN_WITH:
 case ASSIGN_OR: case ORXOR:              return "OR";
 case OR: case OR: case OR=>"OR";
case OR:              return  "OR"; case ASSIGNED:
 case ASSIGN_REG_OR:              return "OR";
case OR:              return "OR" case "HOOK";
 case ASSIGN_MOD: return "MOD;
case OR:              return "OR" case ASSIGN_OR:
case OR:              return  "OR"; case ASSIGNMENTS:
 case CASE: return "ASE";
 case ASIGN_OR: case ASSIGN_OR:              return "OR";
case  EXACT: return "EXACT";
 case SUB: return " SUB;
case  ASSIGN_UNIQUE:
case  COMPARE : return "COMARE";
 case ASSIGN_BYTE: case ASSIGN_BYTE: return "BYTE";
case OR:              return  "OR"; case OR case AND:
 case OR: case UNION:return "OR";
case  ASSIGN_DIV: return "DIVIDE";
 case OR, AND:              return "OR";
 case COMPARE: return "COMARE;
case  ASSIGNMENT:
case  EXACTIVE: return "EXACTIVE";
 case OP: case OP;
 case ASSIGN_NEGATIVE: return "ASSIGN_NEG";
 case ASSIGN_UNKNOWN: return "ASSIGN_KNOWN";
 case ASSIGN_UNKNOWN: return "ASSIGN_Unknown";
 case ASSIGN_OR: case OR:
 case XOR: return "OR XOR";
 case ASSIGN_UNKNOWN: case ASSIGN_UNKNOWN: return "UNKNOWN";
 case OR: case OR: case OR return \"OR";
 case SUB: case SUB;
 case ASSIGN_CASE: case ASSIGN_CASE:
case OR:              return  "OR(or);
 case AND: return "AND:";
 case ASSIGN_UNKNOWN: case ASSIGN_UNKNOWN: return "ASSIGN_UNKNOWN"; case ASSIGN:
case OR:              return "OR" case CASE: case WHEN:
case OR:              return "OR" case CASE: return "ASE";
 case ASSIGN_UNKNOWN: case ASSIGN_UNKNOWN: return "ASSIGN_UNKNOWN"; case ASSIGNOR:
 case ASSIGN_NEGATIVE: return "ASSIGN_NEGATIVE";
 case ORM:return "OR";
 case ASSIGN_UNKNOWN: case ASSIGN_UNKNOWN: return "ASSIGN_UNKNOWN";
 case ASSIGN_CASE: return "ASSIGN_CASE"; case CASE: return "CASE";
 case ASSIGN_OR: case ASSIGN_OR: case ASSIGN_OR: return "ASSIGNOR";
case  ASSIGN_CUSTOM:
case OR:              return "OR" case CASE: case WHILE:
 case OR: case or=="OR";
 case ASSIGN_UNKNOWN: return "ASSIGN_UNKNOWN"; case ASSIGN_OR:
 case ASSIGN_BYTE : case ASSIGN_BYTE : return "ASSIGN_BYTE";
 case ASSIGN_UNSPECIFIED: return "ASSIGN_UNSPEC";
 case CASE: case CASE;
 case ASSIGN_OR: return "ORG;
 case ASSIGN_LINK: return "ASSIGNINK";
 case ASSIGN_ADD: return "ADD;
case OR:              return "OR" case ASSIGN:
 case ASSIGN_UNKNOWN: case ASSIGN_UNKNOWN: return "ASSIGN_UNKNOWN"; case ASSIGN_AND:
 case ASSIGN_CASE: case ASSIGN_CASE: return "CASE";
case  EXACTIVE: return "EXACT";
case OR:              return "OR" return "HOOK";
 case ASSIGN_CASE_OR:              return "OR";
 case ASSIGN_NEGATIVE: return "ASSIGN_NEGATIVE";
 case ASSIGN_BYTE: case ASSIGN_BYTE: return "BYTE";
case OR:              return  "OR(OR");
 case ASSIGN_UNKNOWN: case ASSIGN_UNKNOWN: return "ASSIGN_UNKNOWN"; case ASSIGN_STRING:
 case ASSIGN_CASE: case ASSIGN_CASE: return "ASSIGN CASE";
 case ASSIGN_UNKNOWN: case ASSIGN_UNKNOWN: return "ASSIGN_UNKNOWN" case ASSIGN_OR:
 case ASSIGN_NEGATIVE: case ASSIGN_NEGATIVE;
 case ASSIGN_UNKNOWN: case ASSIGN_UNKNOWN: return "ASSIGN_UNKNOWN"; case ASSIGN_NONE:
 case ASSIGN_DIV: return "DIV;
 case ASSIGN_UNKNOWN: case ASSIGN_UNKNOWN: return "ASSIGN_UNKNOWN"; case ASSIGN_COMMA:
 case ASSIGN_MOD: return "MODULE;
 case ASSIGN_UNKNOWN: case ASSIGN_UNKNOWN: return "Unknown";
case OR:               return "OR; case OR:
 case ASSIGN_UNKNOWN: case ASSIGN_UNKNOWN: return "ASSIGN_UNKNOWN"; case ASSIGN_ORG:
case  ASSIGN_OR: case OR:
 case OR: case BOTH:return "OR";
 case ASSIGN_UNKNOWN: case ASSIGN_UNKNOWN: return "ASSIGN_UNKNOWN"; case ASSIGN_REGEXP:
 case ASSIGN_CASE: case ASSIGN_CASE: return "CASE";
 case ASSIGN_AND: case XOR:              return "OR";
 case ASSIGN_OR: return "ORM;
 case OR: case Or: #"OR";
 case ASSIGN_OR: case ASSIGN_OR: case ASSIGN_AND: return "ASSIGN";
 case BYTE: case BYTE_OR:              return "OR";
case ORM : return "ORM; case OR:
case  ASSIGN_AND: return "AND";
 case ASSIGN_UNKNOWN: case ASSIGN_UNKNOWN: return "ASSIGN_UN";
 case ASSIGN_ORG_OR:              return "OR";
 case ASSIGN_UNKNOWN: case ASSIGN_UNKNOWN: case ASSIGN_UNKNOWN: return "UNKNOWN";
case OR:               case OR: return "OR"; case AND:
 case ASSIGN_UNIQUE:
 case OR: case OR: returns"OR";
 case ASSIGN_OR: case ASSIGN_OR: case ASSIGN_AND: case ASSIGN_OR:
 case ASSIGN_UNKNOWN: return "ASSIGN_UNKNOWN"; case ASSIGN_AND:
 case ASSIGNMENT:
 case ASSIGN_BYTE : case ASSIGN_BYTE : return "ASSIGN_BIT";
 case ASSIGN_BYTE : case ASSIGN_BYTE : case ASSIGN_BYTE :
 case COMMA:
case ORM : return "ORM"; case OR;
 case NOT: return "NON;
 case ASSIGN_OR, ASSIGN_OR:              return "OR";
 case ASSIGN_BYTE : case ASSIGN_BYTE : case ASSIGN_BYTES:
 case COMPARE: return "COMP;
 case ASSIGN_UNKNOWN: return "ASSIGN_UNKNOWN"; case ASSIGN_STRING:
 case ASSIGN_OR: case ASSIGN_OR: case ASSIGN_AND: return "AND";
 case ASSIGN_OR: case ASSIGN_OR: case ASSIGN_OR: case HOOK:
 case OP: return "OP";
 case COMPARE: return "COM;
case OR:               case NOT:
 case ASSIGN_UNSPECIFIED: return "ASSIGN_UN";
 case ASSIGN_UNKNOWN: case ASSIGN_UNKNOWN: return "ASSIGN_UNKNOWN; case ASSIGN_OR:
 case ASSIGN_UNKNOWN: case ASSIGN_UNKNOWN: return "ASSIGN_UNKNOWN"; case ASSIGN_ANY:
 default:
 case ASSIGN_CASE: return "ASSIGN_CASE"; case ASSIGN_MOD: case MOD:
 case ASSIGN_OR: case ASSIGN_OR: case ASSIGN_OR: return "ASSIGN";
 case ASSIGN_BYTE: case ASSIGN_BYTE: case ASSIGN_BYTE: return "BYTE";
 case ASSIGN_UNKNOWN: case ASSIGN_UNKNOWN: return "ASSIGNUnknown";
 case ASSIGN_UNKNOWN: case ASSIGN_UNKNOWN: return "ASSIGNED";
case OR:              return "OR" case OR:
 case ASSIGN_UNKNOWN: case ASSIGN_UNKNOWN: return "UNUNKNOWN";
 case ASSIGN_UNKNOWN: return "ASSIGN_UNKNOWN"; case ASSIGN_OR:
 case ASSIGN_UNKNOWN: case ASSIGN_UNKNOWN: return "ASSIGN_UNKNOWN"; case AND:
 case ASSIGN_NEGATIVE: case ASSIGN_NEGATIVE:
 case ASSIGN_BYTE: case ASSIGN_BYTE: case ASSIGN_CHAR: return "ASSIGN CHAR";
 case ASSIGN_UNKNOWN: case ASSIGN_UNKNOWN: return "ASSIGN_UNKNOWN"; case OR:
 case ASSIGN_NON_OR:              return "OR";
 case ASSIGN_NEGATIVE: return "ASSIGN_N";
 case ASSIGN_NEGATIVE: return "ASSIGN_NO";
 case ASSIGN_BYTE: case ASSIGN_BYTE: case ASSIGN_STRING: return "ASSIGNING";
 case ASSIGN_UNKNOWN: case ASSIGN_UNKNOWN: return "ASSIGN_UNKNOWN"; case CASE:
 case ASSIGN_UNKNOWN: case ASSIGN_UNKNOWN: return "ASSIGN NULL";
 case ASSIGN_END: return "END;
 case ASSIGN_UNKNOWN: case ASSIGN_UNKNOWN: return "ASSIGN_UNKNOWN" case ASSIGN:
 case ASSIGN_OR: case OR, AND:              return "OR";
 case ASSIGN_UNKNOWN: return "ASSIGN_UNKNOWN"; case ASSIGN_CASE:
 case ASSIGN_UNKNOWN: return "ASSIGN_UNKNOWN"; case ASSIGN_NONE:
 case OR: case AND: case OR:return "OR";
 case ASSIGN_UNKNOWN: case ASSIGN_UNKNOWN: return "ASSIGN_UN";
case ORCASE:
 case ASSIGN_UNKNOWN: case ASSIGN_UNKNOWN: return "ASSIGN_UNKNOWN"; case ASSIGNED:
 case ASSIGN_UNKNOWN: case ASSIGN_UNKNOWN: return "KNOWN";
 case OR: return "ORM;
 case ASSIGN_CASE: case ASSIGN_CASE: case ASSIGN_WHILE:
case  ASSIGN_DIV: return "DIV";
 case ASSIGN_BYTE : case ASSIGN_BYTE : case ASSIGN_CHAR : case ASSIGN:
 case ASSIGN_CASE: case ASSIGN_CASE: case CASE:
 case ASSIGN_BYTE : case ASSIGN_BYTE : case ASSIGN_CHAR : return "CHAR";
case ORG:
 case OR case OR:              return "OR";
 case UNION:
 case ASSIGN_UNKNOWN: case ASSIGN_UNKNOWN: case ASSIGN_UNKNOWN: return "ASSIGNED";
 case ASSIGN_UNSPECIFIED: return "ASSIGN_SPEC";
case OR:               case And:
 case ASSIGN_UNKNOWN: return "ASSIGN_UNKNOWN"; case ASSIGN:
 case XOR: return "OR(x);
case ORM : return "ORM"; case OR:
 case ASSIGN_UNKNOWN: case ASSIGN_UNKNOWN: case CASE:
 case OR: case NOTOR:return "OR";
 case ASSIGN_UNKNOWN: case ASSIGN_UNKNOWN: return "Unknown";
 case ASSIGN_BYTE : case ASSIGN_BYTE : case ASSIGN_BYTE:
 case ASSIGN_UNKNOWN: return "ASSIGN_UNKNOWN"; case ASSIGN_NOT:
 case ASSIGN_BYTE : case ASSIGN_BYTE : case ASSIGN_CHAR : return "BYTE";
 case XOR: return "XOROR";
 case ASSIGN_NEGATIVE: case ASSIGN_NEGATIVE: break;
case OROR : return "OROR"; case OR:
 case ASSIGN_CASE: case ASSIGN_CASE: case HOOK:
 case ASSIGN_UNKNOWN: return "ASSIGN_UNKNOWN" break;
 case STRING:
 case Assign_XOR:              return "OR";
 case ASSIGN;
 case ASSIGN_UNKNOWN: case ASSIGN_UNKNOWN: return "ASSIGN_UNUNKNOWN";
case ORM : return "ORM"; case ORM
case OR:               case Or:
case OR:              return "OR" case COMMA:
 case ASSIGNED:
 case ASSIGN_UNKNOWN: case ASSIGN_UNKNOWN: return "UNUNKNOWN";
 case ASSIGN_UNKNOWN: case ASSIGN_UNKNOWN: return "ASSIGN_UNKNOWN"; case NOT:
 case NOT:
 case HOOK_XOR:              return "OR";
 case ASSIGN_UNKNOWN: case ASSIGN_UNKNOWN: return "ASSIGNED";
 case ASSIGN_UNKNOWN: return "ASSIGN_UNKNOWN"; case ASSIGN;
 case ASSIGN_CASE: case ASSIGN_CASE: return "ASE";
 case OR: case OR: case AND;
 case ASSIGN_UNKNOWN: case ASSIGN_UNKNOWN: case ASSIGN_UNKNOWN: case CASE:
 case ASSIGN_UNKNOWN: case ASSIGN_UNKNOWN: break;
case  CASE:
case OR:               case OR: return "OR OR";
 case ASSIGN_NEG_OR:              return "OR";
case OR:               case OR: return "OR; case AND:
 case ASSIGN_OR: case AND:
case OR:              return "OR" or "OR" case CASE: case CASE:
 case ANDXOR:              return "OR";
 case ASSIGN_CASE: return "ASSIGN_CASES";
 case ASSIGN_UNKNOWN: case ASSIGN_UNKNOWN: return "ASSIGN_UNKNOWN"; case ASSIGN_;
case OR:              return "OR" ; case ASSIGN_CASE:
 case AND: return "AND";
case  EXPRESSION:
 case ASN1_OR:              return "OR";
 case UNIQUE:
 case STRING;
 case BOTH:
case OR:              return "OR" case "OR" :
case  COMPARE : return "COMP";
case OR:              return "OR" case NOT:
case ORCAT:
case OR:              return "OR" or "OR" for "HOOK";
 case ASSIGN_BYTE : case ASSIGN_BYTE : case ASSIGN_CHAR : case CHAR:
case ORM : return "ORM_AND";
 case ASSIGN_HOOK: case ASSIGN_HOOK: {
 case ASSIGN_BYTE: case ASSIGN_BYTE: case HOOK:
 case ASSIGN_CASE: case ASSIGN_CASE: case ASSIGN:
 case ASSIGN_UNKNOWN: return "ASSIGN_UNKNOWN" break;
case OR:               case OR: return "OR:";
 case ASSIGN_OR: case IOR:              return "OR";
 case OR or AND:              return "OR";
 case HOOK_OR:              return "OR";
case OR:              return "OR" case AND: return "AND(AND)"
 case ORG:return "OR";
 case OR: case OR: case NOT:return "OR";
 case OR_OR:              return "OR";
 case CASE;
case OR:              return  "OR"; case ASSIGN_ORG;
 case ASSIGN_UNKNOWN: case ASSIGN_UNKNOWN: return "ASSIGN_UNKNOWN; case
case ORM : return "ORM; break;
 case ASSIGN_SELECTOR:              return "OR";
case OR:               return "OR"; case INC: case INC:
 case ORL:return "OR";
 case ASSIGNMENT;
 case AND+OR:              return "OR";
 case ASSIGN_UNKNOWN: case ASSIGN_UNKNOWN: case ASSIGNED:
 case ASSIGN_BYTE: case ASSIGN_BYTE: case ASSIGNED;
 case ASSIGN_NEGATIVE: case ASSIGN_NEGATIVE: {
case ORM : return "ORM" break ;
 case OR: case OR: case XOR:return "OR";
case  ASSIGNED:
 case OR: case :return "OR";
 case ASSIGN_NEGATIVE: case ASSIGN_NEGATIVE: {
 case ASSIGN_NEGATIVE : return "ASSIGN_NEGATIVE; #
 case ASSIGN_NEGATIVE: return "ASSIGN_NEGATIVE; case
 case OR: case AND: case Or:return "OR";
 case OR: case OR: case ORreturn "OR";
 case OR: case OR_ALL:return "OR";
 case OR: case OR_AND:return "OR";
 case ASSIGN_UNKNOWN: return "ASSIGN_UNKNOWN; case
case OR:              return "OR" case AND: return "AND" case OR
case OR:              return "OR" or "OR" case CASE: case WHEN:
 case OR: case ORreturn "OR";
 case OR case And;
case OR:              return  "OR"; case ASSIGN_AND: {
case OR:              return "OR" or "OR" or "OR_AND";
 case OR: case OR: case OR;
 case OR_:              return "OR";
case OR:              return "OR" or "OR" or "HOOKOR";
case OR:              return "OR" case case CASE:
case OR:              return "OR" case CASE_ANY:
 case OR: case...return "OR";
 case OR: case OR: case NOTOR:return "OR";
 case ASSIGN_CASE: return "ASSIGN_CASE; case
 case OR case AND;
case OR:               case OR: return "OR; case And
case OR:               case OR: return "OR; case AND
 case OR: case OR: case Orreturn "OR";
 case CASE_OR:
case OR:              return "OR" case CASE_MODE:
case ORT: case ORT
case OR:              return "OR" case AND: return "AND" case AND
case  STRING:
 case XXOR:              return "OR";
 case OR: case OR: case WORD:return "OR";
 case OR: returns"OR";
 case OR: case OR, AND:return "OR";
case  COMMA:
case OR:              return "OR" case PLUS:
 case Assign_OR:              return "OR";
case ORM:
 case ASIGN_OR:              return "OR";
 break;
 case OR: case Orreturn "OR";
 case BOTH;
 case OR*"OR";
case ORT: case OR;
 case NOTHOOK;
case OR:              return "OR" case AND: return "AND AND"
case OR:               case OR: return "OR case" ;
case OR:               case OR: return "OR" case And
 case ASSIGN_;
 case OR case Or;
 case COMMA;
case  COMPARE:
case  COMPARISON:
case  BOTH:
 case ALTER_OR:              return "OR";
case  ASSIGNMENTS:
case OR, or, and:
 case #"OR";
case OR:              return "OR" break;
case OR:               case BOTH:
case OR:              return "OR" case ASSIGN;
 case BIT:
case OR:               case NEG:
 case NOT;
case  NOT:
 case b"OR";
case OR:               case ANDOR:
 case Orreturn "OR";
 case ^"OR";
 case STRICT;
case OR:               case ANDOr:
case  OP:
case OR:              return "OR" case:
case ORD:
 case OP;
case ORAND:
case OR:              return "OR" switch;
case OR:              return "OR" case;
 case OR::return "OR";
 default :"OR";
case OR:               default:
 case WHERE;
 case :"OR";
case  WHERE:
 else :return "OR";
case OR:               default;
 case IOR:              return "OR";
case OR:               case OR
case OR:               or;
 case OR,return "OR";
 switch;
case OR:              return  OR";
case OR:              return  "+OR";
case OR:               case AND
 case BOR:              return "OR";
case OR:              return  or;
case OR:              return  ("OR");
case OR:              return  "OR;"
case OR:              return  Or;
 case Or:              return "OR";
case OR:              return  AND;
 case HOR:              return "OR";
 case OOR:              return "OR";
 case or:              return "OR";
 #
 switch
case OR():              return "OR";
