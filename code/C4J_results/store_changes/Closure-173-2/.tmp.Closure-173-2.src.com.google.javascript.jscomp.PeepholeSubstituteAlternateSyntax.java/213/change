 return n;
return  n ; }
return  n ; } return n ;
 else { return n ; } return n;
 else { n. removeFirstChild ( ) ; }
 else { n. removeFirstChild ( ) ;
return  n ; } return n ; }
 else { n. detachChildren(); }
 else { n. detachChildren ( ) ;
 else { return n ; }
 else { n. removeFirstChild ; }
return  n. clone ( ) ;
 else { n. removeFirstChild ( ) ; } }
 else { n. removeFirstChild ( ) }
 else { n. removeFirstChild(); reportCodeChange(); }
return  n. getFirstChild ( ) ;
 else { return n ; } }
 else { return n;
return  n. cloneNode ( ) ; }
return  n ; return n ;
 else { return n ; } } return n;
 else { return n ; } }
return  n. clone ( ) ; }
 else { return n ; };
 else { n. removeLastChild ( ) ; }
return  n. getFirstChild ( ) ; }
 else { n. removeFirstChild(); } } else { n. removeFirstChild(); }
 else { n. removeFirstChild(); reportCodeChange(); } }
 if ( n!= null ) { return n ; } if ( n!= null ) { n. removeFirstChild ( ) ; }
 else { n. removeFirstChild(); reportCodeChange();
 else { n. removeLastChild ( ) ;
return  n. clone ( ) ; } return n ;
 else { n. removeFirstChild(); return n ; }
 else { n. removeFirstChild(); } if ( n == null ) {
 else { n = null ; }
 else { n. removeFirstChild(); } return n ; } }
return  n ; return n ; }
 else { n. removeFirstChild(); } } else { n. removeFirstChild(); } }
return  n ; } } return n ;
 else { return null ; } returnn;
 else { n. removeFirstChild(); } return n ; }
 else { n. removeFirstChild(); return n ; } }
return n. clone ( ) ; } return n ; }
 if ( n!= null ) { return n ; } if ( n!= null ) { return n ; } if ( n == null ) {
 else { n. removeFirstChild(); } if ( n!= null ) {
 else { return - 1;
 else { n. removeLastChild ( ) ; } }
 else { n = n. parent ; }
return  n ; } return n ; } ;
return  n ; } ;
return  n. cloneNode ( ) ;
return  n. clone ( ). detach ( ) ;
 else { n = n. clone ( ) ; }
 if ( n!= null ) { return n ; } if ( n!= null ) { n. detachChildren ( ) ;
 if ( n!= null ) { return n ; } if ( n!= null ) { n. removeFirstChild ; }
 if ( n!= null ) { return n ; } if ( n!= null ) { return n ; } if ( n!= null ) {
 else { n = n. clone ( ) ;
 else { n. removeFirstChild(); } reportCodeChange(); }
 else { n. removeFirstChild(); reportCodeChange(); } } }
 else { n. removeFirstChild(); } } else { n. removeFirstChild();
 else { n. removeFirstChild(); } } if ( n!= null ) {
 if ( n!= null ) { return n ; } if ( n!= null ) { n. removeLastChild ( ) ; }
 else { return n ; } } else { returnn;
 else { n = null ; } }
 else { n. removeFirstChild(); } } else { n. removeFirstChild ; }
return n. cloneNode ( ) ; } return n ;
 else { return n ; } break;
 if ( n!= null ) { return n ; } if ( n!= null ) { n. removeFirstChild ( reportCodeChange ) ;
 else { n. removeFirstChild(); } return n ; } else {
 else { n. removeFirstChild(); } } else { n. removeFirstChild ;
 if ( n!= null ) { return n ; } if ( n!= null ) { n. removeFirstChild ( reportCodeChange()); }
 else { n. removeFirstChild(); } } else { n. removeChildren(); }
 else { n. addChild ( n ) ; }
 if ( n!= null ) { return n ; } if ( n!= null ) { n = n. getParent ( ) ;
 else { n. removeFirstChild(); } } else { n. removeChild(); }
 if ( n!= null ) { return n ; } if ( n!= null ) { throw new RuntimeException ( n ) ; }
 else { n. removeFirstChild(); throw n ; } }
 else { return n ; } };
 else { n. removeFirstChild(); } } if ( n == null ) {
 if ( n!= null ) { return n ; } if ( n!= null ) { n. removeFirst ( ) ;
 else { reportCodeChange(); }
 if ( n!= null ) { return n ; } if ( n!= null ) { return n ; } if ( n ) {
 else { n = n. clone ( ) ; } if ( n!= null ) { n. removeFirstChild ( ) ;
 else { n. removeFirstChild(); } } else { n. removeFirstChild(); } } }
 if ( n!= null ) { return n ; } if ( n == null ) { return n ; } if ( n == n ) {
 else { n. removeFirstChild(); } } else { n = null ; }
 else { n. removeFirstChild(); return n ; } } }
 else { return n ; } } }
 else { n. removeFirstChild(); } } else { n = parent ; }
 if ( n!= null ) { return n ; } if ( n!= null ) { n = n. next ; }
 else { n. removeFirstChild(); } } else { n. removeFirstChild(); } if ( n!= null ) {
 else { n = n. parent ;
 else { n. removeFirstChild(); } } else { n. removeLastChild(); }
 else { return n ; } return;
 else { n. removeChildren(); }
 else { n. removeFirstChild(); } if ( n == null )
 else { n. removeFirstChild(); } return n ; } } ;
 else { return n }
 else { n. removeFirstChild(); } } else { n. detachChildren(); }
 else { n. removeFirstChild(); } } else { n. removeFirstChild(); } } else { n. removeFirstChild();
return  n ; } } return n ; }
 else { n. removeFirstChild(); } } }
 else { n. removeFirstChild(); } return n ; } } }
 else { return n ; }
 } else { n. removeFirstChild(); } } else { n. removeFirstChild(); }
 else { n. removeFirstChild(); } } else { n. removeFirstChild(); } } else { return n ; }
return  n. cloneNode ( ) ; } ;
return n. clone ( ). detachChildren ( ) ;
return  n. detach ( ) ;
 else { return n ; return n;
 else { n. removeFirstChild(); } if ( mayHaveSideEffects ( n. getParent ( ) ) )
return  n ; } } ;
 else { n. removeFirstChild(); } } else { return n ; } }
 else { return n ; } } } return n;
 } else { n. removeFirstChild(); } } else { n. removeFirstChild(); } }
 else { n. removeFirstChild(); } } else { n. removeFirstChild(); } } else { n. removeChildren(); }
return  n ; } return n ; } return n ;
 else { n. removeFirstChild(); } } else { n. removeFirstChild(); } } else { n. removeFirstChild ;
 else { n. removeFirstChild(); } } else { n. removeFirstChild(); } if ( n == null ) {
 else { n. removeFirstChild(); } } else { n. removeFirstChild(); } } else { n. removeChild(); }
 else { n. removeFirstChild(); } } else { n. removeFirstChild ; } }
return n ; } return n ; } return n ; }
 else { n. removeFirstChild(); } if ( mayHaveSideEffects ( n ) ) { reportCodeChange();
return  n. cloneNode ( ) ; } } ;
 else { n. removeFirstChild(); } } else { n. removeLastChild(); } }
 else { return n ; } return null;
 else { n. removeFirstChild(); } } else { n. removeFirstChild(); } return n ; } }
 else { return n. parent;
 else { n. removeFirstChild(); } } else { n. removeFirstChild(); } } else { n. removeLastChild();
return  n. clone ( ) ; } } ;
return  n. clone ( ) ; } return node ;
 else { return null ; } } returnn;
 else { n. removeFirstChild(); } } else { n. removeFirstChild(); } } } }
 else { n. removeFirstChild(); } } else { n. removeFirstChild(); } return n ; } } ; }
 else { n. removeFirstChild(); } } else { n. removeFirstChild(); } return n ; }
return  n ; return n ; } ;
 else { n. removeFirstChild(); } return n ; } } ; }
 else { return n.getFirstChild(); };
return  n. clone ( ) ; return n ;
 else { n. removeFirstChild(); } } else { n. removeFirstChild(); } } ;
 else { n. removeFirstChild(); } } } }
 else { n. removeFirstChild(); } } else { n. removeFirstChild(); return n ; } }
 else { return n.getParent(); } returnn;
 else { n. removeFirstChild(); } } else { n. removeLastChild ; }
 else { n. removeFirstChild(); } } else { n. removeFirstChild(); return n ; }
return  n ; } return node ;
 else { return (Node)n;
 else { n = n ; }
return  n. clone ( ) ; } ;
 else { n. removeFirstChild(); } if ( mayHaveSideEffects(n)) { n. removeChild();
 else { n. removeFirstChild(); } if ( mayHaveSideEffects ( n ) ) return n ;
 else { n. removeFirstChild(); } } else { n. removeFirstChild(); } } else { } }
 else { n. removeFirstChild(); } } else { n. removeFirstChild(); } } } } }
 else { n. removeFirstChild(); } } else { n. removeFirstChild(); } } else {
 else { return null ; }
return  n. cloneNode ( ) ; } }
return n. clone ( ) ; } return node ; }
 else { n. removeFirstChild(); } if ( mayHaveSideEffects ( n ) ) return n ; else
 else { n. removeFirstChild(); } return n ; } } } }
 } returnn;
 else { n. removeFirstChild(); } if ( mayHaveSideEffects ( n ) ) return n ; }
 else { return n ; } } return null;
 else { n = n. nextChild ( );
return  n ; } }
 else { return n.getFirstChild(n;
 else { return null }
 else { throw n ; }
 else { return n ; } } return node;
 return n ; }
return  n ; return node ;
 else { return null; }n;
 else { return n ; } return - 1;
 else { } }
 else { return undefinedNode;
 else { return n ; } return node;
 else { reportCodeChange();
 else { return n ; } return n ; };
return  n. parent ; }
return  n ; return null ;
 else { return n.n;
 else { return n ; } } } return null;
 else { return n.getFirstChild().n;
 else { return n ; } } } } returnn;
 else { return nn;
 else { return n ;
 else {
 else { return n.getFirstChild();n;
 else { }
return  n. parent ;
 else { n = n;
 return n ; } }
 else { return "undefined";n;
 if ( simplified ) {
 else { return null; returnn;
 else { return null_n;
 else { return n; }n;
 else { return undefined_n;
 } ;
 else { n = null;
 }
 } return n ; }
 return n
 break ; } }
 else { return node_n;
 else { return _n;
 return (Node)n;
 else { return null+n;
 return n + 1;
 return "return "+n;
 } else {
return  n ; return ;
 return null ; }
 else { return ln;
 return - 1;
 else { return null;
 return n ;
 } } }
 return n return n;
 } } ;
 } }
 return null ;
 return nn;
 } } returnn;
 return n.n;
 return Undefined;
 }
 } }
 return _n;
 return ln;
return  node ; }
 return undefinedNode;
 return null+n;
 return ;
 return undefined_n;
 return node ;
 break ;
return  n ; ;
 return fn;
 } return null;
 } ;
 } else
 default :
return n. }
 return undefined;
 else
