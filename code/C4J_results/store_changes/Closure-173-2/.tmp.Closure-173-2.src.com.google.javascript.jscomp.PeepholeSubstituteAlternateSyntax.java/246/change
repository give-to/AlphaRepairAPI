private static final ImmutableSet<String> STANDARD_OBJECT_CONSTRUCTORS =
 Set<String> STANDARD_OBJECT_CONSTRUCTORS =
private static final  ImmutableSet immutableSet() {
private static  ImmutableSet immutableSet() {
private static final ImmutableSet<String>
private static final ImmutableSet<String> STANDARD_OBJECT_CONSTRUCTORS  = ImmutableSet. of ( ) ;
private static final  Immutable
private static final  ImmutableSet immutableSet();
private static final ImmutableSet<String>  ImmutableSet() {
private static final  ImmutableSet[]
private static final ImmutableSet<String>  ImmutableSet(...) {
private  void reportCodeChange(Node n) {
private static final ImmutableSet<String> STANDARD_OBJECT_CONSTRUCTORS  = ImmutableSet. ofSet ( ) ;
private static final ImmutableSet of(String, Number, Boolean) {
private static  ImmutableSet immutableSet();
private static final ImmutableSet<String>  of(String, Number, Boolean) {
private static final  ImmutableSet ImmutableSet() {
private static final  ImmutableSet immutableSet(...) {
private static final ImmutableSet<String> STANDARD_OBJECT_CONSTRUCTORS (Node n) {
private static  ImmutableSet of(String, Number) {
private static final ImmutableSet<String, String, Number> immutableSet() {
private static  ImmutableSet immutableSet(...) {
private static final  ImmutableSet immutableSet =
private static final  ImmutableSet immutableSet;
private static  ImmutableSet immutableSet(Node n) {
private static final ImmutableSet<String, Number, Boolean> immutableSet() {
private static final ImmutableSet<String, Number, Boolean> ImmutableSet() {
private static  ImmutableSet[]
private static final ImmutableSet of(String, Number) {
private static  ImmutableSet ImmutableSet() {
private static final ImmutableSet<String> STANDARD_OBJECT_CONSTRUCTORS  = ImmutableSet.Of();
private static final ImmutableSet<String, String, Number> ImmutableSet() {
private static final  ImmutableSet immutableSet()
private static final  ImmutableSet of();
private static  ImmutableSet newObject() {
private static final ImmutableSet<String> STANDARD_OBJECT_CONSTRUCTORS  = ImmutableSet. ofList ( ) ;
private static final ImmutableSet<String> STANDARD_OBJECT_CONSTRUCTORS  = set ( ) ;
private static final ImmutableSet<String>  immutableSet(Node n) {
private static  ImmutableSet immutableSet(n);
private static  ImmutableSet immutableSet(n) {
private static final ImmutableSet<String>  of(String, Number, boolean) {
private static final ImmutableSet<String, String, Number, Boolean> immutableSet();
private static final  ImmutableSet ImmutableSet();
private static final ImmutableSet immutableSet(Node n) {
private static final ImmutableSet of(String, Number, boolean error) {
private static  ImmutableSet emptySet() {
private static final ImmutableSet<String> STANDARD_OBJECT_CONSTRUCTORS (Node n) { return null ; }
private static  ImmutableSet ofObject(Node n) {
private static  ImmutableSet ImmutableSet(...) {
private static final ImmutableSet.of(String, Number, Boolean) {
private static final  ImmutableSet of(
private static final ImmutableSet of(String, Number, boolean) {
private static final ImmutableSet<String> STANDARD_OBJECT_CONSTRUCTORS  = ImmutableSet.of(null);
private static  ImmutableSet ImmutableSet();
private static final ImmutableSet<String>  of(String, Number, boolean error) {
private static final ImmutableSet<String> STANDARD_OBJECT_CONSTRUCTORS  = newSet ( ) ;
private static final ImmutableSet<String>  ImmutableSet<Object> {}
private static final  ImmutableSet immutableSet(); {
private static  ImmutableSet of(String, Boolean) {
private  void reportCodeChange(Node n)
private static final ImmutableSet<String, String, Number, Boolean> emptySet();
private static final ImmutableSet<String>  immutableSet() {
private static final ImmutableSet<String, Object>
 else if ( isASTNormalized ) { return n. clone ( ) ; } else { return n. clone ( ) ; } }
private  Node newObject() {
private static  ImmutableSet
private static final ImmutableSet<String>  ImmutableSet<Object>();
private static final  ImmutableSet immutableSet(n);
private static final  ImmutableSet immutableSet(n) {
private static  ImmutableSet of() {
private static final ImmutableSet<String> STANDARD_OBJECT_CONSTRUCTORS  = ImmutableSet. of ( "" ) ;
private static final ImmutableSet<String, String, Number, Boolean> immutableSet;
private static final ImmutableSet<String>  of(String, Number, boolean Error) {
private static  ImmutableSet of();
private static final ImmutableSet<String, String, Number> immutableSet();
private static final  ImmutableSet ImmutableSet(...) {
private static final  ImmutableSet emptySet() {
private static  ImmutableSet of(String, Function) {
private static final ImmutableSet of(String, Number, Error) {
private static final  ImmutableSet immutableSet() {}
private static final ImmutableSet<String> STANDARD_OBJECT_CONSTRUCTORS  = ImmutableSet.of(
private static final ImmutableSet<String> STANDARD_OBJECT_CONSTRUCTORS  = ImmutableSet.of
private static final ImmutableSet<String>  immutableSet(...) {
private static final ImmutableSet<String>  ImmutableSet(Object) {
private static final ImmutableSet<String> STANDARD_OBJECT_CONSTRUCTORS  = ImmutableSet.OF();
private  Node tryFoldFunction(Node n) {
private static final  ImmutableSet of() {
 else if ( isASTNormalized ) { return n. clone ( ) ; } else { return n. clone ( ) ; } } ;
private static final ImmutableSet<String>  ImmutableSet<Object> ImmutableSet();
private static final ImmutableSet<String>  ImmutableSet<Object> {
 else if ( isASTNormalized ) { return n. clone ( ) ; } else { return n. cloneNode ( ) ; } }
private static final  ImmutableSet immutableSet
private static  ImmutableSet immutableSet;
private static final ImmutableSet<String> STANDARD_OBJECT_CONSTRUCTORS  = Collections.Set();
private static  ImmutableSet()
private static final ImmutableSet<String>  of(String, Number, Error) {
private static final ImmutableSet<String, Number, Boolean> immutableSet();
private static final ImmutableSet<String>  ImmutableSet(null);
private static  ImmutableSet emptySet();
private static  ImmutableSet immutableSet(Node n);
private static final ImmutableSet<String> STANDARD_OBJECT_CONSTRUCTORS  = ImmutableSet ( ) ;
private static final  ImmutableSet of()
 else { if ( isASTNormalized ) { return n ; } else { return n. clone ( ) ; } } }
 else if ( isASTNormalized ) { return n. clone ( ) ; } else { return n. clone ( ) ; } } }
private static final ImmutableSet of(String, Boolean) {
private static final ImmutableSet<String>  newObjectTypes() {
private static final ImmutableSet of(String, Number, Boolean) {}
 else if ( isASTNormalized ) { return n. clone ( ) ; } else { return n. cloneNode ( ) ; }
private static final ImmutableSet<String> STANDARD_OBJECT_CONSTRUCTORS  = ImmutableSet.of(Object);
private static final ImmutableSet<String, String, Number, Boolean> of all
private static final ImmutableSet<String, String, Number, Boolean> set;
private static final ImmutableSet<String, String>
private static final ImmutableSet<String>  emptySet() {
private  Node reduceFunction(Node n) {
private static final  ImmutableSet < String, Node > set =
private static final ImmutableSet<String, String, Number, Boolean> set of
 else { if ( isASTNormalized ( n ) ) { return n ; } else { return n ; } } } ;
private static  ImmutableSet immutableSet(); {
private static final ImmutableSet<String> STANDARD_OBJECT_CONSTRUCTORS  = ImmutableSet.of(...)
private static  ImmutableSet of(...)
 else if ( isASTNormalized ) { return n. clone ( ) ; } else { return n. clone ( n ) ; } }
private static final  ImmutableSet of(String, Number) {}
private static final ImmutableSet<String, String, Number, Error> {}
private static final  ImmutableSet of
private static final ImmutableSet<String, String, Number> immutableSet;
 else { if ( isASTNormalized ( n ) ) { return n ; } else { return n ; } } } }
private static final ImmutableSet<String, String, Number, Error>[]
 else { if ( isASTNormalized ) { return n ; } else { throw new RuntimeException ( "Invalid AST." ) ; }
 else { if ( isASTNormalized ( n ) ) { return n ; } else { return n ; } } } else {
 else { if ( isASTNormalized ) { return n ; } else { throw new RuntimeException ( "Invalid AST" ) ; }
 else { if ( isASTNormalized ( n ) ) { return n ; } else { return n ; } } } ; }
private static final ImmutableSet<String>  ImmutableSet<Object> of all
private static final ImmutableSet<String, Node>[]
 else { if ( isASTNormalized ( n ) ) { return n ; } else { return n ; } } } } ;
private static final ImmutableSet<String, String> set();
private  void reportCodeChange(Node n);
private static  Immutable
private static final  ImmutableSet.of
private static  ImmutableSet immutableSet(Node n)
private static  ImmutableSet of
private static final ImmutableSet<String>  ImmutableSet<Boolean> {}
private static final  ImmutableSet < String, String > set =
private static final ImmutableSet<String, String, Boolean> set();
 else if ( isASTNormalized ) { return n. clone ( ) ; } else { return n. clone ( ). parent ; }
private static final ImmutableSet<String>  ImmutableSet<String> of();
private static final ImmutableSet<String>  ImmutableSet<Object> ImmutableSet;
private static final ImmutableSet<String> STANDARD_OBJECT_CONSTRUCTORS;
private static final ImmutableSet<String> STANDARD_OBJECT_CONSTRUCTORS (n) {
 } else { if ( isASTNormalized ( n ) ) { return n ; } else { return n ; } }
private static final ImmutableSet<String, String, String> set();
 else { if ( isASTNormalized ( n ) ) { return n ; } else { return n ; } return n ; }
private static final ImmutableSet<String, Node> set();
private static  ImmutableSet.of
private  void reportCodeChange(Node n) { }
private static final ImmutableSet.of(String, Number, Boolean) {}
private static final  Set immutableSet();
private static final ImmutableSet<String, String>()
private static final ImmutableSet<String, Node>()
private  Node tryFoldObject(Node n)
private static  ImmutableSet of(
private static final ImmutableSet<String>  ImmutableSet<Object> of();
private static final ImmutableSet<String>  ImmutableSet<String> of()
private static  ImmutableSet immutableSet(n)
 else { if ( isASTNormalized ) { return n ; } else { return n ; } } return n ; } } ;
private static final ImmutableSet<String, Object>[]
private static  Node newObject() {
private static final ImmutableSet<String> STANDARD_OBJECT_CONSTRUCTORS  = { } ;
private static final ImmutableSet<String, Object> set();
private static final ImmutableSet<String, Number, Boolean> set();
private  Node newObject(...) {
private static final ImmutableSet of(String, Number, boolean) {}
private static final  Set[]
private  Node addNewObject() {
private static final  ImmutableSet < String, Node > {}
private static final ImmutableSet<String> STANDARD_OBJECT_CONSTRUCTORS  = ImmutableSet.of(); {
private static final ImmutableSet<String, String>[]
private static final ImmutableSet<String, String, Node>()
private static final ImmutableSet<String> STANDARD_OBJECT_CONSTRUCTORS  = ImmutableSet. of ( ) ; static
private static final ImmutableSet<String>  ImmutableSetOf();
private static final ImmutableSet<String, String, Node>[]
private static  ImmutableSet of()
private static final  ImmutableSet ImmutableSet() {}
private static final ImmutableSet<String>  ImmutableSet<Object> ImmutableSet of
 else if ( isASTNormalized ) { return n. clone ( ) ; } else { return n ; } } } } ; }
private static final ImmutableSet<String> STANDARD_OBJECT_CONSTRUCTORS (Node n);
private static final ImmutableSet<String, String, Boolean> {}
 } else if ( isASTNormalized ) { return n. clone ( ) ; } else { return n ; }
private static final ImmutableSet<String, String, Boolean>()
private static final ImmutableSet<String>  ImmutableSetOf(...)
 } else { if ( isASTNormalized ( n ) ) { return n ; } else { return null ; } }
private static final ImmutableSet<String>  of(String, Number, Boolean) {}
private static  ImmutableSet();
private static final  Set set();
 } else { if ( isASTNormalized ) { return n ; } else { return n ; } } } ; }
private static final ImmutableSet<String, String, Node> {}
private static final ImmutableSet<String>  emptySet();
private static final ImmutableSet<String, String, Boolean> set;
 } else { return NodeUtil. newUndefinedNode ( n. clone ( ) ) ; } }
 } else if (isASTNormalized()) { ImmutableSet. of ( "Object" ) ; }
private static final  Set immutableSet()
private static final ImmutableSet<String, String, String> of all
private static final ImmutableSet<String>  ImmutableSet<Boolean> of all
private static final  Set immutableSet
 } else if (isASTNormalized()) { ImmutableSet. of ( "Object" ) ;
private static final ImmutableSet<String> STANDARD_OBJECT_CONSTRUCTORS  = Collections.SET();
 } else if ( isASTNormalized ( n ) ) { return n ; } else { return n ; } }
 else { if ( isASTNormalized ) { return n ; } else { return n ; } } } } } ; }
 } else if ( isASTNormalized ) { return n ; } else if ( isASTNormalized ) {
 } else { if ( isASTNormalized ) { return n ; } else { return n ; } } } else {
 } else { if ( isASTNormalized ) { return n ; } else { return n ; } } } } ;
 } else if ( isASTNormalized ) { return n ; } else { return n ; } }
private static final  ImmutableSet()
private static final ImmutableSet of(String, Number, Boolean) { return
private static final ImmutableSet<String> set();
 else { if ( isASTNormalized ) { return n ; } else { return n ; } } } ; } } ;
private  void reportCodeChange(n)
private  Node tryFoldObject(Node n){
 } else if ( isASTNormalized ( n ) ) { return n ; } else { return n ; }
 } else { return NodeUtil. newUndefinedNode ( n ) ; } return n ; } ;
private static final ImmutableSet<String> STANDARD_OBJECT_CONSTRUCTORS (Node n) { return null ; } }
private static final ImmutableSet of(String, Number) {} {
private static final ImmutableSet<String,>
private static final ImmutableSet<String, Node>
private  void reportCodeChange(n);
 } else if ( isASTNormalized ) { return n ; } else if ( isASTNormalized ) { }
 } else if (isASTNormalized()) { ImmutableSet. of ( "Function" ) ;
private  Node reduceFunction(Node n)
 } else if ( isASTNormalized ) { return n ; } else { return n ; } } else {
 else if (isASTNormalized()) { ImmutableSet.of();
 } else if ( isASTNormalized ) { return n ; } else { return n ; } } }
 } else if (isASTNormalized()) { ImmutableSet. of ( "Object", "Array");
private static  Set[]
private static final  Set set()
private  Node newObject(n)
private static final ImmutableSet<String> STANDARD_OBJECT_CONSTRUCTORS  = null ;
 } else if ( isASTNormalized ) { return n. clone ( ) ; } else { return n ;
private static final ImmutableSet<String, Node> set()
 } else if (isASTNormalized()) { ImmutableSet. of ( ) ;
private static final ImmutableSet<String>  objects() {
 } else if ( isASTNormalized ) { return n. cloneNode ( ) ; } else {
private  Node getNewObject() {
 } else if ( isASTNormalized ) { return n ; } else { return null ; } }
 } else if ( isASTNormalized ) { return n ; } else { return n ; } } ;
 } else { if (isASTNormalized()) { ImmutableSet. of ( ) ;
private static final ImmutableSet<String, String> set()
 else if (isASTNormalized()) { return n ; } } ;
private static final ImmutableSet<String>  ImmutableSetOf()
 } else if (isASTNormalized()) { ImmutableSet. of ( "Object" )
 } else { return NodeUtil. newUndefinedNode ( n ) ; } return n ; } }
 } else { if (isASTNormalized()) { return n ; } return n ; }
 } else if (isASTNormalized()) { ImmutableSet. of ( "Object" ) }
 else if (isASTNormalized()) { return n ; } }
 } else if ( isASTNormalized ) { return n ; } else if ( isASTCall ) {
 } else if ( isASTNormalized ) { return n ; } else { return n ; } } ; }
private  Node newObject();
private static final ImmutableSet<String>()
private static  Set set();
private static final ImmutableSet<String>  newObjectTypes();
 } else if ( isASTNormalized ) { return n ; } else { return n ; } } } ; }
private static final ImmutableSet immutableSet(Node n) { return
 } else if (isASTNormalized()) { ImmutableSet. of ( n ) ;
 else if (isASTNormalized()) { var ImmutableSet = new
 } else { if (isASTNormalized()) { return n ; } } } ;
 } else if (isASTNormalized()) { return n. cloneNode ( ) ; } else {
 } else if (isASTNormalized()) { return n. clone ( ) ; } else {
 } else if ( isASTNormalized ) { return n ; } else { return n ; } } else { }
 else { n = n. cloneNode ( ) ; } } ;
 } else { if (isASTNormalized()) { ImmutableSet.of(); }
 } else { if (isASTNormalized()) { return n ; } } } ; }
private static final ImmutableSet<String>[]
 } else if (isASTNormalized()) { ImmutableSet. of ( "Function" )
private static final ImmutableSet<String> STANDARD_OBJECT_CONSTRUCTORS (Node n)
 } else if (isASTNormalized()) { ImmutableSet. of ( "Function" ) }
private static final ImmutableSet<String> STANDARD_OBJECT_CONSTRUCTORS  (Node n) { return
 private Set<String> STANDARD_OBJECT_CONSTRUCTORS =
 } else if (isASTNormalized()) { return n. clone ( ) ; } } ;
 } else { if (isASTNormalized()) { return n ; } } ; }
private static final ImmutableSet<String>  ImmutableSet();
 } else { if (isASTNormalized()) { ImmutableSet.create(); }
private static final ImmutableSet<String>  newObjects();
private static final ImmutableSet of(Object, String) {} {
private static final ImmutableSet<String> STANDARD_OBJECT_CONSTRUCTORS  = ImmutableSet.Of
 } else if ( isASTNormalized ) { return n. cloneNode ( ) ; } } else {
private static  Set immutableSet();
 } else if ( isASTNormalized ) { return n ; } else {
 } else if ( isASTNormalized ) { return n. cloneNode ( ) ; } else { }
 } else if ( isASTNormalized ) { return n. clone ( ) ; } else { }
private static final ImmutableSet<String>  immutableSet();
private  Node tryFoldFunction(Node n) {}
 else { n = n. clone ( ) ; } } ; }
 } else if ( isASTNormalized ) { return n ; }
 else if (isASTNormalized()) { var ImmutableSet of;
 } else if (isASTNormalized()) { ImmutableSet.of(); }
 } else { n = n. clone ( ) ; } return n ; } }
private  Node createObject() {
 } else if (isASTNormalized()) { var ImmutableSet = null ;
 else if (isASTNormalized()) { return null ; } }
 } else { if (isASTNormalized()) { return n ; } } ; } }
 } else if (isASTNormalized()) { ImmutableSet.create(); }
 } else if (isASTNormalized()) { ImmutableSet. of ( )
 } else if ( isASTNormalized ) { return n. cloneNode ( ) ; } } ;
 } else { n = n. clone ( ) ; return n ; } } ;
private  Node addObject() {
private static final  Set Set();
 } else { n = n. clone ( ) ; } return n ; } ;
 } else { return n. cloneNode ( ). clone ( ). clone ( ) ; }
 } else if (isASTNormalized()) { return n ; } } ;
private  void reportCodeChange(Node node) { }
private static final ImmutableSet of(Object, String) { }
 } else if (isASTNormalized()) { var ImmutableSet = new
 } else { return n. cloneNode ( ). cloneNode ( ) ; } } else {
 } else { n = n. clone ( ) ; return n ; } } }
 } else { return n. cloneNode ( ). clone ( ) ; } } else {
 Set.<String> STANDARD_OBJECT_CONSTRUCTORS =
 } else { return n. clone ( ) ; } return n ; }
private static final ImmutableSet<String>();
private  Node object() {
 else { return n ; } const _STANDARD_OBJECT_CONSTRUCTORS =
 } else if ( isASTNormalized ) { return n ; } } ;
 } else { return n. cloneNode ( ). cloneNode ( ). clone ( ) ;
 } else { return n. cloneNode ( ). cloneNode ( ) ; } } ;
private  Node newObject()
 } else { return n. cloneNode ( ). cloneNode ( ). clone ; } }
 } else { return n. clone ( ) ; } return n ; } ;
 final Set<String> STANDARD_OBJECT_CONSTRUCTORS =
 } else { return n. cloneNode ( ). cloneNode ( ) ; } } }
 } else { return n. cloneNode ( ). clone ( ) ; } } } ;
 } else { return n. cloneNode ( ). clone ( ) ; } } ; }
private  Node objects() {
 } else { return n. cloneNode ( ). cloneNode ( ) ; } } } ;
 } else if ( isASTNormalized ) { return n ; } } }
private  void reportCodeChange(Node n) {\ }
 } else { n = n. cloneNode ( ) ; } } } ; }
private static final ImmutableSet<String,}
 } else { return n. clone ( ) ; } } } ; }
private static final  Set set =
 } else if ( isASTNormalized ) { return null ; }
 } else { return n. clone ( ). clone ( ) ; } } else {
 } else { return n. clone ( ) ; } return n ; } } ; }
 } else { return n. clone ( n. clone ( ) ) ; } } ;
 } else { return n. clone ( ) ; } return n ; } } ) ;
 } else { return n. clone ( ) ; } } } ) ;
 } else { return n. clone ( n. clone ( ) ) ; } } }
private static final ImmutableSet<String>  emptySet()
 } else if (isASTNormalized()) { var ImmutableSet of;
 } else { return n. clone ( ) ; } } ; } }
 } else { return n. clone ( ) ; } } } } ;
private static final ImmutableSet<String> STANDARD_OBJECT_CONSTRUCTORS () {
 } else { throw new RuntimeException ( "BUG!" ) }
 } else { throw new RuntimeException ( "BUG!" ) ;
 } else { throw new RuntimeException ( "BUG" ) ;
private static final ImmutableSet<String>  immutableSet =
private static final ImmutableSet<String> STANDARD_OBJECT_CONSTRUCTORS  = Collections();
 else { return null ; } const _STANDARD_OBJECT_CONSTRUCTORS =
 } else { throw new RuntimeException ( "BUG" ) }
private static final  immutableSet
 else { return n ; } var _STANDARD_OBJECT_CONSTRUCTORS =
 } else { throw new RuntimeException ( "BUG"); } }
 } else if ( isASTNormalized ) { } else { }
private static  Set set()
private static  immutableSet
private static  immutableSet =
 const _STANDARD_OBJECT_CONSTRUCTORS =
 } else if ( isASTNormalized ) { return null ; } } ;
private  Set set();
private static  Set Set();
 else { return n ; } const __STANDARD_OBJECT_CONSTRUCTORS =
private static final ImmutableSet<String<
private static final ImmutableSet<String>  of();
 else { return n ; } const #STANDARD_OBJECT_CONSTRUCTORS =
 } else if ( isASTNormalized ) return n ; } }
private  static final
private static final ImmutableSet<String>  immutableSet
private static final ImmutableSet<Object>
 var _STANDARD_OBJECT_CONSTRUCTORS =
private static final  immutable set
private static  immutable set
private  Set set;
private static final ImmutableSet<String>,
private static final ImmutableSet<string>
 } ; return n ; } }?> STANDARD_OBJECT_CONSTRUCTORS =
private static  Set()
 private Set.<String> STANDARD_OBJECT_CONSTRUCTORS =
 } } ; return n ; } ; }?> STANDARD_OBJECT_CONSTRUCTORS =
private static final  Set of
 } ; return new Node ( ) ; }> STANDARD_OBJECT_CONSTRUCTORS =
 Collection<String> STANDARD_OBJECT_CONSTRUCTORS =
 } ; static ImmutableSetSTANDARD_OBJECT_CONSTRUCTORS =
 } ; const _STANDARD_OBJECT_CONSTRUCTORS =
 } } ; return new Node ( ) {static final ImmutableSet<String> STANDARD_OBJECT_CONSTRUCTORS =
private static final ImmutableSet<String>  of()
private static final ImmutableSet<String>  elements();
 } } ; return new Node ( ) ; }> STANDARD_OBJECT_CONSTRUCTORS =
 } } ; return n ; } ; <pre> STANDARD_OBJECT_CONSTRUCTORS =
 } ; return new Node ( ) ;?> STANDARD_OBJECT_CONSTRUCTORS =
 } } ; return n ; } ; <code> STANDARD_OBJECT_CONSTRUCTORS =
 } ; } } ; const NODE_STANDARD_OBJECT_CONSTRUCTORS =
 } ; } } ; const EMPTY_STANDARD_OBJECT_CONSTRUCTORS =
 } ; } else {
 } } ; return new Node ( ) ;static final ImmutableSet<String> STANDARD_OBJECT_CONSTRUCTORS =
 } ; return n ; } } ;?> STANDARD_OBJECT_CONSTRUCTORS =
 final Set.<String> STANDARD_OBJECT_CONSTRUCTORS =
 } } ; } } ; const NODE_STANDARD_OBJECT_CONSTRUCTORS =
 static Set _STANDARD_OBJECT_CONSTRUCTORS =
 } } ; return new Node ( ) ;?> STANDARD_OBJECT_CONSTRUCTORS =
 } ; } } ; }
 } ; } } ; static Immutable_STANDARD_OBJECT_CONSTRUCTORS =
 static Set.STANDARD_OBJECT_CONSTRUCTORS =
 } ; static final Set _STANDARD_OBJECT_CONSTRUCTORS =
 } ; } } ; static ImmutableSetSTANDARD_OBJECT_CONSTRUCTORS =
 } ; return n ; } } ; }> STANDARD_OBJECT_CONSTRUCTORS =
 } } ; return new Node ( ) { "static final ImmutableSet<String> STANDARD_OBJECT_CONSTRUCTORS =
 } } ; return new Node ( ) { privatestatic final ImmutableSet<String> STANDARD_OBJECT_CONSTRUCTORS =
 } ; } } ; private Immutable<String> STANDARD_OBJECT_CONSTRUCTORS =
 } } ; return new Node ( ) ; }static final ImmutableSet<String> STANDARD_OBJECT_CONSTRUCTORS =
 } } ; } } ; const INSTANCE_STANDARD_OBJECT_CONSTRUCTORS =
 } } ; }
 } ; } } ; static Set MAP_STANDARD_OBJECT_CONSTRUCTORS =
private static final ImmutableSet<String> STANDARD_OBJECT_CONSTRUCTORS {
 } } ; } else {
 } } ; } } ; const EMPTY_STANDARD_OBJECT_CONSTRUCTORS =
 } } ; } } ;
 } ; } } ) ;
 } ; } } ;
 } } ; } } ; static Immutable_STANDARD_OBJECT_CONSTRUCTORS =
 } ; } static final Set _STANDARD_OBJECT_CONSTRUCTORS =
 } ; } ; }
 } ; return new Node ( ) <> STANDARD_OBJECT_CONSTRUCTORS =
 List<String> STANDARD_OBJECT_CONSTRUCTORS =
 } ; return node ; } }?> STANDARD_OBJECT_CONSTRUCTORS =
 } ; } static static Set _STANDARD_OBJECT_CONSTRUCTORS =
 } ; static Set _STANDARD_OBJECT_CONSTRUCTORS =
 } ; }
 } ; return new Node ( ) {> STANDARD_OBJECT_CONSTRUCTORS =
 } } ; } } ; return new Node ( ) {
 } ; static Immutable_STANDARD_OBJECT_CONSTRUCTORS =
 } ; static static Set _STANDARD_OBJECT_CONSTRUCTORS =
 } } ; return n ; } } ; }static final ImmutableSet<String> STANDARD_OBJECT_CONSTRUCTORS =
 } ; private Set _STANDARD_OBJECT_CONSTRUCTORS =
 } else {
 } } } ; }
 } ; const SET_STANDARD_OBJECT_CONSTRUCTORS =
 } } ; } } ; static static SET _STANDARD_OBJECT_CONSTRUCTORS =
 } ; static Set MAP_STANDARD_OBJECT_CONSTRUCTORS =
 } } ) ;
 } } ; } } ; }
 } } ; } } ; return n ; } ; }
 } ; } } } ; }?> STANDARD_OBJECT_CONSTRUCTORS =
 } } ; return new Node ( ) ; "static final ImmutableSet<String> STANDARD_OBJECT_CONSTRUCTORS =
 } ; } } ; } } ; private Set<String> STANDARD_OBJECT_CONSTRUCTORS =
private  static Set
 } } ; } } ) ;
 } ; } static Set MAP_STANDARD_OBJECT_CONSTRUCTORS =
 } } ; } } ; return n ; } } ;
 } } ; return new Node ( { privatestatic final ImmutableSet<String> STANDARD_OBJECT_CONSTRUCTORS =
 } } } ; } else {
 } ; } } ; } static Immutable<String> STANDARD_OBJECT_CONSTRUCTORS =
 } ; } } ; } static final Set<String> STANDARD_OBJECT_CONSTRUCTORS =
 } ; } }
 } ; } } ; } private Set<String> STANDARD_OBJECT_CONSTRUCTORS =
 } } } ; } } ;
 } ; return node ; } } ;?> STANDARD_OBJECT_CONSTRUCTORS =
 } ; } private Immutable<String> STANDARD_OBJECT_CONSTRUCTORS =
 } ; } } ; } } ; final Set<String> STANDARD_OBJECT_CONSTRUCTORS =
 } ; } static Namespace_STANDARD_OBJECT_CONSTRUCTORS =
 static const _STANDARD_OBJECT_CONSTRUCTORS =
 } ; } } ; } } ; static Set<String> STANDARD_OBJECT_CONSTRUCTORS =
 } ; } } ; private Set<String> STANDARD_OBJECT_CONSTRUCTORS =
 } } ; } }
 } ; const MAP_STANDARD_OBJECT_CONSTRUCTORS =
 } ; } private Set<NameString> STANDARD_OBJECT_CONSTRUCTORS =
 } } } ; } ; }
 } ; } } ; <code> STANDARD_OBJECT_CONSTRUCTORS =
 } ; } } ; } } private Set<String> STANDARD_OBJECT_CONSTRUCTORS =
 } ; } } ; final Set<String> STANDARD_OBJECT_CONSTRUCTORS =
 } ; static Set.STANDARD_OBJECT_CONSTRUCTORS =
 } ; } } ; }?> STANDARD_OBJECT_CONSTRUCTORS =
 } ; } } ; private Set<NameString> STANDARD_OBJECT_CONSTRUCTORS =
 } } } ;
 } ; } } ; private ImmSet<String> STANDARD_OBJECT_CONSTRUCTORS =
 } ; } private Set<*String> STANDARD_OBJECT_CONSTRUCTORS =
 } } } ; } } ; }
 } ; } } ; private final Set<String> STANDARD_OBJECT_CONSTRUCTORS =
 } ; } } ; private Set<*String> STANDARD_OBJECT_CONSTRUCTORS =
 } ; } static static SET _STANDARD_OBJECT_CONSTRUCTORS =
 } } } ; } } ) ;
 } ; } private HashSet<String> STANDARD_OBJECT_CONSTRUCTORS =
private static final ImmutableSet<String> STANDARD_OBJECT_CONSTRUCTORS ; {
 } } } ; } }
 } ; } } ; } } ; const Set<String> STANDARD_OBJECT_CONSTRUCTORS =
 } } ; } } ; return n ; } } }
 } ; } } ; <pre> STANDARD_OBJECT_CONSTRUCTORS =
 } } ; } } ; } } ) ; }
 } ; } } ; <?> STANDARD_OBJECT_CONSTRUCTORS =
 } ; } } private Set<String> STANDARD_OBJECT_CONSTRUCTORS =
 static #STANDARD_OBJECT_CONSTRUCTORS =
 } } ; } } ; } } ; } ; }
 } ; } } ; } } static Set<String> STANDARD_OBJECT_CONSTRUCTORS =
 } ; } } ; } static immutable Set<String> STANDARD_OBJECT_CONSTRUCTORS =
private  static immutable
 } } } } ; } } ;
 } ; } private Set<String> STANDARD_OBJECT_CONSTRUCTORS =
 } ; } } ; <br> STANDARD_OBJECT_CONSTRUCTORS =
 } ; } } ; static Set<String> STANDARD_OBJECT_CONSTRUCTORS =
 } } } } ; } } ; }
 } ; const __STANDARD_OBJECT_CONSTRUCTORS =
 } } } } } ; } else {
 } ; } } ; } static final Set.<String> STANDARD_OBJECT_CONSTRUCTORS =
 } ; } } ; private Set<QString> STANDARD_OBJECT_CONSTRUCTORS =
 } ; } } <?> STANDARD_OBJECT_CONSTRUCTORS =
 } } ; } } ; } }
 } } } } } ; } } ;
 static Set "STANDARD_OBJECT_CONSTRUCTORS =
 } ; var _STANDARD_OBJECT_CONSTRUCTORS =
 } ; } } ; } static Immutable.<String> STANDARD_OBJECT_CONSTRUCTORS =
 } ; } } <code> STANDARD_OBJECT_CONSTRUCTORS =
 } ; } ;
 } } } } } ; } ; }
 } } ; } } ; } ;
 } } } } } ; } } ; }
 } ; } private Set<XString> STANDARD_OBJECT_CONSTRUCTORS =
 const __STANDARD_OBJECT_CONSTRUCTORS =
 } } ; } } ; } ; } else {
 } } ; } } ; } ; } } ;
 } } ; return new Node () { publicstatic final ImmutableSet<String> STANDARD_OBJECT_CONSTRUCTORS =
 } } } } } } ; } } ;
 } ; } } <pre> STANDARD_OBJECT_CONSTRUCTORS =
 } } ; } } ; } ; } ; }
 } } ; } } ; } } ; } ;
 } ; <pre> STANDARD_OBJECT_CONSTRUCTORS =
 } private Set<String> STANDARD_OBJECT_CONSTRUCTORS =
 } } } } } } ; } ; }
 } ; } } { final Set<String> STANDARD_OBJECT_CONSTRUCTORS =
 } ; } } ; const ast |=
 } ; const #STANDARD_OBJECT_CONSTRUCTORS =
 static _STANDARD_OBJECT_CONSTRUCTORS =
 } ; <code> STANDARD_OBJECT_CONSTRUCTORS =
 } } ;
 } } } ; } } ; } }
 } ; }?> STANDARD_OBJECT_CONSTRUCTORS =
 } ; } } ; const names |=
 } ; } } <p> STANDARD_OBJECT_CONSTRUCTORS =
 } ; } } ; static Set ::=
 static static _STANDARD_OBJECT_CONSTRUCTORS =
 } } ; } } ; } "final ImmutableSet<String> STANDARD_OBJECT_CONSTRUCTORS =
 } ; } } { private Set<String> STANDARD_OBJECT_CONSTRUCTORS =
 } ; } } ; final Set.<String> STANDARD_OBJECT_CONSTRUCTORS =
 } ; final Set<String> STANDARD_OBJECT_CONSTRUCTORS =
 } } } } ; } } ; } }
 } ; } } ; } } ; private Collection<String> STANDARD_OBJECT_CONSTRUCTORS =
private static final ImmutableSet.<String> STANDARD_OBJECT_CONSTRUCTORS =
 } } } } ; } } ; } ;
 }?> STANDARD_OBJECT_CONSTRUCTORS =
 } ; } } ; private Set.<String> STANDARD_OBJECT_CONSTRUCTORS =
 } ; <?> STANDARD_OBJECT_CONSTRUCTORS =
 } ; } } <br> STANDARD_OBJECT_CONSTRUCTORS =
 } ; } } ; static static ::=
 } ; static _STANDARD_OBJECT_CONSTRUCTORS =
 } } } ; } } ; "final ImmutableSet<String> STANDARD_OBJECT_CONSTRUCTORS =
 } ; } static Set ::=
 } ; } } ; static static const=
 } ; private Set<String> STANDARD_OBJECT_CONSTRUCTORS =
 } ; } }?> STANDARD_OBJECT_CONSTRUCTORS =
 } } ; } } ; "final ImmutableSet<String> STANDARD_OBJECT_CONSTRUCTORS =
 } <pre> STANDARD_OBJECT_CONSTRUCTORS =
 } } } } ; } } "final ImmutableSet<String> STANDARD_OBJECT_CONSTRUCTORS =
 } ; } } ; } } private Collection<String> STANDARD_OBJECT_CONSTRUCTORS =
 } <?> STANDARD_OBJECT_CONSTRUCTORS =
 } } } ; } } ; }static final ImmutableSet<String> STANDARD_OBJECT_CONSTRUCTORS =
 } } ; } } ; { "final ImmutableSet<String> STANDARD_OBJECT_CONSTRUCTORS =
 } ; } } ==> STANDARD_OBJECT_CONSTRUCTORS =
 } ; <p> STANDARD_OBJECT_CONSTRUCTORS =
 } } } ; } ; } "final ImmutableSet<String> STANDARD_OBJECT_CONSTRUCTORS =
 } ; } } ; } } "ImmutableSet<String> STANDARD_OBJECT_CONSTRUCTORS =
 } <code> STANDARD_OBJECT_CONSTRUCTORS =
 } ;
 } } ; } } ; }static final ImmutableSet<String> STANDARD_OBJECT_CONSTRUCTORS =
 } } ; } } ; }final ImmutableSet<String> STANDARD_OBJECT_CONSTRUCTORS =
 } } ; } } ; { privatestatic final ImmutableSet<String> STANDARD_OBJECT_CONSTRUCTORS =
 } } ; } ; } "final ImmutableSet<String> STANDARD_OBJECT_CONSTRUCTORS =
private static final ImmutableSet<String> STANDARD_OBJECT_CONSTRUCTORS () {}
 } ; } ; } privatestatic final ImmutableSet<String> STANDARD_OBJECT_CONSTRUCTORS =
 } ; } } ; { "final ImmutableSet<String> STANDARD_OBJECT_CONSTRUCTORS =
 } ; } } ; "final ImmutableSet<String> STANDARD_OBJECT_CONSTRUCTORS =
 } } } ; } privatestatic final ImmutableSet<String> STANDARD_OBJECT_CONSTRUCTORS =
 } } ; } else { { privatestatic final ImmutableSet<String> STANDARD_OBJECT_CONSTRUCTORS =
 } } ; } } { "final ImmutableSet<String> STANDARD_OBJECT_CONSTRUCTORS =
 } ; } } ; } } static Collection<String> STANDARD_OBJECT_CONSTRUCTORS =
 } ; } } ; { privatestatic final ImmutableSet<String> STANDARD_OBJECT_CONSTRUCTORS =
 } } } ; } } { }static final ImmutableSet<String> STANDARD_OBJECT_CONSTRUCTORS =
 } ; } static static ::=
 } ; } } ; } } private List<String> STANDARD_OBJECT_CONSTRUCTORS =
 } ; } } { "final ImmutableSet<String> STANDARD_OBJECT_CONSTRUCTORS =
 } ; } else { { privatestatic final ImmutableSet<String> STANDARD_OBJECT_CONSTRUCTORS =
 } ; } } ; }static final ImmutableSet<String> STANDARD_OBJECT_CONSTRUCTORS =
 } } ; } } { }static final ImmutableSet<String> STANDARD_OBJECT_CONSTRUCTORS =
 } ; } static static *=
 } ; } static static &=
 } ; } static Set []=
 } } ; } } { privatestatic final ImmutableSet<String> STANDARD_OBJECT_CONSTRUCTORS =
 } } }
 } ; } } private Collection<String> STANDARD_OBJECT_CONSTRUCTORS =
 } <p> STANDARD_OBJECT_CONSTRUCTORS =
 } ; } } { }static final ImmutableSet<String> STANDARD_OBJECT_CONSTRUCTORS =
 } } } } ; } } ; "ImmutableSet<String> STANDARD_OBJECT_CONSTRUCTORS =
 } ; } privatestatic final ImmutableSet<String> STANDARD_OBJECT_CONSTRUCTORS =
 } ; } private Collection<String> STANDARD_OBJECT_CONSTRUCTORS =
 } ; } } private List<String> STANDARD_OBJECT_CONSTRUCTORS =
 } else { { privatestatic final ImmutableSet<String> STANDARD_OBJECT_CONSTRUCTORS =
 } } } ; "final ImmutableSet<String> STANDARD_OBJECT_CONSTRUCTORS =
 } } ; { "final ImmutableSet<String> STANDARD_OBJECT_CONSTRUCTORS =
 } ; } } private set<String> STANDARD_OBJECT_CONSTRUCTORS =
 } ; } { "static final ImmutableSet<String> STANDARD_OBJECT_CONSTRUCTORS =
 } ; } private List<String> STANDARD_OBJECT_CONSTRUCTORS =
 private Collection<String> STANDARD_OBJECT_CONSTRUCTORS =
 } ; } } { "ImmutableSet<String> STANDARD_OBJECT_CONSTRUCTORS =
 }
 } }
private static final ImmutableSet<String> STANDARD_OBJECT_CONSTRUCTORS ; {}
 } } } { "final ImmutableSet<String> STANDARD_OBJECT_CONSTRUCTORS =
 } ; } private set<String> STANDARD_OBJECT_CONSTRUCTORS =
 } ; final Collection<String> STANDARD_OBJECT_CONSTRUCTORS =
 } ; private Collection<String> STANDARD_OBJECT_CONSTRUCTORS =
 } private Collection<String> STANDARD_OBJECT_CONSTRUCTORS =
 } ; final List<String> STANDARD_OBJECT_CONSTRUCTORS =
private static final ImmutableSet<String>, STANDARD_OBJECT_CONSTRUCTORS =
 private List<String> STANDARD_OBJECT_CONSTRUCTORS =
 } ; }static final ImmutableSet<String> STANDARD_OBJECT_CONSTRUCTORS =
 } private List<String> STANDARD_OBJECT_CONSTRUCTORS =
 ;
private static final ImmutableSet<String> STANDARD_OBJECT_CONSTRUCTORS () throws
 } private set<String> STANDARD_OBJECT_CONSTRUCTORS =
 private set<String> STANDARD_OBJECT_CONSTRUCTORS =
 } private SET<String> STANDARD_OBJECT_CONSTRUCTORS =
private static final ImmutableSet<String>. STANDARD_OBJECT_CONSTRUCTORS =
 private SET<String> STANDARD_OBJECT_CONSTRUCTORS =
private static final ImmutableSet<?String> STANDARD_OBJECT_CONSTRUCTORS =
