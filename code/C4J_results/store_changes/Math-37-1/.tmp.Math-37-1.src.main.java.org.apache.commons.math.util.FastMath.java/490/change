recipb += -yb *  recip;
recipb += -yb * recip *  recip;
recipb +=  recip;
recipb += -yb;
 = -recip * recip;
recipb  = recipb;
 = -recip;
 rounding in division recipb += - yb * recip ; recipa += - yb * recip ;
recipb += -yb ; recipb += -ya;
 + recipb* recip * recip;
 - yb - yb - yb - yb - yb - yb - yb - yb - yb
 rounding in division recipb += -yb * recip ; recipa = -yb * recip ;
 rounding in division recipb += -yb * recip ; recipa += -recipa ;
 - yb - yb - yb - yb - yb - yb - yb - yb - yb;
 rounding in division recipb += -yb * recip ; recipa = -recipa ;
 = 1-yb * recip * recip;
recipb += -y;
recipb  = -yb;
 + recipb* recip;
 - yb - yb - yb - yb - yb - yb - yb - yb - yb -
recipb += -yb ; recipb -= -yb;
recipb = -yb * recip * recip;
recipb += -yb ; recipb += -recipb;
 rounding in division yb += - yb * recip ; recipa += - yb * recip * recip ;
recipb += -yb ; recipb += -yb;
 - yb - yb - yb - yb - yb - yb + yb - yb - yb
recipb += -yb ; recipb = -yb;
 rounding in division recipb += -yb * recip ; recipa = -yb ;
 rounding in division yb += - yb * recip ; recipa += - ya * recip * recip ;
 rounding in division recipb += -yb * recip ; recipa += -yb ;
 - yb - yb - yb - yb - yb + yb - yb - yb - yb
 rounding in division recipb += -yb * recip * recip; } else {
 - yb - yb - yb - yb - yb - yb - yb - yb + yb;
 - yb - yb - yb - yb - yb - yb + yb - yb - yb;
recipb += -yb *  recipb; recipb = -yb;
 - yb - yb - yb - yb - yb - yb - yb - yb - yb,
recipb +=  recipb;
 rounding in division recipb += -yb * recip ; recipa += -recipb ;
 rounding in division recipb -= -recip * recip;
 * recip recipb+= -yb * recip * recip;
 rounding in division yb += - yb * recip ; recipa = - yb * recip * recip ;
 - yb - yb - yb - yb - yb - yb - yb - yb - yb - y
recipb += -yb * recip *  recip; recipb = -yb;
 rounding in division recipb += -yb * recipb;
recipb  = recip - recipb; double
 rounding in division recipb = -recip;
 rounding in division recipb += -recip * recip;
 < 0.25, yb += -yb * recip * recip;
 < 0.5, yb += -yb * recip * recip;
 + -yb * recip * recip;
recipb += -yb * recip *  recip; } else { result = 0;
recipb +=  (1.0 - yb) ;
 - yb - yb - yb - yb - yb - yb - yb - yb - yb; double
recipb += -yb * recip *  recip; recipb += -yb;
 < 0.5, yb = -yb * recip * recip;
recipb += -yb ; yb += -ya;
 < 0.25, yb = -yb * recip * recip;
 - yb - yb - yb - yb - yb - yb - yb - yb - y
 rounding in division recipb += -yb * recip ; recipa -= -yb ;
recipb += -yb ; recipb = -yb; double
 -recipa-yb * recip * recip;
 - yb - yb - yb - yb - yb - yb - yb - yb - yb-1
 < 0.25, yb += -yb * recip;
recipb += -yb * recip *  recipb; recipb = -yb;
 = -yb * recip * recip;
recipb += -yb; double
 rounding in division recipb += recip* recip;
 rounding in division recipb -= recip* recip;
 + -yb * recip * recip;
recipb += -yb ; recipb += -y;
recipb += - (1.0 - yb) ;
recipb += -yb * recip b; recipb = -yb; double
 rounding in division recipb += -ya * recip * recip; } else {
 * recip * recip; recipb = -yb * recip * recip;
 < 0.25, yb = -yb;
 * recip * recip; recipb = recip*yb * recip * recip;
recipb += - (yb)*yb;
 rounding in division recipb += -recip;
recipb +=  yb;
 * recip * recip recipb+= -yb * recip * recip;
recipb += -yb ; recipb -= yb;
recipb +=  recipb ; } else {
 + recip * recip* recip * recip;
 rounding in division recipb += -yb * recip * recip ; recip = recip ;
 < 0.5, yb = -yb * recip;
 < 0.25, yb = -yb * recip;
recipb += -yb * recip b; recipb = -recipb;
 rounding in division recipb += -yb * recip * recip; var recipa;
 = -yb * recip; recipa = -yb;
 = ya-yb * recip * recip;
recipb += -yb ; recipb += -recipb; double
 = -yb * recip; yb+= -yb * recip * recip;
recipb +=  (1.0 - yb); double
 + recipb * recip* recip * recip;
recipb += -yb *  recipb; recipb += -yb;
 - yb*recip * recip;
 < 0.0, yb = -yb;
 rounding in division recipb = -recip * recip;
 = 1.0-yb * recip * recip;
 < 0.0, yb = -yb * recip;
recipb +=  1.0 - yb * recipb;
 rounding in division recipb = recip* recip;
 rounding in division recipb += -yb * recip * recip; var recipa =
recipb += -yb * recip *  recipb; recipb = recipb;
recipb += -yb *  recip; } else { result = 0;
 rounding recipb += -recip * recip;
 rounding in division recipb += -yb * recip; double
 rounding recipb+= -yb * recip * recip;
 + yb*recip * recip;
recipb += -recipb;
 division recipb+= -yb * recip * recip;
 - yb - yb - yb - yb - yb - yb - yb - yb-1
 rounding recipb = -recip;
recipb += -1.0 - yb; double
 rounding in division recipb += recip * recip* recip;
 - yb - yb - yb - yb - yb - yb + yb - yb - y
 overflow recipb+= -yb * recip * recip;
 rounding in division recipb += -yb * recip * recip;
 * recip + yb* recip * recip;
 + recipb + recipb* recip * recip;
 rounding in division recipb += -yb * recip * recip; } else,
 rounding in division recipb += -1.0-yb * recip * recip;
 rounding in division yb += -yb * recip ; recipa += -yb * recip * recip; double
recipb += -yb *  recipb; recipb = -y;
 + recipa * recip* recip * recip;
recipb  = recipb - recipb; double
 < 0.25, yb = -yb;
 rounding recipb -= -recip * recip;
recipb += -yb ; recipb -= -yb; double
recipb += -yb *  recipb ; result *= 0.5;
recipb += -yb *  recipb; recipb = recipb;
 < 0.25, yb = -y;
 rounding in division recipb -= -yb * recip * recip;
 * recip * recip-yb * recip * recip;
recipb += -yb ; recipb = -y;
 rounding in division recipb = recipb;
 rounding in division recipb = recip;
 rounding in division recipb -= recip* recip * recip;
 < 0.0, yb = 0.0;
 < 0.0, yb = -y;
 < 0.5, yb = -yb;
recipb  = recipb + recipb ; } else {
 +recipa-yb * recip * recip;
 + recipb + recip * recip* recip * recip;
recipb += -yb *  recipb; recipb = -yb
 < 0.25, yb += -yb;
recipb += -yb ; recipb += -yb; double
recipb += -yb * recip *  recipb;
 * recip * recip + yb* recip * recip;
recipb += -yb *  recipb ; } else { result = 0;
 rounding in division recipb += -yb * recip * recip; var recipb =
 < 0.25, yb = -yb
 rounding in division recipb -= -recip;
 < 0.0, yb = -yb
 = -yb * recip;
 < 0.0, yb = -yb; double
 < 0.25, yb = -yb; double
recipb += -yb ; recipb = -yb
 * recip * recip. recipb+= -yb * recip * recip;
recipb += -yb *  recipb; result = recipb;
recipb += -1.0-yb;
 + recipa + recipb* recip * recip;
recipb += -yb ; recipb += -yb
recipb  = -y;
recipb += -yb * recip *  recip; result = -yb;
recipb +=  (1.0 - yb) *
 = recipa-yb * recip * recip;
 * recip * recip; recipb += -yb * recip * recip;
recipb += -yb ; recipb += -ya; double
 < 0.0, yb = -yb,
 + recipb + recipa* recip * recip;
 rounding in division yb += - yb * recip ; recipa += - ya * recip * recip; double
 < 0.25, yb = -yb; recip = y;
 < 0.25, yb = -yb,
 < 0.0, yb = 0.0; double
recipb +=  1.0 - yb * recip; double
 < 0.0 recipb = -recip * recip;
 = recipa*yb * recip * recip;
 + recipa + recipb = -yb * recip * recip;
 = -recipb; recipb = -recip;
 + recipa* recip * recip;
 + ya*yb * recip * recip;
 + yb * recip* recip * recip;
recipb  = recipb - recipb ; } else {
 rounding in division yb += - yb * recip ; recipa += - yb * recip * recip ; } else
 rounding in division recipb = -yb * recip * recip;
recipb += -yb *recipb; double
 = -yb * recip. yb+= -yb * recip * recip;
 rounding in division recipb = recip * recip* recip;
 < 0.5, yb = -yb; double
 rounding in division recipb += recip;
 rounding recipb -= -yb * recip * recip;
 * recip * recip; recipb = yb* recip * recip;
 < 0.0 double recip = -recip;
 < 0.0, yb = -yb; recip = y;
 < 0.25, yb = 0.25; double
recipb += - (1.0 - yb); double
 + recipa*yb * recip * recip;
 - recipb recipb+= -yb * recip * recip;
recipb += -yb * recip * recipb; recipb = -yb; double
 < 0.5 yb += recip* recip;
 rounding result = recipa*yb * recip * recip;
 < 0.25, yb = -yb; recip = recip;
 + recipa * recip * recip-yb * recip * recip;
 < 0.5 result = -recip * recip;
 * recip * recip; recipb -= -yb * recip * recip;
 rounding in division result = recipb + recipa;
 rounding in division recipb -= recip;
 < 0.5, yb = -yb; recip = y;
recipb += -1.0 - yb * recip; double
 rounding in division result = recipb - result;
recipb  = recip;
 + recipa* recip;
recipb += -yb * recip ; } else { result = -y;
 - yb * recip * recip;
 - yb * recip * recip and yb-yb * recip * recip;
 * recip * recip; recip = -yb * recip * recip;
 and recipa recipb+= -yb * recip * recip;
 being -recipb;
 < 0.5 yb -= recip* recip;
 + recipb + yb* recip * recip;
recipb  = recipb + recipb; double
 + -recip * recip;
 < 0.0, yb = -yb * recip * recip;
 = yb*recip * recip;
 * recip * recip + -yb * recip * recip;
 < 0.0, yb = 0; double
 rounding in division recipb = recip - recip;
 + recipb recipb = -recip;
 = -recipb* recip;
 = -yb * recip: yb+= -yb * recip * recip;
 * recip * recip. recipb = -yb * recip * recip;
 + recipa + -yb * recip * recip;
recipb += - (yb) * recip; double
 rounding in division recipb = recipb + 1-yb * recip * recip;
 + recipa + recipb + -yb * recip * recip;
 - yb - yb * recip * recip;
 rounding in division yb += -yb * recip ; recipa += -yb * recip * recip ; else {
 < 0.0, yb = -yb; recip = recip;
recipb += - yb ; } else {
 = -recipa-yb * recip * recip;
 * recip * recip; recipb += recip*yb * recip * recip;
 < 0.0, yb = -recip * recip;
 rounding in division recipb += yb;
 * recip * recip: recipb+= -yb * recip * recip;
 - yb - yb - yb;
 + recipa recipb+= -yb * recip * recip;
 overflow recipb += -recip * recip;
 = -yb*recipb recipb+= -yb * recip * recip;
recipb  = recipb ; } else {
 * recip * recip; recipb = recip-yb * recip * recip;
 + recipa + recipb = 1-yb * recip * recip;
 < 0.25 result = -recip * recip;
 + recipa * recip-yb * recip * recip;
 * recip + -yb * recip * recip;
recipb += -1.0; double
 rounding in division result = recipb - recipa;
 + recipb + recipa + recip* recip * recip;
 rounding in division yb += -yb * recip ; recipa += -yb * recip * recip ; else,
 = ya*yb * recip * recip;
 rounding in division yb += - yb * recip ; recipa += - yb * recip ; #
 * recip * recip: recipa+= -yb * recip * recip;
 + recipb + recipb* recip;
 * recip * recip; recipa = recip*yb * recip * recip;
 rounding recipb = 1-yb * recip * recip;
 * recip * recip. recipa+= -yb * recip * recip;
 < 0.0, yb = -recip;
recipb +=  1.0 - yb; double
 * recip * recip. recipb = yb* recip * recip;
 < 0.0, yb = 0;
 * recip * recip; recipb = 1-yb * recip * recip;
 rounding in division yb = -yb*recip;
 < 0.0: recipb = -recip * recip;
 * recipb + recip* recip;
recipb += -yb * recip * recip; } else { result = -x; double
 + recipa + recipa*yb * recip * recip;
 - yb - yb + recipb;
 < 0.0 recipb += -recip * recip;
 + ya-yb * recip * recip;
 < 0.25: recipb = -recip;
 + recipb;
 < 0.5, yb = yb+= -yb * recip * recip;
 < 0.0 yb += recip* recip;
 < 0.25, yb = -recipb; double
 rounding in division recipb += recipb;
 < 0.0, yb += recipb* recip;
 rounding in division result = recipb + yb;
 rounding in division recip = -recip;
 + recip yb+= -yb * recip * recip;
 < 0.25: recipb = -recip * recip;
 rounding in division result = recipb + recip* recip;
 rounding recipb += 1-yb * recip * recip;
 < 0.5 yb += -recip * recip;
recipb +=  yb ; } else {
 rounding in division yb += - yb * recip ; recipa += - ya * recip ; #
 rounding in division result = recip + result;
 + recipb recipb+= -yb * recip * recip;
 < 0.25 recip = -recip;
 and recipb recipb+= -yb * recip * recip;
recipb += -yb *yb; double
 + recipa + recipb + recip* recip * recip;
 - yb * recip * recip yb-yb * recip * recip;
recipb += -yb *  recipb; recipb = recip;
recipb  = recipb; double
recipb += -yb *  recip; double
recipb += -yb * recip b; recipb += -yb; double
 = 0.0;
 rounding in division recipb = recipb - 1-yb * recip * recip;
 + recipb + recipa * recip* recip * recip;
recipb += -yb *yb;
 < 0.5 yb = -recip;
 = recipb* recip;
 rounding in division recipb = recip + recip* recip;
 overflow recipb = -recip;
 + recip* recip;
 overflow recipb = -recip * recip;
 < 0.0, yb = 1-yb * recip * recip;
 + -yb * recip * recip; double
 < 0.0, recipb = -recip * recip;
 + recipb + recipa* recip;
 rounding recipb = -recip * recip;
 = -yb*recipb recipa+= -yb * recip * recip;
 < 0.25;
 < 0.0 yb += -recip * recip;
 rounding in division recipb += - yb * recip ; recipa += - ya * recip ; #
 < 0.25, yb = 0;
 < 0.0, yb = -y,
 < 0.5: recipb = -recip * recip;
 < 0.5 yb -= -recip * recip;
 + recipb + recip* recip;
 + recipa * recip*yb * recip * recip;
recipb += -yb * recip b; recipb = -yb; }
 + recipb + recip* recip * recip;
 < 0.25, yb = -recipb; and
 = y-recip * recip;
 < 0.5 yb = recip* recip;
 -recipa * recip-yb * recip * recip;
 < 0.0, yb = yb* recip;
 < 0.25, yb += recipb;
recipb  = -bb;
 + -yb * recip * recip.
 + -yb * recip * recip,
 -recipb;
 + recipa + recipb + recipa-yb * recip * recip;
 - yb - yb - yb
 * recipb + yb* recip;
 = -y;
 * recip * recip; recipb += yb* recip * recip;
recipb += -yb * recip b; yb += -yb; double
 < 0.0, yb = 0.0,
 < 0.0, yb = yb* recip * recip;
 + y*recip * recip;
 < 0.25, yb = -y,
 < 0.5, yb = recipa+= -yb * recip * recip;
 < 0.0: recipb = -recip;
 - yb - yb - yb double
 < 0.25, yb = -y;
 = yaa-yb * recip * recip;
 * recipb * recipa* recip;
 divide recipb+= -yb * recip * recip;
 < 0.0, recip = -recip;
 < 0.25, yb += -yb * recip; double
 = 0.5;
 + recipa + recipa-yb * recip * recip;
 + recipb. recipb = yb* recip * recip;
recipb  -= recipb;
 + recipa * recipb*yb * recip * recip;
 * recip * recip and ya*yb * recip * recip;
 = -yb*recipa recipb+= -yb * recip * recip;
 = 1.0* recip;
 - yb + yb* recip * recip;
 < 0.5, yb += -yb * recip; double
 * recip * recip = 1-yb * recip * recip;
 + recipb: recipb = yb* recip * recip;
 < 0.25, recip = -recip;
recipb += -yb *  recipb;
 < 0.5 result = 1-yb * recip * recip;
 + recipa + recip * recip-yb * recip * recip;
 < 0.5 yb = 1-yb * recip * recip;
 rounding var recip = -recip;
 + recip * recip-yb * recip * recip;
 < 0.5 yb -= recip* recip * recip;
 + recipb + recipa + recip* recip;
 = 1.0* recip * recip;
 < 0.0, yb += recip* recip * recip;
 < 0.5, yb = yb* recip;
 rounding recipb += -recip;
 < 0.5 yb += recip* recip * recip;
 < -recip;
 < 0.0, yb += recipb* recip * recip;
recipb += -1.0-y; double
 rounding result = recipa+yb * recip * recip;
 + recipa + recip* recip;
recipb  = recipb + recipb ; } else,
 + 1.0* recip * recip;
 * recip in division result = recipa+= -yb * recip * recip;
 < 0.0, yb = recipb* recip;
 + recipa + recipb + yb-yb * recip * recip;
recipb += - (1.0 - yb) *
 * recipb + recipa* recip;
 * recip in division result = yb+= -yb * recip * recip;
 rounding in division recipb = -y;
 rounding double recip = -recip;
 - yb*recip;
 < -recipb;
 < 0.0 yb = 1-yb * recip * recip;
 + recipa + recipb*-yb * recip * recip;
 rounding in division recipb += yb * recip-yb * recip * recip;
recipb += -ybb;
 + recipa + recipb + ya-yb * recip * recip;
 < 0.25, yb += -yb * recip; else
 < 0.0, yb = 0-recip;
 < 0.5, yb += -yb * recip; else
 + recipb. recipb += yb* recip * recip;
 * recip + y* recip;
 rounding in division yb += recipb ; } else {
 = -recipb: recip = --recip;
 < 0.25, yb += -yb * recip; and
 + recipa + recipb + 1-yb * recip * recip;
 * recip * recip;
 rounding in division yb = 1.0-recip;
 + recipa + ya-yb * recip * recip;
 < 0.5;
 < 0.5 result = 0;
 < 0.25, yb = -recipb, and
recipb +=  (1.0 - yb); int
recipb += - (yb - recipb); double
 < 0.0, yb = y* recip * recip;
 < 0.0, yb = y-recip * recip;
 = y*yb * recip * recip;
 < 0.25, yb = -yb; recipb =
 being -recipa;
 * recip + y* recip * recip;
 < 0.25, yb = -yb; recipa =
recipb += - (1.0 - yb);;
 < 0.0, yb = -y* recip;
recipb  = recipb - recipb ; } else,
recipb  = recip - recipb ; } else {
recipb += -yb * recip *  recip; result = recipb ; } else {
 < 0.0: -recip * recip;
 < 0.25, yb = -recipb;;
 * recip * recip recipa+= -yb * recip * recip;
 rounding recipb -= 1-yb * recip * recip;
 * recip * recip - -yb * recip * recip;
recipb += -yb ; recipb += -recipb; int
 < 0.0 yb += 1-yb * recip * recip;
 being -recip;
 < 0.25, yb = y-recip * recip;
 < 0.0, yb = recip*recip * recip;
recipb  = recipb + recipb ; } else:
 * recip * recip; recipipb+= -yb * recip * recip;
 + recipa + recipa*-yb * recip * recip;
 * recip * recip + 1-yb * recip * recip;
recipb  = recip - recipb; int
 < 0.0, yb=recip;
 = -recipa* recip;
 + -yb * recip; double
recipb  += recipb ; } else,
 = y* recip * recip;
recipb += -1;
 < -recipa;
recipb += -yb * recip *  recip; double
 rounding in division
 * recip * recip and recipa*yb * recip * recip;
recipb  = -yb
 = y-yb * recip * recip;
 * recip*yb * recip * recip;
 < 0.25, yb = -recipb, but
 and recip yb+= -yb * recip * recip;
recipb += -yb * recip * recip; } else { result = -x; }
 < 0.5: -recip * recip;
 rounding in division recipb += y* recip;
 + recipa;
 < 0.5 result = result* recip;
recipb +=  1.0 - recipb ; } else {
recipb  = recipb - recipb; int
 < 0.25: recipb = +recip;
 * recip * recip yb+= -yb * recip * recip;
 < 0.25: -recip * recip;
recipb  = recipb + recipb; }
recipb += -yb *  recipb; recipb += recip;
recipb += -yb ; recipb += -recipb; }
 rounding in division var y = recip;
 = recip* recip;
 - yb - y*recip * recip;
recipb += -ybb; double
 * recipb* recip;
 < 0.25, yb = -yb; else { double
 + recip* recip * recip;
 < 0.25: recip = y-recip;
 and recip recipb+= -yb * recip * recip;
recipb += -1.0 - yb; int
 + yb + recipb;
 < 0.0, yb = -yb; else { double
 + recip recipb+= -yb * recip * recip;
 = -yb * recip,
recipb  = recipb - recipb; }
 being -y;
 + recipa: yb+= -yb * recip * recip;
 < 0.5, yb = -yb; else { double
recipb += -1.0 - yb * recip; int
 being -y*recip;
recipb += -yb *  recipb; result = recipa;
 + recip * recip;
recipb += -yb * recip * recipb; recipb = -yb; int
 + recip;
recipb  = recip - recipb ; } else,
 - yb + y*recip * recip;
 - yb * recip * recip:
 being in -recip;
recipb += -yb * recip * recipb; recipb = -yb; }
recipb += -yb *  recipb; result = y;
 - yb * recip * recip,
 + y*yb * recip * recip;
 - yb * recip * recip.
 rounding in division result = 0;
 rounding: recipb = -recip;
 + recipb 2* recip;
recipb += -yb * recip *  recip; result = recipb ; } else,
 * recip in division result = recipb+= -yb * recip * recip;
 = -recipb; double
recipb +=  recipa;
 - y*recip * recip;
 + -yb * recip * recip; else
recipb +=  recipb * recip ; } else {
 = yb*recip;
 + -yb * recip * recip, and
 - yb - yb - ybb
 = -yb * recip:
recipb += -yb * recip *  recipb; recipb = -yb,
 - recipb: recipb+= -yb * recip * recip;
 + yb + recipa;
 < 0.0, yb < 0
recipb  = recip - recipb ; } else:
recipb += -yb *  recip; } else {
 * recip * recip: recipipb+= -yb * recip * recip;
recipb += -yb * recip *  recipb ; result = 0;
 = recip*yb * recip * recip;
 = y-recip;
recipb += -yb * recip *  recipb ; result = y;
 * recip-yb * recip * recip;
 + recipb -* recip;
 + y-recip * recip;
recipb +=  recip - recipb; double
 + recip + y* recip;
 - yb - yb - recipb
recipb +=  recipb ; } else:
 being 0-recip;
 < 0.0, yb; double
recipb += - yb ; } else,
 rounding: double recip = -recip;
recipb += -yb *ybb; double
 = -recipb: double
recipb += -yyb;
recipb +=  1.0; double
recipb +=  recipb * recip ; } else,
 + recipb
recipb += -yb *recipb; }
recipb +=  1.0 - yb; int
 recipa+= -yb * recip * recip;
 = -yb * recip.
 rounding in division recip = recip;
recipb  = recipb; }
 + recipa;
 < 0.0.0;
 rounding result = recip + result;
 * recip * recip:
recipb += -yb *recipb; int
 = y*recip;
 - recipb - recip;
recipb +=  recipb * recip ; } else:
 overflow yb+= -yb * recip * recip;
recipb += -yb; }
recipb  = recipb; else
recipb +=  recipb ; } else { double
 rounding here. recip = -recip;
 rounding result = recip - result;
recipb += -yb ; recipb = -yb; } double
recipb += -yb * recip * recip; result = recipb ; } else:
recipb += -yb * recip * recip; result = y + recipb; double
 + recipa +
recipb += - yb ; } else:
recipb += -yb * recip * recip; result = y + recipb;;
 * recip * recip,
 * recip * recip.
 overflow
 < 0;
 rounding in division y = recip;
 * recip* recip * recip;
recipb += -yb * recip *  recip; result = recipb; double
 - yb + recipb; double
 == -recip;
 - recip;
recipb  = recipb + recipb ; } boolean
 + recipa
 * recip * recip; double
recipb += -yb * recip *  yb;
 - yb - recipb: double
recipb += -yb * recip *  recipb; double
recipb += -yb ; recipb += -yb; } double
recipb += -yb *yb; int
 + recipb * recip; double
 = 0;
recipb += - recip;
recipb += -yb * recip *  recip; result = -yb,
 + 2* recip * recip;
recipb += -yb *  recip; } else,
 + recipa -
recipb  = recipb - recipb ; } boolean
 + recip * recip; double
 * recip* recip;
recipb += -yb * recip *  recip; result = recipb; }
 + recipa:
 being -recip * recip;
 - recipa -
recipb += -yb *yb; }
recipb += - (yb) ; double
recipb +=  recipb ; } else { var
 + y* recip;
 += -yb * recip * recip;
recipb +=  yb; double
recipb +=  yb ; } else { double
recipb += -1.0; int
 += -recip * recip;
 - yb - recipb. double
 + 1-yb * recip * recip;
recipb += -yb * recip *  recip; } else {
recipb += -yb * recip *  recipb ; } else {
recipb += -1.0; }
recipb += -yb *  recipb ; } else {
 = recip;
 + -recip;
recipb += -bb;
recipb +=  1;
recipb += -yb *  recip; } else { double
 - yb + recipb. double
recipb +=  recipb; double
recipb += -yb *  recipb; } else,
recipb += -yb * recip *  recip; } else,
recipb +=  recipb * recip; } double
recipb += -yb *  recip; } else:
recipb += -yb * recip *  recipb ; } else,
recipb +=  yb * recip; } double
 + y-yb * recip * recip;
recipb += -0;
 - -yb * recip * recip;
recipb += -yb * recip *  recipb ; result = y -
recipb += -yb *  recipb; result = y -
 yb+= -yb * recip * recip;
recipb += -yb * recip *  yb; double
recipb  += recipb; } double
recipb  = 0;
recipb += -yb *  recip; }
 - yb + recipb; int
 * recip * recip: double
 * -yb * recip * recip;
recipb += -yb * recip *  recipb ; } else:
recipb += -yb *  recipb; result = y +
recipb +=  recipb; }
recipb += -yb *ybb; int
recipb += -yb *  recipb; } else { double
recipb  = recipb; } double
recipb +=  y;
recipb += -yb * recip *  recip; } else:
recipb += -yb *  recip; int
recipb +=  1.0; }
 + recip * recip: double
recipb  is negative;
recipb += -yb - recip * recip;
recipb += -yb * recip *  recip; }
 - -recip * recip;
 rounding:
 in division
recipb += -yb * recip *  y;
recipb +=  1.0; int
 * recip * recip; -
 division
recipb += -yb * recip *  recip; int
recipb +=  yb; }
recipb  -= recipb ; } double
recipb  is negative,
recipb -= -yb * recip * recip;
 in division:
recipb += -yb; } double
recipb  is 0;
 * recip:
recipb += -yb * recip *  recipb; }
recipb += -yb * recip *  recipb; int
recipb +=  yb; int
recipb +=  x;
recipb += -yb * recip - recip;
recipb += -yb ; int
recipb += -yb * recip *  yb; int
recipb += -yb *  y;
 * recip+= -yb * recip * recip;
 overflow:
recipb  calculation:
recipb += -yb * recip *  x;
 rounding.
 rounding below
recipb += -yb * recip + recip;
recipb += -yb * recip *  result;
recipb += -yb + recip * recip;
 calculation
recipb += -yb  } else {
recipb  calculation;
: result+= -yb * recip * recip;
recipb += -yb *  recip();
 rounding
recipb += -yb *  recip);
recipb : double
recipb += -yb * recip ; } double
recipb += -yb * recip  ; final double
recipb  calculation,
recipb += -yb  } else,
recipb += -yb  ; } var
recipb += +yb * recip * recip;
recipb += -yb * recip * recip; } double
recipb += -yb . double
recipb : int
recipb + -yb * recip * recip;
recipb += *yb * recip * recip;
recipb - -yb * recip * recip;
