 return registry.createRecordType(Collections.unmodifiableMap(properties));
 return Collections.unmodifiableMap(properties));
 return build(Collections.unmodifiableMap(properties));
 build(properties));
 else { return registry.createRecordType(Collections.unmodifiableMap(properties));
 registry.createRecordType(Collections.unmodifiableMap(properties));
 else { return this.registry.createRecordType(Collections.unmodifiableMap(properties));
 return this.registry.createRecordType(Collections.unmodifiableMap(properties));
 else { return registry.getNativeObjectType(Collections.unmodifiableMap(properties));
 else { return Collections.mod(unmodifiableMap(properties));
 return null;
 else { return Collections.modifiable(unmodifiableMap(properties));
 else { return registry.getType(Collections.unmodifiableMap(properties));
 else { return JSTypeNative.createRecordType(Collections.unmodifiableMap(properties));
 return new RecordType(properties));
 else { return registry.getObjectType(Collections.unmodifiableMap(properties));
 return new RecordType(Collections.unmodifiableMap(properties));
return registry.createRecordType(build(properties));
 else { return registry.getNativeObjectType(properties));
 return Collections.mod(unmodifiableMap(properties));
 return build(properties));
 else { return registry. getNativeObjectType(JSTypeNative.RECORD);
 else { return registry. getNativeObjectType(JSTypeNative.RECORD_TYPE);
 else { return registry. getNativeObjectType(JSTypeNative.RECORD); }
 else { return registry.build(Collections.unmodifiableMap(properties));
 else { return JSType.createRecordType(Collections.unmodifiableMap(properties));
 else { return registry. getNativeObjectType(JSTypeNative.RECORD_TYPE); }
 return ( Collections.unmodifiableMap(properties));
return registry.createRecordType(Collections.unmodifiableMap(propertyNode));
 else { return registry. getNativeObjectType(JSTypeNative.TYPE);
 else { return registry.getNativeType( Collections.unmodifiableMap(properties));
 else if (properties!= null) {
 else { return registry. getNativeObjectType ( ) ; }
 else { return java.util.registry.createRecordType(Collections.unmodifiableMap(properties));
 else { return Collections( Collections.unmodifiableMap(properties));
 else { return registry. getNativeObjectType(JSTypeNative.OBJECT_TYPE); }
return registry.createRecordType(name);
return registry.createRecordType(Collections.RECORD_TYPE);
 return new RecordTypeBuilder(properties));
 return build());
 else { return new RecordType( Collections.unmodifiableMap(properties));
 if (properties) {
return registry.createRecordType(JSTypeNative.RECORD_TYPE);
 else { return registry. getNativeObjectType ( ) ;
 else {
return registry.getNativeObjectType(JSTypeNative);
 else { return registry. getNativeObjectType ( JSTypeNative ) ; }
 else { return registry.getNativeObjectType(unmodifiableMap(properties));
 else { return registry. getNativeObjectType ( JSTypeNative ) ;
 else { return registry. getNativeObjectType ( propertyNode ) ;
 else { return registry. getNativeObjectType(JSTypeNative.OBJECT_TYPE);
return registry.createRecordType(name, propertyNode);
 else { return (JSTypeNative)registry.createRecordType(Collections.unmodifiableMap(properties));
 else { return registry.getNativeObjectType());
 else { return registry.getObjectType(properties));
return registry. getNativeObjectType ( ) ;
 return null);
 else { return registry. getNativeObjectType ( recordType ) ;
 else { return registry.getRecordType(properties));
 if (properties!= null) {
return  this.type;
 else { return registry. getNativeObjectType ( this. type ) ;
 build());
 else { return JSTypeRegistry.createRecordType(Collections.unmodifiableMap(properties));
 else { return registry. getNativeObjectType ( this ) ; }
 else { return Registry.getType( Collections.unmodifiableMap(properties));
 return java.util.Collections.unmodifiableMap(properties));
 else { return registry. getNativeObjectType ( type ) ;
return registry.getObjectType();
 else { return registry. getNativeObjectType ( this. type ) ; }
 else { return (JSType)registry.createRecordType(Collections.unmodifiableMap(properties));
 else { return ( Collections.unmodifiableMap(properties));
 else { return Registry. getNativeObjectType(JSTypeNative.RECORD_TYPE);
 else { return registry.getType(propertyNode));
return registry.build();
 else { return registry.getTypeFactory().createRecordType(Collections.unmodifiableMap(properties));
return registry.createRecordType(JSTypeNative.RECORD);
 else { return registry. getNativeObjectType ( "null" ) ;
 else { return registry. getNativeObjectType(JSTypeNative.RECORD); }
 else { return registry. getNativeObjectType(JSTypeNative.OBJECT_TYPE); } if (properties!= null) {
 else { return Registry. getNativeObjectType(JSTypeNative.RECORD); }
 else { return RecordType.createRecordType(Collections.unmodifiableMap(properties));
 else { return registry.getNativeType(type);
return registry.createRecordType(Collections.unmodifiableMap(properties)); return this;
 else { return registry. getNativeObjectType(JSTypeNative.STRUCTURE); }
return registry.createRecordType(Collections.RECORD);
 else { return registry. getNativeObjectType(JSTypeNative.STRUCT); }
 else { return registry. getNativeObjectType(JSTypeNative.RECORD_TYPE); }
 return registry.getNativeObjectType(propertyNode));
 else { return java.util.Collections.unmodifiableMap(properties));
 else { return registry. getNativeObjectType (JSTypeNative.TYPE); }
 else { return registry. getNativeObjectType(JSTypeNative.OBJECT_TYPE); } } public RecordType build() {
 else { return registry.getObjectType;
 else { return registry. getNativeObjectType(JSTypeNative.OBJECT_TYPE); }
 else { return registry.getType ( ).createRecordType(Collections.unmodifiableMap(properties));
 else if (isEmpty) { return registry.createRecordType(Collection.unmodifiableMap(properties)); } else
 else { return registry. getNativeObjectType(JSTypeNative.OBJECT_TYPE); } if (isEmpty) {
 else if (isEmpty) { return registry.createRecordType(Maps.unmodifiableMap(properties)); } else
 else { return registry. getNativeObjectType(JSTypeNative.OBJECT_TYPE); } if (properties) {
 else { return registry.getObjectType(unmodifiableMap(properties));
 else { return registry. getNativeObjectType ( this ) ;
 else { return registry. getNativeObjectType(JSTypeNative.NAME);
return registry.createRecordType(name, type, propertyNode);
 else { return registry.getObjectType());
 return registry.getRecordType(properties));
 else { return registry. getNativeObjectType ( recordType ) ; }
 else { return registry. getNativeObjectType(JSTypeNative.OBJECT_NAME); }
 else { return registry.getNativeObjectType);
 else { return Registry.getNativeObjectType(properties));
 else { return registry. createRecordType(Maps.unmodifiableMap(properties)); } if (collection) {
 else if (properties) {
 else { return registry. getNativeObjectType(JSTypeNative.TYPE); }
 else if (isEmpty) { return registry.createRecordType(Collection.unmodifiableMap(properties)); }
 return new Builder(Collections.unmodifiableMap(properties));
 else { return jstype.createRecordType(Collections.unmodifiableMap(properties));
 else { return Registry.getNativeObjectType(Collections.unmodifiableMap(properties));
 else { return Registry.getObjectType(Collections.unmodifiableMap(properties));
 return registry. getNativeObjectType ( recordType ) ;
 else { return Collections.unmodifiableMap(properties));
 else { return registry. getNativeObjectType(JSTypeNative.OBJECT_TYPE); } } public RecordTypeBuilder {
return registry.createRecordType(Collections.unmodifiableMap(properties), propertyNode);
 else { return registry.getType(this.registry.createRecordType(Collections.unmodifiableMap(properties));
 else if (isEmpty) { return registry.createRecordType(Maps.unmodifiableMap(properties)); }
 else { return registry. getNativeNodeType ( ) ; }
 else { return registry. getNativeObjectType ( RecordTypeBuilder ) ;
 return Collections.modifiable(unmodifiableMap(properties));
 return registry.createRecordType(properties));
 else { return registry.getNativeObjectType().createRecordType(Collections.unmodifiableMap(properties));
return registry.createRecordType(this.type, this.propertyNode);
 return registry.getObjectType());
 else { return Collections.modifiableMap(unmodifiableMap(properties));
 return new JSType(properties));
 return new RecordTypeBuilder));
 else { return new Record( Collections.unmodifiableMap(properties));
 else { return registry.createRecordType(properties));
 else { return registry. getNativeObjectType ( "Object" ) ;
 else if (isEmpty) { return null; } else if (properties!= null) {
 else { return registry. getNativeObjectType(JSTypeNative.OBJECT_TYPE); } public RecordType build() {
 else { return registry.getNativeJSType(Collections.unmodifiableMap(properties));
 else { return registry.getType();
 return (unmodifiableMap(properties));
 else { return registry. getNativeObjectType ( null ) ;
 else if (isEmpty) { return registry.createRecordType(Map.unmodifiableMap(properties)); } else
 else { return registry. createRecordType(JSTypeNative.OBJECT_TYPE); } if (properties!= null) {
 else { return registry. getNativeObjectType(JSTypeNative.OBJECT_TYPE); } } static class RecordTypeBuilder {
return registry.getNativeObjectType(type);
return registry.createRecordTypeBuilder(name, type, propertyNode);
 return build();
 else { return registry.getNativeObjectType(registry.createRecordType(Collections.unmodifiableMap(properties));
return registry.createRecordType(Collections.unmodifiableMap(properties, propertyNode)); return this;
 else { return registry.getObject( Collections.unmodifiableMap(properties));
 else { return registry.createRecordType(JSTypeNative.RECORD_TYPE); }
 else return registry.createRecordType(Collections.unmodifiableMap(properties));
 else { return registry. getObjectType ( );
return  new RecordTypeBuilder ( registry, properties ) ;
 else { return registry. getNativeObjectType(JSTypeNative.OBJECT_TYPE); } if (!isEmpty)
 else { return registry. getNativeObjectType(JSTypeNative.OBJECT_TYPE); } } public JSType build() {
 else { return registry. getNativeObjectType(JSTypeNative.OBJECT_TYPE); } if ( isEmpty ) return null ;
 else { return Registry.getNativeType( Collections.unmodifiableMap(properties));
 else { return registry. getNativeType ( );
 else { return registry. getNativeObjectType ( this. type ) ; } }
 else { return registry.getRecordType(Collections.unmodifiableMap(properties));
 else { return registry.getNativeObjectType(());
 else { return registry.getNativeObjectType(_);
 else { return registry. getNativeNodeType ( ) ;
 return registry.getType(propertyNode));
 else { return registry.getObjectType(name));
 else { return RecordTypeBuilder.createRecordType(Collections.unmodifiableMap(properties));
 else if (isEmpty) { return null; } if (properties!= null) {
 else { return registry.createObjectType(properties));
return registry.getNativeObjectType(this.type);
return  new RecordTypeBuilder ( ) ;
 else { return registry.getObjectType(type);
 else if (isNull) { return null; }
 else { return Registry.getObjectType(unmodifiableMap(properties));
 else if (properties.containsKey(name)) { return null; }
 else { return build(Collections.unmodifiableMap(properties));
 else if (isEmpty) { return null; }
 else if (properties.containsKey(properties)) {
 else { return registry.getType(name);
 else { return registry. getNativeObjectType(JSTypeNative.OBJECT_TYPE); } if (properties.length) {
return registry.createRecordTypeBuilder(name, propertyNode);
 else { return registry.createRecordType(JSTypeNative.RECORD); }
 else { return registry.createRecordType(JSTypeNative.OBJECT_TYPE); }
 else { return new Node(Collections.unmodifiableMap(properties));
 else { return registry. createRecordType(Maps.unmodifiableMap(properties)); } } else {
 else { return registry. getNativeObjectType(JSTypeNative.STRUCTURE); }
 else { return Collections.util.unmodifiableMap(properties));
return registry.createRecordType(Collections.unmodifiableMap(this.properties));
 else { return registry.getNativeObject();
 return registry.getNativeObjectType(properties));
 else { return Registry.getObjectType(properties));
 else { return registry. createRecordType(JSTypeNative.OBJECT_TYPE); } if (isEmpty) {
return registry.getNativeObjectType(propertyNode);
 return registry.getObjectType(name));
 else { return registry.getType (...).createRecordType(Collections.unmodifiableMap(properties));
 else { return registry.getNativeRecordsType(Collections.unmodifiableMap(properties));
return registry. getNativeObjectType ( this ) ;
 return new Record(Collections.unmodifiableMap(properties));
 else { return registry.createRecordType(JSTypeNative.MAPPING_TYPE); }
 return registry.getType(name));
return registry.createRecordType(type, propertyNode);
 return registry.getType(Collections.unmodifiableMap(properties));
 else { return registry.getType(type);
 else { return registry. getNativeObjectType(JSTypeNative.MAPPING_TYPE); }
return registry.createRecordType(name, type, propertyNode); return this;
 else if (isEmpty) { return null; } else if (isEmpty) {
 else { return registry.getNativeObjectTypeImpl(Collections.unmodifiableMap(properties));
 else { return registry.createObjectType(Collections.unmodifiableMap(properties));
 else { return registry. getNativeObjectType ( "null"); }
 else { return registry. getNativeType ( ) ; }
 else { return registry.createNativeObjectType(properties));
return registry.createRecordType(name, type, propertyNode, Maps.newMap(properties));
return registry.getNativeObjectType(JSTypeObject);
 else { return registry.getNativeObjectType((properties));
 else { return java.util.createRecordType(Collections.unmodifiableMap(properties));
 else { return registry.create(Collections.unmodifiableMap(properties));
 else { return registry.getJSType(Collections.unmodifiableMap(properties));
 else { return jstypeRegistry.createRecordType(Collections.unmodifiableMap(properties));
 else if (isEmpty) { return null; } else if (properties) {
return registry.createRecordType(this, propertyNode);
return registry.createRecordType(Collections.unmodifiableMap(properties, propertyNode));
 else { return this.type;
 else { return Collections.modifiableMap.unmodifiableMap(properties));
 else { return new JSType( Collections.unmodifiableMap(properties));
 else { return new Builder( Collections.unmodifiableMap(properties));
 else { return JSTypeNative.registry.createRecordType(Collections.unmodifiableMap(properties));
 else { return registry.getType());
return registry.getType(name);
return registry.createRecordType(name, type, Maps.newHashMap(properties));
 else { return JSType.registry.createRecordType(Collections.unmodifiableMap(properties));
 else { return registry.getNativeNode(type);
 else { return registry.getType(name));
 else { return registry.getNativeType(); registry.createRecordType(Collections.unmodifiableMap(properties));
 return registry.getObjectType(Collections.unmodifiableMap(properties));
 else if (isEmpty) { return registry.createRecordType(Collection.unmodifiableMap()); } else
return registry.createRecordType(Collections.RECORD_TYPE, propertyNode);
return registry. getType ( ) ;
 else { return registry. getNativeType ( ).createRecordType(Collections.unmodifiableMap(properties));
 else if (isEmpty) { return null; } if (isEmpty) {
 else { return jstypeNative.createRecordType(Collections.unmodifiableMap(properties));
return registry.getNativeNodeType(JSTypeNative);
 else { return registry.getCollectionType(Collections.unmodifiableMap(properties));
return registry.getNativeObjectType(objectType);
 else { return ImmutableHashMap.unmodifiableMap(properties));
 else { return registry.createRecord(Collections.unmodifiableMap(properties));
return registry.createRecordType(JSTypeNative.OBJECT_TYPE);
 return registry.getNativeType(propertyNode));
 else if (isEmpty) { return null; } else {
 else { return jstype.registry.createRecordType(Collections.unmodifiableMap(properties));
 else { return registry.getNativeObject( Collections.unmodifiableMap(properties));
 return Collections( Collections.unmodifiableMap(properties));
return registry.createRecordType(Collections.TYPE);
 else, if (properties!= null) {
 return registry.getNativeObjectType(Collections.unmodifiableMap(properties));
 else { return registry. getNativeObjectType ( "Object"); }
 return registry.getType());
return  new RecordTypeBuilder ( this ) ;
 else { return registry.createRecord(properties));
 else if (isEmpty) { return null; } if (properties) {
 return registry.getNativeObjectType(name));
 else { return Collections.modifiable.unmodifiableMap(properties));
return registry.createRecordType(JSTypeNative.RECORDTYPE);
 else { return new Object( Collections.unmodifiableMap(properties));
 else { return registry.createRecordType(JSTypeNative.STRUCTURE); }
return registry.createRecordType(Collections.class);
return registry.getNativeObjectType(JSType);
 return build(_);
return registry.createRecordType(type, propertyNode); return this;
 return registry.getNativeObjectType(type));
 else { return registry.getNativeJavaObjectType(Collections.unmodifiableMap(properties));
return registry.createRecordType(name, type, propertyNode, new RecordTypeBuilder(properties));
 return registry. getNativeObjectType ( "Object" )
return  new RecordTypeBuilder ( registry ) ; }
 else { return registry.getType(properties));
return registry.createRecordType(JSTypeNative.TYPE);
return registry.getRecordType(name);
return registry.createRecordType(Collections.unmodifiableMap(this.registry));
 return new RecordTypeBuilder());
 else if (isNull) { return null; } else {
 else { return new ObjectType( Collections.unmodifiableMap(properties));
 return registry.getRecordType(name));
 return registry.getNativeObjectType(build(properties));
 else if (isEmpty) { return registry.createRecordType(Collection.unmodifiableMap(properties));
 return registry.build(Collections.unmodifiableMap(properties));
 else { return registry.getNewObjectType(properties));
 else { return registry.getNativeObject(build(properties));
 else { return registry.getType(_);
 else { return new RecordTypeBuilderImpl(unmodifiableMap(properties));
 return new RecordTypeBuilder(new HashMap(properties));
return registry.createRecordType(Collections.OBJECT_TYPE);
return  this.objectType;
 else { return registry.getType(...);
return registry.createRecordType(name, type, propertyNode, Collections.modifiable(properties));
 else { return Repository.createRecordType(Collections.unmodifiableMap(properties));
 return registry.createRecord(Collections.unmodifiableMap(properties));
 else if (properties.hasKey(name)) {
 else { return registry.get (this.registry.createRecordType(Collections.unmodifiableMap(properties));
 else { return new RecordTypeBuilder(.unmodifiableMap(properties));
return registry.createRecordType(name, type, properties, Maps.newHashMap(properties));
 return new JSType(Collections.unmodifiableMap(properties));
 else { return registry.registry.createRecordType(Collections.unmodifiableMap(properties));
return registry.getNativeObjectType(RecordTypeBuilder);
return registry.createRecordType(Collections.RECORD_TYPE); return this;
 else if (properties.isEmpty()) {
 else { return new Type(Collections.unmodifiableMap(properties));
return registry.getNativeObjectType(JSTypeType);
 else { return registry.getJavaObjectType(Collections.unmodifiableMap(properties));
 else { return java.util.Map.createRecordType(Collections.unmodifiableMap(properties));
 else if (properties.containsKey(name)) { return null;
 else { return null;
return registry.createRecordType(Collections.unmodifiableMap(this.properties, propertyNode)); return this;
return registry.createRecordType(new RecordProperty(properties));
return registry.createRecordType(Collections.unmodifiableMap(this.properties), propertyNode);
 return registry.createRecord(properties));
 else { return registry.getNativeObjectTypeInternal(Collections.unmodifiableMap(properties));
 else { return registry.getObjectType(build(properties));
return registry.getObjectType(type);
 else { return registry.objectType;
 else { return registry.getType(registry.createRecordType(Collections.unmodifiableMap(properties));
 else, if (isEmpty) { return null; }
 return registry.getRecordType(Collections.unmodifiableMap(properties));
 else { return registry.createRecordType(JSTypeNative.TYPE); }
 else { return registry.get(Collections.unmodifiableMap(properties));
 else { return Registry.build( Collections.unmodifiableMap(properties));
 else { return registry. getNativeObjectType(JSTypeNative.OBJECT_TYPE); } }
 else { return registry.getObjectTypeImpl(unmodifiableMap(properties));
return registry.createRecordType(Collections.JSTypeNative.RECORD_TYPE);
 else { return registry.getJava.util.Collections.unmodifiableMap(properties));
 return registry.getNativeObjectType());
 return new JSType(unmodifiableMap(properties));
 else { return registry.getNativeType(Native.createRecordType(Collections.unmodifiableMap(properties));
 else if (properties.containsKey(properties)) { return null; }
 else { return registry.getObjectType(registry.createRecordType(Collections.unmodifiableMap(properties));
 return registry.createObjectType(properties));
 else { return registry. getNativeObjectType(JSTypeNative.RECORD); } }
 else { return Registry.getType(properties));
 else if (properties.length > 0) {
return registry.getNativeObjectType(this).type;
 else if (properties instanceof Map) {
 else { return Collections(Maps.unmodifiableMap(properties));
 return registry.get(name));
 else { return registry.createNativeObjectType(Collections.unmodifiableMap(properties));
 else { return JSTypes.createRecordType(Collections.unmodifiableMap(properties));
return registry.createRecordType(JSTypeNative.STRUCT_TYPE);
 else { return RecordBuilder.createRecordType(Collections.unmodifiableMap(properties));
 else { return Collections.newunmodifiableMap(properties));
 return build(properties);
 return registry.buildObjectType(properties));
 else { return registry.getNativeType(...);
return registry.createRecordType(name, type, Collections.newHashMap(properties));
 else { return JSTypeUtils.createRecordType(Collections.unmodifiableMap(properties));
 else { return registry. getNativeObjectType(JSTypeNative.OBJECT_TYPE); } return null ; } }
return registry.createRecordType(name, type, propertyNode); return null;
 else { return registry.getNativeType(...).createRecordType(Collections.unmodifiableMap(properties));
return registry.createRecordType(Collections.RECORD_TYPE); return null;
 else { return Collections.modifiable( Collections.unmodifiableMap(properties));
 return registry.getObjectType(properties));
return  new RecordTypeBuilder ( registry ) ;
 else { return registry. getNativeObjectType(JSTypeNative.RECORD_TYPE); } }
 else { return registry.getNativeObjectType;
 else { return Collections.nonunmodifiableMap(properties));
 else if (isEmpty) { return registry.createRecordType(Maps.unmodifiableMap(properties)); } otherwise
 else { return registry.getBuilder(this.registry.createRecordType(Collections.unmodifiableMap(properties));
 else { return new RecordType(properties));
return registry.createRecordType(type, propertyNode); return null;
 else { return (RecordTypeBuilder)registry.createRecordType(Collections.unmodifiableMap(properties));
 else { return registry.getObject();
 else { return objectType;
 else { return this.registry.registry.createRecordType(Collections.unmodifiableMap(properties));
 else { return registry.getNativeObjectTypeImpl(properties));
return registry.getObjectType(JSType.TYPE);
 else if (isEmpty) { return registry.createRecordType(Collection.unmodifiableMap(properties)); } otherwise
 else { return _registry.createRecordType(Collections.unmodifiableMap(properties));
 else { return new JSType(unmodifiableMap(properties));
 else { return registry.getObjectType);
 else { return registry.createType(Collections.unmodifiableMap(properties));
return registry.getNativeObjectType(name);
 else { return registry.get(name);
 else if (isEmpty) { return null; } if (!isEmpty)
return registry.createRecordType(JSTypeNative.create(properties));
 else if (properties.containsKey(propertiesName)) {
 else { return registry.getObjectTypeFrom(unmodifiableMap(properties));
 return new Record(properties));
return registry ; }
 else { return registry. createRecordType(Map.unmodifiableMap(properties)); } }
 return registry.getObjectType("));
return registry.createRecordType(name, type, Map.newHashMap(properties));
 return new RecordTypeBuilder(this));
 else { return Collections.modifiableHashMap(unmodifiableMap(properties));
 else { return registry.getJSTypeType(properties));
 else { return registry. getNativeObjectType(JSTypeNative.OBJECT_TYPE); } } public RecordType build() {}
 else { return registry.getObjectType(...);
return registry.createRecordType(name, type, properties).getNativeObjectType(properties));
return registry.createRecordType(name, type, new RecordTypeBuilder(properties));
 else { return registry.createRecordType(JSTypeNative.RECORD_TYPE); } }
 else if (properties.size > 0) {
 else { return registry. getNativeObjectType(JSTypeNative.OBJECT_TYPE); } if ( isEmpty ) { } }
return registry.createRecordType(Collections.unmodifiableMap(this.registry, properties)); return this;
return registry.createRecordType(Collections.JSTypeNative.OBJECT_TYPE);
 else { return registry.createRecordType(JSTypeNative.UNMODIFIED_TYPE); } }
 return new Builder(properties));
 else if (properties.length) {
 return build(propertyNode));
 else { return registry.createRecordType(JSTypeNative.RECORD); } }
return registry.createRecordType(Name, type, propertyNode, Maps.newMap(properties));
 else if (isEmpty) { return null;
 else { return registry.recordTypeFactory.createRecordType(Collections.unmodifiableMap(properties));
return registry.getNativeObjectType(null);
 else { return Jstype.createRecordType(Collections.unmodifiableMap(properties));
 else { return registry. getNativeObjectType(JSTypeNative.MAPPING_TYPE); } }
return registry.createRecordType(Collections.unmodifiableMap(properties, propertyNode)); return this.type;
 else { return registry. getNativeObjectType(JSTypeNative.OBJECT_TYPE); } return null ; } ;
 return registry.get(propertyNode));
return registry.createRecordType(Collections.RECORD_TYPE, properties, propertyNode);
 return registry.build(name));
return registry.getObjectType(name);
 else { return RecordFactory.createRecordType(Collections.unmodifiableMap(properties));
 else { return this.objectType;
 else { return Collections.ordered(unmodifiableMap(properties));
return registry.createRecordType(new Properties(properties));
return registry.createRecordType(Collections.unmodifiableMap(properties, propertyNode)); return null;
 else { return registry. createRecordType(JSTypeNative.OBJECT_TYPE); } }
 else { return registry. getNativeObjectType(JSTypeNative.OBJECT_TYPE); } } public RecordType build() { {
 return registry.getNewRecordType(properties));
 else { return Collections.map(unmodifiableMap(properties));
 return build(name);
 else { return this.this.registry.createRecordType(Collections.unmodifiableMap(properties));
 else { return registry.get ( ).createRecordType(Collections.unmodifiableMap(properties));
 else if (isNull) { return null; } else
return registry.createRecordTypeBuilder(name, type, properties);
 return build(this);
return registry.createRecordType(Type.RECORD_TYPE);
 else { return registry.createObject(properties));
return registry.createRecordType(Collections.unmodifiableMap(properties), propertyNode); return this;
 else { return Collections(System.unmodifiableMap(properties));
return registry.createRecordType(JSTypeNative.STRUCTURE);
 return JSType.createRecordType(Collections.unmodifiableMap(properties));
 else, if (properties) {
 else { return registry.get(this).registry.createRecordType(Collections.unmodifiableMap(properties));
 else { return registry. getNativeObjectType(JSTypeNative.OBJECT_TYPE); } } }
 else if (isEmpty) { return null; } else
 return collect( Collections.unmodifiableMap(properties));
return registry.createRecordType(Collections.JSTypeNative.RECORD);
return registry.createRecordType(new RecordTypeBuilder(properties));
return registry.createRecordType(name, this.type, new RecordTypeBuilder(properties));
return registry.getNativeType(type);
 else { return this.type.registry.createRecordType(Collections.unmodifiableMap(properties));
 else if (isNew) {
 return new RecordTypeBuilder(new Map(properties));
 return registry.build(this));
return registry.createRecordType(Collections.unmodifiableMap(name, propertyNode));
return registry.createRecordType(JSTypeNative.union(properties));
 return Collections.newunmodifiableMap(properties));
return registry.createRecordType(this, type, propertyNode);
 else { return registry.getNativeObjectType().registry.createRecordType(Collections.unmodifiableMap(properties));
return registry.createRecordType(JSTypeNative.build(properties));
 else { return registry.createObjectType;
return registry.createRecordType(JSTypeNative.MAP(properties));
return registry.createRecordType(JSType.create(properties));
return registry.createRecordType(name, type, Maps.newMap(properties));
return  new RecordTypeBuilder ( ) ; }
 else { return Collections.collect(unmodifiableMap(properties));
 else { return registry. createRecordType(Map.unmodifiableMap(properties)); } else
 return RecordType.createRecordType(Collections.unmodifiableMap(properties));
return registry.createRecordType(Collections.unmodifiableMap(properties)); return null;
 else { return registry. getNativeObjectType(JSTypeNative.OBJECT_TYPE); } } ;
return registry.createRecordType(name, type, properties, Maps.newMap(properties));
return registry.createRecordType(Collections.JSTypeNative.RECORDTYPE);
return registry.createRecordType(Collections.unmodifiableMap(properties)); return registry. createRecordType ( ) ;
return registry.createRecordType(name, type, new JSTypeNative(properties));
return registry.createRecordType(Name, propertyNode);
 return registry.getNativeJSTypeType(Collections.unmodifiableMap(properties));
 else { return registry.build(...);
 else, if (isEmpty) { return null; } else {
return registry.getType(type);
 return registry.buildRecord(properties));
 else { return registry.recordFactory.createRecordType(Collections.unmodifiableMap(properties));
return registry. type ;
 else if (properties.isEmpty) {
return registry.createRecordType(Collections.unmodifiableMap(properties)) return this;
 return objectType;
 else if (isNull) { return null;
 else { return BuilderFactory.createRecordType(Collections.unmodifiableMap(properties));
return registry.createRecordType(Collections.unmodifiableMap(properties, propertyNode)); return this ; }
return registry.createRecordType(name, new RecordTypeBuilder(properties));
return registry.createRecordType(Collections.unmodifiableMap(properties))); return this;
return registry.createRecordType(Collections.ROOT_TYPE);
return registry.createRecordType(name, new RecordProperty(build(properties));
 return (JSType)registry.createRecordType(Collections.unmodifiableMap(properties));
return registry.createRecordType(Collections.unmodifiableMap(this.type, properties));
return registry.createRecordType(Collections.NODE_TYPE); return this;
 return registry.get(name);
return registry.createRecordType(Collections.STRUCTURE_TYPE);
 return new Record(this));
 else { return Collections.modify(unmodifiableMap(properties));
 return new RecordTypeBuilder(.unmodifiableMap(properties));
return registry.createRecordType(Collections.unmodifiableMap(this.properties, properties));
return registry.createRecordType(Collections.unmodifiableMap(this.properties, propertyNode)); return null;
 else, if (isEmpty) { return null; } else,
 else { return (Node)registry.createRecordType(Collections.unmodifiableMap(properties));
 return registry.build(this);
 else { return Collections2.unmodifiableMap(properties));
 else if (properties.containsKey(name)) { return null};
 else { return JstypeNative.createRecordType(Collections.unmodifiableMap(properties));
return registry.createRecordType(Collections.unmodifiableMap(properties, propertyNode)); return this.recordType;
 else { return registry.buildRecord(properties));
return registry.createRecordType(Collections.unmodifiableMap(properties)) ; } return new RecordTypeBuilder ( ) ;
return registry.createRecordType(this.type);
 else { return registry.build();
return registry.createRecordType(Collections.RECORD_TYPE).build();
 else if (isEmpty) {
 return new Type(Collections.unmodifiableMap(properties));
return registry.createRecordType(Name, type, Maps.newMap(properties));
return registry.createRecordType(Collections.unmodifiableMap(this.properties, name));
 else, return JSTypeNative.createRecordType(Collections.unmodifiableMap(properties));
 else { return registry.type;
return registry.createRecordType(this);
 return registry.build(name);
 else { return registry.recordType;
 return registry.addRecord(Collections.unmodifiableMap(properties));
 else { return ImmutableImmutable.unmodifiableMap(properties));
 return JSTypeNative.createRecordType(Collections.unmodifiableMap(properties));
return registry.createRecordType(Collections.unmodifiableMap(properties, propertyNode)); return this.objectType;
return registry.createRecordTypeBuilder(name);
return registry.createRecordType(Name, type, new RecordTypeBuilder(properties));
 return getType());
 return Immutable.unmodifiableMap(properties));
 else { return this.jregistry.createRecordType(Collections.unmodifiableMap(properties));
return registry.createRecordType(Collections.unmodifiableMap(properties, propertyNode)); return this; return null;
 return registry.getType(properties));
 else if (properties.containsKey(name)) { return null }
return registry.createRecordType(Collections.unmodifiableMap(properties, propertyNode)); return this ; } }
 return registry.getType(_);
 else if (isNewRecordType() ) {
return registry.createRecordType(Collections.unmodifiableMap(properties)) + this;
return registry.createRecordType(Collections.unmodifiableMap(type, propertyNode));
return registry.createRecordType(name, type, properties);
return registry.createRecordType(Collections.Object_TYPE);
 return Collections.util.unmodifiableMap(properties));
return registry.createRecordType(Collections.JSType.RECORD);
 return registry.getObjectType(_);
return registry.createRecordType(Collections.unmodifiableMap(properties) + this.registry); return this;
return registry.createRecordType(Collections.unmodifiableMap(name, type));
 return build(name));
 if (!empty) {
return registry.createRecordTypeBuilder(this);
return registry.createRecordType(Collections.JSType.TYPE);
return registry.createRecordType(Collections.unmodifiableMap(properties)); return this.type;
 return new Node(Collections.unmodifiableMap(properties));
 return Collections.nonunmodifiableMap(properties));
 else { return {Node}registry.createRecordType(Collections.unmodifiableMap(properties));
 else { return this._registry.createRecordType(Collections.unmodifiableMap(properties));
 return new RecordType();
 return build(this));
 build(Collections.unmodifiableMap(properties));
return registry.createRecordType(Collections.TYPE_RECORD);
 return registry.getRecord(Collections.unmodifiableMap(properties));
return registry.createRecordType(Collections.unmodifiableMap(properties, name));
 return build(propertyNode);
 else { return Immutable.unmodifiableMap(properties));
return registry.createRecordType(Collections.STRUCT_TYPE);
 if (isNew) {
 else if (!isEmpty)
return registry.createRecordType(Collections.RECORD_TYPE); } }
return registry.createRecordType(Collections.unmodifiableMap(this));
return registry.createRecordType(Collections.unmodifiableMap(this, properties, name));
return registry.createRecordType(Collections.unmodifiableMap(properties) + this.registry);
 else, if (isEmpty) { return null; } else
return registry.createRecordType(name, type);
return registry.createRecordType(Collections.unmodifiableMap(properties)) ; return registry. getRecordType ( ) ;
return registry.createRecordType(Collections.ROOT);
return registry.createRecordType(propertyNode);
return registry.createRecordType(name, type, Collections.newMap(properties));
return registry.createRecordType(Collections.RECORD_TYPE); return this ; }
return registry.createRecordType(JSTypeNative.RECORD(properties));
 return new RecordTypeBuilder);
return registry.createRecordType(JSType.union(properties));
return registry.createRecordType(name, type, properties, Maps.asList(properties));
return registry.createRecordTypeBuilder(name, properties, this);
 else { return JSTypeBuilder.createRecordType(Collections.unmodifiableMap(properties));
 if (properties.size() ) {
return registry.createRecordType(Collections.unmodifiableMap(properties) { this.properties = properties); });
 Collections.unmodifiableMap(properties));
return registry.createRecordTypeBuilder(this, properties);
return registry.createRecordType(new Map(properties));
return registry.createRecordType(Collections.unmodifiableMap(this).class);
 return new Record(this);
 else { return the object type;
 else { return registry.createNewRecord;
 return Collections.ordered(unmodifiableMap(properties));
 return getObjectType());
return  this.recordType;
 if (!isEmpty)
return registry.createRecordType(new JSTypeNative(properties));
return registry.createRecordType(name, JSType.create(properties));
return registry.createRecordType(Collections.unmodifiableMap(properties, propertyNode)); return this ; } } ;
return registry.createRecordType(Collections.unmodifiableMap(properties) + propertyNode); return this;
return registry.getNativeObjectType(JSType());
return registry.createRecordType(Collections.unmodifiableMap(properties)) ; return registry. getObjectType ( ) ;
return registry.createRecordType(Map.newMap(properties));
 return jstype.createRecordType(Collections.unmodifiableMap(properties));
 else if (!empty) {
return registry.createRecordType(Collections.unmodifiableMap(properties)), propertyNode;
 return new Record());
 return new ObjectType());
 else { return "null";
 else { return (null);
 return build(null);
return registry.createRecordType(Collections.unmodifiableMap(properties)) ; return registry. getType ( ) ;
return registry.createRecordType(JSType.native(properties));
 else if (isEmpty) { return null; } }
return registry.createRecordType(Maps.newMap(properties));
return registry.createRecordType(Name, JSType.create(properties));
return registry.createRecordType(Collections.unmodifiableMap(properties) + propertyNode);
return registry.createRecordType(Collections.unmodifiableMap(properties)) ; return this.build ( propertyNode ) ;
return registry.createRecordType(Collections.unmodifiableMap(properties)).build(); return this;
return registry.createRecordType(name, type, properties.toSortedMap(properties));
return registry.createRecordType(JSType.build(properties));
return registry.createRecordType(Collections.unmodifiableMap(properties))); return this.type;
return registry.createRecordType(this).build();
return registry.createRecordType(Collections.unmodifiableMap(properties) { this.properties = properties; });
 return new ObjectType(properties));
return registry.createRecordType(Collections.unmodifiableMap(properties, propertyNode)); } }
return registry.createRecordType(name, new RecordTypeBuilderImpl(properties));
 return registry.getType(...);
return registry.createRecordType(Collections.unmodifiableMap(properties)) + this.type;
return registry.createRecordType(Collections.STRUCTURE);
return  new RecordTypeBuilder ( this )
return registry.createRecordType(Collections.unmodifiableMap(properties), propertyNode); return this ; }
return registry.createRecordType(type, propertyNode); } }
return registry.createRecordType(Collections.ObjectType);
return registry.createRecordType(Collections.unmodifiableMap(this.registry, properties)); } }
return registry.createRecordType(new JSType(properties));
 return Collections.create(unmodifiableMap(properties));
 return build(record);
return registry.createRecordType(Collections.unmodifiableMap(properties) { return properties.get(name)); });
return  null ; }
return registry.getNativeObjectType(recordType); }
 return new RecordBuilder(properties));
return registry.getObject();
return registry.createRecordType(name, type, new JSTypeMap(properties));
return registry.createRecordType(Collections.unmodifiableMap(properties.keys(), properties));
return registry.createRecordType(JSTypeNative.RECORD); }
return registry.createRecordType(Collections.RECORD_TYPE, propertyNode); } }
return registry.createRecordType(Collections.unmodifiableMap(properties)) + propertyNode;
return  this;
return registry.createRecordType(Collections.unmodifiableMap(this.registry)); } }
 return Collections.map(unmodifiableMap(properties));
return registry.createRecordType(Collections.unmodifiableMap(properties) + this.registry); return this ; }
return registry.createRecordType(type);
return registry.createRecordType(Collections.STRING);
return  recordTypeBuilder ; }
return registry.createRecordType(Collections.unmodifiableMap(properties) + this.registry); return null;
 return build(null));
 else { return null ; };
 else { return create(Collections.unmodifiableMap(properties));
return registry.createRecordType(Collections.unmodifiableMap(properties)) ; return registry. build ( ) ; }
 return JSType.registry.createRecordType(Collections.unmodifiableMap(properties));
 return java.util.registry.createRecordType(Collections.unmodifiableMap(properties));
return registry.createRecordType(Collections.unmodifiableMap(properties)); return this.recordType;
return registry. record ;
return  registry.getNativeObjectType(recordType());
 return Collections.ununmodifiableMap(properties));
 return RecordType(properties));
return registry.createRecordType(Collections.unmodifiableMap(properties)) ; return this ; }
return registry.createRecordType(Collections.unmodifiableMap(name, properties));
 return RecordBuilder.createRecordType(Collections.unmodifiableMap(properties));
return registry.createRecordType(Collections.unmodifiableMap(this.registry, propertyNode)); }
 else { return defaultType;
 return Repository.createRecordType(Collections.unmodifiableMap(properties));
return registry.createRecordType(Collections.unmodifiableMap(this.properties, propertyNode)); }
 else { registry.createRecordType(Collections.unmodifiableMap(properties));
 else { return emptyType;
return registry.createRecordTypeBuilder(name, type, propertyNode); }
return registry.createRecordType(Collections.unmodifiableMap(properties, propertyNode)); return this
 else { return propertyNode;
return registry.createRecordType(Collections.unmodifiableMap(properties) { this.properties = properties; })
return registry.createRecordType(Collections.unmodifiableMap(null, properties));
return registry.createRecordType(Collections.unmodifiableMap(properties)) ; return registry. createRecord ( ) ;
return registry.createRecordType(Collections.unmodifiableMap(properties, propertyNode)); return null
 if (!properties) {
return registry.createRecordType(new JSTypes(properties));
 else if (isEmpty) { return null; } else { }
return registry.createRecordType(new HashMap(properties));
 return _registry.createRecordType(Collections.unmodifiableMap(properties));
return registry.createRecordType(Collections.RECORD_TYPE); return null
return registry.createRecordType(Collections.RECORD_TYPE); return this
 else { return type;
 return RecordTypeBuilder.createRecordType(Collections.unmodifiableMap(properties));
 return Collections2.unmodifiableMap(properties));
return registry.createRecordType(Collections.unmodifiableMap(properties) { return properties.get(name)); } });
return registry.createRecordType(Collections.RECORD_TYPE, propertyNode); }
 return Registry.build(Collections.unmodifiableMap(properties));
return registry.createRecordType(Collections.unmodifiableMap(properties) + propertyNode); return null;
 else if (isNull) { return null; } else { }
return registry.createRecordType(Collections.RECORD_TYPE); }
return registry.createRecordType(this, name);
return registry.createRecordType(this, properties);
return registry.createRecordType(Collections.unmodifiableMap(this.registry), propertyNode); }
return  null ; } }
return registry.createRecordType(Collections.unmodifiableMap(this.registry, properties)); }
 return new Record ((properties));
return registry.createRecordTypeBuilder(this, name);
return registry.createRecordType(Collections.unmodifiableMap(properties)) ; return this ; } }
return registry.createRecordType ( ) ;
 build(map(properties));
return registry.createRecordType(Collections.Type);
return registry.createRecordType(this.type, this.propertyNode());
 else { return "null;
return registry.createRecordType(Collections.unmodifiableMap(properties)) ; return this ; } } ;
return registry.createRecordType(Collections.unmodifiableMap(this.properties), propertyNode); }
return registry.createRecordType(Collections.unmodifiableMap(properties) { this.properties = properties); })
return  recordType ; }
 return this);
return registry.createRecordType(new RecordMap(properties));
 return new (Map(properties));
return registry.createRecordType(Collections.unmodifiableMap(properties)). buildRecordType(this);
return registry.createRecordType(Collections.unmodifiableMap(properties)); } }
return registry.createRecordType(Collections.JSTypeNative.RECORD_TYPE));
return  recordTypeBuilder ;
return  new RecordTypeBuilder ( )
return registry.createRecordType(Collections.unmodifiableMap(properties)) return null;
return registry.createRecordType(Collections.unmodifiableMap(properties)); return this.build(properties);
return registry.getNativeObjectType(record); }
 return emptyType;
 return build(map(properties));
return  this ; }
return registry.createRecordType(Collections.unmodifiableMap(name));
return registry.createRecordType(Collections.JSTypeNative.RECORD); }
return registry.createRecordType(Collections.unmodifiableMap(this.propertyNode));
return registry.createRecordType(Collections.unmodifiableMap(properties, propertyNode)); }
 registry.createRecord(properties));
return registry.createRecordType(Collections.unmodifiableMap(properties)). buildRecordType(name);
 return new RecordBuilder(Collections.unmodifiableMap(properties));
 return recordType;
return registry.createRecordType(new RecordConfiguration(properties));
 return JSTypes.createRecordType(Collections.unmodifiableMap(properties));
 build(build(properties));
 return createRecord(properties));
 return RecordFactory.createRecordType(Collections.unmodifiableMap(properties));
return registry.createRecordType(Collections.unmodifiableMap(properties, propertyNode)); return ;
 return jstype.registry.createRecordType(Collections.unmodifiableMap(properties));
return registry.createRecordType(type, propertyNode); }
return registry.createRecordTypeBuilder(name, propertyNode); }
return registry.createRecordType(Collections.unmodifiableMap(properties)) + type;
 else return this.registry.createRecordType(Collections.unmodifiableMap(properties));
 return new ObjectType(Collections.unmodifiableMap(properties));
return registry.createRecordType(Collections.CLASS);
 return defaultType;
 build(this));
return registry.createRecordType(Collections.JSON);
return registry.createRecordType(Collections.unmodifiableMap(properties))); return this ; }
 return build(*);
return registry.createRecordType(new ArrayList(properties));
return registry.createRecordType(Collections.unmodifiableMap(properties)) ; return this ; } } } ;
return  registry. getNativeObjectType(); }
 build(unmodifiableMap(properties));
return registry.createRecordType(Collections.unmodifiableMap(properties)) ; return this ; } } }
 build(Map(properties));
 return createRecord(Collections.unmodifiableMap(properties));
 else { this.registry.createRecordType(Collections.unmodifiableMap(properties));
 return create(Collections.unmodifiableMap(properties));
return registry.createRecordType(name, propertyNode); }
return registry.createRecordType(Collections.unmodifiableMap(properties, propertyNode)); return null; }
return registry.createRecordType(Collections.unmodifiableMap(properties)) ; return this.build(properties); }
 (this);
 return type;
 else { return this;
return registry.createRecordType(Collections.unmodifiableMap(properties)) ; return registry. createRecordType(); }
return registry.createRecordType(this, propertyNode); }
return registry.getObjectType(); }
 return RecordType(Collections.unmodifiableMap(properties));
return registry.createRecordType(Collections.unmodifiableMap(type));
 return BuilderFactory.createRecordType(Collections.unmodifiableMap(properties));
 return "null;
return registry.createRecordType(Collections.RECORD); }
return registry.createRecordType(Collections.unmodifiableMap(properties)) ; return this.build(); } }
return registry.createRecordType(Collections.NODE_TYPE); }
return registry.createRecordType(Collections.unmodifiableMap(properties)) ; }
return registry.getNativeObjectType(type());
return registry.createRecordType(Collections.unmodifiableMap(properties)) ; return this ; } } } }
 return build();));
 (this));
 return Build(Collections.unmodifiableMap(properties));
 return { this.registry.createRecordType(Collections.unmodifiableMap(properties));
return registry.createRecordType(Collections.ROOT_TYPE); }
return registry.createRecordType(Collections.unmodifiableMap(properties), propertyNode));
 return build(_));
 return build((properties));
return registry.createRecordType(Collections.unmodifiableMap(this).class));
 this.registry.createRecordType(Collections.unmodifiableMap(properties));
return registry.createRecordType(Collections.unmodifiableMap(properties) + this);
 return "Object";
 return Jstype.createRecordType(Collections.unmodifiableMap(properties));
return registry.createRecordType(Collections.unmodifiableMap(this).class());
 return this._registry.createRecordType(Collections.unmodifiableMap(properties));
 else return Collections.unmodifiableMap(properties));
return registry.createRecordType(Type.RECORD); }
 new Builder(properties));
return registry.createRecordType(Collections.TYPE_RECORD); }
 else if (!isEmpty){
return registry.createRecordType(Collections.unmodifiableMap(properties))();
 return registry.registry.createRecordType(Collections.unmodifiableMap(properties));
return registry.createRecordType(Collections.unmodifiableMap(properties) + 1);
return registry.createRecordType(Collections.unmodifiableMap(properties)); return this
 return create(properties));
 build({));
 } }));
 build()));
return registry.createRecordType(Collections.unmodifiableMap(properties)); return null
 new Record(properties));
return registry.createRecordType(Collections.unmodifiableMap(properties)) ; return this.build(); } ;
return registry.createRecordTypeBuilder(build); }
return registry.object;
 return ();
return registry.getType(name());
 return new(Collections.unmodifiableMap(properties));
return registry. build(); }
return registry.createRecordType(null);
return registry.createRecordType(Collections.unmodifiableMap(properties)); return ;
return registry.createRecordType(Collections.unmodifiableMap(properties))); } }
return registry.createRecordTypeBuilder(this); }
return registry.createRecordTypeBuilder(build()); }
return registry.getRecordType(); }
return registry.createRecordType(Collections.unmodifiableMap(objectType));
return registry.createRecordType(this, propertyNode));
return registry.createRecordType(Collections.unmodifiableMap(properties) + propertyNode); }
return registry.createRecordType(Collections.OBJECT); }
return registry.createRecordType(properties);
return registry.createRecordType(Collections.unmodifiableMap(...));
return registry.createRecordType(New Properties(properties));
return registry.getType;
return registry.createRecordType(this); }
return registry.builder();
return registry.build()();
return registry.createRecordType(Collections) ;
 build((properties));
return registry.createRecordType(record); }
 map(unmodifiableMap(properties));
 return (*Collections.unmodifiableMap(properties));
return registry.getType(); }
 return _createRecordType(Collections.unmodifiableMap(properties));
 } else {
 new Builder(Collections.unmodifiableMap(properties));
 return Registry.createRecordType(Collections.unmodifiableMap(properties));
 return Maps.unmodifiableMap(properties));
return registry.createRecordType(Collections.unmodifiableMap(propNode));
return registry.createRecordType(Collections.unmodifiableMap());
return registry.createRecordType(Collections.unmodifiableMap(propertiesMap));
return registry.createRecordTypeImpl();
return registry.createRecordType(name());
 builder.createRecordType(Collections.unmodifiableMap(properties));
 }(properties));
 return (_Collections.unmodifiableMap(properties));
return registry.createRecordType(Collections.unmodifiableMap) ;
 else
 builds(properties));
 return Lists.unmodifiableMap(properties));
return registry.createRecordTypeBuilder();
return registry.createRecordType(Collections.unmodifiableMap(););
return registry.createRecordType(Collections.unmodifiableMap(properties[]));
 return builder.registry.createRecordType(Collections.unmodifiableMap(properties));
 return super.registry.createRecordType(Collections.unmodifiableMap(properties));
return  record; }
 return "registry.createRecordType(Collections.unmodifiableMap(properties));
 new Collections.unmodifiableMap(properties));
 new Record(Collections.unmodifiableMap(properties));
 return make(Collections.unmodifiableMap(properties));
 return builder.createRecordType(Collections.unmodifiableMap(properties));
 new Properties(properties));
return registry.createRecordTypeObject();
return registry.createRecordType(Collections); }
return registry.createRecordType(Collections.unmodifiableMap();)
( Collections.unmodifiableMap(properties));
 return undefined;
 Return registry.createRecordType(Collections.unmodifiableMap(properties));
return registry.createRecordType(Collections.unmodifiableMap(properties))
 else,
return registry.createRecordType(); }
return registry.createRecordType(Collections.unmodifiableMap(properties););
 return { } ;
return registry.createRecordType(build); }
 else { } }
 return record;
 return "createRecordType(Collections.unmodifiableMap(properties));
 return null ; }
 else, {
 return!registry.createRecordType(Collections.unmodifiableMap(properties));
return registry.createRecordType(propertyNode());
 return #createRecordType(Collections.unmodifiableMap(properties));
return registry.createRecordType(Collections.unmodifiableMap); }
return registry.class
return registry.build
 return this.createRecordType(Collections.unmodifiableMap(properties));
return registry.createRecordType(Collections.unmodifiableMap(properties)) ; };
return registry.;
return registry.createRecordType(Collections)();
 return factory.createRecordType(Collections.unmodifiableMap(properties));
return registry.createRecordType(Collections);...
(Maps.unmodifiableMap(properties));
return registry.createRecordType(Collections.unmodifiableMap(properties));...
 } else,
return registry.createRecordType(map(properties));
return registry.createRecordType(Collections.unmodifiableMap(properties))); }
return registry.createRecordType(Build(properties));
return registry.createRecordType(create(properties));
return registry.createRecordType(Collections.unmodifiableMap(property));
 } else
return registry.createRecordType(Collections.unmodifiableMap(types));
 } {
 otherwise
