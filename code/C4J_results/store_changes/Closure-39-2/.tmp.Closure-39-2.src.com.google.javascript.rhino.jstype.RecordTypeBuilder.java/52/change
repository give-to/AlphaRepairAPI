private boolean isEmpty = true;
 isEmpty=true;
private boolean  isEmpty;
 private final boolean isEmpty=true;
private boolean  empty;
 private final boolean this.isEmpty = true;
 private final RecordTypeBuilder.isEmpty = true;
 private final Map<String, RecordProperty> properties;
 private final boolean isEmpty = this.true;
 private final boolean isEmpty; private boolean duplicate=true;
 private boolean empty=true;
 private final RecordTypeBuilder builder;
 private final Map<String, Node> properties;
 private isEmpty=true;
 private final boolean this.this.isEmpty = true;
 private final boolean _isEmpty = true;
 private final boolean isEmpty =!true;
 private final boolean isEmpty = isEmpty=true;
 private final boolean isEmpty = this.empty=true;
private boolean  isEmpty = isEmpty ( ) ;
 private final boolean empty=true;
 private final boolean isEmpty; boolean duplicate=true;
 private final boolean isEmpty; private this.isEmpty = true;
 private final boolean isEmpty!= true;
 private final boolean this.registry.isEmpty = true;
 private final boolean isEmpty; this.isEmpty= true;
 private final Map<String, RecordProperty> properties = null;
 private final Map<String,> properties;
 private final boolean isEmpty = (bool)true;
 private final boolean isEmpty; isEmpty= true;
 private final Map < String, RecordProperty > properties = { } ;
 private final boolean isEmpty; public boolean duplicate=true;
 private final Map<String, properties;
 private final boolean isEmpty = this.empty==true;
 private final Collection<RecordProperty> properties;
 private final RecordTypeBuilder builder = null;
 private final JSType type; private this.isEmpty = true;
 private final Map<String, RecordProperty> properties;
 private final boolean isEmpty ; private final boolean duplicate= true;
 private final boolean isEmpty; static boolean duplicate= true;
 private final JSType type = null ; private final Node propertyNode = null ;
 private final boolean isEmpty = _true;
 private final Map < String, RecordProperty > properties = Maps. create ( ) ;
 private final Map<String, Property> properties;
private boolean  isEmpty; private final Map properties = null;
 private final boolean isEmpty = (int)true;
 private final Map<String, Properties;
 private final RecordTypeBuilder this.isEmpty = true;
 private final Map<String, Object> properties;
private  final Map<String, RecordProperty>;
 private final Map < String, RecordProperty > properties = new Map ( ) ;
 private this.isEmpty = true;
 private final boolean isEmpty = Boolean.true;
 private final boolean isEmpty ~= true;
 private final RecordTypeBuilder this = this;
 private final boolean isEmpty; private final boolean _isEmpty = true;
 private final JSType type = null ; private final JSType propertyNode = null ;
 private final boolean isEmpty = $true;
 private final Map < String, RecordProperty > properties = Maps. newMap ( ) ;
 private final RecordTypeBuilder this; this.isEmpty = true;
 private final boolean isEmpty ==true;
private boolean isEmpty =  true ; private final Map <String, Properties>
private boolean isEmpty = true ; return new RecordTypeBuilder ( ) ; }
 return new RecordTypeBuilder ( ) ; } public RecordTypeBuilder ( ) { private final Map<String, RecordProperty> properties = null;
 return new RecordTypeBuilder ( ) ; } public RecordTypeBuilder ( ) { public RecordTypeBuilder(JSTypeRegistry registry) {
private  this;
 public final boolean isEmpty=true;
 private final boolean isEmpty; final boolean duplicate= true;
 private final Properties properties;
 private final boolean isEmpty = boolean.true;
 private final boolean this.builder.isEmpty = true;
private boolean isEmpty =  true ; private final Map properties = null ;
 private final RecordType type;
 private final RecordTypeBuilder this = RecordTypeBuilder;
 private final boolean isEmpty |= true;
private boolean isEmpty =  true ; private void init ( ) {
 private final boolean isEmpty = this.isEmpty = true;
private boolean isEmpty =  true ; public RecordTypeBuilder() {
 private final boolean isEmpty = (void)true;
 private final boolean isEmpty = always=true;
 private final Collection<JSType> types;
 private static boolean isEmpty=true;
 private final boolean isEmpty = always==true;
 return new RecordTypeBuilder ( ) ; } public RecordTypeBuilder ( ) { public RecordTypeBuilder(JSTypeRegistry) {
 private final Map<String>, properties;
private boolean isEmpty = true ; private final JSTypeTypeType type;
 private final RecordTypeBuilderBuilder builder;
 private final JSTypeRegistry registry = null ; private final Map < String, RecordProperty > properties;
 private final RecordTypeBuilderBuilderBuilderBuilderBuilder.isEmpty = true;
 private void init ( ) {
 private final RecordTypeBuilder recordTypeBuilder;
 public RecordTypeBuilder(JSTypeRegistry registry) { this.registry;
 public RecordTypeBuilder(JSType type, Node propertyNode) { return this ; }
 private final JSTypeRegistryRegistry;
private boolean isEmpty =  true ; private final Collection < Node > nodes ;
private boolean isEmpty =  false ; private final Map <String, Properties>
 private final RecordTypeBuilderBuilderBuilder this.isEmpty = true;
 return new RecordTypeBuilder ( ) ; } public RecordTypeBuilder createRecordTypeBuilder ( ) { private final Map<String, RecordProperty>
 private void clear ( ) ;
private boolean isEmpty = true ; return RecordTypeBuilder ; }
 private final Map < String, Node> properties;
 private final RecordTypeBuilder this = null;
 private final JSType this.isEmpty = true;
 private final RecordTypeBuilder _isEmpty = true;
 } { private final boolean isEmpty= true;
 private final Map properties;
 private final boolean isEmpty; private boolean isNew= true;
 private Class <? extends RecordTypeBuilder > recordTypeBuilder ; private Class <? extends RecordProperty > properties;
 private final RecordBuilder builder;
 public Class <? extends RecordTypeBuilder > recordTypeBuilder { public Class <? extends JSTypeRegistry > registry;
 private Class <? extends RecordTypeBuilder > recordTypeBuilder ; private Class <? extends JSTypeRegistry registry ;
private boolean isEmpty = true ; private final Map <String, Property>;
private boolean isEmpty =  false ; private final Map properties = null ;
 private final JSType type = "record" ;
 private String name = null;
 public Class <? extends RecordTypeBuilder > recordTypeBuilder { private Class <? extends JSTypeRegistry > registry;
 private final Collection<Node> collection;
 public Class <? extends RecordTypeBuilder > recordTypeBuilder { public Class <? extends RecordTypeBuilder > recordTypeBuilder {
private  final boolean isEmpty;
private boolean  isEmpty = false;
 private final boolean isEmpty; private final boolean!isEmpty = true;
 return new RecordTypeBuilder ( ) ; } public RecordTypeBuilder ( ) { public RecordTypeBuilder(JSTypeRegistry registry);
 private final boolean recordTypeBuilder.isEmpty = true;
 public boolean isEmpty=true;
 private Class <? extends RecordTypeBuilder > recordTypeBuilder ; private Class <? extends RecordTypeBuilder > recordBuilder ;
private boolean isEmpty ; private final Map <String, Properties>
 this.isEmpty = true;
private boolean isEmpty = true ; private final RecordTypeBuilder builder;
 private final Map<String, RecordProperty properties;
 public Class <? extends RecordTypeBuilder > recordTypeBuilder { private Class <? extends RecordTypeBuilder > recordTypeBuilder ;
private boolean  isEmpty = isEmpty ; }
 private final Node node;
 return new RecordTypeBuilder ( ) ; } public RecordTypeBuilder ( ) { public RecordTypeBuilder(JSTypeRegistry registry)
 private Class <? extends RecordTypeBuilder > recordTypeBuilder ; private Class <? extends RecordTypeBuilder > builder ;
private boolean  isEmpty = false ; private final registry;
 private static boolean empty=true;
 public RecordTypeBuilder(JSType type, Node propertyNode) { return this ; } }
 public RecordTypeBuilder(JSType registry) { this.registry = registry; } }
private boolean  isEmpty = true ; private final registry;
 return new RecordTypeBuilder ( ) ; } public RecordTypeBuilder ( ) { public RecordTypeBuilder(JSTypeRegistry registry) {}
 private final RecordTypeBuilder this = this;
 public RecordTypeBuilder(JSTypeRegistry registry) { this.registry};
 return new RecordTypeBuilder ( ) ; } public RecordTypeBuilder ( ) { public RecordTypeBuilder(JSTypeRegistry) {}
 private final boolean isEmpty ; private final boolean dup= true;
 public Class <? extends RecordTypeBuilder > recordTypeBuilder { private Class <? extends RecordTypeBuilder > builder;
 public Class <? extends RecordTypeBuilder > recordTypeBuilder { private Class <? extends JSTypeRegistry > {
 public final RecordTypeBuilder.isEmpty = true;
private boolean  isEmpty = false ; private final Registry;
 public RecordTypeBuilder(JSTypeRegistry registry) { this.registry }
 private final boolean isEmpty = empty!= true;
private boolean  isEmpty = true ; private final Registry;
 private final RecordTypeBuilder#isEmpty = true;
 private Node propertyNode;
 private void isEmpty=true;
 private final JSType type = RecordType. class ;
 private final isEmpty= true;
private boolean  isEmpty = isEmpty ( ) ; }
private boolean isEmpty ; private final Map <String, Node>
private  final Map<String, RecordProperty> };
 public final boolean isEmpty =!true;
 private final RecordTypeBuilderBuilderBuilder this = this;
private  final registry;
 public RecordTypeBuilder(JSType type) { this.type = type; } }
private boolean  isEmpty = true ; }
 private void initialize ( ) {
 private final Node propertyNode;
 public Class <? extends RecordTypeBuilder > recordTypeBuilder { public Class <? extends RecordTypeBuilder > recordTypeBuilder { """
 } private final boolean isEmpty= true;
 private final Collection<JSType> typeCollection;
 private Class <? extends RecordTypeBuilder > recordTypeBuilder ; private Class <? extends Node > {
 private void createRecordType ( ) {
 private Class <? extends RecordTypeBuilder > recordTypeBuilder ; private Class < Node > recordType ;
private boolean isEmpty =  true ; private void init ( ) ;
private boolean isEmpty ; private final Map <String, Property>
 private final RecordTypeBuilder builder ( ) ;
 static final boolean isEmpty= true;
 private final JSTypeRegistry registry = new Registry ( ) ; private final Map < String, Node>;
 private final Builder builder;
 private final Boolean this.isEmpty = true;
private boolean isEmpty = true ; return this ; }
 private final boolean isEmpty =!= true;
 public Class <? extends RecordTypeBuilder > recordTypeBuilder { public Class <? extends JSTypeRegistry > registry ; {
private  final Map<String, Properties>;
 private final Map < String, RecordProperty > properties = { } ; }
private boolean isEmpty =  true ; private final RecordTypeBuilder builder ; }
 private final RecordTypeBuilderBuilderBuilderBuilderBuilderBuilder;
 private final RecordTypeBuilder this.boolean isEmpty = true;
 private final RecordTypeBuilderBuilder builder;
 public boolean empty=true;
 public RecordTypeBuilder(JSType registry) { this.registry = registry; } };
 private Class <? extends RecordTypeBuilder > recordTypeBuilder = new RecordTypeBuilder ( ) ; }
 private boolean isEmpty =!true;
 public final boolean this.isEmpty = true;
 public RecordTypeBuilder(JSType type, Node propertyNode) { return this ; } };
 private final JSTypeRegistry registry = new Registry ( ) ; private final Map < String, Node>();
 private final Map map = null;
 private final Map map;
 private static boolean this.isEmpty = true;
 private final JSTypeRegistry registry = null ; private final Map < String, RecordProperty > properties();
 public Class <? extends RecordTypeBuilder > recordTypeBuilder { private Class <? extends JSTypeRegistry > registry; {
 static isEmpty= true;
 private Class <? extends RecordTypeBuilder > recordTypeBuilder = new RecordTypeBuilder ( ) { }
 private Properties properties;
 private final Map<String properties;
 public Class <? extends RecordTypeBuilder > recordTypeBuilder { private Class <? extends RecordTypeBuilder > { }
 private final RecordBuilder.isEmpty = true;
 private final Map <> properties;
private  final Map<String, RecordProperty> properties();
 private String name = "";
 } private final boolean isEmpty!= true;
 private final Map<String, RecordProperty>();
 private Map properties;
 private void init();
 private final Map<String, RecordProperty properties);
 private static isEmpty= true;
 private final Map < String, RecordProperty > properties = Maps. emptyMap ; }
private boolean  isEmpty = true ; } public static
 private void initialize();
 private=true;
 private final RecordTypeBuilder this;
 private final JSType type = null ; }
 private final JSType.boolean isEmpty = true;
private boolean isEmpty =  true ; public RecordTypeBuilder() {}
 } private final boolean isEmpty ~= true;
 private Builder builder;
 private final Map<String, RecordProperty properties];
 private final Map<String, RecordProperty properties();
 private final Map<String, RecordProperty> properties();
 private String name;
 private final RecordTypeBuilder builder;boolean isEmpty = true;
private boolean  isEmpty = true ; } private static
 private final Map<String, RecordProperty> properties; static
private boolean isEmpty = true ; public void initialize();
private boolean  isEmpty = true ; private void init(); }
 private final boolean this.registry_isEmpty = true;
private  this.name;
 private void isEmpty =!true;
private  final RecordTypeBuilder builder ; }
 public final boolean _isEmpty = true;
 private final JSType type; private #boolean isEmpty = true;
private boolean isEmpty =  true ; private final Node propertyNode ; }
private boolean  isEmpty = true ; private void initialize(); }
 private final JSTypeType type = null ; }
 static=true;
private boolean isEmpty =  true ; private final Node node ; }
private boolean  isEmpty = true ; private void clear(); }
private boolean isEmpty = true ; private final JSType type ; }
 protected boolean empty=true;
private  final RecordTypeBuilderBuilder builder ; }
 private final String name = null;boolean isEmpty = true;
 private final Map<String, RecordProperty> properties = {}; static
 private static boolean _isEmpty = true;
 private final RecordTypeBuilder builder; private #boolean isEmpty = true;
 private void createRecordType ( ) ;
 private final Map<String, RecordProperty> properties = new Map(); }
private  final Map<String, Properties> };
 private final boolean!isEmpty = true;
private  final RecordTypeBuilder builder ; } }
 private boolean duplicate;
 private final RecordTypes types;
private boolean  isEmpty ; private Node node ; }
 private final this.isEmpty = true;
 public final RecordTypeBuilder builder ; }
 private final Map propertiesMap;
 private void isEmpty!= true;
 private final RecordTypeBuilder builder = null ; } }
 private final RecordTypeBuilder builder.boolean isEmpty = true;
 private final JSType type; private finalboolean isEmpty = true;
 public void initialize();
private  registry;
 private final boolean isEmpty; private this._isEmpty = true;
private boolean isEmpty ; private final Map <String, Properties);
 empty=true;
private boolean isEmpty  ; private final JSType type ; } }
private boolean  isEmpty = false ; }
 private this builder;
 private final boolean _boolean isEmpty = true;
 private Map map;
 private final RecordTypeBuilder builder; private finalboolean isEmpty = true;
 private this;
private  this; }
 private final JSType#boolean isEmpty = true;
 public isEmpty= true;
 boolean empty=true;
 private final JSType type = null; finalboolean isEmpty = true;
private boolean isEmpty = true ; return this ; } }
 private final JSType type ; } }
 public void initialize();
 static this.isEmpty = true;
 public final RecordTypeBuilder builder ; } }
 private final RecordTypeBuilder builder();
 private final JSType type = null ; #boolean isEmpty = true;
 private final RecordTypeBuilderBuilder builder();
private boolean isEmpty  ; private final JSTypeType type; }
 private final JSType type = RecordType. class();
private boolean isEmpty =  true ; public void init(); }
 private final JSType type; private _boolean isEmpty = true;
private boolean isEmpty =  false ; private void init(); }
 private void clear ( ) ; }
private boolean isEmpty  = true ; private final Map properties = null();
 private final JSType<boolean isEmpty = true;
 private final boolean finalboolean isEmpty = true;
 private boolean _isEmpty = true;
 private private final boolean _boolean isEmpty = true;
 public final RecordTypeBuilder builder; };
private boolean isEmpty = ! isEmpty ; }
 private final boolean #boolean isEmpty = true;
 private void init ( ) { }
 private final boolean null;boolean isEmpty = true;
 private final boolean test_boolean isEmpty = true;
 private void initialize ( ) { }
 private final String name = null; finalboolean isEmpty = true;
 private final boolean true;boolean isEmpty = true;
private  final null;
 private String name = "" ; }
 private final BuilderBuilder builder; }
private  static null;
 private static final boolean _boolean isEmpty = true;
 private void _isEmpty = true;
 private final RecordBuilder builder; }
private  null;
 private final boolean isEmpty();
 private final Node node; }
private  final BuilderBuilder builderBuilder; }
 private boolean immutable= true;
 private final Builder builder; }
private boolean  isEmpty();
 private static final #boolean isEmpty = true;
 } private static
 public this;
private boolean  isEmpty; }
 private final Node node = null ; #boolean isEmpty = true;
 private void init(); }
 volatile=true;
 private String name; private
 isEmpty:true;
 final=true;
private boolean isEmpty = true ; } public abstract
 static this;
 private final static #boolean isEmpty = true;
private boolean isEmpty = true ; } private {
 private final boolean empty; #boolean isEmpty = true;
 private final void init(); #boolean isEmpty = true;
 private static final
private boolean Empty;
private boolean isEmpty = true ; } public final
 } private static
private  static };
 isNull=true;
 final this;
private boolean  true;
private boolean  initialized;
 } ;
 } { }
 private static;
private boolean  isEmpty } ;
 private final finalboolean isEmpty = true;
private boolean  isEmpty;;
private boolean  isEmpty(); }
 static booleanisEmpty = true;
 } private #boolean isEmpty = true;
 } {
 is empty= true;
 } ;
private boolean isEmpty = true; static {
 }; {
 isNew= true;
private boolean isEmpty =  true();
 }; private
 }; {
private boolean isEmpty =  true. };
 } #boolean isEmpty = true;
 }
private boolean isEmpty = true } ;
private boolean isEmpty; true;
private boolean isEmpty, true;
private boolean isEmpty is true;
