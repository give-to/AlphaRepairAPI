 return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);
return registry.getImplicitPrototype();
 return registry.getObjectType(JSTypeNative.OBJECT_TYPE);
 return registry.getType(JSTypeNative.OBJECT_TYPE);
 return registry.getNativeObjectType(OBJECT_TYPE);
 registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);
 return registry.getImplicitObjectType(JSTypeNative.OBJECT_TYPE);
 return (OBJECT_TYPE);
 if (isFrozen) {
 return registry.getNativeObjectType.OBJECT_TYPE);
 return registry.getImplicitNativeObjectType(JSTypeNative.OBJECT_TYPE);
 return (JSTypeNative.OBJECT_TYPE);
 return registry.get(Native.OBJECT_TYPE);
 return (ObjectType)registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);
 return (JSType)registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);
return registry.getNativeObjectType(ImplicitPrototype);
return registry.getNativeObjectType(JSTypeImplicit);
 return registry.getImplicitPrototype(JSTypeNative.OBJECT_TYPE);
 return registry.getImplicitPrototype(OBJECT_TYPE);
return registry.getNativeObjectType(JSTypeNative.NO_TYPE);
 return registry.get(OBJECT_TYPE);
 if (isFrozen) { return false; }
 return registry.getType(OBJECT_TYPE);
return registry.getImplicitType();
 return registry.getNativeImplicitObjectType(JSTypeNative.OBJECT_TYPE);
 return getType(JSTypeNative.OBJECT_TYPE);
 return registry.get(JSTypeNative.OBJECT_TYPE);
 return registry.getNativeType(Native.OBJECT_TYPE);
 if (!isFrozen) {
return  super. getImplicitPrototype ( ) ;
 return (JSType ObjectType)registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);
return registry.getNativeObjectType(JSTypeNative.Implicit_TYPE);
 if (isFrozen)
return  getImplicitPrototype ( ) ;
 return (JSTypeType)registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);
 return getImplicitPrototype(JSType.OBJECT_TYPE);
 return getNativeObjectType(JSTypeNative.OBJECT_TYPE);
 return super.getImplicitPrototype);
return registry.getNativeObjectType(JSTypeNative);
 return registry.getNativeType(OBJECT_TYPE);
return registry.getNativeObjectType(JSTypeImplicitPrototype);
 if (!inferred)
 if (!inferred) {
 return registry.getNativeImplicitPrototype(JSTypeNative.OBJECT_TYPE);
return registry.getNativeObjectType(JSType);
return registry.getNativeObjectType(JSTypeNative.implicitPrototype);
return registry.getNativeObjectType(JSTypeNative.ImplicitPrototype);
 return (ObjectType) (JSType)registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);
return registry.getObjectType(JSTypeImplicit);
 return super.getImplicitPrototype(other);
 return (JSTypeImplicitPrototype)registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);
 return (Type)registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);
 return registry.getObjectType(OBJECT_TYPE);
return registry.getNativeObjectType(JSTypeImplicitType);
 if (!isFrozen) { return false; }
 return registry.getNative(OBJECT_TYPE);
 return registry.getPrototype(OBJECT_TYPE);
return  this. getImplicitPrototype ( ) ;
 return registry.getNativeObjectType(Native.OBJECT_TYPE);
 return this.registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);
 return registry.get (JSType.OBJECT_TYPE);
return registry.getType();
return registry.getObjectType();
 return super. getImplicitPrototype ( otherRecord ) ;
return registry. getImplicitObjectType ( ) ;
 if (isFrozen) return false;
 return registry.getNativeImplicitPrototypeType(JSTypeNative.OBJECT_TYPE);
 return registry.getNativeType(NativeType.OBJECT_TYPE);
 return Registry.getNativeObjectType(OBJECT_TYPE);
 return (ObjectType) (ObjectType)registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);
 return (JSType.OBJECT_TYPE);
return  super. getImplicitPrototype ( ). as(JSTypeNative.OBJECT_TYPE);
 return get(JSTypeNative.OBJECT_TYPE);
 return getImplicitPrototype(this, other);
 return getImplicitPrototype(other);
return  this.toMaybeRecordType().getNativeObjectType(JSTypeNative.OBJECT_TYPE);
return registry.getNativeObjectType(JSTypeNative.TYPE);
 return super. getImplicitPrototype ( otherRecord ) ; }
 return this.getImplicitPrototype;
 return registry.getImplicitPrototype.OBJECT_TYPE);
 return getImplicitPrototype(otherProps);
 return registry.getImplicitType(Native.OBJECT_TYPE);
 return null;
 return registry.getNativeType(JSTypeNative.OBJECT_TYPE);
return  getImplicitPrototype().getNativeObjectType(JSTypeNative.OBJECT_TYPE);
 return registry.getNative(Native.OBJECT_TYPE);
return registry. getNativeObjectTypeImplicitPrototype();
 return registry.getNativeType(Prototype.OBJECT_TYPE);
return registry.getNativeObjectType(JSTypeNative.PLAIN_TYPE);
return registry.getNativeObjectType(JSTypeNative.MULTIPLE);
 return JSTypeUtils.getNativeObjectType(JSTypeNative.OBJECT_TYPE);
 if (isFrozen) { return super.getImplicitPrototype(); }
return registry.getNativeObjectType(JSTypeNative.STRING);
return  getImplicitPrototype ( otherRecord ) ;
return registry.getImplicitObjectType(this);
 return Registry.getType(OBJECT_TYPE);
return registry. getImplicitPrototype ( )
 return super. getImplicitPrototype;
 return super. getImplicitPrototype ( ) ; return null ;
 if (isFrozen) { return super.getImplicitPrototype();
 if (!isFrozen)
return registry.getImplicitObjectType(JSType);
 if (isFrozen) { return true; }
 if (isFrozen) { return super. getImplicitPrototype ( ) ; } return null ;
return registry.getNativeObjectType(JSTypeNative.MULTI_TYPE);
return registry.getNativeObjectType(JSTypeNative.RECORD);
 return registry.getNativeTypeImplicitPrototype(JSTypeNative.OBJECT_TYPE);
 if (isFrozen) { registry.getImplicitPrototype(); }
 return registry.getImplicit(Native.OBJECT_TYPE);
 return super. getImplicitPrototype ( ) ; } return null ;
 return super. getImplicitType ( );
 if (isFrozen) { return super.implicitPrototype(); }
 return super.getImplicitPrototype(_);
 return registry.getNativeObjectType(ObjectType.OBJECT_TYPE);
return registry.getNativeObjectType(JSTypeNative.NODES);
 return (JSTypeNative)registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);
 if (!isFrozen) return false;
 if (this.isObjectType()) {
 if (isFrozen) { return this. getImplicitPrototype ( ) ; } return null ;
 if (isFrozen) { return super.getPrototype(); }
return registry.getNativeObjectType(JSTypeNative.Implicit_Prototype);
 return registry.getNativeType(JSType.OBJECT_TYPE);
return registry.getNativeObjectType(JSTypeImplicitProxy);
return registry.getNativeObjectType(JSTypeNative.ANY_TYPE);
 return super.getImplicitPrototype(Native.OBJECT_TYPE);
 return registry.getImplicit(OBJECT_TYPE);
return registry.getNativeObjectType(JSTypeNative.implicit_type);
 return super.getImplicitPrototype(that);
 return getImplicitPrototype ( this, otherRecord ) ;
 return (JSTypeImplicitType)registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);
 return registry.getNativeImplicitPrototype.OBJECT_TYPE);
 return registry.getType(JSType.OBJECT_TYPE);
 if (this.isRecordType()) {
return registry.getImplicitObjectType(other);
return registry.getNativeObjectType(JSTypeNative.MULTIPLE_PROPERTY);
 if (isFrozen) { return super. getImplicitPrototype ( ) ; return null ;
return registry.getNativeObjectType(JSTypeNative.NODE);
 return getImplicitPrototype(registry);
 return this.prototype.getNativeObjectType(JSTypeNative.OBJECT_TYPE);
return registry.getNativeObjectType(JSTypeNative.MULTIPLE_TYPE);
 if (isFrozen) { return false;
 return super. getImplicitPrototype ( ) ; } return this ;
 return registry.getNativePrototype.OBJECT_TYPE);
 return JSTypeNative.prototype.getNativeObjectType(JSTypeNative.OBJECT_TYPE);
 return super.getImplicitPrototype(properties);
 if (isFrozen) { return this. getImplicitPrototype ( ) ; } if (isFrozen) {
 return this. getImplicitPrototype ( otherRecord ) ; }
 return registry.getNativePrototype(OBJECT_TYPE);
 if ((isFrozen) { return false; }
 return (ObjectType) this;
 return registry.registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);
 return (Object) registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);
 return super.getImplicit ();
return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE). getImplicitPrototype ( ) ;
return registry.getNativeObjectType(JSType.NO_TYPE);
 return this. getImplicitPrototype ( ) ; } return null ;
 return this.toMaybeObjectType;
 return super. getImplicitPrototype ( ). getType ( ) ;
 return this. getImplicitPrototype ( ).getNativeObjectType(JSTypeNative.OBJECT_TYPE);
 return super. getImplicitPrototype ( this, otherRecord ) ;
 return getImplicitType ( );
return registry. getImplicitPrototype ( this ) ;
 if (isFrozen) { return super. getImplicitPrototype ( otherRecord ) ; }
 if (isFrozen) { return this. getImplicitPrototype ( ) ; } if (inferred) {
return registry.getNativeObjectType(JSTypeNative.ImplicitPrototype.class);
 if (isFrozen) { return this. getImplicitPrototype ( ) ; } else if (isFrozen) {
return registry.getNativeObjectType(JSTypeNative.NONE);
return registry.getNativeObjectType(JSTypeNative.MULTIPLE_TYPES);
 if (isFrozen) { return this.type; }
return registry.getNativeObjectType(JSTypeNative.implicitNoPrototype);
 return getImplicitPrototype(this);
 return registry.getNativeImplicitMaybeObjectType(JSTypeNative.OBJECT_TYPE);
return registry.getNativeObjectType(this);
 return (ObjectType) JSTypeNative.registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);
 if (this == otherRecord) {
 return registry.getNativeObjectTypeNative(OBJECT_TYPE);
 JSType registry = getRegistry ( ) ;
 return super.getPrototype);
 return registry.getNativeObjectType(.OBJECT_TYPE);
 return super. getImplicitPrototype ( this ) ; }
 return JSTypeNative.NO_TYPE.getNativeObjectType(JSTypeNative.OBJECT_TYPE);
 return JSType.registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);
 return super. getImplicitPrototype ( ). toMaybeObjectType();
 if (isFrozen) { return null; } if ( isFrozen ) { registry. freeze ( ) ; }
return  registry.getNativeObjectType().implicitType(JSTypeNative.OBJECT_TYPE);
 if (that.isRecordType()) {
 return this. getImplicitPrototype ( ) ; return null ;
return  super.getImplicitPrototype().getType(JSTypeNative.OBJECT_TYPE);
 if (isFrozen) { registry.getImplicitPrototype(properties); }
 return implicitPrototype.getNativeObjectType(JSTypeNative.OBJECT_TYPE);
 if (isFrozen) { return super.implicitPrototype();
 return super.getImplicitType;
 return super. getImplicitPrototype ( ) ; } return this ; }
return registry.getNativeObjectType(JSTypeNative.implicit_prototype);
 if (isFrozen) { return null; } if ( isFrozen ) { registry. freezeObjectType ( ) ;
 if (isFrozen) { return super.getType(); }
 return getImplicitPrototype(that);
 return super.getImplicitPrototype());
 if (isFrozen) { registry.getImplicitPrototype(this); }
 if (isFrozen) { return super.getImplicitType(); }
 return getImplicitPrototype(properties);
 return JSTypeImplicit.getNativeObjectType(JSTypeNative.OBJECT_TYPE);
return  registry.getNativeObjectType().getPrototype(JSTypeNative.OBJECT_TYPE);
 return registry.getNativeImplicitPrototypeOf(JSTypeNative.OBJECT_TYPE);
 return registry.getImplicitObjectType(OBJECT_TYPE);
return  super.getImplicitPrototype().toMaybe(JSTypeNative.OBJECT_TYPE);
 if (isFrozen) { return this. getImplicitPrototype ( ) ; } else if (inferred) {
 return super. getImplicitPrototype ( ) ; return this ;
 if (isFrozen) { return super. getImplicitPrototype ( this, otherRecord ) ;
 return registry.getNativeObjectType(NativeNative.OBJECT_TYPE);
return  super. getImplicitPrototype ( ). get(JSTypeNative.OBJECT_TYPE);
 if (isFrozen) { return null; } if ( isFrozen ) { registry. freezeObjectType ( ) ; }
 return this.type;
 if (isFrozen) { return super. getImplicitPrototype ( ) ; } return this ;
 return registry.getNativeNativeObjectType(JSTypeNative.OBJECT_TYPE);
 return registry.getInternalImplicitObjectType(JSTypeNative.OBJECT_TYPE);
 return null);
return registry.getNativeObjectType(JSTypeNative.MULTIPLE_PROPS);
return  new ObjectTypeImplicitPrototype ( ) ;
return registry.getPrototype();
 if (isFrozen) { return super. getImplicitPrototype ( ) ; return this ;
return  super. getImplicitPrototype ( ). cast(JSTypeNative.OBJECT_TYPE);
 return getPrototype(JSTypeNative.OBJECT_TYPE);
return  super. getImplicitPrototype().getNativeType(JSTypeNative.OBJECT_TYPE);
 return super. getImplicitPrototype ( ) ; } return null ; }
 return super. getImplicitPrototype ( this ) ; } return this ; }
 return (ObjectType) this.registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);
 return Registry.get(OBJECT_TYPE);
return registry.getImplicitObjectType(type);
 return (ObjectType) other;
 return Registry.getNativeObjectType.OBJECT_TYPE);
 if (isFrozen) { return super.implicitType(); }
 return getImplicitPrototype(); } return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);
 return (ObjectType registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);
 return (Node) registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);
 return this. getImplicitPrototype ( ) ; } return this ; }
return registry.getNativeObjectType(JSTypeNative.TYPE_ANY);
 return super.getImplicitPrototype(); registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);
 if (isFrozen) { return null; } if ( isFrozen ) { return this. getImplicitPrototype ( ) ;
 if (isFrozen) { return this. getImplicitPrototype ( ) ; } if (registered) {
 return registry.getTypeImplicitPrototype(JSTypeNative.OBJECT_TYPE);
 if (!isFrozen) { return false;
 if (isFrozen) { return null; } if ( isFrozen ) { return this. getImplicitPrototype ( ) }
return registry. getImplicitPrototype ( this )
 return registry.create(JSTypeNative.OBJECT_TYPE);
return registry.getNativeObjectType(JSTypeProxy);
 return this.getPrototype;
 return super. getImplicitPrototype ( ).getNativeObjectType(JSTypeNative.OBJECT_TYPE);
 if (isFrozen) { return this.getImplicitType(); }
 return getImplicitPrototype;
return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE); return null;
 if (isFrozen) { return null; } if ( isFrozen ) { registry. freeze ( propertyName ) ; }
return registry.getNativeObjectType(implicitPrototype);
return registry.getNativeObjectType(Prototype);
 return this.toMaybeRecordType(); registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);
 if (isFrozen) { return this. getImplicitPrototype ( ) ; } if (isNative) {
 if (isFrozen) { return this. getImplicitPrototype ( ) ; } if (!inferred)
 return this. getImplicitType ( ).getNativeObjectType(JSTypeNative.OBJECT_TYPE);
 return super. getImplicitPrototype ( ). getType ( ). toMaybeObjectType();
return registry.getNativeObjectType(JSTypeNative.MULTI_PROPERTY);
return registry.getNativeObjectType(JSTypeImplicit.TYPE);
 return super. getImplicitPrototype ( ). getType ( ) ; }
 return this.getType ( );
 if (isFrozen) { return null; } if ( isFrozen ) { registry. freeze ( this ) ; }
 if (isFrozen) { return this.getImplicitPrototype(registry); }
 return super. getImplicitPrototype ( ). getType ( ) ; } return null ;
return registry.createObjectType();
return registry.getNativeObjectType(JSTypeNative.PLAIN_PROPERTY);
 return super. getImplicitPrototype ( ). get ( ). getType ( ) ;
 if (isFrozen) { registry.getImplicitPrototype(registry); }
 return getImplicitPrototype().getNativeType(JSTypeNative.OBJECT_TYPE);
 return super.getImplicitType);
 return (ObjectType) otherRecord.getNativeObjectType(JSTypeNative.OBJECT_TYPE);
 return registry.getImplicitPrototypeType(OBJECT_TYPE);
 if (isFrozen) { return this. getImplicitPrototype ( ) ; } else if (isNative) {
 return JSTypeNative.getNativeObjectType(JSTypeNative.OBJECT_TYPE);
 return (ObjectType) thisRecord.getNativeObjectType(JSTypeNative.OBJECT_TYPE);
 return ObjectType.OBJECT_TYPE);
 if (isFrozen) { super.defineType(JSTypeNative.OBJECT_TYPE);
 return registry.getNativeType(.OBJECT_TYPE);
 if (isFrozen) { super.defineType(JSTypeNative.OBJECT); }
return  this. getImplicitType();
 return Registry.get(Native.OBJECT_TYPE);
 if (isFrozen) { return null; } if ( isFrozen ) { return this. toMaybeObjectType ( ) ; }
 return super. getImplicitPrototype ( this ) ; } return null ; }
 if (inferred) {
 return super. getImplicitPrototype ( ). getTypeNode ( ). objectType ;
 return getType(OBJECT_TYPE);
 if (isFrozen) { registry.getImplicitPrototype(otherRecord); }
 return (ObjectType) (Type)registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);
 return this. getImplicitPrototype ( registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);
 return super. getImplicitType ( ).getNativeObjectType(JSTypeNative.OBJECT_TYPE);
 if ((isFrozen)) {
 return super. getImplicitPrototype ( ). getType ( ) ; return null ;
 return getImplicitType(other);
 return JSTypeNative. INSTANCE.getNativeObjectType(JSTypeNative.OBJECT_TYPE);
return registry.getNativeObjectType(JSTypeNative.PLAIN_TYPES);
return  getImplicitPrototype ( this ) ; }
 return this);
return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE) ; } return null ;
 if (isFrozen) { return null; } if (isFrozen) {
 return registry.createType(JSTypeNative.OBJECT_TYPE);
 return JSTypeNativeUtils.getNativeObjectType(JSTypeNative.OBJECT_TYPE);
 return registry.getImplicitPrototypeType(JSTypeNative.OBJECT_TYPE);
 return otherRecord.getNativeObjectType(JSTypeNative.OBJECT_TYPE);
 return (ObjectType) (Object)registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);
return registry.getNativeObjectType(JSTypeNative.NO_TYPE).implicitPrototype();
return registry.getNativeObjectType(JSTypeNative.PLAIN_PROTOCOL);
return registry.getImplicitType(this);
 return registry.getImplicitClassType(JSTypeNative.OBJECT_TYPE);
 return super. getImplicitPrototype ( ). getType ( ). get ( ) ;
return registry. getNativeObjectType ( JSType ;
 return getObjectType(JSTypeNative.OBJECT_TYPE);
 if (isFrozen) { return super.implicitType; }
 return getImplicitType(_);
return registry.getNativeObjectType(JSTypeImplicit.class);
 return getImplicitPrototype() || registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);
return registry.getNativeObjectType(JSTypeNative.MULTI_TYPES);
 return getImplicitPrototype(otherRecord.getNativeObjectType(JSTypeNative.OBJECT_TYPE);
 return registry.getNativeClassType(OBJECT_TYPE);
return registry. getImplicitPrototype ( ;
 return this. getImplicitType ( registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);
 return super. getImplicitPrototype ( ). getType ( propertyName ) ;
return registry.getNativeObjectType(JSTypeNative.NO_TYPE); return null;
 return get(OBJECT_TYPE);
return registry.getNativeObjectType(JSTypeNative.PLAIN_PROTO);
 if (isFrozen) { return this. getImplicitPrototype ( ) ; } else if (!inferred) { return ; }
 return (ObjectType) JSType.registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);
 return JSTypeNativeImplicitType.getNativeObjectType(JSTypeNative.OBJECT_TYPE);
 return registry.getNativeMaybeObjectType(JSTypeNative.OBJECT_TYPE);
 if (isFrozen) { return this. getImplicitPrototype ( ) ; } else if (otherRecord == this) {
 return registry.getTypeNative(OBJECT_TYPE);
return registry.getNativeObjectType(JSTypeNative.ANY);
 return super. getImplicitPrototype ( ). getTypeNode ( ). type ;
 return JSTypeNative.class.getNativeObjectType(JSTypeNative.OBJECT_TYPE);
 return super. getImplicitPrototype ( ). getType ( ). objectType ;
 if (isFrozen) { return this.classType; }
return  super. getPrototype();
 return explicitPrototype.getNativeObjectType(JSTypeNative.OBJECT_TYPE);
 return JSTypeNative registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);
 if (isFrozen) { registry.getImplicitPrototype(objectType); }
 if (otherRecord == this) {
 return getType(Native.OBJECT_TYPE);
 if (isFrozen) { registry.getImplicitPrototype(other); }
 if (isFrozen) { registry.getImplicitPrototype(this, otherRecord); }
return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE).implicitPrototype();
return  this;
 return (ObjectType ObjectType)registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);
 return this.toMaybeType(); registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);
 return super.getType(JSTypeNative.OBJECT_TYPE);
 return (ObjectType.OBJECT_TYPE);
return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE, propertyNode);
 return this.prototype;
return registry.getObjectType(JSTypeNative);
 if (isFrozen) { registry.getImplicitPrototype(JSType other); }
 if (isFrozen) { return null; } if (isFrozen) { return false; }
 if (isFrozen) return;
return registry.getNativeObjectType(JSTypeNative.ImplicitPrototype.TYPE);
 return registry.getObjectType.OBJECT_TYPE);
 boolean isFrozen;
 return Registry.getNative(OBJECT_TYPE);
 if (isFrozen) { registry.getImplicitObjectType(JSTypeNative); }
 return (JSTypeImplicitObjectType)registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);
 return (ObjectType) (void)registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);
return  this. toMaybeObjectType();
 return JSTypeImplicitPrototype.getNativeObjectType(JSTypeNative.OBJECT_TYPE);
 return super. getImplicitPrototype ( ). getType ( ). type ;
 if (frozen) {
return registry.getNativeObjectType(JSTypeNative.NO_TYPE, propertyNode);
return registry.getImplicit();
 if (isFrozen) { registry.getImplicitPrototype(JSType this); }
 if (!initialized)
 return JSTypeNative.registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);
 return super. getImplicitPrototype ( ) ; } return this ; } ;
 if (isFrozen) { return this. getImplicitPrototype ( ) ; } else if (this.isNative()) {
 if (isFrozen) { return this.getImplicitPrototype() ; } else {
 return Registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);
return registry.getNativeObjectType(JSTypeNative.MULTIPLE_OBJECT);
 return get (Prototype.OBJECT_TYPE);
 return JSType.OBJECT_TYPE);
 if (isFrozen) { super.defineType(JSTypeNative.NO_TYPE); }
 return super. getImplicitPrototype ( ). getType ( ). toMaybeType ;
 if (isFrozen) { registry.getImplicitPrototypeInternal(this); }
return  this ; }
 return registry.getPrototype(JSTypeNative.OBJECT_TYPE);
 return this.type.getNativeObjectType(JSTypeNative.OBJECT_TYPE);
 if (isFrozen) { return null; } if ( isFrozen ) { registry. freeze ( this ) ; } }
 return (JSTypeImplicitProxy)registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);
 return this.toMaybeType ( );
 return super. getImplicitPrototype ( this ) ; } return this ; } ;
return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE). toMaybeObjectType ( ) ;
 if (isFrozen) { registry.getImplicitPrototype(this); } else {
 if (isFrozen) { return null; } if (isFrozen) { return this ; }
 return (ObjectType) otherRecord;
 return (Object) this;
 return registry.create(OBJECT_TYPE);
 return JSTypeUtil.getNativeObjectType(JSTypeNative.OBJECT_TYPE);
 return (ObjectType) ( (ObjectType)registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);
 if (isFrozen) { return null; } if ( isFrozen ) { super.defineProperty ( propertyName ) ; }
 return thisRecord.getNativeObjectType(JSTypeNative.OBJECT_TYPE);
return registry.getNativeObjectType(JSTypeNative.NO_TYPE, getType ( ));
return registry.getNativeObjectType(JSTypeNative.NO_TYPE, this.objectType);
return registry.getNativeObjectType(JSTypeNative.MULTIPLE_OBJECTTYPE);
return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE) ; } return this ;
 return getImplicitType(();
 return getImplicit ();
return  this.getPrototype();
 if (isFrozen) { return this. getImplicitPrototype ( ) ; } else if (this.isObjectType())
return registry.getNativeObjectType(JSTypeNative.NO_TYPE, propertyName);
 return create(OBJECT_TYPE);
return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE, getPropertyType(this), propertyNode);
 return _registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);
return registry.getNativeObjectType(JSTypeNative.MULTIPLE_PROTOCOL);
return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE). getImplicitPrototype ( this ) ;
return registry.getNativeObjectType("ImplicitPrototype");
 return super. getImplicitPrototype ( ) ; } }
 return super. getImplicitPrototype ( ). getType ( ) ; return this ;
 return super.implicitType;
 return this.toMaybeRecordType.getNativeObjectType(JSTypeNative.OBJECT_TYPE);
return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE). withImplicitPrototype ( ) ;
return registry.getNativeObjectType(JSTypeNative.NO_TYPE); } return null ;
 return super. getImplicitPrototype ( this ) ; } return this ; } }
return registry.getNativeObjectType(ImplicitPrototypeNative);
 return JSTypeRegistry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);
 return getImplicitType.OBJECT_TYPE);
return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE). getImplicitPrototype ( ) ; }
return registry.getNativeObjectType(JSSTypeImplicit);
 return registry.getType(.OBJECT_TYPE);
 return getImplicitType(OBJECT_TYPE);
 return JSTypeNativeImplicitProxy.getNativeObjectType(JSTypeNative.OBJECT_TYPE);
 return (JSTypeObjectType) _registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);
 return super.getType();
return registry.getNativeObjectType(JSType.TYPE);
return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE, propertyName);
return registry. createImplicitPrototype();
 return registry.getType(Native.OBJECT_TYPE);
 return (void)registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);
return registry.getNativeObjectType(JSType());
 return Registry.getType(JSTypeNative.OBJECT_TYPE);
return registry ; }
 if (isFrozen) { return null; } if ( isFrozen ) { registry. freeze ( this ) ; } else
return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE). getImplicitType ( ) ;
 return (String) registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);
 if (isFrozen) { return this.type(); }
 if (isFrozen) { registry.getImplicitPrototype(); } else
 return (T) registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);
return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE) ; } return isFrozen ;
 if (isFrozen) { return this.getImplicitPrototype(); } else
 if (isFrozen) return false; else
return registry.getNativeObjectType(JSTypeNative.MISSING);
 if (isFrozen) { return null; } if ( isFrozen ) { return this. getImplicitPrototype ; } }
 return ((ObjectType)registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);
 return registry.createObjectType(JSTypeNative.OBJECT_TYPE);
return registry.getNativeObjectType(JSTypeNative.NO_TYPE); return this;
 return (Type) this;
return registry.getNativeObjectType(type);
 return registry.getImplicitTypeType(JSTypeNative.OBJECT_TYPE);
return registry.getNativeObjectType() ;
return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE), getPropertyType(otherRecord);
return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE). getType ( ) ;
return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE, implicitPrototype);
 return (JavaObjectType)registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);
 if (isFrozen) { return super.implicitPrototype;
 if (isFrozen) { return this.toMaybeObjectType(); } else
 return create(JSTypeNative.OBJECT_TYPE);
return registry.getNativeObjectType(JSTypeAny);
return registry.getNativeObjectType(JSTypeNative.NO_TYPE); } return this ;
 return Registry.getObjectType(JSTypeNative.OBJECT_TYPE);
 super.getImplicitPrototype(JSTypeNative.OBJECT_TYPE);
 return ObjectType.registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);
return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE), getPropertyType(otherRecord.properties);
 return registry.getNativeObjectType(this,JSTypeNative.OBJECT_TYPE);
 return ((JSType)registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);
return registry.getImplicitObject();
 return super. getImplicitPrototype ( this ) ; } return this ; } {
 return JSType.getNativeObjectType(JSTypeNative.OBJECT_TYPE);
return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE, getPropertyType(propertyName)) ;
 return (Native.OBJECT_TYPE);
return  this.objectType;
 return get(Native.OBJECT_TYPE);
return registry.getImplicitClass();
return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE). getImplicitPrototype ( propertyName);
return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE, getPropertyType(this)) ;
 return (Type.OBJECT_TYPE);
 return (Object) other;
return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE, getPropertyType(this).type);
 return ObjectType.ANY;
return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE) ; } return this ; }
return registry.getNativeObjectType(JSTypeNative.PLAIN_PROP);
return registry.getNativeObjectType(JSTypeImplicitNative);
 return (ObjectType) _registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);
 return toMaybeType();
 return this. getImplicitPrototype ( ) ; } }
return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE). getImplicitPrototype ( other ) ;
 if (isFrozen) { super.defineType(JSTypeNative.OBJECT_TYPE());
 return type(JSTypeNative.OBJECT_TYPE);
return registry.getNativeObjectType(JSTypeNative.MULTI_PROP);
return registry.getNativeObjectType(JSTypeNative.implicitNo_Type);
return registry.getNativeObjectType(prototype);
return registry.getNativeObjectType(JSTypeNative.MULTIPLE_TYP);
 return getImplicitType(JSTypeNative.OBJECT_TYPE);
return registry. getImplicitPrototype ;
 return registry.createNativeObjectType(JSTypeNative.OBJECT_TYPE);
 if (isFrozen) { return false };
 return objectType;
 if (isFrozen) { return this. getImplicitPrototype ( ) ; } return null ; }
return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE), getPropertyType(this).type;
 return JSTypeUtility.getNativeObjectType(JSTypeNative.OBJECT_TYPE);
return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE). asMaybeObjectType ( ) ;
return registry.getNativeObjectTypeImplicitType();
return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE). getImplicitPrototypeOf ( ) ;
 return registry.getGenericObjectType(JSTypeNative.OBJECT_TYPE);
return registry.getNativeObjectType(JSTypeNative.Implicit_PROTO);
 return toMaybeType(_);
 return (Type) other;
return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE), getPropertyType(this).prototype;
 if (isFrozen) { registry.getImplicitPrototype(objectType); } else
 if (!frozen)
 return getImplicit(OBJECT_TYPE);
 return super.get(JSTypeNative.OBJECT_TYPE);
return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE) ; } return registry. get ( ) ;
return registry.getObject();
 return registry.getImplicitTypeNative(JSTypeNative.OBJECT_TYPE);
return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE); return this;
return registry.getNativeObjectType(JSTypeNative.NO_TYPE());
return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE), getPropertyType(this) ;
 return getNativeObjectType.OBJECT_TYPE);
 return new ObjectType(_);
 return getType(_);
 return registry.getDefaultType(JSTypeNative.OBJECT_TYPE);
return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE), getPropertyType(this).getType();
return registry.getNativeObjectType(JsSTypeImplicit);
return registry.getNativeObjectType(other);
return registry.getNativeObjectType(JSTypeImplicit());
 return JSType_registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);
 return getType ();
return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE), getPropertyType(this).type);
return registry.getNativeObjectType(JSTypeType);
 if (isFrozen) { return this.class; } else
 if (isFrozen) { return this.type; } else
return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE), getPropertyType(otherRecord.type);
return registry.getNativeObjectType(JSTypeNative.PROP);
 return otherProps.getNativeObjectType(JSTypeNative.OBJECT_TYPE);
return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE) ; } return null ; }
return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE), getPropertyType(other);
 if (isFrozen) { return false; } else
return registry.getNativeObjectType(JSTypeNative.CLASS);
 return isFrozen;
 if (isFrozen) { return this. getImplicitPrototype ( registry ) ; } else { }
return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE), getPropertyNode(other);
return registry.getNativeObjectType(ObjectType);
 if (isFrozen) { return false; } }
return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE, getType ( ));
 return getPrototype(OBJECT_TYPE);
 return (this);
return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE) ; } return getImplicitPrototype();
 boolean isFrozen = false;
return registry.type;
return registry.getNativeObjectType(null);
 boolean isFrozen();
 return getNative(OBJECT_TYPE);
 return registry.getNativeClassType(JSTypeNative.OBJECT_TYPE);
return registry.createType();
 return asType(JSTypeNative.OBJECT_TYPE);
return registry.getImplicitPrototype(); }
return registry.getNativeObjectType(JSType();
return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE) ; return this ; }
 return toType(JSTypeNative.OBJECT_TYPE);
return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE). toMaybeObjectType ( ) ; }
 return JSTypes.registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);
return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE), getPropertyNode(this);
return registry.getNativeObjectType(JSTypeImplicit); }
 return inferType(JSTypeNative.OBJECT_TYPE);
return registry.prototype;
return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE). toMaybeType();
 return super.registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);
 return reg.getNativeObjectType(JSTypeNative.OBJECT_TYPE);
 return getNativeType(JSTypeNative.OBJECT_TYPE);
 return objectType);
return registry.createObject();
 return Type.OBJECT_TYPE);
return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE) return null;
 if (isFrozen) { return true; } else
 if (isFrozen) { return true; } }
 return newType(JSTypeNative.OBJECT_TYPE);
 if (!isFrozen) { return false; } }
 if (!rozen)
 return getType (();
return registry.getTypeImplicitType();
return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE) + this;
return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE) || null;
 return (type);
return registry.getNativeObjectType(JSType.ANY);
 return getPrototype.OBJECT_TYPE);
return registry.getNativeObjectType(JSSType);
 return TypeNative.OBJECT_TYPE);
return registry.type();
 if (isFrozen) { return this.type; };
 return typeOf(OBJECT_TYPE);
return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE) ; } return this ; } }
 if (isFrozen) return();
 return (AbstractType.OBJECT_TYPE);
 return toMaybe(OBJECT_TYPE);
 return type(OBJECT_TYPE);
return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE) ; } return this ; } ;
 return objectType.getNativeObjectType(JSTypeNative.OBJECT_TYPE);
 return!registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);
 return superclass.getNativeObjectType(JSTypeNative.OBJECT_TYPE);
 return as(JSTypeNative.OBJECT_TYPE);
return registry.getNativeObjectType(ImplicitType);
 return NT(OBJECT_TYPE);
 if (!isInitialized)
return registry.createObjectType(this);
 return thisType;
return registryImplicitType;
return registryImplicit;
return registry.getNativeObjectType(JSTypeNative.MULTIPLE_TYPES); }
return registryObjectType;
return registry.getNativeObjectType(JSTypeNative.MULTIPLE_PROPERTY); }
 if (!broken)
return registry.getNativeObjectType(JavaObjectType);
 return thisRecord;
 return nativeType.getNativeObjectType(JSTypeNative.OBJECT_TYPE);
 return getNative(JSTypeNative.OBJECT_TYPE);
 return type;
return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE_ANY);
return registryType;
 if (!static)
return registry.getNativeObjectType(JSTypeNative.KNOWN);
 return propertyType);
 return defaultType;
 return type);
return registry.getNativeObjectType(JSTypeNative.THIS);
 return convert(OBJECT_TYPE);
 return (null);
return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE).prototype;
return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE) ; return registry ;
return registry.getNativeObjectType(ImplicitProto);
return registry.getNativeObjectType(Implicit.class);
 return createType(JSTypeNative.OBJECT_TYPE);
return registry.getNativeObjectType(objectType);
return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE, null);
 return Reflector.OBJECT_TYPE);
return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE) + type;
return registry.getNativeObjectType(Type);
 return Types.OBJECT_TYPE);
 return of(JSTypeNative.OBJECT_TYPE);
return registry.getNativeObjectType(Object.class);
return registry.getNativeObjectType(this.type);
 return "null;
return  otherRecord ;
 return Node.OBJECT_TYPE);
return registryImplicit
return registry.objectType();
 return Object.OBJECT_TYPE);
return registry.create();
return registry.class;
 return "(OBJECT_TYPE);
return registry.getImplicitType;
 return factory.registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);
return registry.getNativeObjectType(Prototype());
 return Generic.OBJECT_TYPE);
 return other);
 return Registry.registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);
return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE) ; }
 super.getNativeObjectType(JSTypeNative.OBJECT_TYPE);
return registry.getNativeObjectTypeImpl();
 return type;
 return super().getNativeObjectType(JSTypeNative.OBJECT_TYPE);
 super(JSTypeNative.OBJECT_TYPE);
return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE).prototype();
return registryObject;
return registry.getNativeObjectType(this, other);
 return this;
 return parentType.getNativeObjectType(JSTypeNative.OBJECT_TYPE);
 return *registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);
return registry.getNativeObjectType(thisRecord);
 super.registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);
return registry.getNativeObjectType(JSTypeNativeImpl);
 return "OBJECT_TYPE);
 return other;
 return null;
 return.getNativeObjectType(JSTypeNative.OBJECT_TYPE);
 return that;
 if (!initialized).
return registry.getNativeObjectType(JSTypeNative); }
 return cast(JSTypeNative.OBJECT_TYPE);
 return that);
 Registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);
return registry.getNativeObjectTypeType();
return registry.getNativeObjectTypeClass();
 super(OBJECT_TYPE);
 return "(JSTypeNative.OBJECT_TYPE);
return registry.getNativeObjectType(); }
 returns (JSTypeNative.OBJECT_TYPE);
 return super.getNativeObjectType(JSTypeNative.OBJECT_TYPE);
 return this.getNativeObjectType(JSTypeNative.OBJECT_TYPE);
return registry.getNativeObjectType(JSTypeNativeImplicit
 type=registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);
return registry.getNativeObjectType(JSTypeNative).;
return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE) this;
return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE) ; };
 Return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);
 } }
 } {
 }
