if (data.length !=  n) {
if (data.length!= n)
 if (length != n) {
if (data.length)
if (data!= n) {
if (data.length != n && n!= 0) {
if (data.length) {
 if (data.length!= n*n) {
 if (n!= 0) {
if (data!= n)
 if (instance dimension!= n) {
 checkVectorDimensions(n); } if(data.length != n) {
if  ( n!= data. length ) {
 if (data.length!==n) {
 checkVectorDimensions(n); } else
 checkVectorDimensions(n); }
if (data.length != n)  { throw IllegalArgumentException(n); }
 if (data.length!= n || n!= n) {
 checkVectorDimensions(n); if (data.length != n) {
if (data.length != n)  { throw IllegalArgumentException(); }
if (data.length != n && n!= -1) {
 checkVectorDimensions(data, n); } else
if  (n!= data.length)
 if (data.length!= -n) {
 if (data.length!= (n)*n) {
 if (n!=n) {
 if (data.dimension!= n) {
if (data.length != n)  { throw new IllegalArgumentException(n);
 checkVectorDimensions(data); } if (data.length != n) {
 checkVectorDimensions(n); } else if(data.length != n) {
 if (!n) {
if (data.length != n)  { throw new IllegalArgumentException(); }
 checkVectorDimensions(data.length, n); } else
 if (n!= data.length)){
if (data.length!= n) { return false; }
if (data.length!= n) return false;
 if (.length != n) {
if (data.length != n && data.length!= -1) {
if (data.length != n)  { throw IllegalArgumentException(n);
if (data.length !=  n) { throw IllegalArgumentException; }
if (data) {
 if (data.length!= * n) {
 checkVectorDimensions(); } if (data.length != n) {
 if (data.length({0})!= n) {
if (data.length != n || n!= 0) {
 if (dimension!= n) {
if (data.length !=  n) { throw IllegalArgumentException();
if (data.length != n && data.length!= n + 1) {
if (data.length != n && data.length!= n) {
 if (data.length!= n && n!= n) {
 checkVectorDimensions(); if (data.length != n) {
 if (data.length!= n + 1) {
 if (data.length!= 1*n) {
if (data.length !=  n) { throw IllegalArgumentException;
if (data.length!= n) throw IllegalArgumentException;
 checkVectorDimensions(data, n); }
 throw IllegalArgumentException. createIllegalArgumentException ( "vector dimension mismatch" ) ;
 if (data.dimensions!= n) {
 if ( n == 0 ) { return true ; } else { throw new IllegalArgumentException ( n ) ; }
 if (data.length * 2!= n) {
if (data.length!= n) { throw MathRuntimeException();
 if (data.length*n!= n) {
 if (data.length!= n)){
 checkVectorDimensions(data); if (data.length != n) {
 checkVectorDimensions(n);
 checkVectorDimensions(data.length, n); }
if (data!= null)
 if (n) {
 if (data.dimensionality!= n) {
 throw IllegalArgumentException. createIllegalArgumentException ( "Vector dimension mismatch" ) ;
 if (data.length ( )!= n) {
 checkVectorDimensions(data.length); } else
if (data.length!= n) throw MathRuntimeException;
 checkVectorDimensions(v.getDimension()); } else
 checkVectorDimensions(); } else
 if ( n == 0 ) { return true ; } else { throw new IllegalArgumentException ( "Invalid dimension." ) ; }
 checkVectorDimensions(v); } if (length != n) {
 if ( n == 0 ) { return true ; } else { throw new IllegalArgumentException ( "Invalid dimension" ) ; }
 checkVectorDimensions(this.getDimension()); } else
if ( isNaN ( data. length ) ) {
if (data.length!= n) { throw MathRuntimeException;
if (data.length != n && data.length!= 0) {
 throw IllegalArgumentException. createIllegalArgumentException ( "Vector dimension mismatch." ) ;
 if (data.length!= data.length*n) {
 if ( n == 0 ) { return true ; } else { throw new IllegalArgumentException ( "Vector dimension mismatch" ) ; }
 checkVectorDimensions(n);
 checkVectorDimensions ( n ) ; } protected void checkVectorLength ( n ) {
if (data.length != n && data.length!= n && n!= -1) {
if (data.length != n || data.dimensions!= n) {
 checkVectorDimensions(n); } public boolean isNaN() { if (data.length == n) { return true; } else
if (data.length!= n == 0) {
if (n!= 0 && data.length!= n) {
if (data.length!= n) throw IllegalArgumentException();
 if ( n == 0 ) { return true ; } else { throw new IllegalArgumentException ( "Vector dimension mismatch." ) ; }
 checkVectorDimensions(n); } if (length != n) {
 if ( n == 0 ) { return true ; } else { throw new IllegalArgumentException ( "Invalid dimension" ) ;
 if (data!= null && data.length!= n) {
 if ( n == 0 ) { return true ; } else { throw new IllegalArgumentException ( "Invalid vector dimension." ) ; }
 if (dimension!= -n) {
 checkVectorDimensions(data.length(), n); } else
 checkVectorDimensions ( n ) ; } protected void checkVectorLength ( ) {
 if ( n == 0 ) { return true ; } else { throw new IllegalArgumentException ( "Invalid dimension." ) ;
if  ( n!= data. length ) return false;
 checkVectorDimensions(); } else if(data.length != n) {
 if (data.length + n!= n) {
 if ( n == 0 ) { return true ; } else { throw new IllegalArgumentException ( "Invalid dimension." ) }
if (data.length != n)  { throw new IllegalArgumentException ( ) ;
if  ( n!= dimension ) {
 checkVectorDimensions(n)); } if(data.length != n) {
 if (data.length + 1!= n) {
 if (n!= 0)){
 if ( n == 0 ) { return true ; } else { return false ; } protected void checkVectorLength(n) {
 if (data.length!= n * 2) {
 checkVectorDimensions(data)); } if (data.length != n) {
 if (data.length!== n*n) {
 if (data.length == (int)n) {
 checkVectorDimensions(data.length, n); } private void checkVectorDimensions(int n) {
 checkVectorDimensions(data.length, n); } public void checkVectorDimensions(int n) {
 if ( n == 0 ) { return true ; } else { return false ; } } private void checkVectorLength ( ) {
 if ( n == 0 ) { return true ; } else { return false ; } protected void checkVectorLength ( ) {
 if (n!= n)){
 if (data.length(i)!= n) {
 if (data.length!== n || n!= n) {
 if (n!= 1) {
if (data.length!= n) throw MathRuntimeException();
 if (data.length!= dimension.length(n) {
 if (data.length(0)!= n) {
if (data.length != n) { throw IllegalArgumentException.class;
 throw IllegalArgumentException. createIllegalArgumentException ( "dimension mismatch" ) ; } else
 if (data.length!= n || dimension!= n) {
 if (== n) {
 checkVectorDimensions(data.length, n); } public void checkVectorLength(int n) {
 if (data.length!== n && n!= n) {
if  (n!= 0)
 if (data.length(n)!= n) {
 if(!= n) {
if (data.length < n) { return false; }
 checkVectorDimensions(n)); if (data.length != n) {
 checkVectorDimensions(data); } if (length != n) {
 checkVectorDimensions(n if (data.length != n) {
 if (data[0]!= n) {
 if (data.length!= 0xn) {
 if ( n == 0 ) { return false ; } else if ( n == 1 ) { return true ; } else { return false;
 checkVectorDimensions ( n ) ; } public void checkVectorLength ( int n ) {
 checkVectorDimensions(data.length, n); } private void checkVectorLength(int n) {
if (data.length != n || n == -1) {
 checkVectorDimensions(data); if (data!= n) {
 checkVectorDimensions(n); } public boolean isNaN() { if (data.length == n) { return false; } else
 if ( n == 0 ) { return true ; } else { throw IllegalArgumentException. createCause ( ) ;
 checkVectorDimensions ( n ) ; } public void checkVectorDimensions(int n) throws Exception {
 checkVectorDimensions(data.length!= n) {
 if ( n == 0 ) { return true ; } else { throw new IllegalArgumentException ( "Vector dimension mismatch" ) ;
 checkVectorDimensions(this, n); } else
 if (n!= -1){
 if ( n == 0 ) { return true ; } else { throw IllegalArgumentException ( "Invalid dimension" ) ;
 if ( n == 0 ) { return true ; } else { throw IllegalArgumentException ( "Invalid dimension." ) }
 if ( n == 0 ) { return true ; } else { throw new IllegalArgumentException ( "Vector dimension mismatch." ) }
 checkVectorDimensions(n); } } if(data.length != n) {
 checkVectorDimensions(data, n); } public void checkVectorLength(int n)
 checkVectorDimensions(data, n); } protected void checkLength() {
 checkVectorDimensions(this.getDimension()); }
if (data.length != n && n!= data.length) {
 checkVectorDimensions(v, data.length != n) {
 if ( n == 0 ) { return true ; } else { throw new IllegalArgumentException ( "Vector dimension mismatch" ) }
 if (data.length == n*n) {
 if ( n == 0 ) { return true ; } else { throw new IllegalArgumentException ( "n" ) ;
 if ( n == 0 ) { return true ; } else { throw IllegalArgumentException ( "Invalid dimension" ) }
if (data.length != n && data.length!= -n) {
if (data.length!= n) return true;
if (isNaN(data.length), n) {
 if (data.length!= {0}, n) {
 if (n==n) {
 checkVectorDimensions(data.length, n); } else {
if (data.length!= n) { return true; }
 if (data!= null) if (data.length != n) {
 if (data.length!= vector.length(n) {
 if ( n == 0 ) { return true ; } else { throw IllegalArgumentException. create ( ) ; }
if (data.length != n)  { throw new IllegalArgumentException(""); }
if (data.length != n)  { throw new IllegalArgumentException(n });
if (data.length != n) { return false; } else {
 if (data.length!= expected.length(n) {
 if (n!= 0 && n!= -1) {
if (data.length != n && data.length!= 0 && n!= -1) {
 if (data.length!= data.length(n) {
 if data.length != n) {
 throw IllegalArgumentException. createIllegalArgumentException ( "vector dimension mismatch" ) ; }
 checkVectorDimensions(data.length, n); } } else
 checkVectorDimensions(n)); } else if(data.length != n) {
 checkVectorDimensions(data, n) ;
 if (data.length == 0) if (data.length != n) {
 if (data.length!= (n*n) {
 checkVectorDimensions(n); } *
 throw IllegalArgumentException. createIllegalArgumentException ( "dimension mismatch" ) ; }
 checkVectorDimensions(data); } else
 checkVectorDimensions(n)){
if (data.length != n) { return true; } else {
 checkVectorDimensions(data, n); } public void checkLength() {
 throw IllegalArgumentException. createIllegalArgumentException ( "array dimension mismatch" ) ; }
 if ( n == 0 ) { return true ; } else { throw IllegalArgumentException ( "n" ) ;
 if (data.length!= -1) {
 checkVectorDimensions(data, n); } *
 checkVectorDimensions(data, n); } public void checkVectorLength ( n ) {
 checkVectorDimensions ( n ) ; } public void checkVectorDimensions(int n) throws IllegalArgumentException { return n ; }
 if (data.length!= expected dimension) {
 checkVectorDimensions(data, n); } public void checkVectorLength(n)
if (data.length != n || data.dimension!= n) {
 if (n == 0 || data.length != n) {
if (data.length != n && data.length!= n * n) {
 if (n!= data.dimensions()){
if (data.length != n || data.length == 0) {
if (data.length != n || data.length == -1) {
if (isNaN(data.length, n) {
 checkVectorDimensions(data); } else if(data.length != n) {
 return false ; } if (data.length != n) {
 checkVectorDimensions ( n ) ; } protected void checkVectorLength(data)
 if ( n == 0 ) { return true ; } else { throw IllegalArgumentException ( "n" ) }
 if (data.length==n) {
 if (n!= dimensionality){
 if (data!= null) { if (data.length != n) {
 throw IllegalArgumentException. createIllegalArgumentException ( "Vector dimension mismatch" ) ; }
 validateVectorDimensions ( n ) ;
if (data.length != n && data.length!= n - 1) {
if (data.length != n && n!= 0 && data.length!= -1) {
 checkVectorDimensions(v); if (data.length != n) {
 (data.length != n) {
 throw IllegalArgumentException. createIllegalArgumentException ( "missing dimension" ) ; }
 checkVectorDimensions(data.length, n) ;
 checkVectorDimensions(data.length, n); } else { checkVectorDimensions(data); } else
if (data.length != n && data.length!= n * 2) {
 if (data[n]!= n) {
 checkVectorDimensions(data, n); } protected void checkLength(data)
if (data.length != n) { throw IllegalArgumentException {}
 if (isNaN(data.length))){
 checkVectorDimensions(data, n); } public void lengthCheck() {
 if (data.length!= {0} n) {
 checkVectorDimensions(data.length, n); } *
if (data!= null) {
 if (n!= vectorSize) {
 checkVectorDimensions(data, data.length != n) {
 checkVectorDimensions(v); if (.length != n) {
 if (n!= data.length + 1) {
 if ( n < 0 ) { return false ; } else {
if (data.length != n) { throw IllegalArgumentException.class();
if (data.length!= {0} + n) {
 checkVectorDimensions(n)); } else
 throw IllegalArgumentException. createIllegalArgumentException ( "Vector dimension mismatch." ) ; }
if (data).length!= n) {
 checkVectorDimensions(data); if data.length != n) {
 if (data.length!= * n)){
if  (n!= n)
 if (data length!= n) {
 checkVectorDimensions(data.length); }
if (data.length != n && data.length!= n && n == -1) {
 checkVectorDimensions(n); } public boolean isNaN() { if (data.length == n) { return true; } }
if (data.length != n || data.length!= n + 1) {
 checkVectorDimensions(data, n); } else {
if (data.length != n || data.length == 0 || n == -1) {
if (data.length != n && data.length!= * n) {
 if (n!= dimensionality)){
if (data.length != n || vector.length!= n + 1) {
 if (data.length!= (n) n) {
if (data.length!= n) { throw MathRuntimeException {}
 checkVectorDimensions(data, n); } } else
 checkVectorDimensions(v.getDimension()); } } else
 if (data dimension!= n) {
if (data.length!= n) return false; else
if (data.length != n && data.length!= {0} n) {
if (data.length != n) { throw IllegalArgumentException(); } else
 checkVectorDimensions(data, n); *
 if (n!= dimensionSize){
 if (!data.length == n) {
 checkVectorDimensions(this.getDimension()); } } else
 checkVectorDimensions(n); if data.length != n) {
 checkVectorDimensions(); } if (length != n) {
 checkVectorDimensions(data.length, n); }
 checkVectorDimensions(n); } public boolean isNaN() { if (data.length == n) { return false; } }
 if (size!= n) {
 checkVectorDimensions(data if data.length != n) {
 if (n > 0 && data.length != n) {
 checkVectorDimensions(data.length, n); } public void checkVectorLength(int n) { *
if (data.length != n || n!= -1) {
if (data.length != n || n == 0) {
 checkVectorDimensions(dimension); } else if(data.length != n) {
 checkVectorDimensions(v if data.length != n) {
 if (data == null) if (data.length != n) {
if (data.length != n || data.length!= n) {
if (data.length != n || n < 0) {
 checkVectorDimensions(); }
 checkVectorDimensions()); if (data.length != n) {
 checkVectorDimensions(data.length, n); } } else {
 checkVectorDimensions(data, n); } protected void checkLength(data);
 checkVectorDimensions(data.length, n); } else { checkVectorDimensions(data); } }
if (data.length != n && data.length == -1) {
 checkVectorDimensions(n) }
if (data.length != n || data.length!= n || n == -1) {
 if (this.data.length != n) {
 checkVectorDimensions(n); }
 if (i.length!= n) {
 if (n!= data.dimensions)){
 checkVectorDimensions(); if data.length != n) {
 checkVectorDimensions(data, n); } public void checkVectorLength(n);
if (data.length != n && vector.length!= -1) {
if (data.length != n && n!= data.size) {
 if (Data.length!= n) {
if (data.length != n && data.length!= n + 1.0) {
if (data.length != n && data.length!= n && n > -1) {
 if (v.data.length != n) {
 checkVectorDimensions(v); if data.length != n) {
 checkVectorDimensions ( n ) ; } protected void checkVectorLength(data);
 return false ; if (data.length != n) {
 checkVectorDimensions() if data.length != n) {
if (data.length != n && data.length!= (n * n) {
if (data.length != n || data.length!= n && n!= -1) {
if (data.length != n || n!= data.size) {
if (data.length!= n) return true; else
if (data.length != n && data.dimension!= n) {
 if (n!= data.length - 1){
 checkVectorDimensions(n()); } if(data.length != n) {
if (data.length != n || n!= data.dimension) {
 checkVectorDimensions(v.getDimension()); } *
 if (dimensionality!= n) {
 if (n!= data.length - 1)){
 checkVectorDimensions(data, n); }
 if (instanceDim!= n) {
 checkVectorDimensions(data.length, n); } else { else
if (data.length != n && data.length!= n + -1) {
 checkVectorDimensions(); } *
if (data.length != n || data.length!= n * n) {
if (data.length != n || data.length!= n * 2) {
if (data.length != n && data.length!= 0xFFFFFFFD) {
 if (dimension!==n) {
if (data.length != n && data.length!= {0}, n) {
if (data!= vectorData) {
 if (data.length!= n) return ;{
 assert (data.length == n); if(data.length != n) {
 if ( n!= 0 ) { return false ; } else {
 return true ; if (data.length != n) {
 if (0!=n) {
if (data.length != n || data.length!= -1) {
 checkVectorDimensions(data, n); } protected void check(n)
 checkVectorDimensions(v.getDimension()); } else
 if (data.data.length != n) {
 checkVectorDimensions(); } } if(data.length != n) {
 if (data.length == 0 ||data.length != n) {
 if (n!= data.length) *{
if (data.length != n || data.length!= n || n!= -1) {
if (data.length < n) {
 if (!==n) {
if (data.length != n && data.length!= n * 2.0) {
 checkVectorDimensions() } else
 checkVectorDimensions(data.length, n); } else
if (data.length != n || vector.length!= -1) {
if (data.length != n || data.length!= 0 || n!= -1) {
if (data.length != n || vector.length!= n * 2) {
if (data.length != n || data.length!= {0} n) {
if (data.length != n || data.length!= (n * n) {
if (data.length != n && n == -1) {
if (data.length != n && n!== 0) {
 checkVectorDimensions(v, data, n); }
 checkVectorDimensions(v); if ($.length != n) {
if (data.length != n && n > -1) {
if (data.length != n && data.length!= 0xFFFFFFF) {
if (data.length!= n).length {
 checkVectorDimensions(data, n); } else
if (data.length!= n) return false; *
if (data.length != n && data.length!= n * 2*n) {
if (data.length != n || data.length!= {0}, n) {
 if (data!= null && (data.length != n) {
if (data.length!= n) { *
if (data.length < n) return false; else
 if (dimension mismatch(n) {
 checkVectorDimensions(data, n); *
 checkVectorDimensions(data, n); } protected void check(n);
if (data.length != n || data.length!= n * 2.0) {
 checkVectorDimensions(data.length, n); *
 checkVectorDimensions(data.length, n); } else { *
 checkVectorDimensions()); } if(data.length != n) {
if (data.length != n || n < -1) {
 checkVectorDimensions(data.length, n); } else { }
if (isNaN(data.length) true) {
if (data.length != n || n!== 0) {
if (data.length != n || data.length!= 0xFFFFFFFD) {
if (data.length != n || data.length!= n + 1.0) {
if (data.length !=  n) { return false;
if (data.length mismatch)
 if (n!= 0 && (data.length != n) {
 catch (Exception e){
if (data.length != n || data.length!= n * 2*n) {
if (data.length != n || n < 0d) {
if (data.length != n || data.length!= n * vector size) {
if (data.length != n || data.length!= n + -1) {
 if (!match) {
 if ($.length != n) {
if (data.length != n)  { throw IllegalArgumentException.class
if (data.length > n) {
 checkVectorDimensions();
if (data.length!= n
if (data.length != n)  { throw IllegalArgumentException.*
 checkVectorDimensions((data.length != n) {
 return false ; } else if (data.length != n) {
 if ((!= n) {
 return true ; } else if (data.length != n) {
if (data.length != n || data.length!= 0xFFFFFFF) {
if (data!= n)) {
 if (n!= 0 && * data.length != n) {
if (data.length !=  n) throw MathRuntimeException {
 checkVectorDimensions(v, data, n); *
 checkVectorDimensions(n); } *
if  (n!= data.length())
if  (n!= data.length) { *
 assert n == 0;
 checkVectorDimensions();
if ( data. length!= n ) { return ; }
 if (0 || data.length != n) {
 if (!equal) {
if  n!= 0 {
 if (== n)){
 checkVectorDimensions(n); *
if  ( data. length!= n ) return ; *
 assert n == 0; if(data.length != n) {
 return n ; } else
 if (0 + data.length != n) {
 if (!data.length != n) {
if  (null) {
if (data.length != n || vector.length!= -n) {
if (data.length != n && n!= 1) {
if ( n < 0 ) { return false ; } *
if (data.length != n || n!= 1) {
if (data.length!= n) return null; else
 if (data[n].length != n) {
if (data < n) {
 checkVectorDimensions() {
if ( n!= data. length ) { return ; }
 checkVectorDimensions(); }
 checkVectorDimensions(); *
if (data!=)
 assert n == 0;
 if (NaN.data.length != n) {
 if ((data.length!= n) {
if ( n < 0 ) { return false ; } else
if (data == null) {
if  (!match)
 if (data.dimensions().length != n) {
if  (negative)
 if (data[0].length != n) {
 if (v!= null &&data.length != n) {
if  (error)
 checkVectorDimensions() } if(data.length != n) {
if  (n)
if (data.length > n)
 catch (Exception e)){
if (data.length < n)
 throw exception if (data.length != n) {
 if (int n) {
 if (0!= n&&data.length != n) {
 if (*.length != n) {
 catch (e){
if ( mismatch ) {
 if (test) {
if (data.length)) {
 if (NaN || data.length != n) {
if (data.length != n && n!= " ") {
 return true ; } if(data.length != n) {
 assert n == 1;
if (data.length != n && n > 0) {
 if (error) {
if  (missing)
if (negative) {
if (data.length!= n)) { *
 if (!sync) {
if (n!= size) {
 return n ; } if(data.length != n) {
if (data!= 0)
if (data.length == n
if (data.length != n && n < 0) {
 if (1 + data.length != n) {
 if (int i + data.length != n) {
if (data.length!= n))
if (data == null)
 checkVectorDimensions() }
 if (* data.length != n) {
 return ; } if(data.length != n) {
if (data!= vector)
if (data.length!= dimension) { *
 if (== 0) {
 assert n == n;
 } else if(data.length != n) {
if (data.length != n)  return null;
 return null ; } if(data.length != n) {
 if (expectedData.length != n) {
 if (instance.dimension!= n) {
 if (!match)){
 return 0 ; } if(data.length != n) {
 return 0 ; } else
 if (variance.data.length != n) {
 * if (data.length != n) {
 }else{
 return n ; }
if (data.length != n &&! strict) {
 if (!this.data.length != n) {
 if (thisVector.data.length != n) {
 if (instance dimension.length != n) {
 n!= 0;
 if (!!= n) {
 if (!) {
 if (*!= n) {
if (data). {
 if (instanceData.length != n) {
 n!= n;
if (false)
 if (self.data.length != n) {
if (data).length
 n!= dimension;
if (data == null
 if (expected data.length != n) {
 if (instance dimension*data.length != n) {
 return false ; }
 return true ; }
if (data.length != n) return true; *
if  (!)
 if (actualData.length != n) {
 if (in data.length != n) {
 if (this.*data.length != n) {
if (data.length))
if (data.length != n ||! strict) {
if (data.length != n ||! check) {
 return 0 ; }
if (data.length != n ||!test) {
if (data.length != n &&!error) {
if (data.length != n ||!sync) {
 if (*) {
if  not {
if (data.length != n &&!test) {
if (data.length())
 *else{
 (n) {
if (data.length != n &&! check) {
 if (0*data.length != n) {
if (data.length !=  0) {
if (data.length !=  dimension) {
 } }else{
if (data.empty())
 if () {
if  ( )
if  not,
 return null ; }
 if (!length != n) {
if  (?)
 do nothing;
 } else
 try { *
if (data.length).
if (!= 0) {
 return n ;{
 return false;{
 if ($data.length != n) {
 if (-n) {
 do nothing }
 return falseelse{
 *
 if ((length != n) {
 do not check
 do { *
 switch (n) {
if (data.length != n).length()
if (data.length !=  0)
if (debug) {
if (check) {
 * if ((data.length != n) {
 * if (!data.length != n) {
if (data.length != n) *
 } elseIf(data.length != n) {
if (data.length != n). {
 else
 } else while(data.length != n) {
 * while(data.length != n) {
 * If(data.length != n) {
 * assert(data.length != n) {
if (data.length <= n) {
