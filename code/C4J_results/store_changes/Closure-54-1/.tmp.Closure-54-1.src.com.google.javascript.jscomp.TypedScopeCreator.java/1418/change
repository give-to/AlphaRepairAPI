return ; }
return ; } }
return ; } } }
 if (info == null) {
return ; } } } }
return ; } qVar = null ;
 if (! qVar. isTypeInferred ( ) ) {
 if (! qVar. isTypeInferred ( ) )
 If (info == null) {
 if (ignoreExpression)
 if (qVar == null) {
return ; } } } } }
return ; } qVar = null ; }
 if (ignore) {
 if (qVar. isTypeInferred ( ) ) {
 if (! qVar. isTypeInferred ( expression ) ) {
return ; } qVar = qVar ;
 If (qVar == null) {
return ; } if ( info == null ) return ;
 if (! qVar. isTypeInferred ( ) ) { inferred = false ;
 if (! qVar. isTypeInferred ( ) ) { inferred = true ;
 if (! qVar. isExpression ( ) ) {
return ; } } else { qVar = null ;
 if (! scope. hasScope ( scope ) ) { return ; } if (! scope. hasVar ( qVar ) ) {
 inferred = false;
 if (ignoreExpression) {
 if (qVar == null ||! qVar. isTypeInferred()) {
return ; } qVar = F. prototype ;
return ; } if ( info == null ) {
 if (! scope. hasScope ( scope ) ) { return ; } if (! scope. hasVariable ( qVar ) ) {
return ; } var = qVar ;
 if (info!= null) {
 if (! scope. hasScope ( scope ) ) { return ; } if (! scope. hasVar ( scope ) ) {
 if (! qVar. isExpression ( ) ) { inferred = false ;
 if (qVar == null || qVar == scope) {
 if (! qVar. isExpression ( ) ) { inferred = true ;
 if (! scope. isScope ( scope ) ) { return ; } if (! scope. isScope ( qVar ) ) {
 if (! scope. hasScope ( scope ) ) { return ; } if (! scope. hasScope ( qVar ) ) {
 if (! scope. isScope ( ) ) { return ; } if (! scope. isExternScope ( ) ) {
 if (! scope. isScope ( scope ) ) { return ; } if (! scope. isLocal ( scope ) ) {
 if (! scope. isMemberScope ( scope ) ) { return ; } if (! scope. isMemberScope ( parent ) ) {
return ; } } } } } }
 if (qVar. isTypeInferred() == false) {
return ; } qVar. init ( ) ;
 if (! qVar. isTypeInferred ) {
 if (! scope. isScope ( scope ) ) { return ; } if (! scope. isScope ( scope ) ) {
 if (! scope. isMemberScope ( scope ) ) { return ; } if (! scope. isMemberScope ( scope ) ) {
return ; } qVar = parent ;
 if (! qVar. isTypeInferred()) { return; } if (scope == null) {
 if (qVar == null || qVar. isStatic()) {
 if (! scope. isScope ( scope ) ) { return ; } if (! scope. hasScope ( ) ) {
 if (! scope. isScope ( scope ) ) { return ; } if (! scope. isScope ( ) ) {
 if (! scope. hasScope ( scope ) ) { return ; } if (! scope. isScope ( ) ) {
 if (! scope. hasScope ( scope ) ) { return ; } if (! scope. hasScope ( scope ) ) {
 if (info == null) { inferred = true;
 if (! scope. hasScope ( ) ) { return ; } if (! scope. hasScope ( ) ) {
 if (! scope. isScope ( ) ) { return ; } if (! scope. isExtern ( ) ) {
 if (! scope. hasScope ( scope ) ) { return ; } if (! scope. hasScope ( ) ) {
 if (! scope. hasScope ( scope ) ) { return ; } if (! scope. clear ( ) ) {
 if (! scope. hasScope ( ) ) { return ; } if (! scope. isScope ( ) ) {
 if (qVar == null || qVar == undefined) {
 if (! scope. isMemberScope ( scope ) ) { return ; } if (! scope. isMemberScope ( info ) ) {
 if (! qVar. isTypeInferred()) { return; } if (!scope == null) {
 if (! scope. hasScope ( ) ) { return ; } if ( scope. isExtern ( ) ) {
 If (info == null) { inferred = true;
 if (! scope. hasScope ( ) ) { return ; } if (! scope. hasVar ( ) ) {
 F.prototype = null;
return ; } qVar = pVar ;
 if (! qVar. isTypeInferred()) { return; } if (! scope!= null ) {
 if (! qVar. isTypeInferred ) { return ; } if ( inferred == true ) {
 if (! qVar. isType ( ) ) {
 if (! qVar. isExpression ) {
return; } else { qVar = null ; }
 If (ignoreExpression)
return ; } } } } } } }
return ; } qVar = f. prototype ;
 if (info == null) { inferred = false;
 if (! scope. contains ( qVar ) ) { return ; } if ( scope. empty ( ) ) {
return ; } } else { return ; }
 if (! qVar. isTypeInferred()) { return; } if (ignoreExpression)
 if (qVar. isTypeInferred() == true) {
 if (! qVar. isTypeInferred ( ) ) { } }
 if (! qVar. isTypeInferred()) { return; } if (! inferred ) {
return ; } qVar = f. parent ;
 if (! qVar. isTypeInferred()) { return; } if (ignore) {
 if (! qVar. isTypeInferred()) { return; } if (!scope) {
 f.prototype = null;
 if (! qVar. isTypeInferred ) { return ; } if (! inferred ) {
 if (explicit) {
 return ;
 if (qVar == null) { inferred = true;
 if (! qVar. isTypeInferred ( ) ) { return ; } if ( ignoreComments ) {
 F.prototype = qVar;
 if (qVar == null ||! qVar. isStatic()) {
 If (info!= null) {
 If (ignore) {
 inferred = true;
 if (qVar == null) { inferred = false;
 if (! qVar. isTypeInferred ( ) ) { inferred = true ; }
 if (ignoreCode) {
 if (! qVar. isTypeInferred ( ) ) { inferred = false ; }
 if (qVar == null ||! qVar. isFunction()) {
 if (! qVar. isExpression ( ) ) { inferred = true ; }
 if (! qVar. isTypeInferred ( ) ) { }
return ; } var = null ;
 qVar = null;
 if (!ignore) {
 if (! scope. isScope ( scope ) ) { return ; } if (! scope. isGlobal ) {
return false ; } } } }
 if (! scope. hasScope ( scope ) ) { return ; } if (! scope. isGlobal ) {
 } }
return false ; } } }
 if (! qVar. isTypeInferred ( ) ) { return ; } } } } } }
 if (! qVar. isTypeInferred ( ) ) { return ; } } } } }
 return false ; } }
 if (! scope. hasScope ( scope ) ) { return ; } if (! scope. hasVar ( qVar ) ) { }
 if (qVar. isTypeInferred ( ) ) { }
 if (! qVar. isTypeInferred ( ) ) { return ; } } } }
return ; } } break ;
 if (! qVar. isTypeInferred ( ) ) { return ; } } } } } } }
 if (! qVar. isTypeInferred ( ) ) { return ; } } }
return ; } } } break ;
 if (! qVar. isTypeInferred()) { return; } if (ignoreExpression){
 if (! scope. contains ( qVar ) ) { return ; } if ( scope == null ) { } }
 } else { qVar = null;
 if (! qVar. isStatic ) {
 return; } else { qVar = null;
 if (! qVar. isTypeInferred ( ) ) { return ; } } } else
 if (! qVar. isTypeInferred ) { return ; } } } } }
 if (! scope. isScope ( scope ) ) { return ; } if (! scope. isLocal ( scope ) ) { }
 if (! qVar. isTypeInferred ) { return ; } } } } } }
 if (! qVar. isTypeInferred ( ) ) { return ; } } else
 return false ; }
 if (! scope. hasScope ( scope ) ) { return ; } if (! scope. hasVariable ( qVar ) ) { }
 return ; } } else { inferred = true;
return ; } } continue ;
 F.prototype = { };
 } } else { qVar = null;
 return ; } } } else { inferred = true;
 If (qVar == null) return; else
 throw new RuntimeException();
 if (qVar == null) { } }
 return ; } } else { inferred = false;
 if (ignore()) {
 return ; } } else { qVar = parent;
 If (qVar == null) { } }
 throw new RuntimeException(); }
 return null ; } }
 if (!expression) {
 F.prototype = undefined;
 } } }
 continue;
 f.prototype = undefined;
 if (ignoreExpression())
 if (qVar == null) return; else
 return null ; }
 if (info == null) { } }
 if (ignore)
 return; } else { inferred = true;
 If (info == null) { } }
 } } } }
 return; } return;
 } } else { inferred = true;
 if (info == null) { } else
 if (info!= null) { } }
 return; } else { inferred = false;
 if (qVar == null) { }
return ; } continue ;
 return; } else { return;
 if (info == null) { }
 } } else { qVar = parent;
 This is fine.
 If (qVar == null) {}
 F.prototype = "...";
 } } else { qVar = scope;
 if (!ignore)
 continue ; }
 } else { return;
 } continue ;
 qVar = undefined;
 } return;
 if (ignore())
 return - 1;
 }
 This happens.
 } } } }
return false ;
 return ; break;
 return ; continue;
 } }
 This means we
 } } }
 } } else
 return null;
 This is fine
 return true;
 } else
 }
...
 else
