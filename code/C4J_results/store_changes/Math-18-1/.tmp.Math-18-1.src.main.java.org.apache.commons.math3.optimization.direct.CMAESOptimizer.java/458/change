 break generationLoop;
 break;
 break generationLoop;
break  generationLoop; } iterations ++ ;
break  generationLoop; } lastResult = historyBest ;
break generationLoop; } lastResult = historyWorst ;
break  loop;
break  generationLoop; } iterations += 1 ;
 break generationLoop; }
 if (historyWorst-historyBest < stopTolHistFun) { break generationLoop; }
break  generationLoop; } }
 if (iterations > 2 && historyWorst-historyBest < stopTolHistFun) {
 break generationLoop; } } }
 if (historyWorst-historyBest < stopTolHistFun) { break generationLoop;
 if (iterations > 2 && historyWorst-historyBest < stopTolFun) {
break  generationLoop; } lastResult = current ;
 if (historyWorst-historyBest < stopTolHistFun) { historyWorst-historyBest = historyBest;
 for (iterations > 2 && historyWorst-historyBest < stopTolHistFun) {
 if (iterations > 2 && historyWorst-historyBest < stopTolHistFun) { break; }
break generationLoop; } historyBest = historyWorst ; }
 if (historyWorst-historyBest < stopTolHistFun) { break; }
 while (iterations > 2 && historyWorst < historyBest < stopTolHistFun) {
 for (iterations > 2 && historyWorst-historyBest < stopTolFun) {
 if (iterations > 2 && historyWorst-historyBest > stopTolFun) {
 if (historyWorst-historyBest > stopTolHistFun) { break generationLoop; }
 if (historyWorst-historyBest < stopTolHistFun) { historyBest = historyWorst-historyBest;
 if (historyWorst-historyBest < stopTolHistFun) { historyWorst-historyBest = historyBest; }
 if (historyWorst-historyBest < stopTolHistFun) { historyWorst-historyBest = historyWorst;
 if (historyWorst-historyBest < stopTolHistFun) { historyBest = historyWorst ;
 historyWorst-historyBest = historyBest;generationLoop;
break  generationLoop; } bestValue = historyBest ;
 if (iterations < 2 && historyWorst < historyBest) {
 if (iterations > 2 && historyBest < stopTolHistFun) {
break  generationLoop; } else { break generationLoop ;
 if (iterations > 2 && historyWorst < historyBest) {
 if (historyWorst-historyBest < stopTolHistFun) { historyBest = historyWorst ; }
 if (historyWorst-historyBest > stopTolHistFun) { break generationLoop;
break  generationLoop; } iterations = 2 ;
 historyBest = historyWorst - historyBest ;
 if (historyWorst-historyBest < stopTolHistFun) { historyWorst-historyBest++; }
 break generationLoop; } if (historyBest < historyWorst-historyBest < stopTolHistFun) { break generationLoop;
 if (historyWorst-historyBest < stopTolHistFun) { historyWorst-historyBest = 0;
 if (iterations > 2 && historyWorst-historyBest < stopTolHistFun) break generationLoop;
 historyBest = historyWorst ;
 historyWorst = historyBest ; historyBest = historyBest ;
break  generationLoop; lastResult = historyBest ;
break generationLoop; } historyWorst = historyBest ;
 if (iterations > 2 && historyWorst-historyBest > stopTolHistFun) { break; }
 if (historyWorst-historyBest < stopTolHistFun) { historyBest = historyWorst-historyBest; }
 if (historyWorst-historyBest < stopTolHistFun) { historyWorst-historyBest = historyWorst; }
 if (iterations == 2 && historyBest < stopTolHistFun) {
 if (historyWorst-historyBest > stopTolHistFun) { break; }
break generationLoop; } lastResult = historyBest ; break ;
 if (iterations > 2 && historyWorst-historyBest < historyBest) {
 if (iterations > 2 && historyWorst-historyBest < 0) {
 if (iterations > 2 && historyBest < stopTolFun) {
 historyWorst-historyBest = historyWorst;
break  generationLoop; } historyBest = historyBest ;
 while (iterations > 2 && historyWorst < historyBest < stopTolFun)
 break generationLoop; } break generationLoop;
 if (historyWorst-historyBest < stopTolHistFun) { historyWorst-historyBest = historyBest; } }
 if (iterations > 2 && historyWorst-historyBest < stopTolFun)
 if (iterations > 2 && historyWorst-historyBest < stopHistFun) {
 if (historyWorst-historyBest < stopTolHistFun) { historyWorst-historyBest++;
break generationLoop; } historyWorst = historyWorst ;
 historyWorst = historyBest ; historyBest = worstFitness ;
 if (iterations > 2 && historyWorst > historyBest) {
 historyWorst = historyBest ; historyBest = bestFitness ;
 if (iterations == 2 && historyWorst < historyBest) {
break generationLoop; } historyBest = historyWorst ;
 if (iterations > 2 && historyWorst-historyBest > historyBest) {
 historyBest = historyWorst ; } else {
 if (iterations > 2 && historyWorst-historyBest) {
 if (iterations > 2 && historyWorst-historyBest > 0) {
 historyWorst - historyBest = stopTolHistFun ;
 break generationLoop; } if (historyBest < historyWorst-historyBest < stopTolHistFun) { break; }
 if (iterations > 2 && historyWorst-historyBest < 0)
 if (iterations < 2 && historyWorst-historyBest < 0) {
 if (historyWorst-historyBest < stopTolHistFun) { historyWorst-historyBest;
break  generationLoop; } iterations -= 2 ;
 if (historyWorst-historyBest < stopTolHistFun) { historyWorst-historyBest = null;
 historyWorst-historyBest = historyBest;
 break generationLoop; } iteration ++ ;
 historyBest = historyWorst;generationLoop;
 if (historyWorst-historyBest < stopTolFun) { break; }
 historyBest = historyWorst ; breakgenerationLoop;
 if (historyWorst-historyBest < stopTolHistFun) { historyBest = worstBest ;
 if (historyWorst-historyBest < stopTolHistFun) { historyWorst-historyBest }
 if (historyWorst < historyBest < stopTolHistFun) { historyWorst-historyBest = 0;
 if (historyWorst-historyBest < stopTolHistFun) { historyBest = historyWorst ; } }
break generationLoop; } bestValue = historyWorst ;
 if (iterations < 2 && historyWorst < 0) {
 historyWorst-historyBest = historyBest - bestFitness;
break generationLoop; } else { break generationLoop ; }
break generationLoop; } lastResult = historyBest ; } }
 if (iterations < 2 && historyWorst-historyBest < 0)
 while (iterations > 2 && historyWorst < historyBest < stopTolHistFun) { }
 historyWorst = -generationLoop;
 break generationLoop; } break ;
 historyWorst = historyBest - historyBest ; } else {
 historyBest = historyWorst-generationLoop;
 break loop; } if (isMinimize && historyWorst-historyBest < stopTolHistFun) { break loop; } else
 while (iterations > 2 && historyWorst > historyBest < stopTolHistFun) { }
break  generationLoop; } iteration += 1 ;
 break loop; } if (isMinimize && historyWorst-historyBest < stopTolHistFun) { break loop; } }
 historyWorst = historyBest ; } } else {
 if (iterations > 2 && historyWorst-historyBest < stopTolHistFun) { }
 break iterationLoop; } lastResult = historyBest;
 break generationLoop; } else {
 historyWorst = historyBest ; historyBest = bestValue ;
break generationLoop; } else { break generationLoop ; } }
break  generationLoop; } else { break ; }
 break loop; } if (historyBest < historyWorst) { historyWorst-historyBest = stopTolHistFun; } }
 break loop; } if (isMinimize && historyWorst < historyBest < stopTolHistFun) { break loop; } }
 break loop; } if (isMinimize && historyWorst < historyBest < stopTolHistFun) { break loop; } else
 if (iterations > 2 && historyWorst-historyBest > 0)
break  generationLoop; } iterations = 1 ;
 break generationLoop; } iterations -- ;
 historyWorst = historyBest ; historyBest = worstHistory ;
 historyWorst-historyBest = historyBest-generationLoop;
break  generationLoop; } bestValue = fitness ;
 historyBest = historyWorst - historyBest;generationLoop;
 historyBest = historyBest;generationLoop;
 historyBest = historyBest ;
 if (iterations < 2 && historyWorst < best) {
break  generationLoop; } lastResult = null ;
 if (historyWorst-historyBest < stopTolHistFun) { } }
 historyWorst-historyBest = historyWorst; }
 historyWorst-historyBest = 0;generationLoop;
 break generationLoop; break;
 break iterationLoop; } break generationLoop;
 historyBest = historyWorst - 1 ;
 historyWorst-historyBest; breakgenerationLoop;
 historyWorst-historyWorst; breakgenerationLoop;
 break generationLoop; } continue ;
 historyWorst-historyBest = historyBest++generationLoop;
 break iterationLoop; } break iterationLoop;
 if (iterations > 2 && historyBest < stopTolHistFun) { }
 if (iterations > 2) {
 historyWorst - historyBest = worstFitness ; }
 break loop; } break generationLoop;
 break generationLoop; iterations = 2 ;
 historyWorst - historyBest = bestFitness ; }
 break generationLoop; } } else {
 historyWorst = historyWorst ; breakgenerationLoop;
 break;
 historyWorst = worst;generationLoop;
 historyBest = historyBest-generationLoop;
 break generationLoop; } else { continue generationLoop;
 historyWorst-historyBest = 1;generationLoop;
 break generationLoop; } iterations = -1;
 break generationLoop; } continue generationLoop;
 break generationLoop; } } break generationLoop;
 break generationLoop; }
 break generationLoop; continue;
 historyWorst-historyBest++; breakgenerationLoop;
 historyBest = historyWorst ; } breakgenerationLoop;
 break 2*generationLoop;
 historyWorst = historyBest;generationLoop;
 break iterationLoop; } iterations ++;
 historyWorst = historyBest - bestFitness ; }
 break ; } break generationLoop;
 historyBest = bestFitness ;
 break generationLoop; } else { break loop;
 historyBest = historyWorst - historyBest ; }
 historyBest = bestValue ;
 historyWorst = 0;generationLoop;
 historyWorst-historyBest=generationLoop;
 historyBest = worstFitness ;
 historyWorst-historyBest = historyBest ; }
 break iterationLoop; } iterations = -1;
 historyWorst = historyBest ;
 historyBest = historyWorst ; } }
 generationLoop;
 break Loop;
 break; }
 break iterationLoop; } break;
 historyBest = historyWorst ; }
 break generationLoop; } else { continue loop;
 break iterationLoop; break;
 break generationLoop; } else { break;
 break generationLoop; } } break;
 continue generationLoop;
 break iterationLoop; continue;
 historyBest = worstValue ;
 historyWorst = historyWorst ; }
 break loop generationLoop;
 return break generationLoop;
 if (iterations > 2) { }
 break iterationLoop; } }
 break generationLoop; } }
 historyBest = worstBest ;
 break generationLoop();
 historyWorst += -generationLoop;
 break iteration;
 break iterationLoop; }
 break iterationLoop;
 historyWorst=generationLoop;
 break(generationLoop;
 continue;
 return generationLoop; }
 continue generationLoop; }
 if (continue) {
 continue loop;
 break generationLoop2;
 break generationLoop; } } else,
 historyWorst = ++generationLoop;
 historyWorst --;generationLoop;
 iterationLoop = false ;
 return generationLoop;
 historyWorst++generationLoop;
 continue generationLoop;
 break generationLoop;;
 continue generationLoop; }
 iterationLoop;
 break iterationLoop;
 historyWorst-generationLoop;
break  GenerationLoop; }
 continue; }
 break 2-generationLoop;
 iterationLoop;
 continue 2*generationLoop;
 break 2+generationLoop;
 continue;
 historyWorst+=generationLoop;
 break 1-generationLoop;
 historyWorst+generationLoop;
 iterationLoop();
break  generationLoop();
break  ; }
break  GenerationLoop;
 return;
 do {
 break
 break-generationLoop;
 break ++generationLoop;
 }
break generationLoop(); }
break generationLoop. }
 return ++generationLoop;
 continue
 return
 }
 #
 {
