break  generationLoop;
 break;
break generationLoop; } }
 bestValue = current ; } else {
 break generationLoop;
 bestFitness = current ; bestValue = current;
break generationLoop; } else { break generationLoop; }
break generationLoop; } } }
 bestFitness = current ; } else {
 bestValue = current ; bestFitness = current;
 bestValue = current ; } } else {
break generationLoop; } else { break generationLoop ;
 bestValue = current ; breakgenerationLoop;
 bestFitness = current ; break generationLoop;
 bestValue = current ; }
 bestValue = current ; break ;
break generationLoop; } else { break generationLoop ; } }
 bestValue = current ;
 bestValue = current ; bestFitness ; breakgenerationLoop;
 lastResult = current ; } } else {
 bestValue = current ;
 bestValue = current ; } } } else {
break  generationLoop; break generationLoop;
break  generationLoop; }
 bestValue = current ; break ; }
 break generationLoop; } break generationLoop;
 bestFitness = current ; } } else {
break generationLoop; } } else { break generationLoop ; }
break generationLoop; } else { bestValue = current ; }
 bestFitness = current ; } } } else {
 lastResult = current ; } else {
break generationLoop; } } else { break generationLoop ;
break  generationLoop; } iteration ++ ;
 bestValue = current ; bestFitness = current ;
break  generationLoop; } iterations ++ ;
break  generationLoop; bestValue = current ; }
 bestValue = current ; } else { bestValue = new PointValuePair ( bestFitness, - bestFitness ) ;
 bestFitness = current ; } if ( lastResult == null ) {
 bestFitness = current ; } else { bestFitness = - bestValue ;
break  generationLoop; } bestValue = current ;
 bestFitness = current ; } else { bestFitness = - bestFitness ;
 lastResult = current ; } } } else {
break generationLoop; } bestFitness = current ;
 break generationLoop; } if (current == bestValue) { bestFitness = current ; } else {
 bestValue = current ; } }
 break generationLoop; } if (lastResult == null) {
break  generationLoop; } iterations += 1 ;
 bestFitness = current ; } if ( isMinimize ) { bestFitness = current ; } } else {
 bestValue = current ; break ; } } else {
 break generationLoop; } if (current == lastResult) {
 bestFitness = current ; } else { bestFitness = - bestFitness ; } } else {
 bestValue = current ; bestResult = current;
break generationLoop; } bestValue = current ; }
 bestValue = current ; break ; } else {
 bestValue = current ; } else { bestValue = current ; } } } } else {
 bestFitness = current ; } if (current == bestFitness) { bestFitness = -bestFitness ;
 bestFitness = current ; } if ( isMinimize ) { bestValue = current ; } else { bestValue = current ;
 bestFitness = current ; } if ( isMinimize ) { bestFitness = - bestFitness ; }
 bestFitness = current ; } if ( isMinimize ) { bestValue = current ; } } } else {
 bestFitness = current ; } if ( isMinimize ) { bestFitness = - bestFitness ; } else {
 bestFitness = current ; } if ( isMinimize ) { bestFitness = current ; } } } else {
 bestValue = current ; } else { breakgenerationLoop;
 current = new PointValuePair(current, lastResult); if (current == null) {
 break generationLoop; } if (current == null) {
 break generationLoop; } if (lastResult == current) {
break  generationLoop; bestValue = current ;
 break generationLoop; } if (current == bestValue) { bestFitness = current ; } } else {
break generationLoop; } bestFitness = current ; }
 break generationLoop; } if (current == bestFitness) {
 bestFitness = current ; } if ( isMinimize ) { bestValue = current ; } else { bestResult = current ;
break generationLoop; bestFitness = current ; }
 bestValue = current ; } else { bestValue = current ; } } } else {
 bestValue = current ; } else { bestValue = new PointValuePair ( bestValue ) ;
 bestFitness = current ; } if ( isMinimize ) { bestFitness = - bestFitness ; } }
 bestValue = current ; } else { bestValue = current ; } if ( bestValue ) {
 break generationLoop; } if (current == -bestFitness) {
 bestFitness = current ; } else { bestFitness = - bestFitness ; } } } } else {
 bestFitness = current ; } if ( lastResult == - 1 ) {
 lastResult = current ; bestFitness = current;
 bestValue = current ; } else { bestValue = - bestValue ;
 bestFitness = current ; } if (current == bestFitness) { bestFitness = -bestValue ;
 bestValue = current ; break ; } } } else {
 bestValue = current ; } else { bestValue = current ; } if ( bestValue > lastResult ) {
 bestValue = current ; } else { bestValue = current ; } if ( bestValue == null ) {
 bestResult = current ; } else {
 bestFitness = current ; } else { bestFitness = worstFitness ;
 current = new PointValuePair(current, current); } if ( current == null ) {
 bestValue = current ; } else { bestValue = current ; } } if ( bestValue ) {
 bestFitness = current ; } if ( isMinimize ) { bestValue = current ; } else { bestValue = null ;
 bestFitness = current ; break ;
 bestValue = current ; } if ( bestValue ) {
 bestValue = current ; } else { bestValue = new PointValuePair ( bestFitness, - bestFitness ) ; }
 bestValue = current ; } else { bestValue = current ; } if ( bestValue == null )
 bestValue = current ; } else { bestValue = new PointValuePair(bestValue, bestResult);
 bestValue = current ; } else { bestValue = current ; } if ( bestValue == lastResult ) {
 bestValue = current ; } else { bestValue = - bestFitness ;
 bestValue = current ; } else { bestValue = current ; } if ( bestValue < lastResult ) {
break  generationLoop; } else { break ; }
 break generationLoop; } if (current == bestValue) { bestFitness = current ; } }
 bestFitness = current ; } }
 bestFitness = current ; } if ( bestFitness ) {
 bestFitness = current ; } else { bestFitness = current ;
 break generationLoop; } if (current == bestValue) { bestFitness = -bestFitness ;
 bestFitness = current ;
 break iterationLoop; } break generationLoop;
 current = new PointValuePair(current, lastResult); } if (! convergence ) {
break  generationLoop; } break ;
 break generationLoop; } if (current == bestValue) { bestValue = current ; }
 bestFitness = current ; } else { bestFitness = - bestFitness ; } } else { bestFitness = current ;
break  iterationLoop; } else { break generationLoop ;
 bestValue = current ; } else { bestValue = null ; } } } } else {
 bestFitness = current ; } if ( isMinimize ) { bestFitness = current ; } if (continue) {
 bestValue = current ; } else { bestValue = current ; } if ( bestValue > optimum ) {
 bestFitness = current ; } if ( isMinimize ) { bestValue = current ; } else { best = current ;
 bestValue = current ; } } } } else {
 bestFitness = current ; } else { bestFitness = - bestFitness ; } } else { bestFitness = null ;
 bestValue = current ; } breakgenerationLoop;
 bestValue = current ; bestFitness ; continuegenerationLoop;
 bestValue = current ; } else { bestValue = new PointValuePair (bestValue); }
 bestValue = current ; } else { bestValue = null ;
 break generationLoop; } if (lastResult!= current) {
 bestValue = current ; continue ; }
 current = current ; bestFitness = lastResult;
 bestValue = current ; } else { bestValue = null ; } } } else {
 bestFitness = lastResult ;
 bestValue = current ; break ; } breakgenerationLoop;
 current = new PointValuePair(current, lastResult); } if (! converge ) {
 bestResult = current ; }
 bestFitness = current ; break ; } else {
break  generationLoop; } iterations = - 1 ;
break  generationLoop; } iterations = 0 ;
 bestFitness = current ; } if ( isMinimize ) { bestFitness = - bestFitness ; } } }
 bestFitness = current ; } else { bestFitness = current ; }
 bestValue = current ; break generationLoop; } else { bestValue = current ; } }
break  generationLoop; } continue ;
 bestFitness = current ; continue generationLoop;
 bestValue = current ; continue ;
 bestFitness = current ; } if ( isMinimize ) { bestValue = current ; } else { break ; }
 lastResult = current ; bestFitness ; breakgenerationLoop;
break  iterationLoop; } }
 bestValue = current. value ;
 bestFitness = current ; } else { bestFitness = current ; } if ( bestFitness > bestValue ) { break ; }
 bestValue = current ; break ; } }
 bestFitness = current ; } if ( isMinimize ) { bestFitness = - bestFitness ; break ; }
break  generationLoop; } break ; }
 break loop;
 lastResult = current ; breakgenerationLoop;
 bestFitness = current ; } else { bestFitness = current ; } if ( bestFitness < bestValue ) { break ; }
 break generationLoop; } if (current == best) {
 bestValue = current ; } else { bestValue = current ; }
 bestFitness = current ; break ; } else { bestFitness = current ; } } else { bestFitness = current ; } }
 bestFitness = current ; iteration ++;
 bestFitness = current ; } else { bestFitness = current ; } }
 break generationLoop; }
break  generationLoop; } } } }
 bestValue = current ; iterationLoop=generationLoop;
 lastResult = current ; } }
 bestResult = current;
break  iterationLoop; } } }
 bestFitness = current ; break loop;
break  generationLoop; } break ; } } }
 bestValue = current ; } else { bestValue = current ; } }
 bestFitness = current ; break ; } else { bestFitness = current ; } } else { bestFitness = null ; } }
 bestFitness = current ; } breakgenerationLoop;
 bestValue = current ; } else { bestValue = new PointValuePair ( bestValue, bestFitness ) ; } } }
 lastResult = current;
 bestFitness = current ; } else { bestFitness = null ; }
 bestValue = current;generationLoop;
 bestValue = current ; bestResult = null;
 bestFitness = current ; } } else { bestFitness = current ; }
 bestValue = current ; } } }
 bestFitness = current ; return lastResult;
 break iterationLoop; break generationLoop;
 bestFitness = current ; } else { bestFitness = current ; } if ( bestFitness < - bestFitness ) { }
 bestValue = current ; }
 bestValue = lastResult;
 bestValue = current ; } } breakgenerationLoop;
break  generationLoop; break ; }
 lastResult = current ; break ; } }
 bestFitness = current ; bestValue ; breakgenerationLoop;
 bestValue = current ; break ; } } breakgenerationLoop;
 bestValue = current + 1;
 bestFitness = current ; iterationLoop=generationLoop;
 bestResult = current ; } }
 bestValue = current ; break loop;
 bestValue = current ; } else { bestValue = null ; }
 bestFitness = current ; }
 bestFitness = current ; } else { bestFitness = current ; } } }
 bestValue = current ; iteration ++;
 break generationLoop();
 bestFitness = current;generationLoop;
break  ; } iteration ++ ;
 bestValue = current ; } else { bestValue = current ; } } }
 break ; } break generationLoop;
 break; }
 bestValue = current - best;
 bestValue = current ; } else { bestValue = 0 ; }
 lastResult = current;generationLoop;
 bestResult = current;generationLoop;
 bestFitness++; breakgenerationLoop;
break  ; } iterations ++ ;
 bestValue = current ; } else { break ; } }
 bestValue = current ; break ; } } }
 convergence = true ; }
 break iteration;
 bestValue = current ; iterationLoop = ++generationLoop;
 bestValue = current ; continuegenerationLoop;
 break iterationLoop; continue;
 bestValue = current ; break ; } continuegenerationLoop;
 convergenceCheck (current);
 bestValue = current ; } continuegenerationLoop;
 break generationLoop; } }
 break iterationLoop; break;
 break iterationLoop;
 break generationLoop; break;
break  iterationLoop; }
 bestFitness = current ; } continuegenerationLoop;
 break;
 continue generationLoop;
 lastResult = -generationLoop;
 bestValue = current ; } } continuegenerationLoop;
 return optimum;
 break generationLoop();
 lastResult = current ; }
 break generationLoop; } else
 if (break) {
 break ; }
 continue;
 lastResult++; breakgenerationLoop;
 return generationLoop;
 continue generationLoop;
 lastResult = ++generationLoop;
 bestResult++; breakgenerationLoop;
 iterationLoop=generationLoop;
 break this.generationLoop;
 continue;
 return bestFitness;
 return bestArx;
 return optimum;
break  generatorLoop; }
 convergenceLoop=generationLoop;
break generationLoop; continue;
 continue; }
break  ; } } }
 break Loop;
 break 2*generationLoop;
 break iterations;
break  iterationLoop;
 return lastResult;
 } breakgenerationLoop;
break  GenerationLoop;
 break-generationLoop;
 break convergence-generationLoop;
 return ;
 break ++generationLoop;
 break
break generationLoop(); }
 }
 continue
break generationLoop'; }
 return
 }
 #
