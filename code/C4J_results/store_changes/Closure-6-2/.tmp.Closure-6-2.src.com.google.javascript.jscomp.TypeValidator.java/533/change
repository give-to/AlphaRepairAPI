info = parent.getJSDocInfo();
info = parent. getInfo ( ) ;
info = parent.getJSDocInfo(n);
 return var.getJSDocInfo();
 newInfo = parent.getJSDocInfo();
 newVar = n;
 allowDupe = true;
 return var;
 return var();
 return null);
info = parent.getJSDocInfo(); } else { info = parent. info ;
info  = parent ;
 info = n.parent.getJSDocInfo();
info = parent. getJSDocInfo ( )
info  = n. getInfo ( ) ;
 newVar = n ; info= parent.getJSDocInfo();
 newVar = n ; info |= parent.getJSDocInfo();
info = parent.getJSDocInfo(); } else { info = n. info ;
 info = parent.getJSDocInfo(); } else if (info == null) {
info = parent.getJSDocInfo(); } else { info = parent ;
 return newVar();
 info = parent.getJSDocInfo(); } else { if ( info == null ) {
 info = parent. getJSDocInfo(); } else if (info == null) { allowDupe =
info = parent.info();
 info = (Info)parent.getJSDocInfo();
info  = parent
 newVar = n ; } else { info |= parent.getJSDocInfo();
 return newVar;
 info = n.getJSDocInfo();
 info = parent. getJSDocInfo(); } else if (info == null) { allowDupe
info = parent.getJSDocInfo(); if ( info == null ) { return ;
 info = parent.getJSDocInfo(); } if ( info == null ) {
 info = parent. getJSDocInfo(); } if (info == null) { allowDupe =
 newVar = n.getParent();
 newVar = var.getScope();
 info = parent.getJSDocInfo(); } else {
info = parent.getJSDocInfo(); } else { info = parentInfo ;
 newVar = parent ; } else { info |= parent.getJSDocInfo();
 info = parent.getJSDocInfo(); } else if (parent) {
info = parent.getJSDocInfo(n); } else { info = parent ;
info = parent. info ;
 info = parent. getJSDocInfo(); } else if (info == null) { allowDupe = true ;
info = parent. getInfo ( n ) ;
 info = parent. getJSDocInfo(); } if ( info == null ) { newVar = n ; } else {
 info = n. getParent ( ) ; } else { if (parent!= null)
 info = parent.getJSDocInfo(); } else if (info.suppressions) {
 info = parent.getJSDocInfo(); } else if (info!= null && info. getSuppressions!= null) {
 info = parent. getJSDocInfo(); } else if (info == null) { allowDupe = true
 info = parent.getJSDocInfo(); } else if (info!= null) {
info = parent.getJSDocInfo(); } else { info = newInfo ;
 info = parent. getJSDocInfo(); } else if (info!= null) { allowDupe
 info = n. getParent ( ) ; } else if ( info == null ) {
 info = n. getParent ( ) ; } else { if ( info == null ) {
info = parent.getJSDocInfo(); } else { info = newType ;
 info = parent. getJSDocInfo(); } if (info == null) { allowDupe = true
 info = n. getParent ( ) ; } else if (parent!= null)
 newVar = n. clone ( ) ;
 info = parent. getJSDocInfo(); } if ( info == null ) { newVar = n ; } } else {
 info |= parent.getJSDocInfo();
 info = n. getParent ( ) ; } else if (parent) {
 info = parent. getJSDocInfo(); } if (info == null) { allowDupe = true ;
 info = parent.getJSDocInfo(); } else { if (parent!= null)
 info = parent.getJSDocInfo(); } else if (info == newType) {
info = parent.getJSDocInfo(); info = info. getInfo ( ) ;
 info = parent.getJSDocInfo(); } else if (info!= null && info. getSuppressions().contains()) {
 info = parent.getJSDocInfo(); } if (info == null) { allowDupe
 newVar = n. getVar ( ) ;
 info = parent.getJSDocInfo(); } else { if (parent) {
 info = parent.getJSDocInfo(); } else if (info!= newType) {
 info = parent.getJSDocInfo(); } else if (info!= null && info. getSuppressions().contains")) {
info = parent.getJSDocInfo(n); } else { info = newInfo ;
 info = parent.getJSDocInfo(); } else if (info!= newInfo) {
info = parent. getNodeInfo ( ) ;
 info = parent.getJSDocInfo(); } else { if (info == newType) {
 info = parent.getJSDocInfo(); } else if (info == null)
 info = n. getParent ( ) ; } else { if (parent) {
 info = parent. getJSDocInfo(); } else if (info!= null && info == null) {
 info = parent.getJSDocInfo(); } else if (info!= null && info. getSuppressions()!= null) {
 info = parent.getJSDocInfo(); } if (parent) {
 newVar = n ; } else {
 info = parent. getJSDocInfo(); } else if (info!= null && info. isGetProp ( )) {
 info = parent.getJSDocInfo(); } } else {
info = parent. getInfo ( )
 newInfo |= parent.getJSDocInfo();
 info = parent. getJSDocInfo(); } else if (info == null) { info = n ; } else {
 newVar = n ; } else { info *= parent.getJSDocInfo();
 newVar = n ; return ;
 if (parent!= null) {
 info = n.getJSDoc ( );
 info = parent. getJSDocInfo(); } else if (info!= null && info. hasSuppressions()) {
info = parent. getSourceInfo ( ) ;
 info = parent.getJSDocInfo(); } else if (info!= null && info. getSuppressions == null) {
 info = parent. getJSDocInfo(); } else if (info == null) { info = n.getInfo();
 varType = null ; newType = parent.getJSDocInfo();
 info = n. getParentInfo(); } else if (parent!= null)
info = parent.getJSDocInfo(n); } else { info = newType ;
 info = parent.getJSDocInfo(); } if (! info ) {
 info = parent. getJSDocInfo(); } else if (info!= null && info!= n) {
 newVar = parent ; } else { info= parent.getJSDocInfo();
 newVar = n ; allowDupe = true;
 newVar = n.getJSDocInfo();
info = parent.getJSDocInfo() ; } else { info = parent ; }
info = parent.getJSDocInfo(); if ( info == null ) {
 varType = null ; allowDupe = true;
 newVar = n ; } else { info= parent.getJSDocInfo();
 info = parent.getJSDocInfo(); } else if (info) {
info = parent.getJSDocInfo(); if ( info == null ) { }
 varType = var.getType();
 info = parent.getJSDocInfo(); } else if (parent)
 newVar = parent ; } else {
 info = parent. getJSDocInfo(); } else if (info!= null && info.isInterface()) {
 if (parent!= null)
info = parent.getJSDocInfo(n); info = newInfo ;
 info = null ; newInfo = parent.getJSDocInfo();
 n.getJSDocInfo();
info = parent.getJSDocInfo(n); } else { info = n ;
 info = parent. getJSDocInfo(); } else if (info!= null && info. suppress ( ) ) {
 newVar = n ; return null ;
 info = parent. getJSDocInfo(); } else if (info!= null && info. suppressable) {
 newVar = newVar();
 info = NodeUtil.getInfo(n);
info = parent.getJSDocInfo() if ( info == null ) { return ;
 info = parent.getJSDocInfo(); } else if (info == null) { info = n.getInfo(); } else
info = parent.getJSDocInfo() if ( info == null ) { return null ;
info = parent. getFirstJSDocInfo ( ) ;
 newVar = new Var(n);
info  = n. getNodeInfo ( ) ;
 var.getType(); info = parent.getJSDocInfo();
info = parent.getJSDocInfo(n); info = info. get ( ) ;
 newVar = n ; break ;
 newVar = var ; info = parent.getJSDocInfo();
info = parent.getInfo(); } else { info = parent ;
 info = parent.getJSDocInfo(); } else if (info.suppressions)) {
 varType = null ; info = parent;
 varType = null ; newVar = n;
 varType = n.getJSDocType();
 info = n. getParentInfo(); } else if (parent) {
 varType = null ; info = parent.getJSDocInfo();
 newVar = n.getNewVar();
 newVar = parent ; } else { info *= parent.getJSDocInfo();
info  = n. getSourceInfo ( ) ;
 newVar = var.getParent();
 info = parent. getJSDocInfo(); } if (info == null) { allowDupe &&
 newVar = n.getFirstChild();
 newVar = n ; } else { info = info. info ;
 info = n.getJSDocInfos();
 newVar = parent ; info |= parent.getJSDocInfo();
 info = (Node) parent.getJSDocInfo();
info = parent.getJSDocInfo(n); } else { info = parent ; }
 newVar = n ; info = parent;
 varType = null ; return null ;
info = parent.getJSDocInfo(); info = n. info ;
 info = parent.getJSDocInfo(); } else if (info!= null && info. getSuppressions!= null)) {
info  = n. getJSDocInfo ( )
info = parent.getJSDocInfo(); } else { info = n ;
info  = newType ;
info = parent.getJSDocInfo(n); info = info. info ;
info = parent.getJSDocInfo(n); } else { info = n ; }
info = parent.getJSDocInfo() if ( info == null ) { return var ;
 newVar = n. getNewInstance ( ) ;
 newVar = n. clone ( ) ; } else { newVar
info = parent. getJSDocInfo ( ) ; }
 info = parent.getJSDocInfo(); } else
 var.getJSDocInfo()= parent.getJSDocInfo();
 info = n. getParentInfo(); } if (parent) {
 varType = null ; newType = n.getJSDocInfo();
info = parent.getJSDocInfo(); if (info == null)
 info = (JSDocInfo)parent.getJSDocInfo();
info = parent.getJSDocInfo(n); info = newType ;
info = parent.getJSDocInfo(); } if ( info ) {
 info = newVar = parent.getJSDocInfo();
info = parent.getJSDocInfo() if (info == null) {
info  = n. info ;
 newVar = n. clone ( ) ; } else {
info = parent. getJsInfo ( ) ;
 allowDupe = newVar = n.getJSDocInfo();
info = parent.getJSDocInfo(); if (info) {
info = parent. getJsDocInfo ( ) ;
 info = parent.parent.getJSDocInfo();
info = parent.getInfo(); } else { info = n ;
 newVar = n.getDeclaredVar();
 newVar = n. createInitialScope ( ) ;
 newVar = n. getScope ( ) ;
 newVar = newType.getJSDocInfo();
 newVar = var.createInitialScope();
 newVar = n();
info =  n. getDefaultJSDocInfo ( )
info  = n. getInfo ( )
info = parent. getInfo ( n, variableName ) ;
 newVar = n ; } } else {
info = parent.getJSDocInfo(); info = newType ;
info = parent.getJSDocInfo(); info = info. info ;
 newVar = n.createJSDocInfo();
info = parent. getInfo ( variableName ) ;
 allowDupe = info!= parent.getJSDocInfo();
info = parent.getJSDocInfo(n); if (info == null) {
 info = parent. getJSDocInfo(); } else if (info == null) { info = n.getInfo(); else
info  = n. getDefaultInfo ( ) ;
 newVar = n.getJSDocVar();
info =  NodeUtil. createInitialScope ( ) ;
 newVar = parent. clone ( ) ; } else {
info  = NodeInfo ( ) ;
 newVar = n ; } info |= parent.getJSDocInfo();
 newVar = n. getVar ( ) ; info = parent ;
info  = NodeUtil. createInfo ( ) ;
info = parent. get ( ) ;
info = parent.getJSDocInfo(n); info = null ; return null ;
info = parent.getJSDocInfo(n); } if ( info ) {
 var.getJSDocInfo() |= parent.getJSDocInfo();
 return newVar);
 JSDoc info = parent.getJSDocInfo();
 newVar = var ; } info = info.getJSDocInfo();
 newVar = n. clone ( ) ; info = parent ;
 varType = null ; newInfo = parent.getJSDocInfo();
 newVar = n ; } info = info.getJSDocInfo();
 varType = null ; return newVar ;
 info = parent.getJSDocInfo(); } else if (info!= null && info. getSuppressions().contains"))");
info = parent. getJsDocInfo ( )
 newVar = n. getParent ( ) ; } else {
 var.getType() = parent.getJSDocInfo();
 newVar = n.getDeclaringScope();
info = parent. getDefaultJSDocInfo ( )
 info = parent.getInfo(); newVar |= parent.getJSDocInfo();
 varType = null ; allowDupe ;
 info = parent. getJSDocInfo(); } if ( info == null ) { newVar = n ; } else
 varType = newType ;
info = parent.getJSDocInfo(); info = newInfo ;
 newVar = n ; } else info = info.getJSDocInfo();
info = parent.getJSDocInfo() if (info == null)
 info = (JSDoc)parent.getJSDocInfo();
 newVar = parent ; else { info |= parent.getJSDocInfo();
 newVar = parent ; } } else {
 newVar = n ; } else { info = parent ; }
 info = new JSDocInfo(n);
 info = parent. getJSDocInfo(); } else if (info == null) { info = n.getInfo(); }
 info = null ; newVar = newType.getJSDocInfo();
 newVar = (Var) n.getJSDocInfo();
 varType = null ; return ;
 newVar = n.get();
info  = n. getInfo ( parent ) ;
 newVar = n. getParent ( ) ; return newVar ;
 varType = var.getNativeType();
 newVar = n. getThis ( ) ;
 allowDupe = info = parent.getJSDocInfo();
info = parent.getJSDocInfo() ; info = null ; return null ;
info  = getInfo ( ) ;
 return var.getScope();
 var.info = parent.getJSDocInfo();
 varType = null ; newVar = newType.getJSDocInfo();
 info = newVar = n.getJSDocInfo();
info = parent.getJSDocInfo() if (info == null) { }
 info = null ; newVar = n.parent.getJSDocInfo();
info = parent. getInfo ( n, parent ) ;
info = parent.getJSDocInfo(n); info = null;
 newVar = n ; } else { info = n ; }
 varType = getType(n);
 newVar = parent ; } else { newVar
info = parent.getJSDocInfo(n); newVar = info ;
 newVar = n. clone ( ) ; } else { newVar.
info = parent. getInfo ( n, newType ) ;
 newVar = n ; info *= parent.getJSDocInfo();
 newVar = parent ; info= parent.getJSDocInfo();
 newVar = n. getVar ( ) ; } else {
 newVar = n ; info &= parent.getJSDocInfo();
 varType = null ; return var ;
 return var.createInitialScope();
 info = NodeUtil.getInfo(parent);
 newVar = parent ; } info |= parent.getJSDocInfo();
 newVar = var ; varInfo = n.getJSDocInfo();
 newVar = n.next();
 newVar = n ; continue ;
 newVar = n.createInitialScope(parent);
 newVar = n. getVar ( variableName ) ;
info = parent.getJSDocInfo(); info = n. getInfo();
 newVar = n ; } else { varType = info ;
 newVar = n ; }
 newVar = n. clone ( ) ; info = newType ;
 newVar = n ; } else { info = newInfo ;
 newVar = n ; } else { var = info. var ;
 info = NodeUtil.parent.getJSDocInfo();
 newVar = parent ; } else
info  = newType ; return ;
info = parent.getJSDocInfo(n); info = null ; return ;
 newVar = parent. getVar ( n ) ;
 newVar = n ; newType |= parent.getJSDocInfo();
 return (var);
 newVar = parent();
 allowDupe = allowDupe;
info  = NodeUtil. empty ( ) ;
 info = n.getJSDocInfo(_);
 info *= parent.getJSDocInfo();
info = parent.getJSDocInfo() } else { info = parent. info
 var.getJSDocInfo() *= parent.getJSDocInfo();
 newVar = n.getSymbolVariable();
 newVar = new Var(var);
 varType = n.getJSType();
 var.getType() = n.getJSDocInfo();
 newVar = n ; } else { return info.getJSDocInfo();
info = parent. getInfoInfo();
info = parent ; }
 newVar = n.getVariable(parent);
 newVar = n. getDeclaringClass ( ) ;
info = parent.getJSDocInfo(); info = null ;
 if (parent) {
info = parent.getJSDocInfo(n); info = newInfo ( ) ;
 newVar = n ; break ; }
info = parent.getJSDocInfo() ; info = null ; return ;
info = parent.getJSDocInfo(); } else { info = parent
 var.jsdocInfo= parent.getJSDocInfo();
 varType = null ; } else { return info.getJSDocInfo();
 newVar = n. getNewInstance ( parent ) ;
 newVar = n ; newInfo |= parent.getJSDocInfo();
 varType = null ; newVar = parent;
 newVar = new Var(variableName);
 info = null ; newInfo = n.getJSDocInfo();
 newVar = n ; return var ;
 newVar = n ; info = null;
 newVar = var ; } else { return info.getJSDocInfo();
 allowDupe = true ;
 info = newType.getJSDocInfo();
 newVar = n.parent();
 newVar = n ;
info = parent. getDeclaredTypeInfo ( ) ;
info = parent.getDefaultInfo ( ) ;
 newVar = n. clone ( ) ; } else { newVar =
 newVar = n ; } else
 info = parent.getJSDocInfo(); } } else { var
info = parent.getJSDocInfo() if (info) {
 newVar = n. getParent ( ) ; return ;
 var.getType = parent.getJSDocInfo();
info = parent.getJSDocInfo(); info = n ;
 newInfo = var.getJSDocInfo();
 newVar = n. getVar ( parent ) ;
 info = parent.node.getJSDocInfo();
 varType = "unknown" ;
info = parent.getJSDocInfo(); newVar = n ;
 newVar = n ; } else { newVar
 info = parent.getNodeInfo(); parent=parent.getJSDocInfo();
info = parent.getJSDocInfo(n); } else { info = parent
 varInfo = parent.getJSDocInfo();
 info = null; info = parent.getJSDocInfo();
 varType = getNativeType(n);
info  = n. getSourceInfo ( )
 newVar = newType ;
 newVar = n.getParent(();
 allowDupe =!info;
info  = newType ; break ;
 parent.getJSDocInfo();
 newVar = n.getParent(_);
 newVar = (Var)parent.getJSDocInfo();
info  = n. getInfoInfo();
 info = parent.getInfo(); newInfo=parent.getJSDocInfo();
 info = new JSDocInfo(parent);
 varType = type(n);
 info = n.getParentInfo ( ) ;
info = parent.getJSDocInfo() ; return newVar ;
 newVar = n.getMember(parent);
 newVar = n.getScope(); info=parent.getJSDocInfo();
 newVar |= parent.getJSDocInfo();
info  = NodeInfo. Unknown_TYPE ;
 return parent.getJSDocInfo();
 info = parent.getJSDocInfo(); } else if ()
 newVar = parent. clone ( ) ; } else
 return new InitialScope();
 allowDupe = true ; return;
 info = NodeUtil.get(parent.getJSDocInfo();
 newVar = (var);
 info = parent.getInfo(); info=parent.getJSDocInfo();
info = parentInfo ( ) ;
 info = n.getTypeInfo(); parent=parent.getJSDocInfo();
info = parent.getJSDocInfo() ; return null ;
 newVar = parse(n);
 info = null ; parent = parent.getJSDocInfo();
info = parent. getDefaultJSDoc ( ) ;
 info = parent.getInfo(); newVar=parent.getJSDocInfo();
info = parent.getJSDocInfo(n); } else { info = n
 info = parent.getInfo(); parent=parent.getJSDocInfo();
 newVar *= parent.getJSDocInfo();
 varType = newType(n);
info = parent. getSource ( ) ;
 info = n.getParentInfo(); } else
info = parent.getJSDocInfo() ; if (info)
 varType = getType();
 info = n.getParent(); info=parent.getJSDocInfo();
 newVar = newType;
 varType = parent.getJSDocInfo();
info  = n ;
 if (parent instanceof ClassNode)
 return var.getName();
info = parent ; return ;
 varType = null;
 return null;
 allowDupe = false;
 newVar = n ; else {
 newVar = n.parent.getJSDocInfo();
 newVar = n. clone ( ) ; }
 allowDupe =
info = parent. getSourceInfo ( )
 return new Var(var);
 var.getType() = n.parent.getJSDocInfo();
 allowDupe = true
 newVar = $(n);
info = parent.getJSDocInfo(NODE_NAME);
info  = nodeInfo ( n);
 newVar = n. clone ( ) ; } else
info = parent. getNodeInfo ( )
 info = n.getScope(n).parent.getJSDocInfo();
 info = NodeUtil.create(parent.getJSDocInfo();
 newVar = var.input.parent.getJSDocInfo();
info = parent.getJSDocInfo(n); info = parent ;
 newVar = create(n);
 newVar = n.parent;
 info = (MethodInfo)parent.getJSDocInfo();
 allowDupe = true;;
 newVar = n. clone ( ) ; } else { new var
 info = create(n);
 newVar = parent;
 newVar = n. getParent ( ) ; } else
 info = parse(n);
 newVar = parent ;
 info = n. getParentInfo(); } } else { var
 info = newVar.parent.getJSDocInfo();
 info = (ClassInfo)parent.getJSDocInfo();
 info = parent.getClassInfo(); else
 return n.getJSDocInfo();
 newVar = var.input.getJSDocInfo();
 newInfo = n.getJSDocInfo();
info = parent.getJSDocInfo(n); }
 allowDupe = true continue;
 var.info = n.getJSDocInfo();
info  = nodeInfo ;
 newVar = n);
 newVar = n ; } } else { var
info = parent ; break ;
 varType = null ; } else
 newVar(n);
 info = n ; n |= parent.getJSDocInfo();
 newVar = newVar(();
info = parent.getJSDocInfoImpl ( ) ;
info = parent. currentInfo ;
 var.input = parent;
info = parent.getJSDocInfo() if (info)
info = parent.getJSDocInfo() ; return ;
 newVar. info |= parent.getJSDocInfo();
 info = parent.getInfo(); else
info = parent.getJSDocInfo(); info = parent ;
 newVar=parent.getJSDocInfo();
info = parent.getJSDocInfo() ; info = newType ; }
 newVar = parent ; } else { var
info = parent.getDefaultJSDocInfo() ;
info  = newType ; }
 info = NodeUtil.get()parent.getJSDocInfo();
 newVar(var);
 info = (Var)parent.getJSDocInfo();
info  = nodeInfo();
 info = n. getParentInfo(); } } else { Info
 newVar = var();
 allowDupe;
 newVar = n ; return
 if (!parent)
 newVar. input |= parent.getJSDocInfo();
 if (parent)
 info = _parent.getJSDocInfo();
 newVar = n ; } else { var
 return null(n);
 continue allowDupe;
 info = var.getJSDocInfo();
 return var.clone();
 newVar.info= parent.getJSDocInfo();
 info = info();
 newInfo *= parent.getJSDocInfo();
 newVar &= parent.getJSDocInfo();
 info = NodeUtil(parent.getJSDocInfo();
 return null();
 newVar =
info  = n
info = parent. info ; }
 newVar = info &= parent.getJSDocInfo();
 info = node.parent.getJSDocInfo();
 if (parent!= null) { var
 return (null);
info  = null
 var.sourceInfo= parent.getJSDocInfo();
 report(n);
info = parent.getJSDocInfo()();
 var = n ;
info  = null;
info = parent.getJSDocInfo() ; } else {
info = parent.getJSDocInfo() ; break ;
 newVar = newparent.getJSDocInfo();
info = parent.getJSDocInfo() ; break ; }
 var.info |= parent.getJSDocInfo();
 n.break();
 info &= parent.getJSDocInfo();
 newVar = null;
info = parent.getJSDocInfo(n, newType); }
 return var);
info = parent.getJsDocInfo(); }
 JSDoc
 var.input |= parent.getJSDocInfo();
info = parent.getJSDocInfo(n, parent); }
info  = node ;
 var.typeInfo= parent.getJSDocInfo();
info = parent.getJSDocInfo() ; continue ;
 newVar = var
info = parent.getJSDocInfo(varName) ;
 throw n.getJSDocInfo();
 return.getJSDocInfo();
 info = source.getJSDocInfo();
 return ();
 return node.getJSDocInfo();
 n.continue();
 var.getJSDocInfo();
info = parent.getJSDocInfo(varName); }
 info = node.getJSDocInfo();
info = parent.getComments();
info = parent.getJSDocInfo(variableName); }
info  = node
info = parent.getJSDocInfo(n, false); }
info = parent.genInfo();
info = parent.getJSDocInfo(NODE_NAME());
info = parent.getInfo(); }
info = parentInfo ;
 init.getJSDocInfo();
info = parent.getJSDocInfo(newType); }
info = parent.getJSDocInfo(n.name); }
 NewLineInfo
info  = undefined
 NewSourceInfo
 return n;
 return false);
 JSType
 newVar();
 this.
info = parent.getJSDocInfo(newVar); }
info = parent.getInfo());
 return this);
 return false;
info = parent.getJSDocInfo(name);
info = parent.getJSDocInfo(null);
 newVar
 return n();
 return nil();
info = parent.getJSDocInfo(node);
info = parent.getJSDocInfo(true);
 default:
 return undefined;
info = parentNode ;
info = parent.comments;
info = parent.comments();
info = parent.getJSDocInfo(N); }
info = parent.getJSDocInfo(name); }
info = parent.getJSDocInfo(n));
 new var
info = parent.getJSDocInfo().info
 info.parent.getJSDocInfo();
 n=parent.getJSDocInfo();
info = parent.getJSDocInfo()); }
 var
info += parent.getJSDocInfo();
info -= parent.getJSDocInfo();
