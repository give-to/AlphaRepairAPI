if (JSType.isSubtypeHelper(that)) {
if (JSType.isSubtypeHelper(this)) {
if (JSType.isSubtypeHelper(this, primitiveType)) {
if (JSType.isSubtypeHelper(this, that)) {
if (JSType.isSubtypeHelper()) {
if (JSType.isSubtypeHelper(this,  that))
if (JSType.isSubtypeHelper(that))
 if (!that)) {
if  ( inferred ) {
 if (isSubtype(this, that)) {
if (JSType.isSubtypeHelper(this, that, inferred)) {
if  inferred {
if (JSType.isSubtypeHelper(this, that) &&! inferred) {
if (JSType) {
 if (that == null) {
if (JSType.isSubtypeHelper(this, that) ||! inferred) {
 if (isSubtype(that)) {
 if (isSubtypeHelper(this, that)) {
if (JSType.isSubtypeHelper(primitive, that)) {
 if inferred) {
if (JSType.isSubtypeHelper that)) {
 if (isSubtypeOf(this, that)) {
 if (this, that)) {
 if (Helper.isSubtypeHelper(this, that)) {
if (JSType.isSubtypeHelper(this, that)) { return false; } else {
if (JSType.isSubtypeHelper(that)) { return false; } else {
 if (!(this, that)) {
 if (primitive.isSubtypeHelper(this, that)) {
if (JSType.isSubtypeHelper(this, that))  { return super.isSubtype(that);
 if (super.isSubtype(that)) {
 if (isSubtypeHelper(this, that)) { return false; } else
if (JSType.isSubtypeHelper(this, primitiveType, that)) {
 if (this == that)) {
 if (isSubtypeHelper(this, that)) { return false; }
 if (!(that)) {
 if (that == this) {
if (JSType.isSubtypeHelper(that, inferred)) {
 if (isNullable(that)){
 if (this == that){
 if (isSubtypeHelper(that)) { return false; }
if (JSType type == null) {
 if (isSubtypeHelper(this, that)) { return false; } } else
 if (isSubtype(that, this)) {
 if (!)) {
 if (isSubtypeHelper(that)) { return false; } else
 if (!, that)) {
 if (isSubtypeHelper(this, that)) { return true; } } else
if (JSType.isSubtypeHelper(this)) { return super.isSubtype() ;
 if (super.isType(that)) {
 if (isSubtype(that, primitiveType)) {
 return false; } else
 if (isSubtypeOf(that)) {
 if (null == that)) {
 return false; } else if (JSType.isSubtypeHelper(this, that)) {
 if (isSubtype(this, primitiveType)) {
 if (visitor.isSubtype(this, that)) {
if (JSType.isSubtypeHelper(this, that) && JSType.isSubtype(that) {
if (JSType.isSubtypeHelper(this, that) && JSType.isSubtypeHelper(that) {
if (JSType.isSubtypeHelper(that)) { return super.isSubtype();
 return false; } if (Helper.isSubtypeHelper(this, that)) {
if (JSType.ANY == type) {
 if (isSubtypeHelper(this, that)) { return true; } else
if (JSType.ANY == that) {
 return true; } else if(JSType.isSubtypeHelper(this, that)) {
 if (isSubtype(this.type, that)) {
 if (isSubtypeHelper(that)) { return true; } else
 if ( this instanceof NamedType ) { return this. isSubtype ( that ) ;
if (JSType. isSubtype ( that ) ) {
 return this. isSubtypeHelper ( this, that )? primitiveType. isSubtype ( that ) : false ;
 return this. isSubtype ( that ) ; } else
if (JSType.isSubtypeHelper(primitive)) {
if (JSType == null)
 return false; } if (JSType.isSubtypeHelper(this, that)) {
if (JSType.isSubtypeHelper(this, that)) { return super.isSubtype() ;
if (JSType.isSubtypeHelper(this, that) || JSType.isSubtypeHelper(this) {
 if (isNominalType(that)) {
if (JSType.isSubtypeHelper(this, that) || JSType.isSubtypeHelper(that) {
 if (inferred)) {
 if (isSubtypeHelper(this, that)) { return false; } else {
if (JSType.isSubtypeHelper(that), inferred) {
 if (this.isSubtype(that)) {
if (JSType.isSubtypeHelper(this).isSubtype(that)) {
 return this. isSubtypeHelper ( this, that )? primitiveType. isSubtype ( this, that ) : false ;
 if (!this, that)) {
 if (primitive == null) {
 if (isType(this, that)) {
if  ( inferred {
 if (isSubtypeHelper(this, that)) { return true; } else {
 return isSubtypeHelper(this, that); } else
if (JSType.isSubtypeHelper(this, that)) { return super.isSubtype(); }
 if (isPrimitive(that)) {
if (JSType.isSubtypeHelper(this, that))  { return primitiveType.isSubtype(); }
 return this. isSubtypeHelper ( this, that )? primitiveType. isSubtype ( that ) : false ; } else
if  (type instanceof NamedType) {
 if (super.isSubtype, that)) {
 if (isSameType(this, that)) {
 return (JSType.isSubtypeHelper(that))? false : true; }
 if ( type instanceof NamedType ) { if ( inferred == true ) {
if (JSType.isSubtypeHelper(this, that) && JSType.isSubtype(that)) {
if (JSType.isSubtypeHelper(this)) { return false; } else {
 return isSubtypeHelper(this, that)? true : false ; } else
 if (equal(this, that)) {
if (JSType == null) {
if (JSType. isInstance ( that)) {
 if (primitiveType.is(that)) {
 return true; } if (JSType.isSubtypeHelper(this, that)) {
 if (super.isSubtypeOf(that)) {
 if (isSubtype(this, primitiveType, that)) {
if (JSType.isSubtypeHelper(this, that)) { return primitiveType.isSubtype();
 if (hasReferenceName){
 if (!isSubtype(that)) {
 if (super.isSubtype(this, that)) {
 if (!isSubtype(that, this)) {
if (JSType.isSubtypeHelper(that)) { return true; } else {
if (JSType.isSubtypeHelper(that)) { return false; }
 return (JSType.isSubtypeHelper(that))? true : false; }
if (JSType.isSubtypeHelper(that).isSubtype(this)) {
 return this. isSubtypeHelper ( that )? this : that. isSubtype ( this ) ;
 return this. isSubtype(that); }
 if (isSubtypeHelper(that)) { return false};
 if ( type instanceof NamedType ) { return type. isSubtype ( that ) ;
 return this. isSubtypeHelper ( this, that )? primitiveType. isSubtype ( that ) : false ; } else {
if (JSType.isSubtypeHelper(this, that) && primitiveType == null) {
if (JSType.isSubtypeHelper(this, that) &&!isSubtypeHelper(that, this) {
if (JSType type == that) {
 return this. isSubtypeHelper ( this, that )? primitiveType. isSubtype ( that ) : true ;
 if (isSubtypeOfType(that)) {
 return this. isSubtypeHelper ( this, that )? primitiveType. isSubtype ( this, that ) :
 return this. isSubtypeHelper ( this, that )? primitiveType. isSubtype ( that ) :
 return isSubtypeHelper(this, that)? primitiveType. isSubtype ( that ) :
 if ( this instanceof NamedType ) { return this instanceof NamedType ;
if (JSType.isSubtypeHelper(this, that) || inferred) {
if (that == null) return false; if (isSubtype(this, that)) {
if (JSType type == this) {
 if (Primitive.isSubtypeHelper(this, that)) {
 return this. isSubtypeHelper ( this, that )? primitiveType. isSubtype ( that ) : true ; } else
 return (JSType.isSubtypeHelper(that, this)) ; } else {
 return this. isSubtype ( ) ;
 return isSubtype(this, that); }
 if (isSubtypeHelper(that)) { }
 if (isSubtype(that))) {
 return this. isSubtypeHelper ( this, that )? primitiveType : this. isSubtype ( that ) ;
 if (isSubtypeHelper(that)) { return true; }
 if (!that){
 if (null == that) { return false; } else {
 return isSubtypeHelper(this, that)? false : true; } else
if (JSType.isSubtypeHelper(this,  this).isSubtype(that)) {
 if (isSubtypeHelper(this, that)) { return true; }
if (JSType.isSubtypeHelper(this, that) || JSType.isUnknownType(that) {
if (JSType.isSubtypeHelper(this)) { return super.isSubtype(); }
 return false; }
 if (isSubtype(that), inferred) {
if (JSType. isEmpty ( that)) {
 if ( this instanceof NamedType ) { return this. isName ( that ) ;
 return super. isSubtype ( that ) ;
 if (!isSubtype(this, that)) {
 if ( type instanceof NamedType ) { if ( inferred == false ) {
if (JSType.isSubtypeHelper(this, that) || JSType.isNullable(that) {
if (JSType.isSubtypeHelper(that) || inferred) {
 if (super.isSubtype(primitive, that)) {
if (JSType.isSubtypeHelper(this, that) && JSType.isSubtypeHelper(this) {
if (JSType.isSubtypeHelper(this, that), inferred) {
 if ( isSubtype ( that ) ) { return super. isSubtype (that);
 return this. isSubtypeHelper ( this, that )? primitiveType. isSubtype ( that ) : false ; }
 if (isPrimitiveType(that)) {
 return super. isSubtype ( ) ;
 if (super.isInstance(that)) {
 if (jstype.isSubtypeHelper(this, that)) {
if (JSType.ANY) {
 return this. isSubtypeHelper ( this, that ) || this. isSubtypeHelper ( this, that ) ; } else
 return false; } if (super.isSubtypeHelper(this, that)) {
if (JSType.isSubtypeHelper(that, inferred) {
 if ( this instanceof NamedType ) { return this. isType ( that ) ;
 return this. isSubtypeHelper ( this, that )? primitiveType. isSubtype ( that ) : true ; } else {
 if ( type instanceof NamedType ) { return type instanceof NamedType ;
if (JSType. class == that) {
 return this. isSubtypeHelper ( that ) || this. isSubtypeHelper ( this. getType ( that ) ) ; } else
 if (that == null)) {
 return this. isSubtypeHelper ( this, that )? primitiveType : this. isSubtype ( that ) ; } else
 if (this == primitiveType){
if (JSType.isSubtypeHelper(this, that) ||!isSubtypeHelper(that, this) {
 if (type == null){
if (that == null) return true; if (isSubtype(this, that)) {
if (JSType.isSubtypeHelper(this), that) {
 return isSubtypeHelper(this, that) ; }
 if (isSubtype(that) == true) {
if (JSType.isSubtypeHelper(this, that) && isSubtypeHelper(that, this) {
if (JSType. isPrimitive(that)) {
 return this. isSubtypeHelper ( this, that )? primitiveType. isSubtype ( this, that ) : false ; }
 if (!isSubtypeHelper(this, that)) {
if (JSType.Named) {
if (JSType.isSubtypeHelper(this)) { return primitiveType.isSubtype();
 if (same(this, that)) {
 if (type.isSubtypeHelper(this, that)) {
 return isSubtype(this, that);
if (JSType.isSubtypeHelper(this, that) || isSubtypeHelper(that, this) {
if  (hasReferenceName()) {
 if (null == that) { return false; } } else
if (JSType.isSubtypeHelper(this, that) || this. isSubtypeHelper(that) {
if (JSType.isSubtypeHelper(this, that) || this. isSubtypeHelper(that, this) {
 if (super.isSubtypeHelper(this, that)) {
 return if (isSubtype(this, that)) {
 if (primitive == that) {
 if (super.isSubtype()){
 return if (isSubtypeOf(this, that)) {
 if (isSubclassOf(this, that)) {
 if (null, that)) {
 if (visitor.caseSubtype(this, that)) {
 return isSubtypeHelper(this, that)? primitiveType. isSubtype (that); :
if (JSType.isSubtypeHelper(that)) { return super.hasReferenceName();
 if (this instanceof NamedType){
 if (super(this, that)) {
 return this. isSubtypeHelper ( this, that )? primitiveType. isSubtype ( that ) : false ; } } else
 return isSubtype(that); } else
 if (primitive == this) {
 return this. isSubtypeHelper ( this, that )? primitiveType. isSubtype ( that ) : true ; }
if  (type == primitiveType) {
 if (isSubtype(this.prototype, that)) {
 if (isInstance(this, that)) {
if (JSType.isSubtypeHelper(this, that)) { return true; } else {
 if (isNull(that)) {
if (JSType type instanceof NamedType) {
 if (super == primitiveType){
 return this. isSubtypeHelper ( this, that )? primitiveType. isSubtype ( this, that ) : true ; }
 if ( type instanceof NamedType ) { return type. isName ( that ) ;
if (JSType.isSubtypeHelper(this, that, inferred, hasReferenceName)) {
if (JSType.isSubtypeHelper(this, that) || JSType.isSubtype(that) {
 if (visitor.isType(this, that)) {
 if (isEnumElementType(this, that)) {
if (JSType.isSubtypeHelper(this, that) || JSType.isUnknown(that) {
 return isSubtypeHelper(this, that) ; } else {
 if (isSubtype(this, inferred, that)) {
if (isSubtype(that) || isSubtype(this, that)) {
if (JSType.isSubtypeHelper(this, that) || isSubtypeHelper(that) ) {
 if (type == null)) {
 if (isReference(that)) {
 if (isSubtype(that) {
if (JSType.isSubtypeHelper(this, that) || this. isSubtypeHelper(that)) {
 return true; } if (Helper.isSubtypeHelper(this, that)) {
 return isSubtypeHelper(this, that)? true : false ; }
 return this. isSubtype ( that )? true : false ; } else {
 if (isSubtypeNull(that)) {
 return isSubtype(that); }
 return this. isSubtypeHelper ( this, that )? primitiveType : this. isSubtype ( that ) ; }
if (JSType.isSubtypeHelper(that).isNullable()) {
if (JSType.isSubtypeHelper(this, that) &&!isSubtypeHelper(that, primitiveType) {
if (JSType.isSubtypeHelper(that, hasReferenceName)) {
if (isSubtype(this, that) || isSameType(this, that)) {
if (isSubtype(this, that) || isSupertype(this, that)) {
 if (type == null) { return false; } else {
if (JSType.isSubtypeHelper(this, that) || this == primitiveType) {
 if ( this instanceof NamedType ) { return this instanceof that ;
if  (! inferred) {
if (super.isSubtype(that) && equals(this, that)) {
 if (null(that)) {
 if ( type instanceof NamedType ) { if (! inferred ) {
 super.isSubtype(that);
 return this. isSubtypeHelper ( this, that ) || this. isSubtypeHelper ( primitiveType ) ;
 if (isSubtypeOf(that, this)) {
 if ( this instanceof NamedType ) { return this. isSubtype ( that )
 if (!isSubtype(that))) {
 return this. isSubtype ( that )? true : this. isNullable ( ) ;
 if (!isSubtypeOf(this, that)) {
if (JSType.isSubtypeHelper(this, that) || isNullable (that)) {
if (JSType.isSubtypeHelper(this)) { return this.isSubtype() ;
 return this. isSubtypeHelper ( this, that )? primitiveType. isSubtype ( this ) :
 return this ; } if (JSType.isSubtypeHelper(this, that)) {
if (JSType.isSubtypeHelper(this, that) && JSType.isNullable(that) {
 if (isSubtypeOfJSType(that)) {
if (JSType. isSameType ( that ) ) {
if (JSType.isSubtypeHelper(this, that) || this. isSubtype ( that)) {
 if (this.isSubtypeOf(that)) {
if  (type instanceof NamedType)
 return this. isSubtypeHelper ( this, that )? true : false ; } else {
 return isSubtypeHelper(this, that)? false : true ; }
 return this. isSubtypeHelper ( this, that ) || this. isSubtype ( primitiveType ) ;
 if (isSubtypeOfJSType(this, that)) {
 return isSubtypeHelper(this, that)? primitiveType. isType ( that ) :
if (JSType. isSubtype ( this, that)) {
if (JSType inferred) {
 if (!is(that)) {
 return isSubtypeHelper(this, that)? primitiveType. isSubtype ( this ) :
 return false ; } if (primitive.isSubtypeHelper(this, that)) {
 if ()) {
 if (isSubtype(that) == false) {
if (JSType.isSubtype(that) == true)
if (JSType.isSubtypeHelper(this, that) || JSType.isNull(that) {
if (hasReferenceName()) { if (isSubtype(this, that)) {
 return this. isSubtypeHelper ( this, that ) || this. isSubtypeHelper ( this, that ) ; }
 return super. isSubtype (that); }
if (that == null) return false; if (isSameType(this, that)) {
 return false; if (Helper.isSubtypeHelper(this, that)) {
if (JSType. NULL == that) {
if (JSType. isSubtype(that) == false)
 return this. isSubtypeHelper ( that ) || this. isSubtypeHelper ( this. getType ( that ), that ) ;
 if (isSubtypeHelper(primitive).isSubtypeHelper(this, that)) {
 return isSubtype(that) ;
if (JSType. isNull ( that)) {
 if (isEnumElementSubtype(this, that)) {
if (JSType.NamedType that) {
 return this. isSubtypeHelper ( this, that ) || this. isSubtypeHelper ( this, this. type ) ; } else
 if (super.is(that)) {
if (isSubtype(that) || isSameType(this, that)) {
 return false; } else if (isSubtypeHelper(this, that)) {
 if (isSame(this, that)) {
 if (isSubtypeOf(this.type, that)) {
if (JSType.isSubtypeHelper(this, that) || JSType.isSubtypeHelper(other) {
 if (type.isInstance(that)) {
 return this. isSubtype ( that )? true : super. isSubtype (that);
if (JSType. isSubtype(that, inferred)) {
 if (super instanceof this) {
if (JSType.isSubtypeHelper(this, that) ||!isSubtypeHelper(that, primitiveType) {
if (JSType.isSubtypeHelper(that) ||! inferred) {
 if (isNullable(that) {
if (JSType.isSubtypeHelper(this,  other)) { return false; } else {
if  (type instanceof Named) {
 if (isSubtypeHelper(that) &&JSType.isSubtypeHelper(this, that)) {
if (isSubtype(that) && isSubtype(this, that)) {
if (JSType.isSubtypeHelper(this, that)) { return false; }
 if (that == this)) {
if (JSType.isSubtypeHelper(this, that, this, that)) {
if  ( type == that ) {
 if (isTypeSubtype(that)) {
if (hasReferenceName()) { if (isSubtypeOf(this, that)) {
 return this. isSubtype ( that )? true : super. isSubtype (that));
if (JSType.isSubtypeHelper(this, that) ||!isSubtype(that, this) {
 if ( this instanceof NamedType ) { this = primitiveType ;
 if ( isSubtype ( that ) ) { return super. isSubtype (that)
 if (!super(that)) {
 if (!equal(this, that)) {
if (JSType.isSubtypeHelper(this, that) && inferred == true) {
 if (isMember(this, that)) {
if (JSType.isSubtypeHelper(this, that) &&!isSubtype(that, this) {
 if (isInterface(that)) {
if (JSType. isSubtype ( this, that ) {
 return this. isSubtypeHelper ( this, that ) || this. isNullable ( that ) ;
 if (superType.isSubtypeHelper(this, that)) {
 return true; if (Helper.isSubtypeHelper(this, that)) {
 return true; } else if (isSubtypeHelper(this, that)) {
 return this. isSubtypeHelper ( this, that )? primitiveType. isSubtype ( this, that ) : null
 if ( isSubtype ( that ) ) { return super. isSubtype (that));
 return this. isSubtype ( that )? true : super. isSubtype (that))
 if (isSubtype(that, primitiveType) {
if (JSType.isSubtypeHelper(this.type, that)) {
 if ( type instanceof NamedType ) { return type instanceof NamedName ;
 if (!.isSubtypeHelper(this, that)) {
 if (super.isSubtype) {
if (JSType.isSubtypeHelper(this, that) || this. isNullable ( ) {
if (super.isEnumElementSubtype(this, that)) {
if (JSType.isSubtypeHelper(this, that)) { return false; } } else {
 if (JSTypes.isSubtypeHelper(this, that)) {
if (isSubtype(that) || isSubtypeOf(this, that)) {
if (JSType.isSubtypeHelper(that) == true)
 if (super.isEnumElementType(this, that)) {
if (JSType. isSubtype ( that, this)) {
if (JSType.isSubtypeHelper(that) || (this == that)) {
if (JSType.isSubtypeHelper(this, that) && isSubtypeHelper(that, this)) {
if (JSType.isSubtypeHelper(this, that) && this. isSubtype(that) {
 return this ; } else if (isSubtypeHelper(this, that)) {
if (JSType type instanceof NamedType)
if (JSType.isSubtypeHelper(this, that) && this. isSubtype(that)) {
 return if (isSubtype(this.type, that)) {
 if equals(this, that)) {
 if (isNullable == true) {
 if (isSubtypeHelper(that) ||JSType.isSubtypeHelper(this, that)) {
 if (isSubtypeEquivalent(this, that)) {
 if (isSubtype(this), that) {
 return false; if(JSType.isSubtypeHelper(this, that)) {
 if (isSubtypeOfType(this, that)) {
 if (isSupertype(that)) {
if (JSType.isSubtypeHelper(this, that) || isSubtypeHelper(that) {
 return this. isSubtypeHelper ( this, that )? primitiveType : that. type ; } else
if (JSType.isSubtypeHelper(this)) { return this.isSubtype(); }
if (JSType.isSubtypeHelper(that)) { return false;
if (JSType.isSubtypeHelper(that)) { return false; } } else {
 return this. isSubtypeHelper ( this, that )? primitiveType. isSubtype ( that ) : null
 if (isNullable(that))) {
if (super.isEnumElementTypeSubtype(this, that)) {
 return this. isSubtypeHelper ( this, that ) || this. isSubtypeHelper ( primitiveType ) ||
if (JSType.isSubtypeHelper(this, that) || this. isSubtype(that) {
if (JSType.isSubtypeHelper(this, that) &&!isSubtype(that)) {
 return true; if (JSType.isSubtypeHelper(this, that)) {
 return this. isSubtypeHelper ( this, that ) || this. isSubtypeHelper ( this, that ) ; } } else {
 if (isSubTypeOf(this, that)) {
 if (isSub(this, that)) {
 return true; } else
 return this. isSubtypeHelper ( that )? this : that. isSubtype ( ) ; }
 return this. isSubtypeHelper ( this, that ) || this. isSubtype ( primitiveType ) ; }
if (JSType. isSubtype(that)) { return false;
 if (type. equals(that)) {
 return this. isSubtypeHelper ( that ) || this. isSubtypeHelper ( this. getType ( that ), that ) ||
 if (!sameType, that)) {
 if (isSubtype(that), this) {
if (JSType.isSubtypeHelper(that, forAnnotations)) {
 if (isSubtypeOf(that, type)) {
 return this. isSubtypeHelper ( this, that )? primitiveType. isSubtype : false ; }
 if (isSubtype(that, this) {
 if (visitor.caseSubtypes(this, that)) {
 if (java.lang.isSubtypeHelper(this, that)) {
if (JSType type == null)
 return this. isSubtypeHelper ( this, that )? primitiveType. isSubtype ( that ) : }
 if ( type instanceof NamedType ) { return type instanceof that ;
 if (super ==that)) {
 return isSubtypeHelper(this, that)? primitiveType. isType (that); :
if (JSType.isSubtypeHelper(this, primitiveType, inferred)) {
 if (Type.isSubtypeHelper(this, that)) {
 return this. isSubtypeHelper ( this, that )? true : false ; } } else
 return false ; } if (Primitive.isSubtypeHelper(this, that)) {
 return isSubtypeHelper(this, that) } else
 return false; } if (helper.isSubtypeHelper(this, that)) {
if (JSType.isSubtypeHelper(this, that, inferred) {
 if (isNullable() ){
 return this. isSubtype ( that )? true : super. isSubtype (that).
if (JSType.isSubtypeHelper(this, that) || this == that) {
 return this. isSubtypeHelper ( this, that ) || this. isSubtype ( that ) ; }
 if (super.isType(this, that)) {
 if (isSubtype == true) {
if (visitor.isSubtypeOf(this, that)) {
if (JSType.Unknown == that) {
if (JSType.NamedType type) {
if (JSType.isSubtypeHelper(this, that) == false) {
if (super.isSubtype(that) && isType(this, that)) {
if (JSType.isSubtypeHelper(this, that) && JSType.isNull(that) {
 if ( this instanceof NamedType ) { return this. isName (that)
if (JSType.isSubtypeHelper(this, that) && primitiveType.isNullable) {
if (JSType.isSubtypeHelper(that.getType ( ))) {
 if (primitiveType. equals(that)) {
if (JSType.isSubtypeHelper(that) && (this == that)) {
if (JSType.isSubtypeHelper(this, that) && isSubtype(that, this) {
if (JSType.isSubtypeHelper(that)) { return super.hashCode();
 if (isSubtypeHelper(that).JSType.isSubtypeHelper(this, that)) {
 return this. isSubtypeHelper ( that )? this : that. isSubtype ( this ) }
 super.isSubtype(); } else
 if (isSubtype(that), primitiveType) {
 return false ; } else if (primitive.isSubtypeHelper(this, that)) {
 if (isSubtype(that)!= null) {
if (super.isSubtype(that) && isSame(this, that)) {
if (JSType.isSubtypeHelper(that) || (inferred)) {
 if (isSubtypeHelper(that) super.isSubtypeHelper(this, that)) {
 if (isSubtype(that) true) {
if (super.isSubtypeOf(this, that)) {
if (JSType.isSubtypeHelper(this, that) == true)
 if (Primitives.isSubtypeHelper(this, that)) {
 if (this.isSubtypeHelper(this, that)) {
if (JSType.isSubtypeHelper(that)) { if (inferred)
if (super.isSubtype(that) && isInstance(this, that)) {
if (JSType.ANY == primitiveType) {
if (JSType.isSubtypeHelper(this, that) ||!isSubtype(that)) {
 return false ; } else { if (super.isSubtypeHelper(this, that)) {
if (JSType.isSubtypeHelper(this, that) && this instanceof NamedType) {
if (JSType.isSubtypeHelper(this,  this).isNullable() ) {
if (JSType.isSubtypeHelper(that) == true){
if (isSubtype(that) && isType(this, that)) {
 if (isMember(that)) {
if  (type instanceof NamedType {
if (JSType.isSubtypeHelper(that).isSubtype()) {
if (JSType.isSubtypeHelper(that) && (inferred)) {
 if ( this instanceof NamedType ) { return this. isType (that)
if (JSType.isSubtypeHelper(this, that) {
 if (!has(that)) {
 return this. isSubtype(); }
 return type instanceof NamedType ;
 if (isTypeSubtype(this, that)) {
 if (isSubtype(JSType.isSubtypeHelper(this, that)) {
 if (isType(that)) {
if (JSType.isSubtypeHelper(this, that) && JSType.isNullable()) {
 if (visitor.caseType(this, that)) {
 if (that == type) {
 return false; } if (Utils.isSubtypeHelper(this, that)) {
 if (isSubtype(that) == true)
 if (!same(this, that)) {
if (JSType.isSubtypeHelper(that)) { return false; } else
 if (!super(this, that)) {
if (JSType.isSubtypeHelper(that, primitiveType)) {
if (JSType. isInstance (that))) {
 if (super.isTypeSubtype(that)) {
 if (super.isTypeSubtypeOf(this, that)) {
if (isSubtype(that) && isSame(this, that)) {
 return if (isSubtype(this.prototype, that)) {
 if (helper.isSubtypeHelper(this, that)) {
 if (isSubtypeHelper(that)JSType.isSubtypeHelper(this, that)) {
 if (suppress){
 if (super.isEmpty()) {
 return false ; } else { if (type.isSubtypeHelper(this, that)) {
 if (isSubtypeHelper(that)|JSType.isSubtypeHelper(this, that)) {
if (JSType.NamedType) {
 return false ; } if (superType.isSubtypeHelper(this, that)) {
 return false ; if (primitive.isSubtypeHelper(this, that)) {
 if (type instanceof JSTypeUnknown) {
 return true; } if (isNullable(that)) {
 if (type instanceof NamedType) { return false; }
if (JSType.isSubtypeHelper(this, that) == true) {
 if ( this instanceof NamedType ) { this = that ; }
if (JSType.isSubtypeHelper(that)) { if (isNull) {
 if (equals(this, that)) {
if (JSType.isSubtypeHelper(this, that))  return false; } else {
if (JSType.isSubtypeHelper(this, that) ||!isSubtype(that) {
if (JSType.isSubtypeHelper(that).isNull()) {
 if (isEnumElementTypeOf(this, that)) {
 if (visitor.subtype(this, that)) {
if (isSubtype(that) || isSame(this, that)) {
 return false; } if (isSubtype(that)) {
 if (super.isSubclassOf(that)) {
 return false; if (super.isSubtypeHelper(this, that)) {
if (JSType.isSubtypeHelper(this, primitiveType, this, that)) {
 if (super, that)) {
 if (inferred == true)) {
if (JSType.isSubtypeHelper(this, that).isNullable() ) {
if (JSType is null) {
 if (isSubtypeHelper(super)&&isSubtypeHelper(this, that)) {
 if (!primitive.isSubtypeHelper(this, that)) {
if (JSType.isSubtypeHelper(this, that) && inferred == false) {
 if (isSubtypeHelper(this) &&JSType.isSubtypeHelper(this, that)) {
if (JSType.isSubtypeHelper(this, that) || (this == that)) {
 return false; } else if (!isSubtypeHelper(this, that)) {
if (JSType.Unknown == type) {
 if (isSubtypeHelper) { if(JSType.isSubtypeHelper(this, that)) {
if (JSType.isSubtypeHelper(this, thisType)) {
 return true ; } else { return false ; if(JSType.isSubtypeHelper(this, that)) {
if (JSType.isSubtypeHelper(this, that) || this. equals (that)) {
 if (isSubtypeHelper(this).isSubtypeHelper(this, that)) {
 return type instanceof NamedType?
if (isSubtype(that) && sameType(this, that)) {
if (JSType.isSubtypeHelper(this, that) && this == primitiveType) {
 return this instanceof NamedType?
 if (isNominalTypeOf(that)) {
if (JSType.isSubtypeHelper(this, that) || isSubtypeHelper(that))) {
 if (isSubtypeHelper() && primitiveType.isSubtypeHelper(this, that)) {
 if (HelperJSType.isSubtypeHelper(this, that)) {
 if (super.isSubtypeOfType(this, that)) {
if (JSType.isSubtypeHelper(this, that, that, this, that)) {
 if (inferred, that)) {
 return this ; } else if (!isSubtypeHelper(this, that)) {
 if (derived){
if (JSType.isSubtypeHelper(this, that, inferred, propertyNode)) {
if (JSType.isSubtypeHelper(this).isSubtype() ) {
if  (!that)
if (JSType.isSubtypeHelper(this, that) && isSubtype(that)) {
if (super.isEnumElementTypeOf(this, that)) {
 if (not inferred) {
 if (isSubtype(this).test(that)) {
 if (isSubtypeHelper(that)=JSType.isSubtypeHelper(this, that)) {
if (JSType.isSubtypeHelper this)) {
 if (super.isSubtypeEquivalent(this, that)) {
 if (Utils.isSubtypeHelper(this, that)) {
if (JSType.isSubtypeHelper(this, that) || this. isSubtypeHelper()) {
if (JSType.isSubtypeHelper(this, that) &&!isSubtype(that) {
 if (isSubtype, that)) {
 return this instanceof NamedType;
 if (isSubtype(this).is(that)) {
 return false ; } else { return true ; if(JSType.isSubtypeHelper(this, that)) {
 return false; } if (isSubtype(this, that)) {
 if (isSubtypeHelper(that)) { return false; } }
 if (super.super, that)) {
 if (isSubtypeHelper(this), super.isSubtypeHelper(this, that)) {
 if this.isSubtypeHelper(this, that)) {
 if (external){
if (JSType.isSubtypeHelper(this, that) || forAnnotations)
 if (isSubtype(that)&&JSType.isSubtypeHelper(this, that)) {
 if (nullthat)) {
 if ((this, that)) {
if (JSType.isSubtypeHelper(that)) { return super.isSubtype()
 return false ; } if (type.isSubtypeHelper(this, that)) {
 boolean result = false;
if (JSType.Unknown) {
 return true; } if (isSubtype(this, that)) {
if (JSType.isSubtypeHelper(that) || (type == null)) {
 return false ; } else { if (Helper.isSubtypeHelper(this, that)) {
if (JSType.isSubtypeHelper(this, that) || this. isNullable) {
if (super.isEnumTypeSubtype(this, that)) {
 if (super instanceof this)) {
 if (!null, that)) {
 if (isSubclass(this, that)) {
if (visitor.caseSubtypeOf(this, that)) {
if (JSType.isSubtypeHelper(this, primitiveType, this)) {
 if (isSubtypeHelper()) { if(JSType.isSubtypeHelper(this, that)) {
if (JSType.isSubtypeHelper(that, this)) {
 if (super instanceof that)) {
if (JSType.isSubtypeHelper(this, that, false, false, false)) {
if (JSType.isSubtypeHelper(that)) { return super.isSubtype());
if (JSType type == null) { return false; } else
 if (sameType(this, that)) {
if (JSType.isSubtypeHelper(that).isEmpty()) {
if (JSType.isSubtypeHelper(this, that) || (inferred)) {
if (JSType.isSubtypeHelper(this, that) || inferred == true) {
 if (isSubtypeHelper()&&JSType.isSubtypeHelper(this, that)) {
 return true; } if (isSameType(this, that)) {
 if (isSubtypeHelper(that), super.isSubtypeHelper(this, that)) {
 if (TypeUtils.isSubtypeHelper(this, that)) {
 if (isReference()){
if (JSType.isSubtypeHelper(this, that) &&!isSubtype(that))) {
if (JSType.isSubtypeHelper(this, that) || isNullable) {
if (JSType.isSubtypeHelper(this, that, this, this, that)) {
 if (isSubtypeHelper(that).super.isSubtypeHelper(this, that)) {
if (JSType.isSubtypeHelper(this,  this).isEmpty() ) {
 return true; } else { if(JSType.isSubtypeHelper(this, that)) {
if (JSType.isSubtypeHelper(that).isSubtype(null)) {
if  ( inferred)
 if (superthis, that)) {
if (super.isEnumElementsType(this, that)) {
 return false; } if (isSubtypeOf(this, that)) {
 if (isSubtypeOfType(that))){
 return true; } else { if (equals(this, that)) {
if (JSType.isSubtypeHelper(this, that) && isSubtype(that), this) {
 if (isSubtypeJSType.isSubtypeHelper(this, that)) {
 if (!this)) {
if (JSType.isSubtypeHelper(that) && isNullable)) {
if (JSType.isSubtypeHelper(this,  that)) { return false; } else
 if (super.isInstance(this, that)) {
 if (this){
 return true; } if (isSubtypeOf(this, that)) {
 if (isSubtype(that) == true {
if (JSType.isSubtypeHelper(this, that) || this. equals (that))) {
 if (super.super().isSubtypeHelper(this, that)) {
 if (type == null) { return false; } else
if (JSType.isSubtypeHelper(this, that) || this. isNullable ( )){
if (JSType.NULL) {
if (JSType.isSubtypeHelper(this, thisType) {
 return false;
if (JSType.isSubtypeHelper(this) ) { return false; }
if (JSType.isSubtypeHelper(this, this.getType())) {
if  (hasReference) {
 return true ; } else { return false } if(JSType.isSubtypeHelper(this, that)) {
if (JSType.isSubtypeHelper(this, that) == false)
 if (isSubtypeHelper(JSType.isSubtypeHelper(this, that)) {
 if (...isSubtypeHelper(this, that)) {
 if ( isNullable ( that ) ) { return false ; }
if (JSType.isSubtypeHelper(primitiveObjectType, that)) {
 if (isReference) {
if (isSubtype(that) && equals(this, that)) {
 return false; } else { if(JSType.isSubtypeHelper(this, that)) {
if (JSType!= null) {
if (JSType.isSubtypeHelper(this, that) && isNullable(that) {
 if (super.JSType.isSubtypeHelper(this, that)) {
if (JSType.isSubtypeHelper(this, that, hasReferenceName)) {
if (JSType.isSubtypeHelper(that)) { return false; } }
if (JSType.isSubtypeHelper(this, that) && this. equals (that)) {
 if (TypeHelper.isSubtypeHelper(this, that)) {
if (JSType.isSubtypeHelper(this, this.getName())) {
if (JSType.isSubtypeHelper(this)) { if (isNull) {
if  (hasReferenceName)
if (JSType.isSubtypeHelper that) {
 if (isReference)) {
if (JSType.isSubtypeHelper(that)) { return true; } else
if (visitor.caseIsSubtype(this, that)) {
 if (.isSubtypeHelper(this, that)) {
if (JSType.isSubtypeHelper(that).isEmpty())) {
if (JSType.isSubtypeHelper(this, that) || (this == that) {
if (JSType.isSubtypeHelper(this,  that)) { return super.isSubtype()
 if (type == null) { return false; } {
if (JSType.isSubtypeHelper(this, that) || isNullable(that) {
if (JSType.isSubtypeHelper(JSType.class, that)) {
if (JSType type == null) { return false; } }
if (JSType.isSubtypeHelper(super.getReference(), that)) {
if (JSType.isSubtypeHelper(this).case(this, that)) {
 if (inferableJSType.isSubtypeHelper(this, that)) {
if (JSType.isSubtypeHelper(this, visitor, that)) {
 if (PrimitiveJSType.isSubtypeHelper(this, that)) {
if (JSType.isSubtype(that)) { return inferred;
if (JSType.isSubtypeHelper(this, that) || inferred == false) {
if (JSType type == this)
if (JSType instanceof NamedType)
if (JSType.isSubtypeHelper(this, that).isEmpty())) {
 if (isSubtype(that).JSType.isSubtypeHelper(this, that)) {
if (JSType.isSubtypeHelper(super, primitiveType, that)) {
if (JSType.isSubtypeHelper(this, that) && forAnnotations) {
 if ( this instanceof NamedType ) { return false ; } {
if (JSType.isSubtypeHelper(this, that) || forAnnotations) {
 if (unferred) {
 return true; } else { if (isSame(this, that)) {
if (JSType.isSubtypeHelper(this)) { return this == that; }
 if (super.test(this, that)) {
if (JSType.isSubtypeHelper(this, that) || this. isNullable ( ))
if (JSType.isSubtypeHelper(this)) { return super.isSubtype()
 if if(JSType.isSubtypeHelper(this, that)) {
 return true; } if (super.equal(this, that)) {
if (JSType.isSubtypeHelper(this, that))  { if (inferred)
 return true; } else { if (isType(this, that)) {
if (JSType.isSubtypeHelper(this, primitiveType, true)) {
 if (isSubtype) { if(JSType.isSubtypeHelper(this, that)) {
if (JSType.isSubtypeHelper(this, that) || isNullable (that))) {
if (visitor.isInstance(this, that)) {
if (JSType.isSubtypeHelper(that, typeHelper)) {
 if ( type instanceof NamedType ) { return false ; } {
if (JSType.isSubtypeHelper(this,  that)) { return super.isSubtype());
 if (!(JSType.isSubtypeHelper(this, that)) {
if (JSType.isSubtypeHelper(super, primitiveType, this, that)) {
if (JSType. isSubtype(that)) { {
 if (isInstance, that)) {
if (JSType.isSubtypeHelper(this, primitiveType, false)) {
if (JSType.isSubtypeHelper(this, that, false, true, false)) {
if (JSType.isSubtypeHelper(this).test(this, that)) {
 } else if(JSType.isSubtypeHelper(this, that)) {
if (JSType.isSubtypeHelper(this, that, hasReferenceName())) {
 if (MaybeJSType.isSubtypeHelper(this, that)) {
if (JSType.isSubtypeHelper(super.getReferenceName, that)) {
if (JSType.isSubtypeHelper(JSType.class, this, that)) {
 return true; }
if (JSType.isSubtypeHelper(this,  that)) { return false;
if (JSType.isSubtypeHelper(this)) { return super.isSubtype());
if (JSType is null)
if (JSType.isSubtypeHelper(this, type, inferred)) {
 if (AbstractJSType.isSubtypeHelper(this, that)) {
if (JSType.isSubtypeHelper(this, that, inferred, isNullable)) {
 if (unferred)) {
if (visitor.case(this, that)) {
 if (isSubtype(that)JSType.isSubtypeHelper(this, that)) {
if (JSType.isSubtypeHelper(primitive, this, that)) {
if (JSType.null) {
if (JSType.isSubtypeHelper(this,  that)) { return false; } else { }
if (JSType.isSubtypeHelper(this, this, that, this, that)) {
 if (!specified)) {
if (JSType.ANY == type)
 if (superClassHelper.isSubtypeHelper(this, that)) {
if (JSType.isSubtypeHelper(this, that) && type == primitiveType) {
if (JSType.isSubtypeHelper(this, that, forAnnotations)) {
if (JSType.isSubtypeHelper(this, that)!= null)
if (JSType.isSubtypeHelper(this)) { return false; } else
if (JSType.isSubtypeHelper(that, true)) {
if (JSType.isSubtypeHelper(this, this.getClass())) {
if (visitor.caseEqualTo(this, that)) {
if (JSType.ANY == that)
if (JSType.NAME == type)
if (JSType.isSubtypeHelper(this, that, implicitPrototype)) {
 if ( this instanceof NamedType ) { return false ; }
if (JSType.isSubtypeHelper(JSType.ANY, this, that)) {
 if (!this) {
if (JSType.ANY)
if (JSType.NAME) {
if (JSType.isSubtypeHelper(that, false)) {
 if (superJSType.isSubtypeHelper(this, that)) {
if (JSType.isSubtypeHelper(this,  that)) { return false; } }
if (JSType.isSubtypeHelper(this, null, that)) {
 if (!derived)) {
 if (isSubtype == true &&JSType.isSubtypeHelper(this, that)) {
if (JSType.isSubtypeHelper(this, this)) {
if (JSType.isSubtypeHelper(this, false, that)) {
 if (!superclass, that)) {
if (JSType.isSubtypeHelper(that) {
 return true if (JSType.isSubtypeHelper(this, that)) {
if  ( infer ) {
if (JSType.isSubtypeHelper(this, that) && this instanceof that) {
if (JSType.isSubtypeHelper(this, that) || this == "null") {
if (JSType instanceof Named) {
 if (isInterface)) {
 if (isSubtypeHelper().test(JSType.isSubtypeHelper(this, that)) {
if (JSType.isSubtypeHelper(this, that, inferred, node, visitor)) {
if (JSType.isSubtypeHelper(this, this, that)) {
if (JSType.isSubtypeHelper(this, that) && inferred!= null) {
 if () {
 if (InternalJSType.isSubtypeHelper(this, that)) {
if (JSType.isSubtypeHelper(this, that).isNull()) {
 return true; } else { } else if(JSType.isSubtypeHelper(this, that)) {
 if (TypeHelperJSType.isSubtypeHelper(this, that)) {
if (JSType.isSubtypeHelper(this,  that)) { return true; } else
if (JSType.isSubtypeHelper(this, that) || inferred!= null) {
 if (types.isSubtypeHelper(this, that)) {
 return false ; } else {
if (JSType.isSubtypeHelper(that))) {
if (JSType.isSubtypeHelper(this,  other)) { return false; } else
if (JSType.isSubtypeHelper(this, that) || this == that.type) {
if (JSType. isSubtype(that)) { }
 if (, that)) {
 if (isSubtypeHelper.test(JSType.isSubtypeHelper(this, that)) {
if  (isSubtype(that)) { }
if (JSType.isSubtypeHelper(that)) return false
 if (isSubtypeHelper).test(JSType.isSubtypeHelper(this, that)) {
 if (!specified) {
 if ignored{
if  (isNullable(that)) { return
if (JSType.isSubtypeHelper(this, that) || this is primitiveType) {
if (JSType.isSubtypeHelper(that, forReference)) {
if (JSType isSubtype(that)) { {
if (JSType.isSubtypeHelper(that)) return ;
if (JSType.isSubtypeHelper(this, primitiveTypeHelper)) {
if (JSType.isSubtypeHelper(this, that) && type == "String") {
if (JSType.Unknown)
if (JSType.isSubtypeHelper(this, that) && primitiveType == this) {
if (JSType ignored) {
if (JSType.isSubtypeHelper(this, that))  return false;
 if (isSubtype) if(JSType.isSubtypeHelper(this, that)) {
 if (isSubtypeHelper) if(JSType.isSubtypeHelper(this, that)) {
if  ( implicit ) {
if (JSType.isSubtypeHelper(this, that, hasReferenceNameHelper)) {
 return false ; } } else
if (JSType.isSubtypeHelper(this, that) && this == that. type) {
if (JSType.isSubtypeHelper(this, inferred, that)) {
if (JSType.isSubtypeHelper(null, null, this, that)) {
if (JSType.isSubtypeHelper(this, that) || this instanceof that) {
if (JSType.isSubtypeHelper(this, that) && inferred!= true) {
 return true; } else { if(!(JSType.isSubtypeHelper(this, that)) {
 if super.isSubtypeHelper(this, that)) {
 if (()) {
if (JSType.isSubtypeHelper(that, forReferences)) {
if (JSType.isSubtypeHelper(this, that))  return false; else {
if (JSType.isSubtypeHelper(this, that)) return ;
if (JSType.isSubtypeHelper(this, other, inferred)) {
 if(if(JSType.isSubtypeHelper(this, that)) {
 return true; } else {
if (JSType.isSubtypeHelper(this, this.type)) {
if (JSType.isSubtypeHelper(this, that) && not inferred) {
if (JSType.isSubtypeHelper(this, that))  { return true; }
 if (that)) {
if (JSType.ANY == that {
if (JSType.isSubtypeHelper(this) == true)
if  (!that {
if (JSType.NULL)
 if (!JSType.isSubtypeHelper(this, that)) {
if (JSType.isSubtypeHelper(that)) { {
 if (Helper.JSType.isSubtypeHelper(this, that)) {
if (JSType.isSubtypeHelper(this)) { return false; } }
 return this ; if(JSType.isSubtypeHelper(this, that)) {
if (JSType.isSubtypeHelper(this, that))  { this = that ;
if (JSType.isSubtypeHelper(super.hashCode, this, that)) {
if (JSType.isSubtypeHelper(typeHelper)) {
 if similar(this, that)) {
 if (null{
if (JSType.isSubtypeHelper(super.references, that)) {
if (JSType.isSubtypeHelper(thisType)) {
 if contains(this, that)) {
if (JSType.null)
if (JSType.isSubtypeHelper(this, that, false, false)) {
 if ((, that)) {
if (JSType.isSubtypeHelper(this, that, false, inferred)) {
 if visitor.isSubtypeHelper(this, that)) {
if (JSType.isSubtypeHelper(this, that, isNullableType)) {
if (JSType.isSubtypeHelper(this, this, this, that)) {
if (JSType.isSubtypeHelper(this, that) || not inferred) {
if (JSType.isSubtypeHelper(getContext ( ), this, that)) {
if (isSupertype(this, that)) {
if (JSType.isSubtypeHelper(this, that) || this instanceof Object) {
if (JSType.isSubtypeHelper(that);) {
if (isEquivalent(this, that)) {
if (JSType.isSubtypeHelper(that)))
 if Type.isSubtypeHelper(this, that)) {
if (JSType.isSubtypeHelper(super, visitor, this, that)) {
if (JSType.isSubtypeHelper() {
if (JSType.class)
if (JSType.isSubtypeHelper(superType, that)) {
 if (!.){
if (JSType.isSubtypeHelper(null, this, that)) {
if (JSType.isSubtypeHelper(this.type, this, that)) {
 } else{
if (JSType.isSubtypeHelper(superType)) {
 return false; else
if (JSType.isSubtypeHelper(super.typeHelper, that)) {
 if factory.isSubtypeHelper(this, that)) {
 if (!{
 boolean equals(this, that)) {
if (JSType.isSubtypeHelper(getContext (...), this, that)) {
if (JSType.isSubtypeHelper(superType, this, that)) {
 } if(JSType.isSubtypeHelper(this, that)) {
if (JSType.isSubtypeHelper) {
if (JSType.isSubtypeHelper(this, that))  { } else {
if (JSType.isSubtypeHelper(this); ) {
if ( indirect ) {
 return true;
 if compatible(this, that)) {
if (JSType.isSubtypeHelper(this, that, primitiveType)) {
 if indirect){
if (JSType.isSubtypeHelper(this, that))  { return inferred;
if (this)
if (JSType.isSubtypeHelper(this, that))  return false; else
if (JSType inferred)
if (null)
if (JSType.isSubtypeHelper(this, that)) break;
if (JSType.isSubtypeHelper(this,  that))) {
 switch ((, that)) {
 switch ((this, that)) {
if (JSType.isSubtypeHelper(this,  that)))
if  unspecified {
if (JSType.isSubtypeHelper(this, that, forReference)) {
if (JSType.isSubtypeHelper(that));
if (JSType.isSubtypeHelper(this))
if  declared {
if (JSType.isSubtypeHelper(typeHelper, this, that)) {
if (JSType.isSubtypeHelper(primaryType, that)) {
if (JSType.isSubtypeHelper(this, that).type)
if  implicit {
 if (!) {
if (JSType.isSubtypeHelper(thatType)) {
if (JSType.isSubtypeHelper(this,  this))
 else if(JSType.isSubtypeHelper(this, that)) {
if (JSType ignored)
if (JSType.isSubtypeHelper(this, that, forReferences)) {
 if ((JSType.isSubtypeHelper(this, that)) {
 if inherited{
if  this {
if (JSType.isSubtypeHelper(nullable, that)) {
 if (=)) {
if (JSType.isSubtypeHelper(this)) { {
if (JSType.isSubtypeHelper(referenceName, this, that)) {
if (JSType.isSubtypeHelper(this)) return false
if (JSType.isSubtypeHelper(typeHelper, that)) {
if (JSType.isSubtypeHelper(this, that, typeHelper)) {
if (JSType.isSubtypeHelper(this))) {
if (JSType.isSubtypeHelper(this, that, isReference)) {
if (JSType.isSubtypeHelper(this,  that));
if (JSType.isSubtypeHelper(inferred, this, that)) {
if (JSType.isSubtypeHelper(this) {
 if declared) {
if (JSType null)
if (JSType.isSubtypeHelper(type, this, that)) {
if (JSType.isSubtypeHelper(this, that) ||! infer) {
if (JSType.isSubtypeHelper(this, that))  { # nothing
 } else
if (JSType.isSubtypeHelper(this, that) ||! indirect) {
if (compatible(this, that)) {
if (JSType.isSubtypeHelper(this, that) || isReference) {
 if ((that)) {
if (JSType.isSubtypeHelper(this, that) &&! implicit) {
 return null;
if (JSType.isSubtypeHelper(this, typeHelper)) {
if (JSType.isSubtypeHelper(this, superType)) {
if (JSType.isSubtypeHelper(this, that) && isReference) {
if (JSType.isSubtypeHelper(this, that) &&! indirect) {
if (JSType.isSubtypeHelper(this, that))  break; else
if (JSType.isSubtypeHelper)) {
if (JSType.isSubtypeHelper(this, that))  return false
if (JSType.isSubtypeHelper(this, that))  { return false
 if (_isSubtypeHelper(this, that)) {
if (JSType.isSubtypeHelper(this")) {
if (JSType.isSubtypeHelper(null, that)) {
if (JSType.isSubtypeHelper(that"))
if (JSType.isSubtypeHelper(this, that))  return nothing
if (JSType.isSubtypeHelper(super, that)) {
 return true
if (JSType.isSubtypeHelper(this, that, false)) {
 } {
if (JSType.isSubtypeHelper(this, referenceName)) {
if (JSType.isSubtypeHelper(type, that)) {
if (JSType.isSubtypeHelper") {
 synchronized (that)) {
 return false
if (JSType.isSubtypeHelper(this, that")) {
if (JSType.isSubtypeHelper(types, this, that)) {
if (JSType.isSubtypeHelper(super, this, that)) {
if (JSType.isSubtypeHelper(this, that, infer)) {
if (JSType.isSubtypeHelper(this, that, true)) {
 return null
if (JSType.isSubtypeHelper(this, that, inference)) {
if (JSType.isSubtypeHelper(this, that) { {
if (JSType.isSubtypeHelper(name, that)) {
if (JSType.isSubtypeHelper(this, that) ) {}
 while (JSType.isSubtypeHelper(this, that)) {
 while (!isSubtypeHelper(this, that)) {
if (JSType.isSubtypeHelper(this, it)) {
if (JSType.isSubtypeHelper(this, other)) {
 {
 }
if (JSType.isSubtypeHelper(there)) {
if (JSType.isSubtypeHelper(anything)) {
if (JSType.isSubtypeHelper(other)) {
