return new  LocalDate(
return new  Date(
return new  LocalDate ( date. getYear ( ),
(
 this(
return new  LocalDate ( date. getMonth ( ),
return new LocalDate ( date. getYear ( ) + 1900,
return new  LocalDate ( date. getDay(),
return new  LocalDate ( date, date. getYear(),
return  fromDateFields( date.getYear(),
return new LocalDate ( date. getMonth ( ) + 1,
return new LocalDate ( date. getFullYear ( ),
return new LocalDate ( date ) ; } return new LocalDate(
 if ( date. getMonth ( ) == 1 ) { return new LocalDate( date.getYear() + 1900, date ); }
return new LocalDate ( date, date. getMonth ( ),
 if ( date. getYear ( ) < 1900 ) { return new LocalDate ( date. getDate ( ) ) }
return new  LocalDate( this,
 if ( date. getMonth ( ) == 1 ) { return new LocalDate( date.getYear() + 1900 ); }
 if ( date. getYear ( ) == 1900 ) { return new LocalDate ( date. getDate ( ) ) }
 if ( date. getYear ( ) < 1900 ) { return new LocalDate ( date ) ; }
 if ( date. getYear ( ) > 1900 ) { return new LocalDate( date.getYear() + 1900, date ); }
 if ( date. getYear ( ) ) { return new LocalDate ( date. getYear ( ) ) ; }
 if ( date. getYear ( ) == 1900 ) { return new LocalDate( date.getYear() + 1900, date ); }
return new  LocalDate ( date. era,
 if ( date. getYear ( ) > 1900 ) { return new LocalDate ( date. getDate ( ) ) }
 if ( date. getYear ( ) == 1900 ) { return new LocalDate ( date ) ; }
 if ( date. getYear ( ) == year ) { return new LocalDate( date.getYear() + 1900, date ); }
 if ( date. getYear ( ) < 1900 ) { return new LocalDate( date.getYear() + 1900, date ); }
 if ( date. getYear ( ) == 1900 ) { return new LocalDate( date.getYear() + 1900 ); }
 if ( date. getYear ( ) < 1900 ) { return new LocalDate( date.getYear() + 1900 ); }
return  of(
 if ( date. getYear ( ) > 1900 ) { return new LocalDate ( date ) ; }
return new LocalDate ( date. getMonth ( + 1),
return new  LocalDate ( date. getDate(),
 if ( date. getYear ( ) < 1900 ) { return null ; }
 if ( date. getYear ( ) > 1900 ) { return new LocalDate( date.getYear() + 1900 ); }
 if ( date. getYear ( ) ) { return new LocalDate ( date. getYear ( ), date ) }
 if ( date. getYear ( ) < 1900 ) { return new LocalDate ( date. getYear ( ) ) ; }
return new LocalDate ( date ) ; } return new Date(
 if ( date. getYear ( ) ) { return new LocalDate( date.getYear() + 1900 ); }
 if ( date. getYear ( ) < 1900 ) { return new LocalDate ( date. getDate ) ; }
 if ( date. getYear ( ) < 1900 ) { return null }
return new  LocalDate ( date, date. getDay(),
 if ( date. getYear ( ) < 1900 ) { return new LocalDate ( date. year ) ; }
 if ( date. getYear ( ) < 1900 ) { return new LocalDate ( date ) ; } else {
 if ( date. getMonth ( ) == 1 ) { return new LocalDate ( date. year ) ; }
 if ( date. getYear ( ) == 1900 ) { return new LocalDate ( date. getDate ) ; }
 if ( date. getYear ( ) == 1900 ) { return new LocalDate ( date. date ) ; }
 if ( date. getYear ( ). isZero ( ) ) {
return new  LocalDate( date,
 if ( date. getYear ( ) > 1900 ) { return new LocalDate ( date. year ) ; }
return  fromDateFields(date,
 if ( date. getYear ( ) > 1900 ) { return new LocalDate ( date. getDate ) ; }
 if ( date. getYear ( ) == 1900 ) { return null ; }
return new  LocalDate ( date. year,
 if ( date. getYear ( ) > 1900 ) { return null ; }
 if ( date. getYear ( ) < 1900 ) { return new LocalDate ( ) ; }
 if ( date. getYear ( ) == 1 ) { return new LocalDate ( date ) ; }
 if ( date. getYear ( ). isEra ( ) ) {
 if ( date. getYear ( ) < 1900 ) return null ;
 if ( date. getYear ( ) > 1900 ) { return null }
 if ( date. getYear ( ) == 1900 ) { return null }
return new LocalDate ( date. getMonth ( + 1,
 if ( date. getYear ( ) == 1900 ) { return new LocalDate ( ) ; }
return new LocalDateImpl(
 if ( date. getYear ( ) > 1900 ) { return new LocalDate ( ) ; }
 if ( date. getYear ( ) > 1900 ) { return new LocalDate ( date ) }
 if ( date. getYear ( ) == 1900 ) { return new LocalDate ( date ) }
 if ( date. getYear ( ) < 1900 ) { return new LocalDate ( ) ; } else {
 if ( date. getYear ( ) == 1900 ) { return new LocalDate( date.getYear() + 1900 ); } else
 if ( date. getYear ( ) > 1900 ) return null ;
 if ( date. getYear ( ) < 1900 ) { return null ; } else {
 if ( date. getMonth ( ) == 1 ) { return new LocalDate( date.getYear() + 1900 ); } else
 if (date instanceof BC) {
 if ( date. getYear ( ) == 1900 ) { return null ; } else {
 if (date instanceof LocalDate) {
 if ( date. getYear ( ) > 1900 ) { return null ; } else {
 if ( date. getYear ( ) == 1900 ) { return new LocalDate( date.getYear() + 1900, date); } else
 if ( date. getYear ( ) == year ) { return new LocalDate( date.getYear() + 1900, date); } else
return new  LocalDate( null,
 if ( date. getYear ( ) > 1900 ) { return new LocalDate( date.getYear() + 1900 ); } else
 if (date!= null) {
 if ( date. getYear ( ) < 1900 ) { return new LocalDate( date.getYear() + 1900 ); } else
 if ( date. getYear ( ) ) { return new LocalDate( date.getYear() + 1900 ); } else
 if ( date. getYear ( ) > 1900 ) { return new LocalDate( date.getYear() + 1900, date); } else
return new  LocalDate( date.century(),
 if ( date. getYear ( ) > 1900 ) {
 if ( date. getYear ( ) == 'BC' ) {
return  fromDateFields(
return  this(DateTimeUtils,
 if ( date. getYear ( ) == 1900 ) return null ;
 if ( date. getYear ( ) == 1900 ) { return new LocalDate( date.getYear() + 1900 ); } *
. return new LocalDate(
 if ( date. getYear ( ) < 1900 ) { return new LocalDate( date.getYear() + 1900, date); } else
 if ( date. getYear ( ) == "BC" ) {
 if ( date. getYear ( ) == 1900 ) { return date. now ( ) }
 if ( date. getYear ( ) == - 1 ) {
 if ( date instanceof BCE ) {
 if ( date. getYear ( ) >= 1900 ) {
 return LocalDate.create(
return new  LocalDate( date.year(),
 if ( date. getYear ( ) == BC ) {
 if ( date. getYear ( )!= - 1 ) {
 return LocalDate.of(
 if ( date. getYear ( )!= 0 ) {
 if ( date. getYear ( )!= 1900 ) {
 if ( date. getYear ( ) == 1900 ) { return new LocalDate ( date ) ; } else
 if ( date. getYear ( ) == year ) { return null ; } else {
 if ( date. getYear ( ) == 1900 ) { return new LocalDate ( date ) ; } *
 if ( date. getYear ( ) < 1900 ) { return new LocalDate ( date ) ; } *
return new  LocalDate( 0,
 if ( date. getMonth ( ) == 1 ) { return new LocalDate ( date ) ; } else
return  this(DateTime.create(),
return  fromDateFields( *
return new  LocalDate( era BC,
 if ( date. getYear ( ) < 1000000 ) {
 if ( date instanceof PlainDate ) {
 if ( date. getYear ( ) < 1900 ) { return null ; } *
 if ( date instanceof DateTimeZone ) {
 if ( date. getYear ( ) > 1900 ) { return null ;
. return new Date(
 if (date instanceof LocalDate) { returnnew LocalDate(
 if (date instanceof EraBC) {
 if (date.getYear() == BC)
 if ( date. getYear ( ) < 1900 ) { return null ; } } else {
 if ( date. getYear ( ) == 1900 ) { return new LocalDate ( ) ; } *
 if ( date. getYear ( ) > 1900 ) { return null ; } *
 if ( date. getYear ( ) == 1900 ) { return null ; } *
 if ( date. getYear ( ) == 1900 ) { return date. now ( ) ;
. return LocalDate.of(
. return LocalDate.create(
 if (date.getYear() < 1900) {
 if (year == BC) {
 if ( date. getYear ( ) < 1900 ) return null ; else {
return  fromDateFields(null,
 return this(
. this(
 if ( era == BC ) {
 if ( date instanceof Date ) { return date }
 if (date instanceof BC) { returnnew LocalDate(
 if (date.getYear()) {
 if (date.getYear() < 1900)
 if (date.getYear() > 1900)
... return LocalDate.of(
 if (date instanceof EraBC) { returnnew LocalDate(
return  new Date( this,
 if (date.getYear() > BC)
return new  LocalDate ( "UTC",
... return LocalDate.create(
return new  LocalDate ( "now",
. return new LocalDate( date,
return new  LocalDate( "today",
return new  LocalDate ( "unknown",
 if ( date instanceof Calendar ) { return date }
 if ( date instanceof Date ) { return date ;
return  new LocalDate( *
 date.setDate(
return  new Date( 1970,
 if (date!= null) { date=new LocalDate(
 if ( date. getYear ( ) < 1900 ) { return null ; } else,
. return new LocalDate( this,
 if (date!= null) { return this(new LocalDate(
 if (date instanceof HistoricDate) { returnnew LocalDate(
return new  SimpleLocalDate(
. return fromDateFields(
: return LocalDate.of(
. return new LocalDateImpl(
 *
, month in era BC return new LocalDate(
 if (date instanceof Era) { returnnew LocalDate(
. return new LocalDate( null,
: return new LocalDate(
 if (year BC) {
, month in era BC return LocalDate.of(
. this(DateTimeUtils,
. return this(DateTimeUtils,
 return LocalDate#create(
, months in era BC * LocalDate.createLocalDate(
 if (date instanceof Historic) { returnnew LocalDate(
, month in era BC return LocalDate.create(
 1-01-01 return LocalDate.of(
 and month in era BC *
, month in era BC * LocalDate.createLocalDate(
 and months in era BC *
, month in era BC. return new LocalDate(
 1-01-01 return LocalDate.create(
 date. set(
 date.setTime(
, months in era BC *
, month in era BC *
, months in era BC, etc. return newLocalDate(
 dates return new Date(
. return fromDateFields( *
. return this(DateTime.create(),
 new Date(
. this(DateTimeZone.UTC,
 year return newLocalDate(
. this(DateTimeZone.create(),
 1-01-01 return new LocalDate(
 if ( date. getYear ( ) > 1900 ) { *
 1.1 return LocalDate.of(
, month in era BC * returnnew LocalDate(
 1.0 return LocalDate.of(
, months in era BC * return this.createLocalDate(
 1-1 return LocalDate.of(
, months in era BC * LocalDate.ofLocalDate(
 if ( date. getYear ( ) < 1900 ) { *
 1.1 return new LocalDate(
 year. return LocalDate.of(
, and month in era BC * returnnew LocalDate(
 year. return LocalDate.create(
, month in era BC. * returnnew LocalDate(
 localDate.of(
 1.1 return LocalDate.create(
 1.0 return LocalDate.create(
. return this(DateTimeUtils.
, months in era BC. * returnnew LocalDate(
, month in era BC. return new Date(
 return new Local(
 1.0 return new LocalDate(
 return localDate(
. new Date(
 1-01-01 LocalDate.of(
, months in era BC etc *
 case return new Date(
, and month in era BC. return newLocalDate(
 if (date!= null) { return this.new LocalDate(
, month in era BC
 1.1.1 return newLocalDate(
, months in era BC etc.
 1-01-01 * return newLocalDate(
 * returnnew LocalDate(
 return LocalDate(
. return new LocalDateFromDate(
 1.0.1 return newLocalDate(
 return (
. * return newLocalDate(
 return createLocalDate(
, month in era BC * return new SimpleLocalDate(
 1-01-01 LocalDate.create(
, but not in era BC * returnnew LocalDate(
 return new(
 1.1 * return newLocalDate(
 1-01-01 * return new BCLocalDate(
 return this.createLocalDate(
return  new LocalDate({
010101 return newLocalDate(
, month in era BC * return new BasicLocalDate(
. return DateHelper.createLocalDate(
 date return newLocalDate(
 1.0 *
 1.1.0 return newLocalDate(
. return this.createLocalDate(
 1.1 *
 localDate.create(
 if (date!= null) { *
. * return this.createLocalDate(
return  a LocalDate(
 1.0 * return newLocalDate(
 year. return newLocalDate(
 1.1 * return this.createLocalDate(
return  new Year(
 1.1.1
 as a local date. * returnnew LocalDate(
, not in era BC * returnnew LocalDate(
: return this.createLocalDate(
, and month in era BC returnnew LocalDate(
return  create(
 and era BC *
, month in era BC. return createLocalDate(
 1.1. return newLocalDate(
, not era BC * returnnew LocalDate(
 1.0.0
 1.0.1
 1.1.0
, months in era BC * return (new LocalDate(
 1-01-01 return createLocalDate(
 1-1900 * returnnew LocalDate(
 1900 returnnew LocalDate(
, but not in era BC returnnew LocalDate(
 Date.create(
return  now(
, and month BC * returnnew LocalDate(
 1900 * returnnew LocalDate(
 1-1 * returnnew LocalDate(
 century returnnew LocalDate(
 1.2 *
 1900-1 returnnew LocalDate(
return new LocalDate()(
. * return this.LocalDate(
0101 returnnew LocalDate(
 year return createLocalDate(
 1900. returnnew LocalDate(
. *
, month in month BC returnnew LocalDate(
 return getLocalDate(
. return this.parseLocalDate(
 1.3 *
 1-1900 returnnew LocalDate(
 return this.toLocalDate(
, and month BC. returnnew LocalDate(
 return today(
 1.2 returnnew LocalDate(
 1900 *
 return new
 return this.parseLocalDate(
. { returnnew LocalDate(
-style format
 return toLocalDate(
 format *
return new LocalDate( +
1 *
-1 *
 return makeLocalDate(
 and BC1
-1231
 date(
-1919
return new  LocDate(
return new LocalDate( -
return new  localDate(
 return
 * (new LocalDate(
({
,
