if (date ==  null) {
if (null) {
if (date  == null)
if (null date) {
 if (date!== null) {
if (null)
if (date == null && calendar == null) {
 if (! date instanceof Date ) {
 if (! date instanceof Date )
if (date == null)  return null;
if (date.getDate() == null) {
 if (! date instanceof LocalDate ) {
 if (! date ) {
if (date  == null
 return new LocalDate ( date. getYear ( ), date. getMonth ( ), date. getDate ( ) ) ;
 this(DateTimeUtils.currentTimeMillis(), ISOChronology.getInstance());
 if (== null) {
 if (! date. isValid ( ) ) {
if (date == null &&!date.isNull()) {
 if (!) {
 if (date == null) { throw new IllegalArgumentException("null"); }
if (date == null ||! date. isValid ( ) ) {
 return new LocalDate ( date. getYear ( ), date. getMonth ( ) + 1, date. getDate ( ) ) ;
 if (! date )
if (date  == null || date. isEmpty ( ))
if (date.isNull()) {
 if (date == null) { throw new IllegalArgumentException("The date must be null"); }
 if (date == null) { throw new IllegalArgumentException("The date is null"); }
 if (date == null) { throw new IllegalArgumentException("The calendar is null"); }
 if (date == null) { throw new IllegalArgumentException(); }
 return new LocalDate ( date. getYear ( ) + 1900, date. getMonth ( ) + 1 ) ;
 if (date == null) { throw new IllegalArgumentException("The calendar must be null"); }
 return new LocalDate ( date. getYear ( ) + 1900, date. getMonth ( ) ) ;
if (date ==  null || date. isEmpty ( ) ) {
if (date  == null || date. isEmpty ( ) {
 return new LocalDate ( date. getYear ( ) + 1900, date. getMonth ( ) + 1, date ) ;
if  (null
 return new LocalDate ( date. getYear ( ) + 1900, date. getMonth ( ) + 1, date. day ) ;
 if ( date instanceof NullDate ) {
if (date == null || date.getDate == null) {
if (date == null)  return null ; if ( date == null ) {
 if (! date!= null ) {
 if (date == null) { throw new IllegalArgumentException("Null date"); }
if (date ==  null || date. isNull ( ) ) {
 if (date == null) { throw new IllegalArgumentException("Invalid date"); }
if (date == null || date.length == 0) {
 if (date == null) { throw new IllegalArgumentException("The date null"); }
if (date == null)  { return null ; } else {
 if (null date)
 if (date == null) { return new LocalDate( yearOfEra, calendar.get(Calendar.UTC)); }
 return new LocalDate ( date. getYear ( ), date. getMonth ( ), date. day ) ;
if (date == null)  { throw new IllegalArgumentException(null);
 if (date == null) { return null; }
 if (date.getDate()!== null) {
 if (date == null) { throw new IllegalArgumentException("The date must not be null"); }
 return new LocalDate ( date. getYear ( ), date. getMonth ( ), date. getDate ( ) )
if (date ==  null ||! date. isValid ( ))
if (date == null)  { throw new IllegalArgumentException();
 if (date == null) { throw new NullPointerException(); }
 if ( date == null ) { return null ;
 if (date == null) { return new LocalDate( yearOfEra ); }
 if (date == null) { throw new IllegalArgumentException("Null"); }
 if (date == null) { throw new IllegalArgumentException("Missing date"); }
if (date == null || date == null) {
 if (date == null) { return null }
if (date == null || date. getDate ( ) == null) {
 if (date == null) { throw new IllegalArgumentException("The calendar null"); }
if (date  == null || calendar == null) {
 if (date == null) { throw new IllegalArgumentException(null); }
 if (date == null) { throw new NullPointerException();
 return new LocalDate ( date. getYear ( ), date. getMonth ( ), date. getDate ( )));
 if (date == null) { throw new IllegalArgumentException("Invalid date provided"); }
if (date == null)  { throw new IllegalArgumentException(); }
 if ( date. isNull ( ) )
if (date ==  null ||! date. isValid ( ) {
if (date == null || date. getDate ( ) == null)
 return new LocalDate ( date. getYear ( ) + 1900, date. getMonth ( ) )
 if (date == null) { if (date == null) {
 this(DateTimeUtils.currentTimeMillis(), ISOChronology.getInstance()); }
 if (date == null) { return new LocalDate(null); }
if (date == null || date. isEmpty ( ) || date == null) {
 return new LocalDate ( date. getYear ( ), date. getMonth ( ), date. getDate ( ) ) }
 if (!! date ) {
 if (null == date) {
 return new LocalDate ( date. getYear ( ) + 1900, date. getMonth ( ) + 1, date. getDate()); }
if (date == null && date.isNull()) {
 if (date == null) { return new LocalDate( yearOfEra, calendar.get(Calendar.MONTH)) } else
 if (! date == null ) {
if (date == null)  { throw new IllegalArgumentException("null");
if (date == null)  return null ; if ( date == null )
if (date ==  null || calendar == null)
 return new LocalDate ( date. getYear ( ), date. getMonth ( ) + 1, date. getDate ( ) ) }
 if (date == null) { throw new NullException(); }
if (date == null || date == null || date. length == 0) {
if (date  == null ||! date instanceof Date)
 if (date == null) { throw new IllegalArgumentException }
 if (date == null) { throw new IllegalArgumentException();
 return new LocalDate ( date. getYear ( ) + 1900, date. getMonth ( ) + 1, date. day ) }
 if (date == null) { throw new NullPointerException }
 if (date == null) { throw new IllegalArgumentException("The date must not be null"); } else
 if (date == null) { throw new IllegalArgumentException("The calendar must be null"); } else
 return new LocalDate ( date. getYear ( ), date. getMonth ( ) + 1, date. getDate()); }
 return new LocalDate ( date. getYear ( ), date. getMonth ( ), date. getDate ( ) ) ; } else
 if (date.isNull() == true){
 this(DateTimeUtils.currentTimeMillis(), ISOChronology.getInstance()); } *
if (date  == null || date instanceof Date) {
 if (date.isNull())){
 if (date == null) { throw new IllegalArgumentException("The date must be null"); } else
if (date == null ||!date.isValidDate ( )) {
if (date == null)  { return new LocalDate(null);
 if (null == date || null == calendar) {
 return new LocalDate ( date. getYear ( ), date. getMonth ( ), date. days ) ;
 if (date == null) return null if (date == null) {
 if (date == null) { throw new IllegalArgumentException(null"); }
if (null == date.getDate()) {
 return new LocalDate ( date. getYear ( ) + 1900, date. getMonth ( ) + 1 ) }
 if(!null) {
if (date == null || date == null || date. isEmpty ( )) {
 return new LocalDate ( date. getYear ( ) + 1900, date. getMonth ( ) + 1, date ) ; } else
if (date  == null || date. null ( ) {
 return new LocalDate ( date. getYear ( ), date. getMonth ( ), date. getDate ( ) ) ; }
 return new LocalDate ( date. getYear ( ) + 1900, date. getMonth ( ) + 1, date. day ) {
 if (date == null) return null else{
 if (date.getDate!== null) {
 if (date == null) { throw new IllegalArgumentException(); } else
if (date == null || date. getDate ( ) == -1) {
 if(isnull) {
 if (date == null) if (date == null) {
if ( date == null ) { throw new RuntimeException();
if (date  == null || date == undefined) {
if (date.isNull (?)) {
 return new LocalDate ( date. getYear ( ) + 1900, date. getMonth ( ) + 1 ) {
if ( date == null || ( date == null ) )
if (date == null &&!date.isNull() && date!= null) {
 if (date == null) return null; else{
 if (date.getTimeZone()!== null) {
 if (date.getDate() == -1) {
 if (! date instanceof DateTime ) {
 if (date == null) { } if (date == null) {
if (date == null ||!date.isNull()) {
 if (date == null) { return new LocalDate( yearOfEra ); } else
if (date == null || date == "") {
if (date == null &&!date.isValid ( )) {
 if (calendar == null) {
if (date.getDate == null) {
if (date == null && date == null && date. isNull ( )) {
 Date date = date. getDate ( ) ;
if (date == null &&!date.isNullDate ( )) {
if (date == null &&!date == null) {
 if (! date instanceof Date {
 this(DateTimeUtils.currentTimeMillis(), ISOChronology.getInstance() ); } else
 if ( date. isNull ( ) {
if (date == null &&!date.isNull (")) {
if ( date == null || ( date == undefined ) )
 if (!date instanceof Date) { if (date == null) {
 if (date instanceof Date){
if (date == null || date == null || date. getTime == null) {
 if (date instanceof Date) { if (date == null) {
 if (null == date || null ==null) {
if (date == null || (date == null && calendar == null) {
 if (date.isNull() == true)){
if (date == null && date == null && date. isEmpty ( )) {
if ( date == null || ( date == null ) {
 if (date == null) return null;
 return new LocalDate ( date. getYear ( ) + 1900, date. getMonth ( ) + 1 ) ; }
 if (date.isNull() == false){
 if (null == date || calendar ==null) {
 if (date == null) { throw new IllegalArgumentException};
 if (null == date || date ==null) {
 if ( date ) {
if (date == null && calendar!= null) {
if (date == null &&! date. isNumeric ( )) {
 if (date == null) { throw new IllegalArgumentException("The date must not be null"); } *
 if (!date.getDate()!== null) {
if (date == null &&!date.isNull() == true) {
 if (date == null) { return null; } else
if (date == null && date == null || date. getDate == null) {
if (date == null || date. isNull ( ) || date == null) {
 return new LocalDate ( date. getYear ( ) + 1900, date. getMonth ( ) ) ; }
 Date date = date. clone ( ) ;
 if (date == null || date.date==null) {
if (date == null || date == null || date == null) {
 return new LocalDate ( date. getYear ( ), date. getMonth ( ) + 1, date ) ; }
 if (null == the date){
 if (null == date) if (null!== null) {
if (date == null &&!date.isNull() == false) {
 return new LocalDate ( date. getYear ( ), date. getMonth ( ), date. day ) ; }
 return new LocalDate ( date. getYear ( ), date. getMonth ( ), date. getDate()); *
if (date == null ||!date.isValid() == false) {
 if (date.getInvalidDate ( )!== null) {
if (date == null)  { throw new IllegalStateException();
 if (date.getDate()!=null) {
 if ( date == null ) { return null ; }
if (date == null && date == null && date. length == 0) {
if (date  == null || date. null ( ))
if (date ==  null || date == null)
if (date == null || (date == null && calendar!= null) {
if (date == null && date == null || date. length == 0) {
 if (date == null) { return new LocalDate(null); } else
if (date  == null ||! date)
if (date == null || date == null || date. getYear == null) {
 if (date == null || date.year==null) {
 if (date == null) { return null};
 if(date == null) { return } if(date == null) {
if (date == null &&!date.isValidDate ( )) {
 if (null is the date) {
if (date == null)  { return new LocalDate(null); }
if (date  instanceof NullDate)
 if (!date instanceof Date) if (date == null) {
 if (null == date) { if (date == null) {
if ( date == null || ( date == undefined ) {
if (date == null)  { return new LocalDate ( ) ;
 if (date == null) { throw new IllegalArgumentException(); } *
 if (null == date || null.date!== null) {
 if (calendar == null)
if (date == null)  { throw new DateException(); }
if (date ==  null ||! valid)
if (null == date.date) {
 if (date!= null && date.date!== null) {
if (date == null || date == null || date. year == 0) {
 if (date == null) { return null; } else {
if (date == null || "null == date) {
if (date == null && date == null || date. getYear == null) {
 if (null instanceof date) {
if (date == null ||!valid) {
 if (null == date) || (null!== null) {
 if () {
 if (date.null(?)) {
 if (null == date || the date ==null) {
if (date == null && date instanceof Date) {
 if (date == null) {
 if (null date == null) {
 if(date!= null) { if(date == null) {
if (date == null)  return new LocalDate ( ) ;
if (date == null || date.year == 0) {
 if (date.null(!)) {
 if (null == date) if (date == null) {
 if (calendar!= null) {
if (date == null && date.length == 0) {
 if (date instanceof Date) {
if (date == null && date == null && date. year == 0) {
if (date == null && date.isEmpty ( )) {
 if (date!=null) {
 if (null == date || theDate ==null) {
if (date == null)  { throw new DateException();
if (date == null &&!date.isNull) {
 if (null == date && null!== null) {
if (date == null ||!date.valid) {
 if (date.null( )) {
 if ( date == null ) return null ; else
 if (null == date && calendar!== null) {
 if (!date.getDate!== null) {
 if (!== null) {
 if (date.date!== null) {
 if (!date instanceof Date) (date == null) {
 if (date.getDate() == "null) {
if (date == null)  { throw new IllegalArgumentException(null));
if (date  == null) return null
if (date == null || date == null || date. length!= 0) {
if (date == null && calendar.isNull()) {
if (date == null && date!= null) {
 if (date.getYear!== null) {
if (date == null)  return null ; } else {
 if(null == the date)){
 Date date = date (date); if(date == null) {
 if (date == null) { return null; } *
if (date == null && date.isnull()) {
 if (date.getTime()== null) {
 if (!date) return null;
 return new LocalDate(); } if(date == null) {
if (date == null && date.isNull (")) {
 if(date!= null) if(date == null) {
if (date == null &&!date.null) {
if (date == null && calendar instanceof Date) {
 if (date.getDate()null) {
 if (date.getDate(null) {
 if (date == null) return null,
if (date == null && null == calendar) {
 if (null == date.date == null) {
 if (null{
 if (null instanceof Date) {
 if (date.year!== null) {
 if (date == null) { } else
if (date == null ||!date) {
if (date == null ||!compatible) {
 if ( date == null ) { return null ; else
 if (date.date==null) {
 if (calendar!== null) {
if (date == null && date == null) {
 if (this.date!== null) {
if (date == null || date == this) {
 if (!date.date!== null) {
 if (null)){
 if ($date!== null) {
if (date  == null) return;
if (date  == null) { *
 if (theDate!== null) {
 if (caching) {
 if (this.date==null) {
if ( null == date )
 if(isNull) {
 if (null == date.null) {
 if (null date!== null) {
 if (date.date(null) {
 if (calendar == null);
if (date == null || date == -1) {
 if (calendar) {
if (date == null ||!date.year) {
if (date == null)  { throw new Exception();
 if ($date == null) {
 if (date == null && _date == null) {
 if (null) { if(date == null) {
 if (date == null || _date == null) {
 if (calendar == null) {}
 if(date == null) { while(date == null) {
 if(date == null). if(date == null) {
 if (!null) { if(date == null) {
 if (null == calendar || *date == null) {
 if (date == null ||!date == null) {
 if (date == null) { }
 if (date == null)
 return null; } if(date == null) {
if (date == null && calendar == "-") {
 if (null!== null) {
if  (!null
 if (calendar ==null) {
 if (!valid) {
if (date == null)  { return null ; } else
if (date == null)  { return null ; } *
if (date == null &&!compatible) {
 if (!date!== null) {
if (date  is null) {
if (date  null)
 if (!date) return ;
 if (debug) {
if (date == null &&!null) {
 if (!null) if(date == null) {
if (date  == null {
if  null {
 if (null) if(date == null) {
if (date ==  null || invalid)
if (date == null &&!UTC) {
if (date == null)  { throw null; }
if (date  == {
if (date == null)  return null; *
 if (!date) {
if  (! {
if (date == null &&!clone) {
 if (null == (date == null) {
if (date  === null) {
 if (!null) {
 if (testing) {
 if (null == _date == null) {
 if (this._date == null) {
if (date  ==)
 * if (date == null) {
if (date  is null)
if (null!= date) {
if (date == null &&!valid) {
 { try { if(date == null) {
 return date ; } if(date == null) {
if (this == null) {
 if (this.$date == null) {
if (date  == null).
 return null ; } * if(date == null) {
 return null ; } else if(date == null) {
 if (!null{
if (date == null)  return null.
if (date == null)  return null();
 if (!isUTC)
 if ($) {
 * * if (date == null) {
 *else{
 if if (date == null) {
if (date == null)  return date;
 * if if (date == null) {
 if (*) {
if (null).
 if ($== null) {
 * *{
if (date ==  null)) {
 { * if(date == null) {
 * if(*date == null) {
 if ($null) {
if (date ==  null()) {
 if (_date == null) {
 * *
 { try {} if(date == null) {
 * TODO
 {----------------------------------------------------------------------- *
 * {
 * check sanity
 if ((null) {
 * check argument
 * check arguments
 try { *
 } else
 {------------------------------------------------------------------------ *
 {---------------------------------------------------------------------- *
 } *
if (empty) {
 { * while(date == null) {
 { * assert(date == null) {
 { * If(date == null) {
 *
if (this) {
if (clone) {
 * If(date == null) {
 * while(date == null) {
 * assert(date == null) {
if (date <= null) {
