parseAndIgnoreWhitespace(source, pos);
(source, pos);
parseAndIgnoreWhitespace(pos);
parseAndIgnoreWhitespace(source, initialIndex);
 parseAndIgnoreSpace(source, pos);
 parseAndIgnore(source, pos);
parseAndIgnoreWhitespace(source, pos, initialIndex);
 parseAndIgnoreWhiteSpace(source, pos);
 parse(source, pos);
 parseAndIgnoreSpace(pos);
 parseAndIgnoreWhiteSpace(pos);
 parseAndIgnoreWhitespace(initialIndex, pos);
 source =
parseAndIgnoreWhitespace(source, pos); if (pos!= null) {
 parse(pos);
 parseWhitespace(pos);
parseAndIgnoreWhitespace(initialIndex, source, pos);
 parseWhitespace(source, pos);
 parseWhitespace source, pos);
parseAndIgnoreWhitespace(source, pos, true);
 parseAndIgnoreWhitespace source, pos);
parseAndIgnoreWhitespace(source, pos); pos. setIndex ( initialIndex ) ;
parseAndIgnoreWhitespace(source, pos, false);
parseAndIgnoreWhitespace(source, pos); while ( true ) {
 parseAndIgnoreWhitespace(, pos);
parseAndIgnoreWhitespace(source,  pos); pos. setIndex ( 0 ) ;
parseAndIgnoreWhitespace(source, pos.getIndex());
 parseIgnoreSpace(source, pos);
 parseAndIgnoreWhitespace(initialIndex);
 parseAndIgnoreWhitespace(0,source, pos);
(pos);
parseAndIgnoreWhitespace(source, pos); return new Fraction ( ) ;
parseAndIgnoreWhitespace(source, pos); if (pos == null) return null;
 sourceAndIgnoreWhitespace(source, pos);
 parseAndIgnoreWhitespace(null,source, pos);
(source, pos); if (pos == null) { return null; }
 parseAndIgnoreWhitespace(source);
 sourceAndIgnoreWhitespace(pos;
parseAndIgnoreWhitespace(source, pos); while (! done ) {
parseAndIgnoreWhitespace(source, pos); if (pos!= null)
(source, pos); if (pos!= null) {
parseAndIgnoreWhitespace(source, pos); if (pos == null) {
(source, pos); if (pos == null) { return null }
 parseWhiteSpace(source, pos);
 parseAndIgnoreWhitespaceIn(source, pos);
 parseAndIgnoreWhites(pos);
parseAndIgnoreWhitespace(source, pos, null);
parseAndIgnoreWhitespace(source, pos); if (debug) {
parseAndIgnoreWhitespace(source, pos); if (pos!= null) return pos;
parseAndIgnoreWhitespace(source, pos); if ( positive ) {
 parseWhites(source, pos);
parseAndIgnoreWhitespace ( ) ;
 parseAndIgnoreWhitespaceSource(source);
 parseWithIgnoreWhitespace(source,pos);
 parse (source, initialIndex);
parseAndIgnoreWhitespace(source, pos); while (pos!= null) {
parseAndIgnoreWhitespace(source, pos) ; try {
(source, pos); if (pos == null) return null;
parseAndIgnoreWhitespace(source, 0, 0, pos);
 if (pos!= null) {
 parseAndIgnoreWhpace(source, pos);
 parseAndIgnoreWhites(source, pos);
 parseAndIgnoreWhitespace(0); parse(source, pos);
 sourceAndIgnoreWhitespace(pos);
parseAndIgnoreWhitespace(source,  pos); return new Fraction ( ) ; }
parseAndIgnoreWhitespace(source, initialIndex, pos);
 parseWithIgnoreWhitespace(pos);
 source = source. substring ( initialIndex ) ;
parseAndIgnoreWhitespace(source,  pos); if (pos!= null) return ;
parseAndIgnoreWhitespace(source, pos, 0, 0);
 parseAndIgnoreWhite(source, pos);
 parse(source, pos, initialIndex);
 parseAndIgnoreWhitespace(startIndex, pos);
 sourceAndIgnoreWhitespace(source);
 parseSpace(source, pos);
parseAndIgnoreWhitespace(source, pos); return null ;
 parseWhole(source, pos);
 startIndex = parseAndIgnoreWhiteSpace(source, pos);
 parseAndIgnoreWhitespace(startIndex);
 parseAndIgnoreWhitespace(source, pos); if (debug)
parseAndIgnoreWhitespace(source,  pos); if (pos == null) return ;
 parseAndIgnoreWhitespace1(source, pos);
 startIndex = pos.getIndex(); parseNextCharacter(source, pos);
(source, pos); if (pos!= null) return null;
 parseAndIgnoreWhitespace2(source, pos);
 parseIgnoreSpace(pos);
(source, pos); if (pos!= initialIndex) {
 parseAndIgnoreWhitespace(inputSource, pos);
(source, pos); if (pos!= null)
parseAndIgnoreWhitespace(source, pos); while (true)
 parseWhites(pos);
 parseString(source, pos);
(source, pos); if (pos == null) { return null };
parseAndIgnoreWhitespace ( pos )
(source, pos); while (true) {
parseAndIgnoreWhitespace(source, pos); if (pos. isValid ( ) )
 parseAndIgnoreWhitespace(1,source, pos);
parseAndIgnoreWhitespace(source, pos); if (pos. hasNext ( ) )
 parseAndIgnoreWhitespace(this.source, pos);
(source, pos); if (pos!= null) { return null;
 parseIgnoreWhiteSpace(source, pos);
 startIndex = parseAndIgnoreWhitespace(source, pos);
 parseAndIgnoreWhitepace(source, pos);
(source, pos); if (pos) {
(source, pos); if (pos!= null) { return null }
parseAndIgnoreWhitespace(source,  pos); if (pos == null) return null
parseAndIgnoreWhitespace(source, pos, 0);
 parseAndIgnoreWhitespaceInternal(source, pos);
(source, pos); if (pos!= null) return pos;
 sourceAndIgnore ( pos ) ;
(source, pos, initialIndex);
 parseAndIgnoreWhitespace(:, pos);
 parseAndIgnoreWhitespace(parseNextCharacter(source, pos);
parseAndIgnoreWhitespace(source, pos, 0, true);
 sourceAndIgnore(source, pos;
 parseAndIgnoreWhitespace(source, pos); return null ; }
 splitAndIgnoreWhitespace(source, pos);
 parseAndIgnoreText(pos);
 c = parseAndIgnoreWhiteSpace(source, pos);
parseAndIgnoreWhitespace(source, pos) return new Fraction ( ) ;
 startIndex = parseAndIgnoreSpace(source, pos);
(source, pos); if (pos!= - 1) {
(source, pos); int startIndex = 0;
 parseAndIgnoreText(source, pos);
 parseAndIgnoreWhitespace(1) parse(source, pos);
(source, pos); if (pos.isValid()) {
 parseAndIgnoreWhitespaceStart(pos);
parseAndIgnoreWhitespace(source, pos, 0, 1);
 parseAndIgnoreWhitespace(0) parse(source, pos);
 source.setIndex(initialIndex);
(source, pos); while (true)
(source, pos); if (pos. isValid ( ) )
 parseAndIgnoreWhitespace()(pos);
 source = source. substring ( 0, initialIndex);
 parseAndIgnoreWhitespace1(pos);
parseAndIgnoreWhitespace(source, pos, 0, false);
 parseAndIgnoreWhitespaceFirst(source, pos);
parseAndIgnoreWhitespace(source, pos); if (! invalid ) {
parseAndIgnoreWhitespace(source, 0, pos);
 parseAndIgnoreWhpace(pos);
 parseLine(source, pos);
 parseWhole(pos);
parseAndIgnoreWhitespace(source, pos) ; if (pos!= - 1) {
 if (pos.isIgnoreWhitespace(source, pos)) { source =
 if ( pos. isWhitespace ( source, pos ) ) { return Fraction.
 if (pos!= null) { pos = new ParsePosition(pos); }
 pos = initialIndex;
 parseAndIgnore whitespace(source, pos);
 ignoreAndIgnoreWhitespace(source, pos);
(source, pos); if (startIndex) {
 if (pos.isWhiteSpace()) {
 parseAsWhitespace(source, 0,pos);
 source.setIndex(initialIndex); return null;
parseAndIgnoreWhitespace(source, pos, pos.getIndex());
 parseAndIgnoreWhitespaceInString(source, pos);
 splitAndIgnoreWhitespace(pos);
 in source if ( source == null ) { return null ; } if ( pos == null ) { return null ; }
 parseIgnore(source, pos);
parseAndIgnoreWhitespace(source, pos) ; if (pos. valid ( ) )
 parseAndIgnore(pos);
 parseAndIgnoreWhole(pos);
 char pos = ParsePosition.
 pos.setIndex(0;
 String source =
 pos.setIndex(initialIndex;
 parseAndIgnoreWhole(source, pos);
(source, pos); if (pos!= null) return ;
(source, pos, true);
(source, pos); int errorIndex = 0;
parseAndIgnoreWhitespace(0, 0, 0, source, pos);
 parseAndIgnoreWhitespace(exclude, pos);
 parseText(source, pos);
parseAndIgnoreWhitespace(source, pos, startIndex);
parseAndIgnoreWhitespace(source, 0.0, pos);
 source = source. substring ( 1 ) ;
(source, initialIndex);
 parseAndIgnoreLine(source, pos);
(source);
 if (pos.isIgnoreWhitespace(source, pos)) { pos =
 parse(source);
 in source if ( pos == null ) { return null ; } if ( pos!= null ) { pos =
 source = source + initialIndex;
 in source if ( source == null ) { return null ; } if ( pos == null ) { return null ; } String source =
parseAndIgnoreWhitespace(source, pos, ' ');
 in source if ( source == null ) { return null ; } if ( pos!= null ) { pos =
 parseAndIgnoreWhitespaceStart(source, pos);
 if (pos!= null) { parse (source, pos); } else {
 parse (source, pos, true);
 in source if ( pos == null ) { return null ; } if ( pos!= null ) { if ( ignoreWhitespace )
 in source if ( source == null ) { return null ; } if ( pos == null ) return null ;
 in source if ( source == null ) return null ; if ( pos == null ) return null ;
parseAndIgnoreWhitespace ( source, pos )
 char source = Pattern.
 splitAndIgnoreSpace(source, pos);
parseAndIgnoreWhitespace(source, 0, 1, pos);
parseAndIgnoreWhitespace(source, pos); return null ; } } ;
 if (pos!= null) { pos = new ParsePosition(0); }
 source. append ( ' ' )
 startIndex = initialIndex;
parseAndIgnoreWhitespace(source, pos, initialIndex + 1);
parseAndIgnoreWhitespace(source, pos, initialIndex, 0);
 if (pos == null) { return null; } pos =
(source, pos); int startIndex;
 in source if ( pos == null ) { return null ; } if ( pos == null ) { return null ; } String source =
 parseAndIgnoreWhitespace(*pos);
 parseWhiteSpace(pos);
parseAndIgnoreWhitespace(pos.getIndex(), source, pos);
 parseAndIgnore whitespace(pos);
 int startIndex = 0;
parseAndIgnoreWhitespace(source, pos); return null ; } }
 in source String source =
 parseAndIgnoreWhite(pos);
(source, pos.getIndex(), pos);
 if (pos == null) { return Fraction.
 pos.reset ( );
parseAndIgnoreWhitespace(source, pos); return null; } ;
 source = source + ' ' + initialIndex;
 parseIgnoreWhiteSpace(pos);
(source, pos); if (pos)
 sourceAndIgnoreSpace(pos;
parseAndIgnoreWhitespace(source, pos + 1);
 source = source + " " + initialIndex;
 parseWhitespace (, pos);
 startIndex = pos.getIndex(); parseString(source, pos);
 source.setIndex(initialIndex;
 parseAsIgnoreWhitespace(source, pos);
parseAndIgnoreWhitespace(source, pos) return new Fraction ( ) ; }
 c = parseAndIgnoreSpace(source, pos);
 parseSource(pos);
parseAndIgnoreWhitespace ++ ;
 in source if ( source == null ) { return null ; } if ( pos == null ) { return Fraction.
 parseWhitespaceSource, pos);
 if (pos == null) { return null; } String source =
 if (pos == null) return null; pos =
(source, pos); try {
 startIndex = 0;
 parseWithIgnoreSpace(pos);
 pos.setIndex(); return;
 if (pos!= null) { source =
 source = parseAndIgnoreSpace(pos);
 if (pos!= null) { parse (source, pos); }
 in source if ( pos!= null ) { pos = new ParsePosition ( pos ) ; } pos =
 startIndex = parseWhitespace(source, pos);
 parseAndIgnoreWhitespaceCards(source, pos);
 in source if ( source == null ) { return null ; } if ( pos == null ) return null ; pos =
 parseAsWhitespace(source, pos.pos);
 in source if ( source == null ) return null ; if ( pos == null ) return this.
 in source if ( source == null ) { return null ; } if ( pos == null ) { return null ; } int pos =
 in source if ( source == null ) { return null ; } if ( pos == null ) return this.
(source, pos); int index = 0;
parseAndIgnoreWhitespace(source, pos, 0, initialIndex);
parseAndIgnoreWhitespace(0, initialIndex, source, pos);
 source = source + " " + source;
 startIndex = parseAndIgnoreWhpace(source, pos);
 if (pos!= null) { pos = new ParsePosition(0); pos =
 pos = null;
 in source if ( source == null ) { return null ; } if ( pos == null ) { return fraction.
 if (pos!= null) { String source =
 in source if ( pos == null ) { return null ; } if ( pos!= null ) { String source =
 parseAsWhitespace(source, source,pos);
parseAndIgnoreWhitespace(source, pos, startIndex, ' ');
 splitAndIgnore(source, pos);
 if (pos!= null) { pos =
 if (pos!= null) { if (pos!= null) pos =
 source.setIndex(initialIndex); continue;
 in source if ( pos == null ) { return null ; } if ( pos!= null ) { try { pos =
 sourceAndIgnore ( source ) ;
 in source if ( pos!= null ) { pos = new ParsePosition ( pos ) ; } String source =
 if (pos!= null) { pos = new ParsePosition(pos); } return
 if ( pos. isWhitespace ( ) ) { return null ; } int pos =
parseAndIgnoreWhitespace(source, source, pos);
 if (pos!= null) { if (pos!= null) return
 parseAndIgnoreWhitespace(src);
 if (pos.isWhitespace(source, pos) ) { source =
 if (pos == null) { return null; } return
 in source as a fraction return new Fraction ( 0, 0, 0, 0, 0, 0, 0, 0, 0 )
 parseAndIgnoreWhitespaceFromSource(source, pos);
 if ( pos. isWhitespace ( source, pos ) ) return null ; pos =
 in source if (source!= null) { String source =
 char pos = new Position ( ) ;
 in source as a fraction if ( pos!= null ) { return new Fraction ( pos. getIndex ( ) ) ; }
 if (pos!= null) { parse (source, pos);
 in source if ( pos == null ) { return null ; } if ( pos!= null ) { return this.
(source, pos); if (true)
 char(s)
 char c =
 in source as a fraction return new Fraction ( 0, 0, 0, 0, 0, 0, 0, 0, 0 ),
 splitAndIgnoreWhiteSpace(source, pos);
 if (pos == null) return null; String source =
 int startIndex =
 parseIgnoreWhites(source, pos);
 parseSpace(pos);
 if (pos!= null) { parse (source, pos); } else
 in source if ( source!= null ) { return new Fraction ( source, pos ) ; }
 if (pos!= null) { pos = new ParsePosition(0); } return
 parseSource(source);
 in source as a fraction return new Fraction ( 0, 0, 0, 0, 0, 0, 0, 0, 0,
 source. length = 0;
 parseAndIgnoreWhitespaceInUput(source, pos);
parseAndIgnoreWhitespace(source, 0.5, pos);
 if (pos == null) { return null; } final String source =
parseAndIgnoreWhitespace(source, pos, initialIndex, null);
 in source, and ignore whitespace in pos if ( pos == null ) { return null ; } if ( pos!= null ) { pos =
parseAndIgnoreWhitespace(0.0, source, pos);
 if (pos!= null) pos =
 in source, and ignore whitespace in pos if ( source == null ) { return null ; } if ( pos == null ) return null ;
 in source if ( pos!= null ) { pos = new ParsePosition ( ) ; } pos =
 if (pos == null) { return null; } String s =
 in source if ( pos == null ) { return null ; } if ( pos!= null ) { return super.
parseAndIgnoreWhitespace(source, pos, - 1);
 parseFirst(source, pos);
 source = source + pos.getIndex;
 startIndex = pos.getIndex(); parseText(source, pos);
 parseWithIgnore(source, pos);
 startIndex = pos.getIndex(); parseCharacters(source, pos);
parseAndIgnoreWhitespace(source, pos, initialIndex, false);
parseAndIgnoreWhitespace(source, pos, pos.getErrorIndex);
 pos.setIndex(); continue;
 if (pos == null) return null; String s =
 in source, and ignore whitespace in pos if ( source == null ) { return null ; } if ( pos!= null ) { pos =
parseAndIgnoreWhitespace(0, 0, source, pos);
 if (pos!= null) { pos = new ParsePosition(0);
 if (pos == null) { return null; } int pos =
 source. length ( pos );
 if (pos!= null) { parse (source, pos); } else return
 if (pos!= null) { pos = new ParsePosition(pos);
 int c;
 source(pos);
 parseSkipWhites(pos);
 pos.setErrorIndex(0;
 if (pos!= null) { pos = new ParsePosition(); } return
 if (pos!= null) { String s =
 if (pos!= null) { if (pos!= null) { return
 in source, pos.getIndex(); char c =
 if ( pos. isWhitespace ( source, pos ) ) return null ; pos.
 if (pos!= null) { final String source =
 if (pos!= null) { if (pos!= null) source =
 if (pos!= null) { pos = new ParsePosition(pos); return
 int startIndex;
parseAndIgnoreWhitespace(source, pos) ; return new Fraction () {
parseAndIgnoreWhitespace(pos, pos);
 pos.setErrorIndex(); return;
 if (pos!= null) source =
 in source if ( source!= null ) { return new Fraction ( source, pos ) ; } return
 in source source =
parseAndIgnoreWhitespace(source, 0.1, pos);
parseAndIgnoreWhitespace(source, pos); return ;
 in source as a fraction if ( source!= null ) { return new Fraction ( source, pos, 1 ) ; }
 pos = 0;
 pos = pos;
 in source as a fraction if ( source!= null ) { return new Fraction ( source, pos, 0 ) ; }
 in source if ( source == null ) { return null ; } if ( pos!= null ) { return
 in source if ( pos!= null ) { pos = new ParsePosition ( ) ; } pos.
 parseSkipWhiteSpace(source, pos);
 String s =
 in source as a fraction return new Fraction ( 0, 0, 0, 0, 0, 0, 0, 0, ).
parseAndIgnoreWhitespace(source, true, pos);
 char source = String.
 parseNumeric(pos);
 in source if ( pos!= null ) { pos = new ParsePosition ( pos ) ; } return
 in the source String source =
 char pos = parseNextChar(pos);
 in source, and ignore whitespace in pos if ( pos == null ) { return null ; } if ( ignoreWhitespace ) { return
parseAndIgnoreWhitespace(string, initialIndex);
 start index = parseWhitespace(source, pos);
 pos = start;
 if (pos == null) { return null; } position =
 in source, and ignore whitespace in pos if ( pos == null ) { return null ; } if ( pos!= null ) { pos.
 if (pos == null) { } pos =
 in source as a fraction if ( source!= null ) { return new Fraction ( source, pos ) ; } else { return
 if (pos!= null) { } pos =
 in source if ( pos == null ) { return null ; } if ( pos!= null ) { return super ::
 in source, pos.getIndex();
 in source if ( pos!= null ) { pos = new ParsePosition ( ) ; } return
 if (pos == null) { return null;
 in source as a fraction if ( source!= null ) { return new Fraction ( source, pos ) ; } } return
 in source as a fraction if ( source!= null ) { return new Fraction ( source, pos, 0 ) ; } return
 in source as a fraction if ( source!= null ) { return new Fraction ( source, pos ) ; } else return
 parseString(source);
parseAndIgnoreWhitespace(0, 0.0, source, pos);
 in source as a fraction if ( pos!= null ) { return new Fraction ( source, pos ) ; } else { return
 parse(source, ignoreWhiteSpace,pos);
parseAndIgnoreWhitespace(source, pos) ; } } ;
 char source = Integer.
 in source as a fraction if ( source!= null ) { return new Fraction ( source, pos ) ; } else {
parseAndIgnoreWhitespace(source, pos) ; } ;
 in source as a fraction if ( pos!= null ) { return new Fraction ( pos. getIndex ( ) ) ; return
parseAndIgnoreWhitespace(source, pos, 0, 0, 0);
 if (pos!= null) { source }
parseAndIgnoreWhitespace(1.0, source, pos);
parseAndIgnoreWhitespace(parseNextCharacter()), source, pos);
 parseWS(source, pos);
parseAndIgnoreWhitespace(source[0], pos);
parseAndIgnoreWhitespace(source, null, pos);
 if (pos!= null) { return
parseAndIgnoreWhitespace(source, pos) ; } else {
parseAndIgnoreWhitespace(this, source, pos);
 parseText(pos);
 split(source, pos);
parseAndIgnoreWhitespace(parseNextCharacter(...), source, pos);
parseAndIgnoreWhitespace(source, pos) ; } {
 char source = this.
 in source, pos.setIndex(initialIndex); return
parseAndIgnoreWhitespace(initialIndex + 1, source, pos);
 in the source string String source =
(source, pos); if (pos!= null).
 char, pos =
 parseLine(pos);
 in source, pos.source =
 char pos = (char)
 parseFirstCharacter(source, pos);
 pos.resetIndex;
parseAndIgnoreWhitespace(string(source)), pos);
 parseString(pos);
 char source = StringHelper.
parseAndIgnoreWhitespace(source, pos, 0, 0x00);
parseAndIgnoreWhitespace(0x00, source, pos);
 if (pos!= null) { pos }
 ignoreWhites(source, pos);
 source, pos);
 char pos = CharPosition.
 sourceAndIgnore();
 char pos = TextParser.
parseAndIgnoreWhitespace(source, pos, 0, null);
 in source, pos = Position.
 char pos =
parseAndIgnoreWhitespace(source, startIndex);
parseAndIgnoreWhitespace(1, initialIndex, source, pos);
 char source =
 in source pos =
 ignoreWhiteSpace(source, pos);
parseAndIgnoreWhitespace(string(source), pos);
 pos.getIndex;
 sourceAndIgnore ( pos ) {
parseAndIgnoreWhitespace(src, pos);
parseAndIgnoreWhitespace(0x1F, source, pos);
parseAndIgnoreWhitespace(0x0a, source, pos);
parseAndIgnoreWhitespace ( ;
 int index;
parseAndIgnoreWhitespace(source, pos); }
 pos =
parseAndIgnoreWhitespace(\"\\" source, pos);
parseAndIgnoreWhitespace(start, pos);
parseAndIgnoreWhitespace(source, pos) return null;
 int i;
 pos.moveBack;
parseAndIgnoreWhitespace(source, pos) return null; } ;
 char c;
parseAndIgnoreWhitespace ( )
parseAndIgnoreWhitespace(source, pos) ; } } {
parseAndIgnoreWhitespace(InitialIndex, source, pos);
 read(1);
 skip(source, pos);
parseAndIgnoreWhitespace(source, pos); {
 match(source, pos);
parseAndIgnoreWhitespace(", pos);
 reset(pos);
parseAndIgnoreWhitespace(startIndex, source, pos);
parseAndIgnoreWhitespace(initIndex, source, pos);
parseAndIgnoreWhitespace(source, pos) {
 print(pos);
parseAndIgnoreWhitespace(pos); }
 int n;
 s =
 init(pos);
 input =
parseAndIgnoreWhitespace(source) {
 parse(Source, pos);
(src);
 source +=
parseAndIgnoreWhitespace(text, pos);
parseAndIgnoreWhitespace(0L, source, pos);
parseAndIgnoreWhitespace(source", pos);
parseAndIgnoreWhitespace(string, pos);
 characters
parseAndIgnoreWhitespace(source, pos) }
parseAndIgnoreWhitespace(source), pos);
 char
parseAndIgnoreWhitespace(newLine, pos);
parseAndIgnoreWhitespace(source, parsePosition);
parseAndIgnoreWhitespace(source, newPos);
parseAndIgnoreWhitespace(source, pos) return ;
parseAndIgnoreWhitespace(position);
parseAndIgnoreWhitespace(source); }
...
parseAndIgnoreWhitespace(source, pos, 1);
parseAndIgnoreWhitespace(source, newIndex);
 character
(src, pos);
(text, pos);
parseAndIgnoreWhitespace(source,  pos));
parseAndIgnoreWhitespace(source) );
parseAndIgnoreWhitespace(source,  position);
parseAndIgnoreWhitespace(source, pos) return null
 strip(source, pos);
 space(source, pos);
parseAndIgnoreWhitespace(parser);
parseAndIgnoreWhitespace(Source, pos);
parseAndIgnoreWhitespace(source, true);
parseAndIgnoreWhitespace(source, p);
