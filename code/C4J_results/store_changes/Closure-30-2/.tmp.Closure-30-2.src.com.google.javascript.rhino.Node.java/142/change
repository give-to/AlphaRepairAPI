case INPUT_ID:  return "input_id";
 case STATIC_INPUT_ID:  return "input_id";
 case ID:  return "input_id";
case INPUT_ID:  return  "id";
 case INPUT:  return "input_id";
 case INPUTID:  return "input_id";
 case STATIC_INPUTID:  return "input_id";
case INPUT_ID:  return  "inputid";
case INPUT_ID:  return  "inputId";
 case STATIC_INPUT_IDX:  return "input_id";
case INPUT_ID:  return  id;
case INPUT_ID:  return  "input_id"; case LENGTH:
 case STATIC_SOURCE_INPUT_ID:  return "input_id";
 case INPUT_ID: #"input_id";
 case STATIC_INPUT_ID2:  return "input_id";
case INPUT_ID:  return  "input_id"; case NUMERIC:
 case ID:
 case _INPUT_ID:  return "input_id";
case INPUT_ID:  return  "input_id"; case LONG:
case INPUT_ID:  return  "input_id"; case BYTES:
 case INPUT_ID::"input_id";
 case STATIC_input_ID:  return "input_id";
case INPUT_ID:  return  "input_id"; case MAX_VALUE:
 case STATIC_Input_ID:  return "input_id";
 case STATIC_PUT_ID:  return "input_id";
 case STRING:
case INPUT_ID:  return  "input_id"; case STRING:
 case INPUT_IDX:  return "input_id";
 case STATIC_SOURCE_ID:  return "input_id";
 case INPUT:
case INPUT_ID:  return  "input_id"; case NUMBER:
 case STATIC_INPUT_IDU:  return "input_id";
 case STATIC_INPUT:  return "input_id";
 default: throw new IllegalStateException;
case INPUT_ID:  return  "input_id"; case BLOCK:
 case STATIC_INPUT_IDF:  return "input_id";
 case ID: #"input_id";
case INPUT_ID:  return  "input_id"; case MAXIMUM:
 case INPUT: #"input_id";
 case INCRDECR_INPUT_ID:  return "input_id";
 case STATIC_FILE_INPUT_ID:  return "input_id";
case INPUT_ID:  return  "input_id"; case NAME:
 case INPUT_ID2:  return "input_id";
 case INPUT_NAME: return "name";
case INPUT_ID:  return  "input__id";
case INPUT_ID:  return  "input_id"; case DENGTH:
case INPUT_ID:  return  "input_id"; case TEXT:
 case STATIC_STRING_INPUT_ID:  return "input_id";
 case INPUT_FILE:
 case STATIC_INPUT_UUID:  return "input_id";
 case INPUT_TYPE: return "type";
case  STRING:
 case STATIC_INPUT_ID_TYPE:  return "input_id";
 case Input_ID:return "input_id";
 case INPUT_TYPE:
case INPUT_ID: return "input";
case INPUT_ID:  return  "input_id"; case TYPE:
 case STATIC_TYPE_INPUT_ID:  return "input_id";
 case INPUT_ID: case STATIC_INPUT_ID:  return "input_id";
 case STRING_ID:
 case INPUT_LENGTH:
case INPUT_ID:  return  "input_id"; case INT:
 case TYPE_ID:
case INPUT_ID:  return  "input_identifier";
 case INPUT_ID: return "id";
 case STATIC_INPUT_ID_VALUE:  return "input_id";
 case STATIC_INPUT_ID_STR:  return "input_id";
 case INPUT_IDU:  return "input_id";
 case INPUT_ID: case INPUTID:  return "input_id";
 case STATIC_BLOCK_INPUT_ID:  return "input_id";
 case OUTPUT_FILE: return "output";
 case STRING : return "string";
 case INPUT_IDF:  return "input_id";
 case STRING: return "string";
 case INPUT_FILE: return "input";
case  TYPE: return "type";
 case TYPE: return "type;
 case STATIC_STREAM_INPUT_ID:  return "input_id";
 case STATIC_RAW_INPUT_ID:  return "input_id";
 case STATIC_LENGTH_FILE:
 case STRING: return "string;
case  STATIC_LENGTH:
 case INPUT_STRING:
 case INCRDECR_PROP:  return "input_id";
 case INPUT_ID: returns"input_id";
 case INPUT_ID #"input_id";
case INPUT_ID:  return  "input_id"; default:
 case STATIC_LENGTH_INPUT_ID:  return "input_id";
 case STRING: case STRING_INPUT_ID:  return "input_id";
 case STATIC_SHORT_INPUT_ID:  return "input_id";
 case STATIC_MAX_INPUT_ID:  return "input_id";
 case TYPE: return type;
 case PROPERTY_INPUT_ID:  return "input_id";
 case STATIC_STORAGE_INPUT_ID:  return "input_id";
case INPUT_ID:  return  "input_id_gen";
 case STATIC_INSERT_ID:  return "input_id";
case INPUT_ID:  return  "input_id_string";
case  NUMBER: return "number";
 case INPUT_TYPE_ID:
case INPUT_ID:  return  "input_id_token";
 case INDEX_ID:
 case INPUT_NAME:
 default: return "static_source";
 case STATIC_STANDARD_INPUT_ID:  return "input_id";
 default: return "unknown type";
 default: throw new IllegalStateException();
 case STRICT_INPUT_ID:  return "input_id";
case  STATIC_TYPE: return "type";
 default: return "static_source";
case INPUT_ID:  return  "input_";
 case INPUT_ID_STATIC_INPUT_ID:  return "input_id";
 case INPUT_TYPE_NAME:
 default: return "unknown_type";
case INPUT_ID:  return  "input_id(int)"
 case INDEX:
 case STRING: return string;
 case INPUT_ID: case CLASS_INPUT_ID:  return "input_id";
 case INDEX: return "index;
 case INPUT_ID: case TYPE_INPUT_ID:  return "input_id";
 case INPUT_ID: case MAX_INPUT_ID:  return "input_id";
 case STRING: case STATIC_INPUT_ID:  return "input_id";
case  STATIC_STRING:
case  STATIC_STATIC_LENGTH:
 case ID: return "id";
 case NAME_ID:
 case INDEX_ID_TO_INPUT_ID:  return "input_id";
 case input_id:return "input_id";
 case INPUT_ID: case SUPER_INPUT_ID:  return "input_id";
case INPUT_ID:  return "input_id" case LENGTH_V:
 case STATIC_STATIC;
case INPUT_ID:  return "input_id" case STRING_LENGTH:
 case TEXT: return "text;
 case CLASS_INPUT_ID:  return "input_id";
 case STATIC_SLASH_L:
 case STRING: case INPUT_ID:return "input_id";
 case STATIC_FILE: return "file;
 case STATIC_VALUE: return "value;
 case STATIC_TYPE: return "type;
 case STATIC_TYPE: return type;
case  STATIC_STATIC:
 case INPUT_NUMBER_TYPE:
 case PRIVATE_INPUT_ID:  return "input_id";
 case STRING;
case INPUT_ID:  return "input_id" case SLASH_L:
 case NAME:
case  SLASH_L:
case  STRING_TYPE:
 case STATIC_FILE: return "file";
 case STATIC_LENGTH_V:
 case ID::"input_id";
 case INPUTID::"input_id";
 case STRING_TYPE;
 case COMPUTED_INPUT_ID:  return "input_id";
 case TEXT: return text;
 case STATIC_STATIC_TYPE:
 case STRING: return "";
 case STATICINPUT_ID:  return "input_id";
 case STATIC_VALUE: return value;
 case STATIC_TYPE;
 case INPUT_TYPE: return "input type";
 case TYPE_INPUT_ID:  return "input_id";
 case STATIC_SIZE: return "size;
case  STATIC_TYPE:
 case INVALID:  return "input_id";
 case INPUT_NAME: return "inputname";
 case STRICT_INPUT_STRICT_INPUT_ID:  return "input_id";
 case STATIC_SIZE: return size;
case  STRING_V:
 case STATIC_SLASH_V:
case INPUT_ID:  return  input;
 case TYPE:
 case INPUT_NUMBER_ID:
case  STATIC_SOURCE_LINE:
case  BLOCK:
 case STATIC_FILE: return file;
 case INPUT_DIGEST:return "input_id";
 case IN_ID:  return "input_id";
case  SLASH:
 default: return "static_source file";
 case INPUT_NAME: return "input_name";
 case INPUT_FILE: return "inputfile";
 case INPUT_STREAM:
 case INPUT_TYPE: return "input_type";
 case CLASS_ID:
 case STATIC_SINPUT_ID:  return "input_id";
 case SLASH:
 case INPUT_TYPE: if (INPUT_TYPE) { return "input_type"; } else { return "unknown"; }
 case INDEXED_INPUT_ID:  return "input_id";
case INPUT_ID:  return "input_id" case NUMERIC:
case  STATIC_STREAM:
 case INPUT_TYPE: if (INPUT_TYPE) { return "input_type"; } else { return "unknown";
 case STATIC_SOURCE_LINE;
 case STRING_ID_PROP:  return "input_id";
 case STATIC_STATIC_STRING:
 case STRICT_MODE: if (STRICT_MODE) { return "str_mode"; } else { return "unknown_mode";
case INPUT_ID:  return "input_id" case LENGTH:
 case OUTPUT_FILE: return "output_file";
 case CLASS:
 case INT_ID:return "input_id";
 case INPUT_TYPE: if (inPUT_TYPE) { return "input_type"; } else { return "unknown"; }
 case FILE_INPUT_ID:  return "input_id";
 case INPUT_TYPE: if (INPUT_TYPE) { return "input_type"; } case INPUT_ID:
 case STRICT_MODE: if ( STRICT_MODE ) { return "str_mode" ; } case STRICT:
 case INPUTID:"input_id";
 case INPUT_FILE: return "input_file";
 case TYPE: return TYPE;
 case STRICT_MODE: if ( STRICT_MODE ) { return "strrict_mode" ; } else {
 case INPUT_ID: return id;
 default:
 case INPUT_ID::return "input_id";
 case STRICT_MODE: if (STRICT_MODE) return "strrict_mode"; else return "unknown_mode";
 case STRICT_MODE: if (STRICT_MODE) { return "str_mode"; } else { return "unknown" ; }
 case INPUT_TYPE: if (INPUT_TYPE) { return "input_type"; } else { return "string"; }
 case STRING_ID:  return "input_id";
 case INPUT_TYPE: if (INPUT_TYPE) { return "input_type"; } else { return "input"; }
 case INPUT_TYPE: if (INPUT_TYPE) return "input_type"; else return "unknown_input_type";
 case INPUT_TYPE: if (INPUT_TYPE) { return "input_type"; } else { return "null";
case INPUT_ID_TYPE:
 case STRICT_MODE: if ( STRICT_MODE ) { return "strict_mode" ; } else {
 case input_id::"input_id";
 case STRICT_MODE: if (STRICT_MODE) { return "str_mode"; } else { return "no_mode";
 case INPUT_TYPE: if (INPUT_TYPE) { return "input_type"; } else { return "input";
case INPUT_ID:  return "input_id" case STRING : return "string";
case INPUT_ID:  return "input_id" case MAX_VALUE:
 case STRICT_MODE: if ( STRICT_MODE ) { return "str_mode" ; } else {
case  STATIC_STATIC_SOURCE_LINE:
case INPUT_ID:  return "input_id" ; case STRING : return "string";
 case OUTPUT_NAME: return "output_name";
case  STATIC_TYPE_NAME:
case INPUT_ID:  return  "inputID";
case  STATIC_SIZE:
 case InputID:return "input_id";
 case INPUT_TYPE: if (inPUT_TYPE) { return "input_type"; }
 case INDEX:return "input_id";
 case STRICT: return "stable;
case INPUT_ID:  return "input_id" case STRING_ID:
 case INPUT_NAME: if (inPUT_NAME) { return "input_name";
case  EXTENSION:
 case STATIC_INPUT_IDIC_INPUT_ID:  return "input_id";
 case INPUT_TYPE: if (INPUT_TYPE) { return "input_type"; }
 case INPUT_TYPE: if (inPUT_TYPE) { return "input_type";
 case STRICT_MODE: if ( STRICT_MODE ) { return "str_mode" ; } break ;
case INPUT_ID:  return "input_id" case STRING_TYPE:
 case STATIC_SOURCE_LINE: return "line";
 case INPUT_TYPE: if (INPUT_TYPE) { return "input_type";
 case SOURCE:
case  NAME:
 case INPUT_ID": return"input_id";
 case VALID:return "input_id";
 case STATIC_STATIC_STREAM:
 case STATIC_SOURCE_STRING;
case INPUT_ID:  return "input_id" case STRING:
case INPUT_ID:  return "input_id" ; case STRING_LENGTH:
case  TYPE:
 case STATIC_STATIC_TYPE_NAME:
case INPUT_ID:  return "input_id" case STRING_V:
case INPUT_ID:  return "input_id" case NUMBER:
case INPUT_ID:  return "input_id" case LONG_V:
 case IDENT:  return "input_id";
 case STATIC_STATIC_SOURCE_FILE:
 case STATIC_SOURCE_DIR: return "dir";
 case INPUT_NAME: if (inPUT_NAME) return "input_name";
 case STRINGES;
 case INPUT_TYPE: if (INPUT_TYPE) return "input_type";
 case STATIC_STATIC_FILE: return "static";
 case IMPORT_ID:  return "input_id";
 case STRICT_MODE: if ( STRICT_MODE ) { return "strrict_mode" ; } else:
 case STRICT: return "static;
 case INPUT_IDENTITY: return"input_id";
 case STRICT_MODE: if ( STRICT_MODE ) { return "strict_mode" ; } else:
 case INPUT_TYPE: if (inPUT_TYPE) { return "inPUT_type"; }
case INPUT_ID:  return "input_id" case STRING_STRING:
 case INPUT::"input_id";
 case STATIC_STATIC_TYPE: return "type";
 case STATIC_STATIC_DATA: return "data";
case INPUT_ID : return inputId;
 case STRICT_MODE: if ( STRICT_MODE ) { return "strrict_mode" ; } default : }
 case STATIC_STATIC_TYPE_VALUE:
 case STATIC_SOURCE_FILE_STRING:
case  SIZE:
 case TYPE: type;
 case INPUT_NAME: if (inPUT_NAME) return "inPUT_name";
case INPUT_ID:  return "input_id" case BLOCK:
 case INPUTID: case INPUTTYPE:return "input_id";
 case STRICT_MODE: if (STRICT_MODE) { return "str_mode"; } else { return "unknown"; } }
 default: return "static_source"; }
 case STATIC_INPUT_ID or _INPUT_ID:  return "input_id";
case INPUT_ID:  return "input_id" ; default : return "unknown_prop" ;
 case STRICT_MODE: if ( STRICT_MODE ) { return "strrict_mode" ; } } }
 case JS_INPUT_ID:  return "input_id";
 case STRICT_MODE: if ( STRICT_MODE ) { return "strrict_mode" ; } else { }
 case INPUT_NAME: if (inPUT_NAME) { return "inputName";
 case INPUT_TYPE: if (INPUT_TYPE) { return "input type";
 case INPUT_TYPE: if (inPUT_TYPE) { return "input type";
case INPUT_ID:  return "input_id" ; case LENGTH_V:
case INPUT_ID:  return "input_id" ; default : return "unknown" ; break ;
 case INPUT_TYPE: if (INPUT_TYPE) { return "input_type"; } else {
 case INPUT_TYPE: if (inPUT_TYPE) { return "input_type"; } else {
 case INPUT_ID: return +"input_id";
case INPUT_ID:  return "input_id" case LONG:
 case STRICT_MODE: if ( STRICT_MODE ) { return "str_mode" ; } else:
 case INPUT_ID: return return"input_id";
 case STRICT_MODE: if (STRICT_MODE) return "strrict_mode"; default: return "unknown_prop"; }
 case INPUT_NAME: : return "input_name"; case INPUT:
 case STRICT_MODE: if ( STRICT_MODE ) { return "str_mode" ; } case STRICT {
 case INPUTID: case INPUTID:return "input_id";
case  INDEX:
 case TEXT:
 case BLOCK;
 case INPUT_NAME: if (inPUT_NAME) return "inputname";
 case STATIC_STATIC_TYPE: return "static";
case  SINGLE:
 case INPUT_TYPE: if (inPUT_TYPE) { return "input_type"; } else:
 case INPUT_TYPE: if (INPUT_TYPE) { return "input_type"; } else:
 case INPUT_ID: case INPUT:return "input_id";
 case STATIC_STATIC_TYPE: return "static type";
 case INPUT_TYPE: if (inPUT_TYPE) { return "input_type; }
case  TYPE_V:
 case SLASH;
case INPUT_ID:  return  "input_id;";
 case INPUT_ID: case ID:return "input_id";
 case INPUT_TYPE: if (INPUT_TYPE) { return "input_type; }
 case INPUT_ID_return "input_id";
 case INPUTID: case INPUTID_return "input_id";
 case INPUT_ID_NUMBER:return "input_id";
 case INPUT_TYPE: : return "input_type"; case INPUT: :
 case INPUT_TYPE: if (inPUT_TYPE) return "input type";
 case INPUT_NAME: if (inPUT_NAME) return "inputName";
case INPUT_ID:  return "input_id" case STRING_HEX:
 default: break;
 case #"input_id";
 case INPUT_TYPE: if (inPUT_TYPE) { return "input_type"; } break ;
 case STATIC_STATIC_METHOD: return "method";
 case STATIC_SOURCE_DIR: return "directory";
 case STATIC_FILE: return "filename;
 case STATIC_STATIC_FILE: return "static file";
 case INPUT_NAME: : return "input_name" case INPUT:
 case STATIC_STATIC_TYPE: return "staticType";
 case ID: returns"input_id";
 case STATIC_STATIC_DATA: return "staticdata";
case INPUT_ID:  return "input_id" case LONG_VALUE:
case INPUT_ID:  return "input_id" ; case STRING_STRING:
case INPUT_ID:  return "input_id" case STRING_LENGER:
 case UNKNOWN_ID:  return "input_id";
 case INPUT_NAME: : return "input_name"; case ID:
 case INPUT_DIGITS:return "input_id";
 case INPUT_TYPE: : return "input_type" case INPUT: :
 case INPUT_ID_STRING:return "input_id";
 case INPUT_NAME: : return "input_name"; case STRING:
 case INPUT_NAME: : return "input_name"; case INDEX:
 case INPUT_NAME: this return "input_name"; case ID:
case INPUT_ID:  return  "in_id";
case INPUT_ID:  return  "input-id";
 case STATIC_FILE: return "file";;
 case TEXT: return"input_id";
case INPUT_ID:  return "input_id" ; default : return "unknown" ; } }
case  TYPE_STR:
 case INPUT_ID(int) :return "input_id";
 break;
 case STATIC_EXTRA_DATA: return "static_extra_data";
 case STATIC_SOURCE: return "source";;
 case INPUT_ID,return "input_id";
 return "static;
case INPUT_ID_V:
 case INPUT_NAME: if (inPUT_NAME) { return "input_name;"
 case TYPE: return;
case INPUT_ID:  return "input_id" ; case STRING_LENGER:
case INPUT_ID:  return "input_id" ; case STRING_LIMIT:
case  TEXT:
 case STATIC_FILE: return "static";;
 case STRING_INPUT_ID:  return "input_id";
case INPUT_ID : case NAME :
 case STATIC_STATIC_FILE_SIZE: return "size";
 case STATIC_STATIC_FILE_NAME: return "name";
 case INPUT_TYPE: if (inPUT_TYPE) { return "input_type"; } else
 case INPUT_NAME: return "input_name_string";
 case STATIC_STATIC_FILE_TYPE: return "type";
 case STATIC_STATIC_TYPE: return type;
case  PATH:
 case INPUT_NAME: : return "input_name" case ID:
 return "static";;
 case INPUT_NAME: { return "input_name"; case ID:
case INPUT_ID : case ID :
 case length;
 case TYPE: string;
 default: return"input_id";
 case INPUT_DIGID:return "input_id";
 case LONG;
 case INPUT_NAME: return "input_name_full";
 case INDEX_INPUT_ID:  return "input_id";
 case STATIC_SOURCE_DIR: return "source";
 case INPUT_NAME: return "input_name_raw";
 case STATIC_TYPE: return "type";;
case INPUT_ID:  return "input_id" ; default : return "unknown_prop"; }
case INPUT_ID:  return  "input_id;"
case INPUT_ID:  return  "input_id;",
 case STATIC_SIZE: return "size";;
 case INPUT_NAME: { return "input_name" ; }
 case INPUT_ID: case TEXT: return"input_id";
case INPUT_ID: return "input_id; case LONG:
 case STATIC_STATIC_FILE_EXT: return "ext";
 case IDreturn "input_id";
 case INPUT_NAME: : return "input_name"; case NAME:
 case STATIC_STATIC_FILE_END: return "end";
case INPUT_ID:  return  "output_id";
case INPUT_ID_VALUE:
case INPUT_ID:  return "input_id" ; case STRING_LENGTH : {
 case STATIC_SOURCE_EXTRA : return "source_extra";
case  LONG:
 case INPUT_NAME: this return "input_name"; default:
 case INPUT_DIGEST::return "input_id";
 case TYPE;
 case PROP_INPUT_ID:  return "input_id";
case INPUT_ID_STR:
 case INPUT_ID: case ID: #"input_id";
 case NAME;
case INPUT_ID:   return "in";
 case STATIC_EXTRA_DATA: return "generic_extra_data";
 case ID+"input_id";
 case INPUT_ID: case INT: return"input_id";
 case LOGIC_INPUT_ID:  return "input_id";
case INPUT_ID:  return "input_id" ; default : return "unknown-prop"; }
case INPUT_ID:  return "input_id" case length:
 case STATIC_EXTRA_DATA: return "static_extradata";
 case INPUT_ID: case 0: return"input_id";
 case STATIC_EXTRA_DATA: return "static_extraData";
 case STATIC_SOURCE_EXTRA : return "source_extras";
 case STATIC_SOURCE_EXTRA : return "static_extra";
case INPUT_ID:  return  "";
case INPUT_ID_T:
 case ID_ARRAY:  return "input_id";
case INPUT_ID:   return "inline";
 case NAME:return "input_id";
 case STR;
case INPUT_ID:  return "input_id" case TEXT:
case INPUT_ID:  return "input_id" case NAME:
 case INPUT_NAME: { return "input_name" ; },
case INPUT_ID:  return  0;
 case INPUT_IDS: #return "input_id";
 case :return "input_id";
 case INT:return "input_id";
 case UID:return "input_id";
case INPUT_ID:   return "int";
 case INPUT_FILE: return "input_file"; case
 case OUTPUT_FILE: return "output_file"; case
case INPUT_ID : return "input_id" ; }
case INPUT_ID:  return  ID;
 case INPUT_ID: return "i"input_id";
 case INPUT_IDENT: #return "input_id";
case INPUT_ID:   return "input_id_seq";
 case INPUT_NAME: return "input_name"; case
 case SINPUT_ID:  return "input_id";
 case INPUT_TYPE: return "input_type"; case
 case INPUT_NAME: : return "input_name"; :
 case OUTPUT_FILE: return "output_file"; }
case INPUT_ID_TYPE: return "id";
 case INPUT_ID: return "int"input_id";
case INPUT_ID:   if (input_id) return "id";
 case INPUT_NAME: return "input_name_string;"
 case __INPUT_ID:  return "input_id";
 case INPUT_ID: return ""+"input_id";
 case INPUT_ID: return "\""input_id";
case INPUT_ID:   if (inputId) return "inputId";
 switch {
case INPUT_ID:   if (inPUTId) return "id";
case INPUT_ID:  return  "ID";
case INPUT_ID:   if (inPUT_ID) return id;
case INPUT_ID:   if (inPUT_ID) return "";
 case TYPE_ID;
case INPUT_ID: return "input_id"; case
case INPUT_IDL:
case INPUT_ID:   return "input_id;
case INPUT_IDLE:
case INPUT_IDF:
 case :"input_id";
 # return"input_id";
 switch:
 case idreturn "input_id";
 case IN:  return "input_id";
case INPUT_ID:  return "input_id" break;
case INPUT_ID : {
case INPUT_ID:   break;
case INPUT_ID:   return;
case INPUT_ID:  return "input_id" case:
case INPUT_ID:   # ignore
 }
 case
case INPUT_ID':  return "input_id";
case INPUT_ID():  return "input_id";
