case STATIC_SOURCE_FILE:    return "source_file";
case STATIC_SOURCE_FILE:    return  "static_source_file";
 case FILE:    return "source_file";
case STATIC_SOURCE_FILE:    return  "static_source";
 case STATIC_SOURCE:
 case SOURCE_FILE:    return "source_file";
case  INPUT:
case STATIC_SOURCE_FILE:    return  "static_sourcefile";
 case source_file: return"source_file";
 case SOURCE_FOLDER:    return "source_file";
 case STATIC_SOURCE_DIR:
 case SOURCE:return "source_file";
 default: throw new IllegalStateException("unexpect prop " + propType);
 case STATIC_SOURCE_ID:
 default: throw new IllegalStateException("unexpect prop id " + propType);
 case STATIC_SOURCE_FILE:
case  INPUT_ID:
case STATIC_SOURCE_FILE:    return  "static_file";
 case STATIC:
case STATIC_SOURCE_FILE_NAME:
 case SOURCE_FULL:    return "source_file";
case STATIC_SOURCE_FILE:    return  "static_source_file_name";
 default: throw new IllegalStateException("unexpect prop " + prop);
case STATIC_SOURCE_FILE:    return  "staticfile";
 default: throw new IllegalStateException("unexpect prop type");
 case SOURCE_FIND:    return "source_file";
 default: throw new IllegalStateException("unknown prop type");
case STATIC_SOURCE_FILE:    return  "static_source_file"; case TYPE:
case STATIC_SOURCE_FILE:    return  "static_source_file"; case ID:
 case STATIC_SOURCE_FILE: case UNSTATIC_SOURCE_FILE:    return "source_file";
 case STATIC_SOURCE_URL:
case  ID:
case STATIC_SOURCE_FILE: return "static";
case STATIC_SOURCE_FILE:    return  "static_source_file"; case NAME:
 default: throw new IllegalStateException("unexpect prop id " + prop);
 case STATIC_SOURCE: case IS_STATIC_SOURCE_FILE:    return "source_file";
case STATIC_SOURCE_FILE:    return  "static_source_file"; break;
 case STATIC_SOURCE_FILE: case INSTATIC_SOURCE_FILE:    return "source_file";
case STATIC_SOURCE_FILE:    return  "static_source_file_path";
case STATIC_SOURCE_FILE:    return  "source";
 default: throw new IllegalStateException("unexpect prop " + propType);
 case Source_FILE: return"source_file";
 default: throw new IllegalStateException;
 case SCRIPT_FILE:return "source_file";
 default: throw new IllegalStateException("unexpect " + propType);
 default: throw new IllegalStateException("unexpect prop id");
 case SOURCEFILE:    return "source_file";
 default: throw new IllegalStateException("unknown");
 default: throw new IllegalStateException("Unknown prop type");
case STATIC_SOURCE_FILE:    return  "static_source_file"; default:
 default: throw new IllegalStateException("unknown type");
 default: throw new IllegalStateException("unexpect prop id " + propType); }
 case INPUT_FOLDER:    return "source_file";
 default: throw new IllegalStateException("unexpect prop type " + propType);
case STATIC_SOURCE_FILE:    return  "static_source_file"; case length:
case STATIC_SOURCE_FILE:    return  "file";
 case STATIC_SOURCE_FILE_STATIC_SOURCE_FILE:    return "source_file";
 default: throw new IllegalStateException("unexpect prop type " + type);
 default: throw new IllegalStateException("unexpect prop id " + propType); break;
case  INPUT_TYPE:
case STATIC_SOURCE_FILE:    return  "staticSourceFile";
 case STRING_TO_STATIC_SOURCE_FILE:    return "source_file";
case STATIC_SOURCE_FILE:    return  "static_source"; case INPUT:
 case STATIC_SOURCE_FILE: case NONSTATIC_SOURCE_FILE:    return "source_file";
 default: throw new IllegalStateException("Unexpect prop " + propType);
 default: throw new IllegalStateException("unknown prop " + propType);
 case SOURCE_FNAME:    return "source_file";
 default: throw new IllegalStateException("unexpect prop id " + propId);
 default: throw new IllegalStateException("invalid prop type");
 case STATIC_SOURCE: return "source";
 default: throw new IllegalStateException("Unexpect prop id " + propType);
 default: throw new IllegalStateException("unrecognized prop type");
 case SOURCES_FILE:return "source_file";
case STATIC_SOURCE_FILE:    return  "static_sourceFile";
 default: throw new IllegalStateException("unexpect prop " + propType); }
 case STATIC_SOURCE_CALL:
 case STATIC_SOURCE_FILE|STATIC_SOURCE_FILE:    return "source_file";
 default: throw new IllegalStateException("unknown prop type");
 default: throw new IllegalStateException("unexpect prop id " + prop);
 default: throw new IllegalStateException("unexpect prop type"); }
 case SOURCE_FILE_OR_STATIC_SOURCE_FILE:    return "source_file";
 case STATIC_SOURCE : return "static_source";
 default: throw new IllegalStateException("unexpect prop id %s");
 default: throw new IllegalStateException("unrecognized prop " + propType);
 case STATIC_SOURCE_FILE: caseSTATIC_SOURCE_FILE:    return "source_file";
 case STATIC_SOURCE_HASH:
 case STATIC_SOURCE_FILE,STATIC_SOURCE_FILE:    return "source_file";
 default: throw new IllegalStateException("unknown property");
case STATIC_SOURCE_FILE:    return  "sourcefile";
 case STATIC_SOURCE : return "static source";
 default: throw new IllegalStateException("unrecognised prop " + propType);
 case STATIC_SOURCE_FULL:
 case STATIC_SOURCE_FILE: case _STATIC_SOURCE_FILE:    return "source_file";
 default: throw new IllegalStateException("unrecognized type");
 case SCRIPT_FOLDER:    return "source_file";
 case STRING_SOURCES:    return "source_file";
 default: throw new IllegalStateException("Unknown property");
 case SOURCES: return"source_file";
 default: throw new IllegalStateException("unexpect type");
 default: throw new IllegalStateException("Unknown type");
 case STATIC_STATIC:
 case INPUT_FILE: case SOURCEFILE:    return "source_file";
 case SOURCE_FILES:    return "source_file";
 case SOURCE_FOUND:    return "source_file";
 default: throw new IllegalStateException("unexpect prop type);
 default: throw new IllegalStateException("Unknown");
 default: throw new IllegalStateException("unknown prop id");
 default: throw new IllegalStateException("unexpect prop id"); }
 default: throw new IllegalStateException("unexpect prop id " + propType); } }
 default: throw new IllegalStateException("unknown propType");
 case SOURCE_FOLENAME:    return "source_file";
case STATIC_SOURCE_FILE:    return "source_file" or "static_source_file";
 default: throw new IllegalStateException("unexpected prop type");
 default: throw IllegalStateException;
 case STRING_FILE:return "source_file";
case STATIC_SOURCE_FILE:    return "source_file" case INPUT_TYPE:
case  INPUT_STRING:
 case SOURCE_FILE_NAME:    return "source_file";
 case STATIC_SOURCE_FILE: case FSTATIC_SOURCE_FILE:    return "source_file";
 default: throw new IllegalStateException("unknown prop type"); }
 case SCRIPT_FILE_OR_STATIC_SOURCE_FILE:    return "source_file";
 case STATIC_SRC:
 case STRING: return"source_file";
 case SOURCE_FILE_CALLBACK:    return "source_file";
 case TYPE_FILE:
case  INPUT_NAME:
case STATIC_SOURCE_FILE:    return  "static source";
 default: throw new IllegalStateException("Unknown prop type");
 case SOURCE_FILE_FOLDER:    return "source_file";
 default: throw new IllegalStateException("unsupported prop type");
 default: throw new IllegalStateException("invalid prop type");
 default: throw new IllegalStateException("Unexpect prop id " + propType); }
 case INPUT_FILE: case INPUT:    return "source_file";
 case INPUT_FILE: case SOURCE:    return "source_file";
 case INPUT_FILE: case STRING:    return "source_file";
 default: throw new IllegalStateException("unexpect prop type " + propType); }
 case INPUT_ID;
 case STATICSOURCE:
case STATIC_SOURCE_FILE_ID:
case STATIC_SOURCE_FILE:    return  source;
 default: throw new IllegalStateException("unexpect prop id " + propId); }
 default: throw new IllegalStateException("unknown prop id " + propType); }
case STATIC_SOURCE_FILE:    return "source_file" case INPUT_LENGTH:
 case STATIC_FILE:
 case STRING_ID;
 case SCRIPT:return "source_file";
case  INPUT_NAME: return "name";
 default: throw new IllegalStateException("unexpect prop id " + propType); } {
 default: throw new IllegalStateException("unexpect prop id " +)
 case SOURCE_FILE: case SOURCEFILE:    return "source_file";
 default: throw new IllegalStateException("unexpect prop type); }
case STATIC_SOURCE_FILE:    return  file;
case STATIC_SOURCE_FILE:    return "source_file" case INPUT_ID:
 case SOURCE_FILE: case SOURCEURL:    return "source_file";
 case STATIC_SOURCE_DIR: caseSTATIC_SOURCE_FILE:    return "source_file";
 case SOURCES_FULL:    return "source_file";
 case STATIC_SOURCE_FILE: "STATIC_SOURCE_FILE:    return "source_file";
 case INSTATIC_SOURCE_FILE:    return "source_file";
 case STRING_STATIC_SOURCE_FILE:    return "source_file";
 case FILE::"source_file";
 default: throw new IllegalStateException("default");
 default: throw new IllegalStateException("unexpected prop " + propType); }
 case TYPE_FILE_OR_STATIC_SOURCE_FILE:    return "source_file";
 case INPUT_FILE:    return "source_file";
 case FILE:"source_file";
case STATIC_SOURCE_FILE:    return "source_file" case STRING_ID:
case  STRING_ID:
 case SOURCE_FOLDERNAME:    return "source_file";
case  SLASH_INPUT:
 case INPUT_FULL_FILE:    return "source_file";
case STATIC_SOURCE_FILE:    return  "static_src_file";
 case INPUT_ID_STATIC_SOURCE_FILE:    return "source_file";
 case SOURCE_FILE: case SOURCEPATH:    return "source_file";
 default: throw new IllegalStateException("unknown propType");
 case SOURCE_FILE: case SOURCE_:    return "source_file";
case STATIC_SOURCE_FILE:    return "source_file" case TYPE_ID:
 default: throw new IllegalStateException("unrecognized type");
case  INPUT_TYPE: return "type";
 case SOURCE_FILE_HASH:    return "source_file";
 default: throw new IllegalStateException("Unexpect prop id " + propType); } }
 default: throw new IllegalStateException("unknown prop id");
 case STATICFILE:
case  OUTPUT_ID:
case STATIC_SOURCE_FILE:    return "source_file" case STRING:
 case source_file::"source_file";
case STATIC_SOURCE_FILE:    return  "static_src";
 default: throw new IllegalStateException("unknown prop type);
case  INPUT_NAME: return "input";
case  STRING : return "string";
 case INPUTID;
case  INPUT_INPUT:
 default: throw new IllegalStateException("unknown prop type"); }
 case INPUT_NAME: return "name;
 case LOCAL:return "source_file";
 case source_file:"source_file";
 case STATIC_AND_STATIC_SOURCE_FILE:    return "source_file";
case STATIC_SOURCE_FILE:    return "source_file" case INPUT_STRING:
 default: throw new IllegalStateException(); }
case STATIC_SOURCE_FILE:    return "source_file" case INPUT_NAME:
case STATIC_SOURCE_FILE:    return "source_file" case INPUT_FILE:
case  INPUT_PROP:
 case STATIC_SOURCE: caseSTATIC_SOURCE_FILE:    return "source_file";
 case INPUT: return "input;
 case INPUT_AND_STATIC_SOURCE_FILE:    return "source_file";
 case SOURCE_FILE: #"source_file";
case  INPUT_TYPE_ID:
case STATIC_SOURCE_FILE:    return "source_file" case INPUT_NAME: return "name";
 case STATIC_SOURCE_FILE: {STATIC_SOURCE_FILE:    return "source_file";
 case STRING: return string;
case STATIC_SOURCE_FILE:    return "source_file" default: return "unknown type";
 default: throw new IllegalStateException; }
 case DEFAULT_STATIC_SOURCE_FILE:    return "source_file";
 default: throw new IllegalStateException("unknown";
case  INPUT_NODE:
 case SOURCE_FINDER: return"source_file";
case STATIC_SOURCE_FILE:    return "source_file" case INPUT:
case STATIC_SOURCE_FILE:    return "source_file" case INPUT_TYPE: return "type";
 break;
case STATIC_SOURCE_FILE:    return "source_file" or "static_source"; case INPUT:
case  INPUT_STRING_ID:
 case CUSTOM_STATIC_SOURCE_FILE:    return "source_file";
 default: return "unknown type;
 case INPUT: return input;
 case SOURCE_FILE: returns"source_file";
 case INPUT_NAME: return "input_name"; case INPUT_ID:
 case SOURCE_FULL_STATIC_SOURCE_FILE:    return "source_file";
 case INPUT_STATIC_SOURCE_FILE:    return "source_file";
 case ID: return id;
case  INPUT_TYPE: return "input";
 case ID: return "id;
 default: return "unknown prop type;
 case INPUT_TYPE: return "type;
case STATIC_SOURCE_FILE:    return "source_file" case INPUT_TYPE_ID:
case  INPUT_ID: return "id";
 case STRICT_STATIC_SOURCE_FILE:    return "source_file";
 case INPUT_NAME: return "input;
case  INPUTID:
 case STATIC_NAME:
case STATIC_SOURCE_FILE:    return "source_file" or "static_sourcefile";
 case INPUT_TYPE: return "input_type"; case INPUT_ID:
 case SOURCETF:    return "source_file";
 case TYPE:
 case STRING: return "string;
case STATIC_SOURCE_FILE_TYPE:
 case _STATIC_SOURCE_FILE:    return "source_file";
case STATIC_SOURCE_FILE:    return  "static source file";
 case INPUT_ID: return "id;
case STATIC_SOURCE_FILE:    return  static;
 case TYPE: return type;
 case SOURCE_FOLDER: #"source_file";
 case INPUT;
 case INPUT_NAME: return "input_name"; case INPUT_STRING:
case STATIC_SOURCE_FILE:    return "source_file" case INPUT_TYPE: return "input";
 case INDEX_STATIC_SOURCE_FILE:    return "source_file";
 case SOURCE_FILE_GENSTATIC_SOURCE_FILE:    return "source_file";
 default: return "unknown";
case STATIC_SOURCE_FILE:    return  "static_SOURCE_file";
case STATIC_SOURCE_FILE:    return  "static-source-file";
 case INPUT_NAME: return "input_name"; case INPUT_TYPE:
 case INDEX: return "index;
case STATIC_SOURCE_FILE:    return  "static_source-file";
 case STATIC_SOURCE: (STATIC_SOURCE_FILE:    return "source_file";
 case INPUT_NAME: return "input_name"; case INPUT_LENGTH:
 case SOURCE_FOLDER: returns"source_file";
 case INPUT_STR: return "input;
 case STATIC_FILE_STATIC_SOURCE_FILE:    return "source_file";
 default: return "unknown";
 default: return propType;
 case source_FILE:    return "source_file";
 default: return"source_file";
 case STRING:
case STATIC_SOURCE_FILE:    return "source_file" case INPUT_NAME: return "input";
case STATIC_SOURCE_FILE:    return "source_file" case NAME_ID:
 case INPUT_TYPE: return "input_type"; case INPUT_LENGTH:
case  STRING:
 case NON_STATIC_SOURCE_FILE:    return "source_file";
case  INPUT_NAME: return "input name";
 default: break;
case  INPUT_TYPE_NAME:
 case DOUBLE_STATIC_SOURCE_FILE:    return "source_file";
 case INPUT_NAME: return "input_name" case INPUT_ID:
case STATIC_SOURCE_FILE:    return "source_file" case INPUT_TYPE_NAME:
 switch propType {
 case INPUT_NAME: return "input_name"; case INPUT_TYPE_ID:
case  INPUT_NUMBER_TYPE:
 case SOURCE_FOLDER_NAME:return "source_file";
 case INPUT_NAME: return "input_name"; case INPUT_NUMBER:
 case IS_STATIC_SOURCE_FILE:    return "source_file";
case  INPUT_TYPE: return "input type";
 case INPUT_TYPE: return "input_type"; case INPUT_STRING:
case STATIC_SOURCE_FILE:    return "source_file" ; case STRING:
case STATIC_SOURCE_FILE:    return "source_file" or "static_source_path";
 case INPUT_NAME: return "input_name"; case INPUT_TYPE_NAME:
 default: return "unknown_type;
 case SOURCE_FOLDER::return "source_file";
 case SFILE:return "source_file";
 case source: return"source_file";
case STATIC_SOURCE_FILE_INFO:
case  INPUT_NUMBER_ID:
 case FILE:
case STATIC_SOURCE_FILE:    return  "static_source_file;";
case  INPUT_STRING_TYPE:
 case INFINITE_STATIC_SOURCE_FILE:    return "source_file";
 case INPUT_NAME: return "input_name"; case INPUT_VALUE:
 case INPUT_NAME: return "input_name"; case INPUT_ID_TYPE:
 case INPUT_NAME: return "input_name"; case INPUT:
 case STRING;
 case INPUT_NAME: return "input_name"; case INPUT_ID_NAME:
case  INPUT_DATA: return "inputdata";
case STATIC_SOURCE_FILE:    return  "static_filename";
 case INPUT_NAME: return "input name;
case  TYPE_ID:
 case INPUT_NAME: return "input_name"; case INPUT_ID_STR:
 case INPUT_NAME: return "input_name"; case STRING:
 case SOURCE_FILE: case STRING:return "source_file";
 case INPUT_NAME: return "input_name"; case INDEX:
 case INPUT_NAME: if (inPUT_NAME) { return "input_name"; }
 case INPUT_TYPE: return "input_type"; case INPUT:
 case INPUT_TYPE: return "input type;
 case INPUT_TYPE: return "input_type"; case STRING:
case STATIC_SOURCE_FILEFINDER : return "static_source";
 case INPUT_NAME: return "inputName;
case STATIC_SOURCE_FILE:    return "source_file" else: return "unknown_type";
 case NAME: return"source_file";
 case STATIC_SOURCE_DIR: if (static_source_dir) return "static_source dir";
case STATIC_SOURCE_FILE:    return  "static_source_file"; }
 case INPUT_TYPE: return "input_type"; case ID:
 case INPUT_NAME: return "input_name"; case ID:
 default: return undefined;
 case SOURCE_FOLES:return "source_file";
 case INPUT_TYPE;
 case SOURCES_FILE: #"source_file";
 default: return null;
case STATIC_SOURCE_FILE:    return "source_file" case INDEX:
 case STATIC_SOURCE_DIR: if (static_source_dir) return "static_source directory";
 case SOURCE_FILE: case SOURCE:return "source_file";
 case TEXT: return"source_file";
 case STATIC_SOURCE_DIR: this return "static_source_dir"; default: throw new IllegalStateException;
 case INPUT_ID: return "inputId;
case STATIC_SOURCE_FILE:    return  "static_source_file;"
 case SOURCE_FILE: case FILE:return "source_file";
 case SOURCE_FOLDER_ID:return "source_file";
 case IN_STATIC_SOURCE_FILE:    return "source_file";
 case STATIC_SOURCE_DIR: { return "static_source_dir"; default: throw IllegalStateException;
case STATIC_SOURCE_FILE:    return "source_file" + propType;
 case STATIC_SOURCE_DIR: this return "static_source_dir"; case STATIC_SOURCE_FILE:
 case SOURCE_FILE::return "source_file";
 case STATIC_SOURCE_DIR: this return "static_source_dir"; default: throw IllegalStateException;
 case SOURCE_FOLDER_FILE:return "source_file";
 case JSON_STATIC_SOURCE_FILE:    return "source_file";
 case STATIC_SOURCE_DIR: this return "static_source_dir"; case STATIC_SOURCE_DIR:
 case MODULE_STATIC_SOURCE_FILE:    return "source_file";
case  OUTPUT:
 case STATIC_SOURCE_DIR: if (static_source_dir) { return "static_dir";
 case INPUT_NAME: return "input_name"; case NAME:
 case STATIC_SOURCE_DIR: if (static_source_dir) { return "source_dir";
case STATIC_SOURCE_FILE_STRING:
case STATIC_SOURCE_FILE:    return  "static_source_file;",
 case INPUT_TYPE: return "input_type_name";
case  INDEX:
 case STATIC
 case INPUT_NAME: if (inPUT_NAME) return "input_name"; break;
 case CLASS:
 case INPUT: return "input";;
 case INDENT: return "indent;
 case STATIC_SOURCE_DIR: this return "static_source_dir"; this return "static_source_dir";
 case STORE:    return "source_file";
case STATIC_SOURCE_FILE_NAME: return "static_source";
 case STATIC_SOURCE_DIR: this return "static_source_dir"; default : throw new IllegalStateException ; }
 case INPUT_NAME: return "input_name"; case TYPE:
 case STRINGID;
 case INPUT_TYPE: return "input_type"; case NAME:
 case STATIC_SOURCE_DIR: this return "static_source_dir"; default: throw new IllegalStateException();
case STATIC_SOURCE_FILE:    return "source_file" case TYPE:
case  INPUT_NUMBER_VALUE:
 case INPUT_TYPE: return "input_type_id";
 case STATIC_SOURCE_DIR: this return "static_source_dir"; default: return "unknown type";
 case INPUT_TYPE: return "input_type_string";
 case SOURCES_FILE: returns"source_file";
 case STATIC_SOURCE_DIR: this return "static_source_dir"; case STRING:
 case STATIC_SOURCE_DIR: { return "static_source_dir"; } case STRING:
 case STATIC_SOURCE_DIR: { return "static_source_dir"; } switch propType {
 case STATIC_SOURCE_DIR: { return "static_source_dir"; default: return "unknown type";
case STATIC_SOURCE_FILE_LENGTH:
 case STATIC_SOURCE_DIR: this return "static_source_dir"; case TYPE_FILE:
 case STATIC_SOURCE_DIR: { return "static_source_dir"; default: throw IllegalStateException();
 case INPUT_NAME: return "input_name"; break;
 case INPUT_NAME: return "input_name_string";
case  INPUT_TYPE_VALUE:
 case STATIC_SOURCE_DIR: { return "static_source_dir"; } case STATIC:
 case UNSTATIC_SOURCE_FILE:    return "source_file";
 case STATIC_SOURCE_DIR: { return "static_source_dir"; case TYPE_FILE:
 case STATIC_SOURCE_DIR: this return "static_source_dir"; case SOURCE:
 case STATIC_SOURCE_DIR: this return "static_source_dir"; case STATIC:
 case SOURCE_INSTATIC_SOURCE_FILE:    return "source_file";
case STATIC_SOURCE_FILE:    return "source_file" ; case TYPE:
case STATIC_SOURCE_FILE_URL:
case STATIC_SOURCE_FILE:     return "static_source_factory";
 case STATIC_SOURCE_URL: this return "static_source_url"; case STRING:
case STATIC_SOURCE_FILE:    return  "filename";
case STATIC_SOURCE_FILE_HASH:
 case STATIC_SOURCE_DIR: this return "static_source_dir"; default: throw new IllegalStateException(); }
 case INPUT_INSTATIC_SOURCE_FILE:    return "source_file";
 case STATIC_SOURCE_DIR: this return "static_source_dir"; case STRICT:
 default: throw IllegalStateException();
case  INPUT_TYPE_REF:
case STATIC_SOURCE_FILE:    return  "static_sourcefile;"
case STATIC_SOURCE_FILE:    return  "static_source;";
 case SOURCE_FIFO: #return "source_file";
 case INPUT_NAME: if (inPUT_NAME) return "inPUT_name" ;
case  NAME:
case STATIC_SOURCE_FILE:    return "source_file" case ID:
 case SOURCE:
case STATIC_SOURCE_FILE_ID: return "static_source";
 case INPUT: return "in";;
 switch propType:
 case STATIC_SOURCE_DIR: this return "static_source_dir"; this return "static_source_dir"
 case CONFIG:return "source_file";
 case INPUT: return "in";
case STATIC_SOURCE_FILE:     return "src";
 case STATIC_SOURCE_DIR: { case STATIC_SOURCE_DIR: { case STATIC_SOURCE_FILE: }
case STATIC_SOURCE_FILE:    return "source_file" case NAME:
 case SOURCE_FIFO: :return "source_file";
 case STATIC_SOURCE_DIR: { case STATIC_SOURCE_DIR: { case STATIC_SOURCE_FILE: {
case STATIC_SOURCE_FILE:     case STATIC_SOURCE_DIR:
 case STATIC_SOURCE_URL: { case STATIC_SOURCE_URL: { case STATIC_SOURCE_FILE: }
 case FILE+"source_file";
case  CLASS:
 case STATIC_SOURCE_DIR: { case STATIC_SOURCE_DIR: { case STATIC_SOURCE_DIR: }
 case STATIC_SOURCE_URL: { case STATIC_SOURCE_URL: { case STATIC_SOURCE_FILE: {
 case source_file::return "source_file";
case STATIC_SOURCE_FILE:    return "source_file" case CLASS:
 case STATIC_SOURCE_DIR: { case STATIC_SOURCE_DIR: { case STATIC_SOURCE_FILE: } }
 case SOURCE_FOLDER: return \"source_file";
 case STATIC_SOURCE_DIR: { case STATIC_SOURCE_DIR: { case STATIC_SOURCE_DIR: } }
 case STATIC_SOURCE_DIR: { case STATIC_SOURCE_FILE: { case STATIC_SOURCE_DIR: } }
 case STATIC_SOURCE_DIR: { case STATIC_SOURCE_DIR: { case STATIC_SOURCE_FILE:... }
 case #"source_file";
 case STATIC_SOURCE_DIR: { case STATIC_SOURCE_DIR: { case STATIC_SOURCE_FILE: {} }
 case STATIC_SOURCE_URL: { case STATIC_SOURCE_URL: { case STATIC_SOURCE_URL:... } }
 case SOURCE_FOLDER: return +"source_file";
 case SOURCE_FOLDER: return return"source_file";
case STATIC_SOURCE_FILE:    return "source_file" or "static_source_file" or
 default: return;
case STATIC_SOURCE_FILE : case TEXT:
case STATIC_SOURCE_FILE:     case STATIC_SOURCE_LINE:
case STATIC_SOURCE_FILE:    return "source_file" or "static_source_file;";
case STATIC_SOURCE_FILE:     case STATIC_SOURCE_FILE:
case STATIC_SOURCE_FILE : case FILE:
case STATIC_SOURCE_FILE:    return "source_file" default: return "unknown type"
case STATIC_SOURCE_FILE:    return "source_file" or "static_source_file"; }
 case STATIC_SOURCE_URL: { case STATIC_SOURCE_URL: { case STATIC_SOURCE_URL:... } },
 case STATIC_SOURCE_URL: { case STATIC_SOURCE_URL: { case STATIC_SOURCE_URL:... } };
case STATIC_SOURCE_FILEID:
 case STATIC_SOURCE_DIR: { case STATIC_SOURCE_DIR: { case STATIC_SOURCE_FILE: } } {
 case STATIC_SOURCE_URL: { case STATIC_SOURCE_URL: { case STATIC_SOURCE_FILE: } } {
case  TYPE:
 case PATH:return "source_file";
 case :return "source_file";
case  UNKNOWN:
case  INT:
 break; break;
case STATIC_SOURCE_FILE : return "static_sourcefile"
case STATIC_SOURCE_FILE:    return  null;
 case :"source_file";
 case CLASS;
case STATIC_SOURCE_FILE:    return  "";
 case ID;
case STATIC_SOURCE_FILE:    return "source_file" ; default:
 case ATSTATIC_SOURCE_FILE:    return "source_file";
 case CASE;
 break switch;
 case STATSTATIC_SOURCE_FILE:    return "source_file";
 case NAME;
 default:
 case *"source_file";
 case STAT:
case STATIC_SOURCE_FILENAME:
case STATIC_SOURCE_FILEName:
 default #"source_file";
 switch {
case  INPUT: {
 default :"source_file";
 case filereturn "source_file";
case STATIC_SOURCE_FILE:    return "source_file" break;
 switch:
 case TYPE:    return "source_file";
 case *return "source_file";
case STATIC_SOURCE_FILE:    return "source_file" switch {
case STATIC_SOURCE_FILE : {
case STATIC_SOURCE_FILE:    return "source_file" switch:
case STATIC_SOURCE_FILE:     break;
case STATIC_SOURCE_FILE:    return "source_file" switch;
case STATIC_SOURCE_FILE:     # ignore
case STATIC_SOURCE_FILE:     # unused
 }
case STATIC_SOURCE_FILE():    return "source_file";
case STATIC_SOURCE_FILE':    return "source_file";
