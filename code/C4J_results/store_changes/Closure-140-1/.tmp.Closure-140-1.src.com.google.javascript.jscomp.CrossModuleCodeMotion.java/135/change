 } }
 compiler.reportCodeChange();
 moduleGraph.reportCodeChange();
 } } }
 } } } }
 it. remove();
compiler = info ;
compiler.reportCodeChange(destParent);
 } moduleGraph.reportCodeChange();
 } } } } }
compiler ++ ;
compiler.reportCodeChange(decl.node, destParent);
compiler.reportCodeChange() ; } } } }
compiler.reportCodeChange() ; } } }
compiler. addNode ( destParent ) ;
 } } } } } }
compiler.reportCodeChange ( decl. node, decl. module ) ;
compiler.reportCodeChange(decl, destParent);
compiler. addNode ( decl. node ) ;
compiler. addNode ( decl ) ;
compiler. addNode ( decl. node ) ; }
compiler.reportCodeChange(decl.node);
compiler.reportCodeChange ( decl ) ; }
compiler.reportCodeChange() ; } } } } }
compiler.reportCodeChange ( decl. node ) ; }
 } } moduleGraph.reportCodeChange();
compiler.reportCodeChange() ; } }
compiler.reportCodeChange ( decl ) ;
compiler.reportCodeChange(decl.node, declParent, destParent);
compiler.reportCodeChange() ( decl. node, decl. module ) ;
 } } } } } } } } }
 } break;
compiler. addNode ( decl, destParent ) ;
 } } } } } } }
compiler.reportCodeChange() ; } } } } } }
compiler.reportCodeChange(changes);
compiler. reset ( ) ;
compiler. removeNode ( decl. node ) ;
 if ( compiler. reportCodeChange ) {
 if ( compiler. reportCodeChange!= null ) {
compiler.reportCodeChange ( decl ) ; } }
 } } } } } } } }
compiler.reportCodeChange ( decl. node ) ; } }
compiler. setNode ( destParent ) ;
 if (! allowMove ) { compiler. reportCodeChange ( ) ; } else {
compiler.reportCodeChange() ( decl. node, destParent ) ;
compiler. add ( decl ) ;
compiler. removeNode ( decl. node ) ; }
compiler. close ( ) ;
compiler.reportCodeChange() ; } } } } } } }
compiler.reportCodeChange() ( decl, destParent ) ;
compiler.reportCodeChange ( decl. node, decl ) ;
compiler.reportCodeChange ( decl ) ; } } }
 } else { if (! allowMove ) { compiler. reportCodeChange ( ) ; } else {
compiler.reportCodeChange() ( decl ) ; } } } } }
compiler.reportCodeChange() ; } } } } } } } }
 } } } } } } } } } }
compiler. addNode ( destParent, decl ) ;
compiler.reportCodeChange() ( decl ) ; } } } } } }
compiler.reportCodeChange ( decl ) ; } } } }
compiler.reportCodeChange() ( decl ) ; } } } }
compiler.addNode ( decl, destParent ) ; }
 } if (! allowMove ) { compiler. reportCodeChange ( ) ; } else {
compiler.reportCodeChange ( decl. node ) ; } } }
compiler.reportCodeChange() ( decl ) ; } } }
compiler.addNode ( decl. node, destParent )
compiler. removeNode ( destParent ) ;
 } } } } } } } } } } }
compiler.reportCodeChange ( decl ) ; } } } } } }
compiler. addNode ( node ) ;
compiler.reportCodeChange(decl.node, declParent); } }
 if ( compiler!= null ) {
compiler.reportCodeChange ( decl. node ) ; } } } }
compiler.reportCodeChange ( decl ) ; } } } } }
compiler.reportCodeChange(decl.node, destParent); }
 } if ( compiler!= null ) {
compiler.setNodeForCodeInsertion(destParent);
compiler.reportCodeChange() ; } } } } } } } } }
compiler. setNodeForCodeInsertion ( decl )
compiler.addNodeForCodeInsertion(destParent);
 } else { break ; } }
compiler. save ( ) ;
 } else { if (! allowMove ) { compiler. reportCodeChange ( ) ; } } else {
 if ( declParent!= null ) { compiler. reportCodeChange ( declParent ) ; } if ( allowMove ) {
 } else { break ; } } }
 } else { break ; }
 if ( declParent!= null ) { compiler. reportCodeChange ( ) ; } if ( destParent!= null ) {
compiler. setNode ( decl. node ) ;
compiler.reportCodeChange() ( decl, destParent ) ; }
compiler.reportCodeChange()(); } } } } } }
compiler.reportCodeChange(decl.module, decl.node);
compiler. addNode ( decl, destParent )
compiler.reportCodeChange(decl.node, destParent); } }
compiler. removeNode ( decl ) ;
compiler.reportCodeChange() ( decl. node ) ; } }
compiler.addNode ( decl. node, decl ) ;
 } else { if (! allowMove ) { compiler. reportCodeChange ( ) ; } else { if ( allowMove ) {
compiler.reportCodeChange() ( decl. node ) ; }
compiler. addNode ( decl ) ; } }
compiler.reportCodeChange() ( decl ) ; } }
compiler. pop ( ) ;
 } else { if (! allowMove ) { compiler. reportCodeChange ( ) ; } } else { if (! allowMove ) {
compiler.reportCodeChange() ( decl. node, decl ) ; }
 } else { destParent = decl. parent ;
compiler.reportCodeChange ( decl. node, decl. module )
 } else { compiler. reportCodeChange ( ) ; } } else {
 } else { if (! allowMove ) { compiler. reportError ( ) ; } else {
compiler.reportCodeChange()(); } } } } } } } } }
 } else { compiler. reportCodeChange ( ) ; } } } else {
 if ( declParent!= null ) { compiler. reportCodeChange ( declParent ) ; } if ( compiler!= null ) {
 if ( reportCodeChange ) { compiler.reportCodeChange();
 } if ( compiler. reportCodeChange ) {
compiler.addNode ( decl ) ; }
 } } else { if (! allowMove ) { compiler. reportCodeChange ( ) ; } else { if ( allowMove ) {
compiler.reportCodeChange() ( decl ) ; }
 } else { if (! allowMove ) { compiler. reportCodeChange ( ) ; } else { if (! allowMove ) {
 } if ( reportCodeChange ) { compiler.reportCodeChange();
compiler.reportCodeChange()(); } } } } }
compiler.reportCodeChange(decl.node, destParent, decl ) ;
 if (! allowMove ) { compiler. reportCodeChange ( ) ; } if ( allowMove ) {
 } else { destParent = null ;
 } else { } } }
compiler.reportCodeChange() ( decl. node ) ;
 } } else { if ( compiler!= null ) {
 } } break;
 if ( declParent!= null ) { compiler. reportCodeChange ( declParent ) ; } if ( destParent!= null )
 } else { destParent. removeChild ( decl )
compiler.reportCodeChange(decl.node, declParent); } } }
compiler.reportCodeChange ( decl. node, decl. parent ) ;
 } else { if (! allowMove ) { compiler. reportCodeChange ( ) ; } else { if ( allowMove == true ) {
 if ( declParent!= null ) { compiler. reportCodeChange ( declParent ) ; } if ( decl!= null ) {
 } else { if (! allowMove ) { compiler. reportCodeChange ( ) ; } else { if ( allowMove == false ) {
 } else { compiler. reportCodeChange(); } } } } } else {
compiler.reportCodeChange() ( decl. node, decl ) ;
compiler. removeNode ( decl )
 } } else { break ; } }
 } else { if (! allowMove ) { compiler. reportCodeChange ( ) ; } } } else {
 } else { if (! allowMove ) { compiler. reportCodeChange ( ) ; } else { if (! allowAdd ) {
 if ( compiler. reportCodeChange )
 } else { compiler. reportCodeChange(); } } } } else {
 } else { if (! allowMove ) { compiler. reportCodeChange ( ) ; } else { if ( allowAdd ) {
 } else { if (! allowMove ) { compiler. reportCodeChange ( ) ; } else { if ( allowChange ) {
 } else { if ( compiler. reportCodeChange ) {
compiler.addNode ( decl. node, decl )
 } else { return null ;
compiler. removeNode ( decl. node )
compiler.reportCodeChange(decl.module, destParent);
compiler.reportCodeChange ( decl. node, destParent )
compiler.reportCodeChange() ( decl. node, decl. module )
 if ( declParent!= null ) { compiler. reportCodeChange ( declParent ) ; } if ( report ) {
compiler.reportCodeChange ( decl. node )
compiler.reportCodeChange() ( decl, destParent, decl ) ; }
compiler.addNodeForCodeInsertion(decl);
 if (! allowMove ) { compiler. reportError ( ) ; } else {
 } if ( compiler. reportCodeChange )
compiler.reportCodeChange() ; }
 if (! allowMove ) { compiler.reportCodeChange(); } } else {
compiler. addNode ( decl )
 } else { if ( compiler. reportCodeChange )
 } } } } } } } return destParent ;
compiler. push ( decl ) ;
 if ( declParent!= null ) { compiler. reportCodeChange ( declParent ) ; } if ( reportChanges ) {
 } } else { } } }
 } } } else { return info ;
compiler. setNode ( node ) ;
compiler.reportCodeChange(decl.node, decl.module); }
 } else { if (! allowMove ) { compiler. reportCodeChange ( ) ; } else { if ( ignore ) {
 } } if ( reportCodeChange ) { compiler.reportCodeChange();
compiler.reportCodeChange(decl.node, destParent, decl); }
 } } else { return info ;
compiler.reportCodeChange(decl.node, changes);
 } else { moduleGraph.reportCodeChange();
 } else { destParent = decl. node ;
compiler.reportCodeChange(destParent, decl.node);
 } else {
compiler = null ;
 } else { if (! allowMove ) { compiler. reportCodeChange ( ) ; } else { if ( report ) {
 } } } } } } else { return info ;
 if ( declParent!= null ) { compiler. reportCodeChange ( ) ; } if ( destParent == null ) {
 if ( declParent!= null ) { compiler. reportCodeChange ( declParent ) ; } if ( compiler ) {
 } } } moduleGraph.reportCodeChange();
compiler.addNode ( decl. node )
 } it. remove();
 } else { compiler. reportCodeChange ( ) ; } } } } } } else {
 } else { } } } }
 } else { declParent = decl ; }
 } } } } } else { return info ;
 } } } } } } compiler.reportCodeChange();
compiler.reportCodeChange(decl, destParent); } }
compiler. removeNode ( destParent )
compiler.reportCodeChange(decl, destParent); }
 if ( reportCodeChange ) { moduleGraph.reportCodeChange();
compiler. reset ( )
 } } } } else { return info ;
 } }
compiler.reportCodeChange(decl.module, decl.node); }
 } else { destParent. removeChild ( ) ;
 } } } else { } } } } }
compiler.reportCodeChange()(); } } } }
 } else { compiler. reportCodeChange ( decl ) ; } } else {
 } else { break ;
 } if ( reportCodeChange )
compiler.reportCodeChange(decl.node, declParent, decl);
compiler.reportCodeChange(decl, destParent, declParent);
 } } else {
 } } } else { moduleGraph.reportCodeChange();
compiler.reportCodeChange ( decl, destParent )
 if ( declParent!= null ) { compiler. reportCodeChange ( declParent ) ; } } } } else {
compiler. update ( ) ;
 } else { if (! allowMove ) { compiler. reportCodeChange ( ) ; } else
 } else { return info ;
compiler.addNode ( destParent ) ; }
 if (! allowMove ) { if ( compiler!= null ) {
 if (! allowMove ) { compiler. reportError ( ) ;
compiler.reportCodeChange() ( decl, destParent )
compiler.reportCodeChangeEvent ( decl ) ; }
 } if ( compiler!= null )
 } if ( reportCodeChange ) { moduleGraph.reportCodeChange();
 } } finally {
 } else { if (! allowMove ) { compiler. reportCodeChange ( ) ; } }
 if ( compiler!= null ) { if ( reportChanges ) {
 } } else { moduleGraph.reportCodeChange();
 } } } } } } } ) ;
 } } } compiler.reportCodeChange();
 } } }
 it. next();
compiler. close ( )
 } } } } else { } } }
 } else { if (! allowMove ) { compiler. reportCodeChange ( ) ; } else { if (move)
 if ( compiler!= null ) { if ( reportCodeChange )
 if (! allowMove ) { compiler. reportWarning ( ) ;
compiler.reportCodeChange ( decl. node, changes )
compiler.addNode ( destParent )
 } } } } compiler.reportCodeChange();
compiler. remove ( decl ) ;
 } } if ( reportCodeChange )
 } else { if (! allowMove ) { compiler. reportCodeChange ( ) ; }
 } } compiler.reportCodeChange();
 } finally {
 } } } } else { compiler.reportCodeChange();
 if (! allowMove ) { compiler. reportCodeChange ( ) ; } else
 } } else { compiler.reportCodeChange();
 } else { if (! allowMove ) { compiler. reportCodeChange ( ) ; } else { if (! allowMove ) return
 if (! allowMove ) { compiler. reportCodeChange ( ) ; } }
 } } } ) ;
 } } } } } } } } compiler.reportCodeChange();
 } else { } }
 } } } } } moduleGraph.reportCodeChange();
 } } } } } } } moduleGraph.reportCodeChange();
 } } finally { moduleGraph.reportCodeChange();
compiler.reportCodeChange() ; return destParent ;
 } else { if (! allowMove ) { compiler. reportCodeChange ( ) ; } } } }
 } } if ( reportCodeChanges ) { compiler.reportCodeChange();
 if ( compiler!= null ) { if ( compiler!= null )
 } finally { moduleGraph.reportCodeChange();
 } else { compiler.reportCodeChange();
 destParent = null;
 if (allowMove) { return;
 } else { if (! allowMove ) { compiler. reportError ( ) ; }
 } else { if (! allowMove ) { compiler. reportCodeChange ( ) ; } else { if ( allowMove ) { } }
 destParent. removeChild(decl);
compiler.reportCodeChange ( decl. node, change )
 } } } break ;
 } else { if (! allowMove ) { compiler. reportCodeChange ( ) ; } else { if (! allowMove ) { return
compiler.reportCodeChange(destParent, decl.node); }
 if ( compiler. reportCodeChange!= null )
 } } } else { compiler.reportCodeChange();
 } } } finally {
 if ( reportCodeChange )
compiler.reportCodeChange() ( ) ; } }
 } } } } } } } compiler.reportCodeChange();
 } if ( reportCodeChange ) { info.reportCodeChange();
 } else { if (! allowMove ) { compiler. reportCodeChange ( ) ; } else { if (! allowMove ) break
 } } if ( reportCodeChange ) { info.reportCodeChange();
 } } if ( report ) {
 } else { if (! allowMove ) { compiler. reportCodeChange ( ) ; } } } } }
 } } } } } else { compiler.reportCodeChange();
 if ( allowMove ) { return info;
 } } } else {
 if ( reportCodeChanges ) { compiler.reportCodeChange();
compiler.commit ( ) ;
compiler.build ( ) ;
 } if ( report ) { report.reportCodeChange();
 if ( declParent!= null ) { compiler. reportCodeChange ( declParent ) ; } } } } }
 } } } } else { moduleGraph.reportCodeChange();
 } else { if (! allowMove ) { compiler. reportCodeChange ( ) ; return ; } }
 if ( compiler!= null )
 if ( reportChanges ) { compiler.reportCodeChange();
 if ( report ) { compiler.reportCodeChange();
compiler.reportCodeChange(decls); } }
 if ( reportCodeChange ) { info.reportCodeChange();
 } else { if (! allowMove ) { compiler. reportCodeChange ( ) ; } } }
 if ( compiler. reportCodeChange ) { } else {
 } if ( reportChanges )
 } else { if (! allowMove ) { compiler. reportCodeChange ( false ) ; }
 if ( compiler!= null ) { if ( reportCodeChanges )
 if ( declParent!= null ) { compiler. reportCodeChange ( declParent ) ; } } } } } }
 } else { if (! allowMove ) { compiler. reportCodeChange ( true ) ; }
 } if ( reportCodeChanges ) { compiler.reportCodeChange();
 if (! allowMove ) { compiler. reportCodeChange ( ) ; } } }
compiler.reportCodeChange() return destParent ;
 if ( reportCodeChange ) { reportInfo.reportCodeChange();
 destParent. remove ( );
 } else { it. remove();
 } if (! allowMove ) { compiler. reportCodeChange ( ) ; } } }
 } else { compiler. reportCodeChange ( decl. node ) ; } } } } } } }
compiler. save ( )
 } else { it. next();
 } if ( report ) { moduleGraph.reportCodeChange();
 if (! allowMove ) { compiler. reportError ( decl ) ; } }
 } return info;
 if ( declParent!= null ) { compiler. reportCodeChange ( declParent ) ; } } } } return
compiler.reportCodeChange(decl, destParent, info);
 if ( allowMove ) { return destParent;
 } else { if (! allowMove ) { compiler. reportCodeChange ( ) ; } else return
 if ( report ) { moduleGraph.reportCodeChange();
compiler.reportCodeChange()(); } } }
 } compiler.reportCodeChange();
 if ( declParent!= null ) { compiler. reportCodeChange ( declParent ) ; } } } } } return
 if ( declParent!= null ) { compiler. reportCodeChange ( declParent ) ; } } } } else
 destParent.addChild(decl);
 if ( allowMove ) { break;
 if (reportChanges) compiler.reportCodeChange();
 destParent = destParent;
 destParent. removeChild();
 } } return;
 } if ( reportCodeChange ) { compilerInfo.reportCodeChange();
compiler.reportCodeChange(destParent, decl); }
compiler.reportCodeChange() ( decl ) ;
compiler.exit();
 } else { if ( compiler. reportCodeChange ) { return
compiler.reportCodeChange(info);
 if ( compiler. reportCodeChange!= null ) { return
 } } } }
 } finally { compiler.reportCodeChange();
 destParent = declParent;
 } } else { if ( compiler. reportCodeChange!= null )
compiler. remove ( )
 if (reportChanges)
 finally { moduleGraph.reportCodeChange();
compiler.reportCodeChange(decl). } }
 } } return info;
 } else { compiler. reportCodeChange ( decl. node ) ; } }
compiler.reportCodeChange(decl.module); }
 if ( allowMove ) { return true;
 if ( allowMove ) { } return;
compiler.reportCodeChange(destParent); }
 } else { compiler. reportCodeChange ( ) ; } } } } }
compiler.reportCodeChange(decl.module);
 } break ; }
 if ( allowMove ) { } break;
 break ; } }
compiler. pop ( )
compiler.reportCodeChange() ; return ;
 if ( allowMove ) { break outer;
compiler.reportCodeChange() ; return decl ;
compiler.push ( decl )
compiler.reportCodeChange() return ;
 } else { compiler. reportCodeChange ( ) ; } } } }
 if ( compiler. reportCodeChange ) { } }
 } else { compiler. reportCodeChange ( decl ) ; } } }
 } } } ;
 if ( allowMove ) { } } break;
compiler.reportCodeChange(change);
 } } else { if ( compiler. reportCodeChange ) { return
 destParent. removeParent();
 if (allowMove) { push(decl);
 destParent. remove ( decl);
 if ( compiler!= null ) { } }
 if (allowMove) { move(decl);
 } finally { it. remove();
 } return;
 if ( allowMove ) { break ; break;
 if (allowMove) { add(decl);
 } } else { it. next();
 } } } } } compiler.reportCodeChange();
 destParent. append ( decl);
 if ( allowMove ) { break ; } break;
 if ( allowMove ) { } } return;
 finally { it. hasNext();
 destParent.push(decl);
compiler.reportCodeChange() return decl ;
 } it. finished();
 } } else { it. remove();
 } else { declParent. removeChild();
 it. finished();
compiler = null
 } } } } }
 finally { } it. remove();
 } else { if ( compiler!= null ) { } }
 it.hasNext(););
 if (allowMove) { push(destParent);
 it.add(decl);
 if (allowMove) { update(info);
 } it. next();
 if ( allowMove ) { } } };
 } } } };
compiler = node ;
 if (allowMove) { updateInfo(info);
 } else { if ( compiler. reportCodeChange ) return
 it. close();
 } } else { return null;
 if (destParent == null) { return null);
 if (destParent.removeChild(decl);
compiler.reportCodeChangeEvent(info);
 } } } } break;
 } it. close();
compiler.reportCodeChange() return true ;
 finally { it. removeFromParent();
 } } it. remove();
 if ( compiler. reportCodeChange ) { return
 } return true;
 } else { declParent.detach();
 if (report)
 if (it.next);
 if (destParent == null) { return false);
 } else { } it. remove();
 break ; }
 if ( allowMove ) { } } } break;
 } else { } } break;
 it.remove(decl);
 } } } } } } } } } break;
 if (allowMove);
 } } } else { } } } } break;
 it.removeNext(););
 } } else { } } } } } break;
 } else { declParent. removeParent();
 finally { it. closeTrace();
 } else { declParent.addChild();
 if ( reportCodeChange ) { compiler._reportCodeChange();
 } if ( compiler. reportCodeChange())
 destParent. clearParent();
compiler = root ;
compiler = info
 } } } } } break;
 declParent. removeParent();
 if (allowMove) { (break);
 if (destParent == null) { } });
 if (destParent!= decl.parent);
compiler.reportCodeChange() } }
 finally { compiler.reportCodeChange();
 if (destParent!= decl.node);
 } } } else { } it.next();
compiler.reset(); }
 if (allowMove) { } });
 } } } else { } it. remove();
 if (allowMove) { return ();
compiler.reportCodeChange(compiler);
 finally {
compiler.close(); }
 return (destParent);
compiler = nil ;
 } };
compiler -- ;
 return decl;
 } } } else { } it.close();
compiler.update(); }
compiler.reportCodeChange(update);
 return destParent);
 } continue;
 return "(destParent);
 }
 }, false);
 } } else { moduleGraph().reportCodeChange();
compiler.build(); }
 } });
 } } info.reportCodeChange();
compiler.sync();
 } nodeInfo.reportCodeChange();
compiler.push(); }
 } } } ;
 info.reportCodeChange();
 break ;
 } }, false);
compiler.reportCodeChange(changes); }
 } }}});
 })();
 }, true);
 this.reportCodeChange();
 } } else { } } } } } }();
 } } } } } } } } } }();
 } } } } } } } } } end();
 } } else { } } } } } end();
 if (true);
 } } } else { } } } } }();
 final moduleGraph.reportCodeChange();
 } } ;
 } info.reportCodeChange();
compiler } ;
 nodeInfo.reportCodeChange();
 } while();
 } break();
compiler.reportCodeChange()(); }
 else {
 } this.reportCodeChange();
 } } else
 } } })();
 } continue();
 node.reportCodeChange();
 } }();
 break outer();
 return ;
 source.reportCodeChange();
 } else
 } ;
 } ;
compiler.reportCodeChange ( )
compiler.reportCodeChange() }
 compilerGraph.reportCodeChange();
 nodeGraph.reportCodeChange();
 return
