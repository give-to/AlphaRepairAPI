 return false;
 }
 else { return false;
 else { return false; } } else { return false ; } } else { return false ; } } else { return false ;
 else { return false; } } else { return false ; } } else { return false ; } } else { return true ;
 } else { return hasConditionalAncestor();
 else { return true; } } else { return false ; } } else { return false ; } } else { return false ;
 else { return false; } } else { return false ; } } else { return false ; } } else { return false ; } }
 else { return false; } } else { return true ; } } else { return false ; } } else { return true ;
 else { return false; } } else { return false ; } } else { return false ; } } else { return false ; }
 else { return false; } } else { return false ; } } else { return true ; } } else { return true ;
 else { return false; } } else { return false ; } } else { return false ; } else { return true ;
 else { return ancestor. hasConditional ( )
 else { return true; } } else { return false ; } } else { return false ; } } else { return false ; } }
 else { return false; } } else { return false ; } } else { return true ; } else { return false ;
 } else { return false;
 } else { return hasConditionalAncestor
 else { return false; } } else { return false ; } } else { return true ;
 else { return false; } } else { return false ; } } else { return false ; } } else { return false ; } } }
 else { return true; } } else { return false ; } } else { return false ; } } else { return false ; }
 else { return ancestor. hasConditional ( ) ;
 else { return false; } } else { return false ; } } else { return true ; } } else { return false ; }
 else { return true; } } else { return false ; } } else { return false ; } else { return true ;
 } return false;
 else { return false; } } else { return false ; } else { return true ;
 else { return false; } } else { return false ; } } else { return false ; } else { return false ;
 else { return false; } } else { return true ; } else { return false ;
 else { return false; } } else { return true ; } } else { return false ; } } else { return false ; } }
 default: return false; } return true;
 else { return false; } } else { return hasConditionalAncestor();
 else { return true; } } else { return false ; } } else { return false ; } } else { return false ; } } }
 else { return false; } } else { return false ; } } else { return false ;
 else { return true;
 } else { return false ; } } else { return true ;
 } else { return false ; } } else { return false ;
 else { return false; } } else { return false ; } } else { return false ; } } else { if ( return false )
 default: return true; } return false;
 else { return true; } } else { return false ; } } else { return false ; } else { return false ;
 else { return ancestor. hasConditionalAncestor ( n. declModule ) ;
 else { return false; } } else { return false ; } } else { return false ; } } else { return false ; } } ;
 default: return false; } return false;
 else { return false; } } else { return hasConditionalAncestor
 else { return false; } } else { return false ; } } else { return false ; } } return true ;
 else { return false; } } else { return hasConditionalAncest
 break;
 else { return false; } } else { return false ; } } else { return false ; } } else { if ( ignore ) return ;
 else { return false; } } else { return false ; } } else { return false ; } } else { if ( ignore )
 default: return false; } if (hasConditional
 else { return false; } } else { return false ; } } else { return false ; } } else { if ( false )
 else { return false; } } else { return false ; } } else { return true ; } } return false ;
 else { return false; } } else { return true ; } } else { return false ; }
 else { return false; } } else { return false ; } } else { return false ; } }
 else { return false; } } else { return hasConditionalAncestor ;
 else { return false; } else { return true ; } } else { return false ; }
 else { return false; } } else { return false ; } } else { return true ; } } return true ;
 else { return false; } } else { return true ; } else { return false ; }
 else { return false; } } else { return false ; } } else { return false ; }
 else { return ancestor. isConditional ( )
 else { return false; } default: return true; } else { return false;
 else { return false; } } else { return false ; } } else { return false ; } } else {
 else { return false; } } else { return false ; } else { return false ;
 else { return false ; } } else { return true ;
 else { return false ; } } else { return false ;
 else { return false; } } else { return false ; } } else { return true ; }
 else { return false; } } else { return true ; } } return false ;
 else { return false; } default: return false; } else { return true;
 else { return false; } } else { return hasConditionalAnnotation
 else { return false; } } else { return true ; } } else { return false ; } }
 else { return false; } } else { return false ; } } else { return false ; } } }
 else { return false; } } else { return false ; } else { return true ; }
 } else { return hasConditionalAncestor() {
 else { return false; } default: return true; } return false;
 else { return false; } } else { return false ; } } else { return true ; } }
 else { ancestor = n ;
 } else { return false ; } } else { return false ; } } else { return false ; } }
 else { return ancestor. isConditional();
 else { return ancestor instanceof Declaration ;
 else { return ancestor instanceof Node ;
 } else { return false ; } } else { return false ; } } else { return false ; } } }
 else { return false; } } else { return hasConditional ( n )
 else { return false; } } else { return true ; } } else { return false ; } } }
 else { return false; } } else { return false ; } } } else { return false ; } } } }
 else { return false; } } else { return false ; } } else { return true ; } } }
 else { return false; } else { return true ; } } else { return false ; } }
 else { return false; } } else { return true ; } return false ;
 } else { return hasConditionalAncestor ( )
 else { return false; } } else { return false ; } } else { return false ; } } } }
 else { return false; } } else { return hasConditional ( )
 else { return ancestor. hasConditional ( n);
 } else { return false ; }
 else { return true; } } else { return false ; } } else { return false ; } } } }
 else { return false; } default: return ancestor instanceof Declaration;
 else { return false ; }
 } else { return false ; } return true ;
 else { return ancestor. hasConditional ( n )
 else { return false; } } else { return false ; }
 else { return false ; } }
 else { return false; } } else { return false ; } }
 else { return false; } } else { return true ; } }
 else { return false ; } default : { return true ; } }
 } else { return false ; } }
 default: return false;
 case Token.DO:
 else { return false; } } else { return hasConditional ( n );
 } return false;
 else return false;
 default: return false; } }
 return true;
 case Token.END:
 } } return false ;
 } }
 break; }
 } } else {
 return false; }
 } else {
 break; } }
 } return false ; }
 } } } }
 } } }
 } } else
 } }
 } return false
 } else
 }
 continue;
 default:
 break();
 break;
 else
