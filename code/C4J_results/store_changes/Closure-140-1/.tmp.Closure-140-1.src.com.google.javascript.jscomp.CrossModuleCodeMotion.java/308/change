if (hasConditionalAncestor(n) && info.allowMove) {
if (info.allowMove) {
if (hasConditionalAncestor(n)) {
if (hasConditionalAncestor) {
if (canMoveValue(n)) {
if (hasConditionalAncestor(n, info)) {
if (info.allowMove)
if (hasConditionalAncestor(info)) {
if (hasConditionalAncestor(n) || info.allowMove) {
 if (info.hasConditionalAncestor(n)) {
 info.allowMove = false; } } else
 info.allowMove = true; }
 info.allowMove = true;
 info.allowMove = false; } } else {
 info.allowMove = true; } else
 if (info.allowMove)) {
 info.allowMove = true; } else if(hasConditionalAncestor(n)) {
 info.allowMove = true; } } else {
if (info.allowMove == true) {
 info.allowMove = true; } if(hasConditionalAncestor(n)) {
if (hasConditionalAncestor(info))
 info.allowMove = false; }
 info.allowMove = false; } else
 info.allowMove = true; } } else
 return; } else
 info.allowMove = false; } else if(hasConditionalAncestor(n)) {
if (hasConditionalAncestor(n) && info.allowMove == true) {
 info.allowMove; }
 if (recursive) {
if (hasConditionalAncestor(n, info, parent)) {
 return; } else{
 info.allowMove = false; } } else { if (info.allowMove) {
 info.allowMove = true; } } else { if (info.allowMove) {
 info.allowMove = true; if(hasConditionalAncestor(n)) {
 if (info.allowMove == true)) {
 info.allowMove = false; } if(hasConditionalAncestor(n)) {
if (hasConditionalAncestor(n))  { info.allowMove = true;
if  (info.allowMove == true)
 if (recursive)) {
if (hasConditionalAncestor(info.allowMove)) {
 return; }
if  (info.allowMove == -1) {
 info.allowMove = false; } } else { if (recursive) {
if (hasConditionalAncestor(info, parent)) {
 } else if (info.hasConditionalAncestor(n)) {
if (hasConditionalAncestor(n))  { info.allowMove = true; } else
 info.allowMove; } if(hasConditionalAncestor(n)) {
 if (!canMoveValue(n)) {
 info.allowMove = true; } } else { if (recursive) {
 info.allowMove = true; } } else { info.allowMove = false;
 info.allowMove = true;
 info.allowMove = true; } } else { if (info.allowMove)
 } else if(hasConditionalAncestor(n)) {
 info.allowMove = true; } } else { info.allowMove = false ; } if (info.allowMove) {
 info.allowMove = false; } } else { if (info.allowMove)
if  (!recursive)
if (hasConditionalAncestor(n))  { info.allowMove = true; }
 info.allowMove = false;
 if (info.allowMove == false)) {
 info.allowMove = false; } if (info.allowMove) {
 info.allowMove = false; } } else { info.allowMove = true ; } if (info.allowMove) {
 info.allowMove = false; if(hasConditionalAncestor(n)) {
 info.allowMove = true; } } else { info.allowMove = false ; } } else { if (recursive) {
 info.allowMove = true; } } else { info.allowMove = false ; } if (recursive) {
 }else{
if (recursive)
 info.allowMove = true; } } else { info.allowMove = false ; } } else { if (info.allowMove)
if (canMoveValue(info.getFirstChild(n)) {
if  (info.allowMove === true) {
if  (info.allowMove == false) {
 info.allowMove = false; } } else if (info.allowMove) {
 info.allowMove = false; } } else { info.allowMove = true ; } if (recursive) {
 info.allowMove = false; } if (recursive) {
 info.allowMove = true; } } else { info.allowMove = false ; } if (info.allowMove)
 info.allowMove = false; } } else { info.allowMove = true ; } if (info.allowMove)
 info.allowMove = false; } } } else {
 } else
 if (canMoveValue(info, parent,n)) {
 info.allowMove = true; } } else { info.allowMove = false ; } } else {
 if (canMoveValue(name, gramps)) {
 info.allowMove = false; } } else { if (info.allowMove == true) {
 info.allowMove = true; } } else { info.allowMove = false ; } } else
 info.allowMove = true; } } else { info.allowMove = false ; } else
 info.allowMove = true; } } else { if (info.allowMove == false) {
 info.allowMove = true; } } else { info.allowMove = false ; } } } else {
if (hasConditionalAncestor(n, info.allowMove)) {
 info.allowMove = true; } } else { if (info.allowMove) { info.allowMove; }
 return; } } else{
 info.allowMove = true; } } else { if (info.allowMove) { }
 return; } if(hasConditionalAncestor(n)) {
 return; } } else
 if (canMoveValue(info,n)) {
 info.allowMove = true; } } else { info.allowMove = true;
 if (info.allowMove()) {
 info.allowMove = true; } } else { info.allowMove = false ; }
 info.allowMove = false; } } else { info.allowMove = true ; } } } else {
 info.allowMove = false; } } else { if (!recursive)
 info.allowMove = true; } } else { if (info.allowMove == true) {
 info.allowMove = true; } } else { info.allowMove = false ; } } } else { if (recursive) {
 info.allowMove = false; } } else { if (info.allowMove) { }
 info.allowMove = true; } } else { info.allowMove = false ; } } else { info.allowMove ; }
if  (!recursive) {
 info.allowMove = true; } } else { info.allowMove; }
if (hasConditionalAncestor(n) ||!info.allowMove) {
 info.allowMove = true; } } } else {
 info.allowMove = true; } if (info.allowMove) {
 info.allowMove = false; } } else { info.allowMove = true ; } else
 info.allowMove = true; } } else { info.allowMove = true ; } } else { if (info.allowMove)
 if (info.allowMove &&!info.hasConditionalAncestor(n)) {
 info.allowMove = true; } } else { info.allowMove = false ; } } else { if (!recursive) {
if  (!reverse)
 info.allowMove = false; } if (isConditional) {
 info.allowMove = true; } } else { if (info.allowMove) { return; }
 info.allowMove = false; } } else { if (recursive)
 info.allowMove = true; } } else { if (!recursive)
if (hasConditionalAncestor(n) && info.allowMove == false) {
 info.allowMove = true; } } else { info.allowMove = false ; } } else { if (!recursive)
 info.allowMove = false; } if (info.allowMove)
 info.allowMove = true; } } else { info.allowMove = false ; } if (info.allowMove == true) {
if (hasConditionalAncestor(n) && info.allowMove)
 info.allowMove = false; } } else { info.allowMove; }
 info.allowMove = true; } } else { info.allowMove = false ; } } } else
if (hasConditionalAncestor(info, name)) {
if  (info.allowMove!= false) {
 info.allowMove = true; } } else { if (info.allowMove) { } } else
 info.allowMove = false; } } else { } else
 info.allowMove = true};
 return; } else if(hasConditionalAncestor(n)) {
 info.allowMove = false; } else {
 info.allowMove = true; } } else { info.allowMove = false ; } if (info.ignore) {
 info.allowMove = true; } } else { info.allowMove = false ; } } else { if (isConditional) {
if  (info.allowMove == false)
 info.allowMove = false; } } else { if (info.allowMove) { } } else
 if (info.allowMove == -1)) {
if  (info.allowMove!= false)
 info.allowMove++; }
 info.allowMove = true; } } else { if (info.allowMove) { info.allowMove(); }
 if (info == null) {
 } else if (canMoveValue(info,n)) {
 info.allowMove = false; } } else { info.allowMove = true ; } if (info.ignore) {
 info.allowMove = true; } } else { info.allowMove = false ; } if (info.parent) {
 info.allowMove = true; } } else { info.allowMove = false ; } } else { if (recursive)
 info.allowMove = true; } } else { info.allowMove = false ; } } } } else {
 if (info.allowMove!== true) {
 if (!canMoveValue(name, gramps)) {
 if (info.allowMove!== false) {
if  (info.allowMove === true)
 info.allowMove = true; } } else { if (recursive)
if (hasConditionalAncestor(n, parent, info)) {
 if (info.allowMove && info.hasConditionalAncestor(n)) {
 if (canMoveValue(info, t,n)) {
if (hasConditionalAncestor(n) &&! recursive) {
 if (info!= null) {
 if (canMoveValue(info.allowMove)) {
 info.allowMove = false; } else { } } else {
 info.allowMove = true; } } else { if (info.allowMove) { info.allowMove } else
 info.allowMove = true; } } else { info.allowMove = false ; } } else { } else
if (hasConditionalAncestor(info, parent, info.allowMove)) {
 info.allowMove = true; } } else { if (info.allowMove) { } else
 info.allowMove = true; } } else { info.allowMove = false ; } } } } else
 info.allowMove = false; } } else { info.allowMove = true ; } } else { if (recursive)
 info.allowMove = true; } } else { info.allowMove = true ; } else
 if (isReference(info)) {
 info.allowMove = true; } else {
 info.allowMove(); }
 if (canMoveValue(t, info,n)) {
 if (!reverse)) {
 info.allowMove = true; } } else { } else
 if (!canMove(n)) {
 if (info.allowMove!== false)) {
if  (info.allowMove == null) {
 if (info.allowMove === -1){
 info.addDeclaration(n, parent, info);
if  (!info.allowMove) {
if (hasConditionalAncestor(n) && info.allowMove == -1) {
 info.allowMove = true; } } } else
 return; } else if (info.allowMove) {
 info.allowMove = true; } else {
if (hasConditionalAncestor(n))) { info.allowMove = true;
 if (info.allowMove!== true)) {
 info.allowMove = false;
 info.allowMove } else
 if (info.allowMove!= false)) {
 } else if (canMoveValue(n)) {
 info.allowMove = true; } } else { info.allowMove = false ; } } else { info.allowMove } {
if (info.allowMove == -1) return;
 info.allowMove = false; } } } } else
if (hasConditionalAncestor(info, parent, info)) {
 if (info.allowMove == null)) {
 info.allowMove = true; } if (!hasConditionalAncestor(n)) {
 info.addDeclaration(n, parent);
 info.allowMove = false; } } } else
 info.allowMove = true; } } else { info.allowMove = false ; } } else { info.allowMove } ;
if (hasConditionalAncestor(n))  { if (info.allowMove) {
 return; } else { if (info.allowMove) {
 info.allowMove = true; } } else { if (!recursive)
 if (isReference(n)) {
 info.allowMove = false; } else { } } } else
 if (!canMoveValue(info, parent,n)) {
 } else if (info.allowMove == true)) {
 if (canMoveValue(name, info)) {
 info.allowMove = true; } else
 info.allowMove = false; } } else { } } else
if (hasConditionalAncestor(n) || info.allowMove)
 info.allowMove = true; } } else { info.allowMove = false ; } } } } } else
if  (info.allowMove == true) return;
 if (canMoveValue) if(hasConditionalAncestor(n)) {
 return; } if (info.hasConditionalAncestor(n)) {
if (hasConditionalAncestor(n) &&!info.allowMove == false) {
 info.allowMove } else if (info.hasConditionalAncestor(n)) {
 info.allowMove = true; } if (info.allowMove)
 info.allowMove = true}; if(hasConditionalAncestor(n)) {
 if (!reverse) {
 if (info.allowMove) { if(hasConditionalAncestor(n)) {
 return; } else { if (info.allowMove == true)
 if (parent==n)) {
 if (!canMoveValue(info,n)) {
if (hasConditionalAncestor(n, info, name)) {
if  (!info.allowMove)
 if (canMoveReference(n)) {
if (canMoveValue(info.getValue(n)) {
 } else if (info.allowMove == false)) {
if (hasConditionalAncestor(n))  { if (info.allowMove)
 info.allowMove++; } if(hasConditionalAncestor(n)) {
 info.allowMove = true; } } else if (info.allowMove) { else
if (hasConditionalAncestor(n) &&!info.allowMove == true) {
if (hasConditionalAncestor(info, gramps)) {
 if (compiler.hasConditionalAncestor(n)) {
 info.allowMove = true; } else { if (!recursive) {
 if (info.allowMove < 0) {
 info.allowMove = true; } if (info.ignore) {
 info.allowMove = true; } }
if (hasConditionalAncestor(info, n)) {
if (hasConditionalAncestor(n) &&!info.allowMove) {
 info.allowMove = false}; if(hasConditionalAncestor(n)) {
 info.allowMove = false; } } else { if (!recursive)
 info.allowMove = false; } }
if (hasConditionalAncestor(n) && info == null) {
 return; } if (canMoveValue(n)) {
 info.allowMove = true; } } else { } } else
 info.allowMove; if(hasConditionalAncestor(n)) {
 if (info.allowMoved) {
 info.allowMove = false; } } else if (info.allowMove) { else
 if (info.allowMove && info!= null) {
 if (info.allowMove && compiler.hasConditionalAncestor(n)) {
if (hasConditionalAncestor(info, n, parent, info)) {
 info.allowMove = true; } } if(hasConditionalAncestor(n)) {
if (hasConditionalAncestor(info, n, parent)) {
if (hasConditionalAncestor(n))) { info.allowMove = true; }
if (hasConditionalAncestor(n, info).allowMove)) {
 if (info.canMoveValue(n)) {
if (canMoveValue(n) || canMoveName(n)) {
if (hasConditionalAncestor(parent, info.allowMove)) {
 if (info.allowMoves) {
 if (!canMoveValue(info, name)) {
if (hasConditionalAncestor(n) || recursive) {
if (canMoveValue(info).addChild(n)) {
if (hasConditionalAncestor(n))  { info.parent = parent;
if (hasConditionalAncestor(n) && info.allowMove === true) {
if (hasConditionalAncestor(n))  { info.allowMove = false;
if  (info.allowMove) { return; }
 info.allowMove = true; } } else { info.allowMove = false ; } } else { else
 info.allowMove = false; } else { } } } else {
 if (info == null)) {
if (hasConditionalAncestor(t, info, name)) {
 info.allowMove = true; } } else { info.allowMove = false ; } } else { }
if (canMoveValue(info).canMoveName(n)) {
 info.allowMove = true; } } else { info.allowMove = false ; } } } else { }
if (hasConditionalAncestor(info, name, parent)) {
 if (info.allowMove &&!hasConditionalAncestor(n)) {
 } else { if (info.hasConditionalAncestor(n)) {
if (hasConditionalAncestor(n) && info.allowMove!= false) {
 info.allowMove = false};
 if ((info.allowMove)){
 if (reverse) {
 if (info.allowMove!= true)) {
if (hasConditionalAncestor(info, parent, info).allowMove)) {
 info.allowMove = true; } } else {
 info.allowMove = false; } } else { else
 info.allowMove = true; } } else { info.allowMove = false ; } } } else { else
if (hasConditionalAncestor(n))  { info.allowMove = false; } else
 info.allowMove = false; } } if(hasConditionalAncestor(n)) {
 return; } else if (info.hasConditionalAncestor(n)) {
if (hasConditionalAncestor(t, info, parent)) {
if (canMoveValue(info) || canMoveName(n)) {
 } else { if (hasConditionalAncestor(n)) {
if (canMoveValue(info).canMoveValue(n)) {
if (canMoveValue(name) && canMoveName(n)) {
 info.allowMove = false; } } } } } else
if (hasConditionalAncestor(n) &&!canMoveValue(n, parent, info) {
 return; } } else if (info.hasConditionalAncestor(n)) {
if (canMoveValue(info).addNode(n)) {
if (canMoveValue(info).call(n)) {
if (hasConditionalAncestor(info.allowMove)) return;
 info.allowMove = false; } if (info.ignore) {
if (hasConditionalAncestor(n) ||!info.allowMove)
 if (canMove(n)) {
 info.allowMove = true; } if (info.allowDelete) {
if (hasConditionalAncestor(n) ||!canMoveValue(name, parent, info) {
if (canMoveValue(n) || canMoveProperty(n)) {
 if (info!= null)) {
if (hasConditionalAncestor(n) ||!recursive) {
if (canMoveValue(name) && canMoveValue(n)) {
if (hasConditionalAncestor(n) && (info.allowMove == true) {
 if (info.allowMove.hasConditionalAncestor(n)) {
if (hasConditionalAncestor(n) &&!canMoveValue(info, n, parent) {
 info.allowMove = true; } if (info.skip) {
if (hasConditionalAncestor(n) &&!canMoveValue(name, parent, info) {
 if (!recursive)) {
 info.allowMove = true; } } else { else
 if (info.allowMove == false) { return; }
 continue; } if (info.hasConditionalAncestor(n)) {
 info.allowMove = false; } else { } } } } else
 } if (hasConditionalAncestor(n)) {
 info.allowMove = false; } if (info.allowMove)
if (hasConditionalAncestor(n) &&!info.allowMove && recursive) {
 info.allowMove = false; } if (info.allowMove,
 if (!hasConditionalAncestor(n)) {
if (hasConditionalAncestor(n) && info!= null) {
 if (info.allowMove(*)) {
 if (info.allowMove (!)) {
if  (allowMove) {
 if (canMoveVars(n)) {
if (hasConditionalAncestor(n))  { info.allowMove = true; else
 if ((recursive)) {
if (hasConditionalAncestor(n))  { info.allowMove = false; }
 } else if (compiler.hasConditionalAncestor(n)) {
 if (info.allowMove == Boolean.NULL) {
 if (canMoveDeclaration(n)) {
 if (info.allowMove == Boolean.NO) {
if (canMoveValue(info) && isReference(n)) {
 info.allowMove(); } if(hasConditionalAncestor(n)) {
 if (info.allowMove==)) {
if (hasConditionalAncestor(n) ||!canMoveValue(n, parent, info) {
if (hasConditionalAncestor(info, v)) {
 info.allowMove = false; } } else { } }
 } if (info.hasConditionalAncestor(n)) {
if (hasConditionalAncestor(info.allowMove)) break;
 if (info.allowModules) {
if (hasConditionalAncestor(n, parent, info.allowMove)) return;
 if (!info.allowMove)) {
 if (!recn)) {
if (hasConditionalAncestor(info))) {
 info.addDeclaration(n);
 if (info.allowMoveEnabled){
 if ((info == null)) {
if (canMoveValue(info).process(n)) {
if (canMoveValue(name) && isReference(n)) {
 if (canMoveValue(info.n)) {
if (hasConditionalAncestor(n, info.allowMove)) return;
if (hasConditionalAncestor(n) && info.allowMove < 0) {
if (canMoveValue(info).getValue(n)) {
 if (n)) {
if (hasConditionalAncestor(n) &&!canMoveValue(n, info)) {
if (hasConditionalAncestor(n) && info.allowMoved) {
if (hasConditionalAncestor(n))  { if (!recursive)
 if (info.allowMove == Boolean.ALL) {
 } else if (!canMoveValue(n)) {
if (hasConditionalAncestor(n, info, parent))) {
 } else if (canMoveVars(n)) {
if (hasConditionalAncestor(info, parent, info).allowMove) {
if (hasConditionalAncestor(n) || (canMoveValue(name, info))) {
 if (canMoveValue(name, grn)) {
if (hasConditionalAncestor(n) || info.allowMove == true) {
if (hasConditionalAncestor(n) && info.allowMoves) {
if (hasConditionalAncestor(n))) {
if (hasConditionalAncestor(n) || (canMoveValue(n, info))) {
if (hasConditionalAncestor(n))  { info.addConditional (n);
if (hasConditionalAncestor(n) ||!info.allowMove) return;
if (hasConditionalAncestor(n, info, parent, info) ) {
if (hasConditionalAncestor(n))  { info.addConditional(n); }
 info.allowMove = true; } } else { } }
if (hasConditionalAncestor(n))  { if (!recursive) {
 if (info.allowMove &&!reverse) {
 if (canMoveValue(v, grn)) {
if (hasConditionalAncestor(n) &&!canMoveValue(n, info, parent) {
if (hasConditionalAncestor(n) ||!info.allowMove == false) {
 info.allowMove = false; } else
if (hasConditionalAncestor(n) &&!canMoveValue(info, parent, info) {
 if (info.move) {
if (canMoveValue(info).test(n)) {
 if (!info.hasConditionalAncestor(n)) {
if (hasConditionalAncestor(n) ||!info.allowMove || recursive) {
if (hasConditionalAncestor(n) && info.allowCascade) {
if (hasConditionalAncestor(n))  { info.ignore = true;
 if (canMoveValue(info, grn)) {
 if (info.allowMoveOn) {
 return; } } if (info.hasConditionalAncestor(n)) {
if (canMoveValue(info).apply(n)) {
if  (allowMove)
 return; } else {
 info.allowMove } if(hasConditionalAncestor(n)) {
if (hasConditionalAncestor(n) ||!recursive)
if (hasConditionalAncestor(n) &&!canMoveValue(n, info))) {
if (canMoveValue(info).addReference(n)) {
if (hasConditionalAncestor(n) || (canMoveValue(name, parent) )) {
if (hasConditionalAncestor(n))  { if (allowMove) {
 if (info.allowMove==){
 if (info.allowMoveOnly) {
if (hasConditionalAncestor(n) || info.allowMove == false) {
if (hasConditionalAncestor(n))  { if (allowMove)
 synchronized (n)) {
 } else if (canMoveDeclaration(n)) {
 continue; } } else
 } else if (recursive) {
 if (info.allowMoveEnabled)){
if (hasConditionalAncestor(n) ||!info.allowMove == true) {
 if (!isReference(info)) {
 if (canMoveValue(info).move(n)) {
 } } else if(hasConditionalAncestor(n)) {
if (hasConditionalAncestor(n) &&!canMoveValue(info, n)) {
 } else if (canMigrateValue(n)) {
 if (canMoveValue(name, gn)) {
 if (!canMoveVars(n)) {
if (hasConditionalAncestor(n) || info == null) {
if (hasConditionalAncestor(n) &&!canMoveValue(name, info)) {
if (hasConditionalAncestor(n) &&!recursive)
if (hasConditionalAncestor(n) && info.allowModules) {
 if (canMoveName(n)) {
 if (canMoveValue()(n)) {
 if (canMoveValue(name, cn)) {
 if (info.isUsedName(n)) {
if (info.allowMove == false) return; else
if (hasConditionalAncestor(n, info)) return;
if (hasConditionalAncestor(n) && recursive) {
if (hasConditionalAncestor(n) ||!canMoveValue(name, info))) {
 info.allowMove = true; }
 } if (recursive) {
if (hasConditionalAncestor(n) && info.allowMove)) {
if (hasConditionalAncestor(n))  { return; }
if (hasConditionalAncestor(n) &&!canMoveValue(info, name)) {
if (hasConditionalAncestorNode(info)) {
if (hasConditionalAncestor(n) ||!canMoveValue(name, info)) {
if (hasConditionalAncestor(info, parent, info)) { return;
 if (canMoveValueIf(hasConditionalAncestor(n)) {
 if (info.scope.hasConditionalAncestor(n)) {
if (hasConditionalAncestor(n) == false) {
if (hasConditionalAncestor(info, parent, info.allowMove))) {
 } else if (Info.hasConditionalAncestor(n)) {
 continue; } else if(hasConditionalAncestor(n)) {
if (hasConditionalAncestor(n))  { info.parent = null;
 continue; } if(hasConditionalAncestor(n)) {
if (hasConditionalAncestor(name, gramps)) {
if (hasConditionalAncestor(n, info))) {
if (hasConditionalAncestor(n))) { info.allowMove = true; else
 } else { if (!hasConditionalAncestor(n)) {
if  (!)
 return; } if (compiler.hasConditionalAncestor(n)) {
 } })) {
 continue; } } else{
 if (!move(n)) {
 } else if (!info.hasConditionalAncestor(n)) {
 info.allowMove = true; else
 if (reverse)) {
if (hasConditionalAncestor(n) &&!isConditional (n, info) {
 if (is(info)) {
 if (name==n)) {
if (hasConditionalAncestor(n), info)) {
if (hasConditionalAncestor(n) &&!info.isConditional (n) {
if (hasConditionalAncestor(n))  { if (recursive)
if (hasConditionalAncestor(n) ||!canMoveValue(info, parent))) {
 if (canMoveValueFrom(n)) {
 } else if (canMoveVAR(n)) {
if (hasConditionalAncestor(n) ||!info.allowMoves) {
 if (canMoveVARs(n)) {
if (info.allowMove == true) { } else
 break; } } else
if (hasConditionalAncestor(n) &&!isConditional (n), info) {
 if (isCall(n)) {
 if (!isReference(n)) {
 } } else{
 info.addDeclaration(n, parent, info));
 } else { if (compiler.hasConditionalAncestor(n)) {
 if (canMoveVAR(n)) {
 if (isFunction(n)) {
if (hasConditionalAncestor(n) &&!info.allowMove &&! recursive) {
if (hasConditionalAncestor(n) ||!info.allowMove && recursive) {
 if (canMoveMovedValue(n)) {
if (hasConditionalAncestor(n) ||!info.allowCascade) {
if (hasConditionalAncestor(n) || info.allowMove!= false) {
if (hasConditionalAncestor(n))  { info.allowMove = true,
 info.addDeclaration(n, parent, info); }
 info.allowMove = true,
if (info!= null)
 if (canMoveValue(hasConditionalAncestor(n)) {
 if (!n)) {
 if (info.allowMove == true) return; else
 info.addDeclaration(n, parent, info); } else
 return; }{
if (hasConditionalAncestor(n) ||!info.allowMove!= false) {
if  (info.allowMove == -1) return
if (hasConditionalAncestor(n, info)) break;
 return; } else { if (info.allowMove == true),
 } } else
 } else if (canMoveReference(n)) {
if (hasConditionalAncestor(n) &&!info.allowMove &&!reverse) {
 return; } }
 if (true) {
if (hasConditionalAncestor(n) || (canMoveValue(name, parent)) false) {
 info.addDeclaration(n, parent, info)
if (hasConditionalAncestor(n) || (canMoveValue(name, parent)) true) {
if (true)
 return; } else { if (info.allowMove == true);
if (hasConditionalAncestor(n, parent)) {
 info.addDeclaration(parent, info.allowMove); }
if (hasConditionalAncestor(n) || info.allowCascade) {
 if (true == recursive)) {
if (false)
if (hasConditionalAncestor(n) || parent.getFirstChild() == n) {
 if (canMoveDefines(n)) {
 if (info.broken) {
if (info.allowMove) { return; } else
 return; } } if(hasConditionalAncestor(n)) {
 } if (!hasConditionalAncestor(n)) {
 info.addDeclaration(n, parent); }
if (hasConditionalAncestor(n))  { continue; }
 info.allowMove = false; }
if (info == null)
if  (info.allowMove == true),
if (hasConditionalAncestor(n) || info.allowMoves) {
 if (canMoveValue(argn)) {
if (hasConditionalAncestor(n) ||!isDirective(n, info) {
if (hasConditionalAncestor(n))  { if (!reverse)
 if (()) {
if (hasConditionalAncestor(n) && info.allowMove))
 if (!canMoveReference(n)) {
 if (true)) {
if (hasConditionalAncestor(n) || parent == n) {
 return; } else { if (info.allowMove) {}
if (hasConditionalAncestor(n) || info.allowMoved) {
 } else {
if (hasConditionalAncestor(n) ||!info.allowMove || recurse) {
if (hasConditionalAncestor(n), info) {
 if (!moveValue(n)) {
if (hasConditionalAncestor(n) && info.allowMove())
if (hasConditionalAncestor(n) || info.allowExpression) {
if (hasConditionalAncestor(n) &&!info.allowMove) { } else
if (hasConditionalAncestor(info)) return;
if (hasConditionalAncestor(n) || parent.getFirstChild() == null) {
 if (null==n)) {
 if ((reverse)) {
if (hasConditionalAncestor(n) ||!info.allowMove ||!parent) {
 info.addDeclaration(parent, info, name); }
 if (Info.hasConditionalAncestor(n)) {
 if (info!=n)) {
if (canMigrateValue(n)) {
 if (false)) {
if (canMoveValueInDeclaration(n)) {
if (hasConditionalAncestor() ) {
if (hasConditionalAncestor(t, info)) {
if (hasConditionalAncestor(n))  { break; }
 if (!is(n)) {
if (hasConditionalAncestor(n) || recursive)
if (hasConditionalAncestor(parent)) {
if (hasConditionalAncestor(name)) {
if (hasConditionalAncestor(info.allowMove)) { } else
if (canMoveValueIfDefined(n)) {
if (hasConditionalAncestor(name, info)) {
if (info.canMoveVars(n)) {
 if (false) {
if (hasConditionalAncestor(n, info, parent, info)) { } else
if (hasConditionalAncestor(n) ||!reverse) {
 info.addDeclaration(n); }
if (hasConditionalAncestor(n, info.allowMove)) { } else
 if (debug) {
if (canMoveVARValue(n)) {
if (hasConditionalAncestorNode) {
if (hasConditionalAncestor(n, parent, info.allowMove)) { return
 continue; }
if (hasConditionalAncestor(n))  { if (false)
if (hasConditionalAncestor(n, info, parent, info)) { } }
if (hasConditionalAncestor(info, parent, info)) { } else
 continue; } else
if (canMoveValueIfExists(n)) {
if (hasConditionalAncestor(n)) return;
if (hasConditionalAncestor(t, info))) {
if (hasConditionalAncestor(info.allowMove)) { } }
 continue; } else{
if (hasConditionalAncestor(n) && info.move) {
if (hasConditionalAncestor(n) || recurse) {
 if ($(n)) {
if (canMoveVARName(n)) {
 if (!switch(n)) {
if (hasConditionalAncestor(n, info.allowMove)) { } }
if (canMoveDeclarationInModule(n)) {
if (hasConditionalAncestor(n, info, parent, info)) { return
if (hasConditionalAncestor(n) || info.parent) {
if (canMoveMovableValue(n)) {
if (hasConditionalAncestor(info.parentNode)) {
if (hasConditionalAncestor(n, parent, info)) { } else
if (hasConditionalAncestor(n))  { return;
if  (reverse)
 return }else{
if  (debug)
if (hasConditionalAncestor(n) || info!= null) {
if (hasConditionalAncestor(n) && info.allowMove) { return
if (hasConditionalAncestor(n) &&!reverse) {
if (hasConditionalAncestor(info.allowMove)) {}
if (hasConditionalAncestor(n) ||!info.allowMove) {}
if (hasConditionalAncestor(n) && recursive)
if (hasConditionalAncestor(n, info, parent, info)) { *
 } if (!reverse) {
 } else { if (reverse) {
if (hasConditionalAncestor(n) ||!info.move) {
 if (!continue(n)) {
if (hasConditionalAncestor(n, info.allowMove)) { return
 if (!skip(n)) {
 if (!(n)) {
if (hasConditionalAncestor(n) && info.parent) {
if (hasConditionalAncestorOnly) {
if (hasConditionalAncestor(n, info.allowMove)) {}
if  ()
if (hasConditionalAncestor(n, parent, info)) { } }
if (hasConditionalAncestor(name))) {
 if (!register(n)) {
if (hasConditionalAncestor(n), info)
if (hasConditionalAncestor(n) ||!info.parent) {
 processReference(n)) {
 if ((n)) {
 if (.hasConditionalAncestor(n)) {
 if (recurse) {
 break; } else
if (hasConditionalAncestor(n) && info === null) {
 if ()) {
 if () {
if (hasConditionalAncestor(n) ||!parent) {
if (hasConditionalAncestor(n))  { continue;
if (hasConditionalAncestor(info, parent)) { return
if (hasConditionalAncestor(n) || parent == gramps) {
if (hasConditionalAncestor(n) ||!recursive))
 if (isn)) {
if (hasConditionalAncestor(n))  { if (!recursive))
 } }) {
if  (...)
if (hasConditionalAncestor(n))  { if (allowMove),
if (hasConditionalAncestor(info++)) {
if (hasConditionalAncestor(info, parent)) { *
 if (newn)) {
 } ()) {
if (hasConditionalAncestor(n) || parent.isGlobal) {
if (info)
if (hasConditionalAncestor(info)))
if (hasConditionalAncestor(n) &&!info.move) {
if (hasConditionalAncestor(n) && recurse) {
 if (!retn)) {
if (hasConditionalAncestor)) {
if (hasConditionalAncestor(n))  { break; } }
 return; if(hasConditionalAncestor(n)) {
if (canMoveObject(n)) {
 } } if(hasConditionalAncestor(n)) {
if (hasConditionalAncestor(info)) { return
if (hasConditionalAncestor(n))  { return; } }
if (hasConditionalAncestor(n))  { return; } else
if (ignore) {
if (canSkipValue(n)) {
if (hasConditionalAncestor(n))
 if (!) {
 } (() {
if (hasConditionalAncestor(n) &&!info.parent) {
if (hasConditionalAncestor(name))
if (hasConditionalAncestor(n) ||!info) {
 continue; if(hasConditionalAncestor(n)) {
if (hasConditionalAncestor(n) ) { } else
if (isName(n)) {
if (hasConditionalAncestor(info2)) {
if (hasConditionalAncestor(parentNode)) {
if (hasConditionalAncestor(n) && parent!== n) {
if (hasConditionalAncestor(n) && parent == gramps) {
if (hasConditionalAncestor(parent))
if (hasConditionalAncestor(n) ) return; else
if (false
if (hasConditionalAncestor(n) &&!parent) {
if (hasConditionalAncestor(n))  break;
if (hasConditionalAncestor(n) && allowMove) {
if (hasConditionalAncestor(n), info))
 } if(n)) {
if (hasConditionalAncestor(n) || recursive))
 } }
if (hasConditionalAncestor(n))  { } }
if (move(n)) {
 else if(hasConditionalAncestor(n)) {
if (remove(n)) {
 while (hasConditionalAncestor(n)) {
if (hasConditionalAncestor(n)))) {
if (hasConditionalAncestor) { return
if (skip(n)) {
}; }
if (hasConditionalAncestor(n)) {}
 if (_hasConditionalAncestor(n)) {
if (switch(n)) {
 }
if (hasConditionalAncestor(n))) {}
if (hasConditionalAncestor) {}
if (continue(n)) {
}; else
if (hasConditionalAncestor(n))  { return
 } while(hasConditionalAncestor(n)) {
if (hasConditionalAncestor(v)) {
 else
} finally{
