 switch ancestor.getType()) {
switch  ancestor {
switch (ancestor) {
 switch ancestor) {
 switch (ancestor.getType()) {
 switch (getType()) {
 if (ancestor) {
switch (ancestor.type) {
 if (ancestor!= null)
 if (ancestor!= null) {
switch (ancestor.getType())  { case Token.DO:
 if ( ancestor == n ) { return true ; } } else {
 switch (Token) ancestor.getType()) {
 switch(()) {
 switch (n.ancestor.getType()) {
switch (ancestor.getType())  { case Token.CONDITION:
switch ( ancestor. type ) { case Token.DO:
switch (ancestor.type)
 if ( ancestor == null ) { return false ; } if ( ancestor instanceof Conditional ) {
 if ( ancestor == null ) { return false ; } if ( ancestor!= n ) {
 if ( ancestor!= null ) { if ( ancestor == n ) { return true ; } } } else {
 if ( ancestor == null ) { return false ; } if ( ancestor == n ) { return true ; } if ( ancestor!= n ) {
switch ( ancestor ) { case Token.CONDITION:
 if ( ancestor == null ) { return false ; } if ( ancestor!= null ) {
 if (ancestor instanceof Declaration) {
 if ( ancestor == null ) { return false ; } if ( ancestor instanceof Declaration ) {
 if ( ancestor == n ) { return true ; } if ( ancestor == n ) { return false ; } if ( ancestor!= n ) {
 switch ()) {
 if ( ancestor instanceof Conditional ) { return true ; } } else {
 if ( ancestor == null ) { return false ; } if ( ancestor == n ) { return true ; } if ( ancestor!= null ) {
 if ( ancestor == null ) { return false ; } if ( ancestor == n ) { return true ; } } else {
 if (ancestor)
 if ( ancestor == n ) { return true ; } if ( ancestor!= n ) {
switch (ancestor.getType())  { case Token.CUSTOM:
switch (ancestor).getType() { case Token.DO:
 if ( ancestor. isConditional ( ) ) {
 if ( ancestor == n ) { return true ; } else {
 if ( ancestor == n ) { switch (token) {
 if (ancestor instanceof Conditional) {
 if ( ancestor instanceof ConditionalAncestor ) {
switch (ancestor.getType() == Token.DO)
 if ( ancestor == null ) { return false ; } if ( ancestor!= n ) { return true ; } } else {
 if ( ancestor == n ) { return true ; } if ( ancestor == n ) { return false ; } if ( ancestor!= null ) {
 if ( ancestor!= null ) { if ( ancestor == n ) { return true ; }
 if ( ancestor == n ) { case Token.DO:
 if ( ancestor == n ) { return true ; } } else { return false ;
switch (ancestor.getType())  { case Token.CONDITIONAL:
 if ( ancestor == n ) { return true ; } if ( ancestor == n ) { return false ;
 if ( ancestor instanceof Conditional ) return true ;
 if ( ancestor instanceof ConditionalNode ) {
switch ( ancestor ) { case Token.CUSTOM:
 if ( ancestor == null ) { return false ; } if ( ancestor == n ) { return true ; } if ( ancestor == n ) {
 switch (anc.getType()) {
 if ( ancestor. isConditional ( ) ) return true ;
 if ( ancestor instanceof Conditional) {
switch (ancestor.token) {
 if ( ancestor == null ) { return false ; } if ( ancestor == n ) { return true ; } } } else {
 if ( ancestor == null ) { return false ; } if ( ancestor!= n ) { return true ;
 if ( ancestor!= null ) { switch ( ancestor. type ) {
 if ( ancestor!= null ) { if ( ancestor == n ) {
 if ( ancestor instanceof Conditional ) { return true ; } else {
 switch (ancestor)
 if ( ancestor == null ) { return false ; } if ( ancestor == n ) { return true ; } else {
 switch (ancender.getType()) {
 if (ancestor instanceof Node) {
switch (ancestor.getType())  { case Token.COMMA:
 if ( ancestor == null ) { return false ; } if ( ancestor!= n ) { return true ; } } } else {
 if ( ancestor. isConditional ( ) ) { return true ; } } else { return false ;
 if ( ancestor. isConditional ( ) ) { return true ; } else {
 if ( ancestor == null ) { return false ; } if ( ancestor == n ) { return true ; } if (true) {
 if ( ancestor == null ) { return false ; } if ( ancestor == n ) { return true ; } if (! recursive ) {
switch (ancestor.getType() == Token.CONDITION)
 if ( ancestor == null ) { return false ; } if ( ancestor!= n ) { return true ; }
 if ( ancestor == null ) { return false ; } if ( ancestor!= n ) { return true ; } if (true) {
 if ( ancestor == null ) { return false ; } if ( ancestor!= n ) { return false ; } if (true) {
switch (ancestor.getType()).name {
 if ( ancestor == null ) { return false ; } if ( ancestor!= n ) { return false ; } if (! recursive ) {
switch (ancestor.getType() == Token.CONDITIONAL)
switch (ancestor.getType())  { case Token.WHILE:
 if ( ancestor == null ) { return false ; } if (true) {
 switch(anchor){
 switch (ancestor()) {
switch (ancestor.getType() == Token.CONDITIONAL) {
 switch (anchor.getType()) {
switch  ( ancestor ) { case Token.DO:
 if ( ancestor. isConditional ( ) ) { return true ; } if ( ancestor instanceof Conditional ) {
 switch (ancor.getType()) {
 if ( ancestor!= null ) { switch ( ancestor ) {
 switch (ancendant.getType()) {
switch (ancestor.getType() { case Token.CONDITION:
switch (ancestor.getType())  { case Token.OPEN: return true;
 switch (ancendant.getTokenType()) {
 if ( ancestor == null ) { return false ; } if (! recursive ) {
 switch (token) ancestor.getType()) {
 if ( ancestor == null ) { return false ; } if ( ancestor == n ) { return true ; } } if (true) {
switch  ( ancestor ) { case Token.WHILE:
 if ( ancestor!= null ) { if ( ancestor == n ) { return true ; } }
 if ( ancestor instanceof Conditional ) { continue ; }
 switch (or.getType()) {
 switch (ancender.getTokenType()) {
 if ( ancestor instanceof Conditional ) { switch (token) {
 if ( ancestor == null ) { return false ; } if ( ancestor == n ) { return true ; } if ( ancestor!= null )
 switch (token()) {
 switch (ancestor) { switch(ancestor.getType()) {
 if ( ancestor == n ) { switch (token.type) {
switch (ancestor.getType() == Token.DO):
 if ( ancestor instanceof Conditional ) { return true ; }
 switch (ancher.getTokenType()) {
 if ( ancestor instanceof ConditionalDeclaration ) {
switch (ancestor.getToken()) {
switch (ancestor.getType() { case Token.CONDITIONAL:
switch ( ancestor. type ) { case Token.OP:
switch  (node.type) {
 switch(ancendant){
switch (ancestor.getType().getName()) {
switch (ancestor.tokenType) {
 switch ( ancestor.getTokenType()) {
 switch (Token.ID == ancestor.getType()) {
 if (isConditionalAncestorType(ancestor.getType()) {
switch ( ancestor. type ) { case Token.IF:
switch (ancestor.getType() == Token.CONDITIONAL):
 switch (Token.getType(ancestor.getType()) {
switch (ancestor.getType( ) { case Token.CUSTOM:
switch (ancestor.type()) { case Token.DO:
switch (ancestor.getType())  { case Token.OP:
switch (ancestor.getType() == Token.CUSTOM) {
 switch ((Token) ancestor.getType()) {
switch  ( ancestor. type ( ) ) {
switch (ancestor.getType() == Token.CONDITION):
 if (isConditionalAncestor(ancestor.getType()) {
 if ( ancestor == n ) { switch (node) {
 if ( ancestor!= null ) { switch (token) {
 if ( ancestor == n ) { switch (node.type)
switch (ancestor).getType() { case Token.OP:
 switch (token) {
 if ( ancestor!= null ) { if ( ancestor == n ) { return true ; } } }
 switch (Token type = ancestor.getType()) {
switch (ancestor.getType()) { switch (ancestor.type)
switch (ancestor.getType())  { case Token.EXPRESSION:
 if ( ancestor. isConditional ( ) ) { return true ; }
switch  ( ancestor ) { case Token.CALL:
switch (ancestor.getType() == Token.CUSTOM):
 switch(anchor)
 if ( ancestor!= null ) { if ( ancestor == n ) { return true ; } } else
switch (ancestor.getType())  { case Token.DO: return true;
switch (ancestor.getType() == Token.COMMA)
 switch (getToken()) {
 if ( ancestor == n ) { return true ; }
switch  ( ancestor ) { case Token.CASE:
switch (ancestor.getType())  { case Token.CALL:
switch  (node.getType()) {
 if ( ancestor == null ) { return false ; } if ( ancestor == n ) { return true ; } } else
switch (ancestor.getType())  { switch (ancestor.type()) {
switch (ancestor.getType( )) { switch (ancestor) {
switch (ancestor.getType())  { switch (ancestor.type) {
 switch (token= ancestor.getType()) {
 if ( ancestor. isConditional ( ) ) { return true ; } } else { return false ; }
 switch (node.type()) {
switch (ancestor.getType(n)) {
switch (ancestor.getType())  { case Token.ADD:
switch (ancestor).getType().getName() {
 if ( ancestor instanceof ConditionalAncestor)
switch (ancestor).getType() { case Token.ADD:
 if ( ancestor instanceof Token.DO ) {
 switch (Token.DO == ancestor.getType()) {
 switch (Token.CLASS == ancestor.getType()) {
 if ( ancestor == n ) {
 if ( ancestor!= null ) { if ( ancestor == n ) { return true ; } } else { }
switch  ( ancestor ) { case Token.CATCH:
 switch (ancestor).getFirstChild(ancestor.getType()) {
switch (ancestor.getType() == Token.DO:
switch (ancestor.getType())  { case Token.CONCAT:
 if ( ancestor == null ) { return false ; } if ( ancestor == n ) { return true ; } } } else
switch (ancestor.getType() == Token.WHILE):
switch (ancestor.getType( ) { case Token.DO:
 if ( ancestor == null ) { return false ; } if ( ancestor == n ) { return true ; } } } {
switch (ancestor.getType() == Token.CONSTRUCTOR)
switch (ancestor.getType())  { switch (ancestor.token) {
 switch (Tokens) ancestor.getType()) {
 switch (archor) {
 if ( ancestor == null ) { return false ; } if ( ancestor!= n ) { return true ; } } else
 if ( ancestor == n ) { switch (node.token)
 if ( ancestor == null ) { return false ; } if ( ancestor == n ) { return true ; } }
 switch ((Token) ancestor){
 switch (this.conditionalAncestor.ancestor.getType()) {
switch (ancestor.getType() == Token.COMMA):
 if (isConditionalAncestorToken(ancestor.getType()) {
 if ( ancestor!= null ) { if ( ancestor == n ) return true ; } }
 switch (this.ancestor.getType()) {
 switch (node.ancestor.getType()) {
switch (ancestor.getType(Node.TYPE)) {
 if (anchor) {
 switch ((Node) ancestor.getFirstChild()) {
 switch (a.getType()) {
 switch (Token token : ancestor.getType()) {
 switch (anchor.type()) {
switch (ancestor.getType())  { case Token.CLASS:
switch (ancestor.getType())) {
switch (ancestor.getType())  { case Token.CASE:
 switch (this.token) {
 if ( ancestor!= null ) { if ( ancestor == n ) { return true ; } } else { } }
switch (ancestor.getType())  { case Token.FOR:
 if ( ancestor. isConditional ( ) ) { return true ; } } else
 if (ancendant!= null) {
 if ( ancestor == null ) { return false ; } if ( ancestor!= n ) { return true ; } }
 if ( ancestor == null ) { return false ; } if ( ancestor == n ) { return true ; } } }
 if ( ancestor == n ) { switch (node.kind)
 if (isConditional(anc) { switch(ancestor.getType()) {
 switch (a.getTokenType()) {
 if ( ancestor!= null ) { if ( ancestor == n ) return true ; } } else
 switch (anor.getType()) {
 if (anchor!= null)
 switch (ancestor.kind) {
 if ( ancestor!= null ) { if ( ancestor == n ) { return true ; } } } else { }
switch (ancestor).getType() {
switch (ancestor.getType().name) {
 switch (ancendant.getType())) {
 switch ( ancestor ) { case Token.DO:{
 switch (TypeToken) ancestor.getType()) {
 if ( ancestor!= null ) { if ( ancestor == n ) { return true ; } } } else { {
 if ( ancestor == n ) { return true ; } } else
switch  ( ancestor. type ) { case CASE:
 switch (ancendant.getTokenType())) {
switch (ancestor).type {
 switch (this.conditionalAncestor(ancestor.getType()) {
 if ( ancestor == null ) { return false ; } if ( ancestor == n ) { return true ; } } else { }
switch (ancestor.getType())  { case Token.CATCH:
 switch (node.getType() == ancestor.ancestor.getType()) {
switch  ( ancestor. type ) { case NAME:
switch  ( ancestor. getType ( ) )
switch (ancestor.getType())  { case Token.COMMAND:
switch (ancestor.getType( ) { case Token.COMMA:
 switch ((Node) ancestor.getFirstChild())) {
 switch (TokenToken) ancestor.getType()) {
 if ( ancestor!= null ) { if ( ancestor == n ) { return true ; } else
 switch (node.getFirstChild().getType()) {
 if ( ancestor instanceof Token.IF) {
 switch (a.type){
 switch (token) ancestor) {
switch (ancestor.getType().getValue()) {
switch  (token.getType(anc) {
 switch (ancestor.getType) {
 if ( ancestor instanceof Conditional ) { return true ; } } else
 switch (this.conditionalAncestors.ancestor.getType()) {
 if ( ancestor == null ) { return false ; } if ( ancestor!= n ) { return true ; } } else { }
 switch (ancher.type) {
 switch (Token.IDENTIFIER.getType()) {
 boolean result = false;
 switch (Token.COMMA == ancestor.getType()) {
 switch (or.type()) {
 switch(ancendant)
switch (ancestor.getType() {
 return true;
 if ( ancestor == n ) { return true ; } if ( ancestor!= n ) { }
switch (ancestor).getType() { case NAME:
 switch (node.tokenType){
 switch (ancor.type()) {
 if ( ancestor!= null ) { switch ( ancestor )
 switch (Token.STRING == ancestor.getType()) {
 if ( ancestor == null ) { return false ; } if ( ancestor == n ) { return true ; } } } else { {
 switch (ancendant.getLiteral()) {
 switch (ancendant.getFirstChild(0)) {
switch (ancestor.getType( ) { case Token.WHILE:
 switch (a.getFirstChild().getType()) {
 switch (this.conditionalAncestorancestor.getType()) {
switch (ancestor.getType( ) { case Token.CALL:
 switch (Token.TYPE == ancestor.getType()) {
switch (ancestor.getType())  { switch (ancestor.type())
 switch (node.token) {
 switch (ancendant.getToken().getType()) {
switch (ancestor.getType(token.TYPE)) {
 switch (ancestorToken) {
 switch (ancendant.getType(0)) {
switch (ancestor.getType() == Token.CASE:
 if ( ancestor == null ) { return false ; } if ( ancestor!= n ) { return true ; } } } else { {
 switch (a.getFirstChild().getType)) {
 switch (T) ancestor.getType()) {
 if ( ancestor. isConditional ( ) ) { return true ; } }
 switch (ancendant.getType().name) {
 if ( ancestor instanceof Node) {
 switch (ancor.type) {
 switch (ancestor).getNextToken(ancestor.getType()) {
 if (isConditionalAncestorOfType(ancestor.getType()) {
switch  (token)
switch (ancestor.getType())  { case 0:
 if ( ancestor instanceof Conditional ) { return true ; } }
 if ( ancestor == Node.DO) {
 if (canConditionalAncestor(ancestor.getType()) {
 switch ( ancestor.getFirstChild.type()) {
 if ( ancestor!= null ) { switch (token)
 switch (Token).getType(ancestor.getType()) {
 if ( ancestor == n ) { switch (node.type())
 switch (ancestor.getType().ancestor.getType()) {
switch (ancestor).getType() { case 0:
switch  (node.getToken()) {
 switch ((Token) ancestor).getParentNode().getType()) {
 switch (this.type) {
switch (ancestor.getType())  { case Symbol:
switch (ancestor.getType())  { case (Token) ancestor.token:
 switch ((Node) ancestor)) {
 switch ((Token) n.ancestor.getType()) {
 switch (ancher.getTokenType())) {
 switch (node.code()) {
 switch ( ancestor. type ) { case ANY:{
 switch (ancendant.getFirstChild().type) {
 switch ( ancestor. type ) { case Symbol:{
 if ( ancestor == n ) { return true ; } } else { }
 if ( ancestor. isConditional ( ) ) { return true ; } else
 switch (node.getTokenType())){
 switch ((Token) ancestor).getToken().getType()) {
 switch (a.getType(?)) {
 switch ((Token) ancestor.getNext().ancestor.getType()) {
 switch (ancendant.getType(?)) {
 if (true) {
switch (ancestor.getType(0)) {
 if (isConditionalAncestorNode(ancestor.getType()) {
 switch ((Token) (Token) ancestor.getType()) {
 if ( ancestor instanceof Conditional ) { return true ; } else
 switch ( ancestor. type ) { case Symbol::{
 switch (node.getTokenType() ){
switch (ancestor.getType() == Token.IF):
 switch (ancendant.getFirstChild.type()) {
 if (isConditionalAncestorTokenType(ancestor.getType()) {
 switch (ancestor.code) {
 if ( ancestor. isConditional ( ) ) { return true ; } } } else { {
 switch (ancestorType) {
 switch (Node) ancestor.getType()) {
 switch (a.getToken(0)) {
switch (ancestor.getType(Token.COMMA)) {
 if (isConditionalAncestor.test(ancestor.getType()) {
 switch (oracle.getType(node)) {
switch (ancestor.getType() == Token.COND):
 switch ((Token) (Token) ancestor).getType()) {
 if ( ancestor instanceof Conditional ) { return true ; } } }
 switch (ancendant.getType().getName) {
 if ( ancestor == n ) { continue;
switch (ancestor.getType()) { switch (ancestor.token)
 switch (ancender.getTokenKind()) {
 if (parent!= null)
 switch (ancendant.getToken().getType) {
 switch (ancendant.getTokenKind()) {
 switch (Token.quote(ancestor.getType()) {
 switch (Token.ID(ancestor.getType()) {
 if ( ancestor == n ) { return true ; } else { }
 boolean found = false;
 switch (ancendant.getTokenType)) {
 switch (Token.ANY(ancestor.getType()) {
 switch (ancendant.getType(...)) {
switch (ancestor.getType())  { case 1:
 switch ancestor.type()) {
 switch (ancendant.getTokenUpper()) {
 switch (ancendant.getToken())) {
switch (ancestor.getType().name()) {
 if ( ancestor == n ) { return true ; } }
 switch ((Token) ancestor.getParent().getType()) {
 switch ((anchor)) {
 switch if (ancestor.getType()) {
 switch ((Token) ancestor).getParent().getType()) {
switch (ancestor.getType(token.COMMA)) {
 switch (TokenTokenTokenTokenType) ancestor.getType()) {
 switch (ancendant.getToken.type()) {
 if ( ancestor == n ) { switch (node.kind())
 switch (ancendant.getType().getValue) {
 switch (origin) {
 switch ((Token) ancestor).getRootNode().getType()) {
 switch (orcestor)
 switch ($(ancestor.getType()) {
switch (ancestor.getType())  { case CASE:
 switch (Token.getToken(ancestor.getType()) {
 switch (canBeConditional(n.ancestor.getType()) {
 switch (ancendant.getType().getName()) {
 if ( ancestor == n ) { return true ; } else
switch (ancestor.token)
 switch (ancestorancestor.getType()) {
 switch ((Node) ancestor.getFirstChild(*)) {
 switch (node.getType(?)){
switch (ancestor).token {
switch (ancestor.getType(...) {
 switch ((Node)ancestor.getType()) {
 switch ((Token) ancestor).getType()) {
 switch ((Token) n.getNext().ancestor.getType()) {
 switch (oracle.getToken(node.getType()) {
 if (true)) {
switch (ancestor.getType())  { case "if":
 switch (ancestor).getToken(ancestor.getType()) {
switch (ancestor.getType( ) { case Token.OP:
 switch (this.hasConditionalNode(ancestor.getType()) {
 switch switch (ancestor.getType()) {
switch (ancestor.getType(Token.DO)) {
 switch (oracle) {
 switch (ancher.getToken.type()) {
 switch (switch(token)) {
 switch Token.ANY(ancestor.getType()) {
switch (ancestor.getType().getName() {
switch (ancestor.getType())  { case 3:
 if (isConditionalAncestorInNode(ancestor.getType()) {
 switch (oracle.getToken(anc.getType()) {
 switch(type){
 switch ((Token) ancestor).get().getType()) {
 switch (getToken(anc)) {
switch (ancestor.getType())  { case #IF:
switch (ancestor.getType( ) { case Token.FOR:
 switch (oracle.getToken( ancestor.getType()) {
switch (ancestor.getType(Node.NAME)) {
 switch (( ancestor)) {
 switch (Token token = ancestor.getType()) {
 switch (Token.class(ancestor.getType()) {
 switch ((Token) ancestor).get(getType()) {
 switch (a.getType().compare ancestor.getType()) {
 switch ancestor->{
switch (ancestor.getType( ) { case Token.IF:
 switch (node(anc)) {
 if ( ancestor. isConditional ( ) ) { }
 if (parent == n)
 switch (Token) getToken(ancestor.getType()) {
 switch (token.getTokenType(ancestor.getType()) {
 switch ((Token) n).ancestor.getType()) {
 switch (node.getType())) {
switch (ancestor.getType() == "if":
switch (ancestor.getType(Token.OPEN))
switch (ancestor.getType() == Token.OP):
 switch (Type token = ancestor.getType()) {
switch (ancestor.getType( ) { case Token.CLASS:
 switch (token(anc)) {
switch (ancestor.getType(node)) {
 switch ((ancestor type)) {
 switch (Token.getTokenType(ancestor.getType()) {
switch (ancestor.getType())  { case Token.DO: return true; }
 switch (canBeConditionalNode(ancestor.getType()) {
 switch (Token.uses(ancestor.getType()) {
 switch (a.getType().cmpTo ancestor.getType()) {
switch (ancestor.getType())  { case 'if':
switch (ancestor.getType()) { switch (ancestor.token())
 switch ((token)) {
 switch (getToken( ancestor)) {
 switch (node.getTokenType)) {
 switch (current(anc)) {
switch (ancestor.getType(Token.CONC) {
 switch (Node type : n.ancestor.getType()) {
 switch (node.getToken())) {
 switch (parent.getType()) {
 switch (a.getType().cmp(n.getType()) {
switch (parent) {
 if (true)
 switch (token.code(anc)) {
 switch ((Token) (Node)ancestor.getType()) {
 switch Token.type(ancestor.getType()) {
switch (ancestor.getType())  { case '(':
 if ( ancestor instanceof Conditional ) { }
 switch (ancestor).switchType(ancestor.getType()) {
 switch (node.getType().cmp(parent.getType()) {
 switch (node.getType() |= ancestor.getType()) {
 switch Token.token(ancestor.getType()) {
switch (ancestor.getType(NodeType) {
 return false;
 switch (ancor) {
 switch ((Token) ancestor).get(ancestor.getType()) {
 switch ((Token) ancestor.getNextancestor.getType()) {
 switch (.){
 switch ((ancestor ancestor)) {
 switch ((Token) ancestor.next().ancestor.getType()) {
 switch Token.quote(ancestor.getType()) {
 switch ((parent)) {
 switch (this.parentType= ancestor.getType()) {
switch (ancestor.getType(NodeKind) {
 switch (token).getFirstChild(ancestor.getType()) {
 switch (Token.COMPATENT.getType()) {
 switch Token.ID(ancestor.getType()) {
switch (ancestor.getType() == declarationType)
 switch ((Token) n.getNextancestor.getType()) {
 switch( ancestor)) {
switch (ancestor.getType(true)) {
switch  (origin)
 switch ((Token) ancestor).getancestor.getType()) {
 switch (token.getFirstChild(ancestor.getType()) {
 switch ((type)) {
switch (ancestor.getType())  { case "if",
 if(switch(ancestor.getType()) {
 switch (){
 switch (?){
 switch (type()) {
switch (ancestor.getType()).name(){
switch (ancestor.getType() == declaration) {
 switch(origin()) {
 switch ($.ancestor.getType()) {
 switch(accor)) {
switch (ancestor.kind)
 switch ((Token) ancestor.nonancestor.getType()) {
 switch("(parent)) {
switch (ancestor.getType()).value {
switch (ancestor.getType() { {
switch (ancestor.type())
 switch (switch(ancestor.getType()) {
switch (ancestor.getType() == "{")
switch (ancestor.getType(.) {
switch (ancestor.getTypeName()) {
switch (ancestor.getType())  { default:
switch (ancestor.getType() == "if")
 if ( ancestor == n ) { }
switch (ancestor.getType() == 0)
 switch ( ancestor. t ) { case
 switch ( ancestor. type ) { case
switch (parent)
switch (ancestor.code)
 switch ($)) {
 if (true))
 switch toToken(ancestor.getType()) {
 switchToToken(ancestor.getType()) {
 if (getType()) {
switch (ancestor.getType())  { case:
 switch (ancgetType()) {
 switch({)) {
switch (ancestor.getType()).name();
 { switch(ancestor.getType()) {
switch (ancestor.getType(node) { {
 switch("()) {
 ancestor.getType()) {
switch (ancestor.getType())  { case null
 switch Token(ancestor.getType()) {
 switch ($) {
 switch (=) {
switch (ancestor.getType())  { case undefined
 switch ($()) {
 switch (!getType()) {
 switch (anchgetType()) {
 switch (") {
 switch (!ancestor.getType()) {
 enum enum{
 switch Character(ancestor.getType()) {
 switch anchor.getType()) {
switch (ancestor). {
 ancestor &{
 switch ((ancestor.getType()) {
 ancestor.{
switch (ancestor...) {
switch (ancestor.getType())  { *
 ancestor._{
 ancestor->{
switch  ancestor={
switch  descendant {
switch  anchor {
 switch descendant.getType()) {
 switch ancestors.getType()) {
 switch parent.getType()) {
 {
switch (ancestor.getType())  {\ case
switch (ancestor.getType())  {\}
