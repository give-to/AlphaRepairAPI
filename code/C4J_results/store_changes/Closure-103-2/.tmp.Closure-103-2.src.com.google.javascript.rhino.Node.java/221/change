case SYNTHETIC_BLOCK_PROP: return "synthetic";
 case Synthetic: return "synthetic";
 case SYnthetic_PROP: return "synthetic";
 case IS_SYNTHETIC_BLOCK_PROP: return "synthetic";
case SYNTHETIC_BLOCK_PROP: return "block";
 case Symbol: return "synthetic";
 case SYnthetic:return "synthetic";
 case SYNTHETIC_PROP: return "synthetic";
case SYNTHETIC_BLOCK_PROP: return "syntaxblock";
 case SYnthetic_PROPERTY: return "synthetic";
 case SYNETIC_PROP: return"synthetic";
case SYNTHETIC_BLOCK_PROP: return "syntoticblock";
 case SYNTHETIC_PROPERTY: return "synthetic";
case SYNTHETIC_BLOCK_PROP: return block;
case SYNTHETIC_BLOCK_PROP: return "syntheticblock";
 case SYNTHETIC:return "synthetic";
 case synthetic: return"synthetic";
case  SOURCEFILE:
case SYNTHETIC_BLOCK_PROP: return "syntotic_block";
 case SYNTAX_PROP: return"synthetic";
case SYNTHETIC_BLOCK_PROP: return "syntolicblock";
case SYNTHETIC_BLOCK_PROP: return "syntholic_block";
case SYNTHETIC_BLOCK_PROP: return "systemblock";
 case SOURCEFILE_PROP: return "sourcefile"; case EMPTY_BLOCK: return "empty_block";
 case SYNTHON_PROP: return "synthetic";
 case SYNETIC_PROPERTY: return "synthetic";
 case SYnthetic_PROP_PROP: return "synthetic";
 case SYnthetic_NAME: return "synthetic";
 case SYNTHONIC_PROP:return "synthetic";
case SYNTHETIC_BLOCK_PROP: return "symbol";
case SYNTHETIC_BLOCK_PROP: return "syntholicblock";
case SYNTHETIC_BLOCK_PROP: return "symbolblock";
case SYNTHETIC_BLOCK_PROP: return "synthetic" case SOURCEFILE:
case SYNTHETIC_BLOCK_PROP: return "synthetic_blocked";
case SYNTHETIC_BLOCK_PROP: return "syntholic_blocked";
 case SOURCEFILE_PROP: return "sourcefile_props";
case SYNTHETIC_BLOCK_PROP: return "syncblock";
 case SYntheticPROP: return "synthetic";
 case SOURCEFILE_PROP: return "sourcefile"; case EMPTY_BLOCK: return "emptyblock";
case SYNTHETIC_BLOCK_PROP: return "synthomatic_blocked";
case  SOURCE_PROP: return "source";
case  SOURCE_PROP:
 case SOURCEFILE_PROP: return "sourcefile"; case EMPTY_STRING: return "empty_string";
 case SOURCE_PROP: return "source;
 case SYNETIC:return "synthetic";
 case SOURCEFILE_PROP: return "sourcefile"; case EMPTY_BLOCK: return "empty_block"; case Symbol:
 case SYNTHONIC_PROPERTY: return "synthetic";
 case EXTENDED_PROP: return "extended_props";
 case COMMENT_PROP: return "comment_props";
case SYNTHETIC_BLOCK_PROP: return "sync_block";
case  SOURCE_PROP: return source;
 case SOURCEFILE_PROP: return "sourcefile"; case SOURCEFILE_PROP: return "source_file";
 case SOURCEFILE_PROP: return "sourcefile"; case EMPTY_STRING: return "emptystring";
 case SYnthetic_PROP: return +"synthetic";
 case SYNTHETIC_NAME: return "synthetic";
 case COMPUTED_PROP: return "compute_props";
 case SYnthetic_PROP: return \"synthetic";
 case SOURCEFILE_PROP: return "sourcefile"; case EMPTY_BLOCK: return "empty_block" case Symbol:
 case SOURCEFILE_PROP: return "sourcefile"; case EMPTY_FILE: return "empty_file";
 case SOURCEFILE_PROP: return "sourcefile"; case EMPTY_NAME: return "empty_name";
 case SOURCEFILE_PROP: return "source_file";
case  SCRIPT_PROP: return "script";
 case SOURCEFILE_PROP: return "sourcefile"; case EMPTY_BLOCK: return "empty_blocked";
 case COMPUTED_PROP: return "computed_props";
case  STRING_PROP: return "string";
 case SOURCE_PROP: return "source_props";
 case SOURCEFILE_PROP: return "sourcefile"; case EMPTY_BLOCK: return "empty_block; case Symbol:
 case SOURCEFILE_PROP: return "sourcefile"; case SOURCEFILE_PROP: return "sourcefile";
case SYNTHETIC_BLOCK_PROP: return "sync";
 case METHOD_PROP: return "method_props";
 case SOURCEFILE_PROP: return "sourcefile"; case SOURCEFILE_PROP: return "sourcefile_props";
 case SCRIPT_PROP: return "script_props";
 case METHOD_PROP: return "method_props";
 case SOURCEFILE_PROP: return "sourcefile"; case SYnthetic:
 case SOURCEFILE_PROP: return "sourcefile"; case EMPTY_NAME: return "empty name";
 case SOURCEFILE_PROP: return "sourcefile"; case EMPTY_FILE: return "emptyfile";
case SYNTHETIC_BLOCK_PROP: return "system_block";
 default: Kit.codeBug();
 case EXTENDED_PROPS: return "extended_props";
 case SYNTHETIC_PROCESS: return "synthetic";
case SYNTHETIC_BLOCK_PROP: return "symblock";
case  SOURCE_FILE:
 case SOURCEFILE_PROP: return "sourcefile"; case EMPTY_STRING: return "empty";
 case EXTENDED_PROP: return "extended_property";
 case SYntETIC:return "synthetic";
 case SCRIPT_PROP: return "script;
 case SYNTAX_PROPERTY: return "synthetic";
 case EXTENDED_PROP: return "extended";
case SYNTHETIC_BLOCK_PROP: return "blocks";
 case EXTENDED_PROP: return "extended_properties";
case SYNTHETIC_BLOCK_PROP: return "synthetic" case SOURCE_PROP:
 case SOURCEFILE_PROP: return "sourcesource_props";
 case STRING_PROP: return "string;
 case EXTENDED_PROPS: return "extended_properties";
 case COMPUTED_PROP: return "compute_properties";
 case SOURCE_PROP: return "source_property"; case SOURCE_FILE:
 case SYnthetic: return \"synthetic";
 case SYntECTED:return "synthetic";
 case SOURCEFILE_PROP: return "sourcefile"; case EMPTY_CLONE: return "empty_clone";
case  SCRIPT_PROP:
 case SYnthetic_TYPE: return "synthetic";
 case Synthesized: return "synthetic";
 case SYNETIC_NAME: return"synthetic";
 case SOURCE_PROP: return "source_property"; case SOURCEFILE_PROP:
 case Synthetic_PROP:return "synthetic";
 case COMPUTED_PROP: return "computeed";
case  PROP:
 case SOURCEFILE: return "sourcefile;
 case COMPUTED_PROP: return "compute_properties";
 case COMMENT_PROP: return "comment;
 case SOURCEFILE_PROP: return "sourcefile"; case EMPTY_STRING_PROP:
 case SYntATIC:return "synthetic";
case SYNTHETIC_BLOCK_PROP: return  "synthetic_block_props";
 case SOURCEFILE_PROP: return "sourcesource_property";
case SYNTHETIC_BLOCK_PROP: return "synthetic" case SOURCE_FILE:
 case SOURCE_PROP: case IS_SYNTHETIC_BLOCK_PROP: return "synthetic";
 case SOURCEFILE_PROP: return "sourcefile" case Synthetic:
 case SOURCEFILE_PROP: return "sourcefile_proto";
 case SOURCEFILE_PROP: return "sourcefile"; case SYNTHETIC
 case SOURCEFILE_PROP: return "sourcefile"; case SYNTHIC:
 case EXTENSION_PROP: return "extension"; case STRING_PROP:
 case SOURCEFILE_SYNTHETIC_BLOCK_PROP: return "synthetic";
 case SOURCEFILE_PROP: return "source_file_props";
 case EXTENSION_PROP: return "extension"; case EXTEND_PROP:
 case SOURCE_PROP: return "source_property"; case SOURCEFILE_NAME:
 case COMPUTED_PROP: return "compute_property";
 case EXTENDED_PROP: return "extended_property"; case CLASS_PROP:
case  SCRIPT_PROP: return script;
 case SOURCEFILE_PROP: return "sourcesource_file";
 case COMMENT_PROP: return "comment_property"; case SOURCE_FILE:
 case SOURCEFILE_PROP: return "sourcefile"; case EMPTY_NAMESPACE:
 case SOURCEFILE_PROP: return "sourcefile"; case EXECUTION: return "execution";
 case SYNThetic: return"synthetic";
 case METHOD_PROP: return "method_property";
case  STRING_PROP: return string;
 case EXTENSION_PROP: return "extension"; case EXTENDED_PROP:
 case SOURCEFILE_PROP: return "sourcefile"; case EMPTY_BLOCK: return "empty_block"; break;
 case SOURCE_PROP: return "source_property"; case SOURCE_FILE_NAME:
 case SOURCEFILE_PROP: return "sourcefile"; case COMPUTED_PROP:
 case SOURCEFILE_PROP: return "sourcefile"; case EMPTY_PROP: return empty;
 default: Kit.codeBug(); return "unknown type";
 case SYNThetic_PROP: return "synthetic";
 case SYNTHETIC_PROP:: return "synthetic";
 case SOURCEFILE_PROP: return "sourcefile" case SYnthetic:
 case COMMENT_PROP: return "comment_property"; case SOURCEFILE:
 default: Kit.codeBug(); return "unknown property";
case SYNTHETIC_BLOCK_PROP: return "syntax";
 case EXTENDED_PROP: return "extended property";
 case COMPUTED_PROP: return "compute_property";
 case SOURCEFILE_PROP: return "sourcefile"; case EMPTY_SOURCEFILE:
 case STRING: return "string;
 case EXTENDED_PROP: return "extended_property"; case SOURCE_FILE:
 case METHOD_PROP: return "method_name";
 case SOURCE_PROP: case _SYNTHETIC_BLOCK_PROP: return "synthetic";
 default: return "unknown_props";
 case SOURCEFILE_PROP: return "sourcefile"; case SYNTIC:
 case EXTENDED_PROP: return "extended_property"; case COMPUTED_PROP:
case  STRING_PROP:
 case EXTENDED_PROP: return "extended_property"; case SOURCEFILE:
 case METHOD_PROP: return "methods";
 case Symbol_PROP: return"synthetic";
case SYNTHETIC_BLOCK_PROP: return "synthetic" case SCRIPT_PROP:
 default: Kit.codeBug(); break;
 case SYnthetic: return return"synthetic";
 case SOURCEFILE_PROP: return "sourcefile"; case EMPTY_PROP: return "";
 case SCRIPT: return "script;
 case EXTENSION_PROP: return "extension_property"; case CLASS_PROP:
 case SOURCE_PROP: return "source_property"; case SOURCEFILE_STORE:
 case SOURCEFILE_PROP: return "sourcefile"; case SOURCEBLOCK:
 case EXTENDED_PROP: return "extended_property"; default: return "unknown_property";
 case SYnthesized: return "synthetic";
 case SYNETIC_TYPE: return"synthetic";
 default: Kit.codeBug(); return "unknown";
 case SOURCEFILE_PROP: return "sourcefile"; case SYNThetic:
 case EXTENDED_PROP: return "extended_property"; default: return "unknown property";
 case SOURCEFILE_PROP: return "sourcefile"; case SYNTHET:
 case COMPUTED_PROP: return "computed_properties";
 case COMPUTED_PROP: return "computed_property";
case  SOURCEFILE_PROP:
 case SYNTHETIC_TYPE:return "synthetic";
 case SOURCEFILE_PROP: return "sourcefile"; case COMPUTED_FILE_NAME:
 default: return "unknown_proto";
 case SOURCEFILE_PROP: return "sourcefile"; case SYNTHONY:
 case SOURCEFILE_PROP: return "sourcefile"; case EMPTY_STRING:
 case EXTENDED_PROP: return "extended_property"; default: return "unknown_props";
 case COMPUTED_PROP: return "compute_proto";
case  SOURCEFILE: return "sourcefile";
 case SYNTHONIZED: return "synthetic";
 case SOURCE: return "sources;
 case SOURCEFILE_PROP: return "sourcefile"; case SOURCE_FILE:
 case SOURCE_PROP: case ISSYNTHETIC_BLOCK_PROP: return "synthetic";
 case COMMENTING: return "commenting;
 case METHOD_PROP: return "meth";
case  SOURCEPROP:
 case SOURCEFILE_PROP: return "sourcefile"; case EMPTY_STORE:
 case COMPUTED_PROP: return "computed_proto";
 case SYNTHETIC: return \"synthetic";
 case EXTENSION_PROP: return "extension"; case CLASS_PROPERTY:
 case EXTENDED_PROP: return "extended_property"; case CLASS_PROPERTY:
 case SOURCE_PROP: return "source_property"; case SOURCEFILE_FILE:
 default: Kit.codeBug(); }
 case EXTENSION_PROP: return "extension_name"; default: return "unknown_property";
 case SOURCEFILE_PROP: return "sourcefile_procedure";
case SYNTHETIC_BLOCK_PROP: return "synthetic" case CLASS_PROP:
 case COMMENT_PROP:
case SYNTHETIC_BLOCK_PROP: return symbol;
 case SOURCEFILE_PROP: return "sourcefile"; case EMPTY_STRING_TYPE:
case SYNTHETIC_BLOCK_PROP: return "synthetic" case SCRIPTFILE_PROP:
 case SCRIPT_PROP: case _SYNTHETIC_BLOCK_PROP: return "synthetic";
 case EXTENDED_PROP: return "extended_property"; default: return "unknown_proto";
 case EXTENDED_PROP: return "extended_property"; case STRING:
case SYNTHETIC_BLOCK_PROP: return "synthetic" case STRING_PROP:
 case SOURCE_PROP;
 case EXTENSION_PROP: return "extension_property"; case EXTENDED_NAME:
case SYNTHETIC_BLOCK_PROP: return "synthetic" case SOURCE_FILE_NAME:
 case CLASS_PROP:
 case STRING_PROP;
 case COMMENT_PROP: return "comment_property"; case SCRIPTFILE:
case SYNTHETIC_BLOCK_PROP: return "";
 case SOURCEFILE_PROP: return "sourcefile"; case EMPTY_STRING_NULL:
 case STRING_PROP: case _SYNTHETIC_BLOCK_PROP: return "synthetic";
 case COMMENT_PROP: return "comment_property"; case STRING:
 case SOURCEFILE_PROP: return "sourcefile"; case EMPTY_BLOCK: return "empty_block"; case
 case EXTENDED_PROP: return "extended_property"; case SOURCE:
case  SOURCE_FILE_NAME:
 case SOURCEFILE_PROP: case ISSYNTHETIC_BLOCK_PROP: return "synthetic";
 case SYNTHETETIC: return "synthetic";
 default: Kit.codeBug(); return null;
case  FILE:
case SYNTHETIC_BLOCK_PROP: return "synthetic" case SOURCE_PROP: return source;
case SYNTHETIC_BLOCK_PROP: return "synthetic" case SOURCEFILE_NAME:
case SYNTHETIC_BLOCK_PROP: return "synthetic" case SOURCEFILE_BLOCK:
 case EXTENDED_PROP: return "extended_property"; default: return "unknown type";
case  SCRIPT_FILE_NAME:
 default: return "unknown property";
 case SOURCEFILE: return "sourcesource;
 case SOURCEFILE_PROP: case _SYNTHETIC_BLOCK_PROP: return "synthetic";
 case COMMENT_PROP: return "comment_property"; case FILE_NAME:
 case SYNTIC: return"synthetic";
 case SCRIPT: return "scoped;
 case SYNETIC: return \"synthetic";
 case SYntheticNAME: return "synthetic";
 case SOURCEFILE_PROP: return "sourcefile"; case EMPTY_BLOCK: return "empty_block;" ;
case SYNTHETIC_BLOCK_PROP: return "synthetic" case SOURCEPROP: return "source";
 default: Kit.codeBug(); return "";
 case STRING_PROP: case IS_SYNTHETIC_BLOCK_PROP: return "synthetic";
 default: Kit.codeBug(null);
 case _SYNTHETIC_BLOCK_PROP: return "synthetic";
 case SYNETIC_PROP: *return "synthetic";
 case SOURCEFILE_PROP: return "sourcefile"; case SOURCEFILE_PROP: return "source_file;
 case SYnthetic_PROPS:return "synthetic";
 case STRICT: return "strrict;
 case ISSYNTHETIC_BLOCK_PROP: return "synthetic";
 case SOURCEFILE_PROP: return "sourcefile"; case SOURCEFILE_PROP: return "source_file;"
case  STRICT_PROP:
 return "quoted_string;
 case SOURCEFILE_PROP: caseSYNTHETIC_BLOCK_PROP: return "synthetic";
 case EXTENSION_PROP: return "extension_name"; default: Kit.codeBug(); }
 case SOURCEFILE_PROP: return "sourcefile"; case EMPTY_BLOCK: return "empty_block;" case
case  SCRIPT_FILE_PROP:
 case SCRIPT: return "script";;
case  STRICT_PROP: return "stable";
case SYNTHETIC_BLOCK_PROP: return "synthetic" case STRICT_PROP:
case SYNTHETIC_BLOCK_PROP: return "synthetic" or "no_synthetic";
case SYNTHETIC_BLOCK_PROP: return "synthetic" case SCRIPT_FILE:
 default: Kit.codeBug(); return "Unknown";
 case STRING: return "stringify;
 default: return "unknown type";
case  SCRIPT_PROPER_PROP:
 return "quoted_name;
case  SOURCEFILE: return "sourcesource";
case  TYPE_PROP:
case  SCRIPT_FILE:
 case SOURCE_SYNTHETIC_BLOCK_PROP: return "synthetic";
 default: return "unknown_property;
 case SYNETIC_PROP:: return "synthetic";
case  STRING:
 return "quoted_props;
 case SOURCEFILE:
case  STRING_PROPERTY:
 return "quoted"; default: return "unknown";
 case STRING_PROP: caseSYNTHETIC_BLOCK_PROP: return "synthetic";
 case STRICT_PROP;
 case SOURCEFILE_PROP: return "sourcefile"; case SOURCE_FILE;
 default: return "unknown";
 case MEMBER_SYNTHETIC_BLOCK_PROP: return "synthetic";
 return "quoted;
 default: throw "Unknown property";
case SYNTHETIC_BLOCK_PROP: return "synthetic" case SOURCE_FILE_PROP:
 case SOURCEFILE_PROP: return "sourcefile"; case EMPTY_NAMESPACE;
 case SYNOPSY: return "synthetic";
 case STRING:
 case SOURCEFILE_PROP: return "sourcefile_props;
 case SYNOPS: return"synthetic";
 return "quoted";
 case SYNTHIC_SYNTHETIC_BLOCK_PROP: return "synthetic";
 case IMPORTED_SYNTHETIC_BLOCK_PROP: return "synthetic";
 default: return "unknown_property";
 case DEFAULT_SYNTHETIC_BLOCK_PROP: return "synthetic";
 case SOURCEFILE_OR_SYNTHETIC_BLOCK_PROP: return "synthetic";
 case CLASS_NAME:
 return "quoted"; default: Kit.codeBug(); }
case SYNTHETIC_BLOCK_PROP: return true;
 case MULTIPLE_SYNTHETIC_BLOCK_PROP: return "synthetic";
 case SYntIC:return "synthetic";
case  SCRIPT_NAME:
case SYNTHETIC_BLOCK_PROP: return "synthetic" case SCRIPT_NAME:
 case NTSTAT: return"synthetic";
case SYNTHETIC_BLOCK_PROP: return null;
 case STRICT: return "stable;
 case SYSTEM: return"synthetic";
 case COMPATIBLE_SYNTHETIC_BLOCK_PROP: return "synthetic";
 default: Kit.codeBug(); break ; default :
case SYNTHETIC_BLOCK_PROP: return "synthetic" case SCRIPTFILE:
 case EXTENDED_PROP: return "extended_property"; default: return "unknown_property"
 case EXTENDED_PROP: return "extended_property"; default: return "unknown_property");
case SYNTHETIC_BLOCK_PROP: return "blocking";
 case SYNTHON_SYNTHETIC_BLOCK_PROP: return "synthetic";
 case INDEX_PROP: caseSYNTHETIC_BLOCK_PROP: return "synthetic";
 case EXTENDED_PROP: return "extended_property"; default: return "unknown property"; }
 case SOURCE_FILE;
 case STRING_STRING_SYNTHETIC_BLOCK_PROP: return "synthetic";
 return "quoted";
 case SOURCEBLOCK:
 case SYNTHETIC:...return "synthetic";
case SYNTHETIC_BLOCK_PROP: return "synthetic" case SourceFile:
 case SOURCE_PROP: caseSYNTHETIC_BLOCK_PROP: return "synthetic";
 case SOURCEFILE_PROP_SYNTHETIC_BLOCK_PROP: return "synthetic";
 default: return "unknown;
 case SOURCEFILE_PROP: return "sourcefile_props;"
 case SOURCEFILE_PROP: return "sourcefile_props;";
 case SOURCEFILE_PROP: return "sourcefile_props;";
 case SOURCEFILE_PROP: return "sourcefile_props;",
case  SOURCE:
 case COMPUTED_PROP: return "compute_props;"
 case SOURCE_FILE_SYNTHETIC_BLOCK_PROP: return "synthetic";
case SYNTHETIC_BLOCK_PROP: return "synthetic" or "block";
 case EXTENDED_PROP: return "extended_props;"
 case SOURCE_FILE:
 case SYNC:return "synthetic";
case SYNTHETIC_BLOCK_PROP: return "synthetic" case sourceblock:
 case COMMENT_SYNTHETIC_BLOCK_PROP: return "synthetic";
 case STRICT:
 case STRICT_SYNTHETIC_BLOCK_PROP: return "synthetic";
case  SOURCE_PROP_NAME:
 case STRING_PROP : #SYNTHETIC_BLOCK_PROP: return "synthetic";
 case PROP:
case SYNTHETIC_BLOCK_PROP: return "synthetic" case CLASS_NAME:
 default: Kit.codeBug(null); }
case  SCRIPT:
 case SOURCE_OR_SYNTHETIC_BLOCK_PROP: return "synthetic";
case  SCRIPTFILE:
 case IMPORTANT_SYNTHETIC_BLOCK_PROP: return "synthetic";
case SYNTHETIC_BLOCK_PROP: return "synthetic" case SOURCE_PROP: return "";
case  PROPS:
 return "quotedname;
 default: Kit.codeBug(''); }
 case BLOCK:
 case COMPUTED_PROP: return "compute_properties;"
 case IMPLEMENT_SYNTHETIC_BLOCK_PROP: return "synthetic";
case SYNTHETIC_BLOCK_PROP: return "synthetic" case sourcefile:
 case SCRIPT_NAME;
 case SOURCE_FULL_SYNTHETIC_BLOCK_PROP: return "synthetic";
 case SOURCEFILE;
 case NON_SYNTHETIC_BLOCK_PROP: return "synthetic";
 case PROPS:
case  SOURCE_PROP: return;
case  STRICT_PROPS:
case  CLASS_NAME:
case SYNTHETIC_BLOCK_PROP: return "synthetic" case SOURCE_PROP: return source";
case SYNTHETIC_BLOCK_PROP: return "synthetic" case "sourceblock";
 case SOURCE_MEMBER_SYNTHETIC_BLOCK_PROP: return "synthetic";
 default: return undefined;
 case SOURCEFILE_AND_SYNTHETIC_BLOCK_PROP: return "synthetic";
 default: return null;
 case CLASS:return "synthetic";
case SYNTHETIC_BLOCK_PROP: return "synthetic_blocked;"
case  STRING_PROP: return;
case SYNTHETIC_BLOCK_PROP: return "syntholic_blocked;"
case  TYPE_FILE:
 case NT: return"synthetic";
case SYNTHETIC_BLOCK_PROP: return "syntotic_block",
case  SOURCE_PROP_TYPE:
case SYNTHETIC_BLOCK_PROP: return "syntotic_block;"
case SYNTHETIC_BLOCK_PROP: return "syntotic_block;
 default: #"synthetic";
case SYNTHETIC_BLOCK_PROP:  return "system";
case  CLASS:
 default: throw "Unknown property"; }
case SYNTHETIC_BLOCK_PROP: return "syntoticblock;"
 case "not quoted;
 default: return"synthetic";
case SYNTHETIC_BLOCK_PROP: return  "synthetic_block_props;
case SYNTHETIC_BLOCK_PROP: return  "synthetic_block_props;"
case SYNTHETIC_BLOCK_PROP: return  "synthetic_block_props",
 default: return "unknown property"; }
 default: return undefined;
 break ; }
case SYNTHETIC_BLOCK_PROP:  return "synthetic_blocked;";
case SYNTHETIC_BLOCK_PROP:  return "synthetic_blocked;",
 default: return "";
 case synthetic : #"synthetic";
case SYNTHETIC_BLOCK_PROP: return  "synthetic_block_props");
 case CLASS:
case  TYPE:
case SYNTHETIC_BLOCK_PROP: return "synthetic" or "synthetic_block" ;
 case USE_SYNTHETIC_BLOCK_PROP: return "synthetic";
case SYNTHETIC_BLOCK_PROP:  return "syntoticic_block;",
 case Symbol:
case SYNTHETIC_BLOCK_PROP:  return "syntoticic_block;";
case  NAME:
case  SOURCE_FILE_NAME;
case SYNTHETIC_BLOCK_PROP: return "synthetic" ; break ; }
case SYNTHETIC_BLOCK_PROP: return "synthetic" in block;
 case Symbol :"synthetic";
 case MISSYNTHETIC_BLOCK_PROP: return "synthetic";
 case NO_SYNTHETIC_BLOCK_PROP: return "synthetic";
 case *SYNTHETIC_BLOCK_PROP: return "synthetic";
 return "string;
 return "quote;
 case NONSYNTHETIC_BLOCK_PROP: return "synthetic";
case SYNTHETIC_BLOCK_PROP: return "synthetic" case SOURCE_FILE_PROP,
case  SPEC:
 case NOT_SYNTHETIC_BLOCK_PROP: return "synthetic";
 case NThetic: return "synthetic";
 case "empty;
 return "comment;
 case "string;
case SYNTHETIC_BLOCK_PROP_NAME:
 break;
case SYNTHETIC_BLOCK_PROP: return;
case SYNTHETIC_BLOCK_PROP : break ;
 # default;
 case NAME: return "synthetic";
 return "";
 case syntheticreturn "synthetic";
 # break;
 return null;
 # return"synthetic";
 case null;
 case Symbolreturn "synthetic";
case SYNTHETIC_BLOCK_PROP: return "synthetic" in block";
case SYNTHETIC_BLOCK_PROP: {
case SYNTHETIC_BLOCK_PROP: return "synthetic" in block,
 } #"synthetic";
 return '"synthetic";
case SYNTHETIC_BLOCK_PROP: #
 #:return "synthetic";
 #...return "synthetic";
case SYNTHETIC_BLOCK_PROP: return "synthetic" block; }
 case symreturn "synthetic";
case SYNTHETIC_BLOCK_PROP: return "synthetic" ; }
 break:
case SYNTHETIC_BLOCK_PROP:  return [];
 } }
case SYNTHETIC_BLOCK_PROP:::
case SYNTHETIC_BLOCK_PROP: return "synthetic""; or
case SYNTHETIC_BLOCK_PROP: return "synthetic""; case
case SYNTHETIC_BLOCK_PROP(): return "synthetic";
case SYNTHETIC_BLOCK_PROP': return "synthetic";
 }
 case
case SYNTHETIC_BLOCK_PROP): return "synthetic";
