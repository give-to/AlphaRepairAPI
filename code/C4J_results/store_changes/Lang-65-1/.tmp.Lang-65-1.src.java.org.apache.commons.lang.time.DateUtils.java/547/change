modify(gval, field, false);
modify(gval, field);
 gval.setField(field);
 truncate(gval, field, false);
modify(field);
modify(date, gval, field, false);
 gval.set(field, false);
modify(date, field);
 gval.setUTC(false);
 truncate(field, false);
 gval.setField(field;
modify(date, field, false);
 gval.setField(date, field);
 gval.setField(field, false);
modify(gval, date, field, false);
 gval.add(field);
 truncate(date, field, false);
modify(gval, - field);
modify(gval.getTime(), field);
 gval.setField(date, field, false);
modify(gval, - 1, field, false);
 gval.setFields(field);
modify(gval, date, field);
 gval.setFields(field, false);
 date.set(field, false);
modify(gval, - 1);
 gval.setFields(date, field, false);
 gval.setFields(date, field);
 gval.setField(field + 1;
 gval.set(field);
modify(gval, field, - 1, false);
modify(gval, - 1, false);
 gval.setField(field, 0, false);
 gval.field=field;
 gval.setNumeric(false);
 gval.setField(field).round(false);
modify(gval,  field); return gval.getTime();
 gval.setTime(field, false);
 gval.setFieldNumber(field);
 gval.setField(field)+1;
modify(gval, field, truncate);
 gval.setField=field;
 gval.setHours(field, false);
modify(gval, field, date);
 return gval.getTime();
 gval.setField(field, - 1, false);
modifyDate ( gval, field ) ;
 return gval. getTime(); } else { gval = Date. getInstance ( date ) ;
 gval.setField(field); return gval;
modify(gval.getTime(), date, field);
 return gval. getTime(); } else { gval = Date. getInstance ( date ) ; } Date.
 return gval.getTime(); DateUtils.
 gval.setSameDay(false);
 return gval. getTime(); } else { Date gval = Date. getInstance ( date ) ;
 if (field == 0)
 gval.setDayOfMonth(false);
 return gval. getTime(); } else { gval = Calendar. getInstance ( date ) ; } Date.
modify(gval.getTime(), -field);
 gval.setFieldNumber(field;
 gval.setHours(date, field, false);
 gval.setField(date.field);
 gval.setDate(date); DateUtils.
 if (field == 0) {
 return truncate(gval, field, false);
 return gval. getTime(); } else { gval = Date. getInstance ( ) ; } DateUtils.
 return gval. getTime(); } else { gval = Calendar. getInstance ( ) ; } DateUtils.
 return gval. getTime(); } else { gval = Calendar. getInstance ( ) ; } return Date. getInstance ( ).
 return gval. getTime(); } else { gval = Calendar. getInstance ( date ) ; } return Calendar.
 return gval. getTime(); } else { gval = Date. getInstance ( date ) ; } return Calendar.
 return gval. getTime(); } else { gval = Date. getInstance ( ) ; } return Date. getInstance ( ).
 gval.setDate(field, false);
 gval.setFields(field;
 gval.set(date, field, false);
modifyDate ( gval ) ;
modify(gval).getTime(), field);
modify(gval.getTime(), field, -1);
 DateUtils.
 gval.setField(field, false,false);
 return gval. getTime(); } else { gval = Date. getInstance ( ) ; } Date.
 return gval. getTime(); } else { gval = Date. getInstance ( date ) ; } DateUtils.
 return gval. getTime(); } else { gval = Calendar. getInstance ( date ) ; } DateUtils.
 return gval. getTime(); } else { Date gval = Date. getInstance ( date ) ; Date.
 return gval. getTime(); } else { gval = Date. getInstance ( date ) ; } return
 truncate(date, false);
modify(gval.getTime(), field, false);
 return gval. getTime(); } else { Date gval = Date. getInstance ( ) ; Date.
modify(gval, field, false, false, false, false);
 return gval. getTime(); } else { gval = Date. getInstance ( date ) ; } DateHelper.
 gval.setField(field, true,false);
modify(gval, field, false); return gval.getTime();
 return truncate(date, field, false);
 gval.setField(field, null, false);
 return gval. getTime(); } else { gval = Calendar. getInstance ( ) ; } Date.
 return gval. getTime(); } else { gval = Date. getInstance ( date ) ; } Calendar.
 return gval. getTime(); } else { gval = Calendar. getInstance ( ) ; } return DateUtils.
 return gval. getTime(); } else { gval = Calendar. getInstance ( date ) ; } return
modify(gval, field, - 1);
 return gval. getTime(); } else { gval = Calendar. getInstance ( ) ; } return ( Date ) DateUtils.
 gval.UTC(false);
 return gval. getTime(); } else { gval = Calendar. getInstance ( date ) ; } return DateUtils.
 return gval. getTime(); } else { gval = Date. getInstance ( ) ;
 gval.setTime(date, field, false);
 return gval. getTime(); } else { gval = Calendar. getInstance ( ) ; } return DateUtilsUtils.
 gval.setFullYear(field);
 return gval. getTime(); } else { gval = Date. getInstance ( date ) ; } return DateUtils.
 gval.setFieldIndex(field);
 gval.setField(field); *
 gval.setIsNumeric(false);
modifyField ( field ) ;
 return gval. getTime(); } else { gval = Date. getInstance ( date ) ; } return Modifier.
modify(gval.getTime(), -1);
 gval.add(field, false);
 gval.setField(field); DateUtils.
 return gval. getTime(); } else { gval = Calendar. getInstance ( ) ; } return ( Date ) DateHelper.
 return gval. getTime(); } return Date. getInstance ( ).
 gval.setHours(field); DateUtils.
 gval.setField(date+field);
 gval.setField(field); * *
 return gval. getTime(); } else { gval = Calendar. getInstance ( ) ; } return ( Date ) Utils.
modify(gval.getTime(), field, date);
modify(gval,  field); if (gval!= null) {
 return gval. getTime(); } else { gval = Calendar. getInstance ( date ) ; } return Modifier.
modify(gval.getTime(), gval, field);
 return gval. getTime(); } return Date. getInstance ( date ).
 gval.setField(Date.parse(field, false);
 return gval. getTime(); } else { gval = Calendar. getInstance ( ) ; } return ( Date ) CalendarHelper.
 gval.setField(field); return null;
 gval.setField(date.year, field, false);
 gval.setNew(false);
 gval.setDay(day); DateUtils.
 return gval.getTime(); DateHelper.
 return gval. getTime(); } else { gval = Calendar. getInstance ( date ) ; } return MathUtils.
 gval.day(false);
 return gval. getTime(); } else { gval = Date. getInstance ( ) ; } return ( Date ) DateHelper.
 gval.setTimeField(field, false);
 gval.setCalendar(field, false);
 DateUtils.truncate(gval, field, false);
 return gval. getTime(); } else { gval = Date. getInstance ( ) ; } return
 gval.setField(field + 1);
 return gval. getTime(); } else { gval = Calendar. getInstance ( date ) ; } return ( Date ) DateHelper.
modify(gval, field, false); if (gval!= null) {
 gval.setMillis(field);
 gval.setField(field + " ");
 gval.setField(field); * -----------------------------------------------------------------------
 return gval. getTime(); } else { return Date. getInstance ( date ).
 gval.setInverted(false);
 gval.setField(field)+field;
 return gval.getTime(); truncate(gval, field, false);
modify(gval, date, field, truncate);
 return gval. getTime(); } else { gval = Calendar. getInstance ( date ) ; } return ( Date ) CalendarHelper.
 gval.addFields(date, field, false);
modify(gval.getTime(), field, null);
modify(gval, 0, 0, field, false);
 return gval. getTime(); } else { gval = Calendar. getInstance ( ) ; } return DateUtilsHelper.
 return gval. getTime(); } return Calendar. getInstance ( ).
modify(gval, field, false, false, false);
 gval.setUTC, false);
 gval.setField(field); return gval.date();
 return gval. getTime(); } else { gval = Calendar. getInstance ( ) ; } return
 return gval. getTime(); } else { Date gval = date ; DateUtils.
 return gval.getTime(); Date.
 gval.setField($field);
 gval.setField((int)field, false);
modify(gval, field, date.getTime ( ));
 gval.setField(field); gval.setUTC();
modify(gval.getTime(), field, truncate);
 gval.setField(field); return date;
 gval.setField(field, - 1);
modify field;
 gval.setUTCSavings(false);
 gval.setField(field).year;
 gval.get(field);
 gval.setField(field); return gval();
 gval.setUTC(field,false);
 gval.setField(field); gval.format();
 return gval. getTime(); } else { Date gval = Date. getInstance ( date ) ; } return
modify(gval, field, 0);
 gval.getField = field;
 return gval.getTime(); return truncate(gval, field, false);
 gval.setInt(field, false);
modify(gval, field, false); gval.setTime(gval);
 if (field == -1) {
modify(gval, field, date, null, false);
 return gval. getTime(); } else { gval = date ; } return Calendar.
 gval.setZoned(false);
 return gval. getTime(); } else { gval = date. clone ( ) ; } return
 gval.adjust(field);
 gval.setDateField(field, false);
 gval.setFieldAsInt(field, false);
 gval.setField(this.field, false);
modify(gval, field, 0, 0, false);
modify(gval, field, false); return gval. toDate ( ) ;
 gval.setIsNew(false);
 Date date = Date. getInstance ( ) ;
modify(gval, field, null);
 gval.setField(0, 0, field, false);
 gval.setField(0, field, false);
 gval.setFields(0, 0, field, false);
 gval.setDate(date); DateHelper.
modify(gval, 0.0, field, false);
modify(gval, field, date, null);
 gval.setField(Fields.DAY);
 gval.adjust(field, false);
 gval.setFields(field, 0, false);
 gval.addDays();
 gval.setDate(date).getTime(); DateHelper.
 gval.setDate(date); DateUtUtils.
 gval.setField(field, "false);
 return gval. getTime(); } else { gval = date ; } return DateHelper.
 gval.setField(field); DateUtilsUtils.
 return gval. getTime(); } else { gval = Date. getInstance ( date ) ; }
 return gval.getTime(); DateModifier.
 gval.setField(date.get(field, false);
 DateHelper.truncate(gval, field, false);
 gval.setField(Fields.DAY, false);
 gval.setDay(field,false);
modify(date, date, field, false);
 gval.setField(date.field, false);
 Date.
 return gval. getTime(); } return Calendar. instance ( ).
 gval.setDate(date); DateTimeUtils.
 gval.setField(field) + 1900;
 round(gval, field, false);
 return gval. getTime(); } else { return Date. getInstance ( date ) ; } return
 gval.day = field;
 gval.setFields(0,field, false);
 gval.setFields(null,field, false);
 return gval.getDate();
modifyDate ( field ) ;
 return gval. getTime(); } else { gval = Calendar. getInstance ( date ) ; }
 return gval. getTime(); } else { return Date. getInstance ( ) ; } Date.
 return gval. getTime(); } else { return Date. getInstance ( date ) ;
 return gval. getTime(); } else { gval = date ; } Date.
modify(gval, field, false) return gval.getTime();
modify(gval, field,  truncate(gval)) ;
modify ( gval ) ;
modify(gval, date, null, field, false);
 return gval. getTime(); } return Date. getInstance ( date ) +
 gval.setField(field) * 1000;
 return gval. getTime(); } else { return Date. getInstance ( ) ; } return
 gval.clear(false);
 return truncate(field, false);
 gval.addDays(1, field, false);
modify(gval).getTime(), field, -1);
 gval.setFields(date, null, field, false);
 gval.setDate(date); Date.Utils.
 gval.set(year, field, false);
 return truncateDate(gval, field, false);
 gval.setField(field, -false);
 gval.setField(field) * *
modify(gval, field); *
 gval.setHours(date).add(field, false);
modify(gval.getDate(), field);
 gval.setDate(date).getTime(); DateMath.
 gval.setDate(date); DateUtilsHelper.
 gval.setTimeZone(field, false);
modify(gval, field, date, false);
 gval.setField(calendar.field, false);
 gval.setField(field).UTC;
 gval.setField(Calendar.TIME, field, false);
 gval.setField(this.year, field, false);
 gval.setHours(date.hour(),field, false);
 gval.addDaysTo(date, field, false);
 gval.setField(field,!false);
 Date.getInstance().truncate(gval, field, false);
 return gval. getTime(); } return DateUtilsUtils.
 return gval. getTime(); } else { gval = date ; } return Date.
 gval.setField(field) * ----------------------------------------------------------------------- *
 gval.set($field, false);
modify(gval,  field, truncate(date)) ;
 return gval. getTime(); } else { DateUtils.
 gval.setField(field); return gval; *
 gval.setField(field); return gval; }
modify(gval, field, false, false, false, -1);
 gval.secure(false);
 gval.setFields(this, field, false);
 gval.setField(date, field, field, false);
modify(gval,  field); return gval.getDate();
 return gval. getTime(); } return Date. instance ( ).
 return gval.getTime(); Calendar.
 gval.setField(date, null, field, false);
 return truncate(field);
 gval.setField(field, 0) ;
 return gval. getTime(); } return Date. getInstance ( date ) ;
 return gval.getTime(); DateMath.
 return truncate(date,gval, field, false);
 gval.setField(field); return gval.date;
modify(gval, field, date.getTime(), date);
 gval.setFields(date, false, field, false);
modify(gval, field, 0.0);
modify(gval, field, truncate) *
 DateUtils.round(gval, field, false);
modify(gval, field, date, false, false);
 gval.setFields(date, date, field, false);
modify(gval.getTime, field, false);
modify(gval, field, false) ; if (date == null) {
modify(gval, field, false, true, false, false);
 gval.open(false);
modify(gval, field, false) ; return gval. getTime(); }
 gval.setFields(field); * *
 date.set(field);
modify(gval, - field, false);
 DateUtils.calculate(gval, field, false);
 DateUtils.trim(gval, field, false);
 return gval. getTime(); } else { gval = Date. getInstance ( date ) }
 gval.setDate(date); Date.
 return gval. getTime(); } else { return Date. getInstance ( date ) ; }
modify(gval, field,  gval.getTime()); return gval;
 DateHelper.
 DateUtilsUtils.
 gval.setDay(field, "false);
 DateUtils.roundDate(gval, field, false);
 return gval. getTime(); } else { return Date. getInstance ( date ) +
 return gval.getTime(); *
modify(gval, field); * *
modify(gval, field, false); return gval. getTime(); } else
modify(gval, field, truncate); *
 gval.setCached(field, false);
 return gval.date();
 return gval. getTime(); } return Date. getInstance ( ) ;
 gval.setField(field, 0); *
 gval.setField(date.year+field, false);
modify(gval, field, date, field, false);
 gval.setField(field) *
 gval.setFields(field); *
 return gval.now();
modify(gval, field, 0, -1, false);
modify(gval, field, false); return gval.getDate();
 Date rval = Date. getInstance(gval, field, false);
modify(gval, field, date); *
 DateModifierUtils.
 Date.parse(date); truncate(gval, field, false);
modify(gval, date, field, - 1, false);
 format(field, false);
 gval.setField(field); gval.format(); *
 gval.parse(date, field, false);
modify(gval, field, false) return gval. getTime(); } else {
 gval.appendField field;
modify(gval, field,  gval).getTime(); return gval;
modify(date, null, gval, field, false);
 gval.setDate(date); DateUtils.tr
 Date gval = DateUtils.roundDate(gval, field, false);
 Date rval = Calendar.getInstance(gval, field, false);
 DateUtils.addField(gval, field, false);
modify(gval,  field); return gval.getTime(); }
 gval.minus(field);
modify(gval, field,  date); return gval. getTime();
 Date date = Date. today ( ) ;
modify(gval, field, false, false, false, true);
modify(gval, field); return gval.getTime(); } else
 DateModificationUtils.
 Date.getInstance ( ).
modify(gval, field, false); return gval. getTime(); } *
 gval.set(0, field, false);
modify(gval, date, field, false, false);
 round(field, false);
 gval.setField() field;
modify(gval, field, false, true, false);
modify(Gval, field);
 gval.setField(field); return gval ; } *
 format(date, field, false);
 Date.parse(date);
modify(gval, field, false) return gval.getTime(); else
modify(date, null, field, false);
 Date date = Date. now ( ) ;
 set(field, false);
modify(gval, field, null, null, false);
 Date.parse(date); Date.parse(gval, field, false);
 gval.set(day, field, false);
 gval.setField(field, -1); *
 Gval.setField(field); *
modify(gval, field, false); return gval;
modify(gval, field); return gval.date();
 if (round) {
 DateUtils.trunc(gval, field, false);
 return gval.getTime(); }
modify(gval, * field);
 if (field) {
modify(gval, field, false, false, true, false);
 return gval.getTime(); Date. set(gval, field, false);
modify (field) {
modify(gval, null, field, false);
 gval.setField(field) * ;
 return gval. getTime(); } return Date. getInstance ( ) ; } return
 gval.setDay(field);
 DateUtils.setField(gval, field, false);
 return gval.getTime(); } else
modify(gval, field, true, false);
modify(gval, field, false, -1);
modify(gval, field); return gval.getTime(); * }
 Date fval = Calendar.getInstance(gval, field, false);
 Gval.setField(field);
 format(gval, field, false);
 DateUtils.truncateDate(gval, field, false);
 gval.setField(field, 0) *
modify(gval, field, false, 0, 0, 0);
modify(gval, field, false) ; return gval. getTime ( ) }
modify(gval, field, false, false);
modify(gval, field, false, 0, 0, -1);
modify(gval, field, false, false, 0, -1);
 DateModifier.
modify(gval, field, date, - 1, false);
modify(gval, field); return gval.getTime());
modify(gval, field) *
modify(gval, field, false, false, -1);
 return gval.getTime(); Date.parse(gval, field, false);
 return gval. getTime(); } return Date. parse ( date ) ; } return
 Date date = DateUtils.roundDate(gval, field, false);
 gval.getField(field);
 DateUtUtils.
modify(gval.getTime(), field); *
 return gval.toDate();
modify(gval,  field); return gval.getTime(); *
 calendar.set(field, false);
 Calendar.getInstance ( ).
 Date.parse(date, false);
 round(date, field, false);
modify(gval, +field);
modify(gval, field); }
 Date.parse(date); Date.format(gval, field, false);
 return gval. getTime(); } return Calendar. instance ( ) ;
modify(gval, 0, field, false);
modify(gval, field, date) *
 DateUtils.calculateDate(gval, field, false);
 DateUtils.truncateField(gval, field, false);
modify(date, 0, 0, gval, field, false);
 truncate($, field, false);
modify(gval, field,  date); return gval. getTime(); }
modify(gval, field, false); return gval.date();
 Date rval = DateHelper.getDate(gval, field, false);
 Date rval = DateHelper.roundDate(gval, field, false);
 DateHelper.trunc(gval, field, false);
 Date gval = DateHelper.roundDate(gval, field, false);
modify(gval, field); return gval; }
 trunc(date, field, false);
modify(gval, truncate, field, false);
 gval.setDate(false);
 return truncate(date, false);
modify(gval, field, false, date.getTime ( ));
modify(gval, field, false, date.getTime(), false);
modify(gval, field, false, 0, -1);
modify(gval, field, -1, 0, false);
modify(gval, field) * *
modify(gval, field, false) return gval.getTime(); }
 setField(field, false);
 Date.set(date, field, false);
 Date.parse(date); Date.add(gval, field, false);
 DateMath.trunc(gval, field, false);
 Date.parse(date, field, false);
modify(date, 0, - 1, gval, field, false);
 DateHelper.round(gval, field, false);
modify(gval, field, 0, false);
modify(gval, 1, field, false);
 gval.setOptional(false);
 date.add(field);
modify(gval, field,  null); return gval. getTime(); }
(field, false);
 DateModifyUtils.
 ModifyUtils.
 DateHelper.roundDate(gval, field, false);
 DateUtils.calculateDateTime(gval, field, false);
 Date mod = DateModifier.
 DateTimeUtils.roundDate(gval, field, false);
 return gval.getDate(); *
 round(date, false);
modify(gval, field); return gval.date;
modify(gval, field, false) return gval.getTime(); *
modify(date, date, gval, field, false);
modify(date, field, gval, field, false);
modify(gval, field); return gval; *
 Date.add(date, field, false);
modify(gval, field, date.getTime(), 0);
modify(date.getTime ( ), gval, field, false);
modify(gval, field, false, false, true);
modify(gval, field, date.getTime(), null);
 Date.parse(date); Date.round(gval, field, false);
 Date.getInstance().trunc(gval, field, false);
modify(gval, field, date, date); *
 DateModifyHelper.
modify(gval, field, false) ; return gval. getTime(); *
 DateMath.round(gval, field, false);
 TruncateDate(gval, field, false);
modify(gval, date, - 1, false);
modify(date, - 1, gval, field, false);
modify(gval, field, false); return gval.now();
modify(Date.getInstance(), date, gval, field, false);
 truncateDate(gval, field, false);
modify($field);
modify(gval, gval, field, false);
 return gval.date;
modify(gval, field, truncate, false);
modify(gval, field, false); return gval.getTime());
modify (gval) { *
modify(gval, field, false) return gval.getDate();
modify(gval, field, false) return gval. getTime(); } else
 truncate(cal, field, false);
modify(gval, date, gval, field, false);
modify = true;
 Date.getInstance().setField(gval, field, false);
modify(gval, field, date, field, date);
modify(date, 0, field, false);
modify(gval, field,  date); return gval ; } else {
 Calendar.
modify(gval, field, date, date, null);
 return DateUtils.trunc(gval, field, false);
 DateHelper.trim(gval, field, false);
modify(gval.getTime(), field); } else
 DateUtils.calendarRound(gval, field, false);
 Calendar.getInstance(joda);
modify(date, 0.0, gval, field, false);
 Date mod = DateModification.
modify(gval, field, date, 0, 0);
 DateModifierHelper.
 return DateUtils.roundDate(gval, field, false);
modify(gval.getTime(), field); } *
 Calendar.getInstance().getInstance().
modify(gval,  field, truncate(date)) *
modify(gval, field, false, 0, 0);
 Calendar.getInstance(GMT).
 truncate(_, field, false);
 Modifier.
modify(field, date);
modify(gval, field, date, truncate);
 truncate(this, field, false);
modify(gval, 0L, field, false);
modify(gval, 7, field, false);
modify(gval, field, false) return gval.time();
modify(gval, field, 0, 0);
 truncate(year, field, false);
 return truncateField(gval, field, false);
modify(gval, field, false, true, true);
modify(gval, "-", field, false);
modify(gval, field); return gval ; } *
modify(gval, field); } else
 DateHelper.addField(gval, field, false);
 date.set(field, field, false);
modify(gval, field, false) return gval.date();
 CalendarUtils.
 date.minus(field);
modify(gval, field,  truncate(gval)) *
 return trunc(date, field, false);
modify(gval, field, date, date, field);
 return truncate(false);
modify (gval) { }
 date.field = field;
modify(date, field, date, gval, field, false);
modify(date, field); *
modify(gval, - 1 * field, false);
 date.add(field, false);
modify(gval, field); return gval; } else
 DateMath.
 add(field, false);
 gval.get(field, false);
modify(date, 1, field, false);
modify(gval, field, false, true);
modify(gval); *
modify(gval, field, 0, -1);
modify(gval, field, false); return gval.date;
modify(gval, field, false) ; return gval ; } *
modify(gval, field,  truncate(gval)));
modify(date, 0, gval, field, false);
 DateUtils.tr
modify(gval, field, false); return gval ; } #
modify(Date.getInstance(*), gval, field, false);
modify(date, field, 0, gval, field, false);
modify(date, time, gval, field, false);
 gval.shift(field, false);
 setField(field);
modify(gval, field, false, false, false); *
modify(Calendar.FORMAT, gval, field, false);
modify(gval, date, null, gval, field, false);
modify(gval, field,  gval.getTime(), date); *
modify(Gval, field); *
 return trunc(field, false);
 Calendar.setField(gval, field, false);
modify(gval, field, 0.5);
modify(gval, field,  date); return gval. getTime());
modify(gval), field);
 return add(field, false);
modify(gval, field,  date); return gval. getTime()
 return new Date(false);
modify(gval, field, false); return gval();
modify(gval, field, false, true, -1);
modify(date, false, field, false);
 Utils.
modify(gval, field,  null, null, null); *
modify(gval,  field, truncate); }
 roundCalendar(gval, field, false);
modify(Calendar.class, gval, field, false);
modify(Calendar.TIME, gval, field, false);
 Calendar.getInstance(joda).
modify(gval, field, false, truncate);
modify (gval); }
 field = field;
 truncateField(gval, field, false);
 Calendar.getInstance(GMT) ;
modify(gval, field, false, false, 0L);
modify(gval,  field, 0, 0); *
modify(gval, field,  truncate(date)));
modify(gval, field,  truncate(gval)); *
modify(Date.FORMAT, gval, field, false);
modify(datetime, gval, field, false);
modify(gval,  field, date, field); *
 date.set(false);
 truncate, field, false);
modify(gval, field,  date); return gval ; } #
 trunc(gval, field, false);
 Date.parse(date;
modify(field) *
modify(gval, field, false); return gval; *
modify(gval, field,  true);
 adjust(field, false);
modify(gval, field, false) * ----------------------------------------------------------------------- *
modify(field); *
modify(gval, field, false) return gval.date;
modify(gmval, field);
modify(gval, field, false) return gval.time;
 return floor(field);
modify(gval, field, false, false); *
modify(gval, field, false, false); * *
 formatDateTime(gval, field, false);
modify(gval, field, false, false, false); }
 int i = field;
modify(gval, field, false, true, false); *
 date.clear(false);
 adjust(gval, field, false);
 date.day(false);
 #add(field);
 int ret = field;
 Date.UTC = field;
 Date date = null;
 #append(field);
modify(gval, field, false) ; return null;
 int result = field;
 #round(field);
 int index = field;
modifyField();
modify(gval, field,  truncate(date)); *
modify(gval, field, false, false) *
modify(gval, field, 0.0f);
 Date.UTC(date;
modify(gval, field, false) return gval; *
 setFields(gval, field, false);
modify(gval, field, false, true); *
modify(gregval, field);
 setUTC(false);
 if(false);
 return gval; *
modify(gval, field, false) return gval; }
 return gval; }
modify(gval, field, false); * *
modify(gval, field, false) ; return date;
 return round(false);
 "+ field, false);
 assert(false);
modify(gval, field, false) * * -----------------------------------------------------------------------
modify(gval, field, false) ; } else {
modify(gval, date);
 ++ field;
modify(gval, field,  0.0); *
modify date;
modify(year, field);
modify(field); }
 print(false);
modify(fraction);
 setField, field, false);
modify(this, field);
 #(field);
modify(jd, gval, field, false);
modify(date);
modify(gval, field, false); *
 return floor(false);
modify(gval, field,  date, date); }
modify(dateTime, gval, field, false);
modify(month, field);
modify field++;
 return null, false);
modify(-field);
modify(gval, field,  date); }
modify(gval, field, false, 0L);
modify(gval, field, false, 3600);
modify(dt, gval, field, false);
modify(jd);
 formatDate(gval, field, false);
 return gval(); *
 round($, field, false);
.set(field, false);
 field = 0;
 format($, field, false);
modify(gval, field, false).*();
 return round(gval, field, false);
modify(gval, field, truncated);
 return round(field, false);
 setField(gval, field, false);
modify(gval, field, false).* *
 date = null;
 date =
 date(field);
 format(_, field, false);
 + field;
 field += 1;
modify(gval, field, false).* }
modify(gval, field, false) * } *
 }(field);
return(false);
 roundDate(gval, field, false);
modify(gval, field, false) * * *
 return null;
 --field;
 "+field);
modify(-1);
modify(gval, + field, false);
modify(gval, * field, false);
modify(gval, field, false) *
modify(gval, field, false) * *
modify(dt);
modify(gval, field, ' ');
modify(day);
modify(gval) *
modify(gval, field));
modify(gval, field, false, 0);
modify(gval) * *
modify(gval, field, false, null);
 if (field);
 if (return);
modify(fields);
modify(gval, field, false) * * }
modify(gval, field, false) ; } ;
modify(year);
modify(gval, field, false) * }
modify(gval, field, false) ; }
 paddate(gval, field, false);
modify(gval, field, false) * ;
 return
modify(gval, field, false).*
 add(gval, field, false);
modify(grval, field, false);
 *
modify(gval, field, false, date);
modify(geval, field, false);
modify(gmval, field, false);
modify(gval,  1);
(FIELD);
 Date
modify(year, field, false);
modify(cal, field, false);
modify(this, field, false);
modify(dates, field, false);
modify(gval, date, false);
modify(null, gval, field, false);
modify(Field);
modify(month, gval, field, false);
modify(gval, 1, false);
modify(day, gval, field, false);
modify(year, gval, field, false);
modify(gval, 0, false);
modify(gval, null, false);
