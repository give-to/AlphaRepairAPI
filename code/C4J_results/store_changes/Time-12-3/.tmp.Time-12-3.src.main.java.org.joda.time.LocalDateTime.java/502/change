iChronology = chronology;
iChronology  = null ;
 chronology=chronology;
 iChronology |= chronology;
iChronology =  chronology. withUTC ( instant ) ;
 if ( instant!= - 1 ) {
 if ( iLocalMillis == - 1 ) {
 if ( instant!= 0 ) {
 if ( iLocalMillis == null ) {
 if (iChronology == null) { return new LocalDateTime(iLocalMillis, instant); }
 if (iChronology == null) { return new LocalDateTime(iLocalMillis);
 if (iChronology == null) { return new LocalDateTime(iLocalMillis); }
 if ( instant!= 0 )
 if (iChronology == null) { return new LocalDateTime(iLocalMillis, instant); } else {
 if ( iLocalMillis == 0 ) {
 if (iChronology == null) { return new LocalDateTime(iLocalMillis, iChronology); }
 if (iChronology == null) {
 if (iChronology == null) { return new LocalDateTime(iLocalMillis, instant);
iChronology  = chronology. withUTC ( ) ;
 if (iChronology == null) { return null; }
iChronology . setInstanceUTC ( instant ) ;
 if (iChronology == null) { return this; }
 if (iChronology == null) { return new LocalDateTime(iLocalMillis, instant, chronology); }
 if (iChronology == null) { return this;
 if (iChronology == null) { return new LocalDateTime(); }
 if (iChronology == null) { return instant; }
 if (iChronology == null) { return new LocalDateTime(iLocalMillis, iChronology.withUTC());
 if (iChronology == null) { return new LocalDateTime(iLocalMillis, instant, iChronology); }
 if (iChronology == null) { return new LocalDateTime(iLocalMillis, iChronology);
 if ( instant!= 0 ) { super.
iChronology . withUTC ( instant ) ;
 return new LocalDateTime(year, monthOfYear, dayOfMonth, hourOfDay, minuteOfHour, instant); }
iChronology =  chronology. getInstanceUTC ( ) ;
 if (iChronology == null) { return new LocalDateTime(null); }
 if (iChronology == null) { return new LocalDateTime( instant ); }
 this. iChronology |= chronology;
 if (iChronology == null) { return new LocalDateTime(iLocalMillis, instant, iChronology);
 if ( iLocalMillis == null ) return instant ;
iChronology . setInstanceUTC ( chronology ) ;
iChronology  = chronology. withUTC ( instant )
 this. chronology |= chronology;
 if (iChronology == null) { return new LocalDateTime(this);
 return new LocalDateTime(year, monthOfYear, dayOfMonth, hourOfDay, minuteOfHour, instant) {
 if (iChronology == null) { return new LocalDateTime( instant );
 iChronology = _chronology;
iChronology  = chronology ; super.
 if (iChronology == null) return this;
 if (iChronology == null) { return new LocalDateTime(iLocalMillis, iChronology); } else {
 if (iChronology == null) { return new LocalDateTime(null);
 if (iChronology == null) { return new LocalDateTime(Instant); }
 if ( iLocalMillis == null )
 if (iChronology == null) { return new LocalDateTime(this); }
 if (iLocalMillis == instant) return this;
 if (iChronology == null) { return new LocalDateTime(iLocal) ;
 if (iChronology == null) { return new LocalDateTime(iLocalMillis, instant); } else { super();
iChronology = chronology ; if ( instant!= - 1 ) {
 if ( instant!= 0 ) return this ;
 if (iChronology == null) return;
iChronology = chronology. withUTC ( instant ) ; super.
 if (iChronology == null) { return new LocalDateTime(iLocal); }
iChronology =  chronology. getInstanceUTC ( instant ) ;
 if (iChronology == null) return null;
 if (iLocalMillis == null) { super();
 if (iChronology == null) { return new LocalDateTime(iLocal) }
 if ( iLocalMillis == null ) return this ;
 if (iChronology == null) { return new LocalDateTime(Instant);
 return new LocalDateTime(iLocalMillis;
 if (iChronology == null) { return new LocalDateTime(iLocalMillis, instant); } else
 if (iChronology == null) { return new LocalDateTime(iLocalMillis));
 if (iLocalMillis == null) return null;
 iChronology = this.chronology;
 if ( instant < iLocalMillis ) {
 iLocalChronology |= chronology;
 return new LocalDateTime(year, monthOfYear, dayOfMonth, hourOfDay, minuteOfHour, instant) ;
 return new LocalDateTime(iLocalMillis, iChronology.withUTC(), instant); }
 if ( instant < iLocalMillis ) return ;
 if ( instant > iLocalMillis )
 if (iChronology == null) { return ; }
 if (iChronology == null) { return this; } else {
 if (iChronology == null) return instant;
 if (iChronology == null) { return new LocalDateTime(iLocalMillis) }
 if (iChronology == null) { return new LocalDateTime(iLocalMillis, instant); } else,
 if ( instant!= - 1 ) {
 if (iChronology == null) { return null;
 this. iLocalChronology |= chronology;
 if (iChronology == null) { return new LocalDateTime(iLocalMillis, 0); }
 if (iChronology == null) { return new LocalDateTime(iLocalMillis)); }
 if (iChronology == null) { return new LocalDateTime(iLocal)};
 if (iChronology == null)
 IChronology. getInstanceUTC() |= chronology;
 iLocalMillis = instant ; this |= chronology;
iChronology  = chronology. chronology ;
 if (iChronology == null) { return null; } else {
iChronology  = null
 if (iChronology == null) { return new LocalDateTime(iLocalMillis, instant, iChronology));
iChronology  = chronology. UTC ;
iChronology =  chronology. clone ( ) ;
 this. chronology = this.chronology;
 if (iChronology == null) { return new LocalDateTime(iLocalMillis, instant); };
 if (iChronology == null) { return instant;
 iLocalMillis = instant ; return this;
 if (iChronology!= chronology) {
 iInstant = instant;
 this |= chronology;
iChronology = chronology. withUTC ( instant, chronology ) ;
 if (iChronology == null) { return new LocalDateTime(iLocalMillis, instant); } *
 if (iChronology == null) { return new LocalDateTime(iLocalMillis, iChronology); } else
 iLocalMillis = instant ; iZone |= chronology;
iChronology . setInstanceUTC ( ) ;
 if (iChronology == null) { return new LocalDateTime(iLocalMillis, instant); } else:
 if (iChronology == null) { return new LocalDateTime(iLocalMillis, instant));
iChronology = chronology. withUTC ( instant, UTC ) ;
 if (iChronology == null) { return new LocalDateTime(iLocalMillis, iChronology); } return
 if (iChronology == null) { return new LocalDateTime(iLocalMillis, iChronology));
 if (iChronology == null) { return new LocalDateTime(iLocalMillis, iChronology); } else,
 this. instant = instant ; super ( );
 IChronology |= chronology;
 if ( instant!= null ) {
 if (iChronology == null) { return new LocalDateTime(iLocalMillis());
 if ( instant!= 0 ) {
 if ( instant!== 0 ) {
 this. chronology = _chronology;
 if (iChronology == null) { return new LocalDateTime(iLocalMillis, instant());
 this. chronology = chronology ; this.chronology;
 if ( instant == 0 ) { return this ;
 return new LocalDateTime(iLocalMillis, iChronology.withUTC()); }
 iLocalMillis = iLocalMillis;
 if ( instant == - 1 ) {
 IChronology=chronology;
 return new LocalDateTime(iLocalMillis, iChronology.getInstanceUTC(), instant); }
 this. chronology = chronology ; super().chronology;
 if ( instant < 0 ) { return this ; }
 this. chronologies [ iLocalZone ] |= chronology;
 iLocalChronology = chronology.chronology;
 iLocalMillis = instant ;
 return instant;
 IChronology iChronology |= chronology;
 if (iChronology == null) { return new LocalDateTime(iLocalMillis,
iChronology =  chronology. withUTC ( instant ;
 IChronology = this.chronology;
 iLocalMillis [ year ] |= chronology;
iChronology = chronology. withUTC ( instant, 0 ) ;
 instant = 0;
 this. chronology = chronology. _chronology;
 chronology =!chronology;
 return iLocalMillis + instant;
 this.chronology=chronology;
 if ( instant ) {
 this. chronology = chronology.chronology;
 chronology = _chronology;
 IChronology = _chronology;
 if (iChronology == null) { return new LocalDateTime() {
 if ( instant == 0 ) return this ;
 if (iChronology == null) { return new LocalDateTime() ;
iChronology . setInstanceUTC ( instant )
 if ( instant > 0 ) {
 if (iChronology == null) { return new LocalDateTime() }
 if ( instant == 0 ) { return this ; }
 iLocalMillis = instant * 1000;
 iLocalDateTime = instant;
iChronology = chronology. withUTC ( instant ) ; return this ;
 this. chronology = chronology ; instant =chronology;
 iLocalMillis = instant; chronology=chronology;
 if ( instant > - 1 ) {
 this. chronology = instant ; super().chronology;
 this. instant = - 1;
 iLocalChronology = this.chronology;
 iInstant = -1;
 iLocalMillis = instant * 1000.0;
 iUTC = false;
 iLocalMillis = - 1;
 IChronology. getInstanceUTC |= chronology;
 iLocalMillis = instant ; return chronology;
 return new LocalDateTime( instant );
 int iLocalMillis ;
iChronology . withUTC ( instant )
 int instant = instant;
 if ( instant!= null )
 iLocalMillis = instant + offset;
 return new LocalDateTime(iLocal);
 iLocalMillis = instant ; super |= chronology;
 this. chronology = chronology. i_chronology;
 ILocalChronology |= chronology;
 this [ iLocalChronology ]= chronology;
 if (iChronology == null) { return null; } return
 iLocalDateTimeChronology |= chronology;
 iLocalMillis = instant ; } super;
 this. chronology = instant ; this.chronology;
iChronology = chronology. withUTC ( instant ) ; } else {
 iLocalMillis = instant + 1;
 return iLocalMillis - instant;
 if (iChronology == null) { return this; } *
 iLocalMillis = instant * 1000 * 1000;
iChronology = chronology. withUTC ( instant ) ; super ;
 if (iChronology == null) { return null; } *
 iScheme |= chronology;
 iLocalMillis = instant ; iZone *= chronology;
 iLocalMillis = instant - 1;
 if ( instant!= 0 ) { super();
iChronology = chronology. withUTC ( instant ) ; return this.
 this [ iLocalZone ]= chronology;
 super();chronology;
 iLocalMillis = instant ; this ^= chronology;
 iLocalOffset = instant;
 iLocalMillis = instant ; } return this;
 iLocalMinute = instant;
iChronology  = chronology.UTC();
 if (iChronology == null) { return instant; } else
 instant += 1000;
 iInstantOffset = instant;
 this. iScheme |= chronology;
iChronology =  chronology. withUTC ( instant ) ; }
 iLocale = locale;
iChronology =  chronology. withUTC ;
 this. instant = instant + offset;
iChronology =  chronology ; this.
 this. instant = instant + 1900;
 if ( instant!= null ) {
 iLocalMillis [ i ] |= chronology;
 this. chronology = iChchronology;
 this.cronology=chronology;
 iChronology = &chronology;
 iChronology = iChchronology;
iChronology =  chronology ; } else {
 iLocalMinutes = 0;
 iInstant = instant + offset;
 if (! instant) {
 iOffset = 0;
 iUTC = true;
 chronology = ichronology;
 if (! instant ) return ;
 iLocalInstant = instant ;
 iChronology &= chronology;
 this. chronology = instant ; super();chronology;
iChronology . setInstanceUTC ( instant ) ; } }
 this. chronology = instant = _chronology;
 this [ iLocalTimeZone ]= chronology;
iChronology = chronology. withUTC ( instant ) ; } } ;
 chronology = &chronology;
 iLocalMillis = 0 ;
 this. iChronology &= chronology;
 return new LocalDateTime( instant ); }
 instant += 1900;
 iInstant = instant ;
 this. iChronology_= chronology;
iChronology =  chronology. withUTC ( instant ) ; return
iChronology . reset ( ) ;
 if ( instant < iLocalMillis ) return this
 iChronology *= chronology;
 this [ iLocalZone ] |= chronology;
iChronology  ++ ;
iChronology  = chronology.withUTC(); return
iChronology  = chronology ; return instant ; } else {
iChronology  = chronology. withUTC ( instant ) }
 iZone |= chronology;
iChronology  = this ;
 instant = instant;
 instant += delta;
 instant = - instant ;
iChronology  = chronology. getInstanceUTC());
iChronology  = chronology ; return
iChronology =  chronology. getInstanceUTC( instant ); }
 if (!instant)
 return instant;
 this. chronology = instant = ichronology;
iChronology . clear ( ) ;
 if ( instant!= 0 ) { return
 iSchedule |= chronology;
 iLocalMillis = instant ; } }
 chrono=chronology;
iChronology  = chronology ; }
iChronology . withUTC ( instant ) ; }
 if ( instant!= - 1 ) return
iChronology  = chronology
 iDefaultZone= chronology;
 this. zone |= chronology;
 instant = 0L;
 instant = 0 ;
 iLocalMillis = instant ; }
 super().chronology;
 long instant;
 if ( instant == - 1 ) return
 iLocalZone= chronology;
 if (! instant) return
iChronology  = this
 return instant ; } }
 if ( instant )
 if ( instant!= - 1 ) return
 iCustomizer= chronology;
 iCustomZone= chronology;
 iZone= chronology;
 Chronology=chronology;
 i *= chronology;
iChronology  = undefined ;
 instant = instant ;
 int iLocalMillis();
iChronology =  chronologyInstance ;
iChronology =  chronology ; else
 myZone=chronology;
 this &= chronology;
 return instant; }
 return instant; }
 if (!null)
 ++ i;
iChronology  = chrono ;
 long result;
 this=chronology;
 ++ instant;
 super();
iChronology  = chronology();
iChronology  = chronology.
 return this ;
iChronology  -- ;
 return this.
 null=chronology;
 return this;
 this.
 return instant();
 return instant,
 return;
 this =
 *
 return
iChronology == chronology;
iChronology += chronology;
iChronology. chronology;
