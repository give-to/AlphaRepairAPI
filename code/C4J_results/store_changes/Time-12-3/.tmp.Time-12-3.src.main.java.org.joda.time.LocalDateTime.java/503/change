 return instant;
iLocalMillis = instant;
iLocalMillis  = instant ; return instant ; }
iLocalMillis  = instant ; return instant ;
 return instant ; }
iLocalMillis  = instant
iLocalMillis  = instant ; }
 iLocalMillis |= instant;
 return new LocalDateTime(year, monthOfYear, dayOfMonth, hourOfDay, minuteOfHour, secondOfSecond);
 return new LocalDateTime(year, monthOfYear, dayOfMonth, hourOfDay, minuteOfHour, secondOfMinute);
 if ( instant!= 0 )
 if (iChronology == null) { return new LocalDateTime(iLocalMillis, instant); }
 if ( instant!= 0 ) {
 if (iChronology == null) { return new LocalDateTime(iLocalMillis, instant);
 if (iChronology == null) { return new LocalDateTime(iLocalMillis); }
 if (iChronology == null) { return new LocalDateTime(iLocalMillis, instant); } else {
 if (iChronology == null) { return new LocalDateTime(iLocalMillis);
 iLocalMillis = -instant;
 return new LocalDateTime(year, monthOfYear, dayOfMonth, monthOfDay, minuteOfHour, secondOfSecond);
 return new LocalDateTime(year, monthOfYear, dayOfMonth, monthOfDay, hourOfDay, minuteOfMinute);
 return (long)instant;
 } return instant;
 return new LocalDateTime(year, monthOfYear, dayOfMonth, monthOfDay, hourOfDay, minuteOfHour);
iLocalMillis = instant ; return new LocalDateTime ( instant ) ;
 return new LocalDateTime(year, monthOfYear, dayOfMonth, monthOfDay, hourOfDay, secondOfMinute);
 return new LocalDateTime(iLocalMillis, instant);
 if (iChronology == null) { return new LocalDateTime(iLocalMillis, Instant.UTC); }
 iLocalMillis = &instant;
 return new LocalDateTime(year, monthOfYear, dayOfMonth, instant);
 return new LocalDateTime(year, monthOfYear, dayOfMonth, monthOfDay, hourOfDay, minuteOfSecond);
 return -instant;
iLocalMillis  = instant ; return instant ; } }
 if (iChronology == null) { return new LocalDateTime(iLocalMillis, instant); } else
 if (iChronology == null) { return new LocalDateTime(iLocalMillis, instant); } return
 return instant.instant;
 if (iLocalMillis == -1) {
 if ( instant!= - 1 ) {
 if (iChronology == null) { return new LocalDateTime(iLocalMillis, Instant.UTC()); }
 return new LocalDateTime(iLocalMillis);
 if (iChronology == null) { return new LocalDateTime(); }
 iLocalMillis *= instant;
 iLocalMillis = instant.instant;
 if (iChronology == null) { return new LocalDateTime(null);
 return instant
 if ( iChronology == null ) { return null ; } if ( iLocalMillis == null ) { return instant ;
 if (iLocalMillis == null) {
 iLocalMillis [ year ] |= instant;
 return instant+instant;
 if (iChronology == null) { return new LocalDateTime(iLocalMillis, instant); } return this ;
 if ( iChronology == null ) { return null ; } if ( iLocalMillis == null ) { return instant }
 if (iChronology == null) { return new LocalDateTime(Instant); }
 if (iChronology == null) { return new LocalDateTime(instant); }
 iLocalMillis = instant ; return instant.instant;
 if (iChronology == null) { return null; }
 if (iLocalMillis == 0) {
iLocalMillis  = instant ; return iLocalMillis ; }
 return new LocalDateTime(year, monthOfYear, dayOfMonth, hourOfDay, minuteOfHour, secondOfMinute));
 if ( instant ) {
 if (iChronology == null) { return new LocalDateTime(iLocalMillis, instant); } else { return
 iInstant *= instant;
iLocalMillis =  instant ; return ( LocalDateTime ) this ;
 return new LocalDateTime(year, monthOfYear, dayOfMonth, hourOfDay, minuteOfHour, secondOfSecond));
 if (iChronology == null) { return new LocalDateTime( instant );
 if (iChronology == null) { return new LocalDateTime(iLocalMillis, 0); }
iLocalMillis = instant ; return ( LocalDateTime ) chronology ;
 return new LocalDateTime(iChronology, iLocalMillis, instant); if ( instant!= 0 )
 if (iChronology == null) { return new LocalDateTime(iLocalMillis), instant);
 if (iChronology == null) { return new LocalDateTime(Instant);
 return iLocalMillis + instant.instant;
 if (iChronology == null) { return new LocalDateTime(iLocalMillis, null); }
 if (iChronology == null) { return this; }
 iLocalMillis = instant+instant;
 return new LocalDateTime(year, monthOfYear, dayOfMonth, hourOfDay, minuteOfHour, secondOfMinute)
iLocalMillis  = instant ; return instant ; } } ;
 if (iChronology == null) { return new LocalDateTime(iLocalMillis, instant));
 return instant + millisOfSecond ;
 if (iChronology == null) { return new LocalDateTime(iLocalMillis, null);
 if (iLocalMillis == null)
 if (iChronology == null) { return new LocalDateTime(this, instant); }
 if (iChronology == null) { return new LocalDateTime(0, instant);
 iLocalMillis [ year ]= instant;
 iLocalMillis = instant ; iInstant |= instant;
 if (iChronology == null) { return new LocalDateTime(iLocalMillis());
 return instant + millisOfSecond
 if (iChronology == null) { return new LocalDateTime(iLocalMillis));
 if ( iLocalMillis == null ) return instant ;
 iLocalMillis = instant ; iInstant *= instant;
 if (iLocalMillis == 0)
iLocalMillis  = instant ; return instant
 if (iChronology == null) { return new LocalDateTime(iInstant); }
 if ( iLocalMillis == null ) { instant = 0 ;
 if ( instant > 0 ) {
 return instant. toInstant ( ) ;
iLocalMillis =  instant ; return new LocalDateTime ( ) ;
 return new LocalDateTime(iChronology, iLocalMillis, instant); } else {
iLocalMillis =  instant ; return ( LocalDateTime ) instant ;
 if (iChronology == null) { return new LocalDateTime(iLocalMillis)); }
 iLocalMillis [ iIndex ] |= instant;
 if (iChronology == null) { return new LocalDateTime(iLocalOffset);
 return instant + 1900;
iLocalMillis  = instant ; return instant + millisOfSecond
 if (iLocalMillis == null) return this;
iLocalMillis  = instant ; return instant ; } ;
 if ( iLocalMillis == null ) { return this ;
 if (iLocalMillis == null) return null;
 if (iChronology == null) { return new LocalDateTime(iLocalMillis) }
 this.instant = instant.instant;
 iLocalMillis = instant ; return this.instant;
 return new LocalDateTime(iLocalMillis, instant); } else {
 if (iChronology == null) { return new LocalDateTime(null); } return
 return Instant. ofInstant ( instant ) ; }
 iInstant |= instant;
 iLocalMillis = (long)instant;
 return instant. toInstant ( ) ; }
 if (iChronology == null) { return this;
 if (iChronology == null) { return null; } else {
 return iLocalMillis + -instant;
 return instant-instant;
 if ( instant < 0 ) { return - 1;
 return instant ; } return null;
iLocalMillis  = instant ; return instant ; } return null ;
 if (iChronology == null) { return this; } else {
iLocalMillis  = instant ; return instant + millis ;
 iLocalMillis = +instant;
 return instant. toString ( ) ; }
 return instant. toHours ( ) ;
 if (iChronology == null) { return new LocalDateTime() {}
 if (iChronology == null) { return new LocalDateTime() {
 return iLocalMillis + chronology.instant;
iLocalMillis =  instant ; return new LocalDateTime ( instant )
 return instant. toString ( ) ;
iLocalMillis = instant ; return ( LocalDateTime ) instant ; }
 if (iChronology == null) { return null; } return
 return instant. toFixed ( ) ; }
 return new LocalDateTime(year, monthOfYear, dayOfMonth, instant));
 return new LocalDateTime(year, monthOfYear, dayOfMonth, instant); }
 this.instant = &instant;
 return instant + iLocalMillis + this.instant;
 iLocalMillis [ iLocalOffset ] |= instant;
 return instant ; } return this;
 iLocalMillis [ iOffset ] |= instant;
 if ( iChronology == null ) { return new LocalDateTime ( instant ) }
 return instant. getTime ( ) ;
 return instant + 1;
 return Instant. ofInstant ( instant ). _instant;
 return iLocalMillis + (long)instant;
iLocalMillis = instant ; return ( LocalDateTime ) this ; }
 iLocalMillis = 0 ; iInstant |= instant;
 if (iChronology == null) { return this; } return
 return new LocalDateTime( instant );
 if (iChronology == null) { return new LocalDateTime() ;
 iLocalMillis = instant ; iOffset *= instant;
 iLocalMillis = -1;
 iLocalMillis = instant-instant;
iLocalMillis = instant ; return iLocalMillis ; } } ;
 iLocalMillis [ iYear ] |= instant;
iLocalMillis  = instant ; return instant ; } return this ;
 if (iChronology == null) { return new LocalDateTime() }
 return instant ; } } ;
 return instant + iLocalMillis ; }
 return instant. toFixed ( 2 ) ;
 return instant + millis ;
iLocalMillis  = instant ; return instant + millis ; }
 return new LocalDateTime(iLocalMillis, instant); }
 iLocalMillis [ year + 1 ]= instant;
 return instant - 1900;
iLocalMillis  = instant ; } }
 if ( instant > 0 )
iLocalMillis  = instant ; return instant ; } -----------------------------------------------------------------------
 if ( iLocalMillis ) {
 return instant - 1;
 if ( instant!= null ) {
 iLocalMillis ^= instant;
 return new LocalDateTime(iLocalMillis));
iLocalMillis  = instant ; return this ;
 return new LocalDateTime(iLocalMillis, instant); } else
 return (LocalDateTime)instant;
 if ( instant > 0 ) { return - instant;
 if ( instant < 0 ) { return this;
 iLocalMillis [ year ] *= instant;
 if ( instant == 0 ) { return this;
 return iLocalMillis + instant+instant;
 iLocalMillis [ year ] ^= instant;
 return instant + iLocalMillis.instant;
 iLocalInstant |= instant;
 if ( instant == - 1 ) { return this;
 return instant + iLocalMillis + millis ;
iLocalMillis  = instant ; return instant ; return null ;
iLocalMillis  = instant ; return this ; }
 return new LocalDateTime(iLocalMillis, instant); } }
 iLocalMillis = 0 ; return -instant;
 return Instant. ofInstant ( instant ) ; } }
 if ( instant < 0 ) {
 iLocalMillis = instant + 1900;
 this. instant = instant ; return;
 if ( instant < 0 ) { return null;
 return new LocalDateTime(iLocalMillis); }
 iLocalMillis &= instant;
 if ( instant > 0 ) { return - 1;
 this.instant=instant;
 iLocalMillis = instant ; return &instant;
 return iLocalMillis + chronology+instant;
 iLocalMillis [ iIndex ]= instant;
 iLocalMillis + 1 *= instant;
 return instant ; } }
 return instant. get ( ) ;
 return Instant. ofInstant ( instant ) ; };
 iLocalMillis [ iIndex ] ^= instant;
 iLocalMillis = instant - 1;
 return iLocalMillis *= instant;
 iLocalMillis + instant *= instant;
 iLocalMillis = instant + offset;
iLocalMillis  = instant ; return instant ; return 0 ;
 iLocalMillis = instant + 1;
 iLocalMillis[] |= instant;
 iLocalTimeMillis |= instant;
 iLocalMillis + 1 |= instant;
 iLocalMillis = instant - 1900;
 if ( instant == 0 ) { return null;
 iLocalMillis [ year ] &= instant;
 return iLocalMillis |= instant;
 return instant + 1000;
iLocalMillis  = instant ; } return this ;
 return instant + iLocalMillis + 1 ;
 return instant + iLocalMillis ; } }
 if ( instant!= null )
 return new LocalDateTime(iLocalMillis, instant); } else,
 return instant - iLocalMillis ; } }
 return instant + iLocalMillis * 1000;
 return instant + iLocalMillis ; } } ;
iLocalMillis  = instant ; } } ;
 return instant - iLocalMillis ; } } ;
 this. instant = - instant;
 } else { instant = 0 ;
 return instant. toFixed ( ) ; } }
 iInstantOffset *= instant;
iLocalMillis  += instant ; return instant ; }
iLocalMillis  = instant ; return this ; } }
 return iLocalMillis += instant;
 return instant - 1 ; }
 return (Long) instant;
 if ( instant >= 0 )
 iInstant = &instant;
iLocalMillis  = instant ; return instant ; return ;
 instant *= instant;
 return chronology.instant;
 return (LocalDate)instant;
 if ( instant!= instant )
 iInstant = -instant;
 return instant ; } ;
 return instant + millisecondsOfSecond;
 iInstantZone |= instant;
 iInstant &= instant;
 return instant ; } } ; }
 return instant - 1L ;
 return -1;
 if ( iLocalMillis ) return
 if ( instant )
 iInstantZone *= instant;
iLocalMillis  = instant ; return ;
 instant=instant;
 return instant; return 0;
iLocalMillis  = instant ; } ;
iLocalMillis  = instant ; super ;
 return instant + - 1;
 if (!isUTC)
 return instant ; return null;
 return + instant;
 instant ;
 this |= instant;
 iLocalTimeInstant |= instant;
 if (! instant) {
 return instant.UTC;
 iLocalInstant= instant;
 if (! instant)
 return instant ; } }
 return &instant;
 this.offset= instant;
 iInstant= instant;
 } else {
 this *= instant;
iLocalMillis  += instant ; }
iLocalMillis  ++ ;
 if ( instant ) return
 iLocal= instant;
 return instant ; }
 return year+instant;
 super();
 return instant;
iLocalMillis  = instant; *
iLocalMillis  += instant ;
iLocalMillis  += instant
 return this ;
 else {
 } }
 return instant,
 instant++;
 long instant ;
iLocalMillis  return instant ;
iLocalMillis  return instant
iLocalMillis =  instant. *
iLocalMillis  = instant.
 return instant();
 } } ;
 } else
 super().
 } return
iLocalMillis ++; ;
iLocalMillis =  instant();
iLocalMillis =  0 ;
 throw instant;
 return this;
 return Instant;
 return
 #
iLocalMillis -= instant;
