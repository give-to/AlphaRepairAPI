case ARRAYLIT:        return "ARRAYLIT";
case ARRAYLIT:        return  "ARRAY";
 case ARRAY:        return "ARRAYLIT";
case ARRAYLIT:        return  "ARRAYLT";
case ARRAYLIT:        return  "ARRAYLIT"; case OBJECT:
 case MAP:return "ARRAYLIT";
case  OBJECT:
 case ARRAYLIT: #"ARRAYLIT";
 case ARRAYLIT: case MAP:        return "ARRAYLIT";
 case ARRAYLITreturn "ARRAYLIT";
case ARRAYLIT:        return  "ARRAYL";
 case ARRAYL:        return "ARRAYLIT";
case ARRAYLIT:        return  "ARRAYLIT"; case STRING:
 case ARRAYLIT #"ARRAYLIT";
 case ARRAYLT:        return "ARRAYLIT";
 case ARRAY_LIT:        return "ARRAYLIT";
case ARRAYLIT:        return  "ARRAYLIT; case OBJECT:
 case ARRAYLIT: case LET:        return "ARRAYLIT";
case ARRAYLIT:        return  "ARRAYLITLit";
 case ARRAY: #"ARRAYLIT";
 case ARRAYLIT2:        return "ARRAYLIT";
 case ARRAYLIT: case STRING:        return "ARRAYLIT";
 case ARRAYLIT: case ARRAY:        return "ARRAYLIT";
case ARRAYLIT:        return  "ARRAYLIT"; case MAP:
case ARRAYLIT:        return  "ARR";
case ARRAYLIT:        return  "ARRAYLIT"; case LET:
case ARRAYLIT:        return  "ARRAYLIT"; case OP:
 case ARRAYLIT::"ARRAYLIT";
case ARRAYLIT:        return  "ARRAYLIT"; case TYPE:
 case ARRAYLIT: case CALL:        return "ARRAYLIT";
 case ARRAYLIT: case MAPLIT:        return "ARRAYLIT";
case ARRAYLIT: case MAP:
case ARRAYLIT:        return  "ARRAYLIT"; case OBJ:
case ARRAYLIT:        return  "ARRAYLIT"; case OR:
 case ARRAYLIT: case ArrayLit:        return "ARRAYLIT";
case ARRAYLIT:        return  "ARRAYLIT"; case OBJECT;
 case ARRAYLITER:        return "ARRAYLIT";
case ARRAYLIT:        return "ARRAYLIT" case OBJECT:
 case STRING: return "STRING;
 case STRING : return "STRING";
case ARRAYLIT:        return  "ARRAYLIT2";
 case ARRAYLIT: case LIT:        return "ARRAYLIT";
 case ARRAYLIT: case INDEX:        return "ARRAYLIT";
 case ARRAYLIT: case LIST:        return "ARRAYLIT";
 case ARRAYLITLIT:        return "ARRAYLIT";
case  OBJECTLIT:
case ARRAYLIT:        return  "ARRAYLITLIT";
 case ARRAYLIT|ARRAYLIT:        return "ARRAYLIT";
 case LIT:
 case OBJECTLIT:
 case ARRAYLIT: case LISTLIT:        return "ARRAYLIT";
 case ARRAYLIT: caseARRAYLIT:        return "ARRAYLIT";
 case ARRAYLiteral:        return "ARRAYLIT";
 case LET:
 case ARRAYLIT: case BLOCK:        return "ARRAYLIT";
 case ARRAYLIT1:        return "ARRAYLIT";
 case ARRAYLITLit:        return "ARRAYLIT";
case  STRING : return "STRING";
case ARRAYLIT:        return  "ARRAYLITL";
 case PARAM_LIT: case ARRAY:        return "ARRAYLIT";
 case ARRAYLIT: case ANY:        return "ARRAYLIT";
case  OBJECTLIT: return "OBJECT";
 case MAP:
 case STRING_KEY: return "STRING";
 case ARRAYLITExpression:        return "ARRAYLIT";
 case RETURN: return "URN;
 case ARRAYLIT_ARRAYLIT:        return "ARRAYLIT";
 case STRING: return "STR";
 case OBJECT;
 case STRINGLIT:
 case STRING_KEY: return "STRING;
 case STRING: return "STR;
 case ARRAYLIT,ARRAYLIT:        return "ARRAYLIT";
 case ARRAYLitsreturn "ARRAYLIT";
 case STRING:
 case ArrayLit:return "ARRAYLIT";
 case RETURN: return "URN";
 case RETURN : return "RETURN";
 case MAPLIT:
case ARRAYLIT:        return  "ARRAYLIT; break;
 caseRAYLIT:return "ARRAYLIT";
 case ARRAYLIT: case NOTARRAYLIT:        return "ARRAYLIT";
 case ARRAYLIT: case UNARRAYLIT:        return "ARRAYLIT";
 case ARRAYLIT.ARRAYLIT:        return "ARRAYLIT";
 case MAP::"ARRAYLIT";
 case ARRAY_LITERAL:        return "ARRAYLIT";
case  STRING_KEY: return "STRING";
 case INDEXLIT:
 case TYPELIT:
 case ARRAYLIT_TYPE:        return "ARRAYLIT";
case ARRAYLIT:        return  "ARP";
case ARRAYLIT:        return  "ARRAYLIT(string);
 case STRING_LIT:
case ARRAYLIT:        return "ARRAYLIT" case STRING_KEY:
case ARRAYLIT:        return  "ARRAYLIT(...);
 case ARLIT:        return "ARRAYLIT";
 case RETURNLIT:
 case ARRAYLIT: case ISARRAYLIT:        return "ARRAYLIT";
case ARRAYLIT:        return "ARRAYLIT" case STRING:
 case ARRAY:
case  STRING: return "STR";
 case STRING_KEY : return "STRINGKEY";
case ARRAYLIT:        return "ARRAYLIT" case RETURNLIT:
 case TYPE: return "TYPE;
 case OBJECTLIT: return "OBJECT;
case  RETURN: return "URN";
 case ARRAYLIT: case ARRAYLT:        return "ARRAYLIT";
 case STRING_KEY : return "STRING_KEY";
case ARRAYLIT:        return "ARRAYLIT" case STRING_LIT:
 case OBJECTLIT;
 case ARRAYLIT: case UARRAYLIT:        return "ARRAYLIT";
 case ERROR: return "ERROR;
case ARRAYLIT:        return "ARRAYLIT" or "ARRAY_LIT";
 case MAP: #"ARRAYLIT";
 case EXACT: return "EXACT;
 case MAPLIT: case MAPARRAYLIT:        return "ARRAYLIT";
 case OBJECTLIT: case OP_ARRAYLIT:        return "ARRAYLIT";
 case OBJECTLIT: case USE_ARRAYLIT:        return "ARRAYLIT";
 case OOBJECTLIT: case OARRAYLIT:        return "ARRAYLIT";
 case ARRAYLIT: case VARRAYLIT:        return "ARRAYLIT";
 case STRING_KEY: return "KEY";
 case RETURN_LIT:
 case OBJECTLIT: case OBJECTARRAYLIT:        return "ARRAYLIT";
 case OOBJECTLIT: case OOBARRAYLIT:        return "ARRAYLIT";
 case STRING_STRING: return "STRING";
case ARRAYLIT:        return "ARRAYLIT" case TYPELIT:
 case OBJECTLIT: return "OBJECTL";
case ARRAYLIT:        return "ARRAYLIT" case RETURN_LIT:
case ARRAYLIT:        return  "AR";
 case STRINGLIT: return "STRINGLIT";
case  RETURN: return "RETURN";
 case EXACT: return "ACT;
 case RETURN: case RET;
 case STRING: return "String;
 case RETURN: return "RETURN;
 case OBJECTLIT: return "OBJECTLT";
case  STRING_KEY: return "KEY";
 case STRING_KEY: case TEXT:
case  OBJECTS:
case ARRAYLIT:        return "ARRAYLIT" return "ARRAY";
 case MAP: case MAP_ARRAYLIT:        return "ARRAYLIT";
 case OBJECT: return "JECT;
 case ARAYLIT:return "ARRAYLIT";
 case STRING_KEY:
case ARRAYLIT:        return  "ARRAYLA";
 case STRING_STRING : return "STRINGSTRING";
 case STRING_ARRAYLIT:        return "ARRAYLIT";
 case STRING_STRING:
 case OBJECTLIT: case OBJECT_ARRAYLIT:        return "ARRAYLIT";
 case STRING_STRING: return "STRINGING";
case ARRAYLIT:        return "ARRAYLIT" case STRING_KEY: case KEY:
 case EXPECTEDLIT:
 case STRING_KEY" : return "STRING_KEY"; case STRING_VALUE" : return "STRING_VALUE";
 case STRING_VALUE: return "STRING";
 case AARRAYLIT:return "ARRAYLIT";
case  OBJECTLIT: return "BIT";
case ARRAYLIT:        return  "ARRAYLI";
 case STRING_KEY, case STRING_VALUE, case STRING_VALUE, case STRING_KEY,
case ARRAYLIT:        return  "RAY";
 case USE_ARRAYLIT:        return "ARRAYLIT";
 case OBJECT: return "OBJECT;
 case STRING_STRING: return "STRINGSTR";
 case OBJECTLIT: case T_ARRAYLIT:        return "ARRAYLIT";
case  OBJECTLIT: return "LIT";
case ARRAYLIT:        return "ARRAYLIT" case STRING: return "STR";
case ARRAYLIT:        return "ARRAYLIT" case STRINGLIT:
case  OBJOR:
case ARRAYLIT:        return "ARRAYLIT" case STRING_STRING:
 case OBJECT_ARRAYLIT:        return "ARRAYLIT";
case ARRAYLIT:        return  "ARRAYLOAD";
 case STRING_KEY;
case ARRAYLIT:        return  "ARB";
case ARRAYLIT:        return "ARRAYLIT" case STRING_KEY: case TEXT:
case ARRAYLIT:        return  "ARRAYLIT;";
 case STRING_KEY, case STRING_VALUE, case STRING_VALUE, case STRING_KEY,
 case STRING_KEY" : case STRING_VALUE" : case STRING_VALUE" : case STRING_KEY:
 case ARRAY::"ARRAYLIT";
 case STRING_KEYLIT:
 case EXTENSION:
 case STRING_KEY, case STRING_VALUE, case STRING_VALUE, case STRING_VALUE,
 case STRING_KEY" : case STRING_VALUE" : case STRING_VALUE" : return "STRING_VALUE";
 case STRING_STRING: return "STR";
 case STRING_KEY: case STRING:
 case ARRAYLIT, UARRAYLIT:        return "ARRAYLIT";
 case STRING: return "String";
 case STRING_KEY: case STRING;
 case STRING_KEY, case STRING_KEY, case STRING_VALUE, case STRING_VALUE,
 case STRING_KEY" : case STRING_VALUE" : case STRING_VALUE" : case STRING_STRING:
 case OBJECTLIT: case STRING_ARRAYLIT:        return "ARRAYLIT";
 case STRING_KEY, case STRING_VALUE, case STRING_VALUE, case STRING_STRING,
 case LHS:
 case STRING_KEY" : return "STRING_KEY"; case STRING_VALUE: : return "STRINGVALUE";
case ARRAYLIT:        return "ARRAYLIT" or "ARRAYLIT_STRING";
 case OOBJECTLIT: case OOPARRAYLIT:        return "ARRAYLIT";
 case INDEX_ARRAYLIT:        return "ARRAYLIT";
 case STRING_KEY, case STRING_VALUE, case STRING_VALUE, case STRING_VALUE,
case ARRAYLIT:        return "ARRAYLIT" case OBJECTLIT:
 case TYPE_ARRAYLIT:        return "ARRAYLIT";
 case STRING_STRING : return "STRING_STRING";
 case STRING_KEY" : case STRING_VALUE" : case STRING_VALUE" : return "STRINGVALUE";
 case STRING_KEY, case STRING_VALUE, case STRING_STRING, case STRING_STRING,
 case ARRAYLIT: case NULL:return "ARRAYLIT";
case ARRAYLIT:        return "ARRAYLIT" case STRING_KEY: case STR;
 case STRING_KEY" : case STRING_VALUE" : case STRING_VALUE" : case STRING_VALUE" :
 case STRING_KEY, case STRING_KEY, case STRING_VALUE, case STRING_VALUE,
 case ARRAYLIT, UNARRAYLIT:        return "ARRAYLIT";
 case STRING_KEY, case STRING_VALUE, case STRING_STRING, case OBJECT_STRING,
case ARRAYLIT: case MAP;
 case STRING_STRING : return "STRING_STRING";
 case STRING_KEY, case STRING_VALUE, case STRING_TYPE, case STRING_VALUE,
 case CALL:
 case STRING: case NULL:
 case STRING_KEY" : case STRING_VALUE" : case STRING_STRING" : case STRING_VALUE:
 case STRING: case NULL;
 case STRING_KEY" : case STRING_VALUE" : case STRING_VALUE" : case STRING_VALUE:
 case ARRAYLIT, NOTARRAYLIT:        return "ARRAYLIT";
case  OBJOBJECT:
 case STRING_KEY: case STRINGKEY:
case  STRING_STRING:
 case STRING_KEY, case STRING_VALUE, case STRING_VALUE, case STRING_END,
 case STRING_KEY" : case STRING_VALUE" : case STRING_VALUE" : return "STRINGValue";
 case ARRAYLIT: +"ARRAYLIT";
 case STRING_KEY, case STRING_VALUE, case STRING_VALUE, case STRING,
case ARRAYLIT: case LET:
 case BLOCK:
case ARRAYLIT:        return "ARRAYLIT" case STRING_KEY: case NULL:
 case OBJECTLIF;
 case OP_ARRAYLIT:        return "ARRAYLIT";
 case STRING_KEY, case STRING_VALUE, case STRING_STRING, case STRING_OBJECT,
 case STRING_STRING" : case STRING_KEY" : case STRING_KEY" : return "STRING_KEY";
 case STRING_KEY, case STRING_KEY, case STRING_VALUE, case STRING_STRING,
 case STRING_KEY, case STRING_VALUE, case STRING_VALUE, case STRING_ARRAY,
 case ASSIGN_ARRAYLIT:        return "ARRAYLIT";
 case STRING_KEY, case STRING_VALUE, case STRING_VALUE: return "STRING";
 case STRING_KEY: case STRINGKEY;
 case STRING_KEY, case STRING_VALUE, case STRING_VALUE, case STRING_VALUE_KEY,
 case STRING_KEY, case STRING_VALUE, case STRING_VALUE, case STRING_STRING:
 case EXTENSION_ARRAYLIT:        return "ARRAYLIT";
 case arrayreturn "ARRAYLIT";
 case STRING_KEY, case STRING_VALUE, case STRING_VALUE, case STRING_REGEXP,
case  OBJECTLIF:
 case OBJECTOBJECT;
 case STRING_KEY, case STRING_VALUE, case STRING_VALUE, case STRING_VALUE_MAP,
 case STRING_KEY, case STRING_VALUE, case STRING_STRING: return "STRING";
case ARRAYLIT:        return "ARRAYLIT" or "ARRAYLIT_NONE";
 case STRING_STRING" : case STRING_KEY" : case STRING_KEY" : case STRING_STRING:
 case STRING_KEY: if (STRING_KEY) { return "STRING_KEY"; } return "STRING_KEY";
 case STRING_KEY, case STRING_VALUE, case STRING_STRING, case STRING,
case ARRAYLIT:        return "ARRAYLIT" or "ARRAY_LIST";
 case ARAYLIT: #"ARRAYLIT";
 case STRING_KEY, case STRING_VALUE, case STRING_VALUE, case STRING_END,
 case RETURN: return "";
case  STRING_LIT:
 case STRING_STRING" : case STRING_KEY" : case STRING_KEY" : case STRING_VALUE" :
 case ARRAYLIT: case array:return "ARRAYLIT";
 case BINARY_ARRAYLIT:        return "ARRAYLIT";
case  OBJECT: return "JECT";
case  STRING: return "String";
 case STRING_KEY, case STRING_VALUE, case STRING_VALUE, case CHAR_VALUE,
 case STRING_KEY, case STRING_VALUE, case STRING_VALUE, case STRINGKEY,
 case OBJECTLIT: return "LIT;
case  OBJECTLIT: return "OBJ";
 case MULTI_ARRAYLIT:        return "ARRAYLIT";
 case STRING_KEY, case STRING_VALUE, case STRING_TYPE, case STRING,
 case STRING_KEY, case STRING_VALUE, case STRING_END, case STRING,
case  OBJECTOR:
 case STRING_KEY, case STRING_VALUE, case STRING_KEY, case STRING,
 case STRING_KEY, case STRING_VALUE, case STRING_VALUE, case STRING:
case ARRAYLIT: case NULL;
 case STRING_KEY: case STRING_KEY: return "STRINGKEY";
 case STRING_STRING" : case STRING_KEY" : case STRING_KEY" : case OBJECT_LIT:
case ARRAYLIT:        return "ARRAYLIT" case STRING: case NULL:
case ARRAYLIT:        return "ARRAYLIT" or "ARRAYLIT2";
 case STRING_KEY: case STRING_KEY: return "STRING";
case ARRAYLIT:        return "ARRAYLIT" or "ARRAYLIT0";
 case OBJECTLIT: return "BIT;
 case STRING_STRING" : return "STRING_STRING";
 case STRING : return "STRING_;
 case OBJECTLIS;
 case STRING_KEY: case STRING_KEY: case MAP:
 case STRING_KEY: case STRING_KEY: return "STRINGKEY";
 case STRING_STRING: return "STRING_STRING"; case STRING_BYTES:
 case STRING_KEY, case STRING_VALUE, case STRING_VALUE, case STRING*,
 case STRING_KEY: case STRING_KEY: case STRING:
case  OBJECT_LIT:
case  STRING_KEY: case STRINGKEY:
 case STRING_KEY: case STRING_KEY: return "STRING_KEY";
 case STRING_KEY, case STRING_VALUE, case STRING_STRING,
case  OBJECTEXP:
 case STRING_KEY: return "StringKey;
case ARRAYLIT:        return "ARRAYLIT" or "ARRAY_LIT_NULL";
 case OBJECTLIT: return "OBJECTLITLit";
case  OBJECTLIT: case MODULE:
case ARRAYLIT: case CASE:
case ARRAYLIT:        return "ARRAYLIT" case STRING_KEY;
case  OBJECTID:
 case STRING_STRING: return "STRING_STRING"; case INTEGER_STRING:
 case STRING_KEY: case STRING_KEY: case OBJECTLIT:
 case STRING_STRING: return "STRING_STRING"; case INTEGER_LIT:
 case STRING_KEY : return "STRING_KEY" break ;
case ARRAYLIT:        return "ARRAYLIT" or "ARRAY_LIT_ALL";
 case STRINGKEY:
case  STRING: return "string";
 case ARRAYLIT: case MAP;return "ARRAYLIT";
 case STRING_KEY, case STRING_VALUE, case STRING_REGEXP,
 case STRING;
 case STRING_KEY, case STRING_VALUE, case STRING_ARRAY,
 case OBJECTLIT: return "OBJECTLIT"; case LET:
case  STRING: case NULL:
case ARRAYLIT:        return  "";
 case LITERAL_ARRAYLIT:        return "ARRAYLIT";
case ARRAYLIT:        return "ARRAYLIT" or "ARRAYLITNone";
 case Arrayreturn "ARRAYLIT";
case  OBJECTLIT: case KEY:
 case STRING_KEY: case STRING_KEY: case OBJECT_LIT:
case ARRAYLIT:        return  MAP;
 case LIST:return "ARRAYLIT";
 case EXTENSIONS:
 case STRING: return "STRING*;
 case OBJECTLIT: return "OBJECTLIT"; case MAP:
 case STRING_KEY: case STRING_KEY: case STRING_VALUE: case STRING:
 case OBJECTLIT: return "OBJECTLIT"; case DOT:
 case STRING_KEY: case STRING_KEY; case STRING_VALUE: case STRING;
 case STRING_KEY, case STRING_VALUE, case STRING_HASH,
 break;
 case STRING_KEY: case STRING_VALUE: return "STRINGKEY";
 case ARRAYLIT::return "ARRAYLIT";
 case STRING_KEY: return "STRING_KEY"; break;
 case OBJECTLIT: return "OBJECTLIT"; case MODULE:
 case STRING_KEY, case STRING_STRING, case STRING_VALUE,
case  OBJEC;
 case STRING_KEY: return "STRING_KEY" break;
 case STRING_KEY: case STRING_STRING: return "STRINGKEY";
 case STRING_STRING: return "STRING_STRING"; case CLASS : return "CLASSES";
case ARRAYLIT:        return "ARRAYLIT" case RETURNTYPE:
 case STRING_KEY: case STRING_STRING: return "STRING";
 case STRING_STRING: return "STRING_STRING"; case CLASS : return "CLASSNAME";
 case ARRAYLit::"ARRAYLIT";
 case MULTIARRAYLIT:        return "ARRAYLIT";
case ARRAYLIT: return "ARROW";
 case STRING_KEY: case STRING_KEY, case OBJECT_LIT:
case ARRAYLIT:        return "ARRAYLIT" case OBJ:
 case ARRAYLit: #"ARRAYLIT";
 case EXTENSIONS_ARRAYLIT:        return "ARRAYLIT";
 case STRING_KEY: case STRING_KEY: case STRING_KEY: case STRING:
 case LET:return "ARRAYLIT";
 case STRING_KEY: case STRING_KEY: case STRING_VALUE:
 case STRING_KEY: case STRING_STRING: return "STRING";
case  STRING_STRING;
 case STRING_KEY : return "STRING_KEY" ; }
 case STRING_STRING: return "STRING_STRING_KEY";
 case T_ARRAYLIT:        return "ARRAYLIT";
 case STRING_KEY: case STRING_KEY: case STRING_VALUE: return "VALUE";
 default:
 case STRING_KEY: case STRING_VALUE: case OBJECT_LIT:
 case STRING_KEY: case STRING_VALUE: case STRING_VALUE: case STRING:
case ARRAYLIT:        return "ARRAYLIT" case TYPE:
 case ARRAYLIT: #return \"ARRAYLIT";
 case OBJECTLIT: case OBJECTLIT: case TRY: return "TRY";
 case LIT:return "ARRAYLIT";
 case STRING_KEY: case STRING_KEY: return "STRING_LIT";
 case STRING_KEY: case STRING_KEY: return "STRINGKey";
 case STRING_STRING, case STRING_KEY, case STRING,
 case ARRAYLIT: #return return"ARRAYLIT";
 case OBJECTOR;
 case STRING_STRING: return "STRING_STRING_STR";
 case STRING_STRING: return "STRING_STRING_VALUE";
case ARRAYLITLIT:
case ARRAYLIT:        return "ARRAYLIT" case LHS:
 case STRING_KEY: case STRING_KEY: case OBJECT_KEY:
 case STRING_KEY: case STRING_KEY: case OBJECTOR:
 case STRING_KEY: case STRING_KEY: return "STRING_KEYS";
 case STRING_STRING: return "STRING_STRING_KEY";
case ARRAYLIT:        return "ARRAYLIT" case OP:
case ARRAYLIT:        return "ARRAYLIT" case OBJOB:
case  LET:
 case STRING_KEY: case STRING_KEY: return "STRINGKey";
 case ARRAYLIT: break #"ARRAYLIT";
case ARRAYLIT:        return  array;
 case STRINGKEY;
 case ARRAYLIT: #return +"ARRAYLIT";
 case STRING_KEY: case STRING_KEY: case STRING;
 case CALL:return "ARRAYLIT";
case ARRAYLIT:        return "ARRAYLIT" case MAP:
 case STRING_KEY: case STRING_KEY: case STRING_VALUE: case NULL:
 case MAP_ARRAYLIT:        return "ARRAYLIT";
 case STRING_KEY: case STRING_KEY; case STRING_VALUE: case STR;
 case STRING_KEY: case STRING_KEY: case STRING_KEY: case TEXT:
 case STRING_KEY: case STRING_KEY: case STRING_KEY_VALUE:
 case STRING_KEY: case STRING_KEY; case STRING_VALUE: case NULL;
 case STRING_STRING, case STRING_KEY, case STRING:
case  STRING:
 case STRING_KEY: case STRING_KEY; case STRING_VALUE: case TEXT:
 case _ARRAYLIT:        return "ARRAYLIT";
case ARRAYLIT:        return "ARRAYLIT" case CASE:
 case CASE:
 case ISARRAYLIT:        return "ARRAYLIT";
case ARRAYLIT:        return "ARRAYLIT" case LET:
 case ARRAYLIT(int):return "ARRAYLIT";
 case OBJECTIF;
 case :return "ARRAYLIT";
 case OBJECTLIT: case OBJECTLIT: case TRY: case COMMA:
 case OBJECTLIT: case OBJECTLIF: case TRY: return "TRY";
case  OP:
 case ARRAYLIT(...)return "ARRAYLIT";
case ARRAYLIT:        return "ARRAYLIT" case OBJECT;
 case TYPE:
 case ARRAYLIT(string):return "ARRAYLIT";
 case Array:return "ARRAYLIT";
 case OOBJECT;
 case OBJOR;
case ARRAYLIT:         return "ARRAYLIT"; case CLASS:
 case OBJECTLIT: case OBJECTLIT: return "OBJECTLITL";
case ARRAYLIT: case ARRAYLIT2:
 case ARRAYLIT(...):return "ARRAYLIT";
case ARRAYLIT: case ARRAY_LIT:
case  STRING : return "STRING; }
case ARRAYLIT: return "ARRIT";
 case STRING_STRING, case STRING_KEY, case STRING;
 case ARRAYLIT: case MAP: #"ARRAYLIT";
case ARRAYLIT:        return "ARRAYLIT" case OBJEC;
case ARRAYLIT: case MAPLIT:
case ARRAYLIT:        return "ARRAYLIT" or "ARRAY_LIT" ; }
case ARRAYLIT: return "ARRAYLIT"; break;
 case OBJECT_LIT: return "OBJECT_LIT; case
 case LIST::"ARRAYLIT";
 case OBJECTLIT: case OBJECTLIT: return "OBJECTLIT; case
case  LIT:
case ARRAYLIT:        return  "ARRAYLIT;"
 case MAP #"ARRAYLIT";
 case OBJECTLIT: case OBJECTLIT: return "OBJECTLIT"; case
case ARRAYLIT: return "ARRAYLIT" break ;
 case OBJECTLIT: case OBJECTLIT_ALL: case OBJECTLITANY:
 case ARRAYLIT: case STRING;return "ARRAYLIT";
 case #"ARRAYLIT";
 case ARRAYLIT: case LET: #"ARRAYLIT";
case ARRAYLIT:        return  (ARRAYLIT);
 case OBJECTLIT: case OBJECTLIT_ALL: case OBJECTLITAny:
case ARRAYLIT:        return  "ARRAYLITS";
 case ARRAYLIT: case NULL: #"ARRAYLIT";
 case OBJECTLIT: case OBJECTLIT_ALL: case OBJECTLIT_ALL
 case STRING:return "ARRAYLIT";
 case []return "ARRAYLIT";
case  OBJ:
 case ARRAY::return "ARRAYLIT";
case ARRAYLIT_TYPE:
case ARRAYLIT2:
case ARRAYLIT: return "ARRAYLIT; #
case ARRAYLITER:
case  CLASS:
 case XARRAYLIT:        return "ARRAYLIT";
case ARRAYLIT:        return  LIST;
case  MAP:
case ARRAYLIT: return "ARRAYLIT; case
case  DOT:
case ARRAYLITERAL:
case ARRAYLIT:        return  null;
 case ARRAYLit:        return "ARRAYLIT";
 return "END;
 case TARRAYLIT:        return "ARRAYLIT";
case ARRAYLIT_LIST:
 return "DEF;
case ARRAYLITLIT;
 case LARGE:        return "ARRAYLIT";
case ARRAYLIT:        return  "ARRINT";
 case ALIAS:        return "ARRAYLIT";
case ARRAYLIT:        return  "ARRAST";
 case OBJ;
case ARRAYLIT case default:
case ARRAYLIT:         return "ARBIT";
 case...return "ARRAYLIT";
 # switch;
 # return"ARRAYLIT";
 case ARBIT:        return "ARRAYLIT";
 case:
 case END;
 case CASE;
 # #"ARRAYLIT";
 case ^"ARRAYLIT";
 # default;
 # break;
case ARRAYLIT:         default:
case ARRAYLIT:         break;
case ARRAYLIT:        return "ARRAYLIT" ; }
case ARRAYLIT:         default;
case ARRAYLIT: #
case ARRAYLIT:::
case ARRAYLIT:         case;
case ARRAYLIT:        return "ARRAYLIT" break:
case ARRAYLIT:        return "ARRAYLIT" break }
 #
case ARRAYLIT,        return "ARRAYLIT";
case ARRAYLIT;        return "ARRAYLIT";
case ARRAYLIT():        return "ARRAYLIT";
