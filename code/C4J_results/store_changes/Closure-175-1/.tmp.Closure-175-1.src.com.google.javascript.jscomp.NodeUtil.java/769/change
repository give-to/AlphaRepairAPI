return checkForStateChangeHelper(n, true, compiler);
return checkForStateChangeHelper(n);
 return mayEffectMutableState(compiler);
 return mayEffectMutableState(n, compiler);
 return mayEffectMutableState(n);
return checkForStateChangeHelper(n, null, true, compiler);
 return mayEffectMutableState(true, compiler);
 return mayEffect(n, compiler);
 return mayEffect(n);
 return mayEffect(n, true, compiler);
 return mayEffectState(n, compiler);
 return mayEffectMutableState(n, true, compiler);
 return mayEffectState(compiler);
 return mayEffectState(n);
return checkForStateChangeHelper(n, false, compiler);
 return mayEffectState(n, true, compiler);
 return mayEffectMutableState(n;
 return mayEffect(compiler);
 return mayEffectMutableState;
return checkForStateChangeHelper(n, compiler);
return checkForStateChangeHelper(n, true, compiler, null);
 return mayEffectMutable(n,compiler);
 return mayEffectMutableState(n, null, true, compiler);
 return mayEffectMutableStateHelper(n, true, compiler);
return checkForStateChangeHelper(n, false, compiler, null);
 return mayEffectMutableState(n, false, compiler);
 return mayEffectState(true, compiler);
 return n, true, compiler);
 return mayEffect(true, compiler);
 return mayEffectMutableState(n, compiler;
 return mayEffectMutableState(n, _compiler);
 return mayEffectMutableState(n, null);
 return compiler.checkForStateChangeHelper(n, true, compiler);
return checkForStateChangeHelper(n,! compiler);
 return mayEffectMutableState(n, compiler); }
 return mayEffectMutableState(n).checkForStateChangeHelper(n, true, compiler);
 return mayEffectMutableState(n, null;
return checkForStateChangeHelper(n, true, compiler, mayEffectMutableState);
return checkForStateChangeHelper(n, false, compiler); }
 return mayEffectMutableState(n, null, compiler); }
return checkForStateChangeHelper(n, null, n, true, compiler);
 return mayEffectMutableState(n, null, compiler, false);
 return mayEffectMutableStateHelper(n, compiler);
 return mayEffectMutable(n, compiler;
 return n!= null;
 return mayEffectMutableStateHelper(true, compiler);
 return mayEffectMutableState(n, null, compiler);
 return true;
 return (n, true, compiler);
 return (true, compiler);
 return mayEffectMutableState(n, false, compiler); }
return  mayEffectMutableState();
 return mayEffectMutable(n, true, compiler);
 return mayEffectMutableState(n,);
return checkForStateChangeHelper(n, false, compiler, immutableState);
return checkForStateChangeHelper(n, true, compiler); }
return checkForStateChangeHelper(n compiler);
 return mayEffectMutable(compiler);
 return mayEffectMutable(n);
 return mayEffectMutableState(n, false, compiler, null);
 return mayEffectMutable(true, compiler);
 return mayEffectMutableState(n, null, compiler); } return false ;
 return mayEffectMutableStatecheckForStateChangeHelper(n, true, compiler);
return  mayEffectMutable ;
 return mayEffectMutableState(n, null);
 return mayEffectMutableState(n, null, compiler, true);
return checkForStateChangeHelper(n, true, compiler
 return mayEffectMutableState(n);
 return mayEffectMutableState(n, null
 return false, compiler);
 return mayEffectMutableState(n, false, compiler); }
return checkForStateChangeHelper(n, false, compiler, n, null);
 return mayEffectMutableState(n);checkForStateChangeHelper(n, true, compiler);
 return mayEffectMutableState(n, null); }
 return mayEffectMutableState(n, compiler);
 return mayEffectMutableState(n, null); } return false ;
 return mayEffectMutable(n, null;
 return mayEffectMutableState(n, null, false, compiler);
 return mayEffectMutableState(n,!null);
 return mayEffectMutableState();
return checkForStateChangeHelper(n, null, null, true, compiler);
 return (n, compiler);
 return mayEffectMutableState(n, null, compiler, -1);
return checkForStateChangeHelper(n, true, compiler, immutableState);
return checkForStateChangeHelper(n, false, compiler
 return mayEffectMutable(n, null);
 return mayEffectMutableState(n, false
 return mayEffectMutableState(n, false, compiler); } return false ;
 return mayEffectMutableState(n, true, compiler); }
 return mayEffectMutableState(n, compiler); }
return checkForStateChangeHelper(n, false, compiler); } return false ;
return checkForStateChangeHelper(n, null, null, n, true, compiler);
 return mayEffectMutableState(checkForStateChangeHelper(n, true, compiler);
 return mayEffectMutableState(n, null, compiler); } return true ;
 return mayEffectMutableState(n); }
 return mayEffectMutableState.checkForStateChangeHelper(n, true, compiler);
 return mayEffectMutableState(n, false;
return checkForStateChangeHelper(n, true, compiler, n, null);
 return mayEffectMutableState(n, false, compiler, -1);
 return mayEffectMutableState ( )
 return mayEffectMutableState(n,!true, compiler);
 return mayEffectMutableState(n, null); }
 return mayEffectMutableState(n, true, compiler); }
 return mayEffectMutable ( n )
 return mayEffectMutableState(n) {
return checkForStateChangeHelper(n, null, false, true, compiler);
 return mayEffectMutableStateChangeHelper(n, true, compiler);
 return mayEffectMutableState(n, null, compiler); return true ; }
 return mayEffectMutableState(n, null, compiler); }
 return mayEffectMutableState(n compiler);
 return mayEffectMutableState(n, null, compiler); return true ;
 return mayEffectMutableStateImpl(n, compiler);
 return mayEffectMutableState ( n )
 return mayEffectMutableState(n, -true, compiler);
 return mayEffectMutableState(n, false, compiler); } return true ;
return ! n ;
 return mayEffectMutableState().checkForStateChangeHelper(n, true, compiler);
 return mayEffectMutableState() {
return checkForStateChangeHelper(n, false, compiler, mutableState);
 return mayEffectMutableState(n, false);
 return mayEffectMutableState(n, null, compiler); return false ;
 return mayEffectMutableState(n, false, compiler);
 return mayEffectMutableState(n, subcompiler);
return checkForStateChangeHelper(n n, true, compiler);
return checkForStateChangeHelper(n,  false, compiler, mayEffectMutableState);
 return mayEffectMutableState ( n
 return mayEffectMutable(n, false;
 return mayEffectutableState(n, true, compiler);
 return mayEffectMutableState(n, *compiler);
 return mayEffectMutable(n;
 return true);
 return willEffectMutableState(n, false, compiler);
 return mayEffectMutableStateImpl(true, compiler);
return checkForStateChangeHelper(n, compiler); }
 return mayEffectutableState(n);
 return mayEffectMutableState(n, $true, compiler);
 return mayEffectMutableState(n) &&checkForStateChangeHelper(n, true, compiler);
return checkForStateChangeHelper(n, false, null, compiler);
 return mayEffectMutableState(n, false, compiler); } static boolean mayHaveHelper {
return checkForStateChangeHelper(n, true, compiler) || compiler. mayEffectMutableState ;
 return mayEffectMutable(n), compiler;
 return mayEffectMutableState()&&checkForStateChangeHelper(n, true, compiler);
 return mayEffectMutableState(n, $compiler);
return checkForStateChangeHelper(n, false, compiler); } return false ; }
 return mayEffectMutableState(n); compile(n, true, compiler);
 return checkForStateChange(n,true, compiler);
return checkForStateChangeHelper(n, false, compiler); } return true ;
 return mayEffectMutableState(n), compiler;
return checkForStateChangeHelper(n, true, compiler); } return false ;
 return mayEffectutableState(true, compiler);
 return false);
 return mayEffectMutableState(n, false, compiler); } static boolean mayHaveStateChangeHelper {
 return mayEffectMutableState(n, true, compiler);
 return may(n);
 return mayEffectMutableState(n, false, compiler); } else {
 return mayEffectMutableState(n)checkForStateChangeHelper(n, true, compiler);
 return (true);
 return mayEffectMutableState(); }
 return mayEffectMutableState(n, false); }
return checkForStateChangeHelper(n, true, compiler, mutableState);
 return mayEffectutableState(compiler);
return checkForStateChangeHelper(n,);
 return mayEffectMutableState(n, true, compiler); } static boolean mayHaveHelper {
 return mayEffectMutable (n).checkForStateChangeHelper(n, true, compiler);
 return mayEffectMutableState(null,n, true, compiler);
 return mayEffectMutable(n, false, compiler);
 return mayEffectMutableState(n, false, compiler); } static boolean mayEffectStateChange() {
 return mayEffectMutableState(n, false, compiler); } static boolean mayEffectStateChangeHelper() {
return checkForStateChangeHelper(n, false, compiler, -1);
return checkForStateChangeHelper(n, null, false, compiler, null);
 return mayEffectMutableStateImpl.checkForStateChangeHelper(n, true, compiler);
 return mayEffectMutableState()n;
 return mayEffectutableState(n, compiler);
 return mayEffectMutableState(n, falsetrue, compiler);
 return mayEffectMutableState(n, false, compiler); } static boolean mayHaveChanges {
 return mayEffectMutableState()||checkForStateChangeHelper(n, true, compiler);
 return mayEffectMutableState(n, false, compiler); } static boolean mayHaveSideEffects {
 return mayEffectMutableState(n, false, compiler); } static boolean mayChange() {
return checkForStateChangeHelper(n, true, compiler) && mayEffectMutableState(n);
 return mayEffectMutableState(n, true, compiler); } static boolean mayEffectStateChange() {
 return mayEffectMutableState(n null, compiler);
return checkForStateChangeHelper(n, true, compiler) && compiler. mayEffectMutableState ;
 return mayEffectMutableState(n, false, compiler); } static boolean mayHaveStateChangeHelper() {
 return mayEffectMutableState(n, true, compiler); } static boolean mayHaveStateChangeHelper {
 return mayEffectMutableState(n, true, compiler); } static boolean mayEffectStateChangeHelper() {
 return mayEffectMutableState(n, false, compiler); } static boolean mayHaveSideEffects(Node n) {
 return mayEffectMutableState(n, true, compiler); } else {
 return mayEffectMutableState(), compiler;
return checkForStateChangeHelper(n, false, compiler) || false;
return checkForStateChangeHelper(n, false, null, compiler, null);
return checkForStateChangeHelper(n, false, compiler); return true ; }
return checkForStateChangeHelper(n, false
return checkForStateChangeHelper(n, true, compiler); return mayEffectMutableState ;
 return mayEffectMutableState(n, false, compiler, null); }
 return mayEffectMutableState(n) ||checkForStateChangeHelper(n, true, compiler);
return checkForStateChangeHelper(n, true, compiler) && mayEffectMutableState(n, null
 return mayEffectMutableState(n, false, compiler); } static boolean mayHaveSideEffects(n) {
return checkForStateChangeHelper(n, false, Compiler);
return checkForStateChangeHelper(n, null); }
return checkForStateChangeHelper(n, true, compiler); } return false ; }
 return mayEffectMutableState(n, false, compiler); } static boolean mayHaveSideEffects() {
 return mayEffectMutableState(n, null, compiler); } else {
 return mayEffectMutableState(n, false);
 return mayEffectMutableState(n); returncheckForStateChangeHelper(n, true, compiler);
 return mayEffectMutable(n, null, compiler);
return checkForStateChangeHelper(n,  false, compiler); return mayEffectMutable ;
 return mayEffectMutableState(n, true, compiler); } static boolean mayChange() {
 return mayEffectMutableState(n),checkForStateChangeHelper(n, true, compiler);
 return mayEffectMutableState(n, null); } static boolean mayChange() {
 return mayEffectMutableState(n, false, compiler); } else
return checkForStateChangeHelper(n, false, compiler, null); }
 return mayEffectMutableState(n, null); } static boolean mayHaveHelper {
return checkForStateChangeHelper(n, true, compiler, mayEffectMutable);
 return willEffectMutableState(n, compiler);
return checkForStateChangeHelper(n, true, compiler) || mayEffectMutableState(n, null
 return mayEffectMutableState(n, false, compiler); } static boolean mayHaveStateChange {
 return mayEffectMutableState(n, true;
 return mayEffectMutableState(compiler,n, true, compiler);
 return mayEffectMutableStateImpl(compiler);
 return mayEffectMutableState_checkForStateChangeHelper(n, true, compiler);
 return mayEffectMutableState(n, false, compiler) ; static boolean mayHaveSideEffects {
return checkForStateChangeHelper(n, true, compiler) { return mayEffectMutableState(n);
 return mayEffectMutableHelper(n, null, true, compiler);
 return mayEffectMutableState(n, true, compiler); } static boolean mayHaveSideEffects(Node n) {
 return mayEffectMutableState(n, true, compiler); } static boolean mayHaveSideEffects {
return checkForStateChangeHelper(n, true, compiler) || mayEffectMutableState(n);
return checkForStateChangeHelper(n, true, compiler, null, null);
 return mayEffectMutableState(n, true, compiler); } static boolean mayHaveStateChangeHelper() {
 return mayEffectMutable(n, false);
 return mayEffectMutableState(n, true, compiler); } static boolean mayHaveSideEffects(n) {
return checkForStateChangeHelper(n, true, compiler) || false;
 return mayEffectMutableState(n, false, compiler); } static boolean result() {
return checkForStateChangeHelper(n, true, compiler); return mayEffectMutable ;
 return mayEffectMutableState(n, false, compiler); } static boolean mayEffectStateChange(n) {
 return mayEffectMutableState(n, false, compiler); } static boolean mayEffectStateChangeHelper(n) {
return checkForStateChangeHelper(n, false, compiler, mayEffectMutable);
 return mayEffectMutableState(n, false, compiler); } static boolean mayEffectStateChange {
 return mayEffectMutableState(n, true, compiler); } else
 return mayEffectMutableStateHelperImpl(n, true, compiler);
 return mayEffectMutableStateImpl(n, true, compiler);
 return mayEffectMutableState(n, false, compiler); static boolean mayHaveHelper {
return checkForStateChangeHelper(n, true, compiler) || mayEffectMutableState ;
return checkForStateChangeHelper(n, true, compiler) || mayEffectMutableState();
 return mayEffectMutableState||checkForStateChangeHelper(n, true, compiler);
 return mayEffectMutableState(n, true, compiler); } static boolean mayEffectStateChangeHelper(Node n) {
return checkForStateChangeHelper(n, false, compiler); } return true ; }
 return mayEffectMutableStateInSubexpression(n, true, compiler);
return checkForStateChangeHelper(n, - 1, true, compiler);
 return mustEffectMutableState(n, null, true, compiler);
return checkForStateChangeHelper(n, true, compiler); return mayEffectMutableState(n);
 return mayEffectMutableState(n, true, compiler); } static boolean mayEffectStateChangeHelper(n) {
 return mayEffectMutableState(n, null); } static boolean mayHaveChanges {
 return mayEffectMutableState(null); compile(n, true, compiler);
 return mayEffectMutableState(n, true, compiler); } static boolean mayEffectStateChange(n) {
 return mayEffectMutableState(n, false); }
return checkForStateChangeHelper(n, null, compiler, false);
 return mayEffectMutableState(n.checkForStateChangeHelper(n, true, compiler);
return checkForStateChangeHelper(n, true, compiler) && mayEffectMutableState(n, false
return checkForStateChangeHelper(n, null, false, compiler);
 return mayEffectRegularState(n);
return checkForStateChangeHelper(n, false, compiler, null, n);
return !! n ;
 return mayEffectMutableState(n, compiler) {
return checkForStateChangeHelper(n, true, compiler, mayEffectMutableState(n)) ;
 if (n!= null) {
return checkForStateChangeHelper(n, true,  compiler, mayEffectMutableState, null);
 return mayEffectMutableState(n, false, compiler); static boolean mayHaveChanges {
 return mayEffectMutableState(n, true, compiler); } static boolean result() {
 return mayEffectMutableState;
 return!null;
return checkForStateChangeHelper(n, n, true, compiler);
 return mayEffectMutableState(n, false, compiler); } } else {
 return mayEffectMutableState(n, false, compiler); } static boolean mayHaveStateChangeHelper(n) {
 return may(n, compiler);
return checkForStateChangeHelper(n, true, compiler); return mayEffectMutableState ( n )
 return mayEffectMutableState n;
 return mayEffectMutableState(n); optimize(n, true, compiler);
return checkForStateChangeHelper(n, false, compilerImpl);
return checkForStateChangeHelper(n, false, compiler, n);
 return mayEffectMutableState(n, false, compiler); } else { return mayEffectMutableState(n, null); }
 return mayEffectMachineState(n);
 return mayEffectMutableStateInner(n, true, compiler);
return checkForStateChangeHelper(n,!null);
 return mayEffectNewState(n, compiler);
return checkForStateChangeHelper(n, true, compiler, false);
 return mayEffectMutableState(n, null, compiler); } else
 return mustEffectMutableStateHelper(n, true, compiler);
 return mayEffectNewState(n);
return checkForStateChangeHelper(n, false);
return checkForStateChangeHelper(n, true, compiler, null, n);
return checkForStateChangeHelper(n, null);
 return mayEffectMutableState(n, true, compiler); } static boolean mayHaveSideEffects(Node n compiler) {
 return mayEffectNewState(n, true, compiler);
 return mayEffectMutableState(n, true);
 return mayEffectMutableState(n, compiler); } else
 return mayEffectMutableState(n, false, compiler); } else { return mayEffectMutableState(n, compiler); }
 return mustEffectMutableState(n, true, compiler);
 return mayEffectMutableState(n, null); } static boolean mayHaveChanged {
 return checkForStateChangeMutableState(n, true, compiler);
 return willEffectMutableState(n, _compiler);
 return mustEffectMutableState(n, false, compiler);
return checkForStateChangeHelper(n, true, compiler, mayEffectMutableState());
 boolean mayEffectMutableState();
 return mayEffectImmutableState(n);
 return mayEffectMutableState(n, false, compiler); } else { static boolean mayEffectStateChangeHelper(n) {
 return mayEffectMutableState(mutable(n, true, compiler);
 return mayEffectMutableState(n, false, compiler); } else { return mayEffectMutableState(n, null);
 return mayEffectRegularState(n, compiler);
 return mayEffectMutableState(n, false, compiler); } else { static boolean mayEffectStateChange(n) {
return checkForStateChangeHelper(n, true, compiler) ||!! n ;
 return mayEffectMutableState(n, true, compiler); } else { return mayEffectMutableState(n, null); }
 return mayEffectMutableState(n).effect(n, true, compiler);
 return mayEffectMutableState(n, true, compiler); } static boolean mayHaveSideEffects(n, compiler) {
 return mayEffectMutableState(null).effect(n, true, compiler);
 return mayEffectMutableState(n, false, compiler); } else { static boolean mayEffectMutableState(n) {
 return mayEffectMachineState(n, compiler);
return checkForStateChangeHelper(n, mayEffectMutable, compiler);
return checkForStateChangeHelper(n, true, compiler); } return true ;
 return mayEffectMutableState(n, false, compiler); } static boolean result {
return checkForStateChangeHelper(n, immutableState, true, compiler);
 return mayEffectEmptyState(n, true, compiler);
return checkForStateChangeHelper(n, false, compiler2);
return checkForStateChangeHelper(n, true, compiler) && compiler. mayEffect ( n )
 return mayEffectMutableState(n, true);
 return checkForMutableHelper(n,true, compiler);
 return mayEffectMutableState(n, false, compiler); } else { return mayEffectStateChangeHelper(n, compiler); }
 return mayEffectNewState(n;
 return mayEffectMutableState(n, false, true, compiler);
return checkForStateChangeHelper(n, true, compiler, -1);
return checkForStateChangeHelper(n,!null, compiler);
 return mayEffectMutableState(n, null); } else
 return mayEffectMutableState(n, false, compiler, null); } else
 return mayEffectNewState(compiler);
 return n == null;
 return mayEffectutableState(n;
 return willEffectMutableState(n);
 return mayEffectMutableState(n, false, compiler); static boolean mayHaveStateChange
 return mayEffectMutableStateInternal(true, compiler);
 return mayEffectMutableState(n, false, compiler); } else { return mayEffectMutableState(n, false); }
return checkForStateChangeHelper(n, false, compiler, immutableStates);
 return mayEffectMutableStateInnerNode(n, true, compiler);
return checkForStateChangeHelper(n, true, compiler) ||! compiler ;
 return mayEffectMutableStateIfNeeded(n, true, compiler);
 return willEffectMutableState(n, false, compiler); } else {
 return mayEffectMutableStateWithSideEffects(n, true, compiler);
return checkForStateChangeHelper(n, null, compiler); }
 return checkForStateMutableState(n, true, compiler);
return checkForStateChangeHelper(n, true, compiler, null); }
 return mayEffectMutableState(n, true, compiler, null); } else
return checkForStateChangeHelper(n, true,  compiler); return mayEffectMutableState ( )
return checkForStateChangeHelper(n, null, false, n, true, compiler);
 return mayEffectMachineState(compiler);
return checkForStateChangeHelper(n, false, compiler); return mayEffectMutable
 return mayEffectsMutableState(n,compiler);
return checkForStateChangeHelper(n,  false, compiler) || mayEffectMutable ;
return checkForStateChangeHelper(n, true, compilerImpl);
return checkForStateChangeHelper(n, true,  compiler, mayEffectMutableState, false);
 return mayEffectMutation(n, true, compiler);
 return mayEffectMutableState(n, false, compiler); } else { return mayEffectMutableState(n, null); } }
 if (n.isMutableState()) {
 return mayEffectMutableState(n, false, compiler); } else { return mayEffectMutableState(n, null); } else
 return mayEffectNewState(true, compiler);
 return (false);
return checkForStateChangeHelper(n, true, compiler) && compiler. mayEffectMutableState();
 return mustEffectMutableState(n,compiler);
 return mayEffectMutableState()(compiler);
return checkForStateChangeHelper(n, true, compiler) || mayEffectMutable ;
 return willEffectMutableState(n;
 return mayEffectMutableState(n, false, compiler); } else { return mayEffectMutableState(n) ; }
return checkForStateChangeHelper(n, true, compiler) || mayEffectMutable ( n);
 return mayEffectMutable (n);
return checkForStateChangeHelper(n, true, null, compiler, null);
 if (n.isMutable() ) {
 return mayEffectImmutable;
 return mayEffectEmptyState(true, compiler);
return checkForStateChangeHelper(n, true, compiler) || compiler. mayEffect ( n )
 return mayEffectMutableState(null);
return checkForStateChangeHelper(n, null, 0, true, compiler);
return checkForStateChangeHelper() ;
return checkForStateChangeHelper(n,  false, compiler); return mayEffectMutableState
 return checkForMutableState(n,true, compiler);
return  true ; }
 return mayEffectMutableState(n, false, compiler); } else { return mayEffectStateChangeHelper(n, compiler);
 return mayEffectEmptyState(compiler);
 return checkForStateChangeHelper(n null, true, compiler);
 return checkForNodeChangeHelper(n,true, compiler);
return checkForStateChangeHelper(n, false, compiler, compiler);
 if (n instanceof Node) {
 return mayEffectImmutable(true, compiler);
 return mayEffectutableState;
 return mayEffectUniversalState(n, true, compiler);
 return mayEffectMutableState(n, true, compiler); } else { return mayEffectMutableState(n, null); } else
 return mayEffectMutableState(*compiler);
 return willEffectMutableState(true, compiler);
 return mayEffectMutableState(n, true, compiler); } else { return mayEffectMutableState(n, null); } }
 return mayEffectMutableStateInternal(n, true, compiler);
return checkForStateChangeHelper(n, null, true, false, compiler);
return checkForStateChangeHelper(n, null, true, true, compiler);
 return mustEffectMutableState(true, compiler);
return  mayEffectMutable();
 return checkForStateMutableHelper(n, true, compiler);
 return check(n, true, compiler);
 return mustEffectMutableState(n);
 return willEffectMutableState(n, false, compiler); } else
 return mayEffect(n).checkForStateChangeHelper(n, true, compiler);
 return anyEffectsMutableState(n,compiler);
return checkForStateChangeHelper(n, - 1, compiler);
 return mayEffectMutableState(n, true, compiler); } static boolean mayHaveSideEffects(Node n) { *
return checkForStateChangeHelper(n, true, compiler) ||!!! n ;
return checkForStateChangeHelper(n, true, compiler) && mayEffectMutable ( n);
 return mayEffectMutableState(n.n, true, compiler);
 return mayEffectMutable(n); }
return checkForStateChangeHelper(n, true, compiler, mayHaveSideEffects);
return checkForStateChangeHelper(n, true, compiler) && n!= n ;
 return state(n, compiler);
return checkForStateChangeHelper(n, true, compiler) && n. immutable ;
return checkForStateChangeHelper ( )
 return willEffectMutableState(n, true, compiler);
 return mayEffectMutableState(thisNode,n, true, compiler);
 return mayEffectMutableInnerState(n, true, compiler);
 return false;
return checkForStateChangeHelper(n, null, compiler);
 return mayEffectMutableStateInSubtree(n, true, compiler);
return checkForStateChangeHelper(n, true
 return mayEffectMutable &&
 return mayEffectMutableState(n, false); } else
return checkForStateChangeHelper(n, null, 0, n, true, compiler);
 return immutable(true, compiler);
 return anyEffectMutableState(n, true, compiler);
 return n == n;
 return true, compiler);
 return compile(compiler);
return checkForStateChangeHelper(n, true, compiler) ||!! compiler ;
 return mayEffectMutable(n) {
 return mayEffectMutableState(n, null)
 return willEffectMutableState(compiler);
 return mayEffectMutableState(n, false, compiler); } else { *
return checkForStateChangeHelper(n, true, false, compiler);
return checkForStateChangeHelper(n, true, compiler) && compiler. mayEffectState ;
 return mayEffectMutable;
 return mayEffectsMutableState(n);
return checkForStateChangeHelper(n, true, compiler) ; return true ;
return checkForStateChangeHelper(n, null, false, compiler, compiler);
 return willEffectMutableState;
 return anyEffectsMutableState(n, true, compiler);
return checkForStateChangeHelper(n, true, compiler) || compiler. mayEffectState ;
return checkForStateChangeHelper(n, true, compiler) &&! compiler ;
return checkForStateChangeHelper(n, true, compiler) && n!= null;
 return n!= n;
return checkForStateChangeHelper(n, true, compiler, n);
 if (n!= null)
return checkForStateChangeHelper(n, false, null, n, true, compiler);
return checkForStateChangeHelper(n, true, compiler) && n. immutableState ;
 return mayEffectMutable();
 return mayEffectMutableStateWithChildren(n, true, compiler);
 return (!null);
 return mayEffectMutableAndcheckForStateChangeHelper(n, true, compiler);
return  mayEffect ( n )
 return mayEffectNode(n, true, compiler);
 return compiler.state.checkForStateChangeHelper(n, true, compiler);
 return examine(n, true, compiler);
return checkForStateChangeHelper(n, mutable, true, compiler);
 boolean mayEffect(n);
return checkForStateChangeHelper(n,!null, true, compiler);
return checkForStateChangeHelper(n, null, n, n, true, compiler);
 return mayEffectMutable_checkForStateChangeHelper(n, true, compiler);
 return mayEffectEmptyState;
 return mayEffectMutable.checkForStateChangeHelper(n, true, compiler);
 return true(n);
return checkForStateChangeHelper(n, true, compiler) ; return false ;
return checkForStateChangeHelper ( n )
 return mustEffectState(n, true, compiler);
 return correctlyEffectMutableState(n, compiler);
 return mayEffectNode(true, compiler);
 return mayEffectMode(n, true, compiler);
 return mayEffectStates(n, compiler);
 return mayEffectString(n, true, compiler);
return checkForStateChangeHelper(n, null, false, null, compiler);
return checkForStateChangeHelper(n, true, compiler) ||! n ;
return checkForStateChangeHelper(n, null, false, false, compiler);
 return state(n, true, compiler);
 return mustEffectMutableState(compiler);
return checkForStateChangeHelper(n, true, compiler, mayHaveMutableState);
return checkForStateChangeHelper(n, true, compiler, null, false);
 return mayEffectStates(n);
 return effect(n, compiler);
 return willEffectState(n);
 return mayEffectMode(n, compiler);
 return mayEffectsMutableState(compiler);
return checkForStateChangeHelper(n, true, null, compiler);
 return! compiler.checkForStateChangeHelper(n, true, compiler);
 return mayEffectMode(n);
return checkForStateChangeHelper(n, true);
 return checkForStateChangeHelper(true, compiler);
return checkForStateChangeHelper(n, true, compiler) || mayEffectMutableState
 return modify(n, compiler);
 return mustEffect(true, compiler);
 return state(true, compiler);
return checkForStateChangeHelper(n, true, compiler, willEffectMutableState);
 return mustEffect(n, true, compiler);
 return!! compiler.checkForStateChangeHelper(n, true, compiler);
 return immutableState(true, compiler);
 return mayEffectStates(true, compiler);
 return mustEffect(n, compiler);
 return n!= null &&checkForStateChangeHelper(n, true, compiler);
return checkForStateChangeHelper(n, true, compiler)!= null;
 return mustEffectState(n);
 return!null.checkForStateChangeHelper(n, true, compiler);
return checkForStateChangeHelper(n, false, null, true, compiler);
 return mustEffectState(n, compiler);
 return mirror(n, true, compiler);
 return mayEffects(n);
 return anyEffectMutableState(true, compiler);
return checkForStateChangeHelper(n, true, compiler, true);
 return ensureIsMutableState(n, true, compiler);
return checkForStateChangeHelper(n, true, compiler), compiler);
return checkForStateChangeHelper ( n
 return (compiler);
 return state(n);
 return check(n);
 return compiler!= null &&checkForStateChangeHelper(n, true, compiler);
 return mustEffect(n);
return  mayEffectMutable
 return mayEffects(n, compiler);
 return transform(n, true, compiler);
return ! compiler ;
return checkForStateChangeHelper(n, true, compiler, mayEffectImmutable);
 return mayEffectNode(compiler);
 return mayEffects(n, true, compiler);
 return may(n, true, compiler);
 return mayEffectStates(compiler);
 compile(compiler);
return checkForStateChangeHelper(null, null, n, true, compiler);
return checkForStateChangeHelper(n, true, compiler) == true;
 return n === null;
 return mustEffect(compiler);
 return (null, compiler);
return checkForStateChangeHelper(n, true, compiler, mustEffectMutableState);
return checkForStateChangeHelper((n, false, compiler));
 return!! n.state;
return checkForStateChangeHelper(n, - 1, n, true, compiler);
 return ensureForMutableState(n, true, compiler);
 return anyEffectMutableState(compiler);
return checkForStateChangeHelper(compiler, n, true, compiler);
 return mayEffectInternal(true, compiler);
 return mustEffectState(true, compiler);
 return!nil;
 return mayEffects(compiler);
 return (n);
return checkForStateChangeHelper(n,!!! false, compiler);
 return $(n);
return checkForStateChangeHelper(n,! false);
 return apply(n, true, compiler);
 return! n.checkForStateChangeHelper(n, true, compiler);
return checkForStateChangeHelper(n, true, compiler) == false;
 return mayEffectEmptyNode;
 return effect(n, true, compiler);
return checkForStateChangeHelper(n, mayEffect, false, compiler);
return checkForStateChangeHelper(n, true, compiler, immutableStates);
 return mayEffects(true, compiler);
return checkForStateChangeHelper(n, true, compiler, mayEffectMutableStates);
 return _checkForStateChangeHelper(n, true, compiler);
return checkForStateChangeHelper ( n, compiler )
 may(n, compiler);
 return willEffect(n);
 return create(compiler);
return checkForStateChangeHelper(mayEffectMutable, n, true, compiler);
 return mayEffectMutableStates;
return checkForStateChangeHelper(n,!comp);
 boolean mayEffect() {
 return mayEffectMutableState, compiler);
 return willEffectState(compiler);
return checkForStateChangeHelper(n, mayEffectImmutable, compiler);
 compiler(compiler);
 return mayEffectStates(n, true, compiler);
 return suppress(compiler);
 return mayEffectString(compiler);
 return modify(n, true, compiler);
 return!!!checkForStateChangeHelper(n, true, compiler);
 return willEffect(n, true, compiler);
 return state(compiler);
 return!null(checkForStateChangeHelper(n, true, compiler);
 return this.checkForStateChangeHelper(n, true, compiler);
return checkForStateChangeHelper(n, true), compiler
return checkForStateChangeHelper(n, true, compiler, immutableMode);
 return anyEffects(n, true, compiler);
return checkForStateChangeHelper(mutable_state, n, true, compiler);
 return willEffect(n, compiler);
return checkForStateChangeHelper(n, true); }
 return mayEffectMutationState;
 return ((n, true, compiler);
return checkForStateChangeHelper(n, true, Compiler);
 return (! n, true, compiler);
 return anyEffects(true, compiler);
 return!checkForStateChangeHelper(n, true, compiler);
 return accept(compiler);
return checkForStateChangeHelper(n, mayEffect, true, compiler);
return checkForStateChangeHelper(n, 0, compiler);
 return "(n, true, compiler);
return checkForStateChangeHelper(null, n, true, compiler);
return checkForStateChangeHelper(n, immutableState, n, true, compiler);
return checkForStateChangeHelper(node, null, n, true, compiler);
return checkForStateChangeHelper(n, true, compiler, mayEffectEmptyState);
return checkForStateChangeHelper(n, false, n, true, compiler);
return checkForStateChangeHelper(n, true, compiler, mayEffectMutation);
 return transform(true, compiler);
 return mayEffectInternal(n, true, compiler);
 return make(true, compiler);
 assert(true, compiler);
 return equivalent(true, compiler);
 return super.checkForStateChangeHelper(n, true, compiler);
return checkForStateChangeHelper(n, true, compiler2);
 return ensureState(n, true, compiler);
 return mirrorState(n, true, compiler);
return checkForStateChangeHelper(n null);
return checkForStateChangeHelper(n, false, true, compiler);
 return immutableState(n, true, compiler);
 return immutableState(compiler);
return checkForStateChangeHelper(n,! false, compiler);
return checkForStateChangeHelper(mutable, n, true, compiler);
return checkForStateChangeHelper(N, null, n, true, compiler);
 return mayChange(compiler);
 (n, true, compiler);
 return runtime.checkForStateChangeHelper(n, true, compiler);
return checkForStateChangeHelper(n++, true, compiler);
return checkForStateChangeHelper(node, false, compiler);
 return *checkForStateChangeHelper(n, true, compiler);
return checkForStateChangeHelper(, compiler);
return checkForStateChangeHelper(n, false), compiler);
 return compile(n, true, compiler);
 comment(n, true, compiler);
return checkForStateChangeHelper(n.*, true, compiler);
return checkForStateChangeHelper(n n);
 transform(n, true, compiler);
return checkForStateChangeHelper(n, true, ctx);
 assert(compiler);
return checkForStateChangeHelper(n, true, compiler) || false
 check(n, true, compiler);
 return evaluate(n, true, compiler);
 (n, compiler);
 return n, compiler);
 compile(n, true, compiler);
 boolean mayEffect() {}
 boolean mayEffect() ;
 return true; }
return checkForStateChangeHelper(node n);
 return false; }
return checkForStateChangeHelper(n, true, compiler, void 0);
return checkForStateChangeHelper(n, true, compilation); }
return checkForStateChangeHelper(n, true, compiler)); }
 return!true, compiler);
return checkForStateChangeHelper(n, true, compile); }
 return true; } else
 return null.checkForStateChangeHelper(n, true, compiler);
return checkForStateChangeHelper(n, true, compiler) false;
 return true ; } }
return checkForStateChangeHelper(n, 0, true, compiler);
return checkForStateChangeHelper(n, true, compiler) true;
return checkForStateChangeHelper ( n ;
return checkForStateChangeHelper(mgr, n, true, compiler);
return checkForStateChangeHelper(c compiler, n, true, compiler);
return checkForStateChangeHelper(n, nil, true, compiler);
return checkForStateChangeHelper(thisNode, n, true, compiler);
 return n);
 check(true, compiler);
return checkForStateChangeHelper(n, true), compiler);
 return false; *
 return true; *
 return null, true, compiler);
return checkForStateChangeHelper(n, true,);
 return null);
return checkForStateChangeHelper(n, compile);
return  n ;
return checkForStateChangeHelper(n, true, compiler)
 * --------------------------------------------------------------------------
 * returncheckForStateChangeHelper(n, true, compiler);
return checkForStateChangeHelper(n, true), compiler;
 * return true
 * -----------------------------------------------------------------------
 *
return checkForStateChangeHelper(nil, n, true, compiler);
return checkForStateChangeHelper(nil);
 * ------------------------------------------------------------------------
return checkForStateChangeHelper(node);
return checkForStateChangeHelper(null);
 return null;
 * return boolean
 * *
return checkForStateChangeHelper(c, n, true, compiler);
return checkForStateChangeHelper(n, true, compiler, ;
 * {
return checkForStateChangeHelper(n, true, compiler) *
return checkForStateChangeHelper(node, n, true, compiler);
return checkForStateChangeHelper(n, true,  compile);
return checkForStateChangeHelper(n, true, compiler, 0);
return checkForStateChangeHelper(n, true,  compiler));
return checkForStateChangeHelper(n, true,  null);
return checkForStateChangeHelper(N, true, compiler);
return checkForStateChangeHelper(n, False, compiler);
return checkForStateChangeHelper(node, true, compiler);
return checkForStateChangeHelper(ng, true, compiler);
return checkForStateChangeHelper(n, true, false);
return checkForStateChangeHelper(n, true, compilation);
