 if (!isDirectCallNodeReplacementPossible(fnNode)) {
if (!isDirectCallNodeReplacementPossible(callNode, fnNode)) {
if (!isDirectCallNodeReplacementPossible()) {
 if (fnNode == null) {
if (!isDirectCallNodeReplacementPossible(callNode, fn)) {
if (!isDirectCallNodeReplacementPossible(fnNode) || fnNode == null) {
if (!isDirectCallNodeReplacementPossible(callNode, fnNode))
if (!isDirectCallNodeReplacementPossible(fnNode, callNode)) {
 if (!NodeUtil.isDirectCallNodeReplacementPossible(fnNode)) {
if (!isDirectCallNodeReplacementPossible(fnNode) && fnNode!= null) {
 if (!fnNode)) {
if (isFunctionObjectCall(fnNode)) {
if (fnNode == null)
 if (!(fnNode)) {
 if (fnNode == null)) {
if (!isDirectCallNodeReplacementPossible(callNode, fnNode, compiler)) {
if (!isDirectCallNodeReplacementPossible(fnNode))  { return CanInlineResult.NO; }
if (!callNode.isCall()) {
 if (fn == null) {
if  (callNode == null) {
if (callNode == null ||!callNode) {
 if (NodeUtil.isDirectCallNodeReplacementPossible(fnNode)) {
 if (callNode == null || fnNode == null) {
if (!isDirectCallNodeReplacementPossible(fnNode) || fnNode == null)
if (callNode == null ||!isFunctionObjectCall(fnNode)) {
 if (callNode == fnNode) {
 if (!) {
 if (!CanInlineResult.isDirectCallNodeReplacementPossible(fnNode)) {
 if (!isFunctionObjectCall(fnNode)) {
if (!callNode) {
if (!isDirectCallNodeReplacementPossible(fnNode) || fnNode.isThis()) {
 Node fnNode = fnNode. getFirstChild ( ) ;
if (!isDirectCallNodeReplacementPossible(callNode, fnNode, compiler) {
if (callNode == null ||!NodeUtil.isCall(fnNode)) {
if (!isDirectCallNodeReplacementPossible(fnNode))
 if (!block)) {
if (!isDirectCallNodeReplacementPossible(node)) {
if (!isDirectCallNodeReplacementPossible(call, fn)) {
if (!callNode.isCallNode()) {
if (!isDirectCallNodeReplacementPossible(fnNode) &&!isDirectCallNodeReplacement(callNode) {
if (!isDirectCallNodeReplacementPossible(callNode, fnNode) {
 if (callNode.getFirstChild == null) {
 Node fnNode = fnNode. getNext ( ) ;
 if (callNode == null ||!callNode.isThis()) {
 if (fnNode == callNode){
if (!isDirectCallNodeReplacementPossible(fnNode))  { return CanInlineResult.NO };
 if (!canInlineReferenceDirectly(fnNode)) {
if (!isDirectCallNodeReplacementPossible(fnNode))  { return CanInlineResult();
 if (callNode == null ||!callNode.isCall()) {
 return canInlineReferenceDirectly ( callNode, fnNode ) ;
if (!isDirectCallNodeReplacementPossible(fnNode))  return false;
 if (!canInlineReference(fnNode)) {
if (!fnNode) {
if (!isDirectCallNodeReplacementPossible(fnNode) ||!isDirectCallNodeReplacement(callNode) {
if (!isDirectCallNodeReplacementPossible(fnNode))  return CanInlineResult.NO;
 if (callNode == null ||!callNode.isFunction()) {
if (!callNode.isName()) {
 Node callNode = callNode. getFirstChild ( ) ;
if (!isDirectCallNodeReplacementPossible(fnNode))  { if (fnNode == null) {
if  (callNode == null)
if (!isDirectCallNodeReplacementPossible(callNode, fnNode).getNext()) {
if (callNode == null ||!isCallNode(fnNode)) {
if (!isDirectCallNodeReplacementPossible(fnNode))  { return CanInlineResult.NO;
 if (callNode.isEmpty()) {
if (!isDirectCallNodeReplacementPossible(callNode, fnNode.firstChild)) {
if (!isDirectCallNodeReplacementPossible(fnNode, callNode).getFirstChild())) {
if (!isDirectCallNodeReplacementPossible(fnNode, callNode.getFirstChild())) {
if (!isDirectCallNodeReplacementPossible(callNode, fnNode.lastChild)) {
if (!isDirectCallNodeReplacementPossible(fnNode))  { return CanInlineResult;
 if (!CanInlineReferenceDirectly(fnNode)) {
if (CallNode == null ||!isFunctionObjectCall(fnNode)) {
if  (callNode) {
if (callNode == null ||!NodeUtil.isFunctionCall(fnNode)) {
if (CallNode == null ||!NodeUtil.isCall(fnNode)) {
 if (block == null){
if (!isDirectCallNodeReplacementPossible(fnNode) ||!isFunctionObjectCall(fnNode) {
if (callNode == null ||!CallNode.isFunctionObjectCall(fnNode)) {
if (!isDirectCallNodeReplacementPossible(fnNode, callNode).getFirstChild()) {
if (!isDirectCallNodeReplacementPossible(fnNode, callNode.getFirstChild)) {
if (!isDirectCallNodeReplacementPossible(callNode, fnNode), compiler) {
 if (callNode == null ||!callNode.length()) {
if (!callNode.getFirstChild().isName())
 if (!canInlineReferenceDirectly)) {
if (CallNode == null ||!CallNode.isFunctionObjectCall(fnNode)) {
if (!callNode.isFunction()) {
if (!callNode!= null) {
 if (callNode == null ||!callNode.isName()) {
 if (NodeUtil.isFunctionCall(fnNode)) {
if (!isDirectCallNodeReplacementPossible(fnNode, callNode, fnParam)) {
if (!isDirectCallNodeReplacementPossible(fnNode, callNode, fnNode)) {
if (!isDirectCallNodeReplacementPossible(callNode, fnNode, cArg)) {
if (!callNode == null) {
if (!callNode.getFirstChild().isCall())
if (!isDirectCallNodeReplacementPossible(fnNode) &&!isFunctionObjectCall(fnNode) {
if (!isDirectCallNodeReplacementPossible(fnNode, node)) {
 if (fnNode.isEmpty()) {
if (!isDirectCallNodeReplacementPossible(fnNode) || callNode == null) {
 return CanInlineResult. YES ; } public CanInlineResult canInlineReferenceDirectly(CallNode, Node fnNode) {
 return CanInlineResult. YES ; } public CanInlineResult canInlineReferenceDirectly(Node fnNode) {
 if (!isCall(fnNode)) {
if (!isDirectCallNodeReplacementPossible(fnNode) || fnNode.isFunction()) {
if (!isDirectCallNodeReplacementPossible(callNode)) {
if (!isDirectCallNodeReplacementPossible(callNode, fnNode))) {
 return CanInlineResult. YES ; } public CanInlineResult canInlineReferenceDirectly(CallNode, Node fnNode)
if (!isDirectCallNodeReplacementPossible(fnNode.getFirstChild().getNext())) {
 return CanInlineResult. YES ; } public CanInlineResult canInlineReferenceDirectly(Node callNode, Node fnNode)
if (callNode == null ||!NodeUtil.isFunction(fnNode)) {
if (!isDirectCallNodeReplacementPossible(fnNode) || callNode == null)
if (!isDirectCallNodeReplacementPossible(fnNode) || fnNode == callNode) {
 if (canInlineReference(fnNode)) {
 if (callNode == null ||!callNode == null)
if (fnNode == null ||!fnNode) {
 if (!this.isDirectCallNodeReplacementPossible(fnNode)) {
 if (callNode == null ||!callNode.isCallNode()) {
 if (callNode == null)) {
if (!isDirectCallNodeReplacementPossible(fnNode))  { return CanInlineResult; }
 return canInlineReferenceDirectly(callNode, fnNode); }
if (!isDirectCallNodeReplacementPossible(fnNode, compiler)) {
if (!callNode.isCall(fnNode)) {
 Node fnNode = fnNode. next ( ) ;
 if (callNode!= null || fnNode == null) {
if (!isDirectCallNodeReplacementPossible(fnNode, callNode, compiler)) {
 if (fnNode == null || fnNode == null) {
 if (isFunction(fnNode)) {
if (!isDirectCallNodeReplacementPossible(callNode, fnNode, args)) {
 if (!block){
 if (callNode == null || fn) {
 return canInlineReferenceDirectly ( callNode, fnNode. getFirstChild ( ) ) ;
 if (!NodeUtil.isFunctionCall(fnNode)) {
if (!isDirectCallNodeReplacementPossible(fnNode) ||!isDirectCallNode(callNode) {
if (!isDirectCallNodeReplacementPossible(CallNode, fnNode, compiler)) {
 return CanInlineResult. YES ; } public CanInlineResult canInlineReferenceDirectly(CallNode fnNode) {
 return CanInlineResult. YES ; } public CanInlineResult canInlineReferenceDirectly(Node fnNode, Node node) {
 if (isCall(fnNode)) {
 return CanInlineResult. NO ; } public CanInlineResult canInlineReferenceDirectly(CallNode, Node fnNode)
 if (!NodeUtil.isCall(fnNode)) {
 Node node = callNode. getFirstChild ( ) ;
 if (isFunctionCall(fnNode)) {
 if (callNode.isEmpty())){
 return CanInlineResult. NO ; } public CanInlineResult canInlineReferenceDirectly(Node fnNode) {
 if (callNode.isNull()) {
if (!isDirectCallNodeReplacementPossible(fnNode.getFirstChild())) {
 if (!canInlineDirectly(fnNode)) {
 if (callNode == null || fnNode == null)
 if (!canInlineReferenceDirectly) {
if (!isDirectCallNodeReplacementPossible(fnNode) &&!isDirectCallNodeReplacing(callNode) {
if (!isDirectCallNodeReplacementPossible(callNode, fnNodes)) {
 if (NodeUtil.isFunction(fnNode)) {
 if (callNode.getLastChild == null) {
if (!isDirectCallNodeReplacementPossible(fnNode))  { return CanInlineResult.YES; }
 if (fnNode == null || fnNode == block) {
 Node callNode = callNode. getNext ( ) ;
if (!isDirectCallNodeReplacementPossible(fnNode))  return CanInlineResult;
 if (!canInlineReferenceDirectly(x)) {
if (!isDirectCallNodeReplacementPossible(CallNode, fnNode)) {
if (callNode == null ||!NodeUtil.call(fnNode)) {
 if (!canInline(fnNode)) {
if  (callNode == null || fnNode) {
if  (callNode == null ||!fn) {
if (!callNode == null)
 return canInlineReferenceDirectly ( callNode, fnNode. getFirstChild ( ) ) ; }
if (!isDirectCallNodeReplacementPossible(fnNode.getFirstChild().getNext)) {
if (callNode == null ||!isCall(fnNode)) {
 if (!isCallNode(fnNode)) {
 if (callNode!= null || fnNode == null)
if (!isDirectCallNodeReplacementPossible(fnNode) ||!canInlineReferenceDirectly(fnNode) {
if (!isDirectCallNodeReplacementPossible(fnNode.getFirstChild(), compiler)) {
 if (callNode == null ||!callNode.next()) {
 return canInlineReferenceDirectly ( callNode, fnNode. getNext ( ) ) ;
 if (fnNode == null ||!fnNode.isThis()) {
 return CanInlineResult. YES ; } public CanInlineResult canInlineReferenceDirectly(Node callNode, Node fnNode){
if (!isDirectCallNodeReplacementPossible(fnNode.getLastChild())) {
if (!isDirectCallNodeReplacementPossible(fnNode) || fnNode.isCall()) {
if (!isDirectCallNodeReplacementPossible(fnNode) ||!fnNode.isCall()) {
if (!isDirectCallNodeReplacementPossible(fnNode).getFirstChild())) {
if (!isDirectCallNodeReplacementPossible(fnNode) &&!isDirectCallNode(callNode) {
 return CanInlineResult. YES ; } public CanInlineResult canInlineReferenceDirectly(Node callNode, Node fnNode {
 if (callNode == null ||!callNode.isThis())) {
if (!isDirectCallNodeReplacementPossible(fnNode, callNode.getLastChild)) {
if  (callNode.isFunction()) {
if  (callNode.isName()) {
 if (!NodeUtilImpl.isDirectCallNodeReplacementPossible(fnNode)) {
if (!callNode.isFunctionObjectCall()) {
if (!isDirectCallNodeReplacementPossible(fnNode) ||!isFunctionObjectCall(fnNode))
if (!fnNode.isCall()) {
if (CallNode == null ||!NodeUtil.isFunction(fnNode)) {
 return canInlineReferenceDirectly ( callNode, fnNode. clone ( ) ) ;
if (!callNode.getFirstChild().isName)
if (!isDirectCallNodeReplacementPossible(fnNode) ||!isFunctionCall(fnNode) {
if (!isDirectCallNodeReplacementPossible(fnNode) ||!fnNode.isThis()) {
 if (isCallNode(fnNode)) {
 return CanInlineResult. YES ; } public CanInlineResult canInlineReferenceDirectly(CallNode, Node fnNode {
if (!isDirectCallNodeReplacementPossible(fnNode) || fnNode) {
 if (fnNode == null || null) {
 if (callNode == null ||!callNode.isCall(fnNode)) {
if (callNode == null ||!NodeUtil.isCallSite(fnNode)) {
 if (!CallNode.isFunctionObjectCall(fnNode)) {
if (!callNode.isFirstChild().isName())
if (callNode == null ||!canInlineReference(fnNode)) {
 if (callNode == null ||!callNode.isFunction())
 if (callNode == null ||!callNode.isThis(x)) {
if (!isDirectCallNodeReplacementPossible(callNode, fn) {
 return canInlineReferenceDirectly ( callNode, fnNode ) }
if  (callNode == null ||!call) {
if (!isDirectCallNodeReplacementPossible(fnNode) ||!canInlineReference(fnNode) {
if (!isDirectCallNodeReplacementPossible(fnNode))  { return CanInlineResult.YES;
if (callNode == null ||!isCallSite(fnNode)) {
 if (!NodeUtil.isFunction(fnNode)) {
 if (!canInlineReferenceDirectly.isDirectCallNodeReplacementPossible(fnNode)) {
if (!isDirectCallNodeReplacementPossible(fnNode) || fnNode.isEmpty() ) {
 return CanInlineResult. YES ; } public CanInlineResult canInlineReferenceDirectly(Node fnNode)
if (!isDirectCallNodeReplacementPossible(fnNode))  return CanInlineResult();
if (!isDirectCallNodeReplacementPossible(callNode.getFirstChild(), fnNode))
 if (callNode == null ||!callNode.isFunctionObjectCall()) {
 if (!canInlineReferenceDirectly()) {
 if (fnNode.isNull()) {
if (!callNode.isCall(fn)) {
if (!isDirectCallNodeReplacementPossible(fnNode) || fnNode.isThis())) {
 if (!canInlineResult.isDirectCallNodeReplacementPossible(fnNode)) {
if (NodeUtil.isFunctionObjectCall(callNode).apply(fnNode)) {
if (callNode == null ||!NodeUtil.is(fnNode)) {
 return canInlineReferenceDirectly ( callNode. getFirstChild ( ), fnNode ) ;
 if (NodeUtil.isName(fnNode)) {
if (!isDirectCallNodeReplacementPossible(fnNode) ||!isDirectCallNodeReplacing(callNode) {
 if (callNode.isNull())){
if (!isDirectCallNodeReplacementPossible(fnNode) ||!canInlineReferenceDirectly(block) {
if (!isDirectCallNodeReplacementPossible(fnNode, callNode) {
if (null == fnNode ||!isFunctionObjectCall(fnNode)) {
if (!isDirectCallNodeReplacementPossible(fnNode) ||!isCallNode(fnNode) {
if (callNode == null || isFunctionObjectCall(fnNode)) {
if (!callNode.isName())) {
if (!fnNode == null) {
if (!isDirectCallNodeReplacementPossible(fnNode))  { return CanInlineResult(); }
if (!isDirectCallNodeReplacementPossible(fnNode) ||!canInlineReferenceDirectly) {
 return CanInlineResult. NO ; } public CanInlineResult canInlineReferenceDirectly(CallNode, Node fnNode){
if (!isDirectCallNodeReplacementPossible(fnNode, callNode, fnNode) {
if (!isDirectCallNodeReplacementPossible(fnNode) ||!isFunctionObjectCall(callNode) {
 if (canInline(fnNode)) {
if (callNode == null ||!isFunctionCall(fnNode)) {
if (!isDirectCallNodeReplacementPossible(fnNode) && fnNode.isCallNode) {
 return CanInlineResult.NO; if(!isDirectCallNodeReplacementPossible(fnNode)) {
 return canInlineResult.NO; } public CanInlineResult canInlineReferenceDirectly(Node fnNode)
 if (callNode.isName(null)){
 if (callNode.getFirstChild!= block) {
if (!callNode.isThis())) {
 return canInlineReferenceDirectly ( callNode, fnNode. getFirstChild ( ), compiler ) ;
 return CanInlineResult.NO; } if(!isDirectCallNodeReplacementPossible(fnNode)) {
 if (callNode == null ||!callNode.isCall())
if (CallNode == null ||!isCallNode(fnNode)) {
 if (function == null){
if (callNode == null ||!NodeUtil.filter(fnNode)) {
 if (callNode == null ||!callNode.isName(fnNode)) {
if (callNode == null ||!CallNode.contains(fnNode)) {
if (!fn) {
if (!isDirectCallNodeReplacementPossible(fnNode) &&!isFunctionCall(fnNode) {
if (!isDirectCallNodeReplacementPossible(...) {
if (!isDirectCallNodeReplacementPossible(fnNode) &&!isFunctionObjectCall(callNode) {
if (!isDirectCallNodeReplacementPossible(fnNode))  { if (fnNode == null)
 return canInlineReferenceDirectly ( callNode, fnNode. getLastChild ( ) ) ;
 if (canInlineReferenceDirectly)) {
 return CanInlineResult. NO ; } public CanInlineResult canInlineReferenceDirectly(Node fnNode)
 if (NodeUtil.isCall(fnNode)) {
 return CanInlineResult.NO; } public CanInlineResult canInlineReference ( ) {
 if (callNode.isFunctionObjectCall()) {
if (!isDirectCallNodeReplacementPossible(fnNode) &&!isFunctionObjectCall(fnNode))) {
 return CanInlineResult.YES; } if(!isDirectCallNodeReplacementPossible(fnNode)) {
 if (!isFunction(fnNode)) {
 if (!CanInlineUtil.isDirectCallNodeReplacementPossible(fnNode)) {
 return canInlineReferenceDirectly ( callNode. getFirstChild ( ), fnNode ) ; }
if (!isDirectCallNodeReplacementPossible(fnNode) &&!isFunctionObjectCall(fnNode)) {
if (CallNode == null ||!NodeUtil.call(fnNode)) {
 if (fnNode.isEmpty())) {
 if (!canInlineReference(fnNode) {
 return CanInlineResult. YES ; } public CanInlineResult canInlineReferenceDirectly(Node fnNode {
if (!isDirectCallNodeReplacementPossible(fnNode) || callNode) {
if (!isDirectCallNodeReplacementPossible(fnNode) ||!isFunctionObjectCall(fnNode))) {
if (!isDirectCallNodeReplacementPossible(fnNode) ||!isCallNode(callNode) {
 return CanInlineResult. YES ; } public CanInlineResult canInlineReferenceDirectly(Node node) {
 return canInlineReferenceDirectly(callNode, fnNode).getNext(); }
 if (callNode == null ||!callNode.isFunctionCall(fnNode)) {
 return canInlineReferenceDirectly(callNode, fnNode); } else
if (callNode == null ||!CallNode.isFunctionCall(fnNode)) {
 if (CallNode.isFunctionObjectCall(fnNode)) {
if (!isDirectCallNodeReplacementPossible(fnNode) && fnNode == null) {
if (!isDirectCallNodeReplacementPossible(fnNode) ||!isFunctionObjectCall(fnNode)) {
 if ((callNode == null)) {
 return canInlineReferenceDirectly ( callNode, fnNode. getFirstChild ( ) ) }
if (!isDirectCallNodeReplacementPossible(fnNode) && fnNode.isEmpty()) {
 if (callNode.getFirstChild==block) {
 return canInlineReferenceDirectly ( callNode, fnNode, compiler ) ;
 return canInlineReferenceDirectly ( callNode, fnNode. getNext ( ) ) }
if (!isDirectCallNodeReplacementPossible(fnNode.getLastChild)) {
 if (fnNode == null) { if(!isDirectCallNodeReplacementPossible(fnNode)) {
if (!callNode.isFirstChild())) {
 if (!)) {
 if (callNode == null ||! fnNode)
 if (canInlineReferenceDirectly(x)) {
if (!isDirectCallNodeReplacementPossible(fnNode, fnParam)) {
 if (fnNode.isFunction)) {
 if (!canInlineReferenceDirectly(fn)) {
if (!canInlineReferenceDirectly(x))
 return canInlineReferenceDirectly ( callNode, fnNode. getFirstChild ( ) ) ; } else
if (!isDirectCallNodeReplacementPossible(fnNode) &&!isCallNode(callNode) {
 if (callNode == null ||!callNode.isCallNode(fnNode)) {
if (!isDirectCallNodeReplacementPossible(callNode, fnNode));
 if (callNode == null ||!block){
 return canInlineReferenceDirectly ( callNode, fnNode. getLastChild ( ) ) ; }
 return CanInlineResult. YES ; } public CanInlineResult canInlineReference ( Node fnNode ) {
 if (block == null)) {
 if (!callNode.isDirectCallNodeReplacementPossible(fnNode)) {
 return canInlineReferenceDirectly ( callNode, fnNode )
if (!isDirectCallNodeReplacementPossible(fnNode) ||!isCall(fnNode) {
 return canInlineReferenceDirectly ( callNode, fnNode. getFirstChild().getNext()); } else
 if (call == null){
if (!isDirectCallNodeReplacementPossible(fnNode))  return CanInlineResult.YES;
if  (fnNode) {
if (!isDirectCallNodeReplacementPossible(fnNode))  return CanInlineResult.NOPMD;
 return CanInlineResult. YES ; } public CanInlineResult canInlineReferenceDirectly(Node) {
 if (callNode.isThis() ){
 if (callNode.isEmpty(?)) {
 if (fnNode.getFirstChild == null) {
if (!isDirectCallNodeReplacementPossible(fnNode) &&!isCall(fnNode) {
 return canInlineReferenceDirectly(callNode, fn);
if (!isDirectCallNodeReplacementPossible(fnNode))  { return false;
if (!callNode.length()) {
 if (callNode == null ||!callNode.isName(...)) {
 if (fnNode == null || callNode&&!isDirectCallNodeReplacementPossible(fnNode)) {
 if (!filter(fnNode)) {
 if (null == fnNode.getNext()) {
if (!isDirectCallNodeReplacementPossible(callNode, fnNode*)) {
 if (callNode.isFunction)) {
if (!isDirectCallNodeReplacementPossible(fnNode) &&!isCallNode(fnNode) {
 if (fnNode == null ||!(!isDirectCallNodeReplacementPossible(fnNode)) {
 return canInlineReferenceDirectly ( callNode, fnNode. nextChild ) ; }
if (!isDirectCallNodeReplacementPossible(fnNode) || (fnNode.isThis())) {
 return canInlineReferenceDirectly(callNode, fnNode).getNext(); } else
 return canInlineReferenceDirectly ( callNode. getFirstChild ( ), fnNode ) ; } else
 if (fnNode.isEmpty)) {
 if (isFunctionObjectApply(fnNode)) {
 if (callNode.isNull(?)) {
if (FunctionUtil.isFunctionCall(fnNode)) {
 return CanInlineResult.YES; if(!isDirectCallNodeReplacementPossible(fnNode)) {
 if (!canInlineReferenceDirectly().isDirectCallNodeReplacementPossible(fnNode)) {
if (!fnNode == null)
 Node fnNode = fnNode. firstChild;
 if (!isFunctionCall(fnNode)) {
if (!canInlineReferenceDirectly())) {
if (!isDirectCallNodeReplacementPossible(fnNode, callNode, compiler) {
 return CanInlineResult. YES ; } public CanInlineResult inlineReferenceDirectly(Node fnNode)
if (!isDirectCallNodeReplacementPossible(fnNode) &&!isDirectCallNodeCall(callNode) {
if (!isDirectCallNodeReplacementPossible(fnNode, fnNode)) {
 return canInlineReferenceDirectly ( callNode, fnNode. clone ( ) ) }
 return CanInlineResult();
if (CallNode == null ||!isCall(fnNode)) {
if (!isDirectCallNodeReplacementPossible(callNode, * fnNode)) {
 return canInlineReferenceDirectly ( callNode. getFirstChild().getFirstChild(), fnNode );
 return canInlineReferenceDirectly ( callNode, fnNode, compiler ) ; }
if (!isDirectCallNodeReplacementPossible(fnNode) ||!isFunction(fnNode) {
if (!isDirectCallNodeReplacementPossible(fnNode) ||!isDirectCallNodeCall(callNode) {
 if (callNode == null ||!callNode.isName(fnName)) {
 if (!CanInlineResultUtil.isDirectCallNodeReplacementPossible(fnNode)) {
 return CanInlineResult. YES ; } public CanInlineResult canInlineReferenceDirectly(Node fnNode) { *
 if (null fnNode){
 return CanInlineResult. NO ; } public CanInlineResult canInlineReferenceDirectly(Node) {
if (!isDirectCallNodeReplacementPossible(fnNode) && block == null) {
if (!callNode).isCall()) {
 if (n == null) {
if (!isDirectCallNodeReplacementPossible(fnNode) && callNode.getFirstChild().isCallNode) {
 if (callNode.isName(...)) {
 return CanInlineResult. YES ; } public CanInlineResult inlineReferenceDirectly(Node fnNode {
if  (!x)
 if (callNode == null || isCall(fnNode)) {
 return canInlineReferenceDirectly ( callNode, fnNode. clone ( ) ) ; }
 return canInlineReferenceDirectly ( callNode, fnNode. getFirstChild ) ; }
if (!isDirectCallNodeReplacementPossible(fnNode) || fnNode.isThis(this)) {
 if (fnNode!= null) { if(!isDirectCallNodeReplacementPossible(fnNode)) {
 if (!NodeUtil.isCallNode(fnNode)) {
if (!isDirectCallNodeReplacementPossible(fnNode) || (fnNode == null) {
if (!isDirectCallNodeReplacementPossible(callNode))) {
if (!isDirectCallNodeReplacementPossible(fnNode) ||!fnNode.isThis())) {
 if (!callNode.isName(...))){
 if (callNode == null ||!callNode.isFunctionObjectCall(fn)) {
 return canInlineReferenceDirectly ( callNode, fnNode ;
if (callNode == null ||!isFunction(fnNode)) {
 if (!callNode.isCall) {
if (!isDirectCallNodeReplacementPossible(fnNode) && fnNode!= callNode) {
 return canInlineReferenceDirectly ( callNode, fnNode ) ; } } else
if (!isDirectCallNodeReplacementPossible(fnNode) && fnNode.isFunction()) {
 if (!x){
if (!isDirectCallNodeReplacementPossible(fnNode) ||!isDirectCallNodeFunction(fnNode) {
if (!isDirectCallNodeReplacementPossible(fnNode) && fnNode.isFunction) {
if (!isDirectCallNodeReplacementPossible(fnNode) ||!isCallNode(block) {
if (!isDirectCallNodeReplacementPossible(fnNode) ||!isFunctionObjectCall(block) {
 return CanInlineResult. YES ; } public CanInlineResult canInlineReferenceDirectly(CallNode fnNode) {}
if (!isDirectCallNodeReplacementPossible(fnNode) ||!isFunctionObjectCall(fnNode, compiler) {
 if (callNode == null || callNode&&!isDirectCallNodeReplacementPossible(fnNode)) {
 if (()) {
 return canInlineReferenceDirectly ( fnNode, callNode ) ; }
 if (!CanInlineUtils.isDirectCallNodeReplacementPossible(fnNode)) {
 if (!fnNode!= null) {
if (!isDirectCallNodeReplacementPossible(callNode, fnNode)) return;
 return canInlineReferenceDirectly ( callNode, fnNode. getLastChild ( ) ) ; } else
 if (!canInlineReferenceNodeUtil.isDirectCallNodeReplacementPossible(fnNode)) {
 return CanInlineResult. NO ; } public CanInlineResult canInlineReferenceDirectly(Node fnNode) { *
 if (!NodeUtil..isDirectCallNodeReplacementPossible(fnNode)) {
 if (NodeUtil.isCallNode(fnNode)) {
 if (this.isDirectCallNodeReplacementPossible(fnNode)) {
if (!isDirectCallNodeReplacementPossible(fnNode) && fnNode!= null)
 if (callNode.isName(...))){
if (!isDirectCallNodeReplacementPossible(fnNode) || fnNode!= null) {
 return CanInlineResult.NO; if!isDirectCallNodeReplacementPossible(fnNode)) {
 return canInlineReferenceDirectly ( callNode, fnNode, false ) ; }
 if (!canInlineCallReference(fnNode)) {
 if (!canInlineReference(callNode)) {
 return CanInlineResult; } if(!isDirectCallNodeReplacementPossible(fnNode)) {
 if (!Util.isDirectCallNodeReplacementPossible(fnNode)) {
 if (callNode == null ||!callNode.isFunctionObjectCall(callNode))
 return CanInlineResult.NO if(!isDirectCallNodeReplacementPossible(fnNode)) {
 if (!CanInlineResult.util.isDirectCallNodeReplacementPossible(fnNode)) {
if (!isDirectCallNodeReplacementPossible(callNode, nodeUtil)) {
if (!isDirectCallNodeReplacementPossible(fnNode) &&!isFunctionObjectCall(fnNode, compiler) {
 return canInlineReferenceDirectly ( callNode, fnNode. getNext()); } else
 return canInlineReferenceDirectly ( callNode ) ; }
 if (!isCall(node)) {
if (!isDirectCallNodeReplacementPossible(fnNode))  { return CanInlineResult.NO(); }
if (!isDirectCallNodeReplacementPossible(node))
 if (callNode == null) { if(!isDirectCallNodeReplacementPossible(fnNode)) {
 if (!is(fnNode)) {
 if (!canInlineReferenceDirect(fnNode)) {
if (callNode == null ||!isCallSiteReference(fnNode)) {
if (false) {
if (!isDirectCallNodeReplacementPossible(fnNode) && fnNode) {
 if (callNode.isFunctionObject()) {
if (!isDirectCallNodeReplacementPossible(fnNode) &&!fnNode!= null) {
if (!isDirectCallNodeReplacementPossible(callNode), fnNode) {
 if (!CallNode.isFunctionObjectCallReference(fnNode)) {
 if (Util.isDirectCallNodeReplacementPossible(fnNode)) {
 if (callNode == null ||!(!isDirectCallNodeReplacementPossible(fnNode)) {
 if (!canInlineCallNode(fnNode)) {
if (!callNode.isCall())
 if (!NodeUtil.isCallReference(fnNode)) {
if (!isDirectCallNodeReplacementPossible(fnNode) && fnNode.isFunctionCall) {
if  (!call) {
 if (null(fn)) {
if (!isDirectCallNodeReplacementPossible(fnNode) ||!isDirectCallNode(fnNode) {
if (!isDirectCallNodeReplacementPossible(fnNode) && fnNode.isCall) {
if (!isDirectCallNodeReplacementPossible(fnNode) && fnNode.getFirstChild().isCall) {
if (!isDirectCallNodeReplacementPossible(fnNode) && fnNode.isName(...)) {
 if (!CallNode.isFunctionObjectCallable(fnNode)) {
if (!isDirectCallNodeReplacementPossible(callNode, node, compiler)) {
if (!isDirectCallNodeReplacementPossible(fnNode) || callNode == fnNode) {
if (!isDirectCallNodeReplacementPossible(fnNode) &&!isFunctionObjectCall(callNode))) {
if (!isDirectCallNodeReplacementPossible(fnNode) && fnNode == null)
 if (fnNode == callNode)){
 if (fnNode!= null) if(!isDirectCallNodeReplacementPossible(fnNode)) {
 Node callNode = callNode. firstChild ;
 if (!canInlineReferenceInternal(fnNode)) {
 if (!isFunctionObjectCallNode(fnNode)) {
if (!isDirectCallNodeReplacementPossible(fnNode) {
 return canInlineReferenceDirectly ( callNode, fnNode, compiler ) }
 return canInlineReferenceDirectly ( fnNode, callNode ) ; } else
if (callNode == null || isCallNode(fnNode)) {
if (null == NodeUtil.call(fnNode)) {
if (!isDirectCallNodeReplacementPossible(fn) {
 if (callNode == null ||!!isDirectCallNodeReplacementPossible(fnNode)) {
 if (!check(fnNode)) {
if  (!)
if (!isDirectCallNodeReplacementPossible(fnNode))  { return false; }
 if (fnNode == null ||!!isDirectCallNodeReplacementPossible(fnNode)) {
 if (!callNode.isFunction) {
if (!isDirectCallNodeReplacementPossible(fnNode) || false) {
if (!isDirectCallNodeReplacementPossible(fnNode) || block == null) {
 if (!CallNode.isDirectCallNodeReplacementPossible(fnNode)) {
 if (isName(fnNode)) {
 if (!isFunction(node)) {
 if (callNode.isFunctionObjectCall)) {
if (!isDirectCallNodeReplacementPossible(fnNode) || fnNode.isFunction) {
 if (callNode == null ||!callNode.isName()) { return true; }
if (!isDirectCallNodeReplacementPossible(fnNode) && fnNode.isEmpty(?)) {
if (callNode == null ||!isReference(fnNode)) {
 if (empty()) {
if (!callNode!= null)
 if (fnNode == null) { } if(!isDirectCallNodeReplacementPossible(fnNode)) {
if (FunctionUtil.isFunction(fnNode)) {
 if (!has(fnNode)) {
if (!isDirectCallNodeReplacementPossible(fnNode) &&!isDirectCallNode(fnNode) {
if (!isDirectCallNodeReplacementPossible(fnNode) ||!block) {
 Node node = (Node) fnNode;
 if (!CanInlineResultUtils.isDirectCallNodeReplacementPossible(fnNode)) {
if (!isDirectCallNodeReplacementPossible(fnNode, callNode))) {
if  (null fn) {
 if (fnNode == null) if(!isDirectCallNodeReplacementPossible(fnNode)) {
if (!isDirectCallNodeReplacementPossible(fnNode) && callNode!= null) {
if (!isDirectCallNodeReplacementPossible(fnNode, null)) {
 if (!isFunctionObjectCallTarget(fnNode)) {
 return false; } if(!isDirectCallNodeReplacementPossible(fnNode)) {
if (NodeUtil.isEmpty(fnNode)) {
 if (!canInlineReferenceDirectlyImpl.isDirectCallNodeReplacementPossible(fnNode)) {
 if (!block.isDirectCallNodeReplacementPossible(fnNode)) {
 if (null == fnNode ||!this.isDirectCallNodeReplacementPossible(fnNode)) {
if (functionNode == null) {
if (!isDirectCallNodeReplacementPossible(fnNode, args)) {
 if (null block){
 return CanInlineResult;
 if (callNode!= null) if(!isDirectCallNodeReplacementPossible(fnNode)) {
 return CanInlineResult(); } if(!isDirectCallNodeReplacementPossible(fnNode)) {
 if ()) {
 Node cArg = null;
 Node node = callNode.getFirstChild().getFirstChild(); } else
if (!isDirectCallNodeReplacementPossible(fnNode) || (callNode) {
 Node block = null;
 if (callNode == null) { } if(!isDirectCallNodeReplacementPossible(fnNode)) {
 if (null(fnNode)) {
if (!isDirectCallNodeReplacementPossible(fnNode))  { if (!block) {
if (no) {
 if (!canInlineReferenceNodeDirectly.isDirectCallNodeReplacementPossible(fnNode)) {
 Node callNode = fnNode;
if (!isDirectCallNodeReplacementPossible(fnNode) ||!isCall) {
if (null isFunctionObjectCall(fnNode)) {
 return CanInlineResult.NO; }; if(!isDirectCallNodeReplacementPossible(fnNode)) {
 Node fnNode = fnNode. firstChild();
if (!isDirectCallNodeReplacementPossible(fnNode, true)) {
if (!isDirectCallNodeReplacementPossible(fnNode))  return true;
if (!isDirectCallNodeReplacementPossible(fnNode) &&!callNode!= null) {
if (fnNode!= null) {
 if (!isFunction()) {
 if (callNode.isFunction) {
if (!isDirectCallNodeReplacementPossible(callNode))
if (!isDirectCallNodeReplacementPossible(fnNode))  { return CannotInlineResult;
if (null) {
if (!isDirectCallNodeReplacementPossible(fnNode))  { return CannotInlineResult();
if (!isDirectCallNodeReplacementPossible (block))
 if (empty(x)) {
 if (emptyFunction()) {
 if (emptyFunction){
 Node fnNode = fnNode. next;
 if (!Utils.isDirectCallNodeReplacementPossible(fnNode)) {
if (canInlineDirectly(fnNode)) {
 if (fnNode)) {
 Node callNode = callNode. next;
if (!isDirectCallNodeReplacementPossible(callNode, compiler)) {
 Node fnNode = fnNode. getFirstChild(); }
if (!isDirectCallNodeReplacementPossible(fnNode), fnNode) {
if (!isDirectCallNodeReplacementPossible(fn)) {
 if (callNode == null ||!callNode.isThis() ) { *
 if (callNode == null || fnNode == null) { *
if (!isDirectCallNodeReplacementPossible(fnNode) || (block == null) {
if (!isDirectCallNodeReplacementPossible(callNode, node)) {
if (!isDirectCallNodeReplacementPossible(fnNode) ||!fnNode.length) {
if (NodeUtil.empty(fnNode)) {
if (!isDirectCallNodeReplacementPossible(fnNode))  return CanInlineResult.NO
 if ((callNode)) {
 return true; } if(!isDirectCallNodeReplacementPossible(fnNode)) {
 Node fnNode = fnNode. nextChild ; }
 if (.isDirectCallNodeReplacementPossible(fnNode)) {
 if (FunctionArgumentInjector!isDirectCallNodeReplacementPossible(fnNode)) {
 if (fnNode == null || (!isDirectCallNodeReplacementPossible(fnNode)) {
if (!isDirectCallNodeReplacementPossible(fnNode) ||!callNode) {
 if (!config.isDirectCallNodeReplacementPossible(fnNode)) {
 if (emptyFunction)) {
 if (NodeUtil.!isDirectCallNodeReplacementPossible(fnNode)) {
if  (! {
 if (!.isDirectCallNodeReplacementPossible(fnNode)) {
if (!isDirectCallNodeReplacementPossible(fnNode))  { return true;
 if (!context.isDirectCallNodeReplacementPossible(fnNode)) {
if (this) {
 if (callNode == null || (!isDirectCallNodeReplacementPossible(fnNode)) {
if (!isDirectCallNodeReplacementPossible(functionNode, fnNode)) {
if (isFunctionObjectCallNode(fnNode)) {
if (!functionNode) {
 if (nodeUtil.isDirectCallNodeReplacementPossible(fnNode)) {
 if ((!fnNode)) {
 if (FunctionCallNodeReplacement!isDirectCallNodeReplacementPossible(fnNode)) {
if (!isDirectCallNodeReplacementPossible(fnNode))) {
if (empty) {
if (!isDirectCallNodeReplacementPossible(fnNode) &&!callNode) {
if (!isDirectCallNodeReplacementPossible(CallNode, fn)) {
if (!isDirectCallNodeReplacementPossible(fnNode) || true) {
 Node node = callNode.getFirstChild(); *
if  (!true)
if (false)
if (!isDirectCallNodeReplacementPossible(fnNode) && callNode == null) {
if (!isDirectCallNodeReplacementPossible(fnNode))  { return true; }
 if (!CallUtil.isDirectCallNodeReplacementPossible(fnNode)) {
 if () {
 if (nested) {
 Node callNode = callNode. nextChild ; }
if (!isDirectCallNodeReplacementPossible(fnNode) ||!callNode)
 return false; }
if (IsFunctionObjectCall(fnNode)) {
 if (!evaluate(fnNode)) {
if (isFunctionObjectCallNone(fnNode)) {
 return null; } if(!isDirectCallNodeReplacementPossible(fnNode)) {
if  (!block)
if (!isDirectCallNodeReplacementPossible(fnNode) && callNode) {
 if (callNode&&!isDirectCallNodeReplacementPossible(fnNode)) {
 if (!x)){
if (isCallTarget(fnNode)) {
if (!isDirectCallNodeReplacementPossible(fnNode))  return null;
if (isCallSite(fnNode)) {
if (!isCall()) {
 if (FunctionCallNodeReplacer!isDirectCallNodeReplacementPossible(fnNode)) {
if  (!debug)
 return false; } else if(!isDirectCallNodeReplacementPossible(fnNode)) {
if (!isDirectCallNodeReplacementPossible(fnNode) || (!callNode) {
if (!isDirectCallNodeReplacementPossible(node, fn)) {
if (!isDirectCallNodeReplacementPossible(fnNode) || (!block) {
 return false; if(!isDirectCallNodeReplacementPossible(fnNode)) {
if (!isDirectCallNodeReplacementPossible(fnNode) && (callNode) {
 return true; } else if(!isDirectCallNodeReplacementPossible(fnNode)) {
if (call == null)
if (!isDirectCallNodeReplacementPossible(fnNode) && block!= null) {
if (no)
if  (!apply)
if (!isDirectCallNodeReplacementPossible(fnNode) &&!isCall) {
 if (!FunctionUtil!isDirectCallNodeReplacementPossible(fnNode)) {
if (!isDirectCallNodeReplacementPossible(fnNode))  { return null; }
if (!isDirectCallNodeReplacementPossible(fnNode) || empty) {
 return true; if(!isDirectCallNodeReplacementPossible(fnNode)) {
if (!isDirectCallNodeReplacementPossible(fnNode) ||!fnNode) {
 if (!!isDirectCallNodeReplacementPossible(fnNode)) {
if (!isDirectCallNodeReplacementPossible(fnNode) ||!block)
 return CanInlineResult };
if (!callNode == null))
 if (!apply) {
if (isFunctionFunctionCall(fnNode)) {
 if (...isDirectCallNodeReplacementPossible(fnNode)) {
 if (false)) {
if (!fnNode == null))
if (!isDirectCallNodeReplacementPossible(fnNode))  return CanInlineResult++;
 if (!true) {
if (empty(fnNode)) {
 Node callNode = fnNode();
 return true; }
if (!isDirectCallNodeReplacementPossible(fnNode) ||!isCallNode) {
 return true; } } else if(!isDirectCallNodeReplacementPossible(fnNode)) {
if (!isDirectCallNodeReplacementPossible(function, fn)) {
if (fnNode == null) { *
 return ; } if(!isDirectCallNodeReplacementPossible(fnNode)) {
if (!isDirectCallNodeReplacementPossible(fnNode) || fnNode)
 if (!call)) {
 if (!CallNode&&!isDirectCallNodeReplacementPossible(fnNode)) {
 if (!x{
 if (!apply)) {
 if (*) {
if (!isDirectCallNodeReplacementPossible(node, compiler)) {
if (!isDirectCallNodeReplacementPossible(fnNode) &&!block) {
if (!isDirectCallNodeReplacementPossible(fnNode) || (block) {
if (!isDirectCallNodeReplacementPossible(fnNode) || false)
 if (!.){
if (!isDirectCallNodeReplacementPossible(fnNode) &&!isCallSite) {
 return null ; } } else if(!isDirectCallNodeReplacementPossible(fnNode)) {
 return false; } else
if (!isDirectCallNodeReplacementPossible(function, node)) {
if (!isDirectCallNodeReplacementPossible) {
 return null; } else if(!isDirectCallNodeReplacementPossible(fnNode)) {
 return true; } else
 Node block = getFirstChild(); }
 if (false&&!isDirectCallNodeReplacementPossible(fnNode)) {
 return true; } } { if(!isDirectCallNodeReplacementPossible(fnNode)) {
 Node fnNode = fnNode ; }
 return null ; } } ; if(!isDirectCallNodeReplacementPossible(fnNode)) {
if (!isDirectCallNodeReplacementPossible(fnNode)) return;
 if (!...{
if (return)
 Node callNode = fnNode ; }
 if (!this&&!isDirectCallNodeReplacementPossible(fnNode)) {
 if (!!){
if (null)
if (isEmpty(fnNode)) {
if (empty)
 * if (!isDirectCallNodeReplacementPossible(fnNode)) {
 return false; } *
 Node callNode = callNode ; }
if (!isDirectCallNodeReplacementPossible(...))
 return null ; } } { if(!isDirectCallNodeReplacementPossible(fnNode)) {
 Node parentNode = fnNode ; }
if (!isDirectCallNodeReplacementPossible(fn))
 if (this&&!isDirectCallNodeReplacementPossible(fnNode)) {
 if (x=!isDirectCallNodeReplacementPossible(fnNode)) {
 if (null&&!isDirectCallNodeReplacementPossible(fnNode)) {
 Node callNode = fnNode);
if  false {
if (!isDirectCallNodeReplacementPossible(fnNode))  return 0;
if (!isDirectCallNodeReplacementPossible(fnNode) &&!apply) {
if (!isDirectCallNodeReplacementPossible(fnNode) || true)
if (!isDirectCallNodeReplacementPossible(fnNode))  return false; else
if (!isDirectCallNodeReplacementPossible(fnNode) &&!replace) {
 Node node = fnNode ; }
if (skip(fnNode)) {
 if (() {
 if ((fnNode)) {
 return null; }
if  empty {
 if (!(!isDirectCallNodeReplacementPossible(fnNode)) {
if (isNull(fnNode)) {
if (!isDirectCallNodeReplacementPossible(fnNode) ||! {
 } else if(!isDirectCallNodeReplacementPossible(fnNode)) {
 }else{
if (!isDirectCallNodeReplacementPossible() {
 } { if(!isDirectCallNodeReplacementPossible(fnNode)) {
 if ($(fnNode)) {
if (!isDirectCallNodeReplacementPossible(fnNode) || false {
if (!isDirectCallNodeReplacementPossible(nNode)) {
 *else{
if (!isDirectCallNodeReplacementPossible(functionNode)) {
 if (isDirectCallNodeReplacementPossible(fnNode)) {
 if (*(fnNode)) {
if (is(fnNode)) {
 } else
if (!isDirectCallNodeReplacementPossible)) {
 synchronized (fnNode)) {
if (!isDirectCallNodeReplacementPossible(call)) {
if (!isDirectCallNodeReplacementPossible(block)) {
 * *{
if (block(fnNode)) {
 if ((!isDirectCallNodeReplacementPossible(fnNode)) {
if (!isDirectCallNodeReplacementPossible(fnNode))  { *
if (unisDirectCallNodeReplacementPossible(fnNode)) {
if (!isDirectCallNodeReplacementPossible") {
if (!isDirectCallNodeReplacementPossible(fnNode)); {
if (!isDirectCallNodeReplacementPossible(fnNode))  return();
if (!isDirectCallNodeReplacementPossible(Node)) {
 while (!isDirectCallNodeReplacementPossible(fnNode)) {
 } elseIf(!isDirectCallNodeReplacementPossible(fnNode)) {
if (!isDirectCallNodeReplacementPossible(fnNode) { *
 *
 * If(!isDirectCallNodeReplacementPossible(fnNode)) {
 * while(!isDirectCallNodeReplacementPossible(fnNode)) {
 * IF(!isDirectCallNodeReplacementPossible(fnNode)) {
