if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),
if (FastMath.abs(x1 - x0) < FastMath.max(rtol *  Math.abs(x1),
if (abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),
if (FastMath.abs(x1 - x0) < FastMath.max(rtol *  abs(x1),
 if ((x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),
if (FastMath.abs(x1 - x0) < FastMath.abs(
if (FastMath.abs(x1 - x0) < FastMath.abs
if (FastMath.abs(f1 <=
 if (FastMath.abs(x1),
 if ((x0) < FastMath.max(rtol * FastMath.abs(x1),
if (FastMath.abs(f1) <=
 if (max(rtol * FastMath.abs(x1),
 if (FastMath.max(rtol * FastMath.abs(x1),
if (Math.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),
 if FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),
if (FastMath.abs(x1 - x0) <=
 FastMath.abs(x1),
 if ((- x0) < FastMath.max(rtol * FastMath.abs(x1),
 if (FastMath.abs(x0) < FastMath.max(rtol * FastMath.abs(x1),
if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1 - x0),
if (f1 <=
if (FastMath.abs(x1 ) <=
if (FastMath.abs(f <=
if (FastMath.abs(x1 - x0) < FastMath.max(x1 - x0,
 if ((x- x0) < FastMath.max(rtol * FastMath.abs(x1),
if (FastMath.abs(x1 - x0) < FastMath.abs(x1 -
 if (FastMath.abs(f1),
 if (FastMath.abs(x) < FastMath.max(rtol * FastMath.abs(x1),
 if (FastMath.abs(f1) < FastMath.max(rtol * FastMath.abs(x1),
if (FastMath.abs(x1 - x0) < FastMath.abs(x1 - x0 +
if (FastMath.abs(x1 -  x <=
 if (FastMath.abs(x-x0) < FastMath.max(rtol * FastMath.abs(x1),
 switch (allowed) { case ANY_SIDE: return x1; case RIGHT_SIDE:
if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x),
 if (Math.abs(x0) < FastMath.max(rtol * FastMath.abs(x1),
 if(< FastMath.max(rtol * FastMath.abs(x1),
if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1 - x0) +
if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(
if (FastMath.abs(x1 - x0) < FastMath.max(rtol, FastMath.abs(x1),
 switch (allowed) { case ANY_SIDE: return x1;
 switch (allowed) { case ANY_SIDE: return x1; case RIGHT_SIDE: return x0;
 if ((f1) < FastMath.max(rtol * FastMath.abs(x1),
if (FastMath.abs(x1 - x0) < FastMath.maxAbs(
 if FastMath.abs(x1),
 if (abs(x0) < FastMath.max(rtol * FastMath.abs(x1),
 if ((abs(x1),
if (FastMath.abs( <=
 if ((FastMath.abs(x1),
if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x0 - x1),
if (FastMath.abs(x <=
 switch (allowed) { case ANY_SIDE: return x1; } else
 if (Math.max(rtol * FastMath.abs(x1),
if (FastMath.abs(x1 - x0) < FastMath.abs(x1 - x1) <
if (FastMath.abs(x1 - x0) < FastMath.abs(x -
if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs
 if (f1 <= ftol* FastMath.abs(x1),
if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1) +
 if (FastMath.abs(x),
 if (FastMath.absAbs(x0) < FastMath.max(rtol * FastMath.abs(x1),
 switch (allowed) { case ANY_SIDE: return x1; case LEFT_SIDE: return x0; } if (f1 <=
 switch (allowed) { case ANY_SIDE: return x1; case LEFT_SIDE:
if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x0 - x1) +
 switch (allowed) { case ANY_SIDE: return x1; case LEFT_SIDE: if (f1 <=
if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1 - x),
if (FastMath.abs(x1 - x0) < FastMath.max(f1,
if (FastMath.abs(x1 - x0) < FastMath.abs(x1 - x0 -
if (FastMath.abs(x1 - x0) < FastMath.abs(x0 - x1 +
if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1) - x0,
 switch (allowed) { case ANY_SIDE: return x1; case LEFT_SIDE: return x0; } if (f1 <= 0 <=
 if (FastMath.within(abs(x1),
if (FastMath.abs(x1 - x0) < FastMath.abs(x0 - x1) <
 switch (allowed) { case ANY_SIDE: return x1; case RIGHT_SIDE: return x0; } else
 switch (allowed) { case ANY_SIDE: return x1; case RIGHT_SIDE: return x;
if (FastMath.abs(x1 - x0) < FastMath.abs(x1 - x +
 switch (allowed) { case ANY_SIDE: return x1; case LEFT_SIDE: return x0; } if (f1 <>
 switch (allowed) { case ANY_SIDE: return x1; case RIGHT_SIDE: } else
 switch (allowed) { case ANY_SIDE: return x1; case RIGHT_SIDE: if (f1 <=
 switch (allowed) { case ANY_SIDE: return x1; case RIGHT_SIDE: return x0; }
if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1 - x0) -
 switch (allowed) { case ANY_SIDE: return x1; case LEFT_SIDE: return x0; } if (f1 <= -
 if (f1< FastMath.max(rtol * FastMath.abs(x1),
 switch (allowed) { case ANY_SIDE: return x1; case RIGHT_IDE:
if (FastMath.abs(f1) <= abs(
if (FastMath.abs(x0, x1) < FastMath.max(rtol * FastMath.abs(x1),
 switch (allowed) { case ANY_SIDE: return x1; case RIGHT_SIDE: return x0; } } else
 switch (allowed) { case ANY_SIDE: return x1; case RIGHT_SIDE: return 0;
 switch (allowed) { case ANY_SIDE: return x1; case LEFT_SIDE: case RIGHT_SIDE: if (f1 <>
if  (FastMath.abs(f1) <
if (FastMath.abs(x1 - x0) < FastMath.abs(x1 +
if (FastMath.abs(x1 - x0) < FastMath.abs(x1 - x1 +
 switch (allowed) { case ANY_SIDE: return x1; case RIGHT_SIDE: case BELOW_SIDE:
 if (f1 <= (FastMath.abs(x1),
 switch (allowed) { case ANY_SIDE: return x1; case RIGHT_SIDE: return x1;
if (FastMath.abs(x1 - x0) < FastMath.max(x1 - x0) +
if (FastMath.abs(x1 - x0) < FastMath.abs(x1 - x0) +
 switch (allowed) { case ANY_SIDE: return x1; case RIGHT_SIDE: case LEFT_SIDE:
 switch (allowed) { case ANY_SIDE: return x1; case LEFT_SIDE: return x0; } if (f1 >= 0 <=
 if (FastMath.abs(f) < FastMath.max(rtol * FastMath.abs(x1),
if (FastMath.abs(f1) <= ftol && f1 <=
 if (FastMath.abs(f),
 switch (allowed) { case ANY_SIDE: return x1; case LEFT_SIDE: case RIGHT_SIDE: if (f1 <= -
if  (FastMath.abs(f1 <
if (FastMath.abs(x1 - x0) < FastMath.abs(x1) +
 switch (allowed) { case ANY_SIDE: return x1; case LEFT_SIDE: return x0; } if (f1 <= 0 <
 switch (allowed) { case ANY_SIDE: return x1; case LEFT_SIDE: if (x <=
if (FastMath.abs(x1 - x0) < FastMath.max(x1,
 if (x0 <= FastMath.max(rtol * FastMath.abs(x1),
 switch (allowed) { case ANY_SIDE: return x1; case LEFT_SIDE: } else
 if (f1 <= FastMath.max(rtol * FastMath.abs(x1),
 switch (allowed) { case ANY_SIDE: return x1; case LEFT_SIDE: return x0; } if (f1 <
 switch (allowed) { case ANY_SIDE: return x1; case RIGHT_SIDE: return x0; } if (FastMath.abs <=
if (FastMath.abs(x1 - x0) < FastMath.max(x1 - x,
if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x0) +
 switch (allowed) { case ANY_SIDE: return x1; case LEFT_SIDE: return x0; } if ((f1 <>
 switch (allowed) { case ANY_SIDE: return x1; case LEFT_SIDE: return x0; } if (f1 < -
 switch (allowed) { case ANY_SIDE: return x1; case RIGHT_SIDE: if (!inverted) {
 if (inverted) if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),
 switch (allowed) { case ANY_SIDE: return x1; case RIGHT SIDE:
if (FastMath.abs(x1 - x0) <= FastMath.max(rtol * FastMath.abs(x1),
 if ((rtol * FastMath.abs(x1),
 switch (allowed) { case ANY_SIDE: return x1; case RIGHT_SIDE: return x1; } } else
 if (FastMath.within(x,
if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1 -
 switch (allowed) { case ANY_SIDE: return x1; case RIGHT_SIDE: } } else
if (FastMath.abs(
if (FastMath.abs(x1 - x0) < FastMath.abs(f1 - x1) <
 switch (allowed) { case ANY_SIDE: return x1; } } else
 switch (allowed) { case ANY_SIDE: return x1; switch (allowed) { case RIGHT_SIDE:
 switch (allowed) { case ANY_SIDE: return x1; case RIGHT_UP:
 if (rtol * (x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),
 switch (allowed) { case ANY_SIDE: return x1; case RIGHT_SIDE: return x0; } if (f1 <>
if (FastMath.abs(x1 -  f1) <=
 if (inverted) && FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),
if (FastMath.abs(f1) <= ftol || f1 <=
 switch (allowed) { case ANY_SIDE: return x1; case LEFT_SIDE: return x0; } if (f1 >
 switch (allowed) { case ANY_SIDE: return x;
if  (fastMath.abs(f1) <=
 switch (allowed) { case ANY_SIDE: return x1; case LEFT_SIDE: if (0 <=
 switch (allowed) { case ANY_SIDE: return x1; case RIGHT_SIDE: return x1; } else
 switch (allowed) { case ANY_SIDE: return x1; case RIGHT_SIDE: return x0; } if (f1 <= -
if (FastMath.abs(f1) <= (1 -
if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(f1 - x0),
 if (inverted) { if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),
if (FastMath.abs(x1 - x0) < FastMath.abs(x1 - x1) <=
 if (Math.abs(x1),
 switch (allowed) { case ANY_SIDE: x1 = x0;
 switch (allowed) { case ANY_SIDE: return x0;
if (FastMath.abs(x1 - x0) < FastMath.abs(f1 -
if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x0 - x),
if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x0 - x1) -
 switch (allowed) { case ANY_SIDE: return x1; case RIGHT_SIDE: return inverted;
 if (FastMath.abs(abs(x1),
 switch (allowed) { case ANY_SIDE: return x1; } if (FastMath.abs(f <=
if (FastMath.abs(x1 - x0) < FastMath.abs(f1) +
 if (f1 <= FastMath.abs(x1),
 if (FastMath.abs(x1) < FastMath.max(rtol * FastMath.abs(x1),
 switch (allowed) { case ANY_SIDE: x0 = x1;
 switch (allowed) { case ANY_SIDE: return x1; case LEFT_SIDE: if (f1 <
 switch (allowed) { case ANY_SIDE: return x1; case RIGHT_SIDE: if (x <=
 switch (allowed) { case ANY_SIDE: return x1; case RIGHT_SIDE: return x0; } }
if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(f1) +
 switch (allowed) { case ANY_SIDE: return x1; case LEFT_SIDE: return x0; } else
 switch (allowed) { case ANY_SIDE: case RIGHT_SIDE:
 if (x1 <= FastMath.max(rtol * FastMath.abs(x1),
 switch (allowed) { case ANY_SIDE: return x1; } if (FastMath.abs(f1 <=
 switch (allowed) { case ANY_SIDE: return x1; case LEFT_SIDE: if (!f1 <=
if (FastMath.abs(x1 - x0) < FastMath.max(rtol *  ftol,
 switch (allowed) { case ANY_SIDE: return x1; } if (FastMath.abs(x <=
 switch (allowed) { case ANY_SIDE: return x1; case RIGHT_SIDE: break;
 switch (allowed) { case ANY_SIDE: return x1; case RIGHT_SIDE: return x1; }
 switch (allowed) { case ANY_SIDE: return x1; }
if (FastMath.abs(x1 - x0) < FastMath.abs(x0 - x1 -
if  (FastMath.abs(f0) <=
 switch (allowed) { case ANY_SIDE: return x1; case RIGHT_SIDE: if (f1 <>
 if (FastMath.abs(f(x),
 switch (allowed) { case ANY_SIDE: return x1; case RIGHT_SIDE: if (f1 <
if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1) -
 if (FastMath.abs(fx0) < FastMath.max(rtol * FastMath.abs(x1),
 switch (allowed) { case ANY_SIDE: return x0; case RIGHT_SIDE:
 switch (allowed) { case ANY_SIDE: return x1; case LEFT_SIDE: if (x1 <=
if (FastMath.abs(x1 - x0) < FastMath.max(x0 - x1,
 if ((f1),
if (FastMath.abs(x1 - x0) < FastMath.max(x1 - x0, x0 +
if (FastMath.abs <=
if (FastMath.abs(x1 -  f1 <=
if (FastMath.abs(x1 - x0) < FastMath.abs(x1) <
 switch (allowed) { case ANY_SIDE: return x1; case LEFT_SIDE: return x0; } } else
 if ((x1),
if (FastMath.abs(x1 - x0) < FastMath.max(x1 - x0, x1 +
if (FastMath.abs(x1 - x0) < FastMath.abs(x1) -
 if (FastMath.abs() < FastMath.max(rtol * FastMath.abs(x1),
 switch (allowed) { case ANY_SIDE: return x1; case LEFT_SIDE: return x;
if (FastMath.absAbs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),
if (FastMath.abs(x1 - x0) < FastMath.max(x0,
 switch (allowed) { case ANY_SIDE: return x1; case RIGHT_SIDE: if (!inverted) { } }
if (FastMath.abs(x1 - x0) < FastMath.max(x0, x1) && f1 <=
 if (FastMath.abs(- x0) < FastMath.max(rtol * FastMath.abs(x1),
 switch (allowed) { case ANY_SIDE: return x1; case RIGHT_SIDE: return x0; } } else {
if (FastMath.abs(x1 - x0) < FastMath.abs(x +
if  (f <=
 switch (allowed) { case ANY_SIDE: return x1; case LEFT_SIDE: return 0;
if (FastMath.abs(x1 - x0) < FastMath.max(x0, x1) +
 if (x1- x0) < FastMath.max(rtol * FastMath.abs(x1),
 if (inverted) { if (FastMath.max(rtol * FastMath.abs(x1),
 if (FastMath.within(x1,
if (FastMath.abs(x1 - x0) < FastMath.max(x1, x0) && f1 <=
 switch (allowed) { case ANY_SIDE: return x0; } else
 switch (allowed) { case ANY_SIDE: return x1; case RIGHT_SIDE: return x1; } } else {
 switch (allowed) { case ALL_SIDE: return x1;
 if (within(x,
if (FastMath.abs(x1 - x0) < FastMath.abs(f1) <
 if (FastMath.abs(abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),
if  (FastMath.abs(f1) >=
 if (FastMath.in(abs(x1),
 FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),
 if (f1 <= (rtol * FastMath.abs(x1),
 if (inverted) {
if (FastMath.abs(x1 - x0) < FastMath.abs(f1
if (FastMath.abs(x1 -  x0) <= ftol && f1 <=
if (FastMath.abs(f1) <= ftol +
if (FastMath.abs(x1 - x0) < FastMath.max(f1 - x0,
if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1 - x1),
if (FastMath.abs(x1 ) <= ftol && f1 <=
 if (f1 <= min(FastMath.abs(x1),
if (FastMath.rtol(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),
 if (FastMath.abs(x,
if (FastMath.abs(x1 - x0) < FastMath.max(x1 - x0, 0,
 switch (allowed) { case ANY_SIDE: return x1; case RIGHT_SIDE: return f1;
if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1 - x0,
if (FastMath.abs(f1) >= ftol && f1 <=
if (FastMath.abs(f1) <= (0 -
if (FastMath.abs(x1 - x0) < FastMath.abs(x0 -
if (FastMath.abs(x1 -  x0 <=
 if (fx* FastMath.abs(x1),
if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(f1 -
 if (f1,
 switch (allowed) { case ANY_SIDE: return x1; case RIGHT_SIDE: if (!inverted) { }
 if (FastMath.inRange(x1),
if (FastMath.abs(x1 - x0) < FastMath.abs(x1 - x -
 if (f1 <= atol(FastMath.abs(x1),
if  ((f1 <=
 if ((x1<- x0) < FastMath.max(rtol * FastMath.abs(x1),
 switch (allowed) { case ANY_SIDE: return x1; case LEFT_SIDE: if ( <=
if (FastMath.abs(x1 ) <= f1 && f1 <=
if (FastMath.abs(f1) <= (f0 +
 switch (allowed) { case ANY_SIDE: return x1; case RIGHT_SIDE: } }
if (FastMath.abs(x1 -  x0) <= f1 && f1 <=
if (FastMath.abs(x1 - x0) < FastMath.max(x1 - x0) <
 if (f1 <= Math.max(rtol * FastMath.abs(x1),
 if (f1 >= 0) { return x1; } if (f1 <= 0) { return x0; } if (f1 <=
 if (f1 <= 0) { return x1; } if (f1 >= 0) { return x1; } if (f1 <=
 if (FastMath.eq(rtol * FastMath.abs(x1),
if (FastMath.abs(f1) <= (x0 +
 switch (allowed) { case ANY_SIDE: return x1; case RIGHT: } else
 switch (allowed) { case ANY_SIDE: return x1; case RIGHT_SIDE: if (!inverted) { } else
 if (FastMath.min(abs(x1),
 if (FastMath.within(f1,
 switch (allowed) { case ANY_SIDE: } else
 if (f1 <= 2* FastMath.abs(x1),
if  (FastMath.abs(f1 >=
if (FastMath.abs(f1) <>
 switch (allowed) { case ANY_SIDE: return x1; case RIGHT_SIDE: }
 switch (allowed) { case ANY_SIDE: return x1; break; } else
if (FastMath.abs(f1) <= ftol *
 if(* FastMath.abs(x1),
 if (x1 <= (FastMath.abs(x1),
 if (x1 <= x0 && x1- x0) < FastMath.max(rtol * FastMath.abs(x1),
 if (within(FastMath.abs(x1),
 switch (allowed) { case ANY_SIDE: return x1; } switch (atol) {
if (FastMath.abs(f1) <= (f0 -
 if (f1 >= 0) { return x1; } if (f1 <= 0) { return x1; } if (f1 <=
 if (f1 <= ftol && abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),
if (FastMath.abs(x1 - x0) < FastMath.max(x1 + x0,
if (FastMath.abs(x1 - x0)) < FastMath.abs(x1 -
if (FastMath.abs(x1 - x0) < FastMath.max(x0, x1 +
if (FastMath.finite <=
if (FastMath.abs(x1 - x0) < FastMath.max(x1 - x0) && f1 <=
 if (FastMath.inRange(abs(x1),
if (FastMath.abs(x1 ) <= ftol) && (f1 <=
if (FastMath.abs(x1 - x0) < FastMath.max(x1 + 1,
 switch (allowed) { case ANY_SIDE: return x1; default: } else
 if (f1 <= min(rtol * FastMath.abs(x1),
if (FastMath.abs(x1 - x0) <  ftol || FastMath.abs(x <
if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x0 -
if (FastMath.abs(x1 - x0) < FastMath.max(rtol *  ftol*FastMath.abs(x1),
 switch (allowed) { case ANY_SIDE: return x1; break; }
if (FastMath.abs(f1) <= ftol && x0) < FastMath.max(rtol * FastMath.abs(x1),
 if (f1 <= (ftol* FastMath.abs(x1),
if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x0) -
 switch (allowed) { case ANY_SIDE: return x1; case LEFT_SIDE: }
 if (f1 <= ftol(FastMath.abs(x1),
 if (f1 <= 0 && FastMath.max(rtol * FastMath.abs(x1),
if (FastMath.abs(x1 - x0) < FastMath.max(rtol *  x0, FastMath.abs(x1),
if  (fastMath.abs(f1 <=
if (FastMath.abs(x1 - x0) <  ftol && f1 <
 if ((f1 <= 0),
if (FastMath.abs(x1 - x0) < FastMath.max(x1 - x0, x1 -
 if (inverted) { x1 = x0; } else
 if (f1 <= ftol && (x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),
 if (FastMath.absabs(x0) < FastMath.max(rtol * FastMath.abs(x1),
 if (FastMath.eq(f1,
if (FastMath.abs(x1 - x0)) < FastMath.abs(x -
 if (f1 <= ftol && FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),
if (FastMath.abs(f1) < ftol && f1 <
 if (inverted && FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),
 if (FastMath.min(f1),
if (FastMath.abs(x1 -  x0) <= ftol || f1 <=
 switch (allowed) { case ANY_SIDE: return x1; case RIGHT_SIDE: return x0; else
if (FastMath.abs(f1) - abs(x) < FastMath.max(rtol * FastMath.abs(x1),
if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1) - x0) +
if (FastMath.abs(f1) <= (x1 +
if (FastMath.abs(f1) < abs(
if (FastMath.abs(x1 - x0) < FastMath.max(rtol *  ftol, FastMath.abs(x1),
 switch (allowed) { case ANY_SIDE: return x1; case RIGHT_SIDE: return x2; }
 if (FastMath.min(f1,
 if (inverted) { return x1; }
 if (rtol * FastMath.abs(x1),
if (FastMath.abs(f1) <= fx <=
if (FastMath.abs(x1 - x0) <  atol || FastMath.abs(x <
 switch (allowed) { case ANY_SIDE: return x1; } } else {
if (FastMath.abs(x1 - x0) < FastMath.max(x0, x1) -
 if (abs(x1),
 switch (allowed) { case ANY_SIDE:
if (FastMath.abs(x1 - x0) < FastMath.abs(f1 - x +
 switch (allowed) { case FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),
 if (inverted) && (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),
 if (fastMath.abs(f1) < FastMath.max(rtol * FastMath.abs(x1),
if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x0),
 if (f1 <= Math.min(abs(x1),
if (FastMath.abs(x1 - x0) < FastMath.max(rtol *  FastMath.absAbs(x1),
if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1 - x0) - 1,
if (FastMath.abs(f1) >= abs(
if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1 - x0) + 1,
 if (f1 <= ftol && abs(x0) < FastMath.max(rtol * FastMath.abs(x1),
if (FastMath.abs(f1) <= ftol && x1 <=
 if (f1 < (FastMath.abs(x1),
 if (FastMath.abs(x+x0) < FastMath.max(rtol * FastMath.abs(x1),
 switch (allowed) { case ANY_SIDE: return x1; case RIGHT_SIDE: else
 if (FastMath.intersect(x1),
 if (f1 <= ftol) if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),
if (FastMath.abs(f1) <= (x0 -
if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1 +
if  (FastMath.abs(f0 <=
 if (f1 >= 0) { return x1; } else if (f1 <= 0) { return x0; } if (!
 if (fastMath.abs(x1-x0) < FastMath.max(rtol * FastMath.abs(x1),
 if (abs(x) < FastMath.max(rtol * FastMath.abs(x1),
 if (f1 >= 0) { return x1; } if (f1 <= 0) { return x0; } if (!
 if ((f1 - x) < FastMath.max(rtol * FastMath.abs(x1),
 if (f1 >= 0) { return x1; } if (f1 <= 0) { return x0; } if (f1 <
 if (f1 <= 0) { return x1; } if (f1 >= 0) { return x1; } if (f1 <
 if (f1-x0) < FastMath.max(rtol * FastMath.abs(x1),
 if (f1 >= 0) { return x1; } if (f1 <= 0) { return x0; } if (x <=
if (FastMath.abs(x1 - x0) < FastMath.max(rtol ) || FastMath.abs(x1 <
 if (FastMath.abs(x, f) < FastMath.max(rtol * FastMath.abs(x1),
if (FastMath.abs(x1 - x0) < FastMath.max(x0, x1) && f1 <
if (FastMath.abs(x1 -  x0) <= (f1 -
if (FastMath.abs(x1 ) <= ftol) || (f1 <=
 if (FastMath.within(x0,
if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.rtol,
 if (f1 >= 0) { return x1; } if (f1 <= 0) { return x0; } if (f <=
 switch (allowed) { case ANY_SIDE: return x1; else
if (FastMath.abs(x1 - x0) < FastMath.max(x1, x0) && f1 <
 if (x1 <= x0 && (x- x0) < FastMath.max(rtol * FastMath.abs(x1),
 if (!inverted) { if (FastMath.max(rtol * FastMath.abs(x1),
if (FastMath.abs(x1 ) <= (f1 -
 if (f1 <= max(FastMath.abs(x1),
if (FastMath.abs(f1) <= ftol && (x) < FastMath.max(rtol * FastMath.abs(x1),
 switch (allowed) { case ANY_SIDE: x1;
if (FastMath.abs(x1 - x0) <  atol || FastMath.abs(x <=
 switch (allowed) { case ANY_SIDE: return x1; case LEFT_SIDE: else
 if (inverted) { return x1; } else
 if (f1 <= 0) { return x1; } if (f1 >= 0) { return x1; } if (f <=
 if (x1 + x1- x0) < FastMath.max(rtol * FastMath.abs(x1),
 if (FastMath.lt(abs(x1),
if (FastMath.abs(x1 - x0) < FastMath.max(x1 - x0) -
 if (f1 <= 0) { return x1; } if (f1 >= 0) { return x1; } if (x <=
 if (f1 >= 0) { return x1; } if (f1 <= 0) { return x0; } if (0 <=
if (FastMath.abs(x1 -  x0) <= f1.abs(
 if (f1 <= 0) { return x1; } if (f1 >= 0) { return x1; } if (!
 if (FastMath.within(x1),
if (FastMath.abs(x1 - x0) < FastMath.max(x1 - x0, 1 -
 if (x1 <= min(FastMath.abs(x1),
 if (f1 >= 0 && FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),
if (FastMath.abs(x1 - x0)) < FastMath.abs(x1 +
if (FastMath.abs(x1 - x0) < FastMath.max(rtol ) || FastMath.abs(x1 <=
 if (Fast.abs(x0) < FastMath.max(rtol * FastMath.abs(x1),
 if (FastMath.abs(f,
if (FastMath.abs(x1 - x0) < FastMath.max(rtol ) || FastMath.abs(f1 <=
 if ((f1 <= ftol),
 if (x1 < x0 && x1- x0) < FastMath.max(rtol * FastMath.abs(x1),
 switch (allowed) { case (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),
 if (fastMath.abs(x) < FastMath.max(rtol * FastMath.abs(x1),
 switch (allowed) { case ANY_SIDE: return x1; } break; }
if (FastMath.abs(x1 ) <= f0 && f1 <=
 if (fastMath.abs(x-x0) < FastMath.max(rtol * FastMath.abs(x1),
 if (FastMath.cmp(f1),
 if (x1 >= x0 && x1- x0) < FastMath.max(rtol * FastMath.abs(x1),
if (FastMath.abs(x1 - x0) < FastMath.max(rtol ) || FastMath.abs(x <
 if (f1 >= 0) { return x1; } if (f1 <= 0) { return x0; } if(
 switch (allowed) { case ANY_SIDE: return x1; case RIGHT_SIDE: {
if (inverted) if FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),
 if (f1 >= 0) { return x1; } else if (f1 <= 0) { if (f1 <= -
 if (FastMath.abs(x <=rtol * FastMath.abs(x1),
 if (f1 <= 0) { return x1; } else if (f1 >= 0) { return x1; } if (!
 switch (allowed) { case ANY_SIDE: x1 = x0; }
 if (FastMath.within(x, f,
if (FastMath.abs(x1 - x0) < FastMath.max(x1 - x0), x1 +
 if (f1 < ftol && FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),
if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x0 - x1) - 1,
if (FastMath.abs(x1 ) <= f0) && (f1 <=
if (FastMath.abs(x1 - x0) < FastMath.max(rtol *  sqrt(x1),
if (FastMath.abs(x1 - x0) <  ftol || f1 <
 if (within(x1),
 if (inverted) { x1 = x0; }
if (FastMath.abs(x1 -  x0) <= (f1 +
 if (FastMath.within(fx,x1),
if (FastMath.abs(x1 - x0) <  ftol || (f1 <
 if (f1 <= atol) && (FastMath.abs(x1),
if (FastMath.abs(x1 ) <= ftol || x1 <=
if (FastMath.abs(x1 - x0) <  ftol || FastMath.abs(x <=
 if (f1 < min(FastMath.abs(x1),
 if (f1 >= 0) { return x1; } else if (f1 <= 0) { if (f1 <>
 switch (allowed) { case ANY_SIDE: return x1; } } else:
if (FastMath.abs(x1 - x0) < FastMath.max(f1 - x,
if (FastMath.abs(x1 - x0) < FastMath.max(rtol ) || FastMath.abs(x <=
 switch (allowed) { case ANY_SIDE: x1:
if (FastMath.abs(f1) + abs(x) < FastMath.max(rtol * FastMath.abs(x1),
 if (inverted && (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),
 if (FastMath.compare(x1),
if (FastMath.abs(x1 - x0)) < FastMath.abs(x +
 if (f1 >= 0) { return x1; } else if (f1 <= 0) { return x0; } if(
 if (fastMath.abs(x1),
if (FastMath.abs(f1 - x0) < FastMath.max(rtol * FastMath.abs(x1),
 if (FastMath.within(x, f),
 if (f1 >= 0 && (FastMath.abs(x1),
if (FastMath.abs(x1 - x0) <= ftol || (f1 <=
if (FastMath.abs(f1 - x) < FastMath.max(rtol * FastMath.abs(x1),
if (FastMath.abs(x1 - x0) < FastMath.abs(x0 - x +
 if (FastMath.abs(fx1) < FastMath.max(rtol * FastMath.abs(x1),
if  (FastMath.abs(f <
 if (f1 <= 0) { return x1; } if (allowed) { return x1; } if (f1 <>
 switch (allowed) { case ANY_SIDE: x1++;
if (FastMath.abs(x1 - x0) <= ftol && (f1 <=
if (FastMath.abs
 if (FastMath.isBetween(x1),
 if (rtol * FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),
 if (x1 <= x0 || x1- x0) < FastMath.max(rtol * FastMath.abs(x1),
if (FastMath.abs(x1 - x0) < FastMath.max(x1 - x0), x0 +
 if (FastMath.abs(f1++,
 if (ftol* FastMath.abs(x1),
 switch (allowed) { case ANY_SIDE: x0 = x1; }
 if (FastMath.within(f,
 if (f1 >= 0 && FastMath.max(rtol * FastMath.abs(x1),
 if (atol <= ftol) if (FastMath.max(rtol * FastMath.abs(x1),
 if (inverted) { x1 = x0; } else {
if (FastMath.abs(f1, ftol) < FastMath.max(rtol * FastMath.abs(x1),
if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x)
 if (!inverted) && FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),
 if (x1 <= fx(FastMath.abs(x1),
 if (!inverted) { if(FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),
 switch (allowed) { case ANY_SIDE: return x0; }
 if (FastMath.integers(x1),
if (FastMath.abs(f1) < abs(x0) < FastMath.max(rtol * FastMath.abs(x1),
if (FastMath.abs(f1) <= -
if (FastMath.abs(x1 ) <= ftol || (f1 <=
if (FastMath.abs(x1 - x0) < FastMath.max(rtol *  ftol) * FastMath.abs(x1),
 if (FastMath.eq(x, f),
 if (F1 <= ftol && abs(x0) < FastMath.max(rtol * FastMath.abs(x1),
 if (inverted) { x1 = x0;
 if (Math.min(abs(x1),
 if (f1 < ftol* FastMath.abs(x1),
 if (abs(f) < FastMath.max(rtol * FastMath.abs(x1),
 if (FastMath.abs(fx1),
if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1 - x0)),
 if (f1 < FastMath.abs(x1),
if (FastMath.abs(x1 - x0) < FastMath.max(0,
 if ((x + 1) < FastMath.max(rtol * FastMath.abs(x1),
if (FastMath.abs(x1 ) <= (f1 +
 if (x0 < FastMath.max(rtol * FastMath.abs(x1),
 if (atol <= FastMath.max(rtol * FastMath.abs(x1),
 if (f1 <= 0 || FastMath.max(rtol * FastMath.abs(x1),
if  ((f1 - x) <=
 if ((x1 + 1- x0) < FastMath.max(rtol * FastMath.abs(x1),
 if (f1 <= ftol && f1< FastMath.max(rtol * FastMath.abs(x1),
if (FastMath.abs(f1) <= max(
if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1) - x0, x1 +
 if (allowed),
 if (FastMath.abs(f0),
 if (!inverted) if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),
 if (FastMath.abs(fx(x1),
 if (f1 <= ftol) if (FastMath.max(rtol * FastMath.abs(x1),
 if (FastMath.abs_abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),
 if (x1 < (x1- x0) < FastMath.max(rtol * FastMath.abs(x1),
if (FastMath.abs(x1 -  x0) < ftol && f1 <=
 if (f1 - x< FastMath.max(rtol * FastMath.abs(x1),
 switch (allowed) { case ANY_SIDE: return x1; } break; } } else
if (FastMath.abs(f1) < -
if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1 - x0) - ftol,
 if (FastMath.abs(x>rtol * FastMath.abs(x1),
 if (f1 <= ftol) { if(FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),
if  (FastMath.abs(x <
if (FastMath.abs(x1 - x0) <  ftol || (f1 <=
 if (f1 < ftol && abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),
 if (x1 <= Math.min(abs(x1),
if (FastMath.abs(x1 -  x0) < (f1 -
 if (FastMath.abs(x + f) < FastMath.max(rtol * FastMath.abs(x1),
if (FastMath.abs(x1 - x0) <  f1 && f1 <=
if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1 - x0) * ftol,
 if ((f1 - x0) < FastMath.max(rtol * FastMath.abs(x1),
 if (f1 <= Math.min(rtol * FastMath.abs(x1),
 if (f1 <= ftol) && (FastMath.abs(x1),
if (FastMath.abs(x1 - x0) < FastMath.max(rtol ) || FastMath.abs(f1 <
if (FastMath.abs(x1 - x0)  <= atol || FastMath.abs( <=
 if (x1),
 if (FastMath.in(fx,x1),
 if (x1 <= min(rtol * FastMath.abs(x1),
if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1 - x0) * ftol +
 if (FastMath.eq(x, f,
 if (f1 <= ftol*FastMath.max(rtol * FastMath.abs(x1),
if (FastMath.abs(x1 - x0)  <= atol && FastMath.abs() <=
if (FastMath.abs(x1 - x0) < FastMath.max(rtol *  ftol, FastMath.absAbs(x1),
if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x0 - x1) * ftol,
 if (x1 + (x1- x0) < FastMath.max(rtol * FastMath.abs(x1),
if (FastMath.abs(x1 - x0) < FastMath.max(rtol *  x1 - x0,
 switch (allowed) { case ANY_SIDE: return x1; case RIGHT_SIDE':
if  (FastMath.abs(f >=
if (FastMath.abs(x1 - x0) < FastMath.max(rtol , x1 +
 if (FastMath.min(abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),
 if (FastMath.inRange(x0,
 if (x1 >= 0 && Math.max(rtol * FastMath.abs(x1),
 if (x- x0) < FastMath.max(rtol * FastMath.abs(x1),
if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1 - x0)) || (f1 <=
if (FastMath.abs(f1) < ftol && x0) < FastMath.max(rtol * FastMath.abs(x1),
if (FastMath.abs(x1 - x0)) < FastMath.abs(x0 -
 if (f1 < ftol && (x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),
 if (FastMath.abs(x<rtol * FastMath.abs(x1),
if (FastMath.abs(x1 - x0)  <= ftol) { if (f1 <=
 if (FastMath.abs(f1++),
 if (x0 <= x <= FastMath.abs(x1),
 if (f< FastMath.max(rtol * FastMath.abs(x1),
 if (x1 - x1- x0) < FastMath.max(rtol * FastMath.abs(x1),
if (FastMath.abs(x1 -  x0) <= ftol *
if (FastMath.abs(x1 ) <= ftol && x1 <=
 if (f1 <= 0 && ftol* FastMath.abs(x1),
if (FastMath.abs(f1) - abs(x0) < FastMath.max(rtol * FastMath.abs(x1),
 if ((x0),
if (FastMath.abs(x1 - x0) <  ftol && (f1 <=
 if (x0 == FastMath.max(rtol * FastMath.abs(x1),
 if (FastMath.abs(x, 0) < FastMath.max(rtol * FastMath.abs(x1),
if (FastMath.abs(x1 - x0) < FastMath.fraction(
 if (F1 <= ftol && abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),
if  (FastMath.interval <=
 if (x1 < x0 || ((- x0) < FastMath.max(rtol * FastMath.abs(x1),
 if (inverted) { if (!FastMath.max(rtol * FastMath.abs(x1),
 if (FastMath(f1) < FastMath.max(rtol * FastMath.abs(x1),
 if (FastMath.absA(x0) < FastMath.max(rtol * FastMath.abs(x1),
if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1 - x0)) && (f1 <=
 if (FastMath.eq(x,
if (FastMath.abs(x1 - x0) < FastMath.max(rtol , x0 +
 switch (allowed) { case ALL_SIDE: return x1; }
 if (fastMath.max(rtol * FastMath.abs(x1),
 if (FastMath.absx1 - x0) < FastMath.max(rtol * FastMath.abs(x1),
 if (FastMath.compare(rtol * FastMath.abs(x1),
 if (FastMath.abs(Math.abs(x1),
 switch (allowed) { case ALL_SIDE: } else
 if (FastMath.abs(x + 1) < FastMath.max(rtol * FastMath.abs(x1),
 if (FastMath.eq(x1),
if (FastMath.abs(x1 - x0) < FastMath.max(rtol *  ftol*Math.abs(x1),
if (FastMath.abs(x1 - x0) < FastMath.max(f,
 if (inverted) { if (f1< FastMath.max(rtol * FastMath.abs(x1),
 if (FastMath.abs(min(x1),
 if (f1 <= ftol || f1< FastMath.max(rtol * FastMath.abs(x1),
if  (f1.abs <=
 if (inverted) if (FastMath.max(rtol * FastMath.abs(x1),
 if (fastMath.abs() < FastMath.max(rtol * FastMath.abs(x1),
 if (FastMath.inRange(f1,
 if (atol < ftol) {
if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1 - x0) + ftol,
 if (FastMath.abs(FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),
if (FastMath.abs(x1 - x0) <  ftol && (f1 <
if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x0 - x1) * ftol +
 if (x1 < FastMath.max(rtol * FastMath.abs(x1),
 if (FastMath.absN(x0) < FastMath.max(rtol * FastMath.abs(x1),
if (fx(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),
 if (atol < ftol) if (FastMath.max(rtol * FastMath.abs(x1),
 if (x1 <= x0 || ((- x0) < FastMath.max(rtol * FastMath.abs(x1),
 if (f1 <= fx(FastMath.abs(x1),
if (FastMath.abs(x1 - x0) < FastMath.max(x1) +
 if (f1 <= ftol) {
if (FastMath.abs(x1 - x0) < FastMath.max(rtol *  FastMath.rtol(x1),
 if (x) < FastMath.max(rtol * FastMath.abs(x1),
if  ((f1 - x <=
 if (F1 <= ftol && (x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),
 if (x1 <= (rtol * FastMath.abs(x1),
 if (FastMath.within(rtol * FastMath.abs(x1),
 if (inverted) { x0 = x1; }
 if (x1 + 1- x0) < FastMath.max(rtol * FastMath.abs(x1),
if (FastMath.abs(x1 - x0) <  atol || FastMath.abs(x >
if (FastMath.abs(x1 - x0)  <= atol && FastMath.abs( -
 if ((f) < FastMath.max(rtol * FastMath.abs(x1),
 if (f1 >= 0 && Math.max(rtol * FastMath.abs(x1),
 if (FastMath.abs(fx-x1),
if (FastMath.abs(x1 - x0) < FastMath.max(x0, x +
 if (FastMath.abs(f1x0) < FastMath.max(rtol * FastMath.abs(x1),
 if ((f1 + 1) < FastMath.max(rtol * FastMath.abs(x1),
 if ((x1 - 1- x0) < FastMath.max(rtol * FastMath.abs(x1),
if (FastMath.abs(x1 -  fx <=
if (FastMath.abs(x1 -  x0) <= ftol +
 if (f1 <= max(rtol * FastMath.abs(x1),
if (FastMath.abs(x1 - x0)) < FastMath.abs(f1 -
 if ((f1 < 0),
 if (x0 <= Math.max(rtol * FastMath.abs(x1),
 } else { if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),
 if (f1 <= 0 && FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),
if (FastMath.abs(f1) <= ftol || (x) < FastMath.max(rtol * FastMath.abs(x1),
if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1) - x0, 0,
if (FastMath.abs(x1 -  fx) <=
 if (included(Math.abs(x1),
 if (atol > 0) {
if (FastMath.abs(x1 ) <= abs(
 if (f1 <= 0 && (x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),
if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1) - x0, x1 - x0 +
 if (f1<< FastMath.max(rtol * FastMath.abs(x1),
 if (FastMath.min(rtol * FastMath.abs(x1),
 if (f1 <= (x1- x0) < FastMath.max(rtol * FastMath.abs(x1),
 if (fastMath.abs(- x0) < FastMath.max(rtol * FastMath.abs(x1),
 if (f1 < (rtol * FastMath.abs(x1),
if (FastMath.abs(x1 - x0) <  f1 && f1 <
if (FastMath.abs(f1) < ftol && (x) < FastMath.max(rtol * FastMath.abs(x1),
if (FastMath.abs(x1 - x0) < FastMath.max(x,
if (FastMath.abs(x1 - x0) < FastMath.max(rtol *  ftol) && (f1 <=
 if (f1 >= 0 && f1< FastMath.max(rtol * FastMath.abs(x1),
if (FastMath.abs(x1 - x0) <  ftol) { if (f1 <=
 if (inverted) || FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),
if (FastMath.abs(x1 - x0) <  ftol) { if (f1 <
 if (FastUtils.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),
if (FastMath.abs(x1 - x0)) < FastMath.abs(f1
 switch (allowed) { if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),
 if ((x0, x) < FastMath.max(rtol * FastMath.abs(x1),
 if (f1 < (ftol* FastMath.abs(x1),
 if (!inverted && FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),
 if (f1 <= ((FastMath.abs(x1),
 if ((Math.abs(x1),
 if (x1 <= x0 && (- x0) < FastMath.max(rtol * FastMath.abs(x1),
if (FastMath.abs(x1 - x0) < FastMath.max(rtol ) || FastMath.abs(x0 <
 if (within(x1,
 if (FastMath.abs(abs),
 if ((f1 >= 0),
if (FastMath.abs(x1 ) <= f1.abs(
 if (f1 < FastMath.min(rtol * FastMath.abs(x1),
if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1 - x0)) * (f1 -
if (FastMath.abs(x1 -  x0) < (f1 +
if (FastMath.abs(x1 - x0) < FastMath.abs(1 -
 if (f1 < Math.max(rtol * FastMath.abs(x1),
if (FastMath.abs(x1 - x0) < FastMath.max(rtol *  ftol)*Math.abs(x1),
 if (inverted) { if (x1< FastMath.max(rtol * FastMath.abs(x1),
if (FastMath.abs(x1 - x0) < FastMath.abs(f
if (FastMath.abs(x1 -  x0) <= fx +
if (FastMath.abs(x1 - x0) < FastMath.abs(f1 +
 if (f1 <= Math.abs(x1),
 if (f1 <= ftol(* FastMath.abs(x1),
 if (f1 <=rtol * FastMath.abs(x1),
 if (x1 <= x0 && ((- x0) < FastMath.max(rtol * FastMath.abs(x1),
 if (x0 <= min(rtol * FastMath.abs(x1),
if (FastMath.abs(x1 - x0) < FastMath.max(rtol *  f1 - x0,
 if (f1 <= ftol && (FastMath.abs(x1),
 if (f1 <= fx(* FastMath.abs(x1),
 if (f1 >= 0) && abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),
 if (f1 <= ftol && x1< FastMath.max(rtol * FastMath.abs(x1),
 if (FastMath.intersect(abs(x1),
if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.rtol +
 if (x< FastMath.max(rtol * FastMath.abs(x1),
if (FastMath.abs(x1 -  x0) < ftol *
if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1 - x0) * 2,
if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1) - x0),
 if (allowed,
if  (FastMath.abs() <=
if (FastMath.abs(x1 - x0)  <= ftol && f1 <= x1 <=
 if (inverted) { return x1; } else:
 if (FastMath.abs(fx1 - x0) < FastMath.max(rtol * FastMath.abs(x1),
if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1 - x0*),
 if (F1 <= Math.min(rtol * FastMath.abs(x1),
 if (x1 <= Math.max(rtol * FastMath.abs(x1),
 if (f1 <= 0 && x< FastMath.max(rtol * FastMath.abs(x1),
 if (fastMath.abs(x),
 if ((x1 + x1- x0) < FastMath.max(rtol * FastMath.abs(x1),
if (FastMath.abs(x1 -  x0) <= f1 +
 if (!inverted) {
 if (inverted && FastMath.abs(x1),
 if ((allowed),
if (f1 <= ftol) && abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),
if (FastMath.abs(x1 - x0) < FastMath.max(rtol , x0) +
if (FastMath.abs(f1) <= (int
 if (f1 <= ftol(rtol * FastMath.abs(x1),
 if (f1 <= atol*(FastMath.abs(x1),
 if (x1 < x0 && (- x0) < FastMath.max(rtol * FastMath.abs(x1),
 if (FastMath.max(abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),
if (FastMath.abs(x0), x1) < FastMath.max(rtol * FastMath.abs(x1),
 if (fastMath.absAbs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),
 if (f1(x0) < FastMath.max(rtol * FastMath.abs(x1),
if (fastMath.abs(f1) <>
if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1 - 0),
 if (inverted) return x1;
if (FastMath.abs(x1 -  x0) <= (f1 *
 if ((x0 + x) < FastMath.max(rtol * FastMath.abs(x1),
if (FastMath.abs(x0 - x) < FastMath.max(rtol * FastMath.abs(x1),
 if ((x1) < FastMath.max(rtol * FastMath.abs(x1),
 if (!inverted) { if (Math.max(rtol * FastMath.abs(x1),
if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x0 - x1) * 2,
 if (f1 <= ftol && x< FastMath.max(rtol * FastMath.abs(x1),
 if (f1 <= ftol && f1* FastMath.abs(x1),
 if (inverted) { if (x<FastMath.max(rtol * FastMath.abs(x1),
 if (f1 <= atol) && ((FastMath.abs(x1),
 if (f1 <= 0 && (ftol* FastMath.abs(x1),
 if (FastMath.abs(frac),
if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(),
 if (atol <= ftol) if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),
 if (f1 <= ftol && fx* FastMath.abs(x1),
 if (x1 <= FastMath.abs(x1),
 if (inverted) { if (Math.max(rtol * FastMath.abs(x1),
if (FastMath.abs(x1 - x0) <  atol && f1 - x <
 if ((ftol* FastMath.abs(x1),
if (FastMath.abs(x1 - x0) <  ftol && f1 <= x <
 if (f1 <= atol && (FastMath.abs(x1),
if (FastMath.abs(x1 - x0)) < FastMath.abs(x0 +
 if (fastMath.abs(x <=rtol * FastMath.abs(x1),
if (FastMath.abs(x1 ) < (f1 -
if (FastMath.abs(f1) + ftol) < FastMath.max(rtol * FastMath.abs(x1),
if  (f1 <
if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1 - x0)) * ftol +
 if (f1 + 1< FastMath.max(rtol * FastMath.abs(x1),
if (FastMath.fraction <=
 if (() < FastMath.max(rtol * FastMath.abs(x1),
if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x -
if (FastMath.abs(x1 - x0) < FastMath.max(rtol *  ftol) && f1 <=
 if (f1 <= 0) < (rtol * FastMath.abs(x1),
 if (f1 < min(rtol * FastMath.abs(x1),
if (FastMath.abs(x1 - x0) < FastMath.max(x1 - x0, x +
if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(f1),
 switch (allowed) { case ANY_SIDE: return x0; else
if (FastMath.abs(x0) + abs(x) < FastMath.max(rtol * FastMath.abs(x1),
 if (f1 <= atol) || (FastMath.abs(x1),
 if ((x1*- x0) < FastMath.max(rtol * FastMath.abs(x1),
 if (f1 >= 0 && ftol* FastMath.abs(x1),
 if (inverted) return x1; if(FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),
 if (FastMath.lt(rtol * FastMath.abs(x1),
 if (x0 <= (rtol * FastMath.abs(x1),
 if ((x) < FastMath.max(rtol * FastMath.abs(x1),
 if (x0, x1< FastMath.max(rtol * FastMath.abs(x1),
 if (atol < ftol) if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),
if (FastMath.abs(f1) <= ftol(x) < FastMath.max(rtol * FastMath.abs(x1),
 else { if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),
if (FastMath.abs(x0) - x1) < FastMath.max(rtol * FastMath.abs(x1),
 if (f1 <= ftol || abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),
if (FastMath.abs(x1 - x0)  <= ftol && f1 <= x <=
if (FastMath.abs(x1 -  x0) <= abs(
 if (inverted) { return x1;
 if (x1 <= ftol* FastMath.abs(x1),
 if (f1 < FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),
 if (f1 <= ftol * Math.max(rtol * FastMath.abs(x1),
 if (f1 < 2* FastMath.abs(x1),
if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1) - x0, x1 -
 if (f1 <= atol) if ((FastMath.abs(x1),
if (FastMath.abs(x1 ) <= fx +
if (FastMath.abs(f1) - (0) < FastMath.max(rtol * FastMath.abs(x1),
 if (f1 <= 0 && abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),
 if (f1 * FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),
 switch (allowed) { case 0: if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),
 if ((x0 <= FastMath.abs(x1),
if (fastMath.abs <=
 if (FastMath.integers(rtol * FastMath.abs(x1),
if (FastMath.abs(x1 - x0) < FastMath.max(rtol *  ftol, FastMath.absabs(x1),
if (FastMath.abs(x1 - x0) < FastMath.max(rtol *  x0, FastMath.rtol(x1),
if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1) - x0, x1) +
if (FastMath.abs(x1 - x0) <  ftol && f1 <= 0 <=
if (FastMath.abs(x1 - x0) < FastMath.max(rtol , f1) && f1 <=
if (FastMath.abs(x1 - x0) <  ftol && f1 <= x1 <
if (FastMath.abs(x1 - x0) <  ftol && f1 <= x1 <=
if (FastMath.abs(x1 ) <= fx -
if (FastMath.abs(x1 ) <= ftol) && (f1 <
 if (inverted) { x1 = x; }
 if (f1 <= FastMath.acos(x1),
if (FastMath.abs(x1 - x0) <  ftol && f1 <= x0 <
if (FastMath.abs(x1 - x0) < FastMath.max(rtol *  ftol) || (f1 <=
if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1) - x0 + 1,
if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1) + x0,
 if (f1 + ftol< FastMath.max(rtol * FastMath.abs(x1),
if (FastMath.abs(f1) <= ftol && allowed <=
 if (x1 <= MathUtils.max(rtol * FastMath.abs(x1),
if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1) - x0, x0 +
if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1 - x0), x0 +
 if (FastMath.absabs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),
 if (!inverted) { if ((x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),
if (FastMath.abs(x1 - x0) < FastMath.max(rtol *  x0, x1 +
 if (f1 >= 0) && (x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),
if (FastMath.abs(x1 - x0) < FastMath.max(rtol , f1 - x0 +
if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x0 - x1)),
if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1) - x0) -
 if ((f1 - 0) < FastMath.max(rtol * FastMath.abs(x1),
 if (inverted) if (f1< FastMath.max(rtol * FastMath.abs(x1),
if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1 - x)
 else if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),
if (FastMath.abs(f1) <= ftol && x <=
 if (x1 <= ftol*FastMath.max(rtol * FastMath.abs(x1),
if (FastMath.abs(x1 - x0) < FastMath.max(rtol ) && f1 < FastMath.max
 if (FastMath.abs(),
 if (isWithin(x,
 if (f1 < FastMath.abs(rtol * FastMath.abs(x1),
if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1 - x0) - fx, 0,
 if (f1 < ftol && (FastMath.abs(x1),
if (FastMath.abs(x1 - x0) < FastMath.max(rtol *  ftol) && f1 < ftol *
if (FastMath.abs(x1 - x0) < FastMath.abs(x <=
 if (f1 <= ftol || FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),
if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1 - x0)) && (f1 <
if (FastMath.abs(f1) * (x0) < FastMath.max(rtol * FastMath.abs(x1),
if (FastMath.abs(x1 - x0) < FastMath.max(rtol *  x0, x1 - x0 +
if (FastMath.abs(f1) <= ftol && f <=
 if (x1<- x0) < FastMath.max(rtol * FastMath.abs(x1),
 if (within(f1,
 if (f1 < ftol(FastMath.abs(x1),
 if (inverted) { } else if(FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),
if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1 - x0)) * (f1 +
if (FastMath.abs(x1 - x0) < FastMath.max(rtol )) { if (f1 <= 0 <=
 if (f1 <= (fx* FastMath.abs(x1),
 if (f1 < Math.min(rtol * FastMath.abs(x1),
 if (afol <= Math.max(rtol * FastMath.abs(x1),
 if (f1 >= 0 && x< FastMath.max(rtol * FastMath.abs(x1),
 if (f1 <= Math.FastMath.abs(x1),
if (FastMath.abs(x1 -  x0) <= f1.abs(-
if (FastMath.abs(x1 - x0) < FastMath.max(x1 - x0, 1 +
 if (f1 <= Math.min(max(rtol * FastMath.abs(x1),
 if (abs(f1),
if (FastMath.abs(x1 ) <= fx <=
if (FastMath.abs(x1 - x0) < FastMath.max(x1 - x0, abs(
 if (f1 <= atol(rtol * FastMath.abs(x1),
if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1 - x0) - f1, 0,
 if (f1 - x1< FastMath.max(rtol * FastMath.abs(x1),
 if (inverted || FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),
 if (inverted) { if (x>FastMath.max(rtol * FastMath.abs(x1),
if (FastMath.abs(x1 - x0) <  f1.abs(
if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x)+
if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1 - x0), x1 +
if (FastMath.abs(x1 - x0) < FastMath.max(rtol *  FastMath.absabs(x1),
if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1 - x0) <=
 if (f1 <= ftol*2* FastMath.abs(x1),
 if (f0 <= ftol* FastMath.abs(x1),
if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1 - x0++),
if (FastMath.abs(f1) < abs(x1) < FastMath.max(rtol * FastMath.abs(x1),
if (FastMath.abs(x) <=
if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1) - x0, 1 -
if (FastMath.abs(x1 - x0) < FastMath.max(rtol , x0) -
 if (f1 <= Math.acos(abs(x1),
 if (atol <= ftol*FastMath.max(rtol * FastMath.abs(x1),
 if (FastMath.fabs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),
 if (f1),
if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1 - x,
 if (f1 <= FastMath.min(rtol * FastMath.abs(x1),
 if (FastMath.instride(x1),
 if (fastMath.abs(f) < FastMath.max(rtol * FastMath.abs(x1),
 if (included(FastMath.abs(x1),
 switch (allowed) { case ANY_SIDE: }
 if (x1,
if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1) - x0 +
 if ((f1 > 0),
 if ((x1,
if (FastMath.abs(x1 - x0) <  ftol && f1 <= x <=
if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x +
if (FastMath.abs(x1 - x0) <  atol || (f1 <=
if (FastMath.abs(x1 - x0) < FastMath.max(rtol *  x0,
if (FastMath.abs(x1 - x0) < FastMath.max(f1) +
 if (fast.abs(x0) < FastMath.max(rtol * FastMath.abs(x1),
 if (isWithin(FastMath.abs(x1),
 if (x1 <= fx(Math.abs(x1),
 if (!FastMath.abs(x1),
if (FastMath.abs(f1) - f0) < FastMath.max(rtol * FastMath.abs(x1),
if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1) - x0, x0 - x1 +
 if (f1 >= 0) && < (rtol * FastMath.abs(x1),
 if (Math.min(x1),
 if ((f1-x1),
if (FastMath.abs(x1 - x0) <  ftol && f1 <= 0 <
 } else { if (Math.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),
 if (CompareFastMath.abs(x1),
if (f1 >= 0 && abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),
 if (atol * (x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),
 if (x1 (<- x0) < FastMath.max(rtol * FastMath.abs(x1),
 if ((f1,
 if (((x1),
if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1) - x0, x1 - x0 -
 if (f1 <= 0 || abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),
 if (f1* FastMath.abs(x1),
if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1) - x0, x0 + x1 +
 if (f1 <= ftol * min(rtol * FastMath.abs(x1),
if (FastMath.abs(x1 - x0) < FastMath.max(rtol *  ftol*FastMath.absAbs(x1),
if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1) - x0, x1 + x0 +
if (FastMath.abs(f1) > -
 if (inverted)
if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1) - x0, x1 - x +
if (FastMath.abs(x1 - x0) < FastMath.max(rtol , f1) +
 if (f1 <= ftol * (2* FastMath.abs(x1),
 if (SafeMath.min(abs(x1),
 if ((FastMath.abs(x0) < FastMath.max(rtol * FastMath.abs(x1),
 if (f1 <= 0) && < (rtol * FastMath.abs(x1),
 if ((-x1),
 if (f1 <= ftol && min(rtol * FastMath.abs(x1),
if (FastMath.abs(x1 - x0)  <= ftol && f1 <= 0 <=
 if (x1 + fx< FastMath.max(rtol * FastMath.abs(x1),
if (FastMath.abs(x1 - x0) < FastMath.max(rtol ) && f1 < FastMath.min
 if (atol <= FastMath.minmax(rtol * FastMath.abs(x1),
if (FastMath.abs(x1 -  x0) <= f1.abs(),
 if (f1 <= atol<(FastMath.abs(x1),
 if (f1 <= 0 || f< FastMath.max(rtol * FastMath.abs(x1),
 if (inverted) && FastMath.eq(rtol * FastMath.abs(x1),
if (FastMath.abs(x1 ) <= ftol) || (f1 <
 if ((x + f) < FastMath.max(rtol * FastMath.abs(x1),
if (FastMath.abs(x1 - x0) < FastMath.max(rtol *  ftol) && f1 <
 if ((f1 <= x0),
if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1 - x0)) && f1 <= 0,
if (FastMath.abs(x1 ) <= (1 -
if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1) - x0) * ftol,
 if (inside(FastMath.abs(x1),
 if (atol <= Math.min(max(rtol * FastMath.abs(x1),
 if (included(x,
if (FastMath.abs(x1, ftol) < FastMath.max(rtol * FastMath.abs(x1),
 if (FastMath.inRange(rtol * FastMath.abs(x1),
 if (floor(x1),
if (FastMath.abs(x1 - x0) < FastMath.acos(
if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1 - x0)) && f1 <= 0 <=
if (FastMath.abs(x1 - x0) < FastMath.max(rtol , f1) -
 if (f1 <= ftol) < (rtol * FastMath.abs(x1),
if (FastMath.abs(x1 - x0) < FastMath.max(rtol *  ftol) && (f1 <
if (FastMath.abs(x1 - x0) < FastMath.max(rtol *  x0, x1 * x1 +
 if (x0 == Math.max(rtol * FastMath.abs(x1),
 if (f1 <= atol) < (rtol * FastMath.abs(x1),
 if (!inverted) if ((x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),
 if (f1 < FastMath.acos(x1),
 if (inverted) { x0(FastMath.max(rtol * FastMath.abs(x1),
if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1) - x0), x1 +
 if (fastMath.eq(rtol * FastMath.abs(x1),
 if (atol <= FastMath.softmax(rtol * FastMath.abs(x1),
if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1 - x1) +
if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1) - x0 - 1,
 if (fastMath.abs(x0) < FastMath.max(rtol * FastMath.abs(x1),
 if (f1 <= ftol && (2* FastMath.abs(x1),
if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1 - x0)) && f1 < 0,
if (FastMath.abs(f1) >= ftol && f <=
if  (f1 <= abs(
if (FastMath.abs(x1 - x0) < FastMath.max(rtol *  (f1 -
 if (within(x0,
if (FastMath.abs(x1 - x0) < FastMath.max(rtol , f1 - x0 -
 if (inverted) { if (!==FastMath.max(rtol * FastMath.abs(x1),
 if (f1 <= ftol) { if(rtol * FastMath.abs(x1),
 if (f1 <= Math.matches(abs(x1),
if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1) - x0) * (f1 -
 if (f1 >= 0 && f< FastMath.max(rtol * FastMath.abs(x1),
if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1) - x0), x0 +
 if (F1 <= 0 && abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),
 if (x1 == Math.max(rtol * FastMath.abs(x1),
 if (f1 <= 0 && f< FastMath.max(rtol * FastMath.abs(x1),
if (FastMath.abs(x1 - x0) < FastMath.max(rtol *  ftol) && f1 <= x0 +
if (FastMath.abs(x1 - x0) < FastMath.max(rtol )) { if (f1 <>
 if (inclusive(Math.abs(x1),
 } else if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),
if (FastMath.abs(x1 ) <= (fx -
 if (f1 <= ftol(2* FastMath.abs(x1),
 if (x1 + (- x0) < FastMath.max(rtol * FastMath.abs(x1),
 if (Math.min(rtol * FastMath.abs(x1),
 if (f1 <= Math.ceil(abs(x1),
if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1 - x0), 0,
 if (Math.within(x1),
if (FastMath.abs(x1 ) <= ftol || (f1 <
if (FastMath.abs(x1 ) <= f1 <=
 if (f1 <= ftol) if ((x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),
if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1 + x0),
if (FastMath.abs(x1 - x0) < FastMath.max(rtol ) && f1 <= x0 +
 if (FastMath.rtol(abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),
 if (SafeMath.within(abs(x1),
 if (x1 * x- x0) < FastMath.max(rtol * FastMath.abs(x1),
 if (f1 <= MathUtils.max(rtol * FastMath.abs(x1),
if (FastMath.abs(f1) - (x) < FastMath.max(rtol * FastMath.abs(x1),
 switch (allowed) { case 0: } if(FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),
if (FastMath.abs(f1 - 0) < FastMath.max(rtol * FastMath.abs(x1),
if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1) - x0, x0 + 1,
if (inverted) { if (fx(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),
if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs() +
if (FastMath.abs(x1 - x0) < FastMath.max(rtol , f1) && f1 <
if (FastMath.abs(x1 - x0)  <= ftol || f1 <= 0 <=
 if (inverted) return x1; else
 if (inverted) { x1(FastMath.max(rtol * FastMath.abs(x1),
 } else { if FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),
 if (FastMath.isEqual(rtol * FastMath.abs(x1),
if (FastMath.abs(f1) <= ftol && 0 <=
 if (isWithin(x1),
if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs() -
if (FastMath.abs(x1 -  x0) <
 if (FastMath.isEq(rtol * FastMath.abs(x1),
if (FastMath.abs(x1 - x0) < FastMath.max(rtol ) && f1 < FastMath.
 if (f1!< FastMath.max(rtol * FastMath.abs(x1),
if (FastMath.abs(x1 ) < (f1 +
 if ((-rtol * FastMath.abs(x1),
 if (f1 < ftol)
 if (Math.abs(x),
if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1) - x0) <
if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1) - x0, x0 + 1 -
if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1) - x0, x1 + 1 -
 if (FastMath.intAbs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),
 if (inverted) && FastMath.within(rtol * FastMath.abs(x1),
if (FastMath.abs(x1 - x0) < FastMath.max(rtol ) || (f1 <=
 if (inverted) { if(-FastMath.max(rtol * FastMath.abs(x1),
 if (inverted) && FastMath.min(rtol * FastMath.abs(x1),
 switch (allowed) { case ANY_SIDE: else
 if (isWithin(x1,
if (FastMath.abs(x1 - x0) < FastMath.max(rtol , f1 -
 if (FastFastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),
if (FastMath.abs(x1 - x0) < FastMath.max(x1) -
if (FastMath.abs(f1) <= (x0) < FastMath.max(rtol * FastMath.abs(x1),
 if (!FastMath.max(rtol * FastMath.abs(x1),
 if (x0 <= ftol* FastMath.abs(x1),
 if (true,
if (FastMath.abs(x1 - x0) < FastMath.max(rtol , x0 -
 if (FastMath.absAgo(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),
if (FastMath.abs(x1 - x0) < FastMath.max(rtol *  ftol) && f1 <= 0,
 if (inverted) { if (f< FastMath.max(rtol * FastMath.abs(x1),
 if (allowed* FastMath.abs(x1),
 switch (allowed) if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),
if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1) - x0) * ftol +
if (FastMath.abs(x1 - x0) < FastMath.max(1,
if (FastMath.abs(x1 - x0) < FastMath.max(rtol , f1 - x0,
if (FastMath.abs(x1 - x0) < FastMath.max(rtol *  ftol) && FastMath.abs( <=
 if (x1 <= x1<- x0) < FastMath.max(rtol * FastMath.abs(x1),
if (FastMath.abs(x1 - x0) < FastMath.max(rtol  - 1,
if (FastMath.abs(x1 - x0)  <= ftol && f1 < 0 <=
 if (f1 <= atol) && (rtol * FastMath.abs(x1),
if (FastMath.abs(x1 - x0) < FastMath.max(rtol *  ftol) && f1 < 0,
 if (FiniteFastMath.abs(x1),
 if (allowed <= Math.max(rtol * FastMath.abs(x1),
if (FastMath.abs(x1 - x0) < FastMath.max(rtol *  x1 - x0) +
if (FastMath.abs(x1 -  f0) <=
 if (inverted) && FastMath.lt(rtol * FastMath.abs(x1),
 if (x1 < (rtol * FastMath.abs(x1),
 if (x1 <= MathUtil.max(rtol * FastMath.abs(x1),
 if (inclusiveFastMath.abs(x1),
 if (fastMath.abs(FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),
if  (x <=
 if ((x - 1) < FastMath.max(rtol * FastMath.abs(x1),
if (FastMath.abs(x1 - x0) < FastMath.max(rtol *  ftol, x0 *
if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1) - x0, x0) +
if (FastMath.sqrt(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),
 } if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),
if (FastMath.abs(x1 - x0) < FastMath.max(rtol *  FastMath.acos(x1),
if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1) + 1,
 if ((ftol),
 if (FastMath.within(,
if (FastMath.abs(x1 - x0) < FastMath.max(rtol *  ftol) && f1 <= x0 <=
if (FastMath.abs(x1 - x0)  <= ftol && (f1 <
 if (f1 <= 0xFastMath.max(rtol * FastMath.abs(x1),
 if (f1 - x0< FastMath.max(rtol * FastMath.abs(x1),
if (FastMath.abs(x1 - x) < FastMath.max(rtol * FastMath.abs(x1),
 if (f) < FastMath.max(rtol * FastMath.abs(x1),
if (FastMath.abs(x1 - x0) < FastMath.max(rtol *  ftol) && f1 >= 0,
 if (FastMath.intersection(x1),
if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1) - x0, x1) -
if (FastMath.abs(x1 - x0) < FastMath.max(rtol *  ftol) && f1 <= x1 +
 if (x0 <= x<FastMath.max(rtol * FastMath.abs(x1),
 if (fx <= 2* FastMath.abs(x1),
 if (f1 <= ftol)
 if (fastMath.compare(rtol * FastMath.abs(x1),
if (FastMath.abs(x1 - x0) < FastMath.max(rtol *  ftol) || (f1 <
 if (2* FastMath.abs(x1),
 if (TestFastMath.abs(x1),
 if (Math.abs(f),
if (FastMath.abs(x1 - x0) < FastMath.max(rtol *  ftol) || f1 <=
if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1 - x0 +
if (FastMath.abs(x1 - x0)  <= ftol || (f1 <
 if (f1<* FastMath.abs(x1),
if (FastMath.abs(x1 - x0) <  ftol +
if (FastMath.abs(x1 - x0) < FastMath.max(rtol *  x0 + 1,
 if (Math.eq(rtol * FastMath.abs(x1),
 if (f1 * (x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),
if  ((f1 <>
if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs()
 if (fastMath.absx1 - x0) < FastMath.max(rtol * FastMath.abs(x1),
 if (rtol(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),
 if (true),
if (FastMath.abs(x1 - x0) < FastMath.max(rtol , x1 -
 if (FastMath.isWithin(x1),
if (FastMath.abs(x1 ) <= f1.abs(-
if (FastMath.abs(x1 ) <= ftol || (f1 >
 if (!inverted) && ((x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),
if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1) - 1,
 if (abs(x),
 if (FastMath.Eq(rtol * FastMath.abs(x1),
 if (x1 <=rtol * FastMath.abs(x1),
 if (FastMath.isInInterval(x1),
 if (x1 <= 0xFastMath.max(rtol * FastMath.abs(x1),
 if (f1 FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),
if (FastMath.abs(x1 - x0) < FastMath.max(rtol *  f1,
if (FastMath.abs(x1 - x0) < FastMath.max(rtol *  x0, x1 -
 if (!inverted) { } else if(FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),
if (FastMath.abs(x1 - x0) < FastMath.max(rtol *  ftol) && (f1 >=
 if (x1 <= -FastMath.max(rtol * FastMath.abs(x1),
 if (f1 <= FastMath.fmin(x1),
if (FastMath.abs(x1 - x0) < FastMath.max(rtol *  fx,
 if ((FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),
 if ((x1 - fx0) < FastMath.max(rtol * FastMath.abs(x1),
 if (inverted) return x1; } else
 if (included(x1),
 if (inverted) return x1; else:
if (FastMath.abs(x1 - x0) < FastMath.max(rtol *  x0, x1) +
 if (f1 <= 10* FastMath.abs(x1),
if (FastMath.abs(x1 ) <= ftol || (f1 >=
if (FastMath.abs(x1 - x0) < FastMath.max(rtol *  FastMath.absN(x1),
 if (),
if (FastMath.abs(x1 -  x0) <= fx
 if (in (Math.abs(x1),
 if (x1==FastMath.max(rtol * FastMath.abs(x1),
 if ((f1 < (x1),
 if (eq(x,
if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1) + x0) +
if (FastMath.abs(x1 -  x0) <= ftol && allowed <=
 if (!inverted)
 if (f1>< FastMath.max(rtol * FastMath.abs(x1),
 if (f1 <= fmax(rtol * FastMath.abs(x1),
if (FastMath.abs(x1 -  x0) <= tolerance *
if (FastMath.abs(f1) <= ftol || (*) < FastMath.max(rtol * FastMath.abs(x1),
if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1) - 0,
 if (fx< FastMath.max(rtol * FastMath.abs(x1),
 if (inverted) { } if(FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),
 if (x0 <= -FastMath.max(rtol * FastMath.abs(x1),
 if (return FastMath.max(rtol * FastMath.abs(x1),
 if (inverted) { if (0*FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),
 switch (allowed) { case 0: } else
 if ((f1 <= (x1),
 if (x0 - x< FastMath.max(rtol * FastMath.abs(x1),
if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1) - x0) <=
 if (x0 + 1< FastMath.max(rtol * FastMath.abs(x1),
if (FastMath.abs(x0 + x) < FastMath.max(rtol * FastMath.abs(x1),
 if (isWithin(f1,
 if (f1<rtol * FastMath.abs(x1),
if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1) + fx,
 if (eq(x1),
if  (f1 <= -
 if (f1 <=< FastMath.max(rtol * FastMath.abs(x1),
 switch (allowed) { case true: } if(FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),
if (FastMath.abs(x1 - x0) < FastMath.abs(x1 + x0) <>
if (FastMath.abs(x1 - x0) < FastMath.abs(x0 - x1) <>
 if ((* FastMath.abs(x1),
 if (allow) if (max(rtol * FastMath.abs(x1),
 if (Math.within(x,
 if (x1 >= 0xFastMath.max(rtol * FastMath.abs(x1),
if (FastMath.abs(x1 - x0) < FastMath.abs(x1 - x1) <>
 if (x1>FastMath.max(rtol * FastMath.abs(x1),
if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1 - x0) * -
 if (f1 <= tolerance* FastMath.abs(x1),
 if (FastUtil.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),
 if (abs(f),
if  (f1 <>
 if (inverted) && abs(FastMath.abs(x1),
 if (x0 <=rtol * FastMath.abs(x1),
 if (atol <= min(FastMath.abs(x1),
if (FastMath.abs(x1 -  x0) <= (int
if (FastMath.abs(x1 - x0) < FastMath.max(f1) -
 if ((fx) < FastMath.max(rtol * FastMath.abs(x1),
if (FastMath.abs(x1 - x0) < FastMath.max(rtol *  x1,
if (FastMath.abs(x1 -  x0) < float(
if (FastMath.abs(x1 - x0) < FastMath.max(rtol , f1 + 1 -
if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1 - x0), 1 -
 if (in FastMath.abs(x1),
 if (!inverted && abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),
if (FastMath.abs(x1 - x0) < FastMath.max(rtol ) || (f1 <
 if (floor(x),
if (FastMath.abs(x1 - x0) < FastMath.max(rtol  + 1,
 if (within(f,
if (FastMath.abs(x1 - x0)  <= ftol || (f1 >
 if (within(x),
if (FastMath.within
if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.rtol *
 if (rtol*x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),
 if (int(rtol)*FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),
if (FastMath.abs(x1 - x0) < FastMath.max(rtol *  f1 - 1,
 if (f1 <= x< FastMath.max(rtol * FastMath.abs(x1),
if (FastMath.abs(x1 - x0) < FastMath.abs(x1 - x0) <>
 if ((-abs(x1),
if (FastMath.abs(x1 - x0) < FastMath.max(rtol *  f1) +
if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1 - x0)) * -
if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1 + x),
if (FastMath.abs(x1 ) <= ftol && f <=
if (FastMath.abs(x1 - x0) < FastMath.max(rtol , fx) +
if (FastMath.abs(x1 - x0) < FastMath.max(rtol ) && f1 <= 0 <
if (FastMath.abs(x1 - x0) < FastMath.max(rtol *  x0, 0,
if (FastMath.abs(x1 - x0) < FastMath.max(rtol *  ftol + 1,
if (FastMath.abs(x1 - x0) <  (f1 *
 if (checkInterval(x1),
 if (integers(x1),
if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x0 - x1) * -
if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1) + f1,
 if ((f0) < FastMath.max(rtol * FastMath.abs(x1),
if (FastMath.abs(x1 - x0) < FastMath.max(rtol , f1 - x +
 if (inverted) && floor(FastMath.abs(x1),
 if (rtol(x0) < FastMath.max(rtol * FastMath.abs(x1),
if (FastMath.abs(x1 ) < abs(
if  ((f1 <
 if (FastMath.(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),
if (FastMath.abs(x1 - x0) < FastMath.max(rtol *  (f1 +
 if (!Math.max(rtol * FastMath.abs(x1),
 if (0 < FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),
if (FastMath.abs(x1 - x0) <  (1 -
if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.rtol -
 if (isWithin(x0,
 if (f1 <= abs(FastMath.abs(x1),
 if (within(range,
 if (f1 <=* FastMath.abs(x1),
if (FastMath.abs(x1 - x0) < FastMath.max(f1) *
if (FastMath.abs(x1 - x0) < FastMath.max(rtol ) && f1 <= 0 <=
 if (math.abs(x1),
if  (f <
 if (validate(FastMath.abs(x1),
 if (FastMath.within(fx(x1),
 if(fabs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),
 if (f1 < fmax(rtol * FastMath.abs(x1),
 } else { if (abs(x0) < FastMath.max(rtol * FastMath.abs(x1),
 if (1* FastMath.abs(x1),
if (FastMath.abs(x1 ) <= f1.abs(),
 if ((fx* FastMath.abs(x1),
if (FastMath.abs(x1 ) <= ftol || (f1 ==
if (FastMath.abs(x1 - x0) < FastMath.finite(
 if (x1<rtol * FastMath.abs(x1),
 if (inverted) { return x1};
if (FastMath.abs(x1 - x0) < FastMath.max(rtol *  x0, 1 -
 if (inverted) (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),
 if (FiniteMath.abs(x1),
if (FastMath.abs(-
if (FastMath.abs(x1 ) <= fab(
if (FastMath.abs(x1 - x0) < FastMath.max(rtol *  x0) +
if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1) - x,
 if (inverted && (FastMath.abs(x1),
if (FastMath.abs(x1 - x0) < FastMath.max(rtol , 1 -
 if ((0),
if (FastMath.abs(x1 ) <= ftol && x <=
 if ((),
 if (allowed <= 2* FastMath.abs(x1),
if (FastMath.abs(x1 - x0) < FastMath.max(rtol , f1 - 0,
if (FastMath.abs(x1 - x0) < FastMath.abs(x1 - x1) < -
 if (abs(rtol * FastMath.abs(x1),
if (FastMath.abs(x1 - x0) < FastMath.max(fx,
if (FastMath.abs(x1 - x0) < FastMath.max(rtol *  (x0) + abs(x1),
 if (fx<* FastMath.abs(x1),
 if (f1 <= ftol && if(FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),
 if (!inverted) { } if(FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),
 if (x0 < -FastMath.max(rtol * FastMath.abs(x1),
 if (FastMath.isBetween(rtol * FastMath.abs(x1),
 if ((f0-x1),
if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1 - x0)+0,
 switch (allowed) { case 0:
if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1) - x0), 0,
if (FastMath.abs(x1 ) <
 } else { if ((x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),
if (FastMath.abs(x1 - x0) < FastMath.max(rtol *  (x0) + sqrt(x1),
 if (x1 < -FastMath.max(rtol * FastMath.abs(x1),
 if (0,
 if(x <= Math.max(rtol * FastMath.abs(x1),
 switch (allowed) { } else if(FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),
 switch (allowed) { } if(FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),
if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(-
 if Math.max(rtol * FastMath.abs(x1),
 if (allowed) { } else if(FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),
 if ((.abs(x1),
 if (floor(f),
if (FastMath.abs(x1 - x0) < FastMath.max(rtol *  (x0) - abs(x1),
 if (((x0) < FastMath.max(rtol * FastMath.abs(x1),
 if (atol <= (FastMath.abs(x1),
 if ((true),
if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1 - x0) + -
 if (!inverted || abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),
 if (inverted) { } else
if (FastMath.abs(x1 - x0) < FastMath.max(f0,
if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1+),
 if (inverted) { else if(FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),
if (FastMath.abs(x1 - x0) <  f1.abs(),
 if (f1 <= ftol && (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),
 if (Math.within(rtol * FastMath.abs(x1),
 if (f1 <= lmax(rtol * FastMath.abs(x1),
if (FastMath.abs(x1 - x0) < FastMath.abs( -
 if (inverted) { while(FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),
 if (atol <= ftol && if(FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),
 } else if ((x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),
if (FastMath.abs(x1 ) <= fx
 if (!Math.min(rtol * FastMath.abs(x1),
if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x0++),
 if (!FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),
if (FastMath.abs(x1 - x0) < FastMath.max(rtol *  f1) -
if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1++),
 for (int x in intervals)
if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x0*),
if (FastMath.abs(x1 - x0) < FastMath.max(rtol *  2,
if (FastMath.abs(x1 - x0) <  (float)
 if ((Math.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),
 if (f* FastMath.abs(x1),
if (f1 < -
if (FastMath.abs(x1 - x0) <  f1.abs(-
 if (eq(FastMath.abs(x1),
 if (integers(FastMath.abs(x1),
if (FastMath.abs(x1 -  f1 <
 } else if FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),
if (FastMath.abs(x1 - x0) <  ftol -
if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1 - x0), 1 +
 if ((fx0) < FastMath.max(rtol * FastMath.abs(x1),
if (FastMath.abs(x1 - x0) <  (f1) *
if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1*),
 if (!inverted) (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),
if (FastMath.abs(x1 -  f0 <=
 if (0* FastMath.abs(x1),
 ((x) < FastMath.max(rtol * FastMath.abs(x1),
 if (inverted) return x1 else
 if (!inverted &&!(FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),
if (FastMath.abs(x1 - x0) <  (ftol -
 if (f1 < ftol && (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),
 if (!inverted) ||FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),
 if (inverted) { else
 ifFastMath(abs(x1),
 if (invert) {
if (FastMath.abs(x1 - x0) < FastMath.max(rtol *  fastMath.abs(x1),
 if ((*x0) < FastMath.max(rtol * FastMath.abs(x1),
 if ((fx1),
 if (inverted) { }
if (FastMath.abs(x1 ) <>
 if (min(rtol * FastMath.abs(x1),
if (FastMath.abs(x1 - x0) <  (fx -
 if(x < Math.max(rtol * FastMath.abs(x1),
if (FastMath.abs(x1 - x0) < FastMath.max(rtol , 0,
 if(x == Math.max(rtol * FastMath.abs(x1),
 if (floor(rtol * FastMath.abs(x1),
if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs();
if  ((f <=
 if(-abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),
 if (eq(rtol * FastMath.abs(x1),
 if (integers(rtol * FastMath.abs(x1),
 else { if ((x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),
if  (0 <=
 if ((,
 if Math.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),
 if (true) if(FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),
 if (f1 >= ftol && (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),
 if (f1 <= ftol || (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),
 if (isInside(x1),
if (FastMath.abs(x1 - x0) <  (f1) +
 if ((0) < FastMath.max(rtol * FastMath.abs(x1),
 if (!(rtol * FastMath.abs(x1),
if (FastMath.abs(x1 -  x0) <>
 if (!allowed) if(FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),
 if ((allowed,
 switch (allowed) { } else
 if ((FastMath.max(rtol * FastMath.abs(x1),
 if ((0,
 if(<abs(x1),
 if (compare(rtol * FastMath.abs(x1),
 if (!inverted:
 if(<rtol * FastMath.abs(x1),
 } else if (FastMath.max(rtol * FastMath.abs(x1),
if (FastMath.abs(x1 .abs(),
if (x1 <=
 if ((*x1),
 if (min(FastMath.abs(x1),
if (f1 >=
if (FastMath.abs(x1 -  x <
 while (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),
if (FastMath.abs <
if (FastMath.abs(x1 ) <= f1
 if (!(abs(x1),
 if (f1 <= ftol &&!FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),
 if fastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),
 if (0<max(rtol * FastMath.abs(x1),
 FastMath.max(rtol * FastMath.abs(x1),
 else if (FastMath.max(rtol * FastMath.abs(x1),
if (FastMath.abs >=
if (FastMath.abs(x1 - x0) <  abs(
if (FastMath.abs(x1 -  f1) <>
 if (0< FastMath.max(rtol * FastMath.abs(x1),
if (FastMath.abs(x1 - x0) < FastMath.max(rtol *  math.abs(x1),
 if ((1- x0) < FastMath.max(rtol * FastMath.abs(x1),
 if(ismax(rtol * FastMath.abs(x1),
if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1 + 1),
 if (x0) < FastMath.max(rtol * FastMath.abs(x1),
 if (validate(rtol * FastMath.abs(x1),
 if (!inverted&&(FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),
if (FastMath.abs(x1 ) <= -
 if (!inverted||(FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),
 if (isWithin(rtol * FastMath.abs(x1),
 if (!inverted) { }
if (FastMath.abs(x1 - x0) < FastMath.max(rtol *  atol(x1),
 if (equals(rtol * FastMath.abs(x1),
 if (floor(FastMath.abs(x1),
if (float abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),
 else if ((x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),
 ((f) < FastMath.max(rtol * FastMath.abs(x1),
 if(intabs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),
 } if (abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),
if (f0 <=
if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1) <=
if (FastMath. <=
 if ((.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),
 if (x==FastMath.max(rtol * FastMath.abs(x1),
 if (!abs(x0) < FastMath.max(rtol * FastMath.abs(x1),
if (FastMath.abs(x1 - x0) < FastMath.maxAbs(-
 if (x <=FastMath.max(rtol * FastMath.abs(x1),
 } else if (FastMath.abs(x1),
 if (!,
 if (lt(rtol * FastMath.abs(x1),
if (Float.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),
 } else if ((x0) < FastMath.max(rtol * FastMath.abs(x1),
if (FastMath.inside
 if (!x1- x0) < FastMath.max(rtol * FastMath.abs(x1),
if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1) * 2,
 if (FastMath2.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),
if (FastMath.abs(x1 - x0) < FastMath.maxFraction(
if (FastMath.abs(x1 ) < -
 switch (allowed) { }
 if(minmax(rtol * FastMath.abs(x1),
if (FastMath.abs(x1 ) >=
 if (f <=rtol * FastMath.abs(x1),
 if(intmax(rtol * FastMath.abs(x1),
 if ((Math.max(rtol * FastMath.abs(x1),
 if (!max(rtol * FastMath.abs(x1),
 if ($.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),
 } else { if(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),
if (FastMath.abs(x1 - x0) < FastMath.max(rtol *  1,
 } if (FastMath.max(rtol * FastMath.abs(x1),
 if (!* FastMath.abs(x1),
 if(<FastMath.abs(x1),
 if (0 < abs(FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),
 if (!argmax(rtol * FastMath.abs(x1),
 if (inverted):
 if FastMath.max(rtol * FastMath.abs(x1),
 if (!(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),
 if (within(rtol * FastMath.abs(x1),
 if (intAbs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),
if (FastMath.abs(x1 -  f <=
 } } else if(FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),
if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1) <
if  ( <=
 (x) < FastMath.max(rtol * FastMath.abs(x1),
 if (!rtol * FastMath.abs(x1),
if (FastMath.abs(x1 - x0) < FastMath.max(rtol *  allowed,
if (FastMath.abs( <
 if(~FastMath.max(rtol * FastMath.abs(x1),
 f1),
 if (!),
if (FastMath.abs(x1 - x0) < FastMath.max(rtol *  FloatMath.abs(x1),
if (FixedMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),
if (FastMath.int
 if (!abs(x1),
 if(fmax(rtol * FastMath.abs(x1),
if (FastMath.abs(x1 - x0) < FastMath.max(rtol , -
if (FastMath.abs(x1 - x0) < FastMath.max(rtol *  fx(x1),
 else if (FastMath.abs(x1),
if (FastMath.abs(x1 - x0) < FastMath.max(rtol *  f,
 if (-x- x0) < FastMath.max(rtol * FastMath.abs(x1),
 if (!inverted(FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),
 } } if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),
 if(>FastMath.abs(x1),
if (FastMath.abs(x1 - x0) < FastMath.max(rtol *  acos(x1),
 } else if(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),
if (FastMath.abs(x1 - x0) >=
 } } else {
 } if (FastMath.abs(x1),
if (FastMath.abs(x1 - x0) < FastMath.max(rtol *  x,
 else { if(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),
 if(++FastMath.max(rtol * FastMath.abs(x1),
if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMathAbs(),
if  (( <=
 if (!allowed &&FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),
 if (,
 else if ((FastMath.abs(x1),
if (abs <=
 if(- x0) < FastMath.max(rtol * FastMath.abs(x1),
if (FastMath.abs(x1 - x0) <  fx
 if (*) < FastMath.max(rtol * FastMath.abs(x1),
 if(-* FastMath.abs(x1),
if (0.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),
if (FastMath.abs(x1 -  0 <=
 function f(x1),
if (FitMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),
if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(fx),
if (FastMath.abs(x1 - x0) <  tolerance *
if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(f0),
if (FastMath.abs(x1 - x0) < FastMath.max(rtol ) +
if (int
 if ($.max(rtol * FastMath.abs(x1),
 if (!x1),
if (FastMath.abs(x1 - x0) < FastMath.max(,
if (FastMath.abs(x1 - x0) < FastMath.max(rtol *,
if (FastMath.abs( >=
if (FastMath.abs(x1 ) >
 fastMath.abs(x1),
 if(true&&(FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),
 } } } else
if (FastMath.abs(x1 - x0) < FastMath.max(rtol *  F1.abs(x1),
if (FastMath.abs(x1 - x0) < FastMath.maxabs(
 if (<- x0) < FastMath.max(rtol * FastMath.abs(x1),
if (FastMath.abs(x1 - x0) < -
 if ($,
if (1.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),
 abs(x1),
if (FastMath.abs(x1 - x0) < FastMath.max(rtol ) -
if (FastMath.abs(x1 - x0) <= -
if (FastMath.abs(x1 -  x >=
 if (((x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),
 } else {
if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs() <=
if (FastMath.abs() <
 if (*.max(rtol * FastMath.abs(x1),
 if (!< FastMath.max(rtol * FastMath.abs(x1),
 return (x1),
 if ((.max(rtol * FastMath.abs(x1),
if (FastMath.abs(x1 - x0) < FastMath.max(true,
if (FastMath.abs(x1 - x0) >
if (FastMath.abs(x1 - x0) < FastMath.max($,
if (FastMath.abs(x1 - x0) < FastMath.max(rtol *  fx.abs(x1),
if (FastMath.abs(x1 - x0) < FastMath.max(rtol *  float64(x1),
if (FastMath.abs(f0) < FastMath.max(rtol * FastMath.abs(x1),
if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(f),
if (FastMath.abs(x1 - x0) < FastMath.abs()
if (FastMath.abs(x1 - x0) <  tolerance +
if (FastMath.abs(x1 - x0) < FastMath.max(rtol - FastMath.abs(x1),
 if (!abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),
 } } else
 else if(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),
 if ((max(rtol * FastMath.abs(x1),
if (FastMath.abs(x1 - x0) < FastMath.abs($
 if (((rtol * FastMath.abs(x1),
if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs( +
if (FastMath.abs(x1 - x0) < FastMath.max(rtol 1,
if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath( -
if (FastMath.abs(x1 - x0) < FastMathAbs(
 while ((x0) < FastMath.max(rtol * FastMath.abs(x1),
if (FastMath.abs(x1 - x0) < FastMath( -
 } } else:
if (FastMath.abs(x1 - x0) < FastMath.max(rtol *  np.abs(x1),
if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMathAbs,
 if (>(rtol * FastMath.abs(x1),
 if (<(rtol * FastMath.abs(x1),
 } } else,
 { } else {
 while ((x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),
if (FastMath.abs(x1, x0) < FastMath.max(rtol * FastMath.abs(x1),
if (FastMath.abs(fx) < FastMath.max(rtol * FastMath.abs(x1),
 SlowMath.abs(x1),
if (FastMath.abs(x1 ) ==
 if ((< FastMath.max(rtol * FastMath.abs(x1),
 if x< FastMath.max(rtol * FastMath.abs(x1),
 if ((abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),
if (FastMath.abs(x1 - x0) < FastMath.max(rtol + FastMath.abs(x1),
if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1)) +
 } else
if (FastMath.abs(x1 - x0) ==
if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath( +
 } else:
if (FastMath.abs(x1 - x0) < FastMath.max(rtol *  f.abs(x1),
if (FastMath.abs(x1 - x0) >= FastMath.max(rtol * FastMath.abs(x1),
 else: if(FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),
 while (abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),
 while (max(rtol * FastMath.abs(x1),
if (FastMath.abs(x1 - x0) < FastMathAbs(-
if (FastMath.abs(x1 - x0) < FastMath::abs
if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(0),
 while (rtol * FastMath.abs(x1),
 if (-FastMath.max(rtol * FastMath.abs(x1),
 } else,
if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(1),
if (FastMath.abs(x1 + x0) < FastMath.max(rtol * FastMath.abs(x1),
if (FastMath.abs(x1 - x0) > FastMath.max(rtol * FastMath.abs(x1),
if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1) + -
if (FastMath.abs(x1 - x0) == FastMath.max(rtol * FastMath.abs(x1),
 else
if (FastMath.abs(1) < FastMath.max(rtol * FastMath.abs(x1),
if (FastMath.abs(0) < FastMath.max(rtol * FastMath.abs(x1),
 } while(FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),
if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1) - -
if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(max),
 } }
if (FastMath.abs(x1), x0) < FastMath.max(rtol * FastMath.abs(x1),
if (FastMath.abs(y) < FastMath.max(rtol * FastMath.abs(x1),
if (FastMath.abs(x1) x0) < FastMath.max(rtol * FastMath.abs(x1),
if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1) +...
if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1) - float
if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1) + *
if (f(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),
 }
if (int(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),
if (Abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),
if (FastMath.abs(x1 - x0) < FastMath.max(rtol *  log(x1),
if (FastMath.abs(x1 - x0) < FastMath.max(rtol *  exp(x1),
if (FastMath.abs(x1 - x0) < FastMath.max(rtol *  sin(x1),
