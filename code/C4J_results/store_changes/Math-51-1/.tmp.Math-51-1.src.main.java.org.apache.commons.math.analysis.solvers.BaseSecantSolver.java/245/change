 else { return x1 ;
 else { return x1 ; }
 return x1 ;
 else { return x ;
 return x1 ;
 else { return x1 ; } }
 return x1 ; }
 else { throw new MathInternalError(); } else { throw new MathInternalError(); } return x1 ;
 else { throw new MathInternalError(); } } else { throw new MathInternalError(); }
 return x0 ;
 else { throw new MathInternalError(); } else { throw new MathInternalError(); } } }
 return x ;
 else { throw new MathInternalError(); } } else { throw new MathInternalError(); } }
 else { return x1 ; } } else { return x0 ; }
 else { throw new MathInternalError(); } else { throw new MathInternalError(); } }
 else { switch (allowed) { case ANY_SIDE: return x1; case RIGHT_SIDE: return x0; } }
 else { throw new MathInternalError(); } else { throw new MathInternalError(); } else { return x1 ;
 else { x1 = x0 ; } }
 else { throw new MathInternalError(); } else { throw new MathInternalError(); } return x ;
 else { throw new MathInternalError(); } else { throw new MathInternalError(); } } } }
 else { x1 = x0 ; }
 else { switch (allowed) { case ANY_SIDE: return x1; default: throw new MathInternalError(); } } } }
 else { return x0 ;
 return x0 ; }
 else { return x1 - x0 ; }
 else { throw new MathInternalError(); } } else { throw new MathInternalError(); } } }
 else { throw new MathInternalError(); } else { throw new MathInternalError(); } return x1 ; }
 else { throw new MathInternalError(); } else { throw new MathInternalError(); } else { return x1 ; }
 else { x1 = x0 ; return x1 ;
 else { return x1 ; } } else { return x0 ; } }
 else { return x0 ; }
 else { return x1 ; } } else { return x0 ;
 else { if ( inverted ) { return x1 ; } else { return x0 ; } } }
 else { throw new MathInternalError(); } else { throw new MathInternalError(); } else { return x0 ;
 else { throw new MathInternalError(); } } else { throw new MathInternalError(); } return x1 ;
 else { switch (allowed) { case ANY_SIDE: return x1; default: throw new MathInternalError(); } return x ;
 else { if ( inverted ) { return x1 ; } else { return x0 ; } }
 else { throw new MathInternalError(); } } else { return x1 ; }
 else { throw new MathInternalError(); } else { throw new MathInternalError(); } else { return x0 ; }
 else { throw new MathInternalError(); } else { throw new MathInternalError(); } else { return x ;
 else { if (! inverted ) { return x1 ; } else { return x1 ; } throw new MathInternalError(); }
 else { return x1 - x0 ;
 else { if (! inverted ) { throw new MathInternalError(); } else { throw new MathInternalError(); } }
 else { throw new MathInternalError(); } else { throw new MathInternalError(); } } return x1 ;
 else { return x1 - x0 ; throw new MathInternalError(); }
 else { throw new MathInternalError(); } else { throw new MathInternalError(); } } return x ;
 else { return x1 - x0 ; } }
 else { throw new MathInternalError(); } } else { return x1 ;
 else { throw new MathInternalError(); } else { throw new MathInternalError(); } return x0 ;
 else { throw new MathInternalError(); } else { throw new MathInternalError(); } else { throw MathInternalError();
 else { throw new MathInternalError(); } } else { throw new MathInternalError();
 else { x1 = x0 ; return x1 ; }
 else { return x1 ; } } }
 else { return x1 ; } } else { return x1 ; } }
 else { if (! inverted ) { throw new MathInternalError(); } else { throw new MathInternalError(); } } }
 else { if (inverted) { return x1 ; } return x0 ;
 else { x1 = x0 ;
 else { throw new MathInternalError(); } } else { return x0 ; }
 else { if ( inverted ) { return x1 ; } else { return x0 ; } } } }
 else { switch (allowed) { case ANY_SIDE: return x1; default: throw new MathInternalError(); } } } ;
 else { return x1 ; } } else { return x1 ; }
 else { throw new MathInternalError(); } } else { return x1 ; } }
 else { if ( inverted ) { return x1 ; } else { return x0 ; } return x1 ;
 else { return x1 + x0 ; } else { return x1 + x0 ; }
 else { if (! inverted ) { return x1 ; } else { return x1 ; } throw MathInternalError(); }
 else { throw new MathInternalError(); } } else { throw new MathInternalError(); } } } }
 else { return x1 - x0 ; } else { return x1 - x0 ; }
 else { return x1 - x0 ; } else { return x1 - x0 ; } }
 else { throw new MathInternalError(); } else { return x1 - x0 ; }
 else { return x1 ; } return x0 ;
 else { throw new MathInternalError(); } else { return x1 ; }
 else { x1 = x0 ; f1 = fx ;
 else { if ( inverted ) { return x1 ; } else { return x0 ; } throw MathInternalError(); }
 else { throw new MathInternalError(); } else { throw new MathInternalError(); } } else { return x1 ;
 else { return x1 - x0 ; throw MathInternalError(); }
 else { throw new MathInternalError(); } } else { throw new MathInternalError(); } else { return x1 ;
 else { x1 = x0 ; f1 = fx ; }
 else { return x1 + x0 ; } else { return x1 + x0 ;
 else { return x1 - x0 ; } else { return x1 - x0 ;
 else { if (! inverted ) { return x1 ; } else { return x1 ; } throw new MathInternalError();
 else { if ( inverted ) { return x1 ; } else { return x0 ; } else { return x1 ; }
 else { return x1 ; } } else { return x ;
 else { if ( inverted ) { return x1 ; } else { return x0 ; } else { return x1 ; } }
 else { if (inverted) { return x1 ; } return x0 ; }
 else { if (! inverted ) { return x1 ; } else { return x1 ; } throw MathInternalError();
 else { x1 = x0 ; return x1 ; } }
 else { if ( inverted ) { return x1 ; } else { return x1 ; } throw MathInternalError(); }
 else { return x1 - x0 ; } } }
 else { throw new MathInternalError(); } return x1 ;
 else { return x1 ; } else { return x1 ; } } else { return x1 ; } } }
 else { throw new MathInternalError(); } } }
 else { return x1 ; } } else { return x1 ; } } else { return x1 ; } } return x1 ;
 else { return x1 ; } else { return x1 ; } } else { return x1 ; } } ;
 else { x1 = x0 ; return x ;
 else { if (! inverted ) { return x1 ; } else { return x1 ; } } else { return x0 ;
 else { throw new MathInternalError(); } } else { return x ;
 else { throw new MathInternalError(); } else { throw new MathInternalError(x); }
 else { x1 = x0 ; } } }
 else { throw new MathInternalError(); } } return x1 ;
 else { return x1 ; } } else { return x1 ; } } }
 else { return x1 ; } } else { return x1 ;
 else { return x1 ; } } else { return x1 ; } } else { return x0 ; } } return x0 ;
 else { return x1 + x0 ; }
 else { return x1 ; } } } }
 else { if (! inverted ) { return x1 ; } else { return x1 ; } } return x1 ;
 else { if (! inverted ) { throw new MathInternalError(); } else { throw new MathInternalError(x1);
 else { return x1 ; } } else { return x0 ; } } }
 else { return x0 ; } }
 else { throw new MathInternalError(); } } } }
 } }
 else { x0 = x1 ; }
 else { return x1 ; } } else { return x1 ; } return x ;
 else { return x1 ; } } return x0 ;
 else { throw new MathInternalError(); } return x ;
 else { return x1 - x0 ; } return x ;
 else { return x1 ; } } else { return x1 ; } } } }
 else { return x1 ; } return x ;
 else { x0 = x1 ;
 else { return x1 - x0 ; } } } }
 else { return x0 ; } } }
 return x1 ; }
 } else { return x1 ; }
 } else { return x1 ;
 return x0 ;
 else { x1 = x ;
 } else { return x0 ;
 return x ;
 } return x1 ;
 return x ; }
 } else { return x ;
 else { return x ; }
 else { return null ;
 } return x0 ;
 } return x1 ;
 } } }
 return this ;
 return x0 ; }
 } return x ;
 }
 return x ; } ;
 else { return x
 return null ;
 return null ;
 } ;
 } }
 else { } }
 } } ;
 return false ;
 return 0 ;
 }
 } return this ;
 } } ;
 } ;
 break ;
 return ;
 return x
 break ;
 ;
 ;
