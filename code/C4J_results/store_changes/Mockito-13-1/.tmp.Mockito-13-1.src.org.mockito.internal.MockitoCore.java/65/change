 return methodCall;
 return methodCall.stub();
 return (OngoingStubbing) stub();
return (OngoingStubbing) stub(methodCall);
 return methodCall();
return (OngoingStubbing)  when(methodCall);
 return (WhenOngoingStubbing) stub();
return (OngoingStubbing) methodCall();
 return (WhenStubbing) stub();
 return (When) stub();
 return when();
 return (T) methodCall;
 return when(call);
 return when().stub();
return (OngoingStubbing) when(T methodCall);
 return (When(methodCall)).stub();
 if (methodCall) {
 return (OngoingStubbing) methodCall;
 if (methodCall)
return (OngoingStubbing) when(call);
 return (IngoingStubbing) methodCall();
return (T) when();
 return (UndoingStubbing) methodCall();
 return when(methodCall);
 return (OngoingStubbing) methodCall; }
 return (When) methodCall);
 return methodCall);
return (OngoingStubbing) when(method);
 return when methodCall;
 return (IncomingOngoingStubbing) stub();
 return (MethodCall) stub();
return (OngoingStubbing) stub(); } return null ;
 return (When(methodCall), (DeprecatedOngoingStubbing) stub();
 return (T) when;
return (OngoingStubbing) when(methodCall, mockingProgress);
return (OngoingStubbing) when(methodCall, mockSettings);
 return (OngoingStubbing) stub();
 return (UndoingStubbing) methodCall;
 return (UndoingStubbing) methodCall);
return (T) methodCall();
 return (UndoingStubbing) when(methodCall);
 return ( OngoingStubbing ) when ( methodCall )
 return (When) (methodCall);
 return (When(methodCall), DeprecatedOngoingStubbing) stub();
 return (IngoingStubbing) methodCall);
return (OngoingStubbing) when(T methodCall, mockingProgress);
 return (When(T) methodCall).stub();
 return (IngoingStubbing) when();
 return (UndoingStubbing) stub();
 return (DeprecatedOngoingStubbing) stub();
return (MethodCall);
return (OngoingStubbing) when(methodCall, reporter);
return (OngoingStubbing) methodCall;
return (OngoingStubbing) when(Mock) methodCall();
 if (methodCall == null) { mockingProgress.ongoingStubbing();
return (T);
 return (OngoingStubbing) when(methodCall);
 return (OngoingStubbing)
 return (OngoingStubbing) methodCall();
return (OngoingStubbing) when(T methodCall, mockSettings);
 return (OngoingStubbing) when(methodCall); }
 return (When<T> DeprecatedOngoingStubbing) stub();
 return (UndoingStubbing) when(T methodCall);
return (OngoingStubbing) when(Mock methodCall);
return  when(method);
return (AnnotatedOngoingStubbing) stub();
return (OngoingStubbing) stub(T methodCall) when(T methodCall);
 return new OngoingStubbing ( methodCall ) ;
 return (When(methodCall))(OngoingStubbing) stub();
return (OngoingStubbing) when();
 return when.stub();
 return (When(methodCall)) (DeprecatedOngoingStubbing) stub();
 return (AnngoingStubbing) stub();
 return ((WhenStubbing) stub();
return (OngoingStubbing)  when(mock, methodCall, reporter);
 if (methodCall == null) { mockingProgress.reset(); }
return (OngoingStubbing) when(M methodCall);
 return (When(methodCall, DeprecatedOngoingStubbing) stub();
 return (UndoingOngoingStubbing) stub();
 return (When) methodCall;
return (OngoingStubbing) when(T) methodCall();
 return ( OngoingStubbing ) when ( methodCall
return (OngoingStubbing)  when(T methodCall) when(T);
 if ( methodCall == null ) { reporter. nullPassedToVerify(); } else if (methodCall)
 return (OngoingStubbing) stub(); } else if (methodCall) {
 if (methodCall == null) { mockingProgress.ongoingStarted();
return (OngoingStubbing) stub(); } return mock ;
 return MockAwareVerificationMode ( mock, mode ). when ( methodCall ) ;
return (OngoingStubbing) stub(); } return methodCall ;
 return (IncomingStubbing) stub();
 return MockAwareVerificationMode ( methodCall ) ;
return (OngoingStubbing) when(T methodCall, MockSettings);
 if ( methodCall == null ) { mockingProgress. reset(); } else if ( methodCall!= null ) {
 return (When) methodCall.stub();
 return (UndoingStubbing) methodCall;
 return (OngoingStubbing) methodCall(); }
 return when(call).stub();
 reporter.stub();
 return (IngoingStubbing) stub();
 return (UndoingStubbing) when(method);
 return (When) methodCall();
 return mockingProgress. when ( methodCall ) ;
 return (UndoingStubbing) when(call);
 return (When) stub(methodCall);
 if (methodCall == null) { mockingProgress.reset();
 return ( OngoingStubbing ) when ( methodCall, reporter )
 return (When<T> (DeprecatedOngoingStubbing) stub();
 return (When(T methodCall), DeprecatedOngoingStubbing) stub();
 return (When) methodCall;
return (UndoingStubbing<T> when) stub();
 return (OngoingStubbing) when(T methodCall);
 return (IncomingOngoingStubbing();
return (OngoingStubbing) stub(T methodCall, mockingProgress);
 return when(methodCall).stub();
 return (UndoingStubbing) when();
 return ( OngoingStubbing ) when ( methodCall ) ; }
return (OngoingStubbing) stub(methodCall, mockSettings);
 return (OngoingStubbing) stub(); if (methodCall == null)
 return mockingProgress.verificationStarted(new MockAwareVerificationMode(mock, mode)); } else {
 return (MethodCall<T> (DeprecatedOngoingStubbing) stub();
return (UndoingStubbing<T> methodCall) stub();
 return (OngoingOngoingStubbing) stub();
return (OngoingStubbing) when(T methodCall, mode);
 return (UndoingStubbing) stub();
return (OngoingStubbing) when(T methodCall, reporter);
 if ( methodCall == null ) { mockingProgress. reset(); } else if ( methodCall!= null )
return (OngoingStubbing) stub(); }
 if (methodCall == null) {
 return (When(DeprecatedOngoingStubbing) stub();
 return (OngoingStubbing) stub(); } else if (mode == null) {
 return MockAwareVerificationMode ( mock, methodCall )
 if ( methodCall == null ) { mockingProgress. reset(); } else if ( methodCall == this ) {
 if ( methodCall == null ) { mockingProgress. reset(); } else if ( methodCall == true ) {
 return (OngoingStubbing) stub(); if (methodCall!= null)
return (OngoingStubbing) stub(); return methodCall ;
 return (OngoingStubbing) }
 return ((MethodCall) stub();
return (OngoingStubbing) stub(methodCall, mockingProgress);
 return (OngoingStubbing) mock();
 return (OngoingStubbing) stub(); } else if (!methodCall)
 return (OngoingStubbing) when();
 return (OngoingStubbing) when(T methodCall); }
 return (When(T methodCall) DeprecatedOngoingStubbing) stub();
 return new OngoingStubbing(methodCall); }
 return when(T methodCall);
 if ( methodCall == null ) { mockingProgress. reset(); } else { mockingProgress. reset(); }
 if ( methodCall == null ) { mockingProgress. reset(); } else if ( methodCall == mode ) {
 return (UndoingStubbing) when;
 return (IngoingStubbing)();
 if ( methodCall == null ) { mockingProgress. reset(); } else { mockingProgress. when ( ) ;
 if (methodCall == null) { mockingProgress.ongoingStubbing(); }
 return (WhenOngoingStub) stub();
 if (methodCall == null) { mockingProgress.ongoingStubbingCompleted();
 return (OngoingStubbing) {}
return ( OngoingStubbing ) when methodCall ;
 if (methodCall == null) { mockingProgress.ongoingStubbingComplete();
 return (IncomingOngoingStub) stub();
 return whenMethodCall();
 return (OngoingStubbing) stub(); } else { mockingProgress.reset();
 if (methodCall!= null) {
 return (when) methodCall);
 return (IncomingStubbing) methodCall;
return (OngoingStubbing) stub(mock, methodCall);
 return (UndoingStubbing) when(M methodCall);
 return (IncomingStubbing) methodCall);
 return (UndoingStubbing) when);
 return (OngoingStubbing) stub(); } else if (mode == null) { mockingProgress.notMockPassed();
 return (OngoingStubbing) stub(); } else if (mode == null) { mockingProgress.stubbingStarted();
 return when ( methodCall )
 return methodCall?(OngoingStubbing) stub();
 return mock;
 return when(T methodCall);
 return (When(T methodCall) stub();
 return (OngoingStubbing) stub(); } <T> MockAwareVerificationMode<T> when(T {
 return when(this).stub();
 return (AssumingoingStubbing) stub();
 return (OngoingStubbing) when(methodCall) stub(); }
 return (WhenImpl) methodCall);
 return MockAwareWhen ( methodCall ) ;
 return (OngoingStubbing) stub(); } else if (mode!= null) { mockingProgress.whenStarted();
return  mockingProgress. when ( methodCall ) ; }
 return (OngoingStubbing) stub(); } else if (mode!= null) {
 return (InlineStubbing) stub();
 return (When) when.stub();
return (OngoingStubbing) stub(T methodCall, MockSettings);
 return (OngoingStubbing) when(T methodCall) {
 return (OngoingStubbing) mock;
return (OngoingStubbing) stub() + when(methodCall);
 if ( methodCall == null ) { mockingProgress. reset(); } else { mockingProgress. when(); }
 return (When(T) DeprecatedOngoingStubbing) stub();
 return (AnnotatedOngoingStub) stub();
 if ( methodCall == null ) { mockingProgress. reset(); } else if ( methodCall == true )
 return (OngoingStubbing) stub(); } else if (mode!= null) { mockingProgress.when(methodCall);
 return (OngoingStubbing) stub(); } else if (methodCall == null)
 if ( methodCall == null ) { mockingProgress. reset(); } else if ( methodCall == this )
 if ( methodCall == null ) { reporter. nullPassedToVerify(); } if ( methodCall ) {
 return (OngoingStubbing) stub(); } <T> MockAwareVerificationMode<T> when(T){
 return (When) when(call);
 return whenMethodCall;
 return (OngoingStubbing) stub(); } else if (mode == null) { mockingProgress.syncStarted();
 return (MethodCall) methodCall; return(OngoingStubbing) stub();
 return (IncomingCall) methodCall;
 return mockingProgress.verificationStarted(new MockAwareVerificationMode(mock, mode)) } else {
 return (OngoingStubbing) stub(); } else if (mode == null) { mockingProgress.notModeStarted();
 return (When) methodCall; }
return (OngoingStubbing) stub(T methodCall) when(methodCall);
 return (OngoingStubbing) stub(); } else { mockingProgress.notMockPassedToVerify();
 return when(T methodCall) {
return (OngoingStubbing) stub(T methodCall, mockSettings);
 return (When) stub(methodCall;
 return mockingProgress.verificationStarted(new MockAwareVerificationMode(mock, mode); } else {
 return (When) when(methodCall);
 return mockingProgress.verificationStarted(new MockAwareVerificationMode(methodCall, mode)); } else {
 return (UndoingStubbing) when(T methodCall)();
 return when().build();
return (OngoingStubbing) when(T methodCall) stub(); }
 return (OngoingStubbing) stub(); } else if (mode == null) { mockingProgress.whenStarted();
 return (OngoingStubbing) when(T methodCall) }
 return (when(methodCall)).stub();
 return (OngoingStubbing) stub(); } <T> MockAwareVerificationMode<T> when() {
 return when ( methodCall, reporter ) ;
 return (IncomingOngoingStubbing);
 return MockAwareVerificationMode(mock, mode); } else if (methodCall) {
 return (IncomingCall) methodCall();
 return (OngoingStubbing) when(methodCall) stub();
 return (OngoingStubbing) stub(); } <T> MockAwareVerificationMode<T> when(T)
return (OngoingStubbing)
 return (When(MethodCall, DeprecatedOngoingStubbing) stub();
return (OngoingStubbing) stub(T methodCall, MockSettings) stub();
 return (OngoingStubbing) stub(); } else if (methodCall == null) {
 return (MethodCall) when();
 return (OngoingStubbing) stub(); } else if (mode == null) { mockingProgress.started();
return (OngoingStubbing) when(this);
return (OngoingStubbing)  when(mock, methodCall, mode);
 return (T) when);
 return ((T) methodCall);
 if (methodCall == null)
return (OngoingStubbing)  when(T methodCall, MockSettings settings);
 if (methodCall!= null)
 return (MethodCall<T>(OngoingStubbing) stub();
 return (When(methodCall)) ||(OngoingStubbing) stub();
 return (OngoingStubbing) stub(); if (methodCall == false)
 return (OngoingStubbing) when(methodCall, mock); }
 return (OngoingStubbing) stub(); } else if (mode == null) { reporter.unknownMode(); }
return (OngoingStubbing) stub(T methodCall) when(Mock);
 return (OngoingStubbing) stub(); } else if (methodCall!= null)
 if (methodCall == null) { mockingProgress.reset(); } else
 return (OngoingStubbing) methodCall; } else
 return (T) mock;
 return (MethodCall<T>) when(OngoingStubbing) stub();
 return (OngoingStubbing)();
 return (When) methodCall ; return(OngoingStubbing) stub();
return (OngoingStubbing) when(T) methodCall;
 return (OngoingStubbing) stub(); } else if (mode == null) { mockingProgress.notMockStarted();
 if (! mock. isMock ( ) ) { throw new MockitoCoreException ( "Mock is not a mock" ) }
return (AnnotatedOngoingStubbingImpl) stub();
return (OngoingStubbing) stub(). when ( methodCall ) ;
 return (IncomingCall) methodCall);
 if (!methodCall)
 return (AsyncStubbing) stub();
 return (When) methodCall; return null;
 return (When<T>(OngoingStubbing) stub();
 return (OngoingStubbing) stub(); } <T> MockAwareVerificationMode<T> else {
 return (When) when(call).stub();
 return (WhenOngoingCallback) stub();
 return (OngoingStubbing) stub(); } <T> MockAwareVerificationMode<T> if() {
return  MockAwareVerificationMode ( methodCall )
return (OngoingStubbing) when
 return (OngoingStubbing) stub(); } else if (mode == null) { mockingProgress.notModePassed(); }
 return (When(methodCall))stub();
 return (UndoingStubbing) mock;
 return (OngoingStubbing) stub(); } <T> MockAwareVerificationMode<T> when {
 return MockAwareVerificationMode(mock, mode); } else { mockingProgress = reporter ;
 return when ( methodCall ) ; }
 return (T) when(method);
return (OngoingStubbing) stub(T methodCall, when=true);
return (OngoingStubbing) stub(T methodCall, when, reporter);
 return (Any) methodCall;
 return (T) when methodCall;
 return (UndoingStubbing) stub;
return (T) stub();
 if (methodCall == null) { mockingProgress.ongoingStubbing
 return (AnnotatedOngoingMethodCall) stub();
return (OngoingStubbing) stub(T methodCall, when); stub();
 return MockAwareVerificationMode(mock, mode); } else { mockingProgress.reset();
return (OngoingStubbing) stub() if (methodCall == null) return mock;
 return methodCall|(OngoingStubbing) stub();
 return when() mock;
 return (IncomingStubbing) when);
 return (When(T))(OngoingStubbing) stub();
 return (When ) methodCall ; }
 return (AnnotatedOngoingClause) stub();
 return (When(methodCall)); return(OngoingStubbing) stub();
 return (When(T) methodCall).$stub();
 return (When(T) methodCall).__stub();
 return methodCall((OngoingStubbing) stub();
 return (IncomingOngoingStubbing;
 return (UndoingStubbing) stub);
 return (T) whenstub();
 return (When) methodCall||(OngoingStubbing) stub();
 return (When) when(T methodCall);
 return (When methodCall);
 return (When(methodCall)) &&(OngoingStubbing) stub();
return (OngoingStubbing) stub(T methodCall, when) stub();
 return (OngoingStubbing;
 return (When(methodCall), reporter);
 return (When) (methodCall;
 return (When(MethodCall)).stub();
 return (WhenImpl) methodCall;
 return (T) when().stub();
 return (UndoingStubbing) when(methodCall); }
 return (OngoingStubbing) when(methodCall, mockSettings);
return (OngoingStubbing) stub() if (methodCall == null) stub();
 when(T methodCall)
return (OngoingStubbing) stub() if (methodCall!= null) stub();
 return (String) methodCall;
 return (OngoingStubbing) stub(); } else {
return (OngoingStubbing) stub(methodCall, reporter);
return (OngoingStubbing) stub() if (methodCall!= null) return mock;
 return (When(T) methodCall).instub();
 return (When(T) methodCall).unstub();
return (OngoingStubbing) stub(); } else { return mock ; }
 return (When(methodCall)) +(OngoingStubbing) stub();
 return (IncomingStubbing) stub);
 return MockAwareVerificationMode(mock, mode); } else { mockingProgress = null ;
return (OngoingStubbing) stub(); } return stubbing ;
 return (MethodCall) methodCall; } return(OngoingStubbing) stub();
return (OngoingStubbing) stub(). when(T methodCall);
 return when((OngoingStubbing) stub();
return (IncomingOngoingStubbing<T) stub();
 return (MethodCall) when(OngoingStubbing) stub();
return (OngoingStubbing) stub() if (methodCall == null) return null;
return (OngoingStubbing) stub(T methodCall);
 return mockingProgress.verificationStarted(new MockAwareVerificationMode(mock, mode)) ; } else
 return (Function) methodCall;
 return (T) when.stub();
 return (When() (DeprecatedOngoingStubbing) stub();
 return (When(T methodCall)) {
return (OngoingStubbing) stub(); } else { return null ; }
 return (IncomingStubbing) when;
 return (When) methodCall();
 return (IncomingCall) methodCall.call();
return (OngoingStubbing) when(mock, methodCall); }
 return (When(T methodCall)).stub();
return (OngoingStubbing) stub(T methodCall) when(T mock);
 return (WhenMethodCall) stub();
return (OngoingStubbing) function(methodCall);
 return (UndoingStubbing)();
 return (Any) when methodCall;
return (IncomingOngoingStubbingImpl) stub();
 return (MethodCall|DeprecatedOngoingStubbing) stub();
 return methodCall.(OngoingStubbing) stub();
 return methodCall||(OngoingStubbing) stub();
 return (When(methodCall),(OngoingStubbing) stub();
return (OngoingStubbing) stub(); } else { return stub ; }
 return (WhenOngoingSubscription) stub();
return (Method call);
return (OngoingStubbing) stub() + when(T methodCall, mockingProgress);
 return (When) methodCall|(OngoingStubbing) stub();
return (OngoingStubbing) stub(call);
return (OngoingStubbing) when(method());
 return (When(T) methodCall;
 when(T methodCall);
return (OngoingStubbing) stub(); return mock ;
 return (InlineDeprecatedOngoingStubbing) stub();
 return (MethodCall<T>).when(OngoingStubbing) stub();
return (OngoingStubbing) stub(T methodCall) when(this);
 return (WhenImpl) when(call);
 return (IncomingCall) when methodCall;
return (OngoingStubbing) stub(); if (methodCall == null) stub();
 } else {
return (OngoingStubbing) stub() + methodCall();
return (OngoingStubbing) stub(MethodCall) methodCall();
 return (MethodCall)(OngoingStubbing) stub();
return (OngoingStubbing) stub(T methodCall, mode); } return mock ;
 return (When(T)(OngoingStubbing) stub();
 return (When|DeprecatedOngoingStubbing) stub();
 return when(method).stub();
return (OngoingStubbing) stub(T methodCall) stub(); }
return (OngoingStubbing) stub() + methodCall;
return (OngoingStubbing) stub() + when(T methodCall, mockSettings);
return (OngoingStubbing) stub(T methodCall, mode);
 return (UsingStubbing) stub();
return (OngoingStubbing) stub() + when(T methodCall);
return (OngoingStubbing) stub() } return methodCall ;
 return (When) methodCall.call();
 return (UndoingStubbing) stub;
 return (AnngoingStubbingImpl) stub();
 return (When(methodCall, deprecatedOngoingStubbing) stub();
 return (When) when().stub();
return (OngoingStubbing) stub(Mock methodCall);
 return (IncomingOngoingCall) stub();
 return (WhenDeprecatedOngoingStubbing) stub();
 return (OngoingStubbingT) stub();
 return when method call;
 return (OngoingStubbingImpl) stub();
 return new When ( ) ;
return (OngoingStubbing) stub(T methodCall, Mock settings);
 ((When) stub();
return (OngoingStubbing) stub(T methodCall, mode); } return null ;
return (OngoingStubbing) stub(T methodCall, when, mockingProgress);
 when(methodCall);
return (AnnotatedOngoingStubbingInterface) stub();
 return (Mock) when();
return (IncomingOngoingStubbing|T) stub();
return (OngoingStubbing) stub(); } return MockitoCore. INSTANCE ;
 return (When methodCall) stub();
return ( methodCall )
return (OngoingStubbing) stub(); } else { return null ;
return (OngoingStubbing) stub(T methodCall, Mode) when(this);
 return (When) methodCall.get ( );
 return when(T)stub();
 return ((WhenOngoingStubbing) stub();
 return (when) stub);
 return (WhenImpl) when(call).stub();
return (OngoingStubbing) stub(); } return MockitoCore ( ) ;
 return (UndoingStubbing(methodCall);
return (OngoingStubbing) when(T);
return (OngoingStubbing) stub(); } return MockitoCore ( reporter ) ;
return (OngoingStubbing) stub() if (methodCall!= null) ;
 return (WhenImpl) when(this).stub();
 return (MethodCall).when(OngoingStubbing) stub();
return (OngoingStubbing) when(methodCall)();
 return (When(T) mock);
 return methodCall.when();
return (OngoingStubbing) stub(methodCall); }
 return (MethodCall) methodCall.respondTo(OngoingStubbing) stub();
 return when() stub();
 return (methodCall);
 return when(...);
 when(call);
return (OngoingStubbing) stub() + when(T methodCall) stub();
 return (MethodCall)
 return (UndoingStubbing);
 return (When) methodCallImpl;
return (OngoingStubbing) stub() + when(Mock) methodCall();
 return (T) this;
return (OngoingStubbing) stub(T methodCall, when(T methodCall));
return (OngoingStubbing) stub() + when();
 return (MethodInvocation) stub();
 return (When(T) stub);
return (OngoingStubbing) stub(T) methodCall();
return (OngoingStubbing) stub() } return mock ;
return (OngoingStubbing) stub(); } return stub ;
 return (T) stub;
 return (WhenImpl) stub();
 return (When) stub().call();
 return when().call();
 return (MethodCall) methodCall.then(OngoingStubbing) stub();
return (OngoingStubbing) stub() + when(Mock) methodCall;
 return (IncomingOngoingCall) when();
return (OngoingStubbing) stub() if (methodCall == methodCall);
 return when(methodCall;
 return (WhenImpl)(OngoingStubbing) stub();
return (OngoingStubbing) stub(); if (methodCall == null) {
 return (AnyMethodCall) stub();
return (IncomingOngoingStubbingT) stub();
 return (When) stub.call();
 return (When(T) methodCall);
return (UndoingStubbing<T> function) stub();
 return when(T methodCall) { }
 return (InformationalOngoingStubbing) stub();
return (OngoingStubbing) stub(); return when(methodCall);
 return (MethodCall) methodCall.thenApply(OngoingStubbing) stub();
 return (AppliedOngoingStubbing) stub();
 return new MockitoCore();
 ((Function) stub();
 return (MethodCall<T> (WhenOngoingStubbing) stub();
 return null;
 return when(MockCall);
return (T) mock();
 return (When(methodCall, DefaultOngoingStubbing) stub();
return (OngoingStubbing) stub() } return null ;
 if (when)
 return (InlineableOngoingStubbing) stub();
 return when()(OngoingStubbing) stub();
return (OngoingStubbing) stub(); if (methodCall) {
 return (MethodCall):(OngoingStubbing) stub();
 return ((T) when);
 return ((When) stub();
return (OngoingStubbing) stub() if (methodCall == null) ;
return  when(this);
return (OngoingStubbing) stub(); } return mock ; }
 return (AnyStubbing) stub();
 return (T) when(method());
 return (when) stub();
 return when.build();
 return (MethodCall) methodCall.thenReturn(OngoingStubbing) stub();
 return when().(OngoingStubbing) stub();
 return (When) methodCallSync();
return (OngoingStubbing) stub() if (methodCall!= null) {
 return (When) when().build();
return (OngoingStubbing) stub(T methodCall); }
 return (When) methodCall; return;
 return methodCall. ((OngoingStubbing) stub();
 return (When) methodCallNow();
return (OngoingStubbing)  when(MethodCall);
 return (InlineCustomOngoingStubbing) stub();
 return (UnexceptoredOngoingStubbing) stub();
 return (When(T) deprecatedOngoingStubbing) stub();
return (When) methodCall(); }
 return (UnexceptedOngoingStubbing) stub();
 return (IncomingCall) stub();
 return new When(call);
return  when(method());
 return (When) methodCall.call;
 return methodCall;
 return methodCall();
 return (When(T), deprecatedOngoingStubbing) stub();
return (OngoingStubbing)  if(methodCall);
 return (WhenedOngoingStubbing) stub();
 return (When) methodCall.class. name;
return (OngoingStubbing) stub(); if (methodCall == null) {}
 return (When) ((OngoingStubbing) stub();
return (OngoingStubbing) stub(methodCall)();
return (OngoingStubbing) stub(). when(methodCall); }
return (T)
 return methodCall().stub();
 return (When(T), DefaultOngoingStubbing) stub();
return (OngoingStubbing) stub(when);
 return (InlineOngoingStubbing) stub();
return (OngoingStubbing) mock();
 return (Anywhere) stub();
return (AssumingStubbing) stub();
return (OngoingStubbing) stub() ; } return stub() ;
 if methodCall {
 return when);
 ((T) stub();
return (OngoingStubbing);
 when().stub();
 when(method);
 return when(OngoingStubbing) stub();
 return null);
 return when(module);
 if(true)
 return ((OngoingStubbing) stub();
return (OngoingStubbing) stub() + when(methodCall); }
 return (When()) stub();
 return (Function) stub();
 return when();(OngoingStubbing) stub();
return (OngoingStubbing) stub() || null;
 return when;
 return whenOf(OngoingStubbing) stub();
return (OngoingStubbing) stub(this);
 return mock);
return (OngoingStubbing) stub() when();
 (methodCall);
 when(this);
return (OngoingStubbing) stub(method);
return (OngoingStubbing) this();
return (OngoingStubbing) once();
 return (Any) stub();
 return (whenOngoingStubbing) stub();
 (When) stub();
return (OngoingStubbing) stubCall();
return (OngoingStubbing)();
return (OngoingStubbing) stub() || mock();
 when.stub();
 ((when) stub();
return (OngoingStubbing) which
return (OngoingStubbing) stub(MethodCall);
 return this;
return (OngoingStubbing) mock
 use methodCall.stub();
return (OngoingStubbing) stub(when());
return (OngoingStubbing) stub() || mock;
return (when);
 methodCall.stub();
 return once();
 return (AnyOngoingStubbing) stub();
 return true;
return (OngoingStubbing) stub(function());
 return mCall.stub();
return (OngoingStubbing) stub(METHODCall);
 return true);
 return this.stub();
 } return mock;
 return this);
 return _stub();
 return ((whenOngoingStubbing) stub();
 useMethodCall();
 if (...)
 if ()
return (OngoingStubbing) stubCall;
 }
 return how.stub();
return (OngoingStubbing) stub() if() ;
 throw methodCall;
 return #stub();
 } return null;
return (Callable) stub();
 if (})
 return anything();
 when.call();
 when().call();
return (When)
return (OngoingStubbing)  method call();
 return what();
return  method call ;
 return then();
 try {
 } return this;
 } else
 } return(OngoingStubbing) stub();
return (OngoingStubbing) stub() when;
 if provided
 if successful
 } }
return (OngoingStubbing) stub() when()
return (OngoingStubbing) stub() }...
 throw (OngoingStubbing) stub();
return (Whenever) stub();
 };
