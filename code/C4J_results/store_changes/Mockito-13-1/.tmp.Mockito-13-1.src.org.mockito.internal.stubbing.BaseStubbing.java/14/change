return thenAnswer(new Returns(value));
 return stubbing.thenAnswer(new Returns(value));
 return thenReturns(value));
 return thenReturn(value));
return thenAnswer(value);
 thenAnswer(new Returns(value));
 return stubbing;
 return (value);
 return thenAnswer(return value);
 return thenAnswer(new Returns(value)));
 return value;
 return thenAnswer(new Returns(value);
 return thenAnswer(new ThrowsException(value));
 return thenAnswer(new CallsRealMethods(new Returns(value));
 if (value == null) { return null; }
 return thenAnswer(new Returns(value)); };
 return thenReturn(value);
 return thenAnswer(return(value));
 return thenAnswer(new Returns(return value));
 if (value!= null) {
return thenAnswer(new Returns(value)) ; } return stubbing ;
 return value);
 return thenAnswer(new OngoingReturn(value));
 return value.thenAnswer(new Returns(value));
 if (value == null) { thenReturn(null); }
 if (value == null) {
 if (value) {
 if (value!= null)
 return thenAnswer(Returns(value));
 return thenAnswer(return value));
 return thenAnswer(new Return(value));
 return thenAnswer(new Return(value);
return thenAnswer(new Returns(value)) ; } return BaseStubbing ;
 return thenAnswer(new Return(new Returns(value));
 return thenAnswer(new OngoingReturns(value));
 if (value == null) { thenReturn((T) null);
 if (value == null) return null;
 if (value == null) { thenReturn((T) null); }
 return thenAnswer(new ReturnsException(value));
 return value));
 if (value == null)
 if (value == null) { thenReturn((Nullable) null); }
return thenAnswer(new Returns(value)) ; } return BaseStubbing<T>
 return thenAnswer(thenReturns(value));
return thenAnswer(new Returns(value)) ; return stubbing ;
 if (value == null) { return null }
 return thenAnswer(value;
 return thenAnswer(new CallsRealMethods().thenReturns(value));
 return thenAnswer(new Returns(value)); }
return thenAnswer(new Returns(value)) ; } return BaseStubbing
 return thenAnswer(new OngoingStubbing(value));
return thenAnswer(new  Value());
 return thenAnswer(new Returns(value), null);
 return thenAnswer(new CallsRealMethods(), thenReturns(value));
 if (value == null) { return null};
 if (value == null) { thenReturn((Null) null); }
 return thenAnswer(new Return(value)));
 return thenAnswer(new Returns(value, null));
 if (value instanceof Returns) {
 return thenAnswer(new Returns(value,)));
 if (value == null) { return thenAnswer(null); } if (value!= null) {
 if (value == null) { thenReturn(null);
return thenAnswer(new Returns(value)) ; } return baseStubbing ;
 if (value == null) { return thenAnswer(null); } if (value instanceof Returns) {
 thenReturn(value));
 return thenAnswer(this, value);
return thenAnswer(new Returns());
 return (value));
 return thenAnswer(new Returns(value); });
 return thenAnswer(new Returns(value, values));
 return thenAnswer(new Returns(value););
 return thenAnswer(new CallsRealMethods()); } public OngoingStubbing<T> thenCallRealMethod() {
 return thenAnswer(new CallsRealMethods()); } public OngoingStubbing<T> thenReturn() {
 return thenAnswer(new Return(return value));
 return thenAnswer(null, value);
 return thenAnswer(value));
 if (value!= null) { thenReturn(value); }
 return thenAnswer(new Returns(value)); } public OngoingStubbing<T> {
 return thenAnswer(new Returns(value, value));
 return thenAnswer(new Returns(value)); } public OngoingStubbing<T> thenReturn() {
 return thenAnswer(new Returns(value), stubbing);
 if (value == null) { thenThrow((Throwable) null); }
 if (value!= null) { return value; }
 if (values == null) { thenReturn((T) null); }
 if (value == null) { return thenAnswer(null); } if (value!= null)
 return thenAnswer(new Returns(value)); } public OngoingStubbing<T> thenReturn(value) {
 if (value == null) { thenReturn((Null) null);
 if (value == null) { return thenAnswer(null); } if (values == null) { return thenAnswer(null); }
 return thenAnswer(new Returns(value)); } public OngoingStubbing<T> thenThrow() {
return thenAnswer(new Returns(value)) ; } return baseStubbing<T>
 return thenAnswer(new CallsRealMethods()(new Returns(value));
 if (values == null) { thenReturn((T) null);
 return thenAnswer(new CallsRealMethods(value)); } public OngoingStubbing<T> thenReturn() {
 if (value == null) { return thenAnswer(null); } if (value!= null) { return thenAnswer(value); }
 if (value == null) { thenReturn((Throwable) null); }
 return thenAnswer(new CallsRealMethods()); } public OngoingStubbing<T> thenCallMethod() {
 return thenAnswer(new Returns(value)); } public OngoingStubbing<T> thenReturnValue() {
 return thenAnswer(new Returns(...value));
 thenAnswer(value));
 if (values == null) { thenReturn(null); }
 return thenAnswer(new Returns(value)) null;
 return thenAnswer(value);;
 return thenReturn(value;
 if (value == null) { return thenAnswer(null); } if (value == null) { return null; }
 return thenAnswer(new CallsRealMethods()); } public OngoingStubbing<T> thenCallResult() {
 return thenAnswer(new CallsRealMethods()); } public OngoingStubbing<T> thenThrow() {
 if (value == null) return;
 return (new Returns(value));
 return thenAnswer(new CallsRealMethods(value)); } public OngoingStubbing<T> {
 if (value!= null) return value;
 if (value == null) { return thenAnswer(new Returns(null)); } else {
 return thenAnswer(new Returns(value), value);
 return thenAnswer(value(new Returns(value));
 return thenAnswer(new CallsRealMethods()); } public DeprecatedOngoingStubbing
 return thenAnswer(new CallsRealMethods()); } public DeprecatedOngoingStubbing {
 if (value == null) { return thenAnswer(new Returns(null)); }
 if (value == null) { return thenAnswer(null); } if (value!= null) { thenReturn(value); }
 return thenAnswer(new OngoingResult(value));
 if (value == null) { thenThrow((Null) null); }
 if (value == null) { thenReturn((null); }
 return thenAnswer(new Returns(null, value));
 if (value!= null) { return value }
 return thenAnswer(new Returns(value, values); });
return thenAnswer(new Returns(value)) ; } return BaseStubbingImpl ;
 return thenReturn(value); thenAnswer(new Returns(value));
return thenAnswer(new Returns(value)) ; } return baseStubbing ( ) ;
 return thenAnswer(value,new Returns(value));
 return thenAnswer(new Return(value)); };
 return thenAnswer(new Returns(value)); } public DeprecatedOngoing() {
 return thenAnswer(new CallsRealMethods(value)); } public OngoingStubbing<T> then() {
 if (values == null) { return null; }
 return this.thenAnswer(new Returns(value));
 return thenAnswer(new CallsRealMethods(value)); } public OngoingStubbing<T> thenThrow() {
 return thenAnswer(new Returns(value), true);
 if (value == null) { thenReturn((Nullable) null; }
 return thenAnswer((value));
 return thenAnswer(new CallsRealMethods()).thenAnswer(new Returns(value));
 if (value == null) { thenReturn((String) null); }
 return thenAnswer(new Returns(new Returns(value));
 return thenAnswer(new Returns(value), false);
 if (value!= null) { thenReturn(value);
 return thenAnswer(new Returns(value)); } public OngoingStubbing<T> thenThrow(...) {
 if (value == null) { return thenAnswer(null); } if (value!= null) { thenReturn(value, values); }
 return thenAnswer(new Return(value, values));
return thenAnswer(new Returns(value)); } return baseStubbing
 return thenAnswer(new CallsRealMethods(value)); } public OngoingStubbing<T> returns {
 return ((value));
 return returns(value));
 return thenAnswer(new CallsRealMethods()); } public OngoingStubbing<T> result() {
 return thenAnswer(new CallsRealMethods()); } public DeprecatedOngoing() {
 if (value == null) { return thenAnswer(null); } if (values == null) { thenReturn(null); } else {
 return thenAnswer(new Returns(value, values););
 if (value == null) { return thenAnswer(new Returns(null)); } } else {
 return thenAnswer(new Returns(value, false));
 return thenAnswer(new CallsRealMethods(value)); } public OngoingStubbing<T> thenCallResult() {
 return thenAnswer(new CallsRealMethods(value)); } public OngoingStubbing<T> thenReturnValue() {
 if (value == null) { return thenAnswer(null); } if (value!= null) { return thenAnswer(value); } else
 return thenAnswer(new Returns(value)); } public OngoingStubbing<T> thenReturn {
 if (value == null) { return thenAnswer(null); } if (value!= null) { return thenAnswer(value);
 this. thenReturn ( value ) ; } public OngoingStubbing<T> returns {
 return returns(value);
 return thenAnswer(new CallRealMethod(new Returns(value));
 return thenAnswer(value); return toAnswer(new Returns(value));
 return thenAnswer(new Value));
 if (value == null) { return thenAnswer(null); } if (value == null) { return thenAnswer(null);
 return thenAnswer(new Returns(value)); } public OngoingStubbing<T> then() {
 return thenAnswer(new ReturnValue());
 return thenAnswer(new IncomingStubbing(value));
 return thenAnswer(new Returns(!value));
 return thenAnswer(new Returns(value)) ; return null;
 if (value == null) { return thenAnswer(null); } if (value == null) {
 return this.thenReturn(new Returns(value));
 if (value == null) { return thenAnswer(null); } if (values == null) { return thenAnswer(null); } else
 return thenAnswer(new Returns(value)); } public OngoingStubbing<T> return {
 return thenAnswer(new CallResult(new Returns(value));
 return thenReturn(value); return thenAnswer(new Returns(value));
 return thenAnswer(new Calls(value)|new Returns(value));
 return thenAnswer(New Returns(value));
 if (value!== null) {
 return thenAnswer(new Returns(value, values, null));
 return thenAnswer(new OutgoingStubbing(value));
 return soAnswer(new CallsRealMethods(new Returns(value));
 return thenAnswer(null) value;
 if (value == null) { return thenAnswer(null); } if (value!= null) { thenReturn(value); } else
 if (value == null) { return thenAnswer(null); } if (values == null) { thenReturn(null); } else
 return thenAnswer(new Returns(value)); } public Returns<T value> {
 if (value == null) { thenReturn((T) null});
 return this.value;
 return thenAnswer(new AnnotatedReturns(value));
 return thenAnswer(Return(value));
 return thenAnswer(new Returns(returnValue));
 if (value == null) { return thenAnswer(new Returns(null); } else {
return thenAnswer(new Returns(value)) ; } return baseStubbingImpl ;
 if (value == null) { return void 0; }
 if (value == null) { return thenAnswer(null); } if (value!= null) { return thenAnswer(null);
 return thenAnswer(new Return() value;
 return thenAnswer(new Returns(value));;
 if (value == null) { thenReturn((Nullable) null); } } else {
 return.thenAnswer(new Returns(value));
 return thenAnswer(new returns(value));
return thenAnswer(new Returns(value)) ; } return BaseStubbing ; }
 return thenAnswer(new CallsRealMethods(value)) ; }
 if (value == null) { thenReturn((Nullable) null); } else {
 return thenAnswer(new Returns()(value));
 return thenAnswer(new Returns($value));
 if (value == null) { return thenAnswer(null); } if (value!= null) { thenReturn(value); } }
 thenAnswer(value);
 return thenAnswer(new Returns(value()));
 return thenAnswer(void 0);
return thenAnswer(new Returns(value)) ; } return baseStubbing ; }
 return thenAnswer(new CallsRealMethods(thenReturns(value));
 return thenReceive(new Returns(value));
 return toAnswer(thenReturns(value));
 return thenAnswer(new Value);
 return thenAnswer(new ReturnResult(value));
 return thenAnswer(new CallsRealMethods().thenAnswer(new Returns(value));
 if (value == null) { return thenAnswer(null); } if (value!= null) { return thenAnswer(value); } }
 thenAnswer(Returns(value));
 if (values == null) return null;
 return thenAnswer(new (value));
 return thenAnswer(new CallsRealMethods(value, values));
 return then (value);
return thenAnswer(new Returns(value)) ; } return baseStubbing(this);
 thenReturn(value);
 return thenAnswer(void value);
 return thenAnswer(value); return thenAnswer(new Returns(value));
 if (value == null) { return thenAnswer(new Returns(null)); } else
 return thenReturn(value,new Returns(value));
 return thenAnswer(new ReturnsResponse(value));
 return thenReturn(value) thenAnswer(new Returns(value));
 return thenAnswer(null,new Returns(value));
 return thenAnswer(new ThenReturns(value));
 return thenAnswer(new Return());
 if (value == null) { return thenAnswer(null); } else { stubbing = thenReturn(value); } } ;
 return thenAnswer(new CallsRealMethods())(new Returns(value));
 return thatAnswer(new CallsRealMethods(new Returns(value));
 return thenReturn(value); return toAnswer(new Returns(value));
 return thenAnswer(new CallsRealMethods() thenReturns(value));
 return this.thenReturn(value).thenAnswer(new Returns(value));
 if (value == null) { return }
 return thenAnswer(New Return(value));
 return thenAnswer(); thenAnswer(new Returns(value));
 return thenAnswer(new returns(value)));
return thenAnswer(new Returns(value, stubbing));
 return thenAnswer(new CallsRealMethod(new Returns(value));
return thenAnswer(new Returns(value) {}) ; } return BaseStubbing ;
 if (value == null) { return thenAnswer(null); } if (value!= null) { return value; } else
 if (value == null) { return thenAnswer(null); } if (value == null) { return null; } else
 return thenAnswer(return value);;
 return thenAnswer(new InlineReturns(value));
 if (value instanceof Return) {
 return thenAnswer(new Calls(value)||new Returns(value));
 return thenAnswer(new Returns()); return thenAnswer(new Returns(value));
 return thenAnswer(new CallReturn(new Returns(value));
 return thenReturn(value) { return thenAnswer(new Returns(value));
 return thenAnswer(String) value);
 return thenAnswer(new OngoingReturnResult(value));
 return thenAnswer(new T));
 return thenReturn(Returns(value));
 if (value == null) { return thenAnswer(null); } if (values == null) { return null; } else
return thenAnswer(new Returns(value) {}) ; } return BaseStubbing
 return thenAnswer(new ReturnValue());;
 if (values == null) {
 return thenAnswer(new SimpleReturns(value));
 return thenReturn(return value);
 return thenAnswer(void(value));
 return thenAnswer(new AppropriateReturns(value));
 return thenAnswer(new CallsMethods(new Returns(value));
return thenAnswer(new Returns(value)) ; } } return BaseStubbing
 if (value == null) { thenReturn((Nullable) null); } else
return thenAnswer(new Returns(value)). thenThrow(throwable);
 return thenReturn(value)? thenAnswer(new Returns(value));
 return thenReturn(value), thenAnswer(new Returns(value));
 return thenAnswer(void) value);
 return thenAnswer(new ReturnValue(value));
 return thenAnswer(new ReturnValue();
 return thenAnswer(new OngoingReturnException(value));
 if (value == null) { thenReturn((Nullable) null); } }
return thenAnswer() ;
 return stubbing.thenReturn(new Returns(value));
 return thenAnswer(new DefaultReturns(value));
 return this.thenReturn(value, values).thenAnswer(new Returns(value));
return thenAnswer(new Returns(value)); } return Base stubbing ;
 return thenAnswer(new AppliedReturns(value));
 if (value!= null) { thenReturn(value });
 return thenAnswer(new Returning(value));
 return thenAnswer(new ReturnsResult(value));
 return thenAnswer(new Result(value);
 return this.thenReturn(value)().thenAnswer(new Returns(value));
 return thenAnswer(new OngoingMethodReturns(value));
 return thenAnswer(new InlineReturnException(value));
 return thenAnswer(new CallRealMethods().thenAnswer(new Returns(value));
 return thenAnswer(new Returns()value);
 return thenReturn(value, values).thenAnswer(new Returns(value));
 return thenAnswer(new CallsRealMethods()); return(new Returns(value));
 return thenAnswer(new WrappedReturns(value));
return thenAnswer(new Returns(value, values, stubbing));
 return thenAnswer(new InjectableReturns(value));
 return answer(value);
 return thenAnswer(new returns(value);
 if (value == null) { return thenAnswer(new Returns(null); } else
 return thenAnswer(new OngoingResponse(value));
 if (value == null) { return thenAnswer(null); } return stubbing ; }
return thenAnswer(new Returns(value) {}) ; } return baseStubbing ;
return thenAnswer(new Returns(value) {}); } return stubbing ;
return thenAnswer(new  CallsRealMethods(value)); return stubbing ;
 return toAnswer(newReturns(value));
return thenAnswer(new Returns(value, null, null));
 return toAnswer(Returns(value));
 return thenAnswer(returnValue(new Returns(value));
 return thenAnswer(new ApplyingReturns(value));
 return extendingStubbing.thenAnswer(new Returns(value));
return thenAnswer(new Returns(value) {} return stubbing;
 return thenAnswer(null value));
 return thenAnswer(new RetrunsException(value));
 return thenAnswer(new ThenReturn(new Returns(value));
 return thenReturn((value));
 return thatAnswer(value);
 return thenAnswer(new RetunsException(value));
 if (!value) {
 return toAnswer(new Return(new Returns(value));
 return thenAnswer(new Returns(value)); } }
 return thenAnswer(new CallsMethod(new Returns(value));
 return thenAnswer(new CallsRealMethods()); then(new Returns(value));
 return thenAnswer(new Callable(new Returns(value));
 return thenAnswer(new IncomingResult(value));
 return toAnswer(value);
 return nowReturn(); return thenAnswer(new Returns(value));
 return return(value);
return thenAnswer(new Returns(value,... values));
 return new ThenReturn(value));
 return thatReturn(value).thenAnswer(new Returns(value));
 return thenReturn(value).thenAnswer(new Returns(value));
 return thenReturn(); return thenAnswer(new Returns(value));
 return this.value.thenAnswer(new Returns(value));
 return thenAnswer(new Result(new Returns(value));
return thenAnswer(new Returns(value) {}); return stubbing;
 return thatAnswer(new Returns(value));
 thenAnswer(return value);
 return thenAnswer(null value);
 return thenAnswer(new OngoingCallWithReturns(value));
 return soAnswer(new ThenReturn(new Returns(value));
 return thenAnswer(new IncomingReturn(value));
return thenAnswer(new Returns(value, values, false));
 return toAnswer(new ThenReturns(value));
 return thenAnswer(new OngoingCallableReturns(value));
 if (values == null)
return thenAnswer(new Returns(value)) ; } return base stubbing ;
 return thenAnswer(new CallsRealMethods())->thenAnswer(new Returns(value));
 return thenAnswer(new Result(value));
return thenAnswer(new Returns(Value(value)));
 return thenReturn() value;
 return thenAnswer());
 return thenAnswer(new CallsRealMethods())#thenAnswer(new Returns(value));
 return thenAnswer(null, value).thenAnswer(new Returns(value));
 return thenReceive(value));
 return thenAnswer(new AnyReturns(value));
 return thenAnswer(this, value).thenAnswer(new Returns(value));
 return this ; }
 return thenAnswer(new Returns(value, values)); } }
return thenAnswer(new Returns(value) {}); } return baseStubbing
 return thatReturn(value)->thenAnswer(new Returns(value));
 return thenAnswer(new OngoingCallsReturns(value));
 return extending(value).thenAnswer(new Returns(value));
 return value == null;
 return thenAnswer(new OngoingWrapperReturns(value));
 return soAnswer(new Returns(value));
 return thenAnswer(new Retunsable(value));
 return thenAnswer(returnValue).thenAnswer(new Returns(value));
 return thenAnswer(new T);
 return thenAnswer(return value).thenAnswer(new Returns(value));
 return that (value);
 return value ; }
 return thenAnswer()value;
 return thenResolve(new Returns(value));
 return thenAnswer(new OngoingWithReturns(value));
return thenAnswer(new Returns(value, 0.0));
 return thenAnswer(new RetrieveResult(value));
 return thenResolve(value));
return thenAnswer(new Returns(value)) ; return baseStubbing
 return answer(new Returns(value));
 return thenReturn(return(value));
 thenAnswer(thenReturns(value));
 return stubbing.thenReturns(value));
 then(new Returns(value));
return thenAnswer(new Returns(value)). thenThrow(null);
return thenAnswer(new Returns(value) + stubbing);
 answer(new Returns(value));
return thenAnswer(new Returns(value) {});
 return thisStubbing.thenAnswer(new Returns(value));
 return value === null;
 if (value)
 return then(thenReturns(value));
return thenAnswer(new Returns(value)) } return stubbing ;
return thenAnswer(new Returns(value)) + stubbing;
return thenAnswer(new Returns(value) { } return stubbing);
return thenAnswer(new Returns(value)) ; } return Stubbing ;
 return booleans.thenAnswer(new Returns(value));
return thenAnswer(new Returns(value, values, true));
 return thenAnswer(null); }
 return null);
 return value || null;
 return this.result;
 return thenAnswer(null);
 return this.result.thenAnswer(new Returns(value));
 return thenReturn()(new Returns(value));
return thenAnswer(new Returns(value)) ; } return null ;
 return - stubbing.thenAnswer(new Returns(value));
return thenAnswer(new Returns(value)) ; return this;
 return this.this.thenAnswer(new Returns(value));
 return thenReturnReturn(value));
 return thenCalls(new Returns(value));
 return thenReturnImpl(value));
 return return(value));
 return return thenReturn(value));
 return thenReturnImpl(new Returns(value));
return thenAnswer(new Returns(value, throwable));
 thenAnswer(return value));
 return thenAnswer(new CallResult().thenAnswer(new Returns(value));
 return thenAnswer(void 0)->thenAnswer(new Returns(value));
return thenAnswer(new Returns(value, 0));
 then(value));
 if (!value)
 thenAnswer(return(value));
 return thenAnswer(new Callable().thenAnswer(new Returns(value));
 return OngoingHelper.thenAnswer(new Returns(value));
 if ($value) {
return thenAnswer(new Returns(value) throws(value));
 return OngoingSupport.thenAnswer(new Returns(value));
 return value ;
return thenAnswer(new Returns(value) {} return value);
return thenAnswer(new Returns()));
 return null;
 returns(value));
return thenAnswer(new Returns(value)) return null;
return thenAnswer(new  value);
 return new ThenReturns(value));
 thenAnswer((value));
 return new SimpleReturns(value));
return thenAnswer(new  returnValue());
 return this.answer(new Returns(value));
 return then(value));
 return thenReturnWrapper(new Returns(value));
 return thenReply(value);
 return return value ;
return thenAnswer(new Returns(value)) + 1;
return thenAnswer(new Returns(value)) return value;
return thenAnswer(new  Gets(value));
 return thenResult(value);
return thenAnswer(new Returns(value) return value);
 return (null);
return thenAnswer(new Returns(value)); return value;
 return (thenReturns(value));
return thenAnswer(new Returns(value)) return stubbing
 return thatReturnedAnswer(new Returns(value));
 return null.thenAnswer(new Returns(value));
return thenAnswer(new Returns(value) null);
 return thenReturnWith(new Returns(value));
 return null));
 (value));
return thenAnswer(new  Return()));
return thenAnswer(new Returns(););
 return thenResult(value));
 return -thenAnswer(new Returns(value));
return thenAnswer(new ReturnsValue());
 return thenReturnWithException(new Returns(value));
return thenAnswer(new Returns(value) {}});
 thenAnswer((Returns(value));
return thenAnswer(new Returns(value) throws exception);
 return answer(value));
 return _thenAnswer(new Returns(value));
 return...thenAnswer(new Returns(value));
 return Stubbing.thenAnswer(new Returns(value));
 return thenReply(value));
 then(value);
 value.thenAnswer(new Returns(value));
 return return value);
 return super.thenAnswer(new Returns(value));
 return null ; }
return thenAnswer(new  value());
return thenAnswer(new  Response());
 return thenReturn(new Returns(value));
 return values.thenAnswer(new Returns(value));
 return Stubbing;
 return null;
return  this;
 return ());
 return then(new Returns(value));
 return new Value;
 return returnValue;
 return this);
 ((value));
 soAnswer(new Returns(value));
return thenAnswer(new Returns(value) {} } });
 if (!)
return thenAnswer(Value);
return thenAnswerValue();
 return stubbing().thenAnswer(new Returns(value));
 return stubbling.thenAnswer(new Returns(value));
 return stubber.thenAnswer(new Returns(value));
return thenAnswer(...)
 reply(new Returns(value));
return thenAnswer(new Returns(value) {} }));
 return true;
 toAnswer(new Returns(value));
 return thatReturn(value));
 return Return(value));
 try {
return thenAnswer(new Returns(-value));
 return true);
 thenReturn(new Returns(value));
 return false;
 return return(new Returns(value));
return thenAnswer(this);
return thenAnswer(new Returns(value)) {};
 return soReturns(value));
 return withReturns(value));
 return thatReturns(value));
return thenAnswer(new Returns(Value));
 } {
 try to
 } }
return thenAnswer(new Returns(null));
 return
...
return thenAnswer(new Returns(values));
