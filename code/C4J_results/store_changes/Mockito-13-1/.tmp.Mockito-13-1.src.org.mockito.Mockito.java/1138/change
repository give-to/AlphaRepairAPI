return MOCKITO_CORE.verify(mock, mode);
return  mock ;
return  verify(mock, mode);
return MOCKITO_CORE.verify(mock);
 verify(mock, mode);
return MOCKITO_CORE. verify ( mock, mode ) ; }
return MOCKITO_CORE. verify ( mock ) ; }
 verify(mode);
return  mock. verify ( mode ) ; }
return  mock. verify ( mode ) ;
return MOCKITO_CORE.verify(mock, mode); *
return  mock. verify ( ) ;
return  mock ; }
return MOCKITO_CORE.verify(mock); *
 return _verify(mock, mode);
return MOCKITO_CORE. verify ( mock, mode ) ; } }
 return Mockito.verify(mock, mode);
return MOCKITO_CORE ; }
return MOCKITO_CORE.verify(mock, * mode);
 return _MOCKITO_CORE.verify(mock, mode);
return  mock. verify ( mode ) ; } }
return  Mockito. verify ( mock ) ; }
 mock.verify(mode);
return MOCKITO_CORE.verify(mock, verificationMode);
return MOCKITO_CORE.verify(mock, mode); * *
 return Mockito. verify ( mock, mode ) ; }
 if (mode!= null) {
 return MockitoUtils.verify(mock, mode);
 if (mode!= null)
 return super.verify(mock, mode);
return  Mockito. verify ( mock ) ;
return MOCKITO_CORE.verify ( mock, mode ) ; } return mock ;
return MOCKITO_CORE. verify ( mock, mode ) ; } } ;
return MOCKITO_CORE.verify(); *
 return verify(mode);
 return mock, mode);
 if ( mock == null ) return null ; if ( mode!= null ) {
 if ( mock == null ) return null ; if ( mode == null ) return mock ;
 mock.assert(mode);
return MOCKITO_CORE. mock ( ) ;
 return mock. verify ( mode ) ; } else { return mock. verify ( mode ) ; }
 if ( mock == null ) return null ; if ( mode == null ) return null ;
return MOCKITO_CORE. verify ( mock, mode -> mode ) ;
return MOCKITO_CORE. verify ( mock, mode, false ) ;
return MOCKITO_CORE.verify( mock, mode ) ; } return mock ; }
return  Mock. verify ( mock, mode ) ; }
 if ( mock == null ) { return null ; } else { mock. verify ( mode ) ; }
 return mock. verify ( mode ) ; } return mock ; }
 return mock. verify ( mode ) ; } else { return mock. verify ( ) ; }
 if ( mock == null ) { return null ; } else { return mock. verify ( mode ) ;
 if ( mock == null ) { return null ; } if ( mode == null ) { return null ; }
 if ( mock == null ) { return null ; } else { return mock. verify ( ) ;
 if ( mock == null ) return null ; if ( mode == 0 ) return mock ;
return MOCKITO_CORE.verify(mock, null, mode);
 if ( mock == null ) { return null ; } else { mock. verify ( mode ) ;
 return Mockito. verify ( mock, mode ) ; } }
 if ( mock == null ) { return null ; }
return MOCKITO_CORE.verify(mock, 0, mode);
return MOCKITO_CORE. verify ( mock, mode, true ) ;
 return mock. verify ( mode ) ; } else { mock. verify ( mode ) ; }
 if ( mock == null ) return null ; if ( mode!= null ) return mock ;
 return mock. verify ( mode ) ; } else { return mock. verify ( mode ) ; } }
 if ( mock == null ) return null ; if ( mode!= 0 ) return mock ;
return  mock. verify ( mode ) ; } } ;
return MOCKITO_CORE. verify ( ) ;
 return mock. verify ( mode ) ; } public <T > T verify(T mock, Mode mode) {
 return mock. verify ( mode ) ; } else { return mock. verify ( ) ;
 return mock. verify ( ) ; } public <T > T verify(T mock, Mode mode) {
 return Mockito. verify ( mock, mode ) ; } return mock ; }
 return mock.verify()(mode);
 if ( mock == null ) { return null ; } if ( mode == null ) { return ; }
 if ( mock == null ) return null ; if ( mode == null ) return null ; if ( mock == null ) return null ;
 return mock. verify ( mode ) ; } else { mock. verify ( mode ) ; } } ;
return  mock. verify ( mode, false ) ;
 return verify(lock, mode);
return  mock. verify ( mode, 0 ) ; }
return MOCKITO_CORE. verify ( mock, mode ). mock ;
 if ( mock == null ) return null ; if ( mode == null ) return null ; if ( mock instanceof Mockito ) {
 return MockUtils.verify(mock, mode);
return MOCKITO_CORE. verify ( mock, mode -> mode ) ; }
 return mock. verify ( mode ). never ( ) ; }
return  mock. verify ( mode. mode ) ;
return MOCKITO_CORE. mock ; }
 if ( mock == null ) return null ; if ( mode == null ) return null ; if ( mock!= null ) {
 return mock. verify ( mode ) ; } else { return mock ; } }
 if ( mock == null ) { return null ; } else { mock. verify ( ) ;
 return mock. verify ( mode ) ; } return mock ;
 return mock. verify ( mode ) ; } public <T> T verify() {
 return mock. verify ( mode ) ; } else { return mock. verify ( mode ) ;
 return mock. verify ( mode ) ; } else { mock. verify ( mode ) ; } }
 return Mockito. verify ( mock, mode ) ; } return mock ;
 if ( mock == null ) return null ; if ( mode == null ) return null ; if ( mock!= null ) return mock ;
 return mock. verify ( ) ; } public <T > T verify(T mock, VerificationMode mode) {
return  mock. verify ( mode ) ; } else { return mock. verify(mock, mode);
 if ( mock == null ) return null ; if ( mode == null ) return null ; if ( mock!= null )
 if ( mock == null ) return null ; if ( mode == null ) return null ; if ( mock instanceof Core ) {
return MOCKITO_CORE.verify(mock, mock, mode);
 mock. verify ( mode ) ; return mock. assert ( mode ) ; }
return MOCKITO_CORE.verify ( mock, mode ) ; } } ) ;
return MOCKITO_CORE ( mock ) ;
 mock. verify ( mode ) ; return mock ; } }
 return Mockito. verify ( mock, mode ) ; } } ;
 return verifyMock(mock, mode);
 if ( mock == null ) { return null ; } if ( mode == null ) { return mock ; }
 if ( mock == null ) return null ; if ( mode == null ) return null ; if ( mock == null ) return mock ;
 if ( mode == null ) { return mock ; }
 Mockito. verify ( mock, mode ) ; return mock ; } }
return  Mock. verify ( mock ) ; }
 return Mockito. verify ( mock, mode ) ; } } ) ;
 return mock. verify ( mode ) ; } else { return mock. reset ( ) ;
 if ( mock == null ) return null ; if ( mode!= null )
return MOCKITO_CORE_VERSION ;
 return Mockito. verify ( mock, mode ) ; } return mock ; } ;
 return mock. verify ( mode ) ; } return mock ; } ;
return  ( T ) mock ; }
 if ( mock == null ) { return null ; } if ( mode == null ) return null ;
 return MockITO_CORE.verify(mock, mode); } public static <T> T {
 if ( mock == null ) { return null ; } else { return mock. verify ( ) ; }
 return mock. verify ( mode ) ; } else { mock. verify ( ) ; }
 return Mockito. verify ( mock, mode ) ; } else { return mock ; }
return  mock. verify ( mode ) ; } else { return super. verify(mock, mode);
 if ( mock == null ) return null ; if ( mode == null ) return null ; if ( mock instanceof Mock ) {
return  Mockito. getInstance ( ). verify(mock, mode);
return  mock. verify ( mode ). mock ;
 return mock. verify ( ) ; } public <T > T verify(T mock, VerificationMode) {
 return mock. verify ( mode ) ; } public <T> T() {
return MOCKITO_CORE.verify(MOCKITO, mock, mode);
 return mock. verify ( mode ) ; } } ) ;
 return mock. verify ( mode ) ; } else { return mock ; } } ;
 if ( mock == null ) return null ; if ( mode == null ) return null ; if ( mock!= null ) return null ;
return  mock. assert ( mode ) ; } else { return mock. verify(mock, mode);
return  mock. verify ( mode ) ; } else { return verify(mock, mode);
 if ( mock == null ) { return null ; } else { Mockito. mock = mock ;
 return mock. verify ( mode ) ; } else { mock. reset ( ) ; }
 mock. verify ( mode ) ; return mock. assert ( mode ) ;
 * return mock.verify(mode);
 if ( mock == null ) return null ; if ( mode instanceof Mode ) {
 if ( mode == null ) return mock ;
 return mock. verify ( mode ) ; } else { return mock. null ; }
return MOCKITO_CORE. verify ( mock, mode, mock ) ; }
 return mock. verify ( mode ) ; } else { return mock. mock ; }
 return Mockito. verify ( mock, mode, false ) ; }
return  mock. verify ( mode ) ; } else { return Mock. verify(mock, mode);
 if ( mock == null ) { return null ; } else { mock = mode ; } }
 if ( mock == null ) return null ; if ( mode!= "none" )
 return Mock. verify ( mock, mode ) ; } }
 return mock. verify ( mode ) ;
return  MockitoImpl. verify(mock, mode);
return MOCKITO_CORE. verify ( mock, mode, 0 ) ; }
return MOCKITO_CORE.verify ( mock, mode ). get ( ) ;
 return mock.verify(mock, mode);
 return mock. verify ( mode ) ; } public <T > T verify(T mock mode) {
return  mock. if ( mode == null ) { return verify(mock, mode);
 Mockito. verify ( mock, mode ) ; return mock ; } ;
 mock. verify ( mode ) ; return mock ; } } ;
return MOCKITO_CORE.verify ( mock, mode, null ) ;
 if ( mock == null ) return null ; if ( mode == null ) return mock ; if ( mock!= null ) {
 Mockito. verify ( mock, mode ) ; return mock ; } } ;
 return mock. verify ( mode ) ; } else { mock. reset ( ) ;
 if (! ( mock instanceof Mockito ) ) { return mock ; }
return  mock. verify ( mode ) ; } else { return mock. assert(mock, mode);
return MOCKITO_CORE. verify ( mock, mode ) ; return mock ;
 return verify(ock, mode);
return MOCKITO_CORE.verify ( mock, mode ) ; return mock ; }
return MOCKITO_CORE.verify(MOCKITO_NAME, mock, mode);
 if ( mock == null ) return null ; if ( mode == null ) return null ; if ( mode!= null ) {
 if (mode == null) { return mock;
return MOCKITO_CORE.verify(mock, mode) ; } else { return mock ; } } ;
return MOCKITO_CORE.verify ( mock, mode, 0 ) ;
return MOCKITO_CORE.verify(mockObject, mode);
 if ( mock == null ) { return null ; } if ( mode == null ) return mock ;
 return Mockito. verify ( mock, mode ) ; } ;
 verify(lock, mode);
 return mock.assert(mode);
return  Mock. verify ( mock ) ;
 return Mockito. verify ( mock, mode, 0 ) ; }
 return Mockito. verify ( mock, mode ) ; } } ) ; }
 mock = mock.verify(mode);
 return mock. verify ( mode ) ; } public static <T> {
return MOCKITO_CORE.verify(MockITO, mock, mode);
return MOCKITO_CORE [ mode ] ;
 return MockITO_CORE.verify(mock, mode); } public static <T> * {
 return MockitoUtils. verifyMock(mock, mode);
return MOCKITO_CORE.verify(mock, mode) ; } return mock ; } ;
 return mock.verify*(mode);
 return mock. verify ( mode ) ; return mock;
 return Mockito. getDefaultInstance ( ).verify(mock, mode);
 if ( mock == null ) return null ; if ( mode == null ) return mock ; if ( mode!= null ) {
return  mock. verify ( mode ). mock ; }
return MOCKITO_CORE.verify(mock, mode, atLeastOnce());
return MOCKITO_CORE.verify(mock, mode) ; } else { return mock ; } }
 if ( mock == null ) return null ; if ( mode == 0 ) return mock ; if ( mode == 1 ) {
 return mock. verify ( ). times(x, mode);
return MOCKITO_CORE.verify(mock, mode, false, false);
 return mock. verify ( mode ) ; } public <T> T {
return MOCKITO_CORE.verify(mock, mode, atLeast(1);
 return Mockito. mock ( Mockito ).verify(mock, mode);
return MOCKITO_CORE.verify(MockITO. mock, mode);
return  Mockito. mock ; }
return MOCKITO_CORE.verify(mock, mode, mock);
return  Mockito. mock ( ) ;
return MOCKITO_CORE.verify(mock, true, mode);
 return mock. verify ( mode ) ; } <pre> *
 return mock. verify ( mode ) ; } public static <T> T {
return MOCKITO_CORE.verify(mock, mode, mock); *
 return mock. verify ( ). verify(mock, mode);
return  Mockito. create ( mock ). verify(mock, mode);
 return * verify(mock, mode);
 return MockitoContext. getInstance ( ).verify(mock, mode);
return MOCKITO_CORE.verify(mock, mode, true, false);
 if (! ( mode instanceof MockitoMode ) ) {
 return mock.verified(mode);
return  Mockito. mock ( mock ). verify(mock, mode);
return  Mockito. verify ( mock, mode ) ; } return verify(mock, mode);
return MOCKITO_CORE. get ( ) ;
return MOCKITO_CORE_INSTANCE. verify ( mock ) ;
return MOCKITO_CORE.verify(mock, validationMode);
return MOCKITO_CORE.verify(mock, mode.name(), mode);
 return mock);
 if ( mock == null ) { return mock ; }
 return mock. verify ( ). someMethod(mode);
return  mock. mock ;
 return Mockito. verify ( mock, mode ). mock ; }
 return Mockito. getInstance ( ). mock.verify(mock, mode);
 return Mockito. getInstance ( mode ).verify(mock, mode);
return MOCKITO_CORE.verify(MOCKITO_, mock, mode);
 return Mockito.verify(mode);
return MOCKITO_CORE.verify(mock, mode)? mock. verify ( mode ) : mock ;
return  Mockito. mock ( ). verify(mock, mode);
 return verify(mock(), mode);
 return verify(mock.*, mode);
return MOCKITO_CORE.verify(Mockito.class, mock, mode);
 return MockitoConstants.MOCKITO_CORE.verify(mock, mode);
return MOCKITO_CORE.verify( mock, mode, false ); *
 return MockITO_CORE.verify(mock, mode); } public static <T> T {}
 return mock. verify ( mode ) ; } public static <T> *
 if (mode == null) return null;
 return (T) MockitoUtils.verify(mock, mode);
 if (mode == null) {
 return mock.verify(mock);
return MOCKITO_CORE.verify(mock, mode) ; } else { return mock ; }
return MOCKITO_CORE.verify(mock, mode)? mock : null ; }
 return mock. verify ( mode ) ; } public <T> T mock {
 return Verify. verify(mock, mode);
 if ( mode == null ) { return ; }
 if ( mock == null ) return null ; if ( mode == null ) return null ; if ( mock == null ) return null ; *
 if ( mock == null ) return null ; if ( mode == null ) return null ; if ( mock == null ) return null ; } *
return  Mockito. verify ( ) ;
return MOCKITO_CORE. verify ( mock )
return  MockitoHelper. verify(mock, mode);
return  Mockito. mock ( mock, mode ). verifyMock(mock, mode);
 return Mockito. getInstance ( ). super.verify(mock, mode);
 return verifyInternal(mock, mode);
return  Mockito. create ( ). verify(mock, mode);
 return MockitoValidator.verify(mock, mode);
return MOCKITO_CORE.verify(mock, times(), false, mode);
return MOCKITO_CORE.verify(MOCKITO_API, mock, mode);
 return Mock.verify(mock, mode);
return  MockitoTest. verify(mock, mode);
return MOCKITO_CORE.verify(mock, mode). then ( ( ) -> mock ) ; }
return MOCKITO_CORE.verify(mock, mode).toString() ; }
 return MockitoClient. getInstance ( ).verify(mock, mode);
 return mock.verify(true, mode);
 return Mockito. getInstance ( )#verify(mock, mode);
return MOCKITO_CORE.verify(mock, mode).getResult ( ) ;
 return MockitoUtil.verify(mock, mode);
return MOCKITO_CORE.verify(mock, mode, true, true);
 if ( mock == null ) return null ; if ( mode == null ) return null ; if ( mock == null ) return null ; else {
return  mock. verify ( mode ). assert(mock, mode);
 return MockitoTestUtils.verify(mock, mode);
return  Mockito. mock ( mock, mode ) ; } return verify(mock, mode);
 if (mode == null) { mock = null;
return MOCKITO_CORE.verify(mock());
 verify(ock, mode);
return  MockitoUtils. verifyInternal(mock, mode);
return  ( T ) mock ; } }
return MOCKITO_CORE.verify(mock, mode) ; } else { return null ; } } ;
return MOCKITO_CORE.verify(mock, times(), 0, mode);
 return mock. verify ( mode ) ; } public <T > T verify(T mock, Mode mode) {}
 if ( mock == null ) return null ; if ( mode == null ) return null ; if ( mock == null ) return mock ; *
return MOCKITO_CORE.verify(mock, mode, -1);
return MOCKITO_CORE.verify(MOCKITO_VERSION, mock, mode);
 * return mock.verify()(mode);
return MOCKITO_CORE.verify(mock, Mode.NONE);
 return mock. verify ( mode ) ; } public <T> T *
 return verifyImpl(mock, mode);
return MOCKITO_CORE.verify(mock, mode, 0.0);
return MOCKITO_CORE.verify(mock, mode) ; } else { return mock. mock ; }
 if ( mock == null ) return null ; if ( mode == null ) return null ; if ( mock == null ) return mock ; } *
return  Mockito. getInstance ( ). verifyImpl(mock, mode);
return MOCKITO_CORE.verify(mock, mode). toString ( ) ;
return MOCKITO_CORE.verify(mock, - 1, mode);
return MOCKITO_CORE.verify(mock, mode).getValue ( ) ;
 return mock.verify(*, mode);
return MOCKITO_CORE. build ( ) ;
 return mock. verify ( mode ) ; });
 if ( mock == null ) return null ; if ( mode == null ) return null ; if ( mock!= null ) return mock ; } *
 return mock. verify ( mode ) ; } public <T > T verify(T mock) { *
return MOCKITO_CORE.verify(mock, mode, atLeast(1)));
return MOCKITO_CORE.verify(MOCKITO_CLASS, mock, mode);
 return Mockito. verify(lock,mode);
 if ( mode == "always" ) {
return MOCKITO_CORE.verify(mock, verifyMode);
 return Mockito. getInstance ( ). prototype.verify(mock, mode);
 synchronized(mutex) {
 return MockitoImpl. getInstance ( ).verify(mock, mode);
 return mock. verify ( ) ; } public <T > T verify(T mock, Mode mode) {}
 return Mockito. verify ( mock, 0,mode);
 if (! mock ) {
return MOCKITO_CORE.verify(mock, mode, atLeast(1));
 return MockitoVerifier.verify(mock, mode);
return MOCKITO_CORE.verify(mock, times()), mode);
 return mock. verify ( mode ) ; } public <T> *
return MOCKITO_CORE.verify(MockITO. class, mock, mode);
 * return Mockito.verify(mock, mode);
return MOCKITO_CORE.verify(mock, 1, mode);
return MOCKITO_CORE. get ( mock, mode ) ; }
 return mock. verify ( mode ) ; } public <T > T verify(T mock, Mode mode) *
return MOCKITO_CORE.verify(mock, mode, 0L);
 return mock.verify(null, mode);
 return Mockito. verify(ock,mode);
 mock.verify()(mode);
 if ( mock == null ) return null ; if ( mode == null ) return null ; if ( mock instanceof Core ) return
 return (T) Verify. verify(mock, mode);
 return mock. verify ( mode ) ; } public <T> {
 return (T) MockUtils.verify(mock, mode);
return  Mockito. verify ( mock, mode ). assert(mock, mode);
 return MockitoVerifierUtils.verify(mock, mode);
 return Mockito. getInstance ( ). impl.verify(mock, mode);
return MOCKITO_CORE.verify(mock, mode). then ( ( ) -> mock ) ;
 return (T) Mockito.verify(mock, mode);
return  mock. if ( mode == null ) " verify(mock, mode);
return MOCKITO_CORE. get ( mock, mode ) ;
 if ( mock == null ) return null ; if ( mode == null ) return null ; if ( mock instanceof Mock ) return
return  mock. verify ; }
 return mock. verify ( ) ; } public <T > T verify(T mock, Mode mode) *
 return mock.verify(this.mode);
return MOCKITO_CORE.verify(mock, mode, []));
 return mock.test(mode);
 return new Verify(mock, mode);
 mock = mock.times(mode);
return  mock. verify ( mode ) ; } else { return new Mock(mock, mode);
return MOCKITO_CORE.verify(mock, mode). toNullable ( ) ;
return  Mockito. mock ( mock ). verifyMock(mock, mode);
 if ( mock == null ) return null ; if ( mode == null ) return mock ; *
 Mockito. verify(mock, mode);
 if ( mock == null ) return null ; if ( mode == null ) return null ; *
 return Mockito. verify ( mock, mode;
 if ( mock == null ) return null ; if ( mode == null ) return null ; if ( mock instanceof Core ) #
 return MockitoMock.verify(mock, mode);
 return mock. verify ( ) ; } public <T > T verify(T mock, Mode mode) { *
 return MockitoUtilsUtils.verify(mock, mode);
 return verify(mi, mode);
return  mock. verify ( mode ) ; } return verify(mock, mode);
 if ( mock == null ) return null ; if ( mode == null ) return null ; else {
return MOCKITO_CORE.verify(mock, 0.0, mode);
 return Mockito. verify ( mock, );
 return Mockito. mock ( )#verify(mock, mode);
 synchronized(lock) {
return MOCKITO_CORE.verify(mock, mode) ; } return mock ; } }
 return Mockito. verify(null, mock, mode);
 return Mockito. verifyInstance( mock, mode);
 T mock = mock. clone ( ) ; if ( mock == null ) return null ; if ( mode == null ) return mock ; } *
return MOCKITO_CORE.verify(mockObj, mode);
 return Mockito. verify(mock, _mode);
 return Mockito. verify(mock mock);
 return MockitoUtil. verifyMock(mock, mode);
return MOCKITO_CORE. get ( mock ) ; }
 return MockitoUtils. verifyImpl(mock, mode);
return MOCKITO_CORE.verify(mock, mode, ""));
return  mock ; } }
 return mock. verify ( mode ) ; } <pre> * *
 return mock.verify(this, mode);
 return mock. verify ( mode ) ; } public <T> T verify() {}
 return verify(mock object, mode);
return MOCKITO_CORE.verify(mock, mode)? mock : null ;
return  Mockito. getInstance ( ). verifyInternal(mock, mode);
 return Mockito. verify(mock object, mode);
 return Mockito. verify(mock, null, mode);
return MOCKITO_CORE.verify(mock, mode) ; } else { return null ; } }
 return mock.verify(0, mode);
return  mock ( mode ) ;
 return MockHelper. verify(mock, mode);
 return Mockito. verify(mock mock, mode);
 return Mockito. instance ( ).verify(mock, mode);
 return Mockito. verifyMock( mock, mode);
return MOCKITO_CORE.verify(mock, false, mode);
return  Mockito. getInstance ( ). verifyInstance(mock, mode);
 return MockitoClient. getInstance ( )#verify(mock, mode);
 return MockitoManager. getInstance ( mock ).verify(mock, mode);
return  mock. verify ( mode )
 return Mockito_MOCKITO_CORE.verify(mock, mode);
 return Mockito. mockFactory ( ).verify(mock, mode);
 return verify(mock);
 if (mode == null) { return null;
return  Mockito. verify ( mock, mode ). verify(mock, mode);
 if (mode == null) { return -1;
return  mock. verify ( mode ) ; } else { return defaultCheck(mock, mode);
return MOCKITO_CORE.verify(mock, mode).toString() ; *
 return mock == null? null : mock;
 if (mode!= null) return;
return MOCKITO_CORE.verify(mock, mode) ; } else { mock = null ; }
return MOCKITO_CORE.verify ( mock, mode ) ; } } }
 return MockITO_CORE.MOCKITO_CORE.verify(mock, mode);
 return mock. verify ( mode ) ; } public <T > T verify(T mock mode) {}
return MOCKITO_CORE. get ( mock ) ;
 return Mockito. verify(mock, *mode);
 mock.verified(mode);
return MOCKITO_CORE.verify(mock, mode) ; return mock. verify ( ) ;
return  mock. if ( mode == null ) { return new Verify(mock, mode);
return  mock. mock ; }
return MOCKITO_CORE.verify(mock, mode, atLeastOnce);
return  mock ; } return mock ;
return  mock. verify ( mode ) ; } return new Mock(mock, mode);
 return MockitoVerificationUtils.verify(mock, mode);
return MOCKITO_CORE_INSTANCE ( mock ) ;
 if ( mock == null ) return null ; if ( mode == null ) return null ; } *
 return mock. verify ( mode ) ; } public <T> T verify() *
 return Mockito. verify ( mock, mock,mode);
 if (mode == "default") {
return MOCKITO_CORE.verify(mock.class, mock, mode);
 return MockitoImpl. mock ( ).verify(mock, mode);
return MOCKITO_CORE.verify(mock, mode).thenApply(null); * *
 return verify()(mock, mode);
return  mock. verify ( mode ). verify(mock, mode);
 return assertMock( mock, mode);
 return mock. verify ( ). verify(mode);
 return Mockito.MOCKITO_CORE.verify(mock, mode);
 if ( mock == null ) return null ; if ( mode == null ) return mock ; } *
return MOCKITO_CORE_INSTANCE. verify ( ) ;
 return MockUtil.verify(mock, mode);
 return Mockito. verify(mock());
 if (! mock ) return ;
 return mock. verify ( mode ) ; } public <T> T
 return mock. verify ( ). assertWith(mock, mode);
 * return mock.verified(mode);
return MOCKITO_CORE.verify(mock, mode.toString(...));
 return MockitoImplUtils.verify(mock, mode);
 assert(mode);
return MOCKITO_CORE.verify(mock.*, mode);
return MOCKITO_CORE.verify(mock); * *
 return Mockito. verify(mock(), mode);
return  Mockito. mock ( mock, mode ). assertThat(mock, mode);
 return mock. verify ( mode ) ; } public <T > T verify(T mock mode) *
return  mock. verify(); *
 return MockitoImpl# verify(mock, mode);
 return mock. verify ( ). times(1, mode);
return MOCKITO_CORE.verify(ock, mode);
return MOCKITO_CORE.verify(mock, 0L, mode);
 * return mock.assert(mode);
return MOCKITO_CORE_VERIFICATION_MODE ;
return  Mockito. mock ( mock, mode ). verifyWith(mock, mode);
return  ( T ) mock ; } } ;
return MOCKITO_CORE. mock ;
return MOCKITO_CORE.verify(mock, mode, atLeast(2)));
 return MockitoUtils. verifyInner(mock, mode);
return MOCKITO_CORE. create ( mock ) ; }
return  ( T ) mock. mock ; }
 return Mockito. verify(mock, true, mode);
 return mock. verify ( ). times(mode);
return MOCKITO_CORE.verify(mock, mode). toNull ( ) ;
return MOCKITO_CORE.verify(mock, mode.toString(), false);
return MOCKITO_CORE.verify(mockObject);
 return Mockito. INSTANCE.verify(mock, mode);
return MOCKITO_CORE.verify(mock,  mode).thenApply(null, mock); *
 return CORE_MOCKITO_CORE.verify(mock, mode);
return MOCKITO_CORE.verify(mock, -1);
 verify(mi, mode);
return MOCKITO_CORE_INSTALLED_MOCKS ;
 return Mockito. default ( mode ).verify(mock, mode);
 return MockITO_CORE_MOCKITO_CORE.verify(mock, mode);
 return Mockito. verifyInternal(mock, mode);
 return MockValidator.verify(mock, mode);
return MOCKITO_CORE.verify(mock, mode, "atLeastOnce");
return MOCKITO_CORE.verify(mock,  mode) ; } return mock ; } ) ;
return  mock ( ) ;
 return mock.verify(mode, true);
return MOCKITO_CORE.verify(mock, mode). toNull ( ) ; }
return MOCKITO_CORE_INSTALLED_VERSION ;
 return verify(me, mode);
return  mock. if ( mode == null ) { return defaultCheck(mock, mode);
 return (T) MockitoConstants.MOCKITO_CORE.verify(mock, mode);
return MOCKITO_CORE.verify(mock, mode.getMode ( ));
 mock.verify*(mode);
return MOCKITO_CORE.verify(mock,  mode) ; } return mock. mock ; }
 <pre> *
 return MockitoHelper. verifyInternal(mock, mode);
 if (mode) {
 return mock. verify ( ). verifyWith(mock, mode);
 return mock.verify(_);
 if ( mock == null ) { return null ; } else {
return MOCKITO_CORE.verify(mock, mode, atLeast(2);
return MOCKITO_CORE.verify(mock,  mode) ; } else { return null ; }
return MOCKITO_CORE.verify(mock, mode, atLeastOnce(), false);
return MOCKITO_CORE.verify(mock, mode); * } *
return MOCKITO_CORE_INSTALLED_MOCK ;
return MOCKITO_CORE.INSTANCE ;
return MOCKITO_CORE.verify(mock, mode).getResult(); *
 Mock.verify(mode);
return MOCKITO_CORE ( mock, mode ) ; } }
 if (mode == null) { mock = mock;
 if (mode == null)
 return MockitoVerificationHelper.verify(mock, mode);
 if ( mock == null ) { return null ; } *
return MOCKITO_CORE. create ( ) ;
 return verifyImpl(lock, mode);
return MOCKITO_CORE.verify(mock, mode).someMethod(true);
return MOCKITO_CORE.verify(mock, mode).toString(true); *
return MOCKITO_CORE.verify(mock, mode). then ( function ( ) { } )
return MOCKITO_CORE.verify(mock, mode).toString(null); *
 mock.test(mode);
 return mock == null? : mock;
 mock.check(mode);
return MOCKITO_CORE_VERIFICATION ; }
 return verifyInner(mock, mode);
 return new Verify(lock, mode);
 return MockitoVerificationMode.verify(mock, mode);
return MOCKITO_CORE.verify(mock, mode, atLeast(?));
 * return mock.verify() mode;
 if (mode == null) return mock; *
return MOCKITO_CORE.verify(mock, ".", mode);
 return Mockito. INSTANCE#verify(mock, mode);
 return mock. verify ( mode ) ; } <pre> * {
 return MockitoImpl.MOCKITO_CORE.verify(mock, mode);
 if ( mock == null ) { return mock ; } else {
return MOCKITO_CORE_CHECK ;
 return Mockito# verify(mock, mode);
 return mock. verify ( mode ) ; } *
return MOCKITO_CORE_INSTALLED ; }
 * return mock;
return MOCKITO_CORE == mode ; }
return MOCKITO_CORE.verify(mock, mode).* *
return MOCKITO_CORE.verify(mock, mode).someMethod(null);
 return MockitoVerifyHelper.verify(mock, mode);
 return Mockito. _MOCKITO_CORE.verify(mock, mode);
return MOCKITO_CORE.MOCK ;
return MOCKITO_CORE.verify(null, null, mock, mode);
 return Mock. verifyInstance(mock, mode);
return MOCKITO_CORE.verify(mock, mode).toString() + "";
 return MockitoImpl. mock;
 return MockitoUtils.MOCKITO_CORE.verify(mock, mode);
return MOCKITO_CORE.verify(MOCKITO2, mock, mode);
 return (T) MockitoUtils.MOCKITO_CORE.verify(mock, mode);
return MOCKITO_CORE.verify(mock, mode).then(function() { return mock; });
 return mock ; } else { return _MOCKITO_CORE.verify(mock, mode);
return MOCKITO_CORE.verify(mockObj);
 if ( mode == null ) { return mock ; } *
return  (T) verify(mock, mode);
return MOCKITO_CORE.verify(mock, mode, 0, 0, 0);
return MOCKITO_CORE.verify(Mockito.class, mode);
return MOCKITO_CORE_INSTANCE ;
 return mock. verify ( mode ) ; return verify(mock, mode);
return MOCKITO_CORE.verify(mock, " ", mode);
 * return mock.verify(); *;
 if ( mock == null ) { return mock ; } *
return MOCKITO_CORE.verify(MOCKITO__, mock, mode);
return MOCKITO_CORE.verify(null, mock, mode);
 return (T) mock;
 return MOCK_MOCKITO_CORE.verify(mock, mode);
 return mock. verify ( mode, "times");
return MOCKITO_CORE.verify(Mock.class, mock, mode);
return MOCKITO_CORE.verify(Mock mock, mode);
 verify(me, mode);
 return mock. verify ( mode ) ; * });
 return MockitoConstants_MOCKITO_CORE.verify(mock, mode);
 return Mockito. INSTANCE + ".MOCKITO_CORE.verify(mock, mode);
 * return mock.verify();
return MOCKITO_CORE.VERSION ;
return MOCKITO_CORE.verify(mock, mode) ; } } ) ; }
 return super# verify(mock, mode);
 return MockVerifier.verify(mock, mode);
 return (T) Mockito.MOCKITO_CORE.verify(mock, mode);
 return INSTANCE_MOCKITO_CORE.verify(mock, mode);
 if (mode == null) return mock; else
 return MockITO.MOCKITO_CORE.verify(mock, mode);
 if (debug) {
return MOCKITO_CORE.verify(mock), mode);
 return MockitoCore.MOCKITO_CORE.verify(mock, mode);
 return Mockito. Mockito. Factory.verify(mock, mode);
 assert mock, mode);
 if (! ( mode instanceof MockitoMode ) ) return
return  mock == mode ;
return MOCKITO_CORE_INSTALLATION ; }
 return mock. verify ( mode, 0x01);
 return mock. verify ( mode ) }
 return MockIO.verify(mock, mode);
return MOCKITO_CORE_MODE ;
 return mock. verify ( mode, 0x00);
 MockitoUtils.verify(mock, mode);
 return new VerifyImpl(mock, mode);
 return new T( mock);
 return new T(me);
 return mock. verify ( mode ) ; } verify(mock, mode);
 return MockitoTest. mock;
return MOCKITO_CORE.verify(Mock, mock, mode);
 return (T) MockitoUtil.MOCKITO_CORE.verify(mock, mode);
 * return mock.verify;
 * return Mock. verify(mock, mode);
 * return mock.verify(mock, mode);
 return MockSupport.verify(mock, mode);
 return new T(lock);
 return mock; return mock;
 return verify(m);
 return MockitoUtil.MOCKITO_CORE.verify(mock, mode);
 return Mockito. mock;
 return mock. verify ( mode ) ; } } ;
 return MockitoConstants#MOCKITO_CORE.verify(mock, mode);
 return MockitoCORE.MOCKITO_CORE.verify(mock, mode);
 return mock!= null;
 return verify(lock);
 return mock. verify ( mode ) ; } else { *
return MOCKITO_CORE.verify(mockObject, mock, mode);
return MOCKITO_CORE.verify(MOCK, mock, mode);
return MOCKITO_CORE.verify(mock, mode, 0, -1);
 return MockITO_JSON_MOCKITO_CORE.verify(mock, mode);
return MOCKITO_CORE ( ) ;
return MOCKITO_CORE.verify(mock, mode, null, null);
return  mock. actual ;
 return verify(job);
 return MockitoCores.MOCKITO_CORE.verify(mock, mode);
 return MockITO_1_MOCKITO_CORE.verify(mock, mode);
 if ( mock == null ) return null ; else {
 return Mockito#verified(mock, mode);
 return (T) MockitoConstants_MOCKITO_CORE.verify(mock, mode);
return MOCKITO_CORE.verify(1.0, mock, mode);
 return Mock#verify(mock, mode);
 MockUtils.verify(mock, mode);
 return (T) MockitoUtils_MOCKITO_CORE.verify(mock, mode);
 return verify(mi);
return MOCKITO_CORE.verify(Mock, mode);
 verify(m);
 return MockitoCORE_MOCKITO_CORE.verify(mock, mode);
return MOCKITO_CORE.verify(mock, mode, "allString");
 * mock = mode;
return MOCKITO_CORE.verify(mockObj, mock, mode);
 * return _MOCKITO_CORE.verify(mock, mode);
return MOCKITO_CORE.verify() mock ;
 return mock.verify;
return  mock; *
return MOCKITO_CORE.verify(lock);
 return mock; return null;
 verify(job);
 return Mockito. getInstance ( ) ; #MOCKITO_CORE.verify(mock, mode);
 verify(lock);
 return mock ; }
 mock = mode;
 synchronized(lock) *
return MOCKITO_CORE. mock; *
 * return verify(mock, mode);
return MOCKITO_CORE.verify(mock, mode) * <p>
 return EM_MOCKITO_CORE.verify(mock, mode);
 return IS_MOCKITO_CORE.verify(mock, mode);
 return MockitoTest. instance;
 return mock. verify ( mode ) ; } #MOCKITO_CORE.verify(mock, mode);
 * return super.verify(mock, mode);
 return SmartMOCKITO_CORE.verify(mock, mode);
return MOCKITO_CORE.verify(lock, mode);
return MOCKITO_CORE.verify(mock, mode). mock ; }
 * return mockObject;
return MOCKITO_CORE.test();
return MOCKITO_CORE.DEBUG ;
 * return SmartMOCKITO_CORE.verify(mock, mode);
return MOCKITO_CORE.verify(0.0, mock, mode);
 return ( T ) Mockito. class ; #MOCKITO_CORE.verify(mock, mode);
 * mock = null;
return MOCKITO_CORE.verify(mock, mode) == 0;
 return mock ; } else { return mock ; #MOCKITO_CORE.verify(mock, mode);
 return COREMOCKITO_CORE.verify(mock, mode);
return MOCKITO_CORE.verify(mock, mode) == null;
return MOCKITO_CORE.verify(mock), mode); *
 return ( T ) mock ; } else { #MOCKITO_CORE.verify(mock, mode);
 <p> *
return MOCKITO_CORE.verify(mock, mode) * * *
return MOCKITO_CORE.0 ;
return MOCKITO_COREVER ;
return MOCKITO_CORE.verify(mock, mode, 0x1F);
return MOCKITO_CORE.verify(jock, mode);
 return __MOCKITO_CORE.verify(mock, mode);
return MOCKITO_CORE_ ;
 return * mock;
 return Mockito;
return MOCKITO_CORE.verify(mock, mode, 0x0a);
return MOCKITO_CORE.verify(boock, mode);
return MOCKITO_CORE.verify(mock(), mode);
 verify mock, mode);
 * *
 assertTrue(mode);
 return mockObj;
return MOCKITO_CORE.verify(mock, mode, " ");
 return smartMOCKITO_CORE.verify(mock, mode);
 return Mockito();
return  new Mock(mock, mode);
return MOCKITO_CORE.verify mock ;
 assertMode(mode);
 return "verify(mock, mode);
return MOCKITO_COREBUG ;
return MOCKITO_CORE.verify(m);
return MOCKITO_COREFAULT ;
return MOCKITO_CORE.verify(mi);
 mock.verify(mock, mode);
 mock.MOCKITO_CORE.verify(mock, mode);
return MOCKITO_CORE.verify; *
return MOCKITO_CORE.verify(mock, mode) * *
 validate(mode);
 * mock);
return MOCKITO_CORE.verify($1, mock, mode);
return  m ; }
 * --------------------------------------------------------------------------
return  mocked ; }
 confirm(mode);
return MOCKITO_CORE.verify(job);
 assert(mock, mode);
 return validate(mock, mode);
return MOCKITO_CORE.verify(cores, mock, mode);
 * -----------------------------------------------------------------------
return  null ; }
 * ------------------------------------------------------------------------
 assertTrue(mock, mode);
 assert();
 return assert(mock, mode);
 * * *
 assert mode);
 validate(mock, mode);
return MOCKITO_CORE.verify(Mock);
return MOCKITO_CORE.verify(static, mock, mode);
 * --------------------------------------------------------------------
return MOCKITO_CORE.verify(mock,  mode());
 check(mock, mode);
return MOCKITO_CORE.verify(mi, mode);
return MOCKITO_CORE.verify(config, mock, mode);
 verify($mode);
return MOCKITO_CORE.verify(test, mock, mode);
return MOCKITO_CORE.verify(mock, mode)(); *
return MOCKITO_CORE.verify(mock, Mode);
return  null ;
return MOCKITO_CORE.verify(me, mode);
 assert mock;
return MOCKITO_CORE.verify(mock) *
return MOCKITO_CORE.verify(mock). *
return MOCKITO_CORE.verify(context, mock, mode);
 throw mock;
 assert true;
 verified(mock, mode);
return MOCKITO_CORE.verify(mock,  mode));
return MOCKITO_CORE.verify(boock);
 *
return MOCKITO_CORE.verify(reock);
 assert(, mode);
 return verified(mock, mode);
return  Mock ;
return MOCKITO_CORE.verify(jock);
return MOCKITO_CORE.verify(reock, mode);
return  mocked ;
return  verification(mock, mode);
return MOCKITO_CORE.verify(mock, modes);
return MOCKITO_CORE.verify(mock, 0);
