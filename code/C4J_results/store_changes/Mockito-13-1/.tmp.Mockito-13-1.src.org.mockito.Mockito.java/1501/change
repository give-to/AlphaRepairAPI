 return VerificationModeFactory.times(0);
 return VerificationMode.times(0);
 return VerificationModeFactory.never;
 return VerificationModeFactory.never();
 return VerificationModeFactory.never(0);
 return VerificationModeFactory.never(...);
 return VerificationModeFactory.never().times(0);
 return VerificationMode.never;
 return times(0);
 return VerificationModeFactory.never);
 return VerificationModeNever;
 return VerificationMode.never(0);
 return VerificationModeFactory.never());
 return VerificationModeFactory.noTimes(0);
 return VerificationModeFactory.noMoreInteractions(0);
return times(0); }
 return VerificationModeNever(0);
 return VerificationModeFactory.atLeast(0);
 times(0);
 return VerificationModeFactory.never(never());
 return Mockito#times(0);
 return VerificationModeFactoryImpl.times(0);
 return Mockito.times(0);
 return VerificationModeFactory.neverTimes(0);
 return VerificationModeFactory.never(); }
 return VerificationModeFactory.never(false);
 return.times(0);
return  VerificationModeFactory.never(never()); }
 return VerificationModeFactory.never(0).times(0);
 return never () ;
 return VerificationModeFactory.noInteractions(0);
return  VerificationModeFactory.never(never);
 return VerificationModeFactory.never(1).times(0);
 return VerificationModeFactory.no(never());
 return VerificationModeFactory.never(0.0);
 return VerificationModeFactory.always().times(0);
 return VerificationModeFactory.never(_);
 return VerificationModeFactory.noChanges(0);
 return Mockito#never(0);
 return VerifyModeFactory.never);
 return VerificationModeNeverFactory ;
 return VerificationModeFactory.never(times(0);
 return VerificationModeFactory.never(1.0);
 return VerificationModeFactory.never(no interactions);
 return VerificationModeFactory.mock.times(0);
 return VerificationModeFactory.never(1);
 return VerificationModeFactory.never(null).times(0);
 return VerificationModeFactory.never(never));
 return VerificationMode(never);
 return VerificationModeFactoryFactory.times(0);
 return VerificationModeFactory.never(*);
 return null ;
return times(never()); }
 return VerificationMode.never();
 return VerificationModeFactory.never(0));
 return VerificationModeFactory.never0);
 return VerificationModeFactory.untimes(0);
 return VerificationModeFactory.never(null);
return times(never());
 return VerificationModeFactory.never()(0);
 return VerificationModeFactory.never(); }
 return VerificationModeNever();
return times(0).noMethod();
 return VerifyModeFactory.never());
 return "times(0);
 return VerificationModeFactory.never()();
 return VerificationModeFactory;
 return VerificationModeFactory.never(false).times(0);
 return VerificationModeFactory.noSync().times(0);
 return VerificationModeFactory.never(always());
 return VerificationModeFactory.no(0).times(0);
 return never());
 return VerificationModeFactory.never(););
 return VerificationModeFactory.never();
 return VerificationModeFactory.noise().times(0);
 return VerificationModeFactory.neverInteractions(0);
 return VerificationModeFactory.never()).times(0);
 return VerificationMode ;
 return VerificationModeFactory.noInteraction(0);
 return VerificationModeFactory.never().someMethod(0);
 return VerificationMode.never);
 return VerificationModeFactory.noise;
 return VerificationModeFactory.never(?);
 return VerificationModeFactory.never(.);
 return VerificationMode.always;
 return VerificationModeFactory.neverTime(0);
return times() ;
 return VerificationModeFactory.notimes(0);
 return VerificationModeNeverInstance ;
 return Never ( ) ;
 return null ; } public static VerificationMode times(int 0) {
 return null ; } public static VerificationMode times(0) {
return times(0).never();
 return VerificationModeFactory.always(0);
 return VerificationModeFactory.never(â€¦);
 return VerificationModeNeverImpl ;
return times(0) { return VerificationModeFactory.never(); }
 return VerificationModeFactory.never() *
 return VerificationModeFactory.always();
 return VerificationModeFactory.noSync;
return times(0) { return VerificationModeFactory.never();
 return VerificationModeFactory(never);
 return false ; } public static VerificationMode times(int 0) {
 return VerificationModeFactory.never(0L);
 return VerificationMode.always(0);
 return VerifyModeFactory.never().times(0);
 return false ; } public static VerificationMode times(0) {
 return VerificationModeFactory.always;
 return null ; } public static VerificationMode never() {
 return VerificationMode(0);
 return VerificationModeFactory.never(0); }
 return VerifyModeFactory.never(0);
 return null.times(0);
 return VerificationModeFactory.noChanges;
return times(neverNumberOfInteractions);
 return VerificationModeFactory.never.times(0);
 return VerificationModeFactory.noChange;
 return 0 ; } public static VerificationMode times(0) {
 return VerificationModeFactory.noTime(0);
 return VerificationModeFactory.times(never()); }
 return Never.times(0);
 return VerificationMode.Never;
 return VerifyModeFactory.never(_);
 return VerifyModeFactory.never();
 return null ; } public static VerificationMode times(int) {
 return VerificationMode(false);
return times(never); }
return times(0).everyMethod("some arg"); }
 return VerificationModeFactory.never().expects(0);
 return never(0);
 return new VerificationMode);
return times(0) + times(1);
 return never().times(0);
 return null ; } public static VerificationMode 0() {
return times(0) - times(1) - times(2);
 return verificationModeFactory.never(); }
 return VerificationModeFactory.never(); } *
 return VerificationMode never(0);
return times(0).someMethod();
 return Mock.times(0);
return times(0) - times(1);
 return null);
 return Verify.never(0);
 return VerificationMode(always);
 return VerificationModeFactory.never(); * }
 return VerificationModeFactory.no().times(0);
 return VerifyModeFactory.times(0);
 return VerificationModeFactory.always.times(0);
 return VerificationModeFactory.never(0);
return times(0).noMethod("some arg"); }
 return VerificationMode.none;
 return VerificationModeFactory.never(); } else {
return times(0).everyMethod();
 return VerificationModeFactory.none(0);
 return false ;
 return VerificationMode never();
return times(0) ; return VerificationModeFactory.never() ;
 return VerificationModeFactory.no(0);
 return VerificationModeFactory.never(); * } *
 return VerificationMode#never;
return times(0).times(never());
 return never() ; } * <p> * See examples in javadoc for Mockito * *
 return never() ; } * <p> * See examples in javadoc for Mockito *
 return NoInteractions ;
return times(never(), 0);
return times(0, never());
 return 0.0;
return times(0) ; return VerificationModeFactory.never(); }
return times(0).everyMethod("some arg");
 return VerificationModeDefault;
 return VerificationModeFactory.times(never()); } *
 return MockitoNever(0);
 return Mockito.never(0);
 return VerificationModeFactory.times(0); } else {
 return NoInteraction ;
return times(0).noMethod(); }
 return VerificationModeFactory.always();
 return never() ; } * <p> * See examples in javadoc for Mockito class *
 return Mockito#times(0); }
 return VerificationModeFactory.none;
return times(0) { return VerificationModeFactory.never() };
return times(0).never(false);
return times(0) + times(1) + never();
return times(0) { return VerificationModeFactory.always();
 return VerificationModeFactory.never(); * * }
 return VerificationModeFactory.times(0); } *
 return VerificationModeFactory.always(); }
return times(0.0);
 return VerificationModeFactory;
 return ;
return times(0).noMethod("some arg");
return times(0).never() ; }
return times(0); } return VerificationMode ;
 return MockitoTimes(0);
return times(0).always(never());
 return noTimes(0);
 return VerificationModeNever(); }
return times(0) - times(1) ; }
return times(0) + times(1) ; }
 return never() ; } * <p> * See examples in javadoc for mock * *
return times(0).noMethod("no arg"); }
 return null ; } public static VerificationMode times(0)) {
return times(noInvocations);
 return VerificationModeFactory; }
 return VerificationModeNull;
 return never(1);
 return VerificationModeNone;
 return never() ; } * <p> * See examples in javadoc for * <p> *
 return never() ; } * <p> * See examples in javadoc for * <pre> *
 return never ;
return times(0).noMethod("no arg");
return times(0); return times(0); }
 return never() ; } * <p> * See examples in javadoc for Mockito instance *
return times(0).times(never()); }
 return never() ; } * <p> * <pre> * <pre> * <pre> * <pre> * <pre>
 return null ; } public static VerificationMode never() { *
return times(0).everyMethod("some arg"); *
return times(0) - times(1) * ;
return times(0) - times(1) - 1 ;
 return never() ; } * <p> * See examples in javadoc for {#link Mockito} *
 return never() ; } * <p> * See examples in javadoc for {Mockito}
 return never() ; } * <p> * <pre> * <pre> * <pre> * <pre> * *
return times(0).always(never()); }
 return VerificationModeFactory.Never;
 return null
return times(0) - times(1) - never() ;
 return VerificationModeFactory();
 return VerificationModeFactory(); }
return times(never(), false);
 return never() ; } * <p> * See examples in javadoc for {#link Mockito}
 return times(1);
return times(0).everyMethod("some arg"); * } *
return times(0).everyMethod(some arg); }
 return never() ; } * <p> * See examples in javadoc for {#link Mockito} class
 return never() ; } * <p> * See examples in javadoc of Mockito *
 return never() ; } * <p> * See examples in javadoc for {Mock} *
return times(0).everyMethod("some arg") * never();
return times(0).noMethod(never());
return times(0) && times(never()); }
 return VerificationModeFactory.never;
 return Mockito#always(0);
return times(0).everyMethod("some arg"); } } ;
 return never() ; } * <p> * See examples in javadoc for Mockito,
 return never() ; } * <p> * See examples in javadoc for mocking * *
return times(never);
 return never(_);
return times(0) + times(never());
 return never() ; } * <p> * See examples in javadoc for {#example} *
 return null ; } public static VerificationMode times() { *
return times ( 0 ) ; } return mock ;
 return always () ;
 return never() ; } * <pre> * * <p> * <pre> * <pre> * *
 return never() ; } * <pre> * * <p> * <pre> * * <p> *
return times(0) * ;
 return never() ; } * <p> * <pre> * <p> * <pre> * <p> * *
return times(0) + times(1) * ;
 return (void)0);
 return new Never(0);
return times ( 0 ) ; } } ) ;
return times(0).always();
return times(0) - times(1).always(0);
 return never(); } * <p> * Asynchronously verify the mock * <p> *
 return VerificationModeNever; }
return times(0).everyMethod("some arg"); } }
 return neverTimes(0);
 return never() ; } * <p> * <pre> * <pre> * <pre> * <pre> * <p>
return times(0).everyMethod("some arg") * } *
return times(0); return times(never()); }
 return never() ; } * <p> * <pre> * <pre> * <pre> * <pre> * {
 return never() ; } * <p> * Assumes no interactions with the mock * * <p> * * <pre> *
 return never() ; } * <p> * Assumes no interactions with the mock * * <p> * <pre> *
return times(0).everyMethod("never") ;
 return never() ; } * <p> * <pre> * <p> * <pre> * <pre> * *
 return never() ; } * <p> * See examples in javadoc for the mock * <p> *
return times(0).never(); } }
return times(0).times(0);
return times(0) - times(1) * never();
 return Promise.times(0);
 return false ; } public static VerificationMode times() { *
 return NEVER().times(0);
 return never() ; } * <pre> * * <p> * <pre> * <p> * *
 return never(); } * <pre> * * <p> * <pre>
 return never() ; } * <p> * See examples in javadoc for the mock * <pre> *
 return never(*);
return times(0).always(false);
 return never() ; } * <p> * <pre> * <pre> * <pre> * * <pre> * *
 return never() ; } * <p> * See examples in javadoc for the class * <p> *
 return false ; } public static VerificationMode never() { *
return times(0); } }
 return never(); } * <p> * Asynchronously verify the mock. * <p>
 return false);
return times(0).everyMethod("some arg"); * }
 return ZeroVerificationMode();
return times(0) { return VerificationModeFactory.none();
return times(0) - times(1) - 0 ;
return times(never(0)));
return times(0).always(never);
 return never() ; } * <p> * <pre> * <pre> * <pre> * (int times(0)) {
return times(0) - 1;
return times(0).everyMethod("some arg"); } ;
return times(0) + never() ;
 return never() ; } * <p> * Assumes no interactions with the mock * * <p> * * <pre> * *
 return never() ; } * <p> * Assume no interactions with the mock * * Assume no interactions with the mock * * *
return times(0).everyMethod("some arg") * }
 return false ; } } else { return false ; } static VerificationMode never (...) {
 return never(); } * <p> * Asynchronously verify the mock * <pre> *
return times(0.0f);
 return never(); } * <p> * Asynchronously verify the mock. * <pre>
return times(0).always(0);
 return never(); } * <pre> * * <p> * <code>
 return VerificationMode#times(0);
 return new Times(0);
return times(0) * never();
return times(0, false);
 return 0x0;
 return never() ; } * <p> * <pre> * <pre> * <pre> * <pre> * else {
return times(0) - 1; }
return times(0) - times(0);
 return (int)0);
 never(0);
 return never(); } * <pre> * * <p> * <p>
 return never() ; } * <p> * <pre> * <pre> * <pre> * * <pre> * {
 return never() ; } * <p> * <pre> * <pre> * <pre> * <pre> * * *
 return never(); }
return times(neverNumberOfEvents);
 return none ;
return times(0) + times(0);
 return never(); } * <p> * Asynchronously verify the mock * *
return times(0) + times(2);
return times(0).everyMethod("some arg") * never;
return times(0, 0);
 return Zero (0); }
return times(0) * } *
 return null ; } } else { return null ; } } else { return null ;
 return "never(0);
 return alwaysNever;
 return -times(0);
 return Mockito. no ( 0 ). no ( 0 ) ; } *
 return VerificationModeFactory.never()
 return Never (0); }
return times(0) + 1;
return times(0) ; } } ;
 return null ; } } else { return null ; } } else { return null ; }
 return 0 ; } } else { return 0 ; } } else { return 0 ; }
return times(0) == 0;
return times(0) * }
 return null ; } } else { return null ; } } else { return null ; } }
 * <p>
 return false ; } } else { return false ; } static VerificationMode never() { }
 return Mockito. no ( 0 ). no ( 1 ) ; } *
 return Mockito. no ( 0 ). no ( 0 ). default ;
 return Mockito. no ( 0 ). no ( 0 ). default();
 return false ; } } else { return false ; } } else { return false ; } }
 return false ; } } else { return false ; } static VerificationMode never (...) {}
 return never (0);
 return NEVER();
 return VerificationModeFactory; *
 return null ; } } else { return null ; } } else { } }
 return never);
 return verificationModeFactory.times(0);
 * <pre>
 return defaultNever;
 return null ; } } else { return null ; } return Mockito ( ) ; }
 return 0 ; } } else { return 0 ; } } else { return 0 ; #
 return ModificationModeFactory.times(0);
return times(no interactions);
 return ValidationModeFactory.times(0);
 return false
 return VerifyModeFactoryImpl.times(0);
 return null ; } } else { return null ; } return null ; } else { #
 return VerifyingMode.times(0);
 }
 return never(); } *
 return never (...) {
 never ();
 return {
 return VerifyMode.times(0);
 } ;
 return true;
return times(); }
return times0 ;
return times(now());
 return never() ; }
 return 0;
 return none(0);
return times(false);
 return always(0);
return times(0) * *
 return false(0);
return times(0 0);
 return never (...) ;
 *
 return Mockito::times(0);
 * *
return times(always());
return times(0) *
 return 0);
return timesNever();
 return null;
 return
return times(0); *
 *
 * default:
 Return Mockito.times(0);
 return never();
 return mockito.times(0);
...
 return false;
 * <code>
 * Default behavior:
 always(0);
 * <br>
 time(0);
 * Default:
 Mock.times(0);
 return time(0);
 } *
 * {
 * static
 } }
return times(null);
