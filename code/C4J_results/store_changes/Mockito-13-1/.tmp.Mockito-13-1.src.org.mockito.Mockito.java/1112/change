return  mock ;
 verify(mock, times(1));
return MOCKITO_CORE.verify(mock,  times(1));
 return verify(mock, times(1));
return  mock ; }
return MOCKITO_CORE. verify ( mock ) ; }
return MOCKITO_CORE. verify ( mock ) ;
return MOCKITO_CORE ; }
return MOCKITO_CORE.verify(mock); *
 return Mockito.verify(mock, times(1));
return MOCKITO_CORE.verify(mock,  atLeast(1));
return  Mockito. verify ( mock ) ; }
 verify(times(1));
return  Mockito. verify ( mock ) ;
return  mock. verify ( ) ; }
 return verify(times(1));
return  mock. verify ( ) ;
 mock.times(1));
return MOCKITO_CORE.verify(mock, times(1)).someMethod("some arg"); *
 times(1));
 return mock);
return MOCKITO_CORE.verify(mock, times(1)).someMethod("some arg"); * *
return MOCKITO_CORE. verify ( mock ) ; } }
return MOCKITO_CORE.verify(mock, times()); *
return  Mockito. verify ( mock ) ; } }
return MOCKITO_CORE.verify(mock, times(1)); *
return MOCKITO_CORE. verify ( mock. mock ) ; }
return MOCKITO_CORE.verify(mock, true); *
return MOCKITO_CORE.verify(mock, times(1)).someMethod("some arg");
 return MockitoUtils.verify(mock, times(1));
 return MockitoImpl.verify(mock, times(1));
return MOCKITO_CORE. mock ; }
return MOCKITO_CORE.verify(); *
return MOCKITO_CORE.verify(mock, times(1), times(2));
return MOCKITO_CORE. verify ( mock. mock ) ;
return MOCKITO_CORE. verify ( mock, times ( ) ) ;
return MOCKITO_CORE. verify ( mock )
return MOCKITO_CORE.verify(mock, times(1)).someMethod();
return MOCKITO_CORE. verify ( mock. inspect ( ) ) ;
 Mockito mock = Mockito.create(times(1));
return MOCKITO_CORE. verify ( mock ) ; } *
 return Mockito_CORE. verify ( mock, times(1)); } public <T> T verify() {
 return mock.verify(mock, times(1));
return MOCKITO_CORE.verify(mock, 0); *
return MOCKITO_CORE. verify ( mock ) ; } return mock ;
 return mock. verify ( ) ; } public <T> T verify(T mock) {
return MOCKITO_CORE. verify ( mock ) ; } } ;
 Mockito mock = ( Mockito ) mock ; return mock. verify ( ) ;
 return mock. verify ( ) ; } public <T> T verify() {
return  MockitoImpl. verify ( mock ) ; }
 return Mockito_CORE. verify(mock, times(1)); } public <T> T verify(T) {
return MOCKITO_CORE.verify(mock, false); *
 return Mockito. verify ( mock, times(1)); } public <T> T verify() {
 Mockito mock = ( Mockito ) mock ; return mock. verify ( ) ; }
return  Mockito. verify ( mock ) ; } *
return MOCKITO_CORE.verify(mock); * *
return  Mockito. verify ( mock. mock ) ;
 return mock.someMethod(times(1));
return MOCKITO_CORE. verify ( mock, true ) ;
 return Mockito_CORE. verify ( mock, times(1)); } public <T> T mock {
 return Mockito. verify ( mock, times(1)) ; } public <T> T mock() {
return MOCKITO_CORE. verify ( mock, false ) ;
 return mock. verify ( ) ; } public <T> T verify(Mockito mock) {
 return Mockito_CORE. verify(mock, times(1)); } public <T> verify() {
 return mock. verify ( ) ; } public <T> T verify(Mock mock) {
 return Mockito_CORE. verify ( mock, times(1)); } public <T> T() {
 return Mockito_CORE. verify(mock, times(1)).someMethod("some arg"); * *
 return Mockito_CORE. verify(mock, times(1)); } public <T> T verify(...) {
 return Mockito_CORE. verify ( mock, times(1)); } public <T> T mock() {
 return Mockito. verify ( mock ) ; } public <T> T verify() {
 return Mockito. verify ( mock, times(1)); } public <T> T verify(...) {
 return mock. verify ( ) ; } public <T> T verify(Mock) {
 return Mockito. mock ( mock ). verify ( ) ; }
 return Mockito_CORE. verify(mock, times(1)).someMethod("some arg"); * }
 Mockito mock = mock ( ) ; return mock;
 return Mockito. verify ( mock, times(1)); } public <T> T mock {
 Mockito mock = Mockito.newInstance(1));
 return Mockito_CORE. verify(mock, times(1)); } public <T> T verify(M) {
return  mock. verify ( ) ; } }
 Mockito.verify(times(1));
return  Mockito. verify ( mock, true ) ;
return MOCKITO_CORE.verify(mock, times(1)).get(0); *
 if ( mock instanceof Mockito ) { return mock. verify ( ) ; }
 return Mockito. _MOCKITO_CORE.verify(mock, times(1));
 return Mockito. verify ( mock, times ( ) ) ;
return MOCKITO_CORE.verify(mock, times(1)).someMethod("any arg"); *
 return Mockito_CORE. verify ( mock, times(1)); } public <T> T {
 return Mockito_CORE. verify(mock, times(1)).someMethod("some arg"); * } *
 return Mockito_CORE. verify(mock, times(1)); } public <T> T verify(mock)
return MOCKITO_CORE. verify ( mock, true ) ; }
 return Mockito_CORE. verify(mock, times(1)).someMethod("some arg"); }
 return Mockito_CORE. verify(mock, times(1)); } public <T> T verify(mock){
 Mockito mock = mock. mock ; return mock;
 return Mockito. verify ( mock ) ; } public <T> T verify(...) {
return  Mockito. mock ( ) ;
 return Mockito. verify ( mock, times(1)).someMethod("some arg"); * *
 return Mockito_CORE. verify(mock, times(1)); } public static <T> {
return MOCKITO_CORE.verify(mock, times(1)).someMethod("some arg") * *
return MOCKITO_CORE. verify ( mock, 0 ) ; }
 return Mockito_CORE. verify(mock, times(1)); } public <T> T verify() * {
return  Mockito. create ( mock ) ; }
return  Mockito. mock ( mock ) ; }
return MOCKITO_CORE.verify(mock, times(1)); * *
 return Mockito. verify ( mock, times(1)).someMethod("some arg"); } else {
 return Mockito_CORE. verify(mock, times(1)).someMethod("some arg"); * * }
return MOCKITO_CORE.verify(mock, times(1).someMethod("some arg")); *
 return Mockito_CORE. verify ( mock, times(1)); } public <T> T verify(Mock){
 Mockito mock = ( Mockito ) mock ; return ( T ) mock ; }
return MOCKITO_CORE.verify(mock, times(0)) ;
 if ( mock == null ) return null ; if ( mock instanceof Mockito )
return  mock. verify ( true ) ; }
return MOCKITO_CORE.verify(mock, times(1).someMethod("some arg"); *
 return Mockito. verify ( mock ) ; } return mock ; }
 mock = Mockito.create(times(1));
 if ( mock instanceof Mockito ) return mock ;
 mock.someMethod(times(1));
 Mockito. mock ( mock ) ; return Mockito ( mock ) ;
 return Mockito.verify(ock, times(1));
 Mockito mock = Mockito.create(1));
 Mockito. verify ( mock ) ; return Mockito. mock ; }
 return Mockito_CORE. verify ( mock, times(1)); } public <T> T verify(Mock)
 return mock. verify ( ) ; } public <T> T verify(T) {
return MOCKITO_CORE.create ( mock ). verify ( ) ; }
return MOCKITO_CORE. verify ( ) ;
 Mockito mock = ( Mockito ) mock ; return mock. verify ; }
 public <T> T verify(T) {
 return mock. verify ( ) ; } public <T> T verify(T mock) { public <T> T verify(...) {
 return Mockito. verify ( mock, times(1)); } <pre> *
return  Mockito. mock ; }
 return mock. verify ( ) ; } public <T> T verify(...) {
 return Mockito. verify ( mock. getClass ( ), mock. getMethod ( ) ) ;
 <DC> public <T > T verify(T mock, times(1)) {
return  mock. inspect ( ) ;
return MOCKITO_CORE.verify(mock, times(1) + 1); *
 return mock. verify ( ) ; } public <T> T verify(mock)
 Mockito mock = Mockito.newInstance(times(1));
 return Mock.verify(mock, times(1));
return  mock. verify ; }
 return Mockito. verify ( mock, times(1)).someMethod("some arg"); * } *
 return Mockito. verify ( mock. getClass ( ), mock. getMethod ( ) ) ; }
return MOCKITO_CORE.verify(mock, times(1)).someMethod("any arg"); * *
 return Mockito_CORE. verify(mock, times(1));
 return Mockito. verify ( mock, times(1)); } public static Mockito mock {
 Mockito mock = mock(times(1));
 return mock. verify ( ) ; } public <T> T mock {
 return Mockito. verify ( mock, times(1)); }
 Mockito mock = Mockito.create(null);
return MOCKITO_CORE.verify(mock, times(0)) ; *
 if ( mock!= null ) {
 return Mockito. verify ( mock, times(1)).someMethod("some arg"); * }
return MOCKITO_CORE.verify(mock, times(1)).someMethod("something") ;
return MOCKITO_CORE.verify(mock, times(1)).get(0);
return MOCKITO_CORE. get ( ) ;
return MOCKITO_CORE.verify(mock, times(1)), 0); *
 if ( mock instanceof Mock ) {
 Mockito.verify(1));
 Mockito mock = ( Mockito ) mock ; return ( T ) mock ;
return  mock ; } }
 return Mockito. verify ( mock ) ; } public <T> T verify(T mock) {
 return Mockito#verify(mock, times(1));
 return Mockito. verify ( mock. toString ( ), mock. toNumber ( ), mock ) ;
 return Mockito. verify ( mock. toString ( ), mock. toString ( ) ) ; }
 mock = mock;
 mock = Mockito.verify(mock, times(1));
 mock = mock.times(1));
 return mock. verify ( ) ; } public <T> T verify(M) {
return MOCKITO_CORE.verify(mock, times(1)).someMethod("some arg"); * * *
 return Mockito. verify ( mock, times(1)); } else {
 Mockito. mock ( mock ) ; return Mockito. mock ; }
return  Mockito. mock ( mock )
 Mockito. verify ( mock ) ; return Mockito ( mock ) ;
 return Mockito.ify(mock, times(1));
return  mock. inspect ( ) ; }
 return Mockito. verify ( mock. toString ( ), Mockito. get ( mock ) ) ; }
 return Mockito_CORE. verify ( mock, times(1)); } public <T> T verify(Mock);
 return mock ; } public <T> T verify() {
 return Mockito_CORE. verify(mock, times(0));
 return Mockito_CORE. verify(mock, 0); }
 return Mockito. verify ( mock. toString ( ), mock. toString ( ) ) ;
 return Mockito. verify ( mock. toString ( ), mock. toNumber ( ) ) ; }
return MOCKITO_CORE. mock ( ) ;
 mock = Mockito.createMock(times(1));
 return Mockito.simulate(mock, times(1));
 return Mockito. verify ( mock ) ; } public <T > T verify(T mock) { return mock
 Mockito.verify(mock, times(1));
 return mock. verify ( ) ; } public static <T> T mock {
 return Mockito. verify ( mock. toString ( ), mock. toNumber ( ) ) ;
 Mockito mock = Mockito.create(null));
 Mockito mock = Mockito.create({));
 return mock. verify ( ). someMethod(times(1));
return  Mockito. mock ( mock ) ;
 Mockito mock = Mockito.new(times(1));
 return mock. verify ( ) ; } public <T> T verify(T mock, times(1)).someMethod("some arg"); {
 return Mockito. verify ( mock ) ; } public <T> T verify(T mock) { *
 return Mockito. verify ( mock. toString ( ), mock. toString ( ), false ) ;
 return Mockito.MOCKITO_CORE.verify(mock, times(1));
 Mockito. verify ( mock ) ; return mock ; } } ;
return MOCKITO_CORE.verify(mock, times(1)), false); *
return MOCKITO_CORE.verify(mock,  atLeastOnce(1));
 return Mockito. verify ( mock. toString ( ), mock. toString ( ) ) ; } }
return MOCKITO_CORE.verify(mock, times(1)) ; }
return MOCKITO_CORE.verify(mock, times(1)).someMethod("any arg");
 return Mockito. verify ( mock ) ; } return mock ; } ;
 return Mockito. verify ( mock ) ; } public <T> T verify(T) {
return  Mockito. create ( mock ) ;
 return mock. verify ( ) ; } public <T> T verify(T mock) { return mock. verify ( ) ; } public {
 return Mockito_CORE. verify ( mock, times(1)); } public <T> T verify() { *
 return mock. verify ( ) ; } public <T> T verify(T mock) { return mock. verify ( ) ; } public static
return MOCKITO_CORE.verify(mock, 1); *
 return verify(mock(), times(1));
 return Mockito. verify ( mock. toString ( ), mock. toObject ( ) ) ;
 Mockito.verify(ock, times(1));
 verify( mock);
 Mockito mock = ( Mockito ) mock ; return Mockito. mock ; }
 return verify(mock.*, times(1));
 Mockito mock = Mockito.create(this));
 Mockito mock = Mockito.getInstance(1));
 return new Mockito(mock, times(1));
return MOCKITO_CORE.verify(mock, null); *
return MOCKITO_CORE. verify ( mock ) ; return mock ;
 return mock. verify ( ) ; } public <T> T verify(T mock, times(1)).someMethod("some arg"); *
 return MockitoHelper.verify(mock, times(1));
return MOCKITO_CORE.verify(mock, times(1)), times(2)); *
 Mockito. verify ( mock ) ; return Mockito ; } }
return MOCKITO_CORE.verify(mock, times(1) + 1).someMethod("some arg"); *
 return Mockito. getInstance ( ).verify(mock, times(1));
 return Mockito. verify ( mock. toString ( ), mock. toArray ( ) ) ; }
 Mockito mock = ( Mockito ) mock ; return ( T ) mock ; } }
 Mockito mock = Mockito.get(times(1));
return MOCKITO_CORE.verify(mock, times(1)).someMethod("something"); *
 return verify(ock, times(1));
 return Mockito. verify ( mock, times(1)); } public <T> T verify() { *
 Mockito mock = ( Mockito ) mock ; return Mockito. verify ( ) ;
 Mockito mock = Mockito.create(this);
 Mockito mock = Mockito.get(1));
 mock.times(times(1));
 return MockitoConstants.MOCKITO_CORE.verify(mock, times(1));
return MOCKITO_CORE.create ( mock ) ; }
return MOCKITO_CORE.verify(mock, true); * *
 Mockito mock = ( Mockito ) mock ; return mock ; } } ;
 Mockito. mock ( mock ) ; return mock ; } } ;
 return Mockito. verify ( mock ) ; } return Mockito. mock ; }
return  mock. verify ( ) ; } } ;
 return mock.call(times(1));
 return Mockito. verify(mock,.times(1));
 return mock. verify ( ) ; } public <T> T verify(T mock) { public <T> T verify() { *
 return Mockito. verify(mock, -times(1));
 return Mockito. verify ( mock ) ;
return MOCKITO_CORE. verify ( mock ) ; } } ) ;
return  mock. get ( ) ; }
 Mockito mock = Mockito.create(null, times(1));
 return Mockito. getInstance ( mock ).verify(mock, times(1));
 Mockito mock = mock.newInstance(1));
 return Mockito. verify ( mock, times(1)).someMethod("some arg"); } *
return MOCKITO_CORE ( mock ) ;
return MOCKITO_CORE.verify(mock, times(1).someMethod("some arg")); * *
return MOCKITO_CORE. verify ( mock. mock ) ; } }
 Mockito mock = mock.times(1));
 return mock.times(1));
return MOCKITO_CORE. create ( ) ;
 Mockito mock = Mockito.create();
 return Mockito. mock ( Mockito ).verify(mock, times(1));
 return Mockito. verify ( mock ) ; } return Mockito ; } ;
return MOCKITO_CORE.verify(mock, times(1).get(0));
 return (T) verify(mock, times(1));
return MOCKITO_CORE.verify(mock, times(1)), times(2)) ;
 Mockito.verify( mock);
return MOCKITO_CORE.verify(mock, times(1)).someMethod("some arg") * * *
 MockitoImpl mock = MockitoImpl(this);
 return Mockito. mock ( ). verify(mock, times(1));
return MOCKITO_CORE.verify(mock, times(1)).get(); *
 return Mockito. verify ( mock ) ; } public <T> T verify() { *
return MOCKITO_CORE.verify(mock, times(1)).someMethod("anything") ;
 Mockito.verify(mock));
 mock = Mockito.newInstance(1));
 return mock. verify ( ) ; } public <T> T verify(T mock) { public <T> T verify() {} {
return  Mockito ( mock ) ;
 Mockito mock = Mockito.create());
 return Mockito. verify ( mock, times(1)); } *
return MOCKITO_CORE. get ( mock ) ; }
return MOCKITO_CORE.verify(mock, times(1)).get() ;
 Mockito mock = Mockito. get ( );
 mock = Mockito.newInstance(times(1));
 return mock. verify ( ) ; } public <T> T verify(T mock) { return mock. verify ( ) ; } public *
 return Mockito. verify ( mock ) ; } else {
 return mock. verify ( ) ; } public <T> T mock();
return MOCKITO_CORE.test(mock, times(1)) ;
 Mockito mock = Mockito.create(config);
 return MockitoImpl.MOCKITO_CORE.verify(mock, times(1));
 mock = new Mock(times(1));
 return Mockito.verify(times(1));
 return Mockito_CORE. verify(mock); } *
 return Mockito.call(mock, times(1));
 return mock. verify ( ) ; } public <T> T verify() { *
 return Mockito.verify(this, times(1));
 return mock. verify ( ) ; } public <T> T verify(T mock) { return mock. verify ( ) ; } *
 return mock. verify ( times ( ) ) ;
 return mock. verify ( ) ; } public <T> T verify(T mock) { public <T> T verify(...) {}
 mock = mock(times(1));
 Mockito mock = mock.withTimes(1));
 Mockito mock = ( Mockito ) mock ; return mock ; } return mock ;
 Mockito mock = Mockito.createInstance(times(1));
 Mockito mock = new Mockito(this);
 return Mockito. verify ( mock. toString ( ) ) ; } return mock ; }
 Mockito mock = Mockito.createInstance(1));
 mock = MockitoImpl.verify(mock, times(1));
 Mockito mock = Mockito.create(_);
 MockitoImpl. verify(mock, times(1));
 return verify(mockImpl, times(1));
 Mockito mock = new Mockito(this));
 return Mockito. verify ( mock. toString ( ), mock ) ; } }
 return Mockito. verify ( mock ) ; } public <T> T verify() { *
 return Mockito. verify ( mock. toString ( ) ) ; } return mock ; } ;
 return mock ; } public <T> T verify(mock, times(1));
 return mock. verify ( times(1)); }
 public <T> T verify() {
return MOCKITO_CORE_VERSION ;
return MOCKITO_CORE.verify(mock, 0); * *
 return mock. verify ( ) ; } public <T> T mock()
return MOCKITO_CORE.verify(mock, times(1)).times(2));
 return MockitoImpl#verify(mock, times(1));
return MOCKITO_CORE.INSTANCE. verify ( mock ) ; } }
 MockitoImpl mock = MockitoImpl(null);
 return mock.verify(1));
 mock = mock.times(times(1));
 return verify(mock object, times(1));
 return Mockito.verify(m, times(1));
return  mock ; } *
return MOCKITO_CORE.verify(mock, times(1, 0));
 Mockito mock = mock(get(0));
 Mockito mock = Mockito.create({);
 return Mockito.verify(lock, times(1));
 Mockito#verify(1));
 mock = Mockito.create(1));
return MOCKITO_CORE.create ( mock ). verify ( ) ;
 return Mockito. mockInstance ( mock ).verify(mock, times(1));
 Mockito mock = new Mockito(1));
 return _verify(mock, times(1));
 return Mockito. verify ( mock ) ; };
 Mockito mock = Mockito.get(0));
 Mockito mock = mock; mock.times(1));
return MOCKITO_CORE.verify(mock, times(1).times(2));
 return Mockito. verify ( mock. toString ( ), mock ) ; } } ;
 return Mockito. verify ( mock ) ; } public <T> T verify(...) {
 return MockitoVerifier.verify(mock, times(1));
 return mock.call().times(1));
 * <pre>
 Mockito mock = Mockito.create(this, times(1));
 return mock. verify ( ). verify(mock, times(1));
 return MockitoValidator.verify(mock, times(1));
return MOCKITO_CORE.create ( mock ) ;
return MOCKITO_CORE.create ( mock ) ; } return mock ; }
 Mockito mock = ( Mockito ) mock ; return ( T ) mock. mock ;
 Mockito mock = mock. mock ( );
 Mockito mock = mock.with(times(1));
 Mockito.verify(this, times(1));
 Mockito mock = mock.get(0);
 Mockito mock = Mockito(times(1));
 return Mockito. verify(mock, 0, times(1));
 Mockito mock = mock.times(times(1));
 Mockito mock = Mockito.create(0));
 Mockito mock = Mockito.create(self));
 return Mockito. mock ( mock ). verify(mock, times(1));
 mock = mock.with(times(1));
 assert(times(1));
return MOCKITO_CORE.test(mock, times(1)); *
 mock.verify(1));
 mock = mock. clone ( ) ; verify(mock, times(1));
 return verify(m, times(1));
 Mockito.verify(this));
return MOCKITO_CORE.verify(mock, times(1)).someMethod("") ;
return MOCKITO_CORE.verify(mock,  times(0), times(1));
 mock(times(1));
 mock = mock.withTimes(1));
 mock = mock.newInstance(1));
 return mock ; } public static void verify(mock, times(1));
 return MockitoImpl.verify(ock, times(1));
 mock.verify(true));
 return mock.get(times(1));
return MOCKITO_CORE.verify(mock, false); * *
 Mockito mock = mock; return mock;
 Mockito mock = Mockito.from(times(1));
 return Mockito_CORE.MOCKITO_CORE.verify(mock, times(1));
return MOCKITO_CORE.verify(mock, "true") ;
 return Mockito. getInstance ( ). mock.verify(mock, times(1));
 return Mockito. verify ( mock ) ; } public static < T > T mock = {
return  mock. verify(); *
 return Mockito. mock ( Mockito.verify(mock, times(1));
 return _MOCKITO_CORE.verify(mock, times(1));
return MOCKITO_CORE. get ( mock ) ;
return  Mockito. mock ;
 mock = Mockito.get(times(1));
 return Mockito.createMock(times(1));
return MOCKITO_CORE.verify(mock, times(1)).someMethod("some arg"); * } *
 return Mockito_CORE. verify(mock, times()); } *
 mock.verify(this));
 public <T> T verify() * {
 assert(mock));
 mock = Mockito.MOCKITO_CORE.verify(mock, times(1));
 return mock.get(0).times(1));
return MOCKITO_CORE.verify(mock, times(1).someMethod("some arg"); *); *
return MOCKITO_CORE.verify(mock, times(1)).someMethod(); *
return MOCKITO_CORE. mock ;
return MOCKITO_CORE.INSTANCE ;
 return verify()(mock, times(1));
return MOCKITO_CORE.verify(mock, times(1), never()));
 return super.verify(mock, times(1));
 public <T> T verify(T) {}
 return mock ; } public <T> T.verify(mock, times(1));
 mock = Mockito.create(mock, times(1));
 mock.verify(true);
 mock.call(times(1));
return MOCKITO_CORE.verify(mock, times(1) + 1).get(0); *
 return MockitoUtil.verify(mock, times(1));
 return Mockito.create(times(1));
 mock.assert(times(1));
 mock = Mockito.unwrap(times(1));
return  mock. verify ( ). mock ; }
 return Mockito.simulate(times(1));
 return Mockito. mockInstance ( ). verify(mock, times(1));
 return mock. verify ( ). invoke(mock, times(1));
 Mockito mock = mock.newInstance(times(1));
 return verify(mockObject, times(1));
 * return verify(mock, times(1));
 mock = new Mockito(this));
 return MockitoImpl.impl.verify(mock, times(1));
 return mock ; } public <T> verify(mock, times(1));
return MOCKITO_CORE.verified(mock); *
 return Mockito.Mock.verify(mock, times(1));
 return Mockito.prototype.verify(mock, times(1));
 Mockito.call(mock times(1));
 Mockito.validate( mock));
 Mockito mock = (T) mock;
 return Mockito. verify ( mock, times ( ) {
 return MockitoSupport.verify(mock, times(1));
return MOCKITO_CORE.verify(mock, times(1, times(2));
 mock.verify(this);
 mock = Mockito.new(times(1));
 return verify(this, times(1));
 MockitoUtils.verify(mock, times(1));
 Mockito mock = Mockito.new(null, times(1));
return MOCKITO_CORE.verify(mock, times(1) + 1).someMethod("some arg") ;
return MOCKITO_CORE_INSTANCE ;
 return MockitoImpl.simulate(mock, times(1));
 public <T> T result() {
 <pre> *
 Mockito mock = mock ; return mock. result;
 mock = Mockito.newMock(1));
return MOCKITO_CORE.verify(mock, times(1)) ; return mock ; }
 mock = new Mock(this);
 public <T> T verify(...) {
 return verify(fake, times(1));
 return mock.get(1));
 mock.setTimes(1));
 return MockitoTest.verify(mock, times(1));
 return * verify(mock, times(1));
 mock = Mockito.unwrap( mock, times(1));
 return Mockito. verify ( mock. toString ( ) ) ; } return mock ; } }
 Mockito mock = Mockito.create(arg1));
 return mock. verify ( ). call(mock, times(1));
 return verify( mock);
 return Mockito. verify ( mock, times (1))) }
 return times(1));
 public <T> T ret();
 mock = Mockito.create(null));
 Mockito.verify(this);
 return Mockito. verify ( mock ) ; } public <T > T verify ( ) { }
 return Mockito. getInstance ( ) + ".verify(mock, times(1));
 return Mockito. class. name + ".MOCKITO_CORE.verify(mock, times(1));
return MOCKITO_CORE [ mock ] ;
 Mockito.call(this));
 return Mockito.verified(mock, times(1));
 return verify(1));
 mock.expect(1));
 return MockitoCore.MOCKITO_CORE.verify(mock, times(1));
 return Mockito. class + ".MOCKITO_CORE.verify(mock, times(1));
 if ( mock instanceof Mockito )
 mock = Mockito.get(0));
 public <T> T mock();
 Mockito mock = MockitoImpl. mock;
 verify( mock));
 return Mockito. getInstance ( ). prototype.verify(mock, times(1));
return MOCKITO_CORE.INSTANCE ; }
 return Mockito. getInstance ( "" ).verify(mock, times(1));
 return MockitoImpl.Mockito.verify(mock, times(1));
 Mockito.debug(this));
 return Mockito. verify ( mock, times(1)); *
return MOCKITO_CORE.verify(mock,  atLeastOneOf(1));
 Mockito(mock));
 mock = Mockito.create(this));
 return MockitoMock.verify(mock, times(1));
 mock = new Mock(this));
 Mockito.verify(ock);
return MOCKITO_CORE.verify(mock, times(1)). then ( ( ) -> mock ) ;
 return verify( mock));
 return Mockito. verify ( mock, times ( ) )
 public <T> T result();
 return MockitoImpl. mock ( ). verify(mock, times(1));
return MOCKITO_CORE.create ( mock ) ; } return mock ;
 Mockito mock = mock. mock || mock;
 return mock ; } public <T>.verify(mock, times(1));
 mock = mock.get(0);
 return Verify. verify(mock, times(1));
 return verifyMock(mock, times(1));
 Mockito mock = MockitoImpl.instance;
return MOCKITO_CORE.verify(mock,  0, 0, times(1));
 return Mockito.call(this,times(1));
 Mockito.debug(times(1));
 return mock. verify ( ). assert(mock, times(1));
 return mock.verify(this);
 return MockitoImpl.prototype.verify(mock, times(1));
 mock.call().times(1));
return MOCKITO_CORE.verify(mock, times(1)).call(null);
 return mock ; } public <T> T _verify(mock, times(1));
 mock = Mockito.call(this));
return MOCKITO_CORE.verify(mock, times(1)) ; } return mock ; }
 mock = Mockito.create(null);
 Mockito.verify(m,times(1));
 return Mockito. mock ( MockitoHelper.verify(mock, times(1));
return MOCKITO_CORE_INSTANCE. mock ; }
 return mock.with(times(1));
return MOCKITO_CORE.verify(mock, times(1)) -> { return mock. verify ( ) ; }
 mock = MockitoImpl.MOCKITO_CORE.verify(mock, times(1));
return MOCKITO_CORE.get(mock); *
 return Mockito. mock ( MockitoImpl.verify(mock, times(1));
 return mock. verify ( times(1)); } *
 mock = Mockito.get(0);
 verify(ock, times(1));
 return MockitoImpl.Mock.verify(mock, times(1));
 return Mockito. getInstance ( """).verify(mock, times(1));
 return MockitoCORE.MOCKITO_CORE.verify(mock, times(1));
 return MockitoImpl.ify(mock, times(1));
 public static <T> T {
 return mock(times(1));
 return Mockito.Mockito.verify(mock, times(1));
 mock = Mockito.create(this);
 verify(this, times(1));
 Mockito.debug(this);
return MOCKITO_CORE.MOCK ;
return MOCKITO_CORE.verify(mock, times(1) + times(2)) ; *
return MOCKITO_CORE.verify(mock,  0);
 Mockito.call(this);
return MOCKITO_CORE_INSTALLATION ; }
 return MockitoUtils.ify(mock, times(1));
 return Mockito. verify ( mock, times ( ) ->
 mock = mock.subclass(1));
return MOCKITO_CORE.verify(mock, times()); * *
return MOCKITO_CORE.verify(mock, times(1, 1));
 return MockitoUtilsUtils.verify(mock, times(1));
 mock = Mockito. _MOCKITO_CORE.verify(mock, times(1));
return MOCKITO_CORE.verify(mock, times(1)). then ( ( ) -> mock ) ; }
 return MockitoUtilsImpl.verify(mock, times(1));
return  mock ; } } ;
 return MockitoVerifierUtils.verify(mock, times(1));
return MOCKITO_CORE.create ( mock ) ; } *
 return mock ; } else { return verify(mock, times(1));
 verify(m, times(1));
 Mockito = mock;
 return Mockito.Verifier.verify(mock, times(1));
 return MockitoHelperUtils.verify(mock, times(1));
return MOCKITO_CORE.verify(mock, times(1)). toString ( ) ;
return MOCKITO_CORE_REPORT ;
 mock.put(times(1));
 public <T> T verify() * *
return MOCKITO_CORE.create ( mock ) ; } } ;
return MOCKITO_CORE.verify(mock, times(1)) ; } return mock ; } ;
return MOCKITO_CORE.Mock;
return MOCKITO_CORE_INSTALLATION_CLASS ;
 return mock ; } public static void verify()(mock, times(1));
return MOCKITO_CORE.verify(mock,  0, times(1));
return MOCKITO_CORE_CHECK ;
 verify(this));
 return Mockito.getInstance (...).verify(mock, times(1));
 public <T> T()
 return MockitoUtils.call(mock, times(1));
 return Mockito. __MOCKITO_CORE.verify(mock, times(1));
 mock = mock. clone ( ). verify(mock, times(1));
 return MockitoUtils.verified(mock, times(1));
return MOCKITO_CORE.verify(mock, times(1)). call ( mock, times(2)) ;
 mock(mock));
return MOCKITO_CORE.verify(mock, times(1)). get ( 0 ) ; }
return MOCKITO_CORE.verify(mock, times(1)) ; } return Mockito. mock ;
 return MockitoVerifyHelper.verify(mock, times(1));
 return Mockito. class. name + "MOCKITO_CORE.verify(mock, times(1));
return MOCKITO_CORE.verify(mock, times(1) + 1); * *
return MOCKITO_CORE.verify(mock, times(1)) -> { return mock. verify ( ) ;
 return Mockito. mock ( "MOCKITO_CORE.verify(mock, times(1));
 return mock. verify ( ) ; } return verify(mock, times(1));
 return verifyImpl(mock, times(1));
return MOCKITO_CORE.verify(mock, times(1)) ; } return Mockito ( ) ;
 return Mockito. verify ( mock ) ; } *
 verify(true));
 return MockitoVerifyUtils.verify(mock, times(1));
 mock = Mockito.createInstance(1));
return MOCKITO_CORE.verify(mock,  atLeastOneTime(1));
 assert(true);
return MOCKITO_CORE.get ( mock ) ; } } ;
return MOCKITO_CORE.verify(mock,  atLeastNumeric(1));
 return Mockito_CORE_MOCKITO_CORE.verify(mock, times(1));
return MOCKITO_CORE.verify(mock, times(1)). call ( Mockito. class ) ;
 return Mockito. mock ( ). mock.verify(mock, times(1));
 return mock ; } public static <T> _MOCKITO_CORE.verify(mock, times(1));
return MOCKITO_CORE.verify(mock, times(1), false); *
 return Mockito.Verify.verify(mock, times(1));
 return verify(m.times(1));
return MOCKITO_CORE_CLASS ;
 return Mockito. mock.MOCKITO_CORE.verify(mock, times(1));
return MOCKITO_CORE.verify(mock, times(1)) -> { return mock. inspect ( ) ;
return MOCKITO_CORE.verify(mock, times(1)). call ( mock, times(1)) ;
 return new Mock(1));
return MOCKITO_CORE.verify(mock, times(1)) ; } return mock ;
 return MockitoImpl.Impl.verify(mock, times(1));
return  mock. mock ;
return MOCKITO_CORE.verify(mock,  new Times(1));
 verify(me, times(1));
 return mock. verify ( times(1)); *
 return mock. verify ( ) ; };
 return mock ; } public static <T> "MOCKITO_CORE.verify(mock, times(1));
return MOCKITO_CORE.verify(mock, times(1)). then ( verify() ) ;
 return mock ; } public static void someMethod(mock, times(1));
return MOCKITO_CORE.verify(mock, times(0, 1));
return MOCKITO_CORE.verify(mock, times(1, -1));
 return new Verify(mock, times(1));
 return mock ; } public <T> T _MOCKITO_CORE.verify(mock, times(1));
return MOCKITO_CORE.verify(mock, times(1).every()));
 verify(null));
return MOCKITO_CORE.verify(mock, times(1)) ; } return Mockito ; }
 return Mockito.getDefaultInstance().verify(mock, times(1));
 mock = mock.verify(mock, times(1));
 mock = null;
return MOCKITO_CORE.verify(mock, times(1, false));
return MOCKITO_CORE.verify(mock, times(1)). thenApply ( verify ) ; }
 return new Verify( mock);
 public <T> T {
 mock = verify( mock, times(1));
 public <T> T verify() { *
 return Mockito. class + "MOCKITO_CORE.verify(mock, times(1));
 return mock ; } public static void verifyAll(mock, times(1));
 mock.get(1));
return MOCKITO_CORE.verify(mock, times(0, 0));
 return Mockito_CORE. mock(MOCKITO_CORE.verify(mock, times(1));
 mock = verify(ock, times(1));
 return mock. verify ( true );
return MOCKITO_CORE.verify(mock, times(1)). call ( mock, times ( 1 ) )
 return MockitoUtilsVerifier.verify(mock, times(1));
 Mockito mock = Mockito.class;
 return MockitoImpl.simulateVerify(mock, times(1));
 mock = Mock.verify(mock, times(1));
 return new Mockito());
 return verify(this));
return MOCKITO_CORE.verify(mock, times(1)) ; return mock ;
 mock = verify( mock);
 public <T> T verify() {}
 mock.call(1));
 assert(mock);
return MOCKITO_CORE.verify(mock, times(1)) ; } return mock ; } }
 return MockitoUtilImpl.verify(mock, times(1));
return MOCKITO_CORE.verify(Mock); *
 return verify(ock);
 return mock ; } public <T> T #MOCKITO_CORE.verify(mock, times(1));
return MOCKITO_CORE.verify(mock,  0).someMethod(1));
return MOCKITO_CORE.verify(mock, times(1)). call ( mock ) ; } }
 return mock ; } public static <T> #MOCKITO_CORE.verify(mock, times(1));
return MOCKITO_CORE.verify(mock, times(1).all()));
 mock.times().get(1));
 return mock.getMethod(1));
return MOCKITO_CORE.verify(mock, times(1) + 1) ;
 return mock ; } else { return "MOCKITO_CORE.verify(mock, times(1));
 return Mockito_CORE. mock().MOCKITO_CORE.verify(mock, times(1));
 return mock. verify ( false );
return MOCKITO_CORE.verify(mock, times(1)). to ( ) ;
 return mock. verify ( null );
 return Mockito.class;
 assert(true));
 return mock instanceof T;
 * return _MOCKITO_CORE.verify(mock, times(1));
 Mockito.call mock);
 Mockito verify( mock, times(1));
return MOCKITO_CORE.verify(mock, times(1)). call ( mock ) ; } } ;
 verify(job);
 Mockito.ify(mock, times(1));
 Mockito verify(ock, times(1));
 mock = verify(this);
 return verify(m);
 return mock. verify ( mock );
 Mockito return mock;
 return verify(me);
return MOCKITO_CORE.create ( mock )
return MOCKITO_CORE.verify(mock, times(1) + 1).* *
 Mockito.debug());
 public <T> T[]
return MOCKITO_CORE.verify(mock, times(1).always()));
 public <T> T *
return MOCKITO_CORE_INSTANCE_CLASS ;
 Mockito mock;
 * *
 return Mock.ify(mock, times(1));
 return MockitoImpl.simulateInvoke(mock, times(1));
 return Mockito. class. name + '.MOCKITO_CORE.verify(mock, times(1));
 verify(me);
return MOCKITO_CORE.verify(mock,  atMost(1));
 return MockitoImpl();
 verify(fake);
return  mock instance ; }
 Mockito.debug({));
 * Mockito.verify(mock, times(1));
 return Mockito.class;
return MOCKITO_CORE.verify(ock);
return MOCKITO_CORE.verify(mock, times(1)) ; } return mock ; } } ;
 return Mock#verify(mock, times(1));
 return mock.obj;
return MOCKITO_CORE.verify(mock, times(1)) ; } } ;
 verify(1));
return MOCKITO_CORE.verify(mi); *
 return T.of(mock, times(1));
return MOCKITO_CORE.verify(mock, times(1) + 1) ; }
return MOCKITO_CORE.verify(mock, times); *
 return get(1));
 return MockitoImpl.class;
return  Mockito ; }
 return MockitoImpl;
 return T.ify(mock, times(1));
 return mockObj;
 return mock ; } return mock;
 return mockObject;
return MOCKITO_CORE.VERSION;
 Mockito(times(1));
 return Mockito_MOCKITO_CORE.verify(mock, times(1));
 return Mockito.instance;
 Mockito.times(1));
return MOCKITO_CORE.verify(mi);
 return mock!= null;
return MOCKITO_CORE.verify(mock,  atLeastTimes(1));
 assert(1));
 return mock == null;
 return mock ; } else { return _MOCKITO_CORE.verify(mock, times(1));
return MOCKITO_CORE.verify(mock,  0.5 times(1));
 return Mockito; }
return MOCKITO_CORE.verify(mock, times(3));
 return Mockito(); }
 return mock. mock ;
(0, times(1));
return MOCKITO_CORE.verify(mock,  atLeastOne(1));
 return Mockito. mock ( ) #MOCKITO_CORE.verify(mock, times(1));
return MOCKITO_CORE.verify(mock,  times(), times(1));
return MOCKITO_CORE.verify(mock,  null);
return MOCKITO_CORE.verify(mock,  1, times(1));
 assertThat(times(1));
return MOCKITO_CORE.verify(mock,  1);
return MOCKITO_CORE.verify(mock, times(1)).*();
 return {T}MOCKITO_CORE.verify(mock, times(1));
return MOCKITO_CORE.verify(mock,  new times(1));
 mock.verify(mock, times(1));
 return "verify(mock, times(1));
 return mock, times(1));
return MOCKITO_CORE.verify(mock, times(1)) ; } *
 return Mockito::MOCKITO_CORE.verify(mock, times(1));
return MOCKITO_CORE.verify(mock, times(2));
 mock.settimes(1));
return MOCKITO_CORE.verify(mock, times(1)) * * *
 assert times(1));
return MOCKITO_CORE ; } }
return MOCKITO_CORE.verify(mock, times(1)));
 return mock.MOCKITO_CORE.verify(mock, times(1));
 return "MOCKITO_CORE.verify(mock, times(1));
 assert mock);
 return Mockito. INSTANCE ; #MOCKITO_CORE.verify(mock, times(1));
 return mock ; } else { return #MOCKITO_CORE.verify(mock, times(1));
 <p> *
 * <p>
return MOCKITO_CORE.test();
return MOCKITO_CORE.class;
return MOCKITO_CORE.verify(mock,  this, times(1));
 * * return _MOCKITO_CORE.verify(mock, times(1));
 MockitoHelper.verify(mock, times(1));
return MOCKITO_CORE.verify(mock, times(10));
 return C.MOCKITO_CORE.verify(mock, times(1));
return MOCKITO_CORE.verify(mock,  new Date(1));
 return MockitoMOCKITO_CORE.verify(mock, times(1));
return  mock; *
( mock, times(1));
 return C_MOCKITO_CORE.verify(mock, times(1));
return MOCKITO_CORE.verify(mock, times(0)));
 mockito.verify(mock, times(1));
return MOCKITO_CORE.verify(mock, times(1)) * ; *
 verify());
 times(-1));
return MOCKITO_CORE.verify(mock, times(1+));
 return __MOCKITO_CORE.verify(mock, times(1));
return MOCKITO_CORE.verify(mock,  getTimes(1));
return MOCKITO_CORE.verify(this);
(true, times(1));
return MOCKITO_CORE.verify(mock, times(1)) * *
return MOCKITO_CORE.verify(mock, times(1123));
 assert());
return MOCKITO_CORE.verify(mock, times(1,...));
 mock();
return MOCKITO_CORE.verify(mock, times) ;
return MOCKITO_CORE.verify mock;
return MOCKITO_CORE.verify(); }
 mock.MOCKITO_CORE.verify(mock, times(1));
 validate(times(1));
return MOCKITO_CORE_ ;
return MOCKITO_CORE; *
 ( mock));
 return null);
 (true));
 (this));
return  Mockito ;
return MOCKITO_CORE.verify(mock, times(1))); *
return  null ; }
 super(times(1));
return MOCKITO_CORE.verify(mock, times(1)"); *
 return validate(mock, times(1));
return  mocked ; }
 return assert(mock, times(1));
 return check(mock, times(1));
return MOCKITO_CORE.verify(mock, times(1)) * * ;
 assert mock;
 * * *
 return null;
 validate(mock, times(1));
 assert(mock, times(1));
return MOCKITO_CORE.verify(mock, times(1)) * ;
return MOCKITO_COREVER ;
 *
 mock mock;
 throw mock;
 check(mock, times(1));
 Verify(mock, times(1));
return MOCKITO_CORE.verify(mock()); *
return  Mock ;
 #
return MOCKITO_CORE.verify(mock,  time(1));
return MOCKITO_CORE.verify(mock,  matches(1));
return MOCKITO_CORE.verify(mock,  methods(1));
