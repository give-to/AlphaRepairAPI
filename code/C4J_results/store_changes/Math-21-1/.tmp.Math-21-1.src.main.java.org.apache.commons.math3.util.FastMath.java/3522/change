 return a;
 return a ; }
 if (bits == 0x8000000000000000L) {
 else {
 if ( bits == 0x8000000000000000L ) { return a ; }
 else if (bits == 0x8000000000000000L) {
 else { return a ; }
 if ( bits == 0x8000000000000000L ) { return b ; }
 if ( bits == 0x8000000000000000L ) { return a }
 if ( bits == 0x8000000000000000L ) { return b ; } if ( bits == 0x8000000000000000L ) {
 else if (bits == 0x8000000000000000L) { return a }
 if ( bits == 0x8000000000000000L ) { return a ; } if ( bits == 0x8000000000000000L ) {
 return -a;
 if ( bits == 0x8000000000000000L ) { return b ; } else {
return a + b ; }
return  b ; } return a ; }
 if ( bits == 0x8000000000000000L ) { return b ; } if ( bits == 0x80000000L ) {
 if ( bits == 0x8000000000000000L ) return a ;
 else if (bits == 0x8000000000000000L) { return a; } else if (bits == 0) {
 else { return a + b ;
 if ( bits == 0x8000000000000000L ) { return a ; } else {
 else { return a ; } }
 if ( bits == 0x8000000000000000L ) { return b }
 if ( bits == 0x8000000000000000L ) { return b ; } if ( bits == 0x000000000000000 ) {
 if ( bits == 0x8000000000000000L ) { return a ; } if ( bits == 0x80000000L ) {
 if ( bits == 0x8000000000000000L ) { return a ; } if ( bits == 0 ) {
 else if (bits == 0x8000000000000000L) { return b ; }
 else if (bits == 0x8000000000000000L) { return a ; }
 if ( bits == 0x8000000000000000L ) { return a ; } if ( bits == - 1 ) {
 if ( bits == 0x8000000000000000L ) { return a ; } if ( bits == 0x000000000000000 ) {
 if ( bits == 0x8000000000000000L ) { return b ; } if ( bits == 0x8000000000000000L ) { }
return  b ; } return a ;
 return a + b ;
 else if (bits == 0x8000000000000000L) { return a; } else if (bits == -1) {
 else if (bits == 0x8000000000000000L) { return b ; } else {
 else if ( bits == 0x8000000000000000L ) { return b ; } else if ( bits == 0x000000000000000 ) {
 if ( bits == 0x8000000000000000L ) { return b ; } if ( bits == 0 ) {
 else if ( bits == 0x8000000000000000L ) { return a ; } else if ( bits == 0x000000000000000 ) {
 if (bits == 0x000000000000000L)
 if ( bits == 0x8000000000000000L ) { return a ; } if ( bits == 0x00000000 ) {
 if ( bits == 0x8000000000000000L ) { return b ; } if ( bits == 0x00000000 ) {
 else if (bits == 0x8000000000000000L) { return a; } else if (bits == 0)
 if ( bits == 0x8000000000000000L ) { return b ; } if ( bits == - 1 ) {
 if (bits == 0x80000000L) {
 if ( bits == 0x8000000000000000L ) { return a ; } if ( bits == 0x8000000000000000L ) { }
 return a + bits ;
 if ( bits == 0x8000000000000000L ) { return 0 }
 else if (bits == 0x8000000000000000L) { return a; } else if (bits == 0x000000000000000L)
 else if (bits == 0x8000000000000000L) { return a; } else if (bits == 0x000000000000000)
 if ( bits == 0x8000000000000000L ) { return a ; } if ( bits == 0L ) {
 else if (bits == 0x8000000000000000L) { return a ; } else {
 else if ( bits == 0x8000000000000000L ) { return a ; } else if ( bits == 0L ) {
 if ( bits == 0x8000000000000000L ) { return a ; } if ( bits < 0 ) {
 else { return b ; } return a;
 else if (bits == 0x8000000000000000L) { return a; } else if (bits < 0)
 else if ( bits == 0x8000000000000000L ) { return a ; } else if ( bits == 0x00000000 ) {
 if ( bits == 0x8000000000000000L ) return b ;
 else if (bits == 0x8000000000000000L) { return a; } else if (bits == 0x80000000L) {
 else if (bits == 0x8000000000000000L) { return a; } else if (bits == 0xffffffff)
 if (bits == 0x8000000000000000L) { return a; } if (b < a) {
 else if ( bits == 0x8000000000000000L ) { return b ; } else if ( bits == 0x80000000L ) {
return  b ; } return a + b ;
 else if (bits == 0x80000000L) {
 if ( b < a ) {
 else { return a;
 else if (bits == 0x000000000000000L)
 else if (bits == 0x8000000000000000L) { return a; } else if (bits) {
return a + b ; } return a + b ;
 if ( bits == 0x8000000000000000L ) { return b ; } }
 if ( bits == 0x8000000000000000L ) { return a ; } if ( bits < 0 )
return a + b * bits ;
 else if (bits == 0x8000000000000000D) {
 else if (bits == 0x000000000000000) {
 else if (bits == 0x000000000000000)
 return a
 if ( bits == 0x8000000000000000L ) { return a ; } if ( bits == 0 )
 if (bits == 0x0000000L) {
 if (bits == 0x8000000000000000D) {
 else if (bits == 0x0000000L) {
 if ( bits == 0x8000000000000000L ) { return b ; } if ( bits < 0 )
 if ( b > a ) {
 else if (bits == 0x8000000000000000L) { return b; } else
 else if (bits == 0x8000000000000000L) { return b ; } } else {
 if ( bits == 0x8000000000000000L ) { return b ; } if ( bits == 0 )
 if ( bits == 0x8000000000000000L ) { return a ; } }
return a + b ; } return a + b ; }
 else { return NaN;
 if (bits == 0x000000000000000)
 else if (bits == 0x8000000000000000L) { return b ; } }
 if ( bits ) {
 if ( bits == 0x8000000000000000L ) { return a ; } if ( bits ) {
 else if (bits == 0x8000000000000000L) { }
 if (bits == 0x8000000000000000L) { return a; } if (b == 0)
 if ( bits == 0x000000000000000 ) {
 else { return b-a;
 if ( bits == - 1 ) {
 return b-a;
 else { return a ; } return b;
 if ( bits == 0x8000000000000000L ) { return b ; } if ( bits ) {
 if ( b!= a ) {
 else { return a - b ;
 if (bits == 0x8000000000000000L) { }
return a - b ; } return a + b ;
 else if (bits == -1) {
return a - b ; } return a + b ; }
return a + b ; } return - 1 ;
return  b ; } else { return a ; }
return a + b ; } return NaN ;
return a + b ; } return a ;
return  0.0d ; } return - 1 ;
return  0.0d ; } return a ;
 if ( bits == 0x8000000000000000L ) { return a ; } else { }
return  b ; } else { return a ; } }
 if (bits == 0x0000000L)
return  b ; } return a + b ; }
return  b ; } else { return a + b ;
 else if (bits == 0x8000000000000000L) { return a ; } else { }
return  b ; return a ;
 else { return b + a;
return a - b ; } return a - b ;
 if (b < a) { return a;
 else if (bits == 0x8000000000000000L) { return b ; } else { }
 if (bits == 0xffffffff)
 if ( bits == 0x00000000 ) {
return a + b ; } return 0.0 ;
return a - b ; } return - 1 ;
 else { return b + -a;
 }
return  b ; } else { return 0.0 ;
 else { return -a;
 if ( bits == 0x8000000000000000L ) { return b ; } else { }
return  b ; } return a - b ;
 else if (bits == 0x8000000000000000L) { return a; } else { } }
 else { return b ; } }
 if (b!= a) { return NaN;
 else { return b ; } return -a;
 if ( b == a )
return  0.0d ; } return a ; }
 else { return b + bits*a;
return a - b ; } return a ;
 else { return b ; } } return a;
 if (b!= a) { return a;
 if ( bits < 0L ) {
return a + b * - bits ;
return a + b ; } return a ; }
return a + b ; return a ;
return a + b - bits ;
return a + b ; } return 0 ;
 if (b < a) { return NaN;
return  0.0d ; return a ;
 if ( b!= a )
return a + b ; } else { return a ; }
 else { return b } return a;
 if (b < a)
 return a - b ;
return a ; } else { return b ; } }
return a - b ; } return a - b ; }
return a + b * - 1 ;
 return b + bits*a;
 return b + a ;
return a + b ; } else { return 0 ; }
return a - b ; return a ;
 else if (bits == 0x8000000000000000L) { return b ; } else { } }
return  b ; } return 0.0 ;
 if (b < a) { return -1;
 if (b < a) return a;
 else { return b; } else { return a;
return a + bits * - b ;
 if (b < a) { return -a;
return  0.0d ; } return 0 ;
return a ; return b ;
 else { } return a;
return a - b ; }
return  b ; } return - 1 ;
return a + b * bits + 1 ;
 if (b < 0.0)
return  0.0d ; } return b ;
 else { return b ; } return b-a;
 if (b) { return a;
return  b + bits * - 1 ;
return a + b ; } return b ;
return a + b ; } return 0 ; }
return  b ; } return a * b ;
return a + b + bits ;
 return b + bits ; }
 else { return b + 1-a;
 else { return b ; return a;
 else { return a + - 1;
 else { return a ; } } return b;
return  b ; return a ; }
 return - 1 ;
return a * bits + b ;
 else { return b - 1-a;
 else { return b; } else { return -a;
return  b ; } return 0 ; }
 else { return a; } else { return -a;
return  b - a ; }
 else { return b; } return - 1;
 else { return b - 1.a;
return a + bits ; }
 else { return b*a;
 return b + -a;
 else { return b - -a;
 else { return - 1;
 else { return a + - b;
 if ( b ) {
return a * b + bits ;
 else { return a + b + b-a;
 else { return a + b + -a;
 else { return b * -a;
 else { return 0.0;
 else { return b ; } return a-a;
 else { return -1-a;
 return a + - 1;
 else { return b; } return b+a;
 else { return -1*a;
 return b - bits*a;
 if ( bit ) {
 return ;
 else { return b + - 1-a;
 else { return b ; } return b + -a;
 return -1*a;
 else { return a + b + - 1-a;
 return b*a;
 else { return ; }
 return b * -a;
 return b ; }
 return bits
 return -1-a;
return a * b ;
 } else {
 else { }
 if (bit)
 if (bits)
 return bits*a;
 return a ; }
 else return a;
 else { } }
 } return a;
 return 0
 return +a;
 return a ;
 return b ;
 return b
 return - b;
 return 0 ;
 } } }
 return ^a;
 } }
 } else
 return 1;
 }
 return c;
 else,
return a ++ ;
return a + bits
 else
return a. ;
