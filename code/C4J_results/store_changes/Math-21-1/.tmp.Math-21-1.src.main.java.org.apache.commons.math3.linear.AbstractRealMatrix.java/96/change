MatrixUtils.checkSubtractionCompatible(this, m);
MatrixUtils.checkSubtractionCompatible(, m);
MatrixUtils.checkSubtractionCompatible(m);
 subtract(this, m);
 MatrixUtils.checkSubcompatible(this, m);
 copy(m);
MatrixUtils.checkSubtractionCompatible(this, m, m);
 MatrixUtils.checkSubtractCompatible(this, m);
 MatrixUtils.checkSubdivisionCompatible(this, m);
 MatrixUtils.checkSubcompatible(m);
 MatrixUtils.copy(m);
 MatrixUtils.checkSubdivisionCompatible(m);
 MatrixUtils.checkSubdivision(this, m);
 MatrixUtils.checkSubcompatibility(m);
 MatrixUtils.checkSubcompatible(m;
 MatrixUtils.checkCompatible(this, m);
 MatrixUtils.checkCopy(m);
 MatrixUtils.sub(this, m);
MatrixUtils.checkSubtractionCompatible(this, m, -1);
 MatrixUtils.checkCompatible(m);
 MatrixUtils.checkSubcompatibility(this, m);
 MatrixUtils(this, m);
 MatrixUtils.checkSubsetCompatible(this, m);
 MatrixUtils.minus(this, m);
 MatrixUtils.checkSubtractable(this, m);
 MatrixUtils.checkSubcompatibility(m;
 MatrixUtils.remove(this, m);
MatrixUtils.checkSubtractionCompatible(this, m, 0, 0);
 MatrixUtils.checkAbsolute(m);
 MatrixUtils.checkCopy(this, m);
MatrixUtils.checkSubCompatible(this, m);
 MatrixUtils.checkSub(this, m);
 MatrixUtils.checkSubtractionCompatible(m, m);
 MatrixUtils.checkSubtractitionCompatible(this, m);
 MatrixUtils.checkRemove(this, m);
 MatrixUtils.checkSubMatrix(m);
 MatrixUtils.checkSubMatrix(this, m);
 MatrixUtils.MatrixUtils.checkSubtractionCompatible(this, m);
 MatrixUtils.copy(this, m);
 MatrixUtils.checkSubCompatible(m);
 MatrixUtils.checkSubsetCompatible(m);
 MatrixUtils.checkAbsolute(this, m);
 MatrixUtils.checkSubtractCompatible(m, m);
 MatrixUtils.checkSubCompatible(m;
 MatrixUtils.checkSubtractionCompatible(this, m);
MatrixUtils.checkSubtractionCompatible(this, -m);
 Utils.checkSubtractionCompatible(this, m);
 MatrixUtils.checkSubtractCompatibilityCompatible(this, m);
 MatrixUtils.checkSubtract(this, m);
 for (int row = 0; row < rowCount; ++row) { out = createMatrix(row, columnCount); }
 MatrixUtils.remove(m);
 MatrixUtils.checkSubtractionCompatible(this, m); final RealMatrix out = createMatrix(rowCount, columnCount);
 MatrixUtils.checkSubdivision(m);
MatrixUtils.checkSubtractionCompatible(this, m, 0);
 MatrixUtils.checkSubtractCompatible(this, m);
 MatrixUtils.checkRemoveCompatible(this, m);
MatrixUtils.checkSubtractionCompatible(this, m, row, col);
 MatrixUtils.checkMatrixUtils.checkSubtractionCompatible(this, m);
 MatrixUtils.compare(m);
 MatrixUtils.checkSubtractionCompatible(m);
 MatrixUtils.compare(this, m);
 MatrixUtils.checkCopy(m;
 MatrixUtils.copy(m;
 MatrixUtils.checkSubtractationCompatible(this, m);
MatrixUtils.checkSubcompatible(m, m);
 MatrixUtils.checkSubcomparable(this, m);
 MatrixUtils.checkSubcompatible(this);
MatrixUtils.checkSubtractionCompatible(m, m);
 MatrixUtils.checkSubtractCompatibleCompatible(this, m);
 MatrixUtils.checkSubtractionCompatible(m, m); Safety check.
 MatrixUtils.checkSubtractAllCompatible(this, m);
 MatrixUtils.checkRemoveCompatible(m);
 MatrixUtils.checkNegativeCompatible(this, m);
 MatrixUtils.checkSubtracts(this, m);
 MatrixUtils.checkSubstitutionCompatible(this, m);
 MatrixUtils.checkSubtractionCompatible(this, m); final RealMatrix out = createMatrix(row, columnCount);
 MatrixUtils.checkSubMatrix(m;
 MatrixUtils.checkCompatible(this, m); Safety check.
MatrixUtils.checkSubtractionCompatible(this, m, false);
MatrixUtils.checkSubtractionCompatible(this, m, 0, 1);
 MatrixUtils.difference(this, m);
 MatrixUtils.checkDiffCompatible(this, m);
 MatrixUtils.checkThis(m);
 MatrixUtils.checkSubtractSupported(this, m);
 MatrixUtils.checkCorrect(this, m);
 MatrixUtils.checkCompatible(this, m);
 m.sub(m);
 MatrixUtils.checkSubtractsCompatible(this, m);
 MatrixUtils.checkSubmodCompatible(m);
 for (int row = 0; row < rowCount; ++row) { out = createMatrix(row, columnCount); };
 MatrixUtils.checkSubtractMultiplyCompatible(this, m);
 Matrices.checkSubtractionCompatible(this, m);
 MatrixUtils.checkSubcompatible(this;
 MatrixUtils.checkSubordinate(this, m);
 MatrixUtils.checkSubtractable(m);
 (this, m);
 MatrixUtils.remove(, m);
 MatrixUtils.checkRemoveCompatible(m;
MatrixUtils.checkSubtractionCompatible(this, m, true);
 MatrixUtils.checkNegativeCompatible(this, m);
 MatrixUtils.checkProduct(this, m);
 MatrixUtils.checkSubcomparable(m);
 MatrixUtils.checkSubtractionCompatible(this, m) ; final RealMatrix out =
 MatrixUtils.checkSubtractCompatible(m, m); Safety check.
 MatrixUtils.checkSubstractionCompatible(this, m);
 MatrixUtils.checkSubtractionCompatible();
 MatrixUtils.Math.checkSubtractionCompatible(this, m);
 MatrixUtils.substract(m);
 MatrixUtils.checkCompatible(m;
 MatrixUtils.realMatrix.checkSubtractionCompatible(this, m);
 MatrixUtils.checkSubjCompatible(this, m);
 final int col = 0;
MatrixUtils.checkSubtractionCompatible(this, Matrix m);
 MatrixMatrixUtils.checkSubtractionCompatible(this, m);
 MatrixUtils.checkSubtractCompatible(m) ;
MatrixUtils.checkSubtractionCompatible(this, m) ; return m ; }
 MatrixUtils.uncheckSubtractionCompatible(this, m);
 MatrixUtils.checkSubtract(m, m);
 MatrixUtils.checkSubdivision(m;
MatrixUtils.checkSubtractionCompatible(this, m, newMatrix);
 MatrixUtils.checkCompare(this, m);
 MatrixUtils.checkDistribution(m);
 MatrixUtils.checkSubtractionCompatible(this, m); final Matrix out = createMatrix(rowCount, columnCount);
 MatrixUtils.checkAbsolute(m;
 MatrixUtils.subshift(m);
 MatrixUtils.compare(m;
 MatrixUtils.add(this, m);
 MatrixUtils.checkSubordinate(m);
 MatrixUtils.checkSubtractionCompatible(this, m); final RealMatrix out = createMatrix(rowCount);
 MatrixUtils.checkSubtractMultitionCompatible(this, m);
 MatrixUtils.checkCompatibility(m;
 MatrixUtils.checkSubtractMatrix(m);
 MatrixUtils.checkSubtractionCompatible(m) &&
MatrixUtils.checkSubtractionCompatible(this, m, row, column);
 MatrixUtils.checkSubtractMatrix(this, m);
MatrixUtils.checkSubtractionCompatible(this, m) ; return m. copy ( ) ; }
 MatrixUtils.checkRemove(m);
 Matrix.checkSubtractionCompatible(this, m);
 MatrixUtils.checkSubtractionCompatible.checkSubtractionCompatible(this, m);
MatrixUtils.checkSubtractionCompatible(this, this, m);
 SubtractionCompatibleMatrixUtils.checkSubtractionCompatible(this, m);
 for (int row = 0; row < rowCount; ++row) { out = createMatrix(row, row); } final
 ModulusCompatible(this, m);
MatrixUtils.checkSubtractionCompatible(this, m, 0.0);
 MatrixUtils.checkSubtractCompatible(this, m) ; final RealMatrix out =
 MatrixUtils.sub(m);
MatrixUtils.checkSubtractionCompatible(this, m, m, m);
 for (int row = 0; row < rowCount; ++row) { out.setRow(row, row); } final
 MatrixUtils.checkSelf(m);
 MatrixUtils.checkSubtractExactCompatible(this, m);
 MatrixUtils.checkSubtractionCompatible(this, m); final RealMatrix out = createMatrix(0);
 MatrixUtils.checkSubtractionCompatible(this, m); final RealMatrix out = createMatrix ( ) ;
 MatrixUtils.checkSubtractionCompatibleCompatible(this, m);
 MatrixUtils.checkSubtractionCompatible(m, m) &&
 SubtractionCompatible(MatrixUtils.checkSubtractionCompatible(this, m);
 MatrixUtils.checkSubtractCompatibleWithMultiply(this, m);
 MatrixUtils.checkCompatibility(this, m);
 RealMatrix out = createMatrix(m;
 MatrixUtils.ils.checkSubtractionCompatible(this, m);
 MatrixUtils.checkSubtractCompatibleMultiply(this, m);
 MatrixUtils.checkSubtractCompatible(m) &&
 m.subMatrix(m);
MatrixUtils.checkSubtractionCompatible(this,  m) ; return m. copy ( ) ;
 MatrixUtils.delete(m);
MatrixUtils.checkSubtractionCompatible(this, m, m, this, m);
 MatrixUtils.checkMathUtils.checkSubtractionCompatible(this, m);
 MatrixUtils.checkSelf(m;
 MatrixUtils.checkSubtractionCompatible.
 MatrixUtils.checkRemovable(this, m);
 MatrixUtils.checkMatrix(m);
 MatrixUtils.checkSubtractionCompatible(this, m) ; return m ; } Safety check.
MatrixUtils.checkSubtractionCompatible(this, m) ; return m. sub ( this ) ; }
 MatrixUtils.checkSubtractionCompatible(this, m) ; Safety check.
MatrixUtils.checkSubtractionCompatible(this, m, getEntry(0)));
 MatrixUtils.sub(m;
 MatrixUtils.checkSubtractionCompatible(this, m) { Safety check.
MatrixUtils.checkSubtractionCompatible(this, m).sub(this, m);
 MatrixHelper.checkSubtractionCompatible(this, m);
 MatrixUtils.checkSubtractionCompatible(this, m) ; return m. sub ( m ) ;
MatrixUtils.checkSubtractionCompatible(this, -1, m);
 MatrixUtils.remove(m;
 checkCopy(m);
 SubtractionCompatible(MatrixUtils).checkSubtractionCompatible(this, m);
 MatrixUtils.checkSubtraction(m) ;
 MatrixUtils.checkSquare(this, m);
 MatrixUtils.Linear.checkSubtractionCompatible(this, m);
MatrixUtils.checkSquare();
 final int row = 0;
 final double d;
 MatrixUtils.checkSubtractionCompatible(this, m); final RealMatrix out = createMatrix(rowCount, columnCount));
 MatrixUtils.checkSubtractionCompatible(m, m) ||
MatrixUtils.checkSubtractionCompatible(this, m, getRowDimension);
 final int rowCount = 1;
 MatrixUtilsCompat.checkSubtractionCompatible(this, m);
 MatrixUtils.checkSubtractionCompatible(this, m); final RealMatrix out = createMatrix(rowCount, columnCount)
 MatrixUtils.checkSubtractionCompatible(this, m) ; return m ; } else {
 MatrixUtils.checkThis(m;
 MatrixUtils2.checkSubtractionCompatible(this, m);
 MatrixUtils.checkSubtractCompatible(new RealMatrix(this, m);
 MatrixUtils.utils.checkSubtractionCompatible(this, m);
 MatrixUtils.minus(, m);
 MatrixUtils.checkSubtractionCompatible(this, m) ; return m. sub ( this ) ;
 subtract(m);
 MatrixUtils.checkSubtractionCompatible(m, m); ;
 MatrixUtils.checkSubtractionCompatible(this, m) ; final RealMatrix out = createMatrix(row, column); ;
 MatricesUtils.checkSubtractionCompatible(this, m);
 MatrixUtils.checkSubtractionCompatible(this, m) ; return this ; } Safety check.
 MatrixUtils.Helper.checkSubtractionCompatible(this, m);
 MatrixUtils.checkSubtractionCompatible(this, m) { return m; } Safety check.
MatrixUtils.checkSubtractionCompatible(this, 0, 0, m);
 Remove(RealMatrix m); MatrixUtils.checkSubtractionCompatible(this, m);
 SubtractionCompatible.MatrixUtils.checkSubtractionCompatible(this, m);
 MatrixUtils.delete(this, m);
 MatrixUtils.checkSubtractionCompatible(m, m); and
MatrixUtils.checkSubtractionCompatible(this, m2);
 MatrixUtils(m);
 MatrixUtils.remove($, m);
 m.minus(m);
MatrixUtils.checkSubtractionCompatible(this, m, null);
 MatrixUtils.checkSubtractCompatible(this, m) ; return m ; } Safety check.
 MatrixUtils.checkSubstitutionCompatible(m); subtract(this, m);
 MatrixUtils.checkSubtractionCompatible(this, m) { return m; } else {
 MatrixUtils.util.checkSubtractionCompatible(this, m);
 final MatrixUtils.checkSubtractionCompatible(this, m);
 MatrixUtils.MathUtils.checkSubtractionCompatible(this, m);
 MatrixUtils.checkSubtractionCompatible(this, m); final RealMatrix out = createMatrix(row, column); final
 MatrixUtils.checkSubtractionCompatible(this, m) ; return m. copy ( ) ; } static
 MatrixUtils.checkSubtractionCompatible(this, m) ; return m. sub ( m ) ; } static
 MatrixUtils.checkSubtractionCompatible().
 MatrixUtils.checkNegativeCompatible();
 MatrixUtils.checkSubtractionCompatible(this, m) ; return m. sub ( this ) ; } static
 MatrixUtils.checkSubtractionCompatible(this, m); final RealMatrix out = createMatrix(row, columnCount));
 MatrixUtils.minus(m);
MatrixUtils.checkSubtractionCompatible(this);
 final int rowCount = 0;
 MatrixUtils.checkSubtractionCompatible(this, m) ; return m. copy ( ) ; } public
 MatrixUtils.cs.checkSubtractionCompatible(this, m);
 checkSub(this, m);
MatrixUtils.checkSubtractionCompatible(this, m) ; return m. subtract ( this ) ; }
 MatrixUtils.checkSubtractionCompatible(this, m); final RealMatrix out = createMatrix(row, columnCount());
MatrixUtils.checkSubtractionCompatible(this, m, 0, m);
 MatrixUtils.checkSubtractionCompatible(this, m) ; return m ; } public abstract
 MatrixUtils.checkSubtractionCompatible(this, m) ; return m. sub ( m ) ; } public
 MatrixUtils.checkCompatible(m);
 MatrixUtils.matrices.checkSubtractionCompatible(this, m);
 MatrixUtils.checkSubtractionCompatible(this, m) ; return this ; } else {
 MatrixUtils.checkSubtractionCompatible(this, m) ; return m. sub ( m ) ; } final
 MatrixUtils.checkSubtractionCompatible(this, m) ; return m. copy ( ) ; } private
 MatrixMathUtils.checkSubtractionCompatible(this, m);
 MatrixUtils.remove(_, m);
MatrixUtils.checkSubtractionCompatible(this, m) ; return m. copy ( this ) ; }
MatrixUtils.checkSubtractionCompatible(this, m) ; return m. sub ( m ) ; }
 MatrixUtils.checkSubtractionCompatible(this, m) ; return m ; } public static
 MatrixUtils.copy();
 MatrixUtils.checkSubtractionCompatible(this, m) ; final Matrix out =
 Subtract(realMatrix) MatrixUtils.checkSubtractionCompatible(this, m);
 MatrixUtils.copy(this);
 MatrixUtils.checkSubtractionCompatible(m, m) ; final
 MatrixUtils.checkSubtractCompatible(Math).sub(this, m);
 MatrixUtils.clone(m);
 MatrixUtils.checkAdditionCompatible();
MatrixUtils.checkSubtractionCompatible(this, m) { return m. copy ( ) ; }
MatrixUtils.checkSubtractionCompatible(this, m) { return m. sub ( this ) ; }
 MatrixUtils.checkSubtractionCompatible(this, m) { } Safety check.
 MatrixUtils.realMatrix().checkSubtractionCompatible(this, m);
MatrixUtils.checkSubtractionCompatible(this, m, subMatrix);
 MatrixUtils.checkSubstitutionCompatible(m).sub(this, m);
MatrixUtils.checkSubtractionCompatible(this, m, this, m);
MatrixUtils.sort(m);
 MatrixUtils.checkSubtractionCompatible(this, m) ; return m ; } static
 MatrixUtils.checkSubtractionCompatible(m, m) { final
 SubtractionCompatible(m); Utils.checkSubtractionCompatible(this, m);
 SubtractionMatrixUtils.checkSubtractionCompatible(this, m);
 MatrixUtils.checkSubtractExactMatch(this, m);
 final int colCount = 1;
 MatrixUtils.checkSubtract(m); ;
 MatrixUtils.checkSubtractionCompatible(this, m) ; return m. copy ( ) ; }
 MatrixUtils.checkSubtractionCompatibility.checkSubtractionCompatible(this, m);
 MatrixUtils.checkCompatibility.
 MatrixUtils.checkSubtraction(m); ;
 MatrixUtils.checkSubtractionCompatible(this, m); final RealMatrix.
 MatrixUtils.checkCompatible(this, m); and
 MatrixUtils.check(m);
 MatrixUtils.checkSubtractionCompatible(m, m); Safety check:
 final int rowCount = 2;
 MatrixUtils.checkSubtractCompatibleWithRealMatrix(this, m);
 MatrixUtils.checkSubtractionCompatible(this, m); final RealMatrix =
 MatrixUtils.Standard.checkSubtractionCompatible(this, m);
 MatrixUtils.checkSubtractionCompatible(this, m) ; return m; } public
 MatrixUtils.checkCompatible(this, m); ;
 MatrixUtils.checkSubtractionCompatible(this, m) ; final double d =
 MatrixUtils.cs().checkSubtractionCompatible(this, m);
 MatrixUtils.checkSubtractionCompatible(m, m); final RealMatrix.
MatrixUtils.checkSubtractionCompatible(this, m, getMatrix(m)) ;
MatrixUtils.checkSubtractionCompatible(this,  m) ; return m. sub ( ) ;
MatrixUtils.checkSubtractionCompatible(this, m, baseMatrix);
MatrixUtils.checkSubtractionCompatible(this, & m);
 Functions.checkSubtractionCompatible(this, m);
 final int rowCount;
 MatrixUtils.checkSubtractionCompatible(m, m) ; else {
 MatrixUtils.copy(();
 MatrixUtils.checkAdditionCompatible.
MatrixUtils.checkSubtractionCompatible(this, m) ; return m. sub ( this ) ;
 MatrixUtilsHelper.checkSubtractionCompatible(this, m);
 MatrixUtils.checkSubtraction();
 MatrixUtils.checkCompatible(this);
 MatrixUtils.checkCopyCompatible();
 MatrixUtils.checkSubtractionCompatible(this, m); } else
MatrixUtils.checkSubtractionCompatible(this, m) ; return m - this ; }
 MatrixUtils (!this, m);
MatrixUtils.checkSubtractionCompatible(this, m) ; return m. sub ( ) ; }
 MatrixUtils.checkSubtractionCompatible(m, m) { }
 MatrixUtils.checkSubtractionCompatible;
 checkSubdivision(this, m);
 MatrixUtils.checkSubMatrixCompatible.checkSubtractionCompatible(this, m);
 MatrixUtils.realMath.checkSubtractionCompatible(this, m);
 MatrixUtils.checkSubcompatible(this, m, m) ;
 final int colCount;
 MatrixUtils.checkSubtractionCompatible(this, m); <>=
 MatrixUtils.checkCompatible(this, m); &&
 doSub(this, m);
 final int rowCount = 3;
 MatrixUtils.checkSubMatrixCompatibility.checkSubtractionCompatible(this, m);
MatrixUtils.checkSubtractionCompatible(this, m) ; return m. copy ( this ) ;
 this.subMatrix(m);
 MatrixUtils.AbstractRealMatrix.checkSubtractionCompatible(this, m);
MatrixUtils.checkThis();
 return m;
 MatrixUtils.checkSubtractionCompatible(m, m) { static
 MatrixUtils.checkMatrixUtils().checkSubtractionCompatible(this, m);
 ModulusCompatible(m);
 MatrixUtils.MathFunctions.checkSubtractionCompatible(this, m);
 MatrixUtils.MatrixCompatibility.checkSubtractionCompatible(this, m);
 MatrixUtils.checkRemoveCompatible(this); doRemove(this, m);
 MatrixUtils.checkMatrixCompatibility.checkSubtractionCompatible(this, m);
 final int n = 1;
 MatrixUtils.checkSubtractionCompatible(this, m) ; return m. copy ( ) ; final
MatrixUtils.update(m);
 MatrixUtils.checkSubtractionCompatible(this, m) ; return m. copy ( ) ; static
 computeSubtract(this, m);
 m.subshift(m);
 MatrixUtils.MathAlg.checkSubtractionCompatible(this, m);
 setCopy(m);
MatrixUtils.checkSubtractionCompatible(this, m, getEntry(m)));
MatrixUtils.checkSubtractionCompatible(this, m) ; return m. clone ( ) ;
 MatrixUtils.checkCompatible.
 MatrixUtils.MatrixCompatible.checkSubtractionCompatible(this, m);
MatrixUtils.checkSubtractionCompatible(this, m, getMatrix(m)));
 MatrixUtils.subtract();
MatrixUtils.checkSubtractionCompatible(this, m, getEntry(), 0);
 MatrixUtils.checkRemoveCompatible(this); doAdd(this, m);
 MatrixUtils.checkAddCompatible();
 MatrixUtils.checkCompareCompatible();
 copyMatrix(this, m);
MatrixUtils.checkSubtractionCompatible(this, m, getSubmatrix());
 MatrixUtils.checkSubcompatible(this, m)
 MatrixUtils.matrixMath.checkSubtractionCompatible(this, m);
 MatrixUtils.copy(\);
MatrixUtils.checkSubtractionCompatible(m, this);
 MatrixUtils(copy m);
 doSubtract(m);
 Matrix.abs(m);
 m.substract(m);
 MatrixMath.checkSubtractionCompatible(this, m);
 MatrixUtils.checkSubtractCompatible(this, m) ; }
 m.add(m);
 MatrixUtils.checkSubtractCompatible(this, m, m) ; }
 Matrix.copy(m);
 MatrixUtilsUtils.checkSubtractionCompatible(this, m);
 MatrixUtils.checkMatrixCompatible.checkSubtractionCompatible(this, m);
 MatrixUtils.copy(this;
 final double d = 0;
MatrixUtils.checkSubtractionCompatible(M, m);
 MatrixUtils.copy(m);
 MatrixUtils.subtraction();
 MatrixUtils.checkSubcompatible(this, m, m) {
 MatrixUtils.checkMult(m);.checkSubtractionCompatible(this, m);
 MatrixMath.sub(this, m);
 MatrixUtils.modulus m;
 final int n = 0;
MatrixUtils.checkSubtractionCompatible(1.0, this, m);
 m.remove(m);
 MatrixMath.minus(this, m);
 MatrixUtils.checkNegativeCompatible(this, m, m) ; }
 MatrixUtils.checkAddCompatible.
 MatrixUtils.checkSubtractCompatible(this, m, newMatrix); }
 MatrixUtils.checkSubtractCompatible(this, m)
 MatrixUtils.checkSubtractCompatible(this, m, -1); }
MatrixUtils.checkSubtractionCompatible(this, -1, this, m);
 checkMatrix(m);
 MatrixUtils.checkCompatible(m); ;
 MatrixUtils.checkSubstitutionCompatible(this, m) ; }
 MatrixUtils.checkSubcompatible(this, m) ; }
MatrixUtils.checkSubtractionCompatible(this, m, getEntry(0);
 MatrixUtils.checkSubtractCompatible(this, m));
MatrixUtils.checkSubtractionCompatible(this, m).copy();
MatrixUtils.checkSubtractionCompatible(this, m, null, m);
MatrixUtils.checkSubtractionCompatible(matrix, m);
MatrixUtils.checkSubtractionCompatible(this, m, m.get ( ));
 Matrix.minus(this, m);
 MatrixUtils.checkSubtractCompatible(this, m) { }
MatrixUtils.checkSubtractionCompatible(this, m, getMatrix(m)) {
 checkProduct(this, m);
MatrixUtils.checkSubtractionCompatible(this, m) ; return m ; } }
 MatrixUtils.checkSubcompatible(this, m, m); }
 MathUtils(this, m);
 MatrixUtils.checkMatrixAlgebra.checkSubtractionCompatible(this, m);
 MatrixUtils.checkNegativeCompatible(this, m, - m); }
 Safety check.
MatrixUtils.checkSubtractionCompatible(self, m);
 MatrixUtils.checkNegativeCompatible(this, m, -1); }
MatrixUtils.checkCopy();
 MatrixUtils.checkSubtractCompatible(this, m, - m); }
 m.copy(m);
MatrixUtils.checkSubtractionCompatible(this, m) ; return m ; } } {
 MatrixUtils.checkNegativeCompatible(this, m)
 setMatrix(m);
MatrixUtils.checkSubtractionCompatible(this, m) ; return m ; } } ;
 checkNeg(this, m);
MatrixUtils.checkSubtractionCompatible(this, 0, 0, this, m);
 MatrixMath.remove(this, m);
 MatrixUtils.checkSubcompatible(m); }
 MatrixUtils.checkRemoveCompatible(this, m, m); }
MatrixUtils.checkSubtractionCompatible(new RealMatrix(m, this, m);
 checkSubcompatible(this, m);
 getMatrix(m);
MatrixUtils.checkSubtractionCompatible(this, newMatrix, m);
MatrixUtils.checkSubtractionCompatible(this, m) ; return m ; } else {
MatrixUtils.checkSubtractionCompatible(this, m) ; return this ; }
MatrixUtils.checkSubtractionCompatible(this.matrix, m);
 copy(();
 final int row;
 MatrixUtils.checkSubtractCompatible(m); }
 Matrix.sub(this, m);
 return null;
 checkSubdivision(m);
 checkCompatible(this, m);
 checkCopy(this, m);
 copy();
 final double -d;
 sub(this, m);
 checkSubMatrix(this, m);
MatrixUtils.checkSubtractionCompatible(this, m) ; return m ; };
 check(m);
 MatrixUtils.checkSubcompatible(m); {
MatrixUtils.checkSubtractionCompatible(realMatrix, m);
 MatrixUtils.checkSubCompatible(m); }
 MatrixUtils.transact();
 MatrixUtils.substract(m); }
MatrixUtils.checkSubtractionCompatible(1,0, this, m);
 MatrixUtils.subtraction
 MatrixUtils.checkSubdivision(m); }
MatrixUtils.checkSubtractionCompatible(new RealMatrix(null, this, m);
 MatrixUtils.checkSubcompatibility(m); }
 checkAbsolute(this, m);
 MatrixUtils.Compatible.checkSubtractionCompatible(this, m);
MatrixUtils.checkProduct();
 MatrixUtils.
MatrixUtils.checkSubtractionCompatible(this, m, getEntry(), m);
MatrixUtils.checkSubtractionCompatible(realMatrix, this, m);
 MatrixUtils.transforms.checkSubtractionCompatible(this, m);
 MatrixUtils.getMatrix();
 MatrixUtils.checkSubCompatible(this, m); }
 MatrixUtils.compatibility.
 final Matrix out;
 MatrixUtils.checkSubdivision(m); {
MatrixUtils.checkSubtractionCompatible(1,1, this, m);
 MatrixUtils.checkSubCompatible(m); {
 MatrixUtils.checkCopy(m); }
 checkRemove(this, m);
MatrixUtils.checkSubtractionCompatible(new RealMatrix(d, this, m);
 checkProduct(m);
MatrixUtils.checkSubtractionCompatible(m, this, m);
 final int n;
 MatrixUtils.checkError();
MatrixUtils.checkSubdivision();
 SubMatrixCompatible(this, m);
 final int nrows;
 MatrixUtils.copy();
 copyMatrix(m);
 MatrixUtils.Math.
MatrixUtils.checkSubtractionCompatible(this,  m) ; return m. copy ( ) {
 MatrixUtils.compare(m); }
 MatrixUtils.checkAbsolute(m); }
 MatrixUtils.checkSubMatrix(m); }
MatrixUtils.checkSubtractionCompatible(0, 1, this, m);
 checkSubcompatibility(this, m);
 final int cols;
 MatrixStatistics.checkSubtractionCompatible(this, m);
MatrixUtils.checkSubtractionCompatible(this, m, getEntry(), false);
 final int 0;
MatrixUtils.checkSubtractionCompatible(this, -m, this, m);
 MatrixUtils.Compatibility.checkSubtractionCompatible(this, m);
 Assume.
 Special check.
 copy(this, m);
 MatrixUtils.checkRemaining(m); }
MatrixUtils.checkSubtractionCompatible(this,  m) ; return m. copy ( ) }
 MatrixUtils.checkThis(m); }
 MatrixUtils.checkSelf(m); }
 double d;
MatrixUtils.checkSubtractionCompatible(this.m, m);
 minus(this, m);
MatrixUtils.checkSubtractionCompatible(this, m, getMatrix()); }
MatrixUtils.remove();
MatrixUtils.checkSubtractionCompatible(this, m, m) ; }
 MatrixUtils.util.
MatrixUtils.checkSubtractionCompatible(new Matrix(m, this, m);
MatrixUtils.check();
MatrixUtils.clear();
 MatrixUtils.utils.
MatrixUtils.checkSubtractionCompatible(this, n, m);
MatrixUtils.checkSubtractionCompatible(this, m).sub(m); }
MatrixUtils.checkSubtractionCompatible(this, m) { return m; }
MatrixUtils.checkMath();
 this.checkSubtractionCompatible(this, m);
MatrixUtils.checkSubtractionCompatible(this, m) ; }
MatrixUtils.checkSubtractionCompatible(this, m, -1); }
 Assume that
 validate(m);
 modify(m);
MatrixUtils.checkSubtractionCompatible(this, m, newMatrix); }
 MatrixUtils.mod();
MatrixUtils.checkSubtractionCompatible(this, 0, m);
MatrixUtils.checkSubtractionCompatible(this, m, newMatrix); {
MatrixUtils.sort();
 Sub(this, m);
MatrixUtils.checkSubtractionCompatible(this2, m);
MatrixUtils.checkSubtractionCompatible(this, m, - m); }
MatrixUtils.checkSubtractionCompatible(this, m, 0, 0); }
 sub(m);
 remove(m);
 subtractMatrix(this, m);
MatrixUtils.checkSubtractionCompatible(this, m) { return m ; } }
MatrixUtils.checkSubtractionCompatible(this, m) <> 0;
 Assumption:
MatrixUtils.checkSubtractionCompatible(matrix, this, m);
 copy(_);
MatrixUtils.checkSubtractionCompatible(this, m) { }
 Math.checkSubtractionCompatible(this, m);
 return this;
MatrixUtils.checkSubtractionCompatible(this, m, false); }
 < < < < <
 This is the same as
 This is a hack.
MatrixUtils.checkSubtractionCompatible(this, m, 0); }
MatrixUtils.checkSubtractionCompatible(this, m, m));
MatrixUtils.checkSubtractionCompatible(this, m, true); }
 This is a bug.
MatrixUtils.checkSubtractionCompatible(this, m) ; return this ; } }
MatrixUtils.remove(m); }
MatrixUtils.copy(m); }
 int n;
MatrixUtils.sub(m); }
 This is an optimization.
MatrixUtils.checkSubtractionCompatible(this, m) { return m;
 This.checkSubtractionCompatible(this, m);
MatrixUtils.checkSubtractionCompatible(this, m), m); }
MatrixUtils.checkSubtractionCompatible(this, m) {
 < Safety check.
 MathUtils.checkSubtractionCompatible(this, m);
MatrixUtils.checkSubtractionCompatible(newMatrix, this, m);
MatrixUtils.diff(m); }
MatrixUtils.checkSubtractionCompatible(compatible, m);
MatrixUtils.checkSquare()
 (m, m);
 copy(, m);
MatrixUtils.checkSubtractionCompatible(m1, m);
MatrixUtils.checkSubtractionCompatible(thisMatrix, this, m);
 (!this, m);
 VectorUtils.checkSubtractionCompatible(this, m);
 negate(m);
 Note:
MatrixUtils.check(m); }
MatrixUtils.checkSubtractionCompatible(this, m) return m;
MatrixUtils remove();
 <DC> public
 < < < <
MatrixUtils.checkSubtractionCompatible(this, m) ; return this; } {
MatrixUtils does this
 ModelUtils.checkSubtractionCompatible(this, m);
 NumberUtils.checkSubtractionCompatible(this, m);
MatrixUtils.checkSubtractionCompatible(m) {
MatrixUtils.checkSubtractionCompatible(m1, this, m);
 <DC> private
MatrixUtils.remove
MatrixUtils.checkSubtractionCompatible(', m);
MatrixUtils.checkSubtractionCompatible(this, m) { return m }
MatrixUtils.checkSubtractionCompatible(M);
MatrixUtils.checkSubtractionCompatible(m); }
MatrixUtils.copy
MatrixUtils.checkSubtractionCompatible(this, m) return this;
 static final
MatrixUtils.checkSubtractionCompatible(m); {
MatrixUtils.checkSubtractionCompatible(mm);
MatrixUtils.checkSubtractionCompatible(m)
MatrixUtils.checkSubtractionCompatible(", m);
MatrixUtils.checkSubtractionCompatible((), m);
MatrixUtils.checkSubtractionCompatible(this, m) return null;
MatrixUtils.checkSubtractionCompatible(m, m); }
MatrixUtils.checkSubtractionCompatible(This, m);
MatrixUtils.check
 static.
MatrixUtils.checkSubtractionCompatible(this, m)
MatrixUtils.checkSubtractionCompatible(this, m));
 Note.
MatrixUtils.checkSubtractionCompatible(This, m); }
MatrixUtils.checkSubtractionCompatible(this, n);
 Note that
MatrixUtils.checkSubtractionCompatible() {
MatrixUtils.checkSubtractionCompatible();
MatrixUtils.checkSubtractionCompatible(); }
MatrixUtils.checkSubtractionCompatible()
MatrixUtils.checkSubtractionCompatible(this, m)); }
 remove(this, m);
 final
MatrixUtils.checkSubtractionCompatible(1, this, m);
MatrixUtils.checkSubtractionCompatible(null, this, m);
MatrixUtils.checkSubtractionCompatible(d, this, m);
MatrixUtils.checkSubtractionCompatible(this) {
MatrixUtils.checkSubtractionCompatible(this); }
 static
MatrixUtils.checkSubtractionCompatible(this), m
.
MatrixUtils.checkSubtractionCompatible(this, m) {} {
MatrixUtils.checkSubtractionCompatible(this, m) {} }
MatrixUtils.checkSubtractionCompatible(this), {
MatrixUtils.checkSubtractionCompatible(c);
MatrixUtils.checkSubtractionCompatible(ms);
MatrixUtils.checkSubtractionCompatible(this, r);
MatrixUtils.checkSubtractionCompatible(this, b);
MatrixUtils.checkSubtractionCompatible(this, m), {
