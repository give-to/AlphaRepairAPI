quadrant = k & 3;
 quadrant = -k & 3;
 k = 0;
 k = -3;
 else { quadrant = -k & 3;
 k --;
 k=3;
quadrant =  (int) k ;
quadrant =  0 ;
quadrant =  (int) (k) & 3;
quadrant  ++ ;
 else { k = (k)& 3;
 else { k = (int)(xa)& 3;
 else { k = 0;
quadrant  = (int) reduceResults[0];
quadrant  = (int) k & 3 ;
 else { k = (int) k& 3;
 else { quadrant = ((int) k)& 3;
quadrant =  k - 1 ;
 else if (negative) { quadrant = -k & 3;
 else { k = -3;
quadrant  = (int) (k - 1);
 k ++;
quadrant  = (int) k - 1 ;
quadrant  = (int) -k;
quadrant  = (int) (k - k) ;
 else { k = ((int) k& 3;
 } else { quadrant = -k & 3;
quadrant  = (int) (k) & 4;
 else { k = (int) reduceResults.k & 3;
 else { k = ((int) k)& 3;
 else { k = (quadrant)& 3;
quadrant = k & 3 ; if ( negative ) { negative = false ;
quadrant  = (int) (k + 1);
 else { quadrant = (int) remA& 3;
 else { k = (int) k++& 3;
 else if ( ( k < 0.0 ) ) { return Double. NaN ; } else if ( k > 1.0 ) {
quadrant  = (int) quadrant ;
quadrant  = (int) k + 1 ;
 else if ( ( k < 0.0 ) ) { return Double. NaN ; } else if ( k > 0.0 ) {
quadrant  = (int) k % 4;
quadrant  = (int) reduceResults[0]; }
quadrant = k  ; if ( negative ) { negative = false ;
 else if (k < 0.0) {
 else { quadrant = (int) k++& 3;
 else if (k < 0.0) { break; } else if (k > 1.0) {
 else { k = (int)(x)& 3;
quadrant  -- ;
 else { k = (int) k*& 3;
 else if (k < 0.0) { break; } else if (k > 0.0) {
 else { k -- ; quadrant = -k & 3;
 else if (k < 0.0) { break; } else if (k > 1.0) { int
 else if (negative) quadrant = -k & 3;
 else if (k < 0.0) { double
quadrant = k &  3 ; if (! negative ) {
 else if (k < 0) { int
quadrant =  k ;
 else if (k > 0.0) {
quadrant =  - 1 ;
 else if (k > 0) { int
 else { k = 1;
 else if (k < 0.0) { break; } else if (k > 1.0) { double
 while (true) { int
 else if (k < 0.0) { k = 0.0;
 else { k -= (quadrant)& 3;
 else if (negative) { k = (int)(xa + xb); int
 else if (k < 0.0) { int
 else if (k < 0.0) { k = 0.0; }
quadrant = k  ; } else { quadrant = - 1 ;
 else if (k < 0.0) { break; } else if (k > 0) {
 else if (k > 0.0) { double
 else if (k < 0.0) { break; } else if (k > 0.0) { int
 if (k < 0.0) { k = 0.0; int
 else if (k < 0.0) { k = 0.0; int
 } else if ( k < 0.0 ) { return Double. NaN ; } else if ( k > 0 ) {
quadrant = k & 3 ; if ( negative ) { negative = true ;
quadrant = k &  3 ; } else { quadrant = 0 ;
 if (k < 0.0) { k = 0.0; }
 k -=3;
 else { double quadrant = -k & 3;
quadrant = k  ; } else { quadrant = 0 ;
 else if (k > 0.0) { int
 if (k < 0.0) { k = 0.0 ;
 if (negative) {
quadrant  = k + 1 ;
 else if (k < 0.0) { break; } else if (k > 0) { int
 if (negative) { break; } if (negative) { int
 else if (k < 0.0) { break; } else if (k > 0.0) { double
 if (k < 0.0) {
 else if (negative) { k = (int)(xa + k); int
 else if (k < 0.0) { break; } else if (k > 1) { int
 else if (negative) { k = (int)(xb); } else { k = (int)(xa); }
 if (k > 0) { int
 else if (k < 0) { double
 if (k > 0.0) {
 else if (k < 0.0) { k = 0.0 ; } if (negative) {
 if (k < 0.0) { int
quadrant = k  ; } else { quadrant = - k ;
 if (negative) { break; } if (negative) { break; } if (negative) { break; } else { int
quadrant  = (int) (k) ; }
 else { int quadrant = -k & 3;
 } else if ( k < 0.0 ) { return Double. NaN ; } else if ( k > 3 ) {
 else if (k < 0.0) { break; } else if (k > 0.1) { int
quadrant = k  ; } else {
quadrant =  (int) k --;
 k=k & 3;
 else if (negative) { k = -k; int
quadrant = k & 3 ; } else { quadrant = - 1 ;
 else if (negative) { k = (int)(xb); } else { k = (int)(xa);
quadrant = k &  3 ; } else {
 else if (k < 0.0) { break; } else if (k > 0.0)
 else if (k < 0.5) { double
 else { k = quadrant& 3;
 if (k > 0) {
 if (negative) { break; } if (negative) { break; } if (negative) { if (negative) { int
 else { double xb = x;
 else if (k < 0.0) { break; } else if (k > 0) { double
quadrant = k  ; } else { quadrant = k ;
 else if (k > 0) {
quadrant =  -k ;
 if (negative) { break; } if (negative) { break; } if (negative) { break; } } else {
 else { k -- ; } quadrant = -k & 3;
quadrant = k &  3 ; if ( negative ) {
 else { k = 0.0 ;
 else { if (negative) quadrant= k & 3;
 else { k = k;
 else if ( ( k < 0 ) ) { return Double. NaN ; } else if ( k > 1 ) { } else {
 else if (k < 0.0) { break; }
 if (k < 0.0) { double
 if (negative) { break; } if (negative) { break; } if (negative) { break; } else { double
 else if (negative) { k = (int)(xb); } else { k = (int)(k); }
 else if (k < 0.0) { k = (int)(k) ; int
quadrant = k  ; if ( negative ) { negative = true ;
quadrant = k  ; } else { quadrant = 1 ;
 else if ( ( k < 0 ) ) { return Double. NaN ; } else if ( k > 1 ) { break ; }
quadrant  -= k ;
 else if (negative) { k = (int)(xb); } else if (negative) { k --; }
quadrant = k & 3 ; } else { quadrant = -k ;
 if (negative) { break; } if (negative) { break; } if (negative) { k = -k; }
 else { k = (components)& 3;
 else if (negative) { quadrant= k & 3;
 else { int quadrant=3;
 else if (negative) { k = (int)(xb); } else { k = (int)(xa); int
 else { k -- ; k = - 1 ;
 else { k = (int) k<<3;
quadrant =  (int) (k - k) ; }
 else if (negative) { k = -3;
quadrant =  (int) (k) & 3; }
 else { k = (x)& 3;
 else if ( ( k < 0 ) ) { return Double. NaN ; } else if ( k > 1.0 ) { double
 else if ( ( k < 0 ) ) { return Double. NaN ; } else if ( k > 1.0 ) { int
 else { k = ((int)& 3;
 else { break ; }
quadrant =  (int) (k - 1) ; }
 else if (negative) { quadrant = -3;
 else if (k < 0.0) { break; } double
quadrant = k &  3 ; } else { quadrant = k ;
 else if ( ( k < 0 ) ) { return Double. NaN ; } else if ( k > 1 ) { break ; } }
 } else {
 if (k < 0) { int
 else if (k < 0.0) { k = 0.0; } int
 else { break ; } } quadrant = -k & 3;
 else { if (negative) { quadrant= k & 3;
 else if (k < 0.0) { k = (int)(k); } int
 else if ( ( k < 0 ) ) { return Double. NaN ; } else if ( k > 3 ) { break ; }
 else if (k < 0.0) { break; } int
 if (negative) { break; } if (negative) { double
quadrant  = k - 2 ;
quadrant = k &  3 ; } else { quadrant = 1 ;
 else if (k < 0.0) { k = (int)(k * 2); int
 else if (k < 0.0) { k = 0.0 ; } double
 else if (negative) { k = (int)(xa + xb); }
 else if ( ( k < 0 ) ) { return Double. NaN ; } else if ( k > 2 ) { break ; } }
 else { k -- ; break ; } } else {
 else if (k < 0.0) { k = (int)(k + 1); int
 else { k = (int) -3;
quadrant = k &  2 ; } else { quadrant = 0 ;
 else { break ; } quadrant = -k & 3;
 else { k = (int) reduceResults().k & 3;
 else { k -= 1 ;
quadrant = k &  3 ; k = - 1 ;
 else if ( ( k < 0 ) ) { return Double. NaN ; } else if ( k > 3 ) { break ; } }
 else if (k < 0.0) { k = 0.0 ; } } } else {
quadrant = k &  4 ; } else { quadrant = 0 ;
 else {
 else { k = (xa)& 3;
 else { k -- ; } k = - 1 ;
quadrant  = k + 2 ;
 else { k = (int) k*3;
 k = 1;
 else { if (negative) { quadrant *= k & 3;
quadrant = k &  3 ; k = 0 ;
 else if (negative) { int quadrant=3;
 } else { double quadrant = -k & 3;
 else { k = - k ; } k *= k & 3;
quadrant = k  ; if ( negative ) { break ; }
 else { int quadrant = -3;
 else if (negative) { k = (int)(xa + xb); } int
 else { k = (i)& 3;
 quadrant += -k & 3;
 else if (negative) { k = -k; } int
 else { if (negative) { quadrant |= k & 3;
 } } else { quadrant = -k & 3;
 else if (k < 0.0) { k = (int)(k + 1); }
 else if (negative) { k = -k; }
 else { if (negative) { quadrant >>= k & 3;
 } else { int quadrant = -k & 3;
 else { double xb = xa;
 else { k = - k ; } k ^= k & 3;
 if (k < 0) {
 else if (negative) { k = -k; double
 else { k = (int) r*k & 3;
 else if (k < 0.0) { k = (int)(k); } double
 else { k --;
quadrant = k &  3 ; if (negative)
 else if (k < 0.0) { k = (int)(k * 2); }
 int quadrant=3;
quadrant = k &  3 ; } else { k = 0 ;
 else if (k) { quadrant *= k & 3;
 else { break ; } k = -3;
 else { k = 0 ; break ; }
 else { k -- ; xa = x;
 if (negative) { int
 else if (k) { quadrant |= k & 3;
 if (k > 0) { double
 else { k ++;
quadrant  = (int) k ; }
 else if (k < 0.0) { k = (int)(k) ; double
 else { k -- ; } k = 0;
 else if (negative) { k ^= k & 3;
 else { k = - k ; k ^= k & 3;
 else { k = 0 ; xa = x;
 else { if (negative) quadrant *= k & 3;
 else { quadrant=k & 3;
quadrant  += k ; } else {
 } else { quadrant=k & 3;
 else { double xb = x + k;
 } else { k = 0;
quadrant = k & 3 ; else { k = 0 ;
 else { k -- ; } } else {
 else if (negative) { k = k*3;
 else { k = -k ;
 else { k = - 1 ;
 else if (k < 0.0) { k = 0.0 ; } else { break ; } }
 } else if ( k < 0.0 ) { return Double. NaN ; } if ( k > 0 ) { int
 else if (negative) { k *= k & 3;
 else if (k < 0.0) { k = 0.0 ; } } else { double
quadrant =  k % 4 ;
quadrant = k &  3 ; break ; } else {
 else if (k < 0.0) { k = 0.0 ; } } else { int
 else { double x = x;
 else { k -- ; xb = x;
 else { k -= 1 ; xa = x;
 else { break ; } k = 0;
 else { k ++ ; } } else {
 else { k=3;
 else { int quadrant=k & 3;
 else if (k < 0.0) { break; } else if (k > 1.0) {}
quadrant  += 2 ;
 else { k = (int) r^k & 3;
 else { double xb = remB;
 } else if ( k < 0.0 ) { return Double. NaN ; } if ( k > 0 ) { double
 else if (negative) { k = k-3;
 else { double xb = x + 1;
 else if (negative) k = -3;
 else if (negative) quadrant= k & 3;
 int quadrant = -k & 3;
 else { k = (int) k >>>3;
 k = k*3;
 else { break ; } k=3;
 else { double xb = remA;
 else { k -- ; } k *= k & 3;
 else { k = k - 1;
 else { k -- ; } k = - k ;
quadrant = k & 3 ; if ( negative ) { break ; }
 else { k = 0 ; xa = 0;
 if (k < 0) { double
 else { int quadrant=& 3;
 else { k = (int) k >>3;
quadrant = k &  2 ; } else {
 else { k -- ; k = 0;
 else if (k < 0.0) { break; } } int
 else { quadrant& 3;
 else { int k = 0;
 else { k -- ; } } k = 0;
quadrant = k &  4 ; } else {
 else { k = k*3;
quadrant = k  - 1 ; } else {
quadrant = k &  3 ; if ( negative ) { break ;
quadrant = k  ; break ; } else {
 if (k) { int
 else if (k < 0.0) { k = 0.0 ; break ; } } double
 else if (negative) { k = -k; } double
 k = k;
 k = k-3;
 else { k = k& 3;
 } else if ( k < 0.0 ) { break ; } if ( k > 0.0 ) break ; } }
 else { k = quadrant >>>3;
quadrant  = (int) (k) ; double
quadrant = k &  3 ; } else { k = 1 ;
 else if (negative) { quadrant = ~3;
 while (true) ; int
 else { k -= 1 ; } k = 0;
quadrant = k &  3 ; break ; } } else {
 else { k += 1;
 else { k += quadrant& 3;
 if (negative) { break; } if (negative) { var
 } quadrant = -k & 3;
 else { double xa = x;
quadrant =  0 ; } else {
 else { k -- ; break ; } }
 else { k -- ; k ++ ; } }
 else if (k < 0.0) { break; } } double
 else { k = k-3;
 else { k = (int) ~3;
 while (true) { double
 else { double xb = 0;
 else { double x = 0;
quadrant = k &  4 ;
 xb = b;
quadrant = k  ; break ; } } else {
 else { int k = 1;
 else { k = k + 1;
 int quadrant=k & 3;
quadrant = k  + 1 ; } else {
quadrant = k  ; if ( negative ) { break ;
 else if (negative) { int
 if (negative) { k = - k ; } int
 if (k < 0.0) { k = 0.0 }
 else { k -- ; break ; } } }
 else { k = k<<3;
 } else { int quadrant=k & 3;
 else { break; k=3;
 else { k = k * -3;
 else { k += -3;
 else if (negative) { k=k & 3;
 else { quadrant += -k & 3;
 else { k -- ; break ; } } } }
 if (k < 0.0) { float
 } } else {
 else { k = quadrant >>3;
 else { k = k*& 3;
 xa = x;
 else if (negative) { double
 k = k<<3;
 k -= 1;
 int k = k;
quadrant = k  ; break ; default : break ; }
quadrant = k & 3 ; break ; default:
quadrant = k & 3 ; break ; default : break ; }
 else { k -= 1 ; } }
 k = quadrant& 3;
 else { double quadrant=k & 3;
 if (quadrant)& 3;
 else if (negative) k=k & 3;
quadrant = k &  2 ;
quadrant = k  ; break ; default:
 else { k += ~3;
 else { quadrant=& 3;
quadrant = k &  3 ; } else { break ; }
 else { k += ^3;
 else { k = k++& 3;
quadrant = k  ; } else { break ; }
 else { k -- ; } }
quadrant = k &  3 ; break ; default : { double
 else { k -= 1 ; }
quadrant = k &  3 ; if (! negative ) { double
 else { k -= -3;
 quadrant=3;
 else { break ; } k ^= k & 3;
 else { k -- ; } } }
 else if (negative) k ^= k & 3;
 else if (negative) k *= k & 3;
 else { quadrant <<& 3;
 int quadrant=& 3;
quadrant =  1 ;
 else { k -- ; break ; } } else
 else { break; }
quadrant = k &  3 ; break ; } else { double
quadrant = k &  3 ; break ;
 quadrant = --k & 3;
 else { double remB *= k & 3;
 else { k ++ ; } } }
 else { k -- ; } } } }
 k += 1;
quadrant = k &  3 ; break ; } }
 else { double remA *= k & 3;
 quadrant=& 3;
 k += -3;
 int boundary = k& 3;
 else { double remB >>= k & 3;
 else { double remA ^= k & 3;
quadrant = k  ; break ; } } else { double
quadrant = k &  3 ; break ; }
quadrant = k  ; break ; default : { double
quadrant = k  ; if ( negative ) break ; }
 } else {
 q = -k & 3;
quadrant = k & 3 ; if ( negative ) break ; }
quadrant  = k - 1 ; }
quadrant = k  - 1 ; break ; } }
 quadrant=(k & 3;
quadrant = k &  3 ; else {
 k +=3;
 k +=.3;
quadrant = k  ; break ; } else { double
quadrant = k &  3 ; break ; } } }
 k += ^3;
quadrant = k &  2 ; break ; } }
 quadrant +=k & 3;
quadrant = k  ; break ; } }
 else if (negative) { float
 int
 } else { k ^= k & 3;
 } quadrant= k & 3;
quadrant = k >> 3;
quadrant = k  ; break ; } } }
 } } else {
 } else { k=k & 3;
quadrant =  2 ;
quadrant = k &  2 ; break ; }
quadrant = k  ; break ; }
 quadrant *& 3;
 int remB= k & 3;
 else { quadrant *= k & 3;
quadrant = k  ; break ; default {
 } else { k *= k & 3;
quadrant = k &  3 ; } }
 quadrant <<& 3;
quadrant = k  - 1 ; } }
quadrant = k &  3 ; }
 else { } }
 break ; } }
 } else { double
 return k& 3;
 else { quadrant |= k & 3;
quadrant = k &  1 ;
 break; }
 else { k ^= k & 3;
quadrant = k  ; break ; } } else
 int k& 3;
quadrant = k  + 1 ; }
 else { double
 int remA= k & 3;
 else { k *= k & 3;
quadrant = k & 3 ; } } }
quadrant = k & 3 | 0 ;
quadrant = k &  2 ; } }
 return -k & 3;
 } } }
 } } else { int
 } else { int
quadrant = k &  5 ;
 } } else { double
 else { k |= k & 3;
 else { double
 else {
 else { k >>= k & 3;
 } else { double
quadrant = k  ; }
quadrant = k &  2 ; }
 else { int
quadrant = k  * 4 ; }
quadrant = k &  4 ; }
 k *= k & 3;
quadrant = k & 3 ; } } else
 k ^= k & 3;
quadrant = k  ++ ;
 q *= k & 3;
quadrant = k % 3;
 break;
 ++ k;
 n=3;
 i ++;
 } }
 else { } }
quadrant = k &  1 ; }
 } } } }
quadrant = k  -- ;
quadrant = k >>> 3;
 break k& 3;
 k +=k & 3;
 } k ^= k & 3;
quadrant = k &  5 ; }
 } } }
 } } int
 k >>= k & 3;
 double
 } int
 } else
 } double
 int delta& 3;
 int r& 3;
quadrant = k & 3 ; else
quadrant = k  ; else
quadrant = k & 3; double
quadrant -= k & 3;
 }
 else,
quadrant := k & 3;
