 sourceFileMap.put(sourceName, lastSourceFileIndex);
 sourceMap.put(sourceName, lastSourceFileIndex);
sourceFileMap.put(sourceName);
sourceFileMap.put(sourceName, lastSourceFile);
 put(sourceName, lastSourceFileIndex);
sourceFileMap.put(sourceName, index);
sourceFileMap = null ;
 sourceFileMap.remove(lastSourceFileIndex);
sourceFileMap.put(symbolName, sourceName, lastSourceFileIndex);
sourceFileMap.put(sourceName, lastSourceFileIndex, lastSourceFile);
 sourceFileMap.remove(sourceName);
 sourceFileMap.remove(index);
 sourceFileMap.put(source, lastSourceFileIndex);
 map.put(sourceName, lastSourceFileIndex);
 sourceMap.remove(lastSourceFileIndex);
 sourceFileMap.put(symbolName, lastSourceFileIndex);
 } else { lastSourceFileIndex = sourceFileMap.size(); } else { lastSourceFileIndex = 0 ;
 sourceFileMap.put(symbolSourceName, lastSourceFileIndex);
 } if ( index!= null ) { lastSourceFileIndex = index ; } else { lastSourceFileIndex = 0 ;
 } if ( index!= null ) { lastSourceFileIndex = index ; } else {
 } if ( index!= null ) { lastSourceFileIndex = index ; } else { lastSourceFileIndex = 0 ; }
sourceFileMap = { } ;
sourceFileMap.put(sourceName, index
 } else { lastSourceFileIndex = sourceFileMap.size(); } else { lastSourceFileIndex =
 } else { lastSourceFileIndex = sourceFileMap.size(); } else { lastSourceFileIndex ++ ;
 return index;
 } if ( index!= null ) { lastSourceFileIndex = index ; } else { lastSourceFileIndex = sourceFileMap.size();
 } else { lastSourceFileIndex = sourceFileMap.size(); } } else { lastSourceFileIndex =
 } if ( index!= null ) { lastSourceFileIndex = index ; } else { lastSourceFileIndex = sourceFileMap.size(); }
 } if ( index!= null ) { lastSourceFileIndex = index ; } else { lastSourceFileIndex =
 } if ( index!= null ) { lastSourceFileIndex = index ; } } else {
 } else { lastSourceFileIndex = sourceFileMap.size(); } } else { lastSourceFileIndex = 0 ;
 } if ( index!= null ) { lastSourceFileIndex = index ; } else { lastSourceFileIndex = - 1 ;
 } else { lastSourceFileIndex = sourceFileMap.size(); } } else { lastSourceFileIndex = sourceFileMap.size(); }
 } else { lastSourceFileIndex = sourceFileMap.size(); } } else { lastSourceFileIndex = sourceName ;
sourceFileMap.put(source, index);
sourceFileMap.put(lastSourceFile, sourceName, lastSourceFileIndex);
 } if ( index!= null ) { lastSourceFileIndex = index ; } else { lastSourceFileIndex = - 1 ; }
 } else { lastSourceFileIndex = sourceFileMap.size(); } } else { lastSourceFileIndex = sourceFileMap.size();
 } if ( index!= null ) { lastSourceFileIndex = index ; } else { lastSourceFileIndex = sourceFileMap.size(); } }
 sourceFileMapMap.put(sourceName, lastSourceFileIndex);
 } if ( index!= null ) { lastSourceFileIndex = index ; } else { lastSourceFileIndex ++ ;
 } else { lastSourceFileIndex = sourceFileMap.size(); } } else { lastSourceFileIndex ++ ;
 } if ( index!= null ) { lastSourceFileIndex = index ; } else { lastSourceFileIndex = lastSourceFileIndex ;
 } } else { lastSourceFileIndex = sourceFileMap.size(); } else { lastSourceFileIndex = 0 ;
 } else { lastSourceFileIndex = sourceFileMap.size(); } else { lastSourceFileIndex = 0 ; }
 } } else { lastSourceFileIndex = sourceFileMap.size(); } else { lastSourceFileIndex = 0 ; }
 } if ( index!= null ) { lastSourceFileIndex = index ; } else { lastSourceFileIndex = lastSourceFileMap.size();
sourceFileMap. put ( sourceName, index )
 } if ( index!= null ) { lastSourceFileIndex = index ; } else { lastSourceFileIndex = 0 ; } } else {
 } } else { lastSourceFileIndex = sourceFileMap.size(); } } else { lastSourceFileIndex = 0 ;
 } else { lastSourceFileIndex = sourceFileMap.size(); } } else { lastSourceFile =
 } else { lastSourceFileIndex = sourceFileMap.size(); } else { lastSourceFileIndex = sourceFileMap.size(); }
 } else { lastSourceFileIndex = sourceFileMap.size; } else { lastSourceFileIndex = 0 ;
 } if ( index!= null ) { lastSourceFileIndex = index ;
 } if ( index!= null ) { lastSourceFileIndex = index ; } }
 } } else { lastSourceFileIndex = 0 ; } } else { lastSourceFileIndex = 0 ; } } else { lastSourceFileIndex =
 sourceFileMap = sourceName;
 } else { lastSourceFileIndex = sourceFileMap.size(); } else { lastSourceFileIndex = - 1 ;
 } else { lastSourceFileIndex = sourceFileMap.size(); } } else { lastSourceFileIndex = sourceFileMap.size(); } }
 sourceFileMap. remove ( ) ;
 } else { lastSourceFileIndex = sourceFileMap.size(); } if ( index!= null ) {
 } if ( index!= null ) { lastSourceFileIndex = index ; } else { lastSourceFileIndex = lastSourceFileIndex ; } } else {
sourceFileMap.put(sourceName, lastSourceFileIndex); } else { lastSourceFileIndex = 0 ;
 } if ( index!= null ) { lastSourceFileIndex = index ; } else { lastSourceFileIndex = sourceName ; } }
 if ( index!= null ) { lastSourceFileIndex = index ; } else {
 } else { lastSourceFileIndex = sourceFileMap.size(); } if (index) {
 } } else { lastSourceFileIndex = sourceFileMap.size(); } } else { lastSourceFileIndex = sourceName ;
 } if ( index!= null ) { lastSourceFileIndex = index ; } else { lastSourceFileIndex = lastSourceFile ; }
 } if ( index!= null ) { lastSourceFileIndex = index ; } else { lastSourceFile =
 } if ( index!= null ) { lastSourceFileIndex = index ; } else { lastSourceFileIndex = 0 ; } }
 } if ( index!= null ) { lastSourceFileIndex = index ; } else { lastSourceFileIndex = 0 ; } else {
 } if ( index!= null ) { lastSourceFileIndex = index ; } else { lastSourceFileIndex = lastSourceFileIndex ; }
 if ( index!= null ) { lastSourceFileIndex = index ; } }
 if ( index!= null ) { lastSourceFileIndex = index ; } } else {
 } else { lastSourceFileIndex = sourceFileMap.size(); } if ( index!= null )
 } } else { lastSourceFileIndex = sourceFileMap.size(); } else { lastSourceFileIndex ++ ;
sourceFileMap.put(sourceName, lastSourceFile, lastSourceFileIndex);
 } else { lastSourceFileIndex = sourceFileMap.size(); }
 if ( index!= null ) { lastSourceFileIndex = index ;
 } if ( index!= null ) { lastSourceFileIndex = index ; } else { lastSourceFileIndex = sourceName. length ;
 } } else { lastSourceFileIndex = 0 ; } else { lastSourceFileIndex = 0 ;
 } if ( index!= null ) { lastSourceFileIndex = - 1 ;
 } else { lastSourceFileIndex = -1;
 } if ( index!= null ) { lastSourceFileIndex = index ; } else { lastSourceFileIndex = 0 ; } } } else {
 } else { lastSourceFileIndex = 0 ; } else { lastSourceFileIndex =
 } else { lastSourceFileIndex = sourceFileMap.put(sourceName, lastSourceFileIndex);
sourceFileMap.put(sourceName, lastSourceFileIndex) ; index = null ;
 } else { lastSourceFileIndex =
 } else { sourceFileMap.put(sourceName, lastSourceFileIndex);
 return sourceName;
 } else { lastSourceFileIndex = sourceFileMap.size(); } else { lastSourceFile =
 } else { lastSourceFileIndex = 0 ;
 if ( index!= null ) { lastSourceFileIndex = sourceFileMap. size ;
sourceFileMap.put(sourceName, lastSourceFileIndex); } else { index = null ;
 } else { lastSourceFileIndex = 0 ; } } else {
 } else { lastSourceFileIndex = sourceFileMap.size(); } else { lastSourceFileIndex -- ;
 } if ( index!= null ) { lastSourceFileIndex = index ; } else { index =
 sourceFileMap. clear ( ) ;
 } else { lastSourceFileIndex = 0 ; } else {
sourceFileMap.put(sourceName, lastSourceFileIndex) ; index = - 1 ;
 sourceFileMap. remove ( sourceName )
 } else { lastSourceFileIndex sourceFileMap.put(sourceName, lastSourceFileIndex);
 if ( index!= null ) { lastSourceFileIndex =
 sourceFileMap. put ( sourceName, index;
 } if ( index!= null ) { lastSourceFileIndex = index ; }
 } } else { lastSourceFileIndex = 0 ; } else { lastSourceFileIndex =
 } else { sourceMap.put(sourceName, lastSourceFileIndex);
 } else { lastSourceFileIndex = sourceNameMap.size();
 } } else { lastSourceFileIndex = 0 ; } else { lastSourceFileIndex ++ ;
 sourceFileMap. remove ( sourceName ) ;
 } else { lastSourceFileIndex = sourceFileMap. get ( sourceName ) ;
 } else { lastSourceFileIndex = sourceFileMap.size(); } } else { lastSourceFileIndex = sourceFileMap.size(); } ;
sourceFileMap.put(sourceName, lastSourceFileIndex); } if ( index ) {
 } else { lastSourceFileIndex = sourceFileMap. size ( ) ;
 if ( index!= null ) { lastSourceFileIndex = index ; } else { } }
 if ( index!= null ) { lastSourceFileIndex = index ; }
 sourceFileMap. size ( ) ;
sourceFileMap.put(sourceName, lastSourceFileIndex); } else { lastSourceFileIndex ++ ;
 } if ( index!= null ) { lastSourceFileIndex =
 } else { lastSourceFileIndex = sourceFileMap.size(); } } else { index =
 } else {
 } else { lastSourceFileIndex = 0 ; map.put(sourceName, lastSourceFileIndex);
sourceFileMap.put(sourceName, lastSourceFileIndex); } else { index = 0 ;
 } else { lastSourceFileIndex = 0 ; }
sourceFileMap.put(sourceName, lastSourceFileIndex); } if ( index!= null ) {
 if ( index!= null ) { lastSourceFileIndex = index ;
 sourceFileMap. put ( sourceName, lastSourceFileIndex ) ; }
sourceFileMap.put(sourceName, lastSourceFileIndex) ; } else { index = - 1 ;
sourceFileMap.put(sourceName, lastSourceFileIndex); } } else { lastSourceFileIndex ++ ;
 sourceFileMap.put(sourceFileName, lastSourceFileIndex);
sourceFileMap.put(sourceName, sourceFileMap.size(), index);
 if ( index!= null ) { lastSourceFileIndex = index ; }
 sourceFileMap(index);
sourceFileMap. put ( sourceName, lastSourceFile )
 } else { index = sourceFileMap.put(sourceName, lastSourceFileIndex);
 if ( index!= null ) { lastSourceFileIndex = index ; } } }
 sourceFileMap = sourceName);
 } if ( index!= null ) { sourceMap.put(sourceName, lastSourceFileIndex);
 sourceFileMap.remove(sourceFileName);
 sourceFileMap.put (, lastSourceFileIndex);
 } if ( index!= null ) { lastSourceFileIndex = index ;
sourceFileMap.put(sourceName, lastSourceFileIndex + 1);
 if ( index!= null ) { lastSourceFileIndex = - 1 ;
 } else { lastSourceFileIndex = sourceMap.put(sourceName, lastSourceFileIndex);
 if (index!= null)
sourceFileMap.put(sourceName,  sourceFileMap.size(); lastSourceFileIndex);
 } if ( index!= null ) { lastSourceFileIndex = index + 1 ;
 sourceFileMap.get(sourceName).put(sourceName, lastSourceFileIndex);
 sourceFileMap.size(); return index;
 if ( index!= null ) { sourceFileMap.put(sourceName, lastSourceFileIndex);
 if ( index!= null ) { lastSourceFileIndex = index ; } }
 } if ( index!= null ) { lastSourceFileIndex = index ; } else { lastSourceFileIndex = 0 ; } } }
 } else { lastSourceFileIndex ++ ;
 } else { lastSourceFileIndex = 0 ; } else { lastSourceFileIndex ++ ;
 } else { lastSourceFileIndex = sourceFileMap. size ; } } else {
 sourceFileMap.removeElement(lastSourceFileIndex);
sourceFileMap.put(sourceName, lastSourceFileIndex); } return lastSourceFileIndex ;
 } if ( index!= null ) { lastSourceFileIndex = - 1 ;
 lastSourceFileIndex = 0 ; sourceMap.put(sourceName, lastSourceFileIndex);
 if (index!= null) { lastSourceFile =
sourceFileMap.put(sourceName, lastSourceFileIndex); } if ( index!= null )
 } else { lastSourceFileIndex = - 1 ; }
sourceFileMap.put(sourceName, lastSourceFileIndex); } return index ;
sourceFileMap.put(sourceName, lastSourceFileIndex) ; return index ;
sourceFileMap. put ( sourceName, lastSourceFile ;
 } else { lastSourceFileIndex = map. put(sourceName, lastSourceFileIndex);
 sourceFileIndex = 0;
 if (index!= null) { index =
 } if ( index!= null ) { lastSourceFileIndex = index ; break ;
 if ( index!= null ) { lastSourceFileIndex ++ ;
sourceFileMap.put(sourceName, lastSourceFileIndex); } return sourceName ;
 } else { lastSourceFileIndex = sourceFileMap. get ( sourceName )
 sourceFileMap.get(lastSourceFile).put(sourceName, lastSourceFileIndex);
 } if ( index!= null ) { map.put(sourceName, lastSourceFileIndex);
 } else { lastSourceFileIndex = 0 ; } } else { lastSourceFile ++ ;
 } if ( index!= null ) { lastSourceFileIndex ++ ;
 sourceFileMap.put(sourceName, -lastSourceFileIndex);
 } else { lastSourceFileIndex = sourceFileMap.size(); }
 sourceFileMap.removeKey(lastSourceFileIndex);
 } else { lastSourceFileIndex = - 1 ; } else {
sourceFileMap. put ( sourceName, 0 ) ;
sourceFileMap.put(sourceName, lastSourceFileIndex) ; index = lastSourceFileIndex ;
 lastSourceFileIndex = 0 ; sourceFileMap.put(sourceName, lastSourceFileIndex);
 } else { lastSourceFileIndex = sourceFileMap.size(); } } else { lastSourceFileIndex = sourceFileMap.size(); ;
 sourceFileMap. add ( sourceName ) ;
 } if ( index!= null ) { lastSourceFileIndex = index ; } } }
 sourceFileMap.add (, lastSourceFileIndex);
 if ( index!= null ) { lastSourceFileIndex = index ; break ;
 } else { sourceFileMap.remove(lastSourceFileIndex);
 lastSourceFileIndex = sourceFileMap.put(sourceName, lastSourceFileIndex);
 sourceFileIndex = -1;
 sourceFileMap.add(index);
sourceFileMap.put(sourceName, lastSourceFileIndex) ; } else { sourceFileIndex = 0 ;
 } else { lastSourceFileIndex = sourceFileMap.size(); } }
 sourceFileMap.remove sourceName;
 if (index) {
sourceFileMap.put(sourceName, lastSourceFileIndex); } } else { lastSourceFileIndex = 0
sourceFileMap.put(sourceName, lastSourceFileIndex, lastSourceFileIndex);
sourceFileMap.put(sourceName,  sourceFileMap.size(), lastSourceFileIndex);
 if (index!= null) {
 if ( index!= null ) { sourceMap.put(sourceName, lastSourceFileIndex);
 } else { lastSourceFileIndex = 0 ; } } else { lastSourceFileIndex ;
 } if ( index!= null ) { lastSourceFileIndex = index ; } return
sourceFileMap.put(sourceName, lastSourceFileIndex); } }
 sourceMap.add(lastSourceFileIndex);
 sourceFileMap.set(symbolSourceName, lastSourceFileIndex);
 lastSourceFileIndex = 0 ; map. put(sourceName, lastSourceFileIndex);
 } else { lastSourceFileIndex = sourceFileMap. size ;
 } else { lastSourceFileIndex = fileMap.put(sourceName, lastSourceFileIndex);
 sourceFileMap.remove(sourceName;
 sourceFileMap. add ( sourceName )
 } else { lastSourceFileIndex = -1;
 lastSourceFileIndex = 0;
 originalFileMap.put(sourceName, index);
 } else { lastSourceFileIndex = sourceFileIndex;
 sourceFileMap.put(name, lastSourceFileIndex);
 } else { lastSourceFileIndex = 0 ; } } else { index =
sourceFileMap.put(sourceName, lastSourceFile + lastSourceFileIndex);
 sourceFileMap. put ( sourceName, index ) ; } }
sourceFileMap.put(sourceName, sourceFileMap.size(), lastSourceFile);
sourceFileMap.put(sourceName,  sourceFileMap.get(lastSourceFileIndex));
 sourceFileMap. size ( sourceName);
 } else { lastSourceFileIndexMap.put(sourceName, lastSourceFileIndex);
 sourceFileMap.size(); map.put(sourceName, lastSourceFileIndex);
 } sourceFileMap.put(sourceName, lastSourceFileIndex);
 sourceFileMap.put(this.sourceName, lastSourceFileIndex);
sourceFileMap.put(sourceName, lastSourceFileIndex) ; index ++ ;
 sourceName = null;
 if (index!= null) { }
 sourceFileMap. put ( ), index;
 sourceFileMap.get(0).put(sourceName, lastSourceFileIndex);
 sourceFileMap[index]. put(sourceName, lastSourceFileIndex);
sourceFileMap. put ( sourceName, lastSourceFileIndex ;
 sourceFileMap.removeFirst(lastSourceFileIndex);
 sourceFileMap.remove(lastSourceFileName);
 } else { lastSourceFileIndex = 0;
 sourceFileMap.addFirst(lastSourceFileIndex);
sourceFileMap.put(sourceName, lastSourceFileIndex) } else { lastSourceFileIndex = 0 ;
sourceFileMap.put(sourceName, sourceFileMap, lastSourceFileIndex);
 lastSourceFileIndex = sourceMap.put(sourceName, lastSourceFileIndex);
 sourceFileMap. size ( sourceName )
 sourceFileMap. set ( sourceName ) ;
 } else { lastSourceFileIndex =Map.put(sourceName, lastSourceFileIndex);
sourceFileMap.put(sourceName, lastSourceFileIndex); } else { index ++ ;
 sourceFileMap.setFirst(sourceName, lastSourceFileIndex);
sourceFileMap.put(sourceName, lastSourceFileIndex, sourceFileMap.size);
 sourceFileMap.remove(symbolName);
sourceFileMap.put(sourceName, 0xFFFD);
 sourceFileMap.put(sourcesName, lastSourceFileIndex);
 } else { lastSourceFileIndex = - 1 ; } }
sourceFileMap.put(sourceName, lastSourceFile); } if ( index ) {
sourceFileMap.put(sourceName, index); return index ;
 newSourceFileIndex = sourceFileMap.size(););
sourceFileMap = null
 sourceFileMap.unset(lastSourceFileIndex);
 sourceFileIndex = sourceName;
sourceFileMap.put(sourceName, lastSourceFileIndex) } else { lastSourceFileIndex = - 1 ;
 sourceFileMap.size = 0;
 if ( index!= null ) { map.put(sourceName, lastSourceFileIndex);
 sourceFileMap.put(sourceNameString, lastSourceFileIndex);
 sourceFileMap = [ ];
 sourceFileMap.put(last_sourceName, lastSourceFileIndex);
sourceFileMap.put(sourceName, sourceFileMap.size(sourceName));
 } else { lastSourceFileIndex = sourceName;
sourceFileMap.put(sourceName, lastSourceFileIndex, sourceFileMap.size - 1);
 source. put(sourceName, lastSourceFileIndex);
 } else { lastSourceFileIndex = map. get(sourceName, lastSourceFileIndex);
 } else { lastSourceFileIndex = 0xFFFF ;
 sourceFileMap. remove ( ) ;
 map.put(source, lastSourceFileIndex);
sourceFileMap.put(sourceName, sourceFileMap.size(), sourceName);
sourceFileMap.put(sourceName, lastSourceFileIndex); } lastSourceFileIndex ++ ;
 sourceFileMap[lastSourceFile].put(sourceName, lastSourceFileIndex);
 } else { lastSourceFileIndex = sourceName ; } }
 } } else { sourceFileMap.put(sourceName, lastSourceFileIndex);
sourceFileMap.put(sourceName, lastSourceFileIndex); } } else { lastSourceFile ++ ;
sourceFileMap.put(sourceName, lastSourceFileIndex); } } else { index = 0 ;
 } sourceFileMapMap.put(sourceName, lastSourceFileIndex);
 sourceFileMap.add(lastSourceFileIndex);
 sourceFileMap.put(filename,lastSourceFileIndex);
 sourceFileMap.put(SourceFile, lastSourceFileIndex);
sourceFileMap.put(sourceName, lastSourceFileIndex, sourceFileMap[index]);
sourceFileMap.put(sourceName, 0xFFFFFFFF);
sourceFileMap.put(sourceName, lastSourceFileIndex, sourceFileMap.size(), index);
 sourceFileMap.size(); break;
 sourceFileMap.put(symbolName.sourceName, lastSourceFileIndex);
sourceFileMap.put(sourceName, lastSourceFileIndex); } } else { return 0 ;
 newSourceFileIndex = sourceMap.put(sourceName, lastSourceFileIndex);
 } else { } sourceFileMap.put(sourceName, lastSourceFileIndex);
 sourceFileMap.put(last-sourceName, lastSourceFileIndex);
 sourceFileMap.setKey(sourceName, lastSourceFileIndex);
sourceFileMap.put(sourceName,  lastSourceFile); } else { index = null ;
 sourceFileMap.removeSourceName;
 sourceFileMap[lastSourceFileIndex].put(sourceName, lastSourceFileIndex);
 newSourceFileIndex = sourceFileMap.size());
 sourceFileMap.put(symbol sourceName, lastSourceFileIndex);
sourceFileMap.put(sourceName, lastSourceFileIndex) ; lastSourceFileIndex ++ ;
 sourceFileMap. size = index ;
 } else { index =
sourceFileMap.put(sourceName,  sourceFileMap.size()); index = null ;
sourceFileMap.put(sourceName, sourceFileMap.size(); break ;
sourceFileMap.put(sourceName, lastSourceFileIndex, sourceFileMap.size());
sourceFileMap.put(sourceName, lastSourceFile); } return sourceName ;
 sourceFileMap.put(sourceName + 1, lastSourceFileIndex);
sourceFileMap.put(sourceName, lastSourceFileIndex); } else { index = 1 ;
 sourceFileMap.get(index).put(sourceName, lastSourceFileIndex);
 sourceFileIndex(lastSourceFileIndex);
 } else { sourceFileMap.setSize(lastSourceFileIndex);
sourceFileMap.remove(sourceName); }
sourceFileMap.put(sourceName, lastSourceFileIndex); } return sourceIndex ;
sourceFileMap.put(sourceName, sourceFileMap.size(), 0);
 sourceFileMap. add ( index )
 } else { lastSourceFileIndex = 0 ; } }
sourceFileMap.put(sourceName, lastSourceFileIndex); lastSourceFileIndex = index ;
sourceFileMap.put(sourceName index);
 newSourceFileFileMap.put(sourceName, lastSourceFileIndex);
sourceFileMap.put(sourceName, 0xFFFFFFFD);
 sourceFileMap(lastSourceFileIndex);
sourceFileMap.put(null);
 sourceFileMap.put({source},lastSourceFileIndex);
 lastSourceFile = null;
sourceFileMap.put(sourceName, lastSourceFileIndex) } else { index = null ;
sourceFileMap.put(sourceName, lastSourceFileIndex) ; return lastSourceFileIndex ;
 sourceFileMap.put(sourceName, ++lastSourceFileIndex);
 index =
 sourceFileMap.sizeMap.put(sourceName, lastSourceFileIndex);
 originalFileMap.remove(sourceName);
 sourceFileMap.set(source,lastSourceFileIndex);
 } } else { lastSourceFileIndex = (lastSourceFileIndex);
 sourceFileMap.setById(sourceName, lastSourceFileIndex);
sourceFileMap.put(sourceName, lastSourceFileIndex); } index = null ;
 originalSourceFileIndex = sourceMap.get(lastSourceFileIndex);
 sourceFileMap.set().put(sourceName, lastSourceFileIndex);
sourceFileMap.put(sourceName, sourceFileMap.size(index);
 sourceFileMap.set (, lastSourceFileIndex);
 } else { lastSourceFileIndex = sourceFileMap.size(); } } else { return
sourceFileMap.put(symbolName, lastSourceFile, sourceName, lastSourceFileIndex);
 sourceFileMap.clear(index);
 sourceFileMap.size = 1;
sourceFileMap.put(sourceName, null, lastSourceFileIndex);
 } if ( index!= null ) { lastSourceFileIndex = index ; } else { }
 sourceFileMap.clear(lastSourceFileIndex);
sourceFileMap.put(sourceName, index); } } }
sourceFileMap.put(sourceName, lastSourceFileIndex) ; index = sourceName ;
 sourceFileMap = (index);
sourceFileMap.put(sourceName, lastSourceFileIndex) } else { lastSourceFileIndex ++ ;
 } else { sourceFileMap. put ( source, lastSourceFileIndex);
 return (lastSourceFileIndex);
 } } else { sourceMap.put(sourceName, lastSourceFileIndex);
sourceFileMap.put(sourceName, sourceIndex);
 sourceFileMapping.put(sourceName, lastSourceFileIndex);
sourceFileMap.put(sourceName, 0xFFFEFFFEFF);
sourceFileMap.put(sourceName, lastSourceFileIndex, sourceFileMap.size(index);
 newSourceFileIndex = sourceMap.get(lastSourceFileIndex);
 lastSourceFileIndex sourceFileMap.put(sourceName, lastSourceFileIndex);
sourceFileMap.put(sourceName, lastSourceFileIndex, sourceFileMap, sourceName);
 map.putSourceName, lastSourceFileIndex);
sourceFileMap.put(sourceName, -1SourceFileIndex);
 } else { lastSourceFileIndex = 0xFFFF;
 sourceFileMap.size().put(sourceName, lastSourceFileIndex);
 sourceFileMap.put(symbolName).sourceName, lastSourceFileIndex);
 sourceFileMap.set(sourceName, lastSourceFileIndex);
sourceFileMap.put(sourceName, lastSourceFileIndex, sourceFileMap.size(?));
sourceFileMap.put(sourceName, lastSourceFileIndex); } if ( index!= null ) { }
 map(sourceName, lastSourceFileIndex);
 sourceFileMap. size = 0;
sourceFileMap.put(sourceName, lastSourceFileIndex, sourceName, lastSourceFileIndex);
 sourceFilePut(sourceName, lastSourceFileIndex);
 sourceFileMap.delete(lastSourceFileIndex);
sourceFileMap.put(sourceName, sourceFileMap.size(sourceFile));
sourceFileMap.put(index);
sourceFileMap.put(sourceName, lastSourceFileIndex + 1); }
sourceFileMap.put(sourceName, lastSourceFileIndex, sourceFileMap, lastSourceFile);
 sourceFileMap.setByName(sourceName, lastSourceFileIndex);
sourceFileMap. set ( sourceName, index);
 sourceFileMap.put(lastSourceFile.sourceName, lastSourceFileIndex);
sourceFileMap.put(sourceName, -1SourceIndex);
sourceFileMap.put(sourceName, 0xFF00FF);
 originalSourceFileMap.put(sourceName, lastSourceFileIndex);
 sourceFileMap.remove(source);
sourceFileMap.put(sourceName, 0xFFFFFFF);
 newSourceFileMap.put(sourceName, lastSourceFileIndex);
sourceFileMap.put null;
 index = null;
 } } else {
 lastSourceFileIndex = 0;
 index = 0;
 putSourceName, lastSourceFileIndex);
 sourceFileMap.delete(index);
 newSourceFileIndex = sourceName;
.put(sourceName, lastSourceFileIndex);
 sourceFileMap = {index);
sourceFileMap.put(sourceName, lastSourceFileIndex) ; index = 0 ;
 return sourceName);
sourceFileMap.put(sourceName, lastSourceFileId, lastSourceFileIndex);
sourceFileMap.put(sourceName, lastSourceFile, index);
sourceFileMap.put(sourceName, sourceFileMap, lastSourceFile);
sourceFileMap.put(sourceName, sourceFileMap.size());
sourceFileMap.put ( sourceName, sourceName);
sourceFileMap.put(sourceName, -1, index);
 lastSourceFileIndex = 0 ; source. put(sourceName, lastSourceFileIndex);
 sourceFileIndex = 0;
 return sourceIndex;
sourceFileMap.put(symbolName, lastSourceFileIndex, sourceName, lastSourceFileIndex);
sourceFileMap.put(sourceName, lastSourceFile + 1, sourceName, lastSourceFileIndex);
 }
 if (index)
 lastSourceFileIndex = sourceName;
 newSourceFileIndex(index);
sourceFileMap.put(symbolName, lastSourceFileId, sourceName, lastSourceFileIndex);
sourceFileMap.put(sourceName, lastSourceFileIndex, sourceFileMap[0]);
sourceFileMap.put(sourceName, lastSourceFileIndex) ; return sourceName ;
 } else { lastSourceFile =
 sourceFileIndexMap.put(sourceName, lastSourceFileIndex);
 set(sourceName, lastSourceFileIndex);
 lastSourceFile = sourceMap.put(sourceName, lastSourceFileIndex);
 return lastSourceFileIndex;
 sourceFileMap.size.put(sourceName, lastSourceFileIndex);
 sourceFileNameMap.put(sourceName, lastSourceFileIndex);
sourceFileMap.put(sourceName, lastSourceFile + 1, lastSourceFileIndex);
sourceFileMap.put(sourceName, lastSourceFileIndex) return index ;
 index = -1;
 sourceNameFileMap.put(sourceName, lastSourceFileIndex);
 return (index);
sourceFileMap.put(sourceName, lastSourceFileIndex) ; break ;
 } sourceFileMap. put ( source, lastSourceFileIndex);
 lastSourceFileIndex =
 sourceFileMap.put(compiled_sourceName, lastSourceFileIndex);
sourceFileMap.put(sourceName, (int) index, lastSourceFileIndex);
 sourceFileMap.map.put(sourceName, lastSourceFileIndex);
sourceFileMap.put(sourceName, originalSourceFileIndex, lastSourceFileIndex);
 sourceFileMap.pop(lastSourceFileIndex);
 return 0;
 sourceMapPut(sourceName, lastSourceFileIndex);
sourceFileMap.put(sourceName, sourceFileMap.emptyMap);
 sourceFileMap.put, lastSourceFileIndex);
sourceFileMap.put(sourceName + ' ', lastSourceFileIndex);
 index = 0 ; sourceMap.put(sourceName, lastSourceFileIndex);
 lastSourceFile = 0;
 newSourceFileIndex = 0;
sourceFileMap.put(symbolName, originalSourceFileIndex, sourceName, lastSourceFileIndex);
sourceFileMap.put(sourceName); }
 sourceFileAdd(lastSourceFileIndex);
 sourceFileMap(source);
 sourceFileMap.setByKey(sourceName, lastSourceFileIndex);
sourceFileMap.put(symbolFileName, sourceName, lastSourceFileIndex);
sourceFileMap. put ( lastSourceFile ) ;
 } } sourceFileMap.put(sourceName, lastSourceFileIndex);
 originalSourceFileIndex = 0;
 return (sourceName);
sourceFileMap.put(sourceName, lastSourceFileIndex, lastSourceFile + 1);
sourceFileMap.put(fileName, lastSourceFileIndex);
sourceFileMap.put(sourceName, newSourceFileIndex);
 map.put sourceName, lastSourceFileIndex);
sourceFileMap.put(sourceName, lastSourceFileIndex) ; } } }
 return (lastSourceFile);
 sourceName = "";
sourceFileMap.put(symbolName, lastSourceFileIndex, lastSourceFileIndex);
sourceFileMap.put(sourceName, lastSourceFile, sourceName, lastSourceFileIndex);
sourceFileMap.put(sourceName, lastSourceFileIndex) ; index -- ;
sourceFileMap.put(sourceName, lastSourceFileIndex, lastSourceFileIndex + 1);
 cache (sourceName, lastSourceFileIndex);
sourceFileMap.put(sourceName, -1);
 } else { fileMap.put(sourceName, lastSourceFileIndex);
sourceFileMap.put(sourceName, newSourceFileName, lastSourceFileIndex);
sourceFileMap.put(symbolName, originalSourceFileId, sourceName, lastSourceFileIndex);
 sourceFileMap.sourceMap.put(sourceName, lastSourceFileIndex);
 sourceFileMapRemove(lastSourceFileIndex);
sourceFileMap.put(sourceName, originalSourceFileId, lastSourceFileIndex);
sourceFileMap.put(sourceName, sourceFile);
sourceFileMap.put(sourceName, lastSourceFileId, sourceName, lastSourceFileIndex);
sourceFileMap.put(sourceName,);
sourceFileMap.put(sourceName + ".", lastSourceFileIndex);
sourceFileMap = {
sourceFileMap.put(resourceName, lastSourceFileIndex);
 sourceFileMap(in);
 return lastSourceFile);
sourceFileMap.put(sourceName, null);
sourceFileMap.put(sourceName, lastSourceFileName, lastSourceFileIndex);
 sourceMap.clear(lastSourceFileIndex);
sourceFileMap.put(symbolSourceName, sourceName, lastSourceFileIndex);
sourceFileMap.put(sourceName, lastSourceFileIndex, originalSourceFileIndex);
 index = 0;
sourceFileMap.put(symbolName, lastSourceFileId, lastSourceFileIndex);
sourceFileMap.put(lastSourceFile, lastSourceFileIndex);
 fileMap.put(sourceName, lastSourceFileIndex);
sourceFileMap = newMap ;
sourceFileMap.put(sourceName, lastSourceFileIndex, 0xFFFFFFFD);
 sourceFileIndex(index);
 sourceMap.delete(lastSourceFileIndex);
sourceFileMap.put(sourceName + lastSourceFile, lastSourceFileIndex);
sourceFileMap.put(sourceName + ":", lastSourceFileIndex);
 return index);
sourceFileMap.put(symbolicName, sourceName, lastSourceFileIndex);
 map.add(lastSourceFileIndex);
 index = sourceName);
sourceFileMap.put(symbolName, index, sourceName, lastSourceFileIndex);
sourceFileMap = null ; }
 sourceFile.put(sourceName, lastSourceFileIndex);
sourceFileMap.put(lastSourceFile, sourceName);
 newSourceFile(source);
sourceFileMap.put(sourceName, lastSourceFileIndex, 0xFFFFFFF);
sourceFileMap.put(sourceName, lastSourceFileIndex) return sourceName ;
sourceFileMap.put(symbolName), lastSourceFile, sourceName, lastSourceFileIndex);
sourceFileMap.put({ sourceName});
sourceFileMap.put(sourceName, 0xFFFF);
sourceFileMap.put(sourceName, lastSourceFileIndex, 0xFFFEFF);
 newSourceFile(index);
 } if (index)
 return -(lastSourceFileIndex);
sourceFileMap.put(symbolName + 1, sourceName, lastSourceFileIndex);
 return -1;
sourceFileMap.put(source);
 lastSourceFile = fileMap.put(sourceName, lastSourceFileIndex);
sourceFileMap.put(symbolName, 0, sourceName, lastSourceFileIndex);
sourceFileMap.put index;
sourceFileMap.put(sourceName, lastSourceFileIndex, sourceFileIndex);
sourceFileMap.remove index;
 putLastSourceFile, lastSourceFileIndex);
 cacheSource(sourceName, lastSourceFileIndex);
sourceFileMap.put(sourceName, originalSourceFileIndex, sourceName, lastSourceFileIndex);
 index.set(lastSourceFileIndex);
sourceFileMap.put(index, sourceName, lastSourceFileIndex);
sourceFileMap.put(sourceName, lastSourceFileIndex, index);
sourceFileMap.put(symbolSourceId, sourceName, lastSourceFileIndex);
sourceFileMap.put(symbolName, null, sourceName, lastSourceFileIndex);
sourceFileMap.put(sourceName, originalSourceFileIndex);
sourceFileMap.put(symbolSourceFile, sourceName, lastSourceFileIndex);
sourceFileMap.put(sourceName, lastSourceFileIndex) break ;
sourceFileMap.put(sourceName, lastSourceFileIndex, 0x00);
sourceFileMap.put(sourceName, lastSourceFileIndex) + 1;
sourceFileMap.size(); }
 return lastSourceFile;
 index(index);
 sourcesMap.put(sourceName, lastSourceFileIndex);
sourceFileMap.put(fileName, lastSourceFile);
 sourceFileMap.add(sourceName, lastSourceFileIndex);
sourceFileMap.put(sourceName, lastSourceFileIndex, 0xFFFD);
 originalFileMap.put(sourceName, lastSourceFileIndex);
sourceFileMap.put(sourceName, lastSourceFileIndex, originalFileIndex);
sourceFileMap.put(sourceName, lastSourceFileIndex, lastSourceFile - 1);
sourceFileMap ++ ;
 return 0);
 sourceName(lastSourceFileIndex);
sourceFileMap.put(sourceName, lastSourceFileIndex, 0);
sourceFileMap.put(symbolicName, lastSourceFileIndex);
 setSourceFile(lastSourceFileIndex);
 mapSourceName, lastSourceFileIndex);
 setSource(sourceName, lastSourceFileIndex);
sourceFileMap.put(sourceName, lastSourceFileIndex, newSourceFileIndex);
 setMap(sourceName, lastSourceFileIndex);
 put(source, lastSourceFileIndex);
sourceFileMap.put(name, index);
sourceFileMap.put({ index });
 lastSourceFile =
 return floor(lastSourceFileIndex);
 return -1);
 } else { index++;
sourceFileMap.put(symbolSourceFile, lastSourceFileIndex);
sourceFileMap.put(sourceName, lastSourceFileIndex, newSourceFileName);
 index = (lastSourceFileIndex);
sourceFileMap.put(sourceName null);
 map(source, lastSourceFileIndex);
 setSourceFile, lastSourceFileIndex);
sourceFileMap.put(sourceNameIndex);
sourceFileMap = map ;
sourceFileMap.put(0, sourceName, lastSourceFileIndex);
 sourceFile(sourceName, lastSourceFileIndex);
 setSource, lastSourceFileIndex);
sourceFileMap.put(sourceName, 1);
sourceFileMap.put(in);
sourceFileMap.reset();
sourceFileMap.putIndex();
sourceFileMap.put(sourceName, lastSourceFileIndex, null);
 putIndex, lastSourceFileIndex);
sourceFileMap.put ();
 recycle(lastSourceFileIndex);
sourceFileMap.clear(); }
 initialize(lastSourceFileIndex);
sourceFileMap.put(sourceName(), lastSourceFileIndex);
sourceFileMap.put(currentSourceFile, sourceName, lastSourceFileIndex);
sourceFileMap.put(sourceName,  0x00);
 add(lastSourceFileIndex);
 return (-lastSourceFileIndex);
sourceFileMap = map
 if (null
sourceFileMap.remove()();
Map.put(sourceName, lastSourceFileIndex);
 putSource, lastSourceFileIndex);
sourceFileMap.put(symbolFile, sourceName, lastSourceFileIndex);
 if ()
sourceFileMap.put(sourceName, lastSourceFileIndex, sourceName);
 -1);
sourceFileMap.put(nil);
sourceFileMap.put(SymbolName, sourceName, lastSourceFileIndex);
 if index {
 this.
sourceFileMap.put(LastSourceFile, sourceName, lastSourceFileIndex);
 put (, lastSourceFileIndex);
sourceFileMap.pop();
sourceFileMap.put(symbolPath, sourceName, lastSourceFileIndex);
 return 1;
sourceFileMap = undefined ;
sourceFileMap = "" ;
sourceFileMap.put(sourceName, sourceName, lastSourceFileIndex);
 sources.put(sourceName, lastSourceFileIndex);
 sourceMap(sourceName, lastSourceFileIndex);
sourceFileMap.put(symbolMap, sourceName, lastSourceFileIndex);
 file.put(sourceName, lastSourceFileIndex);
sourceFileMap.put(sourceName), index);
sourceFileMap.put(sourceName, firstSourceFileIndex);
sourceFileMap.put(sourceName, lastSourceFileIndex, -1);
sourceFileMap.put(SourceName);
sourceFileMap.put(); }
 index++;
 } return
 return 1);
 } }
sourceFileMap.put(sourceName, lastSourceFileIndex) return ;
sourceFileMap.put(sourceName, lastSourceFileIndex, newSourceFile);
 sourceFilesMap.put(sourceName, lastSourceFileIndex);
sourceFileMap.put(sourceName, lastSourceFileIndex) } }
sourceFileMap.put(null, sourceName, lastSourceFileIndex);
 inputFileMap.put(sourceName, lastSourceFileIndex);
 sourceNameMap.put(sourceName, lastSourceFileIndex);
SourceMap.put(sourceName, lastSourceFileIndex);
 add(sourceName, lastSourceFileIndex);
 return null;
sourceFileMap.put(currentSourceFile);
sourceFileMap.put(source, sourceName, lastSourceFileIndex);
 store(sourceName, lastSourceFileIndex);
sourceFileMap.put(sourceName, lastSourceFileIndex, 1);
sourceFileMap.put(sourceName, newSourceFile);
sourceFileMap.put(sourceName, latestSourceFile);
 return
 sourceMapMap.put(sourceName, lastSourceFileIndex);
sourceFileMap.put(1, sourceName, lastSourceFileIndex);
sourceFileMap.put(sourceName, lastSourceFileIndex, "");
sourceFileMap.put(sourceName, lastSourceFileIndex; }
sourceFileMap.put(0);
sourceFileMap.put(SOURCE, lastSourceFileIndex);
sourceFileMap.put(SourceName, lastSourceFileIndex);
 {
sourceFileMap.put(sourceName, "");
