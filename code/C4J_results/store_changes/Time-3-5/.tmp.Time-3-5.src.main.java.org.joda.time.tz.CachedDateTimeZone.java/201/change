return iNextInfo.getOffset(millis);
return iNextInfo.getOffset(iPeriodStart);
 return iNextInfo.getOffset(millis;
return  getOffset(millis);
 return iNextInfo.offset(millis);
 return iNextInfo.iOffset;
 return iInfo.getOffset(millis);
 return iNextInfo(millis);
return iNextInfo.offset;
 return iNextInfo.iZoneRef.getOffset(millis);
 return info.getOffset(millis);
 return iNextInfo.getOffset();
 return (int)iNextInfo.getOffset(millis);
 return 0;
 return iStandardOffset;
 return iOffset + iNextInfo.getOffset(millis);
 return iNextInfo.iPeriodStart.getOffset(millis);
 return iOffset(millis);
 return iNextInfo.iStandardOffset;
 return iNextInfo.getOffset(mill);
 return millis);
 return iNextInfo.getOffset(millis); }
return  millis ;
 return iNextInfo.getOffset(ZoneRef.getOffset(millis);
 return iNextInfo.getOffset());
 return iPeriodStart;
 return iOffset ;
 } public int getOffset(long millis) { if (iNextInfo == null || millis < iOffset) {
 return iNextInfo.getOffset(millis); return iOffset;
 } public int getOffset(long millis) { if (iNextInfo == null || millis < iNextInfo.offset)
 return iNextZoneRef.getOffset(millis);
 } public int getOffset(long millis) { if (iNextInfo == null || millis < 0) {
 } public int getOffset(long millis) { if (iNextInfo == null || millis < iNextInfo.iOffset)
 return iNextInfo.getOffset(...);
 } public int getOffset(long millis) { if (iNextInfo)
 } public int getOffset(long millis) { if (iNextInfo == null || millis) {
 } public int getOffset(long millis) { if (iNextInfo == null || millis < 0)
 } public int getOffset(long millis) { if (iNextInfo) {
 public int getOffset(long millis) { if (iNextInfo == null || millis < 0) {
 } public int getOffset(long millis) { if (iNextInfo == null || millis < iNextInfoOffset)
 else { iOffset = iZoneRef. getOffset(iPeriodStart); } return iOffset ;
 return iNextInfo.getOffset(0);
 return iNextInfo.getOffsetOffset(millis);
 return iNextInfo.getOffset(millis); } }
 return iNextInfo.getOffset(millis, iOffset);
 else if (iNextInfo == null || millis < iNextInfo.iPeriodStart) { return iOffset ; } else {
 else if (iNextInfo == null || millis < iNextInfo.iPeriodStart) { return 0 ; }
 public int getOffset(long millis) {
 public int getOffset(long millis) { if (iNextInfo == null || millis) {
 else if (iNextInfo == null || millis < iNextInfo.iPeriodEnd) { return iStandardOffset ; }
 } public int getOffset(long millis) { if (iNextInfo!= null)
 } public int getOffset(long millis) { if (iNextInfo == null || millis < iNextInfo) {
 return iOffset + millis ;
 } public int getOffset(long millis) { if (iNextInfo == null || millis < iNextOffset) {
 public int getOffset(long) {
 } public int getOffset(long millis) { if (iNextInfo == null)
 return iOffset + (int)iNextInfo.getOffset(millis);
 } public int getOffset(long millis) { if (iNextInfo == null) {
 else { iOffset = iZoneRef. getOffset ( iPeriodStart ) ; }
 else { iOffset = iZoneRef. getOffset(iPeriodStart); } return iOffset ; } public int iOffset() {
 } public int getOffset(long millis) { if (iNextInfo == null || millis > 0) {
 public int getOffset(long millis) { if (iNextInfo == null || millis < 0)
 return iNextInfo.iPeriodEnd.getOffset(millis);
 } public int getOffset(long millis) { if (iNextInfo == null || millis > 0)
 } public int getOffset(long millis) { if (iNextInfo == null || millis < iNextInfo.offset) {
 return iNextInfo.getOffsetKey(millis);
 return iNextInfo.iZone.getOffset(millis);
 return offset(millis);
 public int getOffset(long millis) { if (iNextInfo == null) {
 } public int getOffset(long millis) { if (iNextInfo!= null) {
 else if (iNextInfo == null || millis < iNextInfo.iPeriodStart) { return iOffset ; } else
 return iNextInfo.getOffset(ms);
 return iNextInfo.getOffsetInt(millis);
 return iNextInfo.getOffset(200000);
 else if (iNextInfo == null || millis < iNextInfo.iPeriodStart) { return iStandardOffset ; }
 else if (iNextInfo == null || millis < iNextInfo.iPeriodStart) { return iOffset ; }
 public int getOffset(long millis) { if (iNextInfo) {
 public int getOffset(long millis) { if (iNextInfo)
return iNextInfo.getOffset(millis) + iOffset;
 public int getOffset(long millis) { if (iNextInfo == null) return 0;
 } public int getOffset(long millis) { if (iNextInfo == null) return 0;
return iNextInfo.getOffset(millis); } return iNameKey ;
 public int getOffset(long millis) { if (iNextInfo == null)
 else if (iNextInfo == null || millis < iNextInfo.iPeriodStart) { return -1; }
return iNextInfo.getOffset(millis); return iOffset ; }
return  iNextInfo.getOffset(iOffset)(millis);
 else { iOffset = iZoneRef. getOffset(iPeriodStart); } return iOffset ; } else {
 } public int getOffset(long millis) {
 else { return iOffset ; } } public int getOffset(long millis) {
 public int getOffset(long millis) { if (iNextInfo!= null)
 else { iOffset = iZoneRef. getOffset(iPeriodStart); } return iOffset ; } } else {
return iNextInfo.getOffset(millis) + iStandardOffset;
 return iNextInfo.getOffset(zone).getOffset(millis);
 return iZoneRef. getOffset ( iPeriodStart);
 return iNextInfo.getPeriodOffset(millis);
 return iNextInfo.getOffset(millis); } return info ;
 return iNextInfo.getOffset(?);
return iNextInfo.getOffset(iOffset + iStandardOffset);
 return iOffset - iNextInfo.getOffset(millis);
 return iInfo.offset(millis);
 return iNextInfo.getOffset(micro);
 return iNextInfo.getOffset(millis); } } ;
 return iOffset + 1 ;
 return iNextInfo.iDefaultOffset;
 return iNextInfo.getOffset(millis); } } } }
 return (millis);
 return iNextInfo.getIntervalOffset(millis);
 else { iOffset = iZoneRef. getOffset(iPeriodStart); } }
 return iNextInfo.getOffsetFromZone(millis);
 return iNextInfo.iPeriodInfo.getOffset(millis);
 else { iOffset = iZoneRef. getOffset ( iPeriodStart ) ;
 return iNameKey+iNextInfo.getOffset(millis);
 else if (iNextInfo == null || millis < iOffset) {
return iNextInfo.getOffset(iOffset, millis);
 return iNextInfo.getOffset(1000);
 return iNextInfo.getOffset(millis); return 0;
 } public int getOffset(long millis) { return iOffset ; }
 } public int getOffset(long millis) { if (iOffset)
 return iNextInfo.iZoneRef().getOffset(millis);
 else { iOffset = iZoneRef. getOffset(millis); } return iOffset ; } else {
 return iOffset ; }
 else { iOffset = iZoneRef. getOffset(iPeriodStart); } } else {
 public int getOffset(long millis) { return iOffset ; }
 return iNextInfo.getOffset(0).getOffset(millis);
 public int getOffset(long millis) { if (iOffset == 0)
 } public int getOffset(long millis) { if (iNextInfo == null) { return }
 public int getOffset(long millis) { if (iNextInfo == null) { return }
 } public int getOffset(long) {
 return iZoneRef. getOffset(millis);
 public int getOffset(long millis)
 return iNextInfo.getOffsetInfo(millis);
 return iNextInfo.getOffset($);
 else { iOffset = iZoneRef. getOffset ( millis ) ; } return iOffset ; } }
 return iNextInfo.getOffset(();
 return iNextInfo.getOffsetValue(millis);
 return iOffset ; } return (int)iNextInfo.getOffset(millis);
 else if (iNextInfo == null || millis < iZoneRef) {
 else { iOffset = iZoneRef. getOffset(iPeriodStart); } return iOffset ; } }
return iNextInfo.getOffset(millis); } return iOffset ; }
 return iNextInfo.getOffset(millis) + 1;
return iNextInfo ; }
 return iNextInfo.getOffset(_);
 public int getOffset(long millis) { if (iNextInfo == null) { return ;
 return iNextNextInfo.getOffset(millis);
return  iNextInfo.getOffsetForPeriodStart(millis);
 return iNextInfo.zoneRef.getOffset(millis);
 return iOffset ; } private int iOffset=iNextInfo.getOffset(millis);
 return iNextInfo.iOffset -iNextInfo.getOffset(millis);
return  iNextInfo.getNameKey().getOffset(millis);
 return iNextInfo.info.getOffset(millis);
return iNextInfo.getOffset(millis); } return iStandardOffset ;
 else if (iOffset == Integer.MAX_VALUE) {
return iNextInfo.getOffset(millis); return iOffset ; } }
return  iNextInfo.getOffset(iOffset)-(millis);
 return iNextInfo.getOffset(Zone ).getOffset(millis);
 } public int getOffset(long millis) { return -1 ;
 return iNextInfo.iPeriodRef.getOffset(millis);
 return iNextInfo);
 return iOffset - millis ;
 public int getOffset(long millis) { return -1;
return iNextInfo.getOffset(millis); } return - 1 ;
 return iNextInfo.getOffset;
 return iOffset ; } return iNameKey+iNextInfo.getOffset(millis);
 return iNextInfo.getOffsetLocalOffset(millis);
 return iNextInfo.getOffsetPeriodStart(millis);
 else { iOffset = iZoneRef. getOffset(iPeriodStart); } return iOffset ; } else
 return iOffset ; } return iNextInfo.getOffset(millis);
return iNextInfo.getOffset(millis); } return iDefaultOffset ;
return iNextInfo.getOffset(millis); } return iZoneRef. iOffset ;
return iNextInfo.getOffset(millis) ; } return iZoneRef. defaultOffset ;
 return iNextInfo.iOffset+iNextInfo.getOffset(millis);
return iNextInfo.getOffset(millis) ; } return iZoneRef. standardOffset ;
return iNextInfo.getOffset(millis) ; } public int getStandardOffset(long)
 return iNextInfo.getOffsetInclusive(millis);
return iNextInfo.getOffset(millis) ; } public int getStandardOffset() {
 public int getOffset(long)
 return iOffset ; } private int offset=iNextInfo.getOffset(millis);
 return iOffset ; } public int iOffset=iNextInfo.getOffset(millis);
 return iOffset ; } public int offset=iNextInfo.getOffset(millis);
 return iNextInfo.getOffsetByDay(millis);
 return iZone.offset(millis);
 public int getOffset(long millis);
 return iOffset ; } public int offset(iNextInfo.getOffset(millis);
 return iNextInfo.get(millis);
 return iNextInfo.iPeriodStart().getOffset(millis);
 } public int getOffset(long millis)
 return iNextInfo.getOffsetForMonth(millis);
 } public int getOffset(long millis) { if (iNextInfo == null || millis < iOffset) {}
return iNextInfo.getOffset(iOffset, iNameKey);
 return iOffset ; } public int getOffset() {
 } public int getOffset(long millis) { if (isOffset)
return iNextInfo.getOffset(iOffset, iZoneRef);
 return iOffset ; return iNextInfo.getOffset(millis);
return iNextInfo.getOffset(millis); } return iOffset ; } }
return iNextInfo.getOffset(millis); } return iPeriodStart ;
 else { return iOffset ; } } else {
return iNextInfo.getOffset(iOffset + millis);
 return iOffset ; } public int iOffset() {
 else { iOffset = iZoneRef. getOffset(iPeriodStart); } return iOffset ; } } }
 return iNextInfo.info().getOffset(millis);
 else { return iOffset ; } } public int getOffset(long){
 return iNextOffset(millis);
 return iZoneRef.getOffset(millis;
 return iNextInfo.iNextInfo.getOffset(millis);
return iNextInfo.getOffset(millis); } return iZoneRef. offset ;
 return iOffset ; } return iInfo.getOffset(millis);
 return iOffset + iInfo.getOffset(millis);
 else { return iOffset ; } }
 public int getOffset(long millis) { if (offset)
 return iOffset ; } public int {iNextInfo.getOffset(millis);
 return iNextInfo.getOffsetByNameKey(millis);
return iNextInfo.getOffset(millis) ; return iZoneRef. iOffset ;
 else { iOffset = iZoneRef. getOffset(iPeriodStart); } } }
 return iNextInfo.getNameKeyStandardOffset(millis);
 return iNextInfo.iFixedOffset;
 return iNextInfo.iOffset();
 return iOffset ; } public int iOffset {
return  iNextInfo.getNameKeyAndStandardOffset(millis);
 else if (iOffset == Integer.MAX_VALUE) { }
 public int getOffset(long ms) {
 return iNextInfo. getOffset ( )
return iNextInfo.getOffset(millis); return iDefaultOffset;
 return getStandardOffset(millis);
 return iOffset + iStandardOffset ;
 return iZoneRef. getOffset ( millis )
 public int getOffset(long millis) { return 0 ; }
 return iNextTimeZone.getOffset(millis);
return iNextInfo.getOffset(millis); } public int iStandardOffset {
return iNextInfo.getOffset(millis) ; return iZoneRef. getOffset ( )
 else { iOffset = iZoneRef. getOffset(iPeriodStart); } } else
 return iNextInfo.getOffset(millis); {
 return iNextInfo.iOffsetOffset;
 public int getOffset(long millis) { return 0 ;
 else { return iOffset ; } } public int iOffset {
return iNextInfo.getOffset(millis) ; } public int getStandardOffset(long){
 return 0xiNextInfo.getOffset(millis);
 return (int)iOffset+iNextInfo.getOffset(millis);
 return iNextInfo.(getOffset);
 return iNextInfo.getOffset(); }
 return iZoneRef.iNextInfo.getOffset(millis);
 else { return iOffset ; } return iOffset ; }
 public int getOffset(int) {
 return iNextInfo.getOffset);
 return 0 ;
 return iOffset ; } }
 return iOffset - 1 ;
 return iFirstInfo.getOffset(millis;
 return this.getOffset(millis);
 return iNextInfo.iZone().getOffset(millis);
 return iOffset.add(millis);
 return iOffset ; } public int getOffset(long)
 return iFirstInfo.iZoneRef.getOffset(millis);
return iNextInfo.getOffset(millis); } return iDefaultOffset ; }
 public int getOffset(long millis) { return -1
 return iOffset + 2*iNextInfo.getOffset(millis);
 return int(millis);
 return iNextInfo.nameKey.getOffset(millis);
 return iNextInfo.iNextInfo().getOffset(millis);
return iNextInfo.getOffset(millis, iNameKey);
return iNextInfo.getOffset(millis) { return iOffset; }
 return iOffsetKey(millis);
 return -iNextInfo.getOffset(millis);
return iNextInfo.getOffset(millis + iStandardOffset);
 return iOffset + " (millis);
 return iOffset - (int)iNextInfo.getOffset(millis);
 return (int)millis);
return iNextInfo.getOffset(millis); return iOffset ; } } ;
return iNextInfo.getOffset(millis) ; } return iNameKey ; }
return iNextInfo.getOffset(millis) ; return iNameKey ;
 return iOffset ; } } ;
 return iNextInfo.getOffset(...)
return iNextInfo.getOffset(millis); } return iZoneRef ; } }
return iNextInfo.getOffset(millis) ; } private int iOffset = 0 ;
 return iOffset ; } private int {offset}.iNextInfo.getOffset(millis);
 return iOffset ; } public int getOffset(long){
return iNextInfo.getOffset(millis) - iStandardOffset;
 return thisOffset + iNextInfo.getOffset(millis);
 return iOffset + 1*iNextInfo.getOffset(millis);
 return iZoneRef.offset(millis);
 return 1 - iNextInfo.getOffset(millis);
 return iNextInfo.getFixedOffsetKey(millis);
 return iOffset iNextInfo.getOffset(millis);
 return iZoneGetOffset(millis);
 return iNextInfo.getOffsetFromString(millis);
 return getOffsetInternal(millis);
 return getDefaultOffset(millis);
return iNextInfo.getOffset(millis) - iOffset;
 return iNextInfo.iDefaultInfo.getOffset(millis);
return iNextInfo.getOffset(millis) { return iOffset;
 return iOffset ; } public int getOffset(long {
 return iNextInfo.getOffsetForMonthDay(millis);
 return (int)iOffset-iNextInfo.getOffset(millis);
 return iFirstInfo.getOffset(millis);
 return iOffset + 1-iNextInfo.getOffset(millis);
 return iNextInfo.getOffsetForMonthStart(millis);
 return - 1 ;
 public int getOffset(long {
 return iZone getOffset(millis);
 return iNextInfo.Info.getOffset(millis);
 return getOffsetInt(millis);
 return iNextStandardOffset;
 return iPreviousInfo.getOffset(millis);
return  iFixedOffset ;
 return iNextInfo.Offset(millis);
 return (int) 0);
 return iOffset + (millis);
 return iNextInfo.Offset;
 return iOffset ; } }
 return iFutureInfo.getOffset(millis);
 return iOffset + 1 ;
 return iOffset;
 return iOffset + " "+iNextInfo.getOffset(millis);
 return iOffset + 7 ;
 public int getOffset(int)
 return iOffset * iNextInfo.getOffset(millis);
return  iOffset ; }
 return iOffset + 8*iNextInfo.getOffset(millis);
 return iNextInfo.getOffset(mmis;
 return (int)(0);
 return iDefaultOffset;
 return iOffset - 1 ;
 else {
 public int getOffset(long);
 return iOffset ; } } else {
 return iOffset(ms);
 return - 1;
 return iZoneRef(millis);
 return iOffset * millis;
 return iZoneRef.iOffset;
 return iNextZones.getOffset(millis);
return iNextInfo.getOffset(iPeriodStartOffset);
 return iOffset + -iNextInfo.getOffset(millis);
return iNextInfo.getOffset(millis); return iOffset ; } } } ;
 return i (Info);
 return iFirstInfo.iOffset;
return iNextInfo.getOffset(millis++);
 return iOffset + iStandardOffset;
 public int iOffset() {
 return getOffsetShort(millis);
return iNextInfo.getOffset(miPeriodStart);
return iNextInfo. getOffset ( millis )
 return iNextInfogetOffset(millis);
return iNextInfo.getOffset(millis) * iOffset;
 return iStandardOffset);
 return iNextInfo;
 return _getOffset(millis);
return iNextInfo.getOffset(iPeriodStart++);
 return iFixedOffset);
 return info(millis);
 return iNameKey.iNextInfo.getOffset(millis);
 return -(millis);
 public int getOffset(long millis) { }
 return nextInfo.getOffset(millis);
 } public int getOffset(long millis) {}
 return iOffset ; } else
return iNextInfo.getOffset(millis) - 1;
 return iNextZZone.getOffset(millis);
 return iNextInfoRef.getOffset(millis);
 return mOffset;
return iNextInfo.getOffset(millis); } {
 return 1+iNextInfo.getOffset(millis);
return iNextInfo.getOffset(millis2);
 return (0);
 return.getOffset(millis);
 return Info.getOffset(millis);
 return iInfo.getOffsetKey(millis);
 return myOffset;
 return iFirstInfo;
 return offset+iNextInfo.getOffset(millis);
return iNextInfo.getOffset(millis1);
return iNextInfo.getOffset(millis0);
 return this.iNextInfo.getOffset(millis);
return iNextInfo.getOffset(millis) + offset;
return iNextInfo.getOffset(mallis); }
 super.getOffset(millis);
 return {};
 return 0);
 return myInfo.getOffset(millis);
 return thisInfo.getOffset(millis);
 return get(millis);
return iNextInfo.offset();
 return zone.getOffset(millis);
 return currentInfo.getOffset(millis);
 return -1
 return super.getOffset(millis);
return iNextInfo.getOffset(-millis);
return iNextInfo.getOffset(milis);
return iNextInfo.getOffsetOffset();
 return setOffset(millis);
return iNextInfo.getOffset()millis);
 (this);
 return iZone.getOffset(millis);
return iNextInfo.getOffset(mallis);
 iNextInfo.getOffset(millis);
 return " "+millis);
 return iLastInfo.getOffset(millis);
 return 0; }
 return supergetOffset(millis);
 return Info(millis);
 return (int);
 return (offset);
 return (1);
 return "offset(millis);
 return 1;
 return "Offset(millis);
 return "getOffset(millis);
 (int);
 return iOffset; else
return iNextInfo.getOffset(iPeriodEnd);
return iNextInfo.offset
 return ++iNextInfo.getOffset(millis);
 int iOffset; }
return iNextInfoOffset ;
 return offset;
 return null;
 (2);
 return abs(millis);
 return new Info(millis);
 }(millis);
return iNextInfo.getOffset(mMillisOffset);
 return;
return iNextInfo.getOffset(mallisOffset);
 return calculateOffset(millis);
 return new Integer(millis);
return iNextInfo ; {
 print(millis);
 return and
 return -millis);
 return 8;
return iNextInfo.getOffset(millis)); } }
return iNextInfo.getOffset(Millis);
return iNextInfo.getOffset(mmis);
 else returniNextInfo.getOffset(millis);
 return or
return iNextInfo.iOffset
return iNextInfo.getOffset(millis) + 1
 else
 } returniNextInfo.getOffset(millis);
 }
return iNextInfo.getOffset(microis);
return iNextInfo.getOffset(millis) + ;
return iNextInfo.getOffset(millis) + 2
return iNextInfo.getOffset(millis)); }
