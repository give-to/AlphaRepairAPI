pos = nextpos + 1;
pos =  nextpos;
 pos = n+ 1;
 else { pos = nextpos + -1;
pos =  nextpos ; startLine = n ;
 else { pos = nextpos + 1;
 else { pos = nextpos ; }
 else { pos = nextpos + 1 ; }
 else { pos = nextpos + n+ 1;
pos =  nextpos ; startLine = nextpos ;
pos  += nextpos;
 else { pos = nextpos + lineNumber;
 else { pos = nextpos++;
 else { pos = nextpos ; startLine =nextpos + 1;
 pos += next1;
pos = nextpos + 1 ; startLine = nextpos ;
 else { pos = nextpos - lastOffset+ 1;
pos = nextpos + 1 ; startLine = n ;
 else { pos = nextpos ; startLine *= nextpos + 1;
 else { pos = nextpos;
 else { pos = nextpos + lineNumber+ 1;
 else { pos = n+ 1;
 pos ++;
 else { pos = startLine-nextpos + 1;
 else { pos = nextpos ; n = -1;
 pos += n;
 else { pos = nextpos ; } return pos;
 else { pos += nextpos ; }
 if ( nextpos == - 1 ) { return null ; } if ( nextpos < lastOffset ) { pos = nextpos ;
 pos += 1;
 else { pos = nextpos ; } return pos+ 1;
 else { nextpos = -1;
 if ( nextpos == - 1 ) { return null ; } if ( nextpos > lastOffset ) { pos = nextpos ;
pos  = nextpos + lineNumber;
 if ( nextpos == - 1 ) { return null ; } if ( pos < 0 ) {
 else { pos += nextpos ;
 if ( nextpos == - 1 ) { return null ; } if ( nextpos < lastOffset ) {
 if ( nextpos == - 1 ) { return null ; } if ( nextpos > pos ) {
 else { pos = nextpos; n = n+ 1;
 else { pos = nextpos - n+ 1;
pos =  nextpos ; startLine = nextpos ; }
 if ( nextpos == - 1 ) { return null ; } if ( nextpos < pos ) { return null ; }
 else { pos = nextpos ; n ++ ; }
 if ( nextpos < lastOffset ) { pos = nextpos ; } else {
 if ( nextpos == - 1 ) { return null ; } if ( nextpos > lastOffset ) {
 else { pos = nextpos; return -1;
 else { pos = nextpos ; pos = -1;
 else { pos = nextpos*+ 1;
 if ( nextpos < 0 ) { return null ; } if ( nextpos > lastOffset ) { return null ; }
 else { pos = nextpos ; pos ++ ; }
 else { pos = nextpos - startLine+ 1;
 if ( nextpos < 0 ) { return null ; } if ( nextpos > lastOffset ) {
 if ( nextpos < 0 ) { return null ; } if ( nextpos > pos ) {
 else { pos += nextpos ; startLine *= nextpos + 1;
 if ( nextpos == - 1 ) { return null ; } if ( nextpos < lastOffset ) { break ; }
 else { pos = nextpos ; n =nextpos + 1;
 if ( nextpos == - 1 ) { return null ; } if ( nextpos < n ) { return null ; }
 else { pos = nextpos ; n += -1;
 else { pos += nextpos ; pos *= nextpos + 1;
 else { pos = nextpos - lastOffset;
 if ( nextpos == - 1 ) { return null ; } if ( nextpos < pos ) {
pos = nextpos  ; startLine = nextpos + 1;
 if ( nextpos == - 1 ) { return null ; } if ( nextpos ) {
 if ( nextpos < 0 ) { return null ; } if ( nextpos > lastOffset ) { pos = nextpos ;
 if ( nextpos == - 1 ) { return null ; } if ( nextpos > lastOffset ) { break ; }
 if ( nextpos == - 1 ) { return null ; } if ( nextpos < lastOffset ) { pos = nextpos ; } else
 if ( nextpos < lastOffset ) { pos = nextpos ;
 else { pos = nextpos ; } startLine= nextpos + 1;
 else if (nextpos < pos) { pos = nextpos ; } else {
 else { pos = nextpos ; startLine ++ ;
 else { pos = pos ; startLine =nextpos + 1;
 else if (nextpos < pos) { pos = nextpos ;
 else { pos = nextpos ; } return -1;
 if ( nextpos!= - 1 ) { pos = nextpos ; } } else {
 else { pos = nextpos - 1 ; }
 if ( nextpos < lastOffset ) { pos = nextpos ; } } else {
 else { pos = nextpos+++ 1;
 else { pos = nextpos ; pos = n+ 1;
pos =  nextpos ; pos = nextpos + 1;
 if ( nextpos < 0 ) { return null ; } if ( nextpos > lastOffset ) { break ; }
 else if (nextpos < pos) { pos = nextpos; }
pos  = nextpos ; startLine ++ ;
 else { pos = nextpos - lineNumber+ 1;
 if ( nextpos < 0 ) { return null ; } if ( nextpos > lastOffset ) { pos = nextpos ; }
 startLine= nextpos + 1;
 if ( nextpos == - 1 ) { return null ; } if ( nextpos > lastOffset ) { pos = nextpos ; } else
 if ( nextpos == - 1 ) { return null ; } if ( nextpos > lastOffset ) { return null ; }
 if ( nextpos < lastOffset ) { pos = nextpos ; }
 else if (nextpos < lastOffset) { pos = nextpos ;
 if ( nextpos == - 1 ) { return null ; } if ( nextpos!= pos ) {
 if ( nextpos == - 1 ) { return null ; } if ( nextpos < startLine - 1 ) {
 if ( nextpos == - 1 ) { return null ; } if ( nextpos!= - 1 ) {
 else { pos = nextpos ; } } else {
 if ( nextpos == - 1 ) { break ; } if ( pos < 0 ) {
 if ( nextpos == - 1 ) { return null ; } if ( nextpos!= - 1 ) { pos = nextpos - 1 ;
 else if (nextpos < pos) { pos = nextpos ; } else
 if ( nextpos == - 1 ) { return null ; } if ( nextpos < lastOffset ) { return null ; }
pos =  nextpos ; } else { pos = 0 ;
 if ( nextpos < lastOffset ) { pos = nextpos ; } else
 if ( nextpos < 0 ) { return null ; } if ( pos < 0 ) {
 else { pos = nextpos ;
 else { pos = nextpos + n ; }
 if ( nextpos == - 1 ) { return null ; } if ( pos > 0 ) {
 if ( nextpos!= - 1 ) { pos = nextpos ; startLine = nextpos ;
 if ( nextpos < lastOffset ) { pos = nextpos ; startLine = nextpos ;
 else if (nextpos < lastOffset) { pos = nextpos ; } else
 if ( nextpos < lastOffset ) {
 if ( nextpos < 0 ) { return null ; } if ( pos > 0 ) {
 if ( nextpos == - 1 ) { return null ; } else { pos = nextpos + 1 ;
 else { pos = pos ; n =nextpos + 1;
 if ( nextpos < 0 ) { return null ; } if ( nextpos > lastOffset ) { return null ;
pos = nextpos + 1 ; pos = nextpos ; startLine ++ ;
 if ( nextpos == - 1 ) { return null ; } if ( nextpos!= - 1 ) { pos = nextpos ; } else
 else if (nextpos < lastOffset) { pos = nextpos ; } } else {
 else { pos = nextpos + n ;
 else { pos += 1;
pos  += nextpos ; startLine = n ;
 if ( nextpos == - 1 ) { return null ; } else { pos = nextpos ; }
 if ( nextpos < 0 ) { return null ; } if ( nextpos ) {
 else { pos = nextpos + startLine;
pos  = nextpos + startLine;
 if ( nextpos == - 1 ) { return null ; } if ( nextpos == - 1 ) { return null ; } } else {
 else { pos = nextpos ; } else {
 else if (nextpos < n) { pos = nextpos ;
pos = nextpos + 1 ; pos = nextpos ;
 nextpos = -1;
pos = nextpos + 1 ; pos += n ;
 else { pos = nextpos - startLine;
 else if (nextpos < lastOffset) { pos = nextpos; }
 else if (nextpos == -1) { pos = nextpos ;
pos = nextpos  ; } else { pos = - 1 ; }
 else { pos = nextpos - -1;
 if ( nextpos < 0 ) { return null ; } if ( nextpos > lastOffset ) { pos = nextpos ; } else
 else { pos = next1;
pos = nextpos + 1 ; } else { pos = 0 ;
 else { pos = nextpos - 1;
 if (nextpos) {
pos = nextpos  ; } else { pos = startLine ; }
pos  += nextpos + 1;
 else pos = n+ 1;
 if ( nextpos < 0 ) { return null ; } if ( nextpos > lastOffset ) { return null }
 if ( nextpos == - 1 ) { return null ; } if ( nextpos == - 1 ) { return js ; }
 if ( nextpos == - 1 ) { return null ; } if ( nextpos > lastOffset ) { break ;
pos =  n;
pos  = nextpos + n;
pos = nextpos + 1 ; } else { pos = - 1 ; }
 else { pos = pos+ 1;
 else { pos = startLine+nextpos + 1;
pos = nextpos + 1 ; startLine = nextpos + 1 ;
 else { pos = nextpos - 1 ;
 else if (nextpos < lastOffset) {
pos = nextpos + 1 ; pos = nextpos + 1;
 if ( nextpos < 0 ) { pos = nextpos ; }
pos = nextpos + 1 ; pos = nextpos - 1;
 else { pos += next1;
pos = nextpos + 1 ; } else { pos = - 1 ;
 else { pos = n ; startLine= nextpos + 1;
 else { pos = nextpos - 1 ; } else {
 else { pos = nextpos ; lastLine =nextpos + 1;
 else { pos = nextpos ; }
 else { pos += n;
 else { pos += nextpos ; } pos *= nextpos + 1;
 if ( nextpos == - 1 ) { return null ; } if ( nextpos < 0 ) { return null ; } else {
 if ( nextpos > lastOffset ) {
 else { pos = pos-nextpos + 1;
 if ( nextpos == - 1 ) { return null ; } if ( debug ) {
 else { pos = n ; pos *= nextpos + 1;
 if ( nextpos < lastOffset ) { pos = n ;
 else { pos = nextpos + 1 ; } }
 else { pos = nextpos + 1 ;
 else { pos = nextpos ; pos += n ;
 else { pos += nextpos
 if ( nextpos < 0 ) { pos = nextpos ;
 else { pos += nextpos; startLine= nextpos + 1;
 if ( nextpos > pos ) {
pos  = nextpos ; startLine += nextpos ;
 else if (nextpos < pos) { pos = pos ;
 else { pos = nextpos; } break;
 else { pos += nextpos + 1;
pos = nextpos + 1 ; startLine = nextpos ; return js ;
 else { ++ pos;
pos  += nextpos ; pos = n ;
pos = nextpos + 1 ; pos = nextpos + 2;
 else { pos = n;
 if ( nextpos == - 1 ) { return null ; } if ( nextpos < lastOffset ) { pos = nextpos ; }
pos = nextpos + 1 ; startLine = nextpos ; }
 else { pos = nextpos + 1 ; } else {
 if ( nextpos < pos ) {
 if ( pos < 0 ) {
 else { pos = n ;
 else { pos ++ ; pos= nextpos + 1;
 if ( nextpos == - 1 ) { return null ; } if ( nextpos > lastOffset ) { pos = nextpos ; }
pos  = nextpos ; startLine += n ;
pos = nextpos + 1 ; pos = n ;
 else { pos = nextpos + +1;
 if ( nextpos < lastOffset ) { break ; }
 else { if (nextpos < lastOffset) {
 else { pos += nextpos++;
 else { pos += n ; pos *= nextpos + 1;
 else { pos = n ; n= nextpos + 1;
 else { pos = nextpos + n-1;
 else if (nextpos < pos) { pos = n ;
 if ( nextpos == - 1 ) { return null ; } else { pos = nextpos + 1 ; }
 else { pos = pos + nextpos+ 1;
pos  += nextpos ; pos = nextpos ;
pos  += nextpos ; pos = nextpos ; }
 else { pos += nextpos ; } return pos;
 if ( nextpos < lastOffset ) { pos = nextpos ; break ; } else
 else { pos += nextpos ; pos |= nextpos + 1;
 else { pos = nextpos ; lastLine *= nextpos + 1;
pos = nextpos + 1 ; pos = nextpos ; } return pos ;
 nextpos += -1;
 else { pos = nextpos - 1 ; }
pos = nextpos + 1 ; pos += 1 ;
 else { pos = pos ; pos =nextpos + 1;
 else { pos = n-nextpos + 1;
pos =  nextpos
pos  = nextpos + n + 1;
pos = nextpos  ; startLine = nextpos ; return js ;
pos = nextpos + 1 ; pos ++ ;
pos = nextpos + 1 ; pos = nextpos ; } return js ;
pos = nextpos  ; startLine = n ; pos = n ;
 else { pos = nextpos + 1 ; }
pos = nextpos +  1 ; pos = nextpos ; }
 else { pos = nextpos + lastOffset+ 1;
 if ( nextpos < lastOffset ) { return null ;
 else { pos = nextpos; n+1;
pos =  nextpos ; pos = nextpos ;
pos =  nextpos + n ; pos += n ;
pos = nextpos +  n ; startLine = nextpos ;
pos =  nextpos ; startLine += 1 ;
 if ( nextpos == - 1 ) { return null ; } if ( nextpos == - 1 ) { return null ; } else {
pos = nextpos +  n ; startLine = n ;
pos  = nextpos ; pos += n ;
 else { pos += n ; pos= nextpos + 1;
 pos = next1;
pos = nextpos +  startLine ; startLine = n ;
 else { pos = nextpos ; pos= nextpos + 1;
 if ( nextpos == - 1 ) { return null ; } if ( nextpos > lastOffset ) { }
pos  = nextpos - startLine;
 else if (nextpos) return -1;
 if ( nextpos == - 1 ) { return null ; } if ( nextpos < 0 ) { return null ; } else
pos = nextpos + 1 ; pos += nextpos ;
 else pos = next1;
 else { pos = nextpos * 2+ 1;
 else { pos = pos + n+ 1;
 else { return n;
 if ( nextpos < 0 ) { return null ; } if ( nextpos > lastOffset ) { pos = nextpos ; } }
 if ( nextpos == - 1 ) { return null ; } if ( nextpos < startLine ) { }
 if ( nextpos == - 1 ) { return null ; } if ( nextpos < lastOffset ) { }
pos =  nextpos ; n += 1 ;
 else { startLine *= nextpos + 1;
pos  = nextpos - 1;
 else { pos += -1;
 else { startLine=nextpos + 1;
 else { pos = nextpos + 2;
pos = nextpos + 1 ; pos += 2 ;
pos = nextpos + 1 ; startLine += nextpos ;
 else { pos = lastOffset+nextpos + 1;
 else { pos = lineNumber-nextpos + 1;
 else { pos ++ ; pos *= nextpos + 1;
 pos += nextpos
 if ( nextpos == - 1 ) { return null ; } if ( reverse )
 startLine = n+ 1;
 else { pos += 1 ; pos= nextpos + 1;
 else { pos = +nextpos;
 else { startLine = n ;
 else { pos = nextpos; ++nextpos + 1;
 else { pos = +nextpos+ 1;
 if (nextpos++) {
 if ( nextpos == - 1 ) { return null ; } if ( nextpos < lastLine ) { }
 if ( pos == n ) {
 else { pos += nextpos *= nextpos + 1;
 else { pos += n *= nextpos + 1;
 else { pos += n ;
 else { startLine = next1;
 else { nextpos = +1;
 } else { pos = lineNumber ;
 else { pos += nextpos-1;
pos = nextpos + 1 ; startLine = pos ;
 if ( pos < n ) {
pos = nextpos +  1 ; pos = nextpos - 1 ; }
 else { pos += nextpos + -1;
 else { pos = lastOffset-nextpos + 1;
 else { nextpos += -1;
pos  = nextpos ; }
 else { } pos += next1;
 else { pos = pos *= nextpos + 1;
 ++ pos;
pos = nextpos +  1 ; pos = nextpos + 1 ; }
 else pos += next1;
 else { pos = n + 1+ 1;
pos = nextpos + 1 ; startLine ++ ;
 pos += -1;
 else { pos = n *= nextpos + 1;
 else { pos += 2;
 return n+ 1;
 else { pos = -1;
pos  += nextpos ; }
 else { pos += +1;
 break;
 else { pos = n+nextpos + 1;
 else { pos ++ ;
 else { pos = nextpos + 1 ; } else
pos = nextpos +  n - 1;
pos = nextpos +  n + lineNumber;
 startLine *= nextpos + 1;
 else { pos = pos |= nextpos + 1;
 if ( nextpos < lastOffset ) { return null }
 return n;
 else { pos = nextpos - 1 ; } else
pos = nextpos + 1 ; n ++ ;
 else { return pos;
 else { pos += n+ 1;
 if (debug) {
 else pos=nextpos + 1;
 pos = pos+ 1;
 else { lastOffset *= nextpos + 1;
 else { pos += 4;
 return pos+ 1;
 else { pos += n-nextpos + 1;
 int pos = nextpos+ 1;
 nextpos = +1;
pos = nextpos + 1 + lineNumber;
 else { lastOffset |= nextpos + 1;
 else { } pos=nextpos + 1;
 else { pos = -nextpos + 1;
pos = nextpos + 1 ; return js;
pos = nextpos + 1 ; return pos ;
 else { ++ n;
 else { endLine=nextpos + 1;
 else { } pos = n+ 1;
 else { return pos+ 1;
 else { endLine = n;
 pos += 2;
pos = nextpos + 1 ; break;
 else { startLine = n+ 1;
 else pos = pos+ 1;
 else { } pos += 1;
 else { pos -= nextpos;
 pos += +1;
 else { lineNumber *= nextpos + 1;
pos = nextpos + 1 + n;
 ++ n;
 else { ++ n ;
 else { lastLine *= nextpos + 1;
 else { pos ++ ;
 else { pos |= nextpos + 1;
 if (pos++) {
 else { pos *= nextpos + 1;
 if (pos) {
 pos *= nextpos + 1;
 nextpos=nextpos + 1;
pos  -= nextpos;
 pos += n+ 1;
pos = nextpos +  startLine ; }
 pos |= nextpos + 1;
pos = nextpos +  - 1;
 else {
 pos += 4;
 pos=+ 1;
pos = nextpos + 1 - n;
 pos --;
pos = nextpos +  n + 1 ; }
 pos = -1;
 int startLine=nextpos + 1;
 ++ pos+ 1;
 } else {
 return -1;
 if (debug)
 return pos;
pos = nextpos + 1 ; }
 pos+1;
 startLine |= nextpos + 1;
 endLine= nextpos + 1;
 else { pos ^= nextpos + 1;
 startLine+ 1;
 else startLine=nextpos + 1;
 else, pos=nextpos + 1;
 lastOffset *= nextpos + 1;
 pos=1;
pos =  nextpos + 1
 if (continue)
 lastLine= nextpos + 1;
pos = nextpos +  2;
pos =  + nextpos;
 pos -= n+ 1;
pos =  nextpos();
pos =  nextpos.
 else { } else
 continue;
pos =  0;
 else { int
 n=nextpos + 1;
pos =  Nextpos;
 } }
 else { }
 } else,
 else
pos = nextpos + 1 break;
 else,
pos = nextpos  + 2
 } else
pos = nextpos + 1 break }
pos -= nextpos + 1;
 } int
 int
pos = nextpos << 1;
pos = nextpos >> 1;
pos -- nextpos + 1;
