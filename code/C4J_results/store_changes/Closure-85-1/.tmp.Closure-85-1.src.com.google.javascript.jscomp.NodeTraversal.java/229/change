compiler.throwInternalError(message);
compiler.throwInternalError(message, unexpectedException);
 throwUnexpectedException(message, unexpectedException);
 throwUnexpectedException(unexpectedException);
 return message;
 return message);
 throw unexpectedException(unexpectedException);
 throw(message, unexpectedException);
 throw message, unexpectedException);
compiler = message ;
compiler.throwInternalError(message,  unexpectedException); throw unexpectedException;
compiler.throwInternalError(message, unexpectedException); throwUnexpectedException(unexpectedException);
compiler.throwInternalError(message, unexpectedException.getCause());
compiler.throwInternalError(message); throwUnexpectedException(unexpectedException);
 throwException(message, unexpectedException);
compiler. error ( message ) ;
compiler.throwInternalError(message, null, unexpectedException);
compiler.message();
compiler. error ( message )
 else { message = throwUnexpectedException(unexpectedException);
 throw(unexpectedException);
compiler.throwInternalError(message); throw unexpectedException;
compiler.throwInternalError(message,  unexpectedException); return message ;
compiler.throwInternalError(message,  unexpectedException); throw new RuntimeException(message);
 throw new Exception(message, unexpectedException);
 throw throwUnexpectedException(unexpectedException);
compiler.throwInternalError(message); return message;
compiler. error ( message ) ; throw unexpectedException ;
 else { throwUnexpectedException(message, unexpectedException);
compiler.throwInternalError(message); throw new RuntimeException(message);
compiler.throwInternalError(message, unexpectedException.getCause);
 else { throwUnexpectedException(unexpectedException);
compiler.throwInternalError(message); throwUnexpectedException(message);
 throwUnexpectedException(sourceName, unexpectedException);
compiler.throwInternalError(sourceName, message, unexpectedException);
 return message + throwUnexpectedException(unexpectedException);
 throwUnexpectedExceptionInternal(message, unexpectedException);
 else { throwUnexpectedException(sourceName, unexpectedException);
 throw new IllegalStateException(message, unexpectedException);
 else { message = " throwUnexpectedException(unexpectedException);
compiler. addError ( message ) ;
compiler.throwInternalError(message, unexpectedException, null);
compiler.throwInternalError(message, unexpectedException) ; throw new RuntimeException ( message ) ; }
compiler.throwInternalError(message, unexpectedException) ; throw new IllegalStateException ( message ) ;
 else { throwUnexpectedException(message, null, unexpectedException);
compiler. addError ( message, unexpectedException ) ;
 throw new IllegalStateException ( message ) ;
compiler. add ( message ) ;
 throwUnexpectedException(message, null, unexpectedException);
compiler.throwInternalError(message); throw unexpectedException(message);
 else { message = unexpectedException. getMessage ( ) ; }
 throwUnexpectedException(message, null);
 return throwUnexpectedException(unexpectedException);
 throw new UnexpectedException(message, unexpectedException);
 else { message = unexpectedException. getMessage ( ) ;
compiler.throwInternalError(message, unexpectedException); throwUnexpectedException(expectedException);
compiler.throwInternalError(message, unexpectedException); throwUnexpectedException(unknownException);
 throw new IllegalArgumentException ( message ) ;
 throw new IllegalArgumentException(message, unexpectedException);
 throw unexpectedException ( message ) ;
compiler.throwInternalError(message); return;
 else { message = unexpectedException.getMessage() + "\n" + formatNodePosition(n); }
 throwUnexpectedExceptionImpl(message, unexpectedException);
compiler.throwInternalError(message); throwUnexpectedException(expectedException);
compiler.throwInternalError(message, null);
 else { message = unexpectedException.getMessage(); }
 return "+ message);
compiler. error ( message, unexpectedException ) ;
 else { message = "\n" + formatNodePosition(n); }
compiler. report ( message ) ;
 throwUnexpectedException(message, exception);
compiler. error ( message ) ; return ; }
compiler.throwInternalError(message); throwUnexpectedException(unknownException);
compiler.throwInternalError(message,  unexpectedException); throw unexpectedException ; }
 return format(message);
 throw new IllegalArgumentException ( message ) ; }
 else { message = unexpectedException.getMessage() + "\n" + sourceName ; }
 if ( compiler!= null ) {
compiler. error ( message ) ; }
 throwUnexpectedException(sourceName, message, unexpectedException);
 else { message = "{ throwUnexpectedException(unexpectedException);
 throw new RuntimeException ( message ) ;
 throw unexpectedException(message, unexpectedException);
compiler. write ( message ) ;
 else { message = " " + unexpectedException. getMessage ( ) ; }
compiler. throw message ;
compiler. reportError ( message ) ;
compiler.throwInternalError(message, sourceName, null, unexpectedException);
compiler.throwInternalError(message, unexpectedException, this);
compiler. addWarning ( message ) ;
 else { throwUnexpectedException(message + "", unexpectedException);
compiler. error ( message ) ; return false ;
 if ( compiler!= null ) { throw (Exception unexpectedException)
 throw new IllegalStateException ( message ) ; }
 if (message!= null) {
 else { message = message + ": " + formatNodePosition(n);
 throwException(unexpectedException);
compiler.throw message();
 else { message = unexpectedException.getMessage() + "\n"; }
 else { message = " " + unexpectedException. getMessage ( ) ;
compiler.throwInternalError(message,  unexpectedException); throw ( Error ) unexpectedException ;
 throwUnexpectedException(message); throwException(unexpectedException);
 else { message = unexpectedException.getMessage() + "\n" + sourceName ;
 throwUnexpectedException(message, unexpectedException);
compiler.throwInternalError(message); throw new InternalError(message);
 throwUnexpectedException(message, unexpectedException); return message ;
compiler.throwInternalError(message,  unexpectedException); throw new RuntimeException();
compiler. addError ( message ) ; }
compiler.throwInternalError(message, unexpectedException) ; throw new RuntimeException ( message )
 else { message = unexpectedException.getMessage;
compiler.throwInternalError(message,  unexpectedException); return ;
 else { message = unexpectedException.message;
 else { message = unexpectedException.getMessage() + "\n" + formatNodePosition(n);
 else { message = unexpectedException. getMessage ( ) ; } }
compiler.throwInternalError(message, unexpectedException.class);
compiler. error ( message ) ; return ;
 else { message = "\n" + formatNodePosition(curNode); }
 throwUnexpectedException(message, unexpectedException);throwInternalError(message, unexpectedException);
 else { message = unexpectedException.getMessage() + ""; }
 if (message!= null) { compiler.throwInternalError(message, unexpectedException);
 return sourceName + message;
compiler.setSourceName(sourceName);
 return message + " throwUnexpectedException(unexpectedException);
compiler.throwInternalError(message, unexpectedException) ; throw throwUnexpectedException(message);
 else { throwUnexpectedExceptionInternal(unexpectedException);
 else { message = "\n" + formatNodePosition(unknownNode); }
 throw throwUnexpectedException(sourceName,message, unexpectedException);
 throwUnexpectedException(message); throw compiler.throwInternalError(message, unexpectedException);
compiler. addSource ( message ) ; return message ;
 else { message += ": " + unexpectedException;
 else { message = "\n" + formatNodeContext("Node", curNode) + ": " + formatNodePosition(n); }
 if ( sourceName. isEmpty ( ) ) {
 else { message = "\n" + formatNodeContext("Source", sourceName) + ": " + formatNodePosition(n); }
compiler.throwInternalError(message + ": " + unexpectedException);
 else { throwUnexpectedException(sourceName,message, unexpectedException);
 else { message = "\n" + formatNodeContext("Node", sourceName) + ": " + formatNodePosition(n); }
compiler.throwInternalError(message); throw exception;
 else { message = unexpectedException. getMessage ( ) + ": " + formatNodePosition(n); }
 else { message = throwUnexpectedException()(unexpectedException);
compiler.throwInternalError(message); throw new RuntimeException();
compiler.throwInternalError(message, unexpectedException, cb);
 throw exception(unexpectedException);
compiler.throwInternalError(message,  unexpectedException.getCause()); return message ;
 throw throwUnexpectedExceptionInternal(message, unexpectedException);
 throw (Exception unexpectedException)
 throw throwUnexpectedException()(unexpectedException);
compiler.throwInternalError(message, unexpectedException, scopeCreator);
 throw new UnexpectedException(sourceName,message, unexpectedException);
 else { message = unexpectedException.getMessage() + "\n" + getLineNumber ( ) ;
compiler.throwInternalError(message, unexpectedException) ; throw new RuntimeException ( message));
 if ( compiler!= null ) { throw (Exception)
compiler.throwInternalError(message,  unexpectedException.getCause()); throw unexpectedException;
 else { throwUnexpectedException()(unexpectedException);
compiler. error ( message ) ; } }
 if ( isInternalError ( message ) ) { throw (Exception)
compiler. addError ( message ) ; return ; }
 else { throwUnexpectedExceptionInternal(message, unexpectedException);
 else { message = unexpectedException.getMessage() + "\n" + sourceName }
 else { message = unexpectedException.getMessage() + "\n" + formatNodeContext(node); }
 throwUnexpectedException(message); compiler.throwInternalError(message, unexpectedException);
 throw throwUnexpectedException(unexpectedException.message, unexpectedException);
compiler.throwInternalError(message,  unexpectedException); return message ; }
compiler.addError(message); throw unexpectedException;
 else { message = "\n" + formatNodeContext("Node", root) + (root == null? "" : root); }
 else { throw unexpectedException(message, unexpectedException);
 throw new IllegalStateException ( message )
compiler.throwInternalError(message); return unexpectedException;
 throwUnexpectedException(unexpectedException.message, unexpectedException);
 else { message = "\n" + message;
 return formatNodePosition(message);
 else { throw new IllegalArgumentException(message, unexpectedException);
compiler.throwInternalError(message, unexpectedException); throw exception;
 throw throwUnexpectedException(message,unexpectedException);
 throw throwUnexpectedException(null,message, unexpectedException);
compiler = message
 return message + throwUnexpectedException()(unexpectedException);
 else { throw unexpectedException ; } return message;
compiler.addSource ( message, unexpectedException ) ;
 else { throwUnexpectedException(unexpectedException, unexpectedException);
 else { message += ": " + unexpectedException);
compiler. warn ( message ) ;
 else { message = unexpectedException.getMessage());
 else { message = "\n" + formatNodeContext("Source", sourceName) + (sourceName == null? "" : sourceName);
 else { message = "\n" + formatNodeContext("Node", curNode) + ": " + formatNodePosition(n);
compiler.throwInternalError(message, exception);
 throw UnexpectedException.throwInternalError(message, unexpectedException);
compiler. addError ( message ) ; return false ;
 else { message = "";
compiler.throwInternalError(message, unexpectedException, true);
 if (message!= null) {throwInternalError(message, unexpectedException);
 else { throwUnexpectedException(message, 0, unexpectedException);
 catch (Exception unexpectedException) {
 else { message = unexpectedException.getMessage() + "\n" + formatNodePosition(n); } return
 if ( compiler!= null ) { message =
 else { message = unexpectedException.getMessage() + "";
 throwUnexpectedException(message); return message;
 else { message = unexpectedException.getMessage() + "\n" ;
 throwUnexpectedException(message);
 else { message = sourceName + ""; }
 throw throwUnexpectedExceptionImpl(message, unexpectedException);
 else { message = unexpectedException.getMessage(); } return
 throw throwUnexpectedException(this,message, unexpectedException);
 throw exception(message, unexpectedException);
 else { message = formatNodePosition(n);
 else { message = "\n" + formatNodeContext("Node", sourceName) + ": " + formatNodePosition(n);
 if ( sourceName. isEmpty ( ) ) { throw new RuntimeException ( ) ;
 throwUnexpectedException(sourceName + message, unexpectedException);
compiler. report ( message )
 else { message = unexpectedException. getMessage ( ) + message ;
 throw (Exception)
 else { message = "\n" + formatNodeContext("Source", sourceName) + ": " + formatNodePosition(n);
 this.throwInternalError(message, unexpectedException);
 throwUnexpectedException(message, unexpectedException); return message ; }
compiler.throwInternalError(message,  unexpectedException); throw new Error ( message);
compiler.throwInternalError(message, unexpectedException, sourceName, scopeCreator);
 throwUnexpectedException(expectedException, message);
 else { message = unexpectedException.getMessage() + "\n" + getLineNumber ( ) ; }
 else { message = "\n" + formatNodeContext("Node", sourceName) + ": " + unexpectedException ; }
compiler.throwInternalError(message, null, null, unexpectedException);
compiler.throwInternalError(message,  unexpectedException); throw message ;
 else { message = " " + message + ": " + formatNodePosition(n); } throw (Exception)
 return throwUnexpectedException(message, unexpectedException);
 else { message = unexpectedException. message ; }
 else { message = unexpectedException.getMessage() + "\n" + getLineNumber ( ) }
compiler.throwInternalError(message, unexpectedException); throwUnexpectedException(unknownException); }
compiler. addSource ( message ) ; }
compiler.throwInternalError(message, unexpectedException, false);
 if ( isInternalError ( message ) ) {
 throwError(message, unexpectedException);
 else { message = "\n" + unexpectedException. message ; }
 throwUnexpectedException(unknownException, message);
 throw new UnexpectedExceptionException(message, unexpectedException);
 else { message = "\n" + unexpectedException;
compiler.addLineNumber(message); throw unexpectedException;
compiler.throwInternalError(message,  unexpectedException); throw ( unexpectedException );
 else { message = "\n" + formatNodeContext("Source", sourceName) + ": " + sourceName ; }
 throwUnexpectedException(message); throw new IllegalStateException(message);
compiler.throwInternalError(message,  unexpectedException); throw unexpectedException ; } }
 else { message = unexpectedException.getMessage() + "\n" + "Unknown error." ;
compiler. addError ( message ) ; } }
 else { message = unexpectedException.getMessage() + "\n" + "null"; }
 else { message = "\n" + formatNodeContext("Source", sourceName) + ": " + unexpectedException ; }
 else { message = unexpectedException.getMessage() + "\n" + sourceName + "" ;
 if ( compiler!= null ) { throw new RuntimeException ( ) ;
compiler. throw ( message ) ; }
compiler.error(message); return message;
 throwUnexpectedException2(message, unexpectedException);
 throw new IllegalArgumentException(this.message, unexpectedException);
 else { message = "\n" + formatNodeContext("Line number of the code that caused the exception."); }
 else { message = "\n" + formatNodeContext("Source", sourceName) + ": " + message ; }
 throw new IllegalArgumentExceptionImpl(message, unexpectedException);
 catch (Exception unexpectedException)
 else { throwUnexpectedException(message + null, unexpectedException);
compiler.throwInternalError(message, unexpectedException, sourceName);
 else { message = "\n" + formatNodeContext("Node", curNode) + ": " + unexpectedException ; }
 else { message = unexpectedException.getMessage() + "\n" + sourceName + message }
 else { message = unexpectedException.getMessage() + "\n" + sourceName + message ;
compiler.throwInternalError(message, unexpectedException) ; throw new IllegalStateException ( message )
 else { message = unexpectedException.getMessage() + "\n" + "Unknown error." ; }
 else { message = "\n" + formatNodePosition(node); }
 else { message = unexpectedException.getMessage() + ";" }
 else { message = " " + message + ": " + formatNodePosition(n); } return " " +
 else { message = "\n" + formatNodeContext("Line number of the code that caused the exception") ; }
 else { message = unexpectedException.getMessage() + "\n" + getLineNumber ( node ) ;
 if ( message!= null ) { super.throwInternalError(message, unexpectedException);
 else { message = "\n" + formatNodeContext("Source", sourceName) + (sourceName == null? "" : source);
compiler.throwInternalError(message, unexpectedException) ; throw new IllegalStateException(message); }
 throw new IllegalArgumentException(sourceName,message, unexpectedException);
 else { message = unexpectedException.getMessage() + "\n" + ""; }
 throwUnexpectedException(message, cause);
 throw throwUnexpectedException(unexpectedException))(message, unexpectedException);
 else { message = formatNodeContext(message);
 else { message = unexpectedException.getMessage() + "\n" + getLineNumber ( node ) }
compiler.throwInternalError(message, unexpectedException); }
 else { message = " " + message + ": " + formatNodePosition(n); } throw (InternalError)
 if ( compiler!= null ) { compiler. reportError ( message ) ; }
compiler.error(message, unexpectedException); return ;
 throwUnexpectedException(message, 0, unexpectedException);
 else { message = "\n" + formatNodeContext("Node", sourceName) + ": " + message ; }
 throwUnexpectedException(message, unexpectedException); return ;
 else { message = " " + message + ": " + formatNodePosition(n); } throw (InternalException)
 else { message = "\n" + formatNodeContext("Source", sourceName) + (sourceName == null? "" : sourceName));
 throw unexpectedException; return message);
compiler.error(message, unexpectedException); return message ;
 else { message = "\n" + formatNodeContext("Source", sourceName) + (sourceName == null? "" : message);
 else { message = unexpectedException.getMessage() + "\n" + formatNodePosition(n); } throw
 else { message = "\n" + formatNodeContext("Source", sourceName) + ": " + unexpectedException.message();
 if ( compiler!= null ) { compiler. throwInternalError ( message ) ; }
 throw new RuntimeException(message); compiler.throwInternalError(message, unexpectedException);
 if ( compiler!= null ) { compiler. reportInternalError ( message ) ; }
compiler.throwInternalError(sourceName, null, message, unexpectedException);
 else { message = "\n" + formatNodeContext("Node", sourceName) + ": " + unexpectedException.message();
 throw UnexpectedException(unexpectedException.throwInternalError(message, unexpectedException);
 else { message = "\n" + formatNodeContext("Node", sourceName) + ": " + sourceName ; }
compiler.setSourceName(message);
compiler. addSource ( message ) ; } }
 else { message = unexpectedException.getMessage() + "\n" + formatNodePosition(node); } return
 throwMessage(unexpectedException);
 throwUnexpectedException(expectedException);
 throw new Error(message, unexpectedException);
 else { message = "\n" + sourceName;
compiler.throwInternalError(message, unexpectedException.getCode());
 throw throwUnexpectedException(message, null);
 else { message = "Unknown error: + message;
 throw compiler.throwInternalError(message, unexpectedException);
compiler ( message ) ;
 throwUnexpectedExceptionImpl(unexpectedException);
 else { message = ""; } throw compiler.throwInternalError(message, unexpectedException);
 else { message = "\n" + formatNodeContext("Source", sourceName) + ": " + sourceName }
 else { message = "null"; }
 else { message = "\n" + formatNodePosition(n); } }
 else { message = sourceName + message ;
 return throwUnexpectedExceptionInternal(message, unexpectedException);
 else { message = "\n" + formatNodeContext("Node", curNode) + ": " + unexpectedException.message();
 else { message = "Unknown error: ";
compiler.addError(message); return message;
compiler.throwInternalError(message, null, null);
 throwUnexpectedException2(unexpectedException);
 if (message!= null) { throw
 else { message = unexpectedException ; } compiler.throwInternalError(message, unexpectedException);
compiler.addError(message, unexpectedException); return ;
 else { message = "Unknown exception." ;
 else { message = unexpectedException ; }
compiler.throwInternalError(message); return null;
compiler.addNode(message);
compiler.throwInternalError(message); throw unexpectedException ; }
 else { throw new Exception(message, unexpectedException);
 else { throw unexpectedException.getMessage);
compiler. report ( message ) ; } }
 else { message = "\n" + formatNodeContext("Source", sourceName) + ": " + unexpectedException.message;
 else { message = unexpectedException ; } throwException(message, unexpectedException);
 throwUnexpectedException(message, e);
 throw new UnexpectedException(this,message, unexpectedException);
compiler = unexpectedException ;
 else { return message;
 else { throw new UnexpectedExceptionException(message, unexpectedException);
compiler.throwInternalError(message, unexpectedException.getPrevious);
compiler.throwInternalError(message); throwUnexpectedException, unexpectedException);
 else { message = unexpectedException.getMessage() + "\n" + formatNodePosition(n));
 throwUnexpectedException ( message ) ; } return this ; }
 throw unexpectedException ; } return message ;
compiler.throwInternalError(message); throwUnexpectedException(unknownException); }
 throw throwUnexpectedException(unexpectedException,message, unexpectedException);
 else { message = "Unknown exception" ; compiler.throwInternalError(message, unexpectedException);
 else { message = unexpectedException ; } throw compiler.throwInternalError(message, unexpectedException);
 throwUnexpectedException(message, unexpectedException).throwInternalError(message, unexpectedException);
 throwUnexpectedException(newMessage);
 throwUnexpectedException(message); CaughtException.throwInternalError(message, unexpectedException);
 if ( compiler!= null ) { compiler. reportInternalError ( message ) ;
 else { message = unexpectedException ;
compiler.error(message, unexpectedException); throw message ;
compiler.error(message); throw exception;
 else { message = "Unknown error." ;
 else { message = ""; } compiler.throwInternalError(message, unexpectedException);
 else { throw throwUnexpectedExceptionInternal(message, unexpectedException);
 throw unexpectedException.with(message);
 if ( compiler!= null ) { compiler. reportError ( message ) ;
 else { message = unexpectedException. getMessage ; }
 return formatNodeContext(message);
compiler. warn ( message )
 else { message = "Unknown exception." ; compiler.throwInternalError(message, unexpectedException);
 return message + "\n";
 throw UnexpectedExceptionManager.throwInternalError(message, unexpectedException);
compiler = null ;
 throwUnexpectedException(message); Throwables.throwInternalError(message, unexpectedException);
 return message(unexpectedException);
compiler.throwInternalError(message,  unexpectedException); throw new Error ( message));
 throw new IllegalArgumentException("Unknown exception "+message, unexpectedException);
 else { message = "Unknown error." ;
 throwUnexpectedExceptionInternal(unexpectedException);
 return message + "";
 else { throwUnexpectedException(errorMessage, unexpectedException);
compiler.addMessage(message);
 throw new IllegalArgumentException(null,message, unexpectedException);
 throwUnexpectedException ( message ) ; return null ;
 throwUnexpectedException(message); throw new RuntimeException(message); }
 throwThrowUnexpectedException(message, unexpectedException);
 else { message = unexpectedException.getMessage()); }
 throwUnexpectedException ( message ) ; } return this ;
 else { message = "Unknown error." ; }
 else { message =
compiler. write ( message )
 else { return " " + message;
 if ( message!= null ) { throw compiler.throwInternalError(message, unexpectedException);
 if ( compiler!= null ) { throw (ExceptionException)
 else { message += ": " + exception;
 return message + ": " + format(n);
 else { message = unexpectedException.getMessage(); } throw
compiler.throwInternalError(message,  unexpectedException); throw ( unexpectedException )
 if ( isInternalError ( message ) ) { return
 else { return message + "";
 if ( compiler!= null ) { compiler. addError ( message ) ; }
 throw new IllegalArgumentExceptionWithMessage(message, unexpectedException);
 else { message = "Unknown" ;
 else { message = unexpectedException.getMessage()); } return
compiler.throwInternalError(message, sourceName, unexpectedException);
 if (message!= null) { return
compiler.throwInternalError(message + ": " + exception);
 throwUnexpectedException ( message ) ; return true ;
 throw throwUnexpectedException(String.format(message, unexpectedException);
 throwUnexpectedException(message); throw new Exception(message, unexpectedException);
 throwUnexpectedException(message + "", unexpectedException);
compiler.throwInternalError(message, unexpectedException) ; throw new Exception ( message);
 if (debug) {
 if ( compiler!= null ) { return
 else { message = "" ;
 else { message = unexpectedException + message;
 throw CaughtException.throwInternalError(message, unexpectedException);
 else { message = unexpectedException ; } }
 throw throwUnexpectedException(message); throwException(message, unexpectedException);
 if ( compiler!= null ) { compiler. addError ( message ) ;
compiler.throwInternalError(message, unexpectedException) ; throw new Error ( message )
 else { message = sourceName + "" ;
compiler.throwInternalError(message); }
 return message + "\n"+(unexpectedException);
 else { throwUnexpectedException2(message, unexpectedException);
 throw (InternalError)
 throw new IllegalArgumentException(format(message, unexpectedException);
compiler.log(message);
 return (message);
 if ( compiler!= null ) { compiler. error ( message ) ; }
 throw throwUnexpectedExceptionWithMessage(message, unexpectedException);
 return " " + message;
 else { message = message;
compiler.throwInternalError(message + "\n", unexpectedException);
 else { throw unexpectedException ; return message;
 throw throwUnexpectedException(unexpectedException):(message, unexpectedException);
 throw UnexpectedExceptionUtils.throwInternalError(message, unexpectedException);
compiler.throwInternalError(message); throw unexpectedException ; } }
 throw UnexpectedExceptionHelper.throwInternalError(message, unexpectedException);
 throw message(unexpectedException);
compiler.throwInternalError(message, unexpectedException2);
compiler.addError(message); return;
compiler.throwInternalError(CaughtException. class, message, unexpectedException);
compiler.throwInternalError(message, unexpectedException, null, null);
compiler.throwInternalError(message); throwException(message, unexpectedException);
compiler.throwInternalError(message, unexpectedException, sourceName, curNode);
 throw UnexpectedExceptionFactory.throwInternalError(message, unexpectedException);
 if ( compiler!= null ) { compiler. throwInternalError ( message ) ;
 throw new IllegalArgumentExceptionException(message, unexpectedException);
 else { message = message ; } compiler.throwInternalError(message, unexpectedException);
 return sourceName + " message";
compiler.error(message, unexpectedException); }
compiler.throw(message);
 else { message = "\n" + formatNodeContext("Line number of the code that caused the exception"); } return
 throw(message);
 return "; message);
 throwUnexpectedException(message); throw super.throwInternalError(message, unexpectedException);
 else { message = ""; }
 return message + throwUnexpectedException(!unexpectedException);
compiler.throwInternalError(message, unexpectedException1);
compiler.throwInternalError(message, unexpectedException); throwUnexpectedException(unexpectedException));
 else { throwUnexpectedException1(message, unexpectedException);
 else { message = "\n" + unexpectedException ; } } }
 throw error(message, unexpectedException);
compiler.throwInternalError(message) throwException(message, unexpectedException);
compiler.throwInternalError(unknownException, message);
 else { throwUnexpectedException(!unexpectedException);
 else { message = "Unknown exception.";
 else { throw new IllegalArgumentExceptionException(message, unexpectedException);
 throwUnexpectedException(message, unexpectedException); return null;
compiler.throwInternalError(message, 0, unexpectedException);
 else { message = unexpectedException;
 throwThis(message, unexpectedException);
compiler.message(message);
 return " " + message);
 else { message = unexpectedException.getMessage() + ""; return
 else { message = "null";
 return new Exception(message);
 return message + ": "+(unexpectedException);
 return message + ": "(unexpectedException);
 else { throw new IllegalArgumentException2(message, unexpectedException);
 throw new RuntimeException(message);throwInternalError(message, unexpectedException);
compiler = null
 throw new IllegalArgumentException(formatMessage(message, unexpectedException);
compiler.throwInternalError(message, sourceName, 0, unexpectedException);
 else { message = "Unknown error" ;
 else { message = sourceName + ";" }
 return formatMessage(message);
 throw new InternalError(message);throwInternalError(message, unexpectedException);
 else { throw new IllegalArgumentValueException(message, unexpectedException);
compiler.throwInternalError(message, unexpectedException, false, false);
compiler.throwInternalError(message, unexpectedException) ; throw ( exception ) ; }
 else { throwException(message, unexpectedException);
 return message + ";
compiler.throwInternalError(message, unexpectedException, this.scopeCreator);
 else { message = "null.";
 return sourceName + message);
 throwUnexpectedException(shortMessage, unexpectedException);
 throwUnexpectedException(message); throw ErrorHelper.throwInternalError(message, unexpectedException);
 if ( message!= null ) { throw super.throwInternalError(message, unexpectedException);
 throw (Exception) compiler.throwInternalError(message, unexpectedException);
 throw unexpectedException + message;
compiler.throwInternalError(message, unexpectedException.getCode);
 logger.error(message, unexpectedException);
 return message + ": ";
compiler.throwInternalError(sourceName + message, unexpectedException);
 return message, unexpectedException);
 throw (Throwable)
 if ( sourceName. isEmpty ( ) ) { throw new RuntimeException(); }
 throw(message, null, unexpectedException);
 throwUnexpectedException(message++);
compiler.throwInternalError(message, unexpectedException) return message;
 throwUnexpectedException(short message, unexpectedException);
 throw (exception)
 else { throw unexpectedException ; } } }
 if (error!= null)
compiler.throwInternalError(message, unexpectedException) throw unexpectedException;
 else { message = "Unknown";
 if (errorException!= null) {throwInternalError(message, unexpectedException);
 throw exception(message);
compiler.throw exception();
compiler.throwInternalError(message, unexpectedException, null, null, null);
compiler.throwInternalError(exception, message);
 if (message!= null) _throwInternalError(message, unexpectedException);
 throw (Exception unexpectedException);
 return sourceName + message ; }
 return sourceName + " message;
compiler.throwInternalError(errorCode, message);
compiler.throwInternalError(UnexpectedException.NODE, message, unexpectedException);
 throw new RuntimeException ( ).throwInternalError(message, unexpectedException);
 else { throwUnexpectedException(messageString, unexpectedException);
 return " (message);
 if ( compiler!= null ) { throwUnexpectedException ( message ) ; } return
 else { return message + message;
compiler.throwInternalError( unexpectedException, message);
compiler.throwInternalError(message, unexpectedException) ; return sourceName ;
compiler.throwInternalError(message, 0, null, unexpectedException);
compiler.throwInternalError(sourceName, unexpectedException);
 if (message!= null) { _throwInternalError(message, unexpectedException);
 else { throw exception(message, unexpectedException);
compiler.throwInternalError(message, null, true);
compiler.throwInternalError(message,  unexpectedException); } }
 console.error(message, unexpectedException);
compiler.throwInternalError(message, unexpectedException) ; throw new RuntimeException(message); } }
compiler.throwInternalError(lineNumber, sourceName, message, unexpectedException);
 throw UnexpectedExceptionException.throwInternalError(message, unexpectedException);
 throw UnhandledException.throwInternalError(message, unexpectedException);
 throw UnexpectedExceptionUtil.throwInternalError(message, unexpectedException);
 else { throwError(message, unexpectedException);
 error(message, unexpectedException);
 if ( compiler!= null ) { throwUnexpectedException ( message, compiler ) }
 return message + " (unexpectedException);
compiler.throwInternalError( "Unexpected exception: ", message, unexpectedException);
 throw CxxException.throwInternalError(message, unexpectedException);
 return throwUnexpected(message, unexpectedException);
compiler.throwInternalError(message, this);
compiler.throwInternalError(UnexpectedException.CODE, message, unexpectedException);
 return message + ");
compiler.throwInternalError(message, e);
compiler.throwInternalError( unexpectedException);
compiler.addMessage();
 throw InternalErrorUtils.throwInternalError(message, unexpectedException);
compiler.throwInternalError(CaughtExceptionException. class, message, unexpectedException);
 throw CaughtExceptionUtils.throwInternalError(message, unexpectedException);
 if ( message!= null ) { super().throwInternalError(message, unexpectedException);
compiler.throwInternalError(sourceName, 0, message, unexpectedException);
compiler.writeLine(message); }
compiler.throwInternalError(message, null, false);
compiler.throwInternalError(UnexpectedException.UNKNOWN, message, unexpectedException);
 throw UnexpectedException.INSTANCE.throwInternalError(message, unexpectedException);
compiler.throwInternalError(message, 0x400, unexpectedException);
 log(message, unexpectedException);
compiler.throwInternalError(message, cause);
compiler.throwInternalError(newMessage);
compiler.throwInternalError(message); } }
compiler.throw exception;
 return message + message;
 throw ErrorUtils.throwInternalError(message, unexpectedException);
compiler.throwInternalError(message, unexpectedException, sourceName, null);
 throw UnexpectedExceptionUtilsImpl.throwInternalError(message, unexpectedException);
 return compiler.throwInternalError(message, unexpectedException);
 throw UnexpectedException.CLI.throwInternalError(message, unexpectedException);
compiler.throwInternalError(message, unexpectedException) ; throw exception ; } }
 throwUnknownException(unexpectedException);
compiler.throwInternalError(message,  unexpectedException).return;
compiler = undefined ;
 throw new Exception(unexpectedException);
 super.throwInternalError(message, unexpectedException);
compiler.throwInternalError(message, 0.1, unexpectedException);
 throw UnexpectedException.Fatal.throwInternalError(message, unexpectedException);
compiler.throwInternalError(sourceName, code, message, unexpectedException);
compiler.throwInternalError(message, unexpectedException, this.sourceName, this);
compiler.write(message); }
compiler. error ( )
 throw UnexpectedException.Failed.throwInternalError(message, unexpectedException);
 throw ErrorHelper.throwInternalError(message, unexpectedException);
compiler.throwInternalError(message, unexpectedException) ; return null;
compiler.throwInternalError(message, this, unexpectedException);
 return " " +
 return error(message, unexpectedException);
compiler.throwInternalError(message, unexpectedException) ; } return this ;
 if (errorException!= null) _throwInternalError(message, unexpectedException);
 throw ExceptionsFactory.throwInternalError(message, unexpectedException);
compiler.throwInternalError(message, unexpectedException, this.stack, sourceName);
 throw this.platform.throwInternalError(message, unexpectedException);
 throw ExceptionHelper.throwInternalError(message, unexpectedException);
compiler.throwInternalError(sourceName, false, message, unexpectedException);
 throw message + "";
compiler.throwInternalError(message, unexpectedException, this.sourceName, null);
compiler.throwInternalError(message, unexpectedException, "Unknown error occurred.");
compiler = undefined ; }
 this.throwException(message, unexpectedException);
compiler.throwInternalError(errorMessage);
compiler.throwInternalError(errorCode, message, unexpectedException);
compiler.throwInternalError(sourceName, "", message, unexpectedException);
 throw UnexpectedException.class.throwInternalError(message, unexpectedException);
 fail(message, unexpectedException);
 return ""; throw compiler.throwInternalError(message, unexpectedException);
 throw InternalErrorHandler.throwInternalError(message, unexpectedException);
compiler.throwInternalError(message, unexpectedException, "Unknown exception.");
 throw Utils.throwInternalError(message, unexpectedException);
 throw CaughtExceptionUtil.throwInternalError(message, unexpectedException);
 if (errorException!= null) #throwInternalError(message, unexpectedException);
compiler.throwInternalError(message, unexpectedException, this.sourceName + message);
 throw Caster.throwInternalError(message, unexpectedException);
 throw InternalErrorReporter.throwInternalError(message, unexpectedException);
compiler.throwInternalError(message, unexpectedException) throw exception;
 throw Exceptions.throwInternalError(message, unexpectedException);
compiler.throwInternalError(message, unexpectedException, sourceName, node);
compiler.throwInternalError(errorMessage, unexpectedException);
 throw unexpectedException.(unexpectedException);
compiler.throwInternalError(caughtException.class, message, unexpectedException);
compiler.throwInternalError(Code.UnexpectedException, message, unexpectedException);
compiler.throwInternalError(message, unexpectedException) return false;
compiler.throwInternalError(SourceName, message, unexpectedException);
compiler.throwInternalError(message, unexpectedException, "Unknown exception");
 return (void)
compiler.throwInternalError(1.1, message, unexpectedException);
compiler.throwInternalError(message, unexpectedException) ; return message ; } }
compiler.throwInternalError(shortName(), message, unexpectedException);
 return new RuntimeException(message, unexpectedException);
 return fail(message, unexpectedException);
compiler = this
 return super.throwInternalError(message, unexpectedException);
 return new Exception(unexpectedException);
compiler.throwInternalError(message + "", unexpectedException);
compiler.throwInternalError(message, unexpectedException, "Unknown error.");
 throw ErrorHandler.throwInternalError(message, unexpectedException);
compiler.throwInternalError(message, false, unexpectedException);
 throw Util.throwInternalError(message, unexpectedException);
compiler.throwInternalError(ERROR_TYPE, message, unexpectedException);
 } return message;
compiler.throwInternalError(this.name, message, unexpectedException);
compiler.throwInternalError(1.0, message, unexpectedException);
compiler.throwInternalError(message,  unexpectedException); return();
compiler.throwInternalError(message, unexpectedException, false, true);
 throw Throwables.throwInternalError(message, unexpectedException);
 return throw unexpectedException(message, unexpectedException);
 return throwUnknownException(message, unexpectedException);
 throw message);
 return this.throwInternalError(message, unexpectedException);
compiler.throwInternalError(ERROR, message, unexpectedException);
compiler.throwInternalError(1, null, message, unexpectedException);
 throw AnalysisContext.throwInternalError(message, unexpectedException);
compiler.throwInternalError(return message);
compiler.throwInternalError(message,  unexpectedException); return
 ErrorHelper.throwInternalError(message, unexpectedException);
 else return message;
 Throwables.throwInternalError(message, unexpectedException);
 throwCaughtException(message, unexpectedException);
compiler.throwInternalError(message); return
 Exceptions.throwInternalError(message, unexpectedException);
compiler.throwInternalError(throwMessage);
compiler.throwInternalError(message, unexpectedException) return;
 throw (Exception) {
compiler.throwInternalError(message, unexpectedException, null, true);
compiler.throwInternalError(message), unexpectedException);
 throw new RuntimeException(message, unexpectedException);
compiler.throwInternalError(short message, unexpectedException);
 return null;
 throw message;
compiler.throwInternalError(message, unexpectedException, stacktrace);
compiler.exit();
 throwUnhandledException(message, unexpectedException);
compiler.throwInternalError(message,  unexpectedException));
compiler.throwInternalError(message, unexpectedException, unexpectedException);
 return + message;
 report(message, unexpectedException);
compiler.throwInternalError(new message, unexpectedException);
compiler.error();
 return message;
 return "+ message;
compiler.throwInternalError(message, unexpectedException, stackPos);
compiler.throwInternalError(message,  unexpectedException)); }
 else { throw
compiler.throwInternalError(); }
compiler return message
compiler.throwInternalError(); return;
compiler message ;
compiler.message;
compiler.throwInternalError message;
 return sourceName;
compiler.throwInternalError(500, message, unexpectedException);
compiler.throwInternalError(message,  exception); return ;
compiler.throwInternalError message);
compiler.err();
compiler.throwInternalError(message,  unexpectedException());
compiler.throwInternalErrorMessage();
compiler.throwInternalError message();
 error(unexpectedException);
compiler.throwInternalError(message,  unexpectedException)
 return
compiler.throwInternalError(line, message, unexpectedException);
 exception(unexpectedException);
compiler.throwInternalError(cb, message, unexpectedException);
 throw (!unexpectedException);
 else {
 throw reporter.throwInternalError(message, unexpectedException);
compiler.throwInternalError(this, message, unexpectedException);
 super().throwInternalError(message, unexpectedException);
compiler.throwInternalError(1, message, unexpectedException);
compiler.throwInternalError(message());
 report message, unexpectedException);
compiler.throwInternalError(message));
compiler.throwInternalError(message, unexpectedException) return();
 return null, unexpectedException);
 this._throwInternalError(message, unexpectedException);
compiler.throwInternalError(message, unexpectedException, 0);
compiler.throwInternalError(message, expectedException);
 return msg);
 return null);
compiler.throwInternalError(message, unknownException);
 return null;
 } return
compiler.throwInternalError(message) }
compiler.throwInternalError(message, errorHandler);
compiler.throwInternalError(message, unexpectedError);
 return "";
 throw
compiler.throwInternalError(message) return
compiler.throwInternalError(message, unexpectedException) }
 else return
 else,
 } throw
 }
compiler.throwInternalError(Message, unexpectedException);
compiler.throwInternalError(Message);
compiler.throwInternalError(msg, unexpectedException);
compiler.throwInternalError(reason, unexpectedException);
compiler.throwInternalError(msg);
compiler.throwInternalError(reason);
