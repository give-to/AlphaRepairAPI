Iterator iter = res.entries.iterator();
 Iterator iter = res.entries.iterator;
 Iterator iter;
 Iterator iter = entries.iterator();
 Iterator iter = res.entries;
 Iterator iter = iterator();
 Iter iter = res.entries.iterator();
Iterator iter = res.iterator();
 Iterator res.entries.iterator();
 Iterator iter = res.entries.iterator);
 Iterator iter = this;
 Iterator iter = res.entries();
 Iterator iter = entries.iterator;
 Iterator iter.iterator();
 Iterator iter =.iterator();
 iter.iterator();
 res.entries.iterator();
 Iterator iter = (Iterator)res.entries.iterator();
Iterator iter = res.entries.iterator(); while (iter.hasNext()) {
Iterator iter = res.entries.iterator() while (iter.hasNext()) {
Iterator iter = res.entries.iterator(); iter.hasNext();
 Iterator iter = res.entry.iterator();
 Iterator.iterator();
Iterator iter = res.entries.iterator( while (iter.hasNext()) {
 Iterator iter =.entries.iterator();
 Iterator iter = res.entriesIterator();
Iterator iter = res.entries.iterator(); while (iter.hasNext())
 Iterator iter = this);
 Iterator iter; iter= res.entries.iterator();
 Iter iter = entries.iterator();
 iter = iterator();
Iterator iter = res.entries.iterator() while (iter.hasNext())
 Iterator iter = res.iterator(this);
Iterator iter = res.entries.iterator( while (iter.hasNext())
 Iterator iter = res.entriesIterator;
 Iterator iter = res.entries.iterator(this);
 Iterator iter = this; Iter iter= res.entries.iterator();
 Iterator iter = res.entries.iterator();
 Iterator iter = res.iterator(); iter=res.entries.iterator();
 Iterator iter = this; Iterator iter= res.entries.iterator();
Iterator iter = res.entries.iterator(); while (iter.hasNext()) { }
 Iterator iter = - res.entries.iterator();
 Iterator iterate();
Iterator iter = res.entries.iterator() while (iter.hasNext()) { }
 Iterator iter = [];
 Iterator iter = this; iter= res.entries.iterator();
 Iterator iter = res.entriesiterator();
 Iterator iter = - 1 ;
Iterator iter = res.entries.iterator( while (iter.hasNext()) { }
Iterator iter = res.entries.iterator(); iter.next();
 iter =res.entries.iterator();
 Iterator iter = res.entries.iterator(); while (iter.hasNext()) { iter.next();
 Iterator iter; Iter iter= res.entries.iterator();
 Iterator iter = res.iterator(); Iter iter= res.entries.iterator();
 Iterator iter = res.entries.iterator(); while (iter.hasNext()) { iter.next(); }
 Iterator iter = iterator(this);
 Iterator iter = res.entries;res.entries.iterator();
 Iterator iter = res.res.entries.iterator();
 Iterator iter = v.iterator();
 Iterator iter = res.iterator(*);
 Iterator iter = res.entries.iterator(); while (iter.hasNext()) { iter.advance(); }
 Iterator iter = this ;
 Iterator iter = res.entry.iterator;
 Iterator iter = res.entries.iterator(); while (iter.hasNext()) { iter.advance(); } return res;
 int iter;
 Iterator iter = res.entries.iterator(n);
 Iterator iter = -1;
 Iterator iter = null;iter = res.entries.iterator();
 Iterator iter = res.entries.iterator(); while (iter.hasNext()) { iter.advance(); } return res; }
 Iterator iter = res.ries.iterator();
 Iterator iter = this.res.entries.iterator();
Iterator iter = res.entries.iterator(); iter.hasNext() {
 Iterator iter = res.entries.iterator(); while (iter.hasNext()) { final
 Iterator iter = res.entries.iterator(0);
 Iterator iter = res.iterator());
Iterator iter = res.entries.iterator( while (iter.hasNext()) {};
 Iterator iter = res.entries.iterator().getNext();
 Iterator iter = res.entries.iterator().next();
 Iterator iter = res.entries.iterator(); }
 Iterator iter = null; Iteratoriter = res.entries.iterator();
 Iterator iter = res.entries.iterator(1);
 Iterator iter = res.iter(); Iteratoriter = res.entries.iterator();
Iterator iter = res.entries.iterator() while (iter.hasNext()) {};
Iterator iter = res.entries.iterator(); iter.hasNext()) {
Iterator iter = res.entries.iterator(); while (iter.hasNext()) {};
 Iterator iter = res.iterator(); Iteratoriter = res.entries.iterator();
Iterator iter = res.entries.iterator(); iter = null;
 res. setEntry(iter.key(), iter.value() * v[iter.key()]); } return res ;
 Iterator iter = res.entries = res.entries.iterator();
 Iterator iter = 0; Iterator iter =res.entries.iterator();
 Iterator iter = 0; iter=res.entries.iterator();
 Iterator iter = res.iter(this);
 Iterator iter = res.iterator(); res.entries.iterator();
Iterator iter = res.entries.iterator(); while (iter.hasPrevious())
 Iterator iter = res.entries.iterator(this);
 Iterator iter = res.entries(iterator);
 Iterator iter = res.iterate();
Iterator iter = res.entries.iterator() while (iter.hasNext()) { } }
 Iterator iter = res.iter(); Iter iter= res.entries.iterator();
 res. setEntry(iter.key(), iter.value() * v.getEntry(iter.key())); } return res;
 Iterator iter = res.multiply.iterator();
 Iterator iter = iterator(v);
 Iterator iter = res.entries.iterator(); while (iter.hasNext()) { iter++; }
Iterator iter = res.entries.iterator(v.length);
 Iterator iter = res.entries.iterator(); while (iter.hasNext()) { iter.move(); }
 Iterator iter = res.entries.iterator(); while (iter.hasNext()) { iter.prevvance();
 res. setEntry(iter.key(), iter.value() * v[iter.key()]); }
 Iterator iter = res.entries.iterator(); while (iter.hasNext()) { } };
 res. setEntry(iter.key(), iter.value() * v.getEntry(iter.key())); } return res; }
 Iterator iter = res.getIterator(this);
 Iterator iter = res.iterator.iterator();
 Iterator Iterator iter= res.entries.iterator();
 Iterator iter = newIterator();
 Iterator iter = res.entry(); res.entries.iterator();
 res. setEntry(iter.key(), iter.value() * v.length);
 Iterator iter = res.entries.iterator().nextIterator();
 Iterator iter = res.entries.iterator(); while (iter.hasNext()) { iter++; };
 Iterator iter = res.entries; Iteriter = res.entries.iterator();
 Iterator iter = res.entries.iterator(); advance() ;
 res. setEntry(iter.key(), iter.value() * v[iter.key()]);
 res. setEntry(iter.key(), iter.value() * v[iter.key()]); } return res; }
Iterator iter = res.entries.iterator(); iter = res.entries.iterator();
 Iterator iter = res.entries.iterator(); }
 Iterator iter = res.entries.iterator(); while (iter.hasNext()) { } }
 res. setEntry(iter.key(), iter.value()) * v.getEntry(iter.key())); } return res;
 Iterator iter = res.entries();res.entries.iterator();
 res. setEntry(iter.key(), iter.value() * v.getEntry(iter.key())); }
 Iterator iter = Iterator();
 Iterator iter = res.entries.iterator(); while (iter.hasNext()) { continue; }
Iterator iter = res.entries.iterator( while (iter.hasNext()) { } }
 Iterator iter = res.entries(); Iteriter = res.entries.iterator();
 Iterator iter = Entries.iterator();
 Iterator iter = res.entries; iter= res.entries.iterator();
 Iterator iter = res.entries.iterator(); while (iter.hasNext()) { this};
Iterator iter = res.entries.iterator(); iter = 0;
 res. setEntry(iter.key(), iter.value() * v[iter.key());
 Iterator(iter);
 Iterator iter = res.entries.iterator(); while (iter.hasNext()) { iter.move();
 Iterator iter = res.iterator(();
 Iterator iter = res.iterator();
 res. setEntry(iter.key(), iter.value() * v);
Iterator iter = res.entries.iterator( while (iter.hasNext()) { } );
 res. setEntry(iter.key(), iter.value() * v.getEntry(iter.key())); } else {
 Iterator iter = res.entries.iterator(); while (iter.hasNext() ) {
 res. setEntry(iter.key(), iter.value() * v[iter.key()]); } else {
 Iterator iter = 0; Iter iter =res.entries.iterator();
 Iterator iter = res.entries.res.entries.iterator();
 Iterator iter = res.entries.iterator(); while (iter.hasNext()) { iter.advance(); } return res; };
 Iterator iter = res.entries (*);
 res. setEntry(iter.key(), iter.value() * v[iter.key]);
 Iterator iter = res.entries.iterator()();
 Iterator iter = res.getIterator();
 res. setEntry(iter.key(), iter.value()) * v[iter.key()]); } return res; }
 Iterator iter = res.getIterator ( ) ;
Iterator iter = res.entries.iterator() while iter.hasNext();
 Iterator iter = null; Iter iter= res.entries.iterator();
 Iterator iter = res.iterator(this);
 Iterator iter = res.entries.iterator(); while (iter.hasNext()) { iter.next};
 Iterator iter = this.iter = res.entries.iterator();
 Iterator iter = res.entry() res.entries.iterator();
Iterator iter = res.entries.iterator() + 1;
 Iterator iter = res.entiterator();
 Iterator iter = res.values.entries.iterator();
 Iterator iter = res.entries.iterator(); while iter;
 Iterator iter = new Iter();
 res. setEntry(iter.key(), iter.value() * v.value());
 Iterator iter = res.entry(res.entries.iterator();
 res. setEntry(iter.key(), iter.value() * v); }
 Iterator iter = res.iterator(););
 Iterator iter = res.entries.iterator(); {
 Iterator iter = res..entries.iterator();
 res. setEntry(iter.key(), iter.value() * v[key()]);
 Iterator iter = res.ebeEntries.iterator();
 Iterator iter = res.entry(res).entries.iterator();
 Iterator iter = res.entries.values.iterator();
 Iterator iter = res.entries + res.entries.iterator();
 Iterator iter = this; Iterator iter iter= res.entries.iterator();
 Iterator iter = iterator(n);
 Iterator iter = res.data.entries.iterator();
 res. setEntry(iter.key(), iter.value() * v.length());
 Iterator iter = res.iterator(n);
 res. setEntry(iter.key(), iter.value() * v[iter.key()]); } return res; } {
Iterator iter = res.entries.iterator(); iter. advance();
 iter = res.entries.iterator(this);
 res. setEntry(iter.key(), iter.value() * v.key());
Iterator iter = res.entries.iterator(); iter = this;
Iterator iter = res.entries.iterator( while (iter.hasNext()) ) {
 res. setEntry(iter.key(), iter.value() * v[iter.key()]); } return res; final
 res. setEntry(iter.key(), iter.value() * v[iter.key()]); } return res; } }
 Iterator iter = res.entries();
 Iterator iter = res.iterator;
 res. setEntry(iter.key(), iter.value() * v[iter.key()]); } return res; } ;
Iterator iter = res.entries.iterator(); while (iter.hasPrevious()) {
 Iterator iter = iterator;
 Iterator iter = this); Iterator iter= res.entries.iterator();
 Iterator iter = res.iterator(); int iter= res.entries.iterator();
 Iterator iter =!res.entries.iterator();
 Iterator iter = res.subEntries.iterator();
 res. setEntry(iter.key(), iter.value(this));
 Iterator iter = res; Iter iter= res.entries.iterator();
 res. setEntry(iter.key(), v[iter.key()]);
 Iterator iter = res.entries();iter = res.entries.iterator();
 Iterator iter1;
 Iterator iter = 0;res.entries.iterator();
 res. setEntry((iter.key(), iter.value() * v.value()));
 Iterator iter = res.iter(); }
Iterator iter = res.entries.iterator(); while (iter.hasNext() {
 Iterator iter = res.get.entries.iterator();
 Iterator iter = null
Iterator iter = res.entries.iterator(); while (iter.hasNext());
 Iterator iter = res.rows.iterator();
Iterator iter = res.entries.iterator( while (iter.hasNext()) { break }
 Iterator iter = res.iterator().iterator;
 res. setEntry(iter.key(), iter.value() * v.size());
Iterator iter = res.entries.iterator(); if (iter.hasNext()) {
 Iterator iter = this, iter= res.entries.iterator();
 Iterator iter = iterator());
Iterator iter = res.entries.iterator() while (iter.hasNext()) { break }
Iterator iter = res.entries.iterator( while (iter.hasNext()) { break;
 Iterator iter = Iterator;
 Iterator iter = this.iterator(); Iteratoriter = res.entries.iterator();
Iterator iter = res.entries.iterator() while (iter.hasNext());
 Iterator iter = (this);
 Iterator iter = iterate();
 Iterator iter = res.entryIterator();
 Iterator iter = res.entries( ).iterator();
Iterator iter = res.entries.iterator(); Iterator iter.hasNext();
 Iterator iter = iterIterator();
 Iterator iter = iterator(0);
Iterator iter = res.entries.iterator() while (iter.hasPrevious())
 Iterator iter = res.entries.iterator(); final
Iterator iter = res.entries.iterator() while (iter.hasNext() {
 Iterator iter = this
 Iterator iter = res.map.entries.iterator();
Iterator iter = res.entries.iterator( while (iter.hasPrevious())
 Iterator iter = iterator(*);
 Iterator iter = res; iter= res.entries.iterator();
Iterator iter = res.entries.iterator() while (iter.hasNext()) { break;
 Iterator iter = entries.iterator);
 Iterator iter = res.entries.next.entries.iterator();
 res. setEntry ( v. getEntry ( iter. key ( ) )));
Iterator iter = res.entries.iterator() while (iter) {
Iterator iter = res.entries.iterator(); while (iter!= null)
Iterator iter = res.entries.iterator( while (iter.hasNext() {
Iterator iter = res.entries.iterator( while iter.hasNext()) {
Iterator iter = res.entries.iterator(); Iterator iter = iter;
 Iterator iter = ((Iterator)res.entries.iterator();
Iterator iter = res.entries.iterator(); while (iter.length)
Iterator iter = res.entries.iterator(); iter.hasPrevious();
 res. setEntry(iter.key(), v[iter.key]);
 res. setEntry(iter.key(), iter.value() + v);
Iterator iter = res.entries.iterator() while (iter.hasNext()) {};}
 res. setEntry ( v. getEntry ( ) ) ;
 res. setEntry(iter.key(), iter.value());
Iterator iter = res.entries.iterator(); iter.backward();
 Iterator iter = + res.entries.iterator();
 res. setEntry(iter.key(), v.value());
Iterator iter = res.entries.iterator() while iter.hasNext()) {
 Iterator iter);ator iter= res.entries.iterator();
 Iterator iter = res.entries.sub.entries.iterator();
 Iter iter.entries.iterator();
 res. setEntry(iter.key(), iter.value(v));
 Iterator iter = res.getEntries(this);
 Iterator iter = res.entries.iterator(); };
 Iterator iter = res.iterator(); }
 Iterator iter res.entries.iterator();
 Iterator iter, Iterator = res.entries.iterator();
 Iterator iter = this.iterator();
 res. setEntry(iter.key(), v.length);
 Iterator iter = null; Iterator olditer = res.entries.iterator();
Iterator iter = res.entries.iterator() while (iter)
 Iterator iter = res.multiply().iterator();
 Iterator iter = res.entries.iter = res.entries.iterator();
 Iterator <Entry>iter = res.entries.iterator();
 Iterator iter = res.entries.length.iterator();
 Iterator iter = (iterator) res.entries.iterator();
 Iterator iter = res.maps.entries.iterator();
 Iterator iter = res.iterator(v);
 Iterator iter = & res.entries.iterator();
 Iterator iter = null;
 Iterator iter = (Entry) res.entries.iterator();
 Iterator iter = enums.iterator();
 Iterator iter,iter = res.entries.iterator();
Iterator iter = res.entries.iterator() while (iter.hasPrevious()) {
Iterator iter = res.entries.iterator() while ((iter.hasNext()) {
 Iterator iter = v.iter();
 Iter res.entries.iterator();
 Iterator iter = res.ebeEntry.iterator();
 res. setEntry(iter.key(), iter.value()); }
 iter = this);
 Iterator iter.entries.iterator();
Iterator iter = res.entries.iterator( while iter.hasNext())
 Iterator iter = this;res.entries.iterator();
 Iterator iter = (Iter) res.entries.iterator();
 Iterator iter = res.roots.iterator();
 Iterator iter = this); Iterator olditer = res.entries.iterator();
 Iterator iter = res.matrix.entries.iterator();
Iterator iter = res.entries.iterator( while (iter.hasPrevious()) {
 iter = res.entries.iterator(); }
 res. setEntry(iter.key(), iter.value(0));
 Iterator iter = res.entriesArray.iterator();
 res. setEntry(iter.key(), v.length()); }
 Iterator iter = -v.iterator();
Iterator iter = res.entries.iterator( while (iter!= null)
Iterator iter = res.entries.iterator() while (iter!= null)
 Iterator iter = res.entries(iter);
Iterator iter = res.entries.iterator( while iter.hasNext();
Iterator iter = res.entries.iterator(); iter.next() {
 Iterator iter = res.entry.entries.iterator();
 int start = 0;
 res. setEntry(iter.key(), v.value()));
 Iterator iter = res.entries.(iterator);
 res. setEntry(iter.key(), iter.value()));
 int start = - 1 ;
Iterator iter = res.entries.iterator() while (iter.done())
 Iterator iter = (iter)res.entries.iterator();
 iterate();
Iterator iter = res.entries.iterator( while (iter.done())
 Iter iter.iterator();
 Iterator iter = null;
 Iterator iter = -1.iterator();
 iter = 0);
 Iterator iter = resentries.iterator();
Iterator iter = res.entries.iterator( while (iter.next())
 Iterator iter = null;res.entries.iterator();
 Iterator iter = this; iter *= res.entries.iterator();
 Iterator iter.iter = res.entries.iterator();
 Iterator iter = res.entries.iterator;
 Iterator iter2;
 Iterator iter,= res.entries.iterator();
Iterator iter = res.entries.iterator() while (iter.next())
 Iterator iter = results.iterator();
 Iterator iter = res.mappings.entries.iterator();
 Iterator iter = iter1;
 Iterator iter = 0);
 Iterator iter = r.iterator();
 res. setEntry(iter.key(), v.length());
 Iterator iter(*);
 Iterator iter++;
 Iterator<Double>iter = res.entries.iterator();
Iterator iter = res.entries.iterator( while (iter) {
Iterator iter = res.entries.iterator() while (iter.length);
Iterator iter = res.entries.iterator(while.hasNext();
 Iterator iter = res.entries.iterator(); } final
Iterator iter = res.iterator
 Iterator iter = 0 ;
 Iterator iter = res.entryIterator;
Iterator iter = res.entries.iterator() iter.next();
 Iterator iter = r.iterator;
Iterator iter = res.entries.iterator() while (iter++) {
 Iterator iter = this.subentries.iterator();
 Iterator iter();
 Iterator iter = this ; final
 Iterator iteriter= res.entries.iterator();
 Iterator iter) {
 Iterator iterr;
 Iterator(int)iter = res.entries.iterator();
Iterator iter = res.entries.iterator() while(hasNext())
 Iterator iter = this; iteriter = res.entries.iterator();
 Iterator iter = res.extended.entries.iterator();
 Iterator iter; final
 Iterator iter++();
 Iterator iter = res.entries.iter;
 Iterator = entries.iterator();
 Iterator iter = res.entries.iter);
 Iterator iter = Res.entries.iterator();
 Iterator iter; iter *= res.entries.iterator();
 Iterator iter = iter0;
 int end = 0;
 Iterator iter, iter2= res.entries.iterator();
Iterator iter = res.entries.iterator() - 1;
 Iterator iter = entry.iterator;
 Iterator.entries.iterator();
Iterator iter = res.entries.iterator(iter.key());
 Iterator iter = 0;
 Iterator iter = 0 ; final
 Iterator iter);
 Iterator iterg();
Iterator iter = res.entries.iterator() while(hasNext());
 return res; }
 Iterator iter = mr.entries.iterator();
 Iterator iter = null);
 Iterator iter = ;
 Iterator iter = thisMap.entries.iterator();
Iterator iter = res.entries.iterator( while(hasNext());
 checkIndex(index);
 Iterator iter = Res.entries.iterator;
 Iterator iter = rows.iterator;
 Iterator iter;
 Iter iter = iterator();
 Iterator iter(();
 iter = entries.iterator();
Iterator iter = res.entries.iterator(-1);
 Iterator iter = iter();
 Iterator niter = res.entries.iterator();
 Iterator iter = null; iteriter = res.entries.iterator();
Iterator iter = res.entries.iterator() iter = 0;
 Iterator iter = _iterator();
 Iterator iter = res._entries;
Iterator iter = res.entries.iterator() while (iter);
 Iterator iiter = res.entries.iterator();
 Iterator iter = envs.iterator();
 Iteration iter = res.entries.iterator();
 Iter iter = res.iterator();
 Iterator iterr = res.entries.iterator();
 Iterator subiter = res.entries.iterator();
 Iterator();
 iter = this;
 Iterator iter = entry.iterator();
 Iterator iter_iter = res.entries.iterator();
 Iterator iter = rows.iterator();
 iter = res.entries.iterator().next();
 Iterator iter = res.entries.iter();
 int iter;
 Iterator iter); iter= res.entries.iterator();
 Iterator iterator();
 iter = null);
 Iterator = res.entries.iterator();
 iter = 0;
 iter(this);
 Iterator iter = -iterator();
 Iterator olditer = res.entries.iterator();
 iter.next();
 Iterator _iter = res.entries.iterator();
Iterator iter = resIterator();
 iter = null;
 Iterator iterator;iter = res.entries.iterator();
 }
 Iterator <
 Iterator Iterator <iter = res.entries.iterator();
 Iterator iterator = res.entries.iterator();
 Iter iter;
 Iter iter = r.iterator();
 Iterator iter = rs.entries.iterator();
Iterator iter = res.entries.iterator(v.length());
 Iterator();
 iter =.iterator();
Iterator iter = res.entries.iterator(iter.length);
 Iterator iter = 1;
Iterator iter = res.entries.iterator(n - 1);
Iterator iter = res.entries.iterator(dimensions);
 Iterator iterator iter= res.entries.iterator();
Iterator iter = res.entries.iterator(dimension);
 Iterator iter = res.ntries.iterator();
Iterator iter = res.entries.iterator(i);
 Iterator;
 Iterator inner.entries.iterator();
Iterator iter = res.entry
 Iterator iter = it();
 int i;
Iterator iter = res.entries.iterator(index) ;
 Iterate();
Iterator iter = res.entries.iterator() + v;
 int i;
Iterator iter = res.entries.iterator() - 1
Iterator iter = res.entries.iterator() while iter;
 iter.entries.iterator();
Iterator iter = res.entries.iterator() while {
 iterator iter= res.entries.iterator();
Iterator iter = res.entries.iterator() do {
 Iterator iter._iterator();
 Iterator inner = res.entries.iterator();
Iterator iter = resiterator();
Iterator iter = res.iter();
 Iter iterator = res.entries.iterator();
 Iter iter);
Iterator iter = res.entries.iterator() while();
 IterIter.iterator();
 iter = res.iterator();
Iterator iter = res.Entries.iterator();
 IteratorIter iter= res.entries.iterator();
 iter(*);
 Iterator iter = this.entries.iterator();
 = res.entries.iterator();
 int iter);
 do {
 iterator.iterator();
 Iterator inner iter= res.entries.iterator();
 } {
 int index;
Iterator iter = res.entries iterator;
 Iterator ir = res.entries.iterator();
 Iter iterator.iterator();
ator iter= res.entries.iterator();
 iter();
 } final
 Iterators();
Iterator  iter =
 int n;
Iterator iter = res.entries.iterator() while;
 iter iter= res.entries.iterator();
 iter res.entries.iterator();
 iter = r.iterator();
 iter++();
 };
 Iterator inter =res.entries.iterator();
 iter = this;
 Iterator iterator.iterator();
 -----------------------------------------------------------------------
 final
 --------------------------------------------------------------------
 init.entries.iterator();
 Iterator rs.entries.iterator();
 iter = null;
 Iterator this.entries.iterator();
 Iterator result.entries.iterator();
 Iterator ir;
 iter = 0;
Iterator iter = res.entry();
 iter._iterator();
Iterator iter = res.entries.iterator());
 Iter this.entries.iterator();
Iterator iter = res.iter;
 Iterator loop= res.entries.iterator();
 iterator=res.entries.iterator();
 Iteratorsiter = res.entries.iterator();
 Iterateiter = res.entries.iterator();
 IterIteratoriter = res.entries.iterator();
Iterator iter = res.entries.Iterator();
Iterator iter := res.entries.iterator();
Iterator iter, res.entries.iterator();
Iterator iter is res.entries.iterator();
