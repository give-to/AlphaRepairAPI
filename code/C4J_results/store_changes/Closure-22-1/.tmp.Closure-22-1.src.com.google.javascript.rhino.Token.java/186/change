case EQ:              return "EQ";
case EQ:              return  EQ;
 case BITEQ:              return "EQ";
 case EQ:
case  EQ:
 case EQ: case EQ:              return "EQ";
 case NE: return "NE;
 case EQ;
case EQ:              return  "EQUAL";
 case EQ: return " EQ;
case EQ:              return  "EQE";
case EQ:              return  "EQ"; case EQ;
case EQ:               case NE:
 case EQreturn "EQ";
case EQ:              return  "EQ"; case NE: case EQ;
case EQ:              return "EQ" ; case EQ : return "EQ";
 case EQ: case EQ: case EQ:              return "EQ";
case EQ:              return  "EQ"; case EQ:
 case EQ; case EQ:              return "EQ";
case EQ: return "eq";
case EQ:              return  "EQEQ";
case EQ:              return  "eq"; case NE: return "ne";
 case EQ: case EQ; case EQ:              return "EQ";
 case NE: case EQ;
 case BITOR: return "BITOR;
 case BITOR: return "BITOR";
 case BITEQ: return "BITEQ";
case EQ:              return  " EQ"; case NE: return "NE";
 case EQ: case EQ: #"EQ";
 break;
 case BITOR: return "BITXOR";
case EQ:              return  "EQ"; case EQ: case EQ;
 case EQ; case EQ; case EQ:              return "EQ";
 case NE: return "NE";
 case EQ::"EQ";
 case EQ: return "eq;
case  BITOR: return "BITOR";
 case EQUALS: case EQUALS; case EQ:              return "EQ";
 case EQUALS: case EQ:              return "EQ";
 case EQ: case EQ;
case  BITOR: return "BITXOR";
case EQ:              return  "EQ"; case NEQ:
case EQ:              return  "EQ"; case LE: case LT:
case EQ:              return  "eq"; case NE: case EQ;
 case LE: return "LE;
case EQ: case NEQ:
case EQ:              return "EQ" ; case NE: return "NEG";
case EQ:               case NE;
 case BITNOT: return "BITNOT";
 case EQ|EQ:              return "EQ";
case EQ:              return  "EQ"; case NEG:
case EQ:              return  "EQ"; case NE, LT:
 case EQ: case EQ"; case EQ:              return "EQ";
 case EQUALS: case EQ; case EQ:              return "EQ";
 case BITNOT: return "BITNOT;
 case BITOR;
 case GE: return "GE;
 case EQ: case EQ: case NEQ:              return "EQ";
 case EQ, NE:              return "EQ";
case EQ:              return "EQ" ; case NE: return "NEQ";
 case BITOR: return "BITOR"; case EQ:
 case BITOR: return "BITOR"; }
case EQ:              return "EQ" case NE: return "NE";
case EQ:              return  "EQ; case EQ;
case EQ:              return "EQ" ; case EQ : return "eq";
 case EQEQEQE:              return "EQ";
 case EQEQEQEQEEQ:              return "EQ";
case EQ:              return  "EQ"; case EQ }
case EQ:              return "EQ" ; }
case EQ:              return  "QE";
 case EQ: return "EQ";
 case EQ: case EQ: case NE:              return "EQ";
 case EQ: case NE: case EQ:              return "EQ";
case EQ:              return  "QUE";
case EQ:              return "EQ" ; case NE: return "NEGE";
 case EQUALS: return "Equals";
 case BITEQ:
 case BITOR:
 case BITOR: return "BITXOR;
 case NEEQ: case EQEQ:              return "EQ";
 case NEEQ: case EQ: case EQEQ:              return "EQ";
 case LE: case LT;
 case EQE:              return "EQ";
 case EQ: case EQ...return "EQ";
 case NEGEQ: case NEGEQ: case NEGEQ: case NEGEQ: case EQ:
case EQ:              return "EQ" ; default : return "Unknown token" ; }
 case NEEQ: case EQ; case EQEQ:              return "EQ";
 case NE: return "BITNE;
 case BITNOT: return "BITNOT"; }
case  NE: return "NE";
 case NE: return "NEG";
case EQ:              return  "EQ"; case EQUAL:
 case NE: return "NNE;
 case NEEQ: case EQ: case NEEQ:              return "EQ";
 case NEGEQ: case NEGEQ: case NEGEQ: case NEGEQ: case NE:
case EQ:              return  "EQ"; case EQUALS:
 case EQEQ: case EQ: return"EQ";
case EQ:              return "EQ" ; case EQ : return "EQ"; }
 case NEGEQ: case NEGEQ: case NEGEQ: case NEGEQ: case NEEQ:
case EQ:              return "EQ" case NE: case EQ;
case EQ:              return  "EQ; case EQ";
 case NEGATIVE: case NEGATIVE: case NEGATIVE: case NEGATIVE: case NEGATIVE: case NEGATIVE
case EQ:              return  "EQUALQ";
 case EQUALS: return "EQUALS";
 case EQQ:              return "EQ";
 case NE: case NE;
case EQ:              return "EQ" case EQ:
 case EQEQ, NEEQ:              return "EQ";
case  NEGE: return "NEGE";
 case BITEQ: return "BITEQ"; }
 case EQEQEQ:              return "EQ";
 case EQEQ: case NEEQ:              return "EQ";
 case NEGEQ: case NEGEQ: case NEGEQ: case NEGEQ: case NEQ:
case EQ:              return "EQ" ; case EQ : case NE:
 case BITOR: return "OR;
 case NE: return NE;
 case NEGEQ: case NEGEQ: case NEGEQ: case NEGEQ: case NEGEQ
case  NE: return "BITNE";
 case NEGEQ: case NEGEQ: case NEGEQ: case NEGEQ: case NEG;
 case BITNOT: return "BITNOT"; case EQ:
 case EQ: case EQ+"EQ";
 case EQ: return +"EQ";
 case NEGEQ: case NEGEQ: case NEGEQ: case NEGEQ: break;
 case NEGE: case NEGE: case NEGE: case NEGE: case NEGE: case NE:
 case NEGE: case NEGG: case NEGH: case NEGW: case NEGE: case NEG;
 case EQUALS: return "equals";
 case NEGE: case NEGF: case NEGF: case NEGE: case NEGE: case NE:
 case NE: return "NEG;
case  LE: return "LE";
 case EQ: case EQ #"EQ";
 case NEGEQ: case NEGEQ: case NEGEQ: return "NEGEQ";
 case BITOR: return "BIT";
 case BITEQ : return "BITEQ"; case EQ:
 case NEGE: case NEGE: case NEGE: case NEGE: case NEGE:
 case NEGE: case NEGE: case NEGE: case NEGE: case NEGE: case NEG;
 case EQ: case EQ,return "EQ";
 case NE: return "NEQ";
case EQ:              return  "EQ"; case NEQE:
case EQ:              return  "EQUAL EQ";
case  BITOR: return "BITOR" ; }
 case NEGATIVE: case NEGATIVE: case NEGATIVE: case NEGATIVE: case NEGATIVE;
 case NEGE: case NEGE: case NEGE: case NEGE: case NEGE: }
 case EQEQ: case EQ: #"EQ";
 case NEGEQ: case NEGEQ: case NEGEQ: case NEGEQ:
case  NEG: return "NEG";
 case NEGATIVE: case NEGATIVE: case NEGATIVE: case NEGATIVE: case NEGATIVE:
 case NEQEQEQEQ:              return "EQ";
 case NEGEQ: case NEGEQ: case NEGEQ: case NEGEQ; case EQ:
 case NEGEQ: case NEGEQ: case NEGEQ: case NEGEQ: default:
case EQ:              return "EQ" ; default : return "Unknown"; }
 case EQ: return "eq";
 case EQ: case EQEQ, NEEQ:              return "EQ";
 case NEGATIVE: case NEGATIVE: case NEGATIVE: return "NEGATIVE"; case EQ:
 case EQEQEEQ:              return "EQ";
 case BITXOR:
 case EQ: case EQ;return "EQ";
 case NEGE: case NEGE: case NEGE: case NEGE: case NEGE;
 case NEGEQ: case NEGEQ: case NEGEQ: case NEGEQ: case GE:
 case NEGEQ: case NEGEQ: case NEGEQ: case NEGEQ: case NOT:
case EQ:              return  "ENQE";
 case NEGE: case NEGE: case NEGE: case NEGE: case NEGE;
 case EQ+"EQ";
case  BITEQ:
 case BITEQ : case BITEQ : case BITOR : case BITOR : case BITAND :
 case NEGE: case NEGF: case NEGF: case NEGE: case NEGF:
 case NEGE: case NEGE: case NEGE: case NEGE: case NEGE:
case  BITNOT: return "BITNOT"; }
 case EQ: #"EQ";
case  BITOR:
 case NEGEQ: case NEGEQ: case NEGEQ: case NEGEQ: }
 case BITOR: case BITOR:
 case NEGEQ: case NEGEQ: case NEGEQ: case NEGEQ;
 case BITOR: return "BITOR"; case BITAND: return "BITAND"; case EQ:
 case BITOR: return "BITOR"; case BITOR: return "BITOR"; case EQ:
 case EQ, EQ:              return "EQ";
 case EQ: case EQEQ | NEEQ:              return "EQ";
 case NEGE: case NEGW: case NEGH: case NEGI: case NEGJ:
 case NEGEQ: case NEGEQ: case NEGEQ: return "NEGE";
 case EQUALS: case EQ: #"EQ";
case EQ: case EQUALS:
 case NEQ: case NEEQ, EQEQ:              return "EQ";
 case NEGE: case NEGE: case NEGE: case NEGE: case NEGE: {
 case EQEQEQEQ:              return "EQ";
 case NEQ: case NEE: caseEQ:              return "EQ";
 case NEGE: case NEGF: case NEGF: case NEGE: case NEGE: }
 case EQEQ: case EQEQ:              return "EQ";
 case NEEQ: case NEEQEQ:              return "EQ";
case  NE: return "NEG";
 case EQ: return "+"EQ";
 case EQ, NE, or LT:              return "EQ";
case EQ:              return  "eq"; case NE: case EQ:
 case BITOR: return "BITOR"; break;
 case NEGE : return "NEGE"; case NE : return "NNE";
case EQ: case NEQ;
 case NEQ: case EQ: caseEQ:              return "EQ";
case  BITXOR:
 case EQUALS:
 case NEGATIVE: case NEGATIVE: case NEGATIVE: return "NEGATIVE" case EQ:
 case BITEQ : case BITEQ : case BITNE : case BITNE : case BITAND :
 case NEGE: case NEGE: case NEGE: case NEGE: case NE:
 case BITOR: return "BITOR"; case BITOR: return "BITOR"; case NE: case EQ:
 case BITOR: return "BITOR"; case EQUALS:
 case NEGATIVE: case NEGATIVE: case NEGATIVE: return "NEGATIVE";
 case BITEQ : case BITEQ : case BITOR : case BITAND : case BITOR :
 case BITEQ : case BITEQ : case BITNE : case BITNE : case BITGT:
 case BITOR: return "BITOR"; case BITOR: return "BITOR"; case BITXOR:
case EQ:              return "EQ" ; case EQ : case NEQ;
case EQ(token) : return "EQToken";
 case NEEQ: case EQ, EQEQ:              return "EQ";
 case NEGATIVE: case NEGATIVE: case NEGE: return "NEGE";
 case EQR:              return "EQ";
case EQ:              return "EQ" case EQ : case EQ;
 case BITEQ : case BITEQ : case BITOR : case BITOR : case BITAND :
 case EQ: return "EQE";
 case NEGE: case NEGF: case NEGG: case NEGT: case NEG;
 case BITEQ: return "BITEQ"; break;
 case EQEQ | NEEQ:              return "EQ";
 case EQ: return u"EQ";
case EQ(token) : return "EQ";
 case NEGATIVE: case NEGATIVE: case NEGATIVE: case NEGATIVE: case NEGATIVE
 case EQ or NEQ:              return "EQ";
 case NEGE: case NEGE: case NEGE: case NEGE: case NEE:
 case NEGE: case NEGG: case NEGT: case NEGU: case NE:
 case BITEQ : return "BITEQ"; case NE:
 case NE: case EQ:
 case BITEQ : case BITEQ : case BITNE : case BITNE : case EQ :
 case NEGATIVE: case NEGATIVE: case NEGATIVE: case NEGATIVE: case NE:
 case BITEQ : return "BITEQ; case EQ:
 case NEGATIVE: case NEGATIVE: case NEGATIVE: return "NEGATIVE" break;
 case NEGE: case NEGF: case NEGG: case NEGT: case NE:
 case NEGEQ: case NEGEQ: case NEGEQ: return "NEG";
 case NEGATIVE: case NEGATIVE: case NEGATIVE: return "NEGATIVE"; case NE:
 case BITOR: return "BITOR"; case BITOR: return "BITXOR";
 case BITEQ : case BITEQ : case BITAND : case BITAND : case BITOR:
case EQ:              return  "NE"; case EQ;
 case NE: case EQ;
 case EQ: case EQNE:              return "EQ";
case EQ:              return  "IDQ";
 case EQE, NEEQ:              return "EQ";
 case BITOR: return "BIT;
case  BITOR: case BITOR:
 case BITEQ : case BITEQ : case BITOR : return "BITOR"; case EQ:
 case EQ: case EQE, EQEQ:              return "EQ";
 case BITEQ : case BITEQ : case BITNE : case BITNE : case BITAND :
case  BITOR: case BITXOR:
 case NEGEQ: case NEGEQ: case NEGEQ: case NEGEQ
 case BITEQ : return "BITEQ" ; } }
 case EQE, EQEQ:              return "EQ";
 case NEGE : return "NEGE"; case NE : return "NEE";
case EQ:              return "EQ" + "EQ";
 case BITEQEQEQEQEQEQEQE;
 case BITOR: return "BITOR"; case BITXOR: return "BITXOR"; }
 case BITOR: return "BITOR"; case BITOR: return "BITOR"; case NE:
 case EQ: case EQOR:              return "EQ";
case  NE: return "NEGE";
 case NEGE : return "NEGE" case NE : return "NNE";
 case NEGATIVE: case NEGATIVE: return "NEGATIVE"; case NEGATIVE:
 case NEGE : return "NEGE" ; case NE : return "NE";
case  NE: return "NNE";
 case NEQ: case NEQ|EQ:              return "EQ";
 case EQ: case EQN:              return "EQ";
case EQ:              return "EQ" ; case NE: return "NE" ; }
 case BITNOT: return "BITNAN;
 case BITNOT:
 case BITOR: return "BITOR"; case NE: return "NE";
 case EQ: case!EQ:              return "EQ";
 case BITOR: return "BITOR"; case BITAND: return "BITAND"; }
 case NEGE : return "NEGE"; case NE : return "NEG";
case EQEQ: return "EQEQ";
 case BITEQ: case BITEQ: return "BITEQ";
 case NEGATIVE: case NEGATIVE: case NEGATIVE: case NEGATIVE: case 0:
case  BITOR: case BITOR;
case  BITNOT:
 case BITNOT: return "BITNEG;
 case BITEQ : case BITEQ : case BITEQ : case BITEQ :
case  NEG : return "NEG" ; }
 case EQ: case EQ: return +"EQ";
 case BITEQ : case BITEQ : return "BITEQ" ; }
 case BITXOR;
case EQ(token) : case EQ(token) :
 case EQ: case ~EQ:              return "EQ";
 case BITOR: return "BITOR"; case BITAND: return "BITAND";
 case EQUALS: case EQUALS:              return "EQ";
 case BITOR: return "BITOR"; case NE: return "NE"; case EQ:
 case BITEQEQEQEQEQEQEQNE:
 case BITNOT: return "BITNON;
case EQ:              return "EQ" + "BITOR";
 case BITEQEQEQEQEQEQEQE";
 case BITEQEQEQEQEQEQEQE:
 case BITOR: return "BITOR"; case EQ: return "EQE";
 case EQ(token)return "EQ";
 case EQ|NE:              return "EQ";
 case BITEQ : case BITEQ : return "BITEQ"; case BITNE:
 case EQ: case BITEQ:              return "EQ";
 case EQ: case EQ: return u"EQ";
 case BITEQ : case BITEQ : case BITNE : case BITNEGE :
case EQE: return "EQE";
 case BITEQ : return "BITEQ"; case BITOR:
 case NEGE: case NEGE: return "NEGE"; case NEG;
 case BITEQ: case NEEQ:              return "EQ";
 case BITOR: return "BITOR"; case EQ: return " EQ";
 case BITEQ : case BITEQ : case BITNE : case BITEQE :
 case NEGE: return "NEGE"; case NE: case EQ:
 case BITNOT: return "BITNOP;
 case BITEQ : case BITEQ : case BITNE : case BITEQ2 :
 case BITZERO:
case EQ:              return "EQ" case EQ : case NE:
 case BITNOT(token) : return "BITNOT(token)"; break;
case EQ:              return "EQ" ; case EQ : break ;
 case EQ: case NOTEQ:              return "EQ";
 case EQ: case NE;
 case EQ: case EQE: #"EQ";
 case NEGE : return "NEGE" case NE : case EQ:
case EQ(token) : return "EQUAL";
 case BITOR: case BIT:
 case EQUALS: case EQ;
case EQA: return "QEA";
case  BITOR: return "BITOR" break;
 case NEQ|EQ:              return "EQ";
 case BITEQ: case BITEQ: return "BITEQ"; break;
 case BITEQ: case BITEQ: return "BITEQ"; default:
case EQ, NE:
 case BITOR: return "BITOR"; case EQ: return "eq";
case  LE: case LT:
 case BITOR: return "BITOR"; case BITOR: return "BITOR"; }
 case BITOR: case NE: return "NE;
 case NE:
 case BITEQ : case BITEQ : case BITOR : return "BITOR" ;
case EQ(token);
case  NE: case EQ:
 case BITNOT(int) : return "BITNOT(int)"; break;
 case BITNOTES : return "BITNOTES"; case BITOR:
 case EQ: return b"EQ";
 case NE|EQ:              return "EQ";
 case EQUALS: case EQUALS2:return "EQ";
 case BITEQ : case BITEQ : case BITOR : return "BITOR"; }
 case NEGE : return "NEGE" case NEEGE:
 case BITNOTES : return "BITNOTES" ; case EQ:
 case NE: return "BITNEG;
 case BITNOT: return "BITNON";
 case NEGE: case NEGE: return "NEGE"; }
 case BITEQ: case BITEQ: return "BITEQ"; }
 case BITEQ : case BITEQ : case BITNE : case BITEQE :
 case BITEQ: case BITEQ: return "BITEQ" break;
 case LE: case LT:
 case BITOR: return "BITOR"; case EQ: return "IQ";
 case EQ|"EQ";
 case EQ(token))return "EQ";
 case BITOR: case "BITOR;
 case NEGE : return "NEGE"; case NEEGE:
 case BITNOT: return "BITNONNULL;
 case BITEQ : case BITEQ : case BITNE : case BITEQ2 :
 case BITOR: break;
case EQ:              return "EQ" case EQ case NE:
 case BITBOUND:
 case EQ: case EQU:              return "EQ";
case  BITNOT: return "BITNOT; }
 case NE: return "NEGE;
 case BITOR: return "BITOR$1;
case EQ:              return "EQ" ; } }
 case NEGE : return "NEGE"; case NEGG:
 case NEGE : return "NEGE" ; case NEG;
 case EQ: case EQ::"EQ";
case EQOR:
 case BITZeros:
case EQ:              return "EQ" case NEG:
case EQ:              return "EQ" case EQ case EQ;
 case BITOR: return "BITOR_DEF;
 case NEQ:
 case BITEQ;
case  BITZERO:
case EQ : return "EQ(token);
 case EQ+EQ:              return "EQ";
case EQ: case GT:
 case EQ|NOTEQ:              return "EQ";
 case EQ: case EQreturn "EQ";
case  BITNEG:
 case BITNOT;
case EQ|EQ;
 case EQEQ: case EQ...return "EQ";
 case EQUALS: case EQUALS_ALL:return "EQ";
 case EQ: returns"EQ";
case EQ:               case EQ: case NEQ:
 case BitEQ:              return "EQ";
 case EQUALS: case EQUALS() :return "EQ";
 case EQUALS: case EQUALS() #return "EQ";
 case EQ-EQ:              return "EQ";
case EQ:               return "eq"; case NE: return NE;
case EQ(token):
case EQ:               case NE: return "EQ";
case  NE:
 case NEG;
case EQ:               return "QUE"; case EQ;
case  LE: case GT:
case EQ, NE,
case EQ|GT:
 default:
case EQ : return "EQ(eq)"
 case EQUALS_EQ:              return "EQ";
case EQ:              return "EQ" ; break ;
 }
 case EQUALS: case EQUALS() {return "EQ";
case EQ:               case EQ: case NE:
case  BITZeros:
 case BIT"EQ";
case EQ:              return "EQ" case EQ;
case EQ:               case NE: case NEQ:
case EQ:               case NE: case EQ;
case EQ:               return "eq"; case EQ: case EQ;
case EQ:               if (token) { return "eq"; }
 case EQ::return "EQ";
 case BITZERO;
 case EQUALS: case EQUALS2...return "EQ";
 case EQ...return "EQ";
case EQ:               case EQ: case EQ;
 case NE;
case EQ:              return "EQ" ; default:
case EQQ:
case EQ:              return  "INC";
case EQ:               return "EQ" break;
case EQE:
case EQ:               case NE: case NEQ;
case  BITLE:
 case NE: break;
case  NEG:
 case EQ": return"EQ";
 case BYTE;
 case EQ;
 case EQ+return "EQ";
 case NE"EQ";
 default :return "EQ";
case EQ:              return  "NE";
case EQR:
case EQ:               break;
 case NE: return;
case EQA:
 case GE:
case EQ:               case EQ
case EQ:              eq;
 case BITX;
 case LTE:
 case eqreturn "EQ";
 } }
 case EQU:return "EQ";
 case EQ"EQ";
 case ^"EQ";
 case EQUAL:              return "EQ";
case EQ:              return  "IQ";
 case ~"EQ";
case EQ:              return "EQ" break }
 case NOT;
 case EQ2:              return "EQ";
case  GE:
case  EQ,
 case LTE;
 case GE;
case EQ:              return  EQ";
 case Ereturn "EQ";
 case BigEQ:              return "EQ";
 case ISEQ:              return "EQ";
 case?EQ:              return "EQ";
case EQ:               case NE
case EQ:              return  eq;
 case EG:              return "EQ";
 case Equ:              return "EQ";
 case EC:              return "EQ";
case EQ:              return  EQ';
case EQ,              return "EQ";
case EQ':              return "EQ";
