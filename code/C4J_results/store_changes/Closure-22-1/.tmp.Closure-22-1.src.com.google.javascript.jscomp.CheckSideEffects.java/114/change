 {
 { if (n == parent.getFirstChild() || n == parent.getFirstChild().getNext().getNext())
 { if (n == parent.getFirstChild() || n == parent.getFirstChild().getNext())) {
 { if (n == parent.getFirstChild() || n == parent.getFirstChild().getNext().getNext()))
 { if (n == parent.getFirstChild() || n == parent.getFirstChild().getNext().getNext())) {
 { if (n == parent.getFirstChild() || n == parent.getLastChild().getNext().getNext())) {
 { if (n == parent.getFirstChild() || n == parent.getLastChild().getNext().getNext()))
 { if (n == parent.getFirstChild() || n == parent.getLastChild().getNext().getNext())
 { if (n == parent.getFirstChild() || n == parent.getFirstChild().getNext()))
 { if (n == parent.getFirstChild() || n == parent.getSecondChild().getNext().getNext())) {
 { if (n == parent.getFirstChild() || n == parent.getFirstChild().getNext())
 { if (n == parent.getFirstChild()) { continue; } else if (n == parent.getLastChild()) {
 { if (n == parent.getFirstChild()) { continue; } if (n == parent.getFirstChild().getNext()) {
 { if (n == parent.getFirstChild()) { continue; } if (n == parent.getLastChild()) {
 { continue; } else if (an.getType() == Token.BLOCK) {
 { if (n == parent.getFirstChild() && n == parent.getLastChild().getNext().getNext())
 { if (n == parent.getFirstChild() || n == parent.getFirstChild().getNext().getNext()) {
 continue; if (an == gramps)
 { if (n == parent.getFirstChild() || n == parent.getLastChild().getNext().getNext()) {
 { if (n == parent.getFirstChild() && n == parent.getFirstChild().getNext().getNext())
 { if (n == parent.getFirstChild() || n == parent.getLastChild().getNext())) {
 { if (n == parent.getFirstChild()) { continue; } if (n == parent.getLastChild()) { } else {
 { if (n == parent.getFirstChild()) { continue; } if (n == parent.getLastChild()) { break; }
continue; if (an == gramps) {
 { if (n == parent.getFirstChild()) { continue; } if (n == parent.getLastChild()) { } else
 { if (n == parent.getFirstChild() || n == parent.getFirstChild().getNext()) {
 { if (n == parent.getFirstChild() || n == parent.getLastChild()) {
 { if (n == parent.getFirstChild() || n == parent.getLastChild())) {
 continue; if (an.getType() == Token.FOR)
 { continue; } else if (an.isExprResult()) {
 { if (n == parent.getFirstChild() || n == parent.getLastChild() || n == parent.getParent() )
 { if (n == parent.getFirstChild() && n == parent.getFirstChild().getNext())) {
 { if (n == parent.getFirstChild() || n == parent.getLastChild() || n == parent.getNext()))
 continue; if (an.isExprResult())
 { continue; } if (an.getType() == Token.BLOCK) {
 { if (an == gramps)
 { if (n == parent.getFirstChild() && n == parent.getLastChild().getNext())) {
 continue; if (an.getType() == Token.BLOCK)
 return; if (an == gramps)
 { if (n == parent.getFirstChild() || n == parent.getLastChild().getNext()))
 { continue; } if (an.isExprResult()) {
continue; if (an!= gramps) {
 continue; if (ancestorType == Token.EXPR_COMMA)
 continue; if (an.getType() == Token.EXPR_NAME)
 continue; if (an.getType() == Token.STRING)
continue; if (an == parent) {
continue; if (an.isCall() ) {
 { if (n == parent.getFirstChild()) { continue; } if (n == parent) {
 continue; if (an == parent)
 continue; if (an.isExprResult(n))
 { if (n == parent.getFirstChild() || n == parent.getLastChild() )
 { continue; } else if (an.getType() == Token.FOR) {
 continue; if (ancestorType == Token.EXPR_BLOCK)
 { continue; } else if (an.getType() == Token.FOR)
continue; if (an.isName() ) {
 return; } else {
 continue; if (an == n)
continue; if (an!= parent) {
 continue; if (an.getType() == Token.COMMA)
 continue; if (ancestorType!= Token.EXPR_COMMA)
continue; } else {
continue; if (an!= null) {
 { continue; } else if (an.getType() == Token.STRING) {
 { continue; } if (an == gramps) {
 { continue; } else if (an.getType() == Token.STRING)
 continue; if (an.getType() == Token.EXPR_BLOCK)
 continue; if (an.getType() == Token.EXPR_COMMA)
 { if (n == an.getNext() || n == an.getLastChild()) {
continue; if (an == n) {
 { continue; } else if (an.isExprResult())) {
 if (an == gramps)
 { if (n == parent.getFirstChild() || n == parent.getFirstChild())) {
 { return; } else
 continue; if (an.getType() == Token.EXPR_RESULT) break;
 { if (n == parent.getFirstChild()) { continue; } if (n == parent)
 continue; else if (an.isExprResult()) {
 continue; else if (an.isExprResult())
 { if (n == an.getNext() || n == an.getPrevious())) {
 continue; if (an.isExprResult(true))
 { continue; } else if (an.isExprResult()) { if (an.isBlock()) {
 { continue; } else if (an.getType()!= Token.BLOCK) {
 continue; if (an.getType()!= Token.FOR)
continue; if (an.isBlock() ) {
continue; else if (an.isCall()) {
 {
 { continue; } if (an.getType() == Token.EXPR_NAME) {
 continue; if (an.isName(n))
 continue; if (an.getType() == Token.EXPRESSION)
 { if (n == parent.getFirstChild() || n == parent.getLastChild()))
 { continue; } else if (an.getType() == Token.COMMA) {
 { if (n == an.getNext() && an.getNext().isName()) {
 { continue; } else if (an.isExprResult()) { if (an.isBlock() )
 { continue; } else if (an.isName()) {
 continue; if (an.getType() == Token.END)
 { continue; }
 continue; if (an.getType() == Token.IF)
 { continue; } else if (an.getType() == Token.COMMA) { break; } else
 { if (an.isName(n))
 { continue; } else if (an.isExprResult()) { if (an.isCall() )
 return; else
 { if (an.isExprResult()) {
 continue; if (an.isCall())
 continue; else break;
 continue; if (an.isBlock())
 continue;
continue; else if (an == parent) {
 continue; if (an.isName())
continue; if (break) {
continue; else break; } else
 { continue; } if (an.getType() == Token.EXPR_NAME)
 continue; if (an == null)
 return; else break; else
 { continue; } else
 continue; if (an.isExprResult()) {
 { return; } else {
 return; if (an == parent)
 continue; if (an.isCall(n))
 break; else
 return; else if (an == n) return;
 continue; if (an.isExprResult()))
 return; else if (an == parent) return;
 { continue; if (an == parent) {
continue; else
continue; else break; } else {
continue; } } else {
 { if (an.isExprResult())
 { continue; if (an.isCall())
 { continue; }
 continue; else if (an == n) continue;
continue; } else { return; } else
 continue; else
 ancestorType = 0;
 return; else if (an == null) return;
 { return; }
continue; if (true) {
 continue; else if (an == parent) continue;
continue; else break; } } else
 break; } } else {
 ancestorType = null;
 { if (an == n)
 { if (an.isBlock())
 return; } else
 { return; } } else
 return; else break;
 continue; else { int ancestorType = an;
 { if (an == parent)
continue; if (or) continue;
 { break; } parent = gramps;
continue; else break; else
 break; else continue;
 continue;
continue; } else
 continue; else break; else
 { if (an == null)
 break;
 { return; } else { parent = an;
 return; else break; }
 return; else { int ancestorType = an;
 { return; } else break;
 return; else { int ancestorType = n;
 return;
 break; } else
continue; } else { } else
 return; else { int ancestorType = 1;
 { break; } parent = an;
 break; else ancestorType = null;
 continue; else break; }
continue; } else { continue; }
 break; else
 break; else { ancestorType = 1;
 break; else ancestorType = 1;
 break; else ancestorType = 0;
 continue; if (not block)
continue; if (continue)
 { return; } parent = an;
 { break; } ancestorType = 1;
 { continue; } break;
 return; else break; else
 return; else {
 { continue;
 { break; } else continue;
 continue; if (break)
 break; else { ancestorType = 0;
continue; else break; }
 continue; else {
 { break; } ancestorType += 1;
 return; } else
 { break; } else break;
 return; else
 break; else return;
 continue; if (empty)
 { continue; } else
continue; else {
 { break; } else return;
 continue; break;
 return; break;
 return; else { else
 break; else {
continue; } } else
 break; else break;
 break; else { continue;
continue; } else { else
 { break; } break;
 break;
 break; else { break;
 { return; } else continue;
 return; else { break;
continue; } } else { else
continue; else { else
 { } else
 return false;
 { return;
 { } else
 return;
 { continue }
continue; else { }
 { } break;
 return; continue;
 { break;
 continue; continue;
 return;;
 break; }
 { else
continue; }
continue. else
continue;; else
 then
 {}
 {}
