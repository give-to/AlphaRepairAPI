 { continue;
 { continue; }
 { if (an == gramps)
 continue;
 {
return; if (an == parent) continue;
 { if (n == an.getNext().getNext())
 if (an.isExprResult()) {
 { if (n == parent.getFirstChild() && parent.getLastChild().getNext() == n)
 { if (an == an.getNext().getNext())
 { if (an.isCall(true))
 { return; } if (n == parent.getFirstChild()) { if (n == parent.getFirstChild().getNext())
 { if (an!= parent.getFirstChild()) { if (an == parent.getLastChild())
 { if (an.isExprResult()) {
 { if (an == ancestorType) { continue;
return; if (an == ancestorType) continue;
 { if (n == an.getFirstChild() || n == an.getNext().getNext())
 { return; } if (n == parent.getFirstChild()) { if (n == parent.getLastChild()) { } else {
 { if (n == an.getFirstChild() || n == an.getNext())
return; if (an == parent) return;
 { return; } if (n == parent.getLastChild()) { if (n == parent.getFirstChild().getNext())
 { if (an.isCall())
 { if (n == an.getFirstChild() || n == an.getNext())) {
return; if (an == n)
 { if (n == parent.getLastChild()) { if (n == parent.getFirstChild()) {
 { if (an!= parent.getFirstChild()) { if (an == parent.getNext())
 { if (n == parent.getFirstChild()) { if (n == parent.getLastChild()) { } else {
 { if (an!= parent.getLastChild()) { if (an == parent.getFirstChild())
 { if (n == an.getFirstChild() && an.getNext().getNext()) {
 { if (n == parent.getFirstChild()) { if (n == parent.getLastChild()) {
 { if (n == parent.getFirstChild() && parent.getLastChild().getNext() == parent)
 { if (n == parent.getFirstChild()) { if (n == parent.getLastChild()) continue;
 { if (n == an.getFirstChild() || n == an.getLastChild()) {
 { if (n == parent.getLastChild()) { if (n == parent.getFirstChild()) { } else {
 { if (n == parent.getFirstChild() && ancestorType == Token.FOR) { if (n == parent) {
 { if (an.isCall(n))
 { if (an == ancestorType) {
 { if (n == an.getNext().getNext()) {
return; if (an == parent)
 { if (an == parent.getLastChild())
 { if (an == parent.getFirstChild() || n == ancestorType)
 { if (n == an.getNext() && an.isExprResult()) {
 { if (n == parent.getLastChild()) { if (n == parent.getFirstChild() || n == parent)
 { return; } if (n == parent.getFirstChild()) { if (n == parent.getFirstChild().getNext()) {
 { if (an.isName(n))
 { if (an!= parent.getFirstChild()) { if (an == parent.getLastChild()) {
 { if (n == parent.getFirstChild()) { if (n == parent.getLastChild() || n == parent) {
 { if (n == parent.getFirstChild()) { if (n == parent.getLastChild()) { } } else {
 { return; } if (n == parent.getFirstChild()) { if (n == parent.getFirstChild().getNext()))
 { if (n == parent.getFirstChild() && parent.getLastChild().getNext() == n) {
 { if (an == parent.getFirstChild())
 { if (an == parent.getFirstChild() || n == parent)
 { if (n == an.getFirstChild() || n == an.getNext()) {
 { if (n == parent.getFirstChild()) { if (n == parent.getLastChild()) { } else { } }
 { if (n == an.getFirstChild() && an.getNext().isName()) {
 { if (n == parent.getFirstChild() && ancestorType == Token.FOR) { if (n == parent)
 { if (an!= gramps)
 { if (n == parent.getFirstChild()) { if (n == parent.getLastChild()) { continue; } }
 { if (n == parent.getFirstChild()) { if (n == parent.getLastChild()) { } else
 { if (an!= parent.getFirstChild()) { if (an!= parent.getLastChild())
 { if (an == ancestorType) continue;
 { if (n == an.getFirstChild()) { if (n == an.getLastChild()) { } else { } }
 { if (n == an.getFirstChild() && an.getNext().getNext())
 { if (an == parent)
 { if (n == parent.getFirstChild() && ancestorType == Token.FOR) { if (n == parent) continue;
 { if (an == parent.getFirstChild()) {
 { if (n == parent.getLastChild()) { if (n == parent.getFirstChild()) { } else
 { if (n == parent.getFirstChild()) { if (n == parent.getLastChild()) { } }
 { if (n == parent.getFirstChild() && parent.getLastChild().getNext() == null) {
 { if (n == parent.getFirstChild()) { if (n == parent.getLastChild()) { continue; }
 { if (n == an.getFirstChild() && an.isExprResult()) {
 { if (an == an).getNext() && an.isExprResult()) {
 { if (an == an).getNext().getNext())
 { if (n == an.getFirstChild() || n == an.getNext()))
 { if (n == parent.getFirstChild()) { if (n == parent.getLastChild()) { } else { }
return; if (an == n) continue;
return; if (an!= parent) continue;
 { if (an.isExprResult())
 { if (n == parent.getFirstChild() && ancestorType == Token.FOR) { if (n == parent.next)
 { if (an == parent.getLastChild()) {
 { if (n == an.getNext().getNext())) {
 { if (an == n)
 { if (an == ancestorType) continue;
 { if (an == an).getNext().getNext() then
 { if (n == an.getFirstChild() || n == an.next)
 { if (an == parent.getNext())
return; if (an == null) return;
 { if (an == an) { if (n == parent) {
 continue; if (an == ancestorType) continue;
 { if (n == an.getFirstChild() || n == an.next())
 { if (an == ancestorType) { } else {
 { if (an == parent.getFirstChild() && ancestorType == 1)
 { if (an == ancestorType) { if (n == ancestorType) {
 continue; if (an == n) continue;
 { if (n == an).getNext().getNext()) continue;
 { parent = an ; }
return; if (an!= parent)
return; parent = an ; }
 { if (n == an.getNext() && an.isName(n))
return; if (an == parent) { continue;
 { if (n == an.getFirstChild() && an.isCall())
 { if (n == an.getNext() && an.isName() ) {
 { if (an == an).getNext().getNext();
return; if (an == ancestorType) break;
 { if (an == parent.getFirstChild() || n == parent) {
return; parent = an;
 { if (an == parent.getFirstChild() && ancestorType == 0)
return; if (an == parent) {
 if (an == gramps)
 continue; if (an == parent) { continue;
 { if (n == ancestorType)
 { if (n == parent)
return; if (an!= n)
 { if (n == an).getNext().getNext() == n)
 { continue; } }
 { if (n == an).getNext().getNext() { }
return; if (an == null) {
 continue; if (an == parent) continue;
 { if (n == an).getNext().getNext() == parent)
 { return; } } }
 { if (an == ancestorType) { return;
return; if (an == parent
 { if (ann == gramps)
 { if (an.isName() )
return; if (an == null)
 { if (n == an).getNext().getNext()) { } }
 { if (an.isFunction() )
 if (an.isCall())
 { a.getNext().getNext(); continue;
 { ancestorType = 0;
 { ancestorType = 1;
return; if (an == parent) continue
 { } else {
return; if (an == n) {
 { return; } }
return; if (an == parent) return
 { if (an == null)
 { if (an == an) continue;
return; ancestorType = 1;
 ancestorType = 1;
return; if (an == n
 { ancestorType = null;
 { if (an == parent) continue;
 { continue; } break;
 continue;
 { an.getNext(); continue;
 { if (an == parent) { continue;
return; ancestorType = 0;
 { return; }
 { if (an == n) continue;
 { if (an == parent) { return;
 { break; }
 ancestorType = 0;
 continue; else break;
 { continue; }
 { a.getNext(); continue;
 { break; } }
 continue; ancestorType = 1;
 { parent = an;
return; if (an == parent) return; }
 { continue; } } }
return; if (continue)
 continue; ancestorType = 0;
return; if (break)
 { if (continue)
 { } else continue;
 continue; ancestorType = null;
 { an.getNext() = null;
 { a.getNext() = parent;
 continue; ancestorType = an;
 continue; if (true) continue;
 { } } else {
 { } else
 { if (break)
 { break; } } }
 { return; } else continue;
 break; } else {
 continue; break;
 if (an == parent)
 if (an == n)
 { } else { continue;
 continue; else
 { an.getParent(); continue;
 { an.getNext(); break;
 continue; if (continue)
 break;
 { break; }
 break; else
 continue; } else
return; break; }
 break; } else
return; } }
 { } break;
 { if (isCall)
return; } } }
return; } } } }
 { if (break())
 { } continue;
return; else continue;
 { } }
 { } }
 { } else { }
return; else break;
 { continue an;
 { continue;
 { continue 2;
 break;
return; else { }
 { }
 { continue }
 continue; }
 { return;
 break; }
 { break;
 {
return; }
 { }
 return;
 continue and
return; else }
return; else {
 continue 2;
 break
 continue
 then
return, }
 }
return;; }
