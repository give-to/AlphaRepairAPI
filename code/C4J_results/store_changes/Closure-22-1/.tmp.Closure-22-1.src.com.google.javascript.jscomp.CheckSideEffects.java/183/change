var.setJSDocInfo(builder);
var.setJSDocInfo(builder.build(compiler));
 builder.build(var));
 compiler.setJSDocInfo(builder.build(var));
var.setJSDocInfoBuilder();
var.setJSDocInfo(builder).addChildrenToBack(var));
 compiler.getAstRoot(compiler).setJSDocInfo(builder.build(var));
var.setJSDocInfo(builder.build(var)); compiler.reportCodeChange(); final
var.setJSDocInfo(builder.toString(var));
 compiler.comment(builder.build(var));
var.setJSDocInfo(builder.build(var)); compiler.reportCodeChange(); } final
 compiler.addSource(builder.build(var));
var.setJSDocInfo(builder); compiler.reportCodeChange(); final
var.setJSDocInfo(builder.build(compiler)); compiler.reportCodeChange(); final
 compiler.getAstRoot(compiler)->setJSDocInfo(builder.build(var));
var.setJSDocInfoBuilder(builder);
 builder.comment(var));
 Compiler.setJSDocInfo(builder.build(var));
 Builder compiler = new Builder(builder);
var.setJSDocInfo(builder); compiler.reportCodeChange(); } final
var.init(builder);
 var = IR. var ( name, var ) ;
var = IR. var ( var, builder ) ;
 CompilerOutput compiler.setJSDocInfo(builder.build(var));
 compiler.exec(builder.build(var));
 builder.build());
var.setJSDocInfo(builder); compiler.reportCodeChange();
 compiler.getAstRoot(compiler)().setJSDocInfo(builder.build(var));
var.setJSDocInfo(builder); compiler = new Compiler ( ) ;
 return builder.build(var));
var.setJSDocInfo(builder.build(var); compiler.reportCodeChange(); final
var.setJSDocInfo(builder.build(compiler, compiler));
var = IR.var(var);
 builder.addChildrenToBack(var));
 builder.build(var);
var = builder;
 var = IR. var ( name, builder. build ( var ) ) ;
var.setJSDocInfo(builder.getJSDocInfo(var));
 builder.recordVar(var);
 CompilerOutput compilerOutput = compiler.setJSDocInfo(builder.build(var));
var.setJSDocInfo(builder.build(var); compiler.reportCodeChange(); } final
 compiler.getAst(compiler).setJSDocInfo(builder.build(var));
 compiler = new Compiler ( builder ) ;
 var = IR. var ( var ) ;
var.setJSDocInfo(builder.build(var))); compiler.reportCodeChange(); final
 compiler.eval(builder.build(var));
 compiler.getAstRoot(compiler).append(builder.build(var));
var.setJSDocInfoBuilder(builder); compiler.reportCodeChange();
var.setJSDocInfo(builder.build(var)) ; compiler.reportCodeChange();
 CompilerOutput compiler = CompilerOutput.setJSDocInfo(builder.build(var));
 var = IR. var ( name ). detach ( ) ;
 var = IR. var ( name, builder. build ( var ) ) ; compiler. recordNoAlias ( ) ;
 builder.comment(build(var));
 compiler = new Compiler ( builder. build ( ) ) ;
 var = IR. var ( name, "noalias" )
 var = IR. var ( name ) ; builder. recordNoAlias ( ) ;
 compiler.addSourceInfo(builder.build(var));
var.setJSDocInfo(builder.toString()); compiler.reportCodeChange(); final
 var = IR. var ( var, name ) ;
var.setJSDocInfo(builder); compiler.reportCodeChange(); } } final
 var = IR. var ( name, builder. build ( var ) ) ; builder. recordNoAlias ( ) ;
 var = IR. var ( name, builder. build ( var ) ) ; compiler. recordNoAlias ( var ) ;
 JSDocInfoUtils.setJSDocInfo(builder.build(var));
 var = IR. var ( name, builder. build ( ) )
 var = IR. var ( name, builder. build ( var ) )
 var = IR. var ( name, builder. build ( var ) ) ; var. setNoAlias ( true ) ;
 var = IR. var ( "noalias" )
var.setJSDocInfo(builder.build(var)); compiler.reportCodeChange(var);
 var = IR. var ( name, builder. build ( var ), builder. build ( var ) ) ;
 var = IR. var ( name ) ; if ( var!= null ) {
 Builder compiler = new Builder ( ) ; compiler.setJSDocInfo(builder.build(var));
 compiler.compiler.setJSDocInfo(builder.build(var));
 var = IR.var(name);
 compiler.getAstRoot(compiler); compiler.setJSDocInfo(builder.build(var));
var.setJSDocInfo(builder.build(var)); compiler.reportCodeChange(); } } final
 var = IR. var ( "var" )
 CompilerOutput compiler = compiler.setJSDocInfo(builder.build(var));
 Builder compiler = new Compiler(builder.build(var));
 var = IR. var ( name, builder, compiler ) ;
 compiler.getAstRoot(compiler).add(builder.build(var));
 builder.recordExtern(var);
 var = IR. var ( name ) ; if ( var!= null )
 CompilerOutput compiler = compiler ; compiler.setJSDocInfo(builder.build(var));
 CompilerOutput output = compiler.setJSDocInfo(builder.build(var));
 compiler = new AbstractCompiler ( ) ; compiler.setJSDocInfo(builder.build(var));
var.setJSDocInfo(builder); compiler.reportCodeChange(); } private
 var = IR. var ( name, builder. build ( var ), compiler ) ;
 compiler.getAstRoot(compiler.setJSDocInfo(builder.build(var));
 var = IR. var ( name, builder. build ( var ), builder. build ( var ), builder. build ( var ) )
var.setJSDocInfo(builder.build(var)); compiler.reportCodeChange(); } private
 Builder compiler = new CompilerBuilder(builder.build(var));
 var = IR. var ( name ) ; builder. recordNoAlias ( var ) ;
var.setJSDocInfo(builder.buildJSDocInfo(var));
var = builder.build();
 JSDocInfoBuilder.setJSDocInfo(builder.build(var));
 var = IR. var ( name ) ; builder. recordNoAlias ( true ) ;
var = IR.var(name);
 compiler = new Compiler ( ) ; compiler.setJSDocInfo(builder.build(var));
 var = IR. var ( name, builder. build ( var ) ) ; var. setNoAlias ( false ) ;
var = IR. var ( var, name ) ;
 compiler = new CompilerBuilder ( builder. build ( ) ) ;
 compiler.addAstRoot(builder.build(var));
 var = IR. var ( name, builder. build ( var ) ) ; var. setNoAlias ( noAlias ) ;
 var = IR. var ( name, builder. build ( var ) ) ; var. recordNoAlias ( ) ;
 var = IR. var ( name, builder. build ( var ) ). detach ( ) ;
 Builder compiler = builder. build ( );
 var = IR. var ( name, builder. build ( var ), "noalias" ) ;
 var = IR. var ( name, builder. build ( var, compiler ) ) ;
 var. setJSDocInfo ( builder.build()));
 var = IR. var ( var. name ) ;
 var = IR. var ( name ) ; var. setName ( name ) ; var. setType ( type ) ;
var.setJSDocInfo(builder); compiler.reportCodeChange(); } } private
var.setJSDocInfo(builder); compiler.reportCodeChange(var);
 var = IR. var ( name, builder. build ( var ) ) ; builder. recordNoAlias ( false ) ;
 var. setJSDocInfo ( builder ) ;
var.setJSDocInfo(builder.build(var))); compiler.reportCodeChange(); } final
 var = IR. var ( name, builder. build ( var ) ) ; if ( var!= null )
 Compiler compiler.setJSDocInfo(builder.build(var));
var.setJSDocInfo(builder); compiler.reportCodeChange(); }
var.setJSDocInfo(builder)); compiler.reportCodeChange(); final
 var = IR. var ( name ) ; var. setName ( name ) ; var. setType ( "string" )
var.addChildToBack(builder); } final
 var. setName ( "noalias" )
var.setJSDocInfo(builder.build ( )); compiler.reportCodeChange(); final
 var = IR. var ( name, builder. build ( var ), builder. build ( builder. build ( var ) ) )
var.setJSDocInfoBuilder(builder); final
 CompilerOutput compilerOutput.setJSDocInfo(builder.build(var));
 Builder compiler = builder ( );
 Builder builder = new Builder ( ) ; builder. recordNoAlias ( "no" ) ;
 compiler = new Compiler ( builder. build ( )));
 var = IR. var ( name, builder. build ( var ) ) ; var. setComments ( true ) ;
 var = IR. var ( name, builder. build ( var ) ) ; builder. recordNoName ( ) ;
var.setJSDocInfo(builder.build(compiler)); compiler.reportCodeChange();
 Builder compiler = new JSDocInfoBuilder(builder.build(var));
 compiler.addAst(builder.build(var));
 builder.comment(var);
 var = IR. var ( name, builder. build ( var ), "noalias" )
 var. setJSDocInfo ( builder.build (var));
 var. setName ( name ) ;
 compiler.addExtern(builder.build(var));
 var = IR. var ( name, builder. build ( var ), builder. build ( var ), builder. build ( var )));
 var. setJSDocInfo ( builder.build(name));
var.init();
 var = IR. var ( name ) ; if (builder) {
 Builder builder = new Builder(false); compiler.setJSDocInfo(builder.build(var));
var.setJSDocInfo(builder.getSourceInfo(var));
 compiler.setExterns(builder.build(var));
 builder.recordVar(var));
 var = IR. var ( name, builder, true ) ;
var.setJSDocInfo(builder.build(var)); compiler.reportCodeChange(var); final
var.setJSDocInfo(builder); compiler.reportCodeChange(); private
 Builder builder = new Builder(false); Compiler.setJSDocInfo(builder.build(var));
 var = IR. var ( name ) ; var. setName ( name ) ; var. setType ( "function" )
var.setJSDocInfoBuilder(builder); compiler.build(var);
 compiler.addExterns(builder.build(var));
 var = IR. var ( name, builder. build ( var ), builder. build ( builder. build ( name ) ) )
var.setJSDocInfo(builder.build()); compiler.reportCodeChange(); } final
var.setJSDocInfo(builder.toJSDoc(var));
 var = IR. var ( name, "function" )
 var = IR. var ( name, builder. build ( var ) ) ; builder. recordNoAlias ( "noalias" ) ;
var.setJSDocInfo(builder); compiler.reportCodeChange(var); final
var.setJSDocInfo(builder.build(var)); compiler.reportCodeChange(); } } private
 var = IR. var ( name, builder. build ( var ) ) ; var. setComments ( ) ;
 Builder compiler = new JSDocBuilder(builder.build(var));
 compiler.addComment(builder.build(var));
 var = IR. var ( name, builder. build ( var ), builder. build ( var ), builder. build ( var ),
var.addChildToBack(builder); final
 var = IR. var ( name, builder. build ( var ), builder. build ( var ), builder. build ( name ) )
 builder.addChildToBack(var));
 compiler.setSynthesized(builder.build(var));
 compiler.add(builder.build(var));
 compiler = new Compiler ( builder ) ; compiler. reset ( ) ;
var.setJSDocInfo(builder.build(var)); compiler.reportCodeChange(); }
 var = IR. var ( name, builder. build ( var ), builder. build ( var ), builder. build ( var ) );
 compiler.getAstRoot(compiler).comment(builder.build(var));
 compiler.(builder.build(var));
 var = IR. var ( name, builder. build ( var ), "function" )
 var = IR. var ( name, builder. build ( ));
 var = IR. var ( name, builder. build ( var ), builder. build ( var ) )
 builder.recordExterns(compiler.build(var));
 var = IR. var ( name, builder. build ( var ), false, false ) ;
 compiler.addAnnotation(builder.build(var));
var.setJSDocInfo(builder); compiler.reportCodeChange(); } } }
 compiler.comment(build(var));
 compiler.getAst(compiler).append(builder.build(var));
var. addChild ( builder ) ;
 CompilerOutput compiler = Compiler.setJSDocInfo(builder.build(var));
 compiler.getAst(compiler).add(builder.build(var));
 compiler.getAstRoot( ).setJSDocInfo(builder.build(var));
var.setJSDocInfo(builder.build(var); compiler.reportCodeChange(); } } final
 var = IR. var ( name ) ; builder. recordExterns ( true ) ;
var.setJSDocInfo(builder.build(var); compiler.reportCodeChange();
 CompilerContext compiler = compiler.setJSDocInfo(builder.build(var));
var.setJSDocInfo(builder.build(compiler, var));
 compiler.setSynthesizedSource(builder.build(var));
 builder.recordExterns(var);
 compiler.addJSDocInfo(builder.build(var));
 var = IR. var ( name, builder. build ( var )));
 builder.recordExtern(var, compiler);
 builder.recordExtern(var));
 var = IR. var ( name, builder. build ( var ), builder. build ( builder. build ( var ) ) ;
var.setJSDocInfoBuilder(builder); compiler = new Compiler();
 var = IR. var ( name, builder. build ( var ) ) ; compiler. recordNoAlias ( builder. build ( ) )
 CompilerInput compiler = builder.compiler;
 compiler = new Compiler ( builder ) ; compiler. compile ( ) ;
var = IR.var(var); final
 CompilerCompiler compiler = Compiler.setJSDocInfo(builder.build(var));
 compiler.setExternsInput(builder.build(var));
 compiler = new Compiler ( builder ) ; compiler. init ( ) ;
 var = IR. var ( name, builder. build ( var ) ;
var.setJSDocInfo(builder.toJSD(var));
 compiler = new JSDocInfoBuilderImpl(builder.build(var));
 builder.recordVariable(var);
 compiler.addSource(build(var));
var.setJSDocInfo(builder); compiler = new compiler();
 Builder compiler = new Builder(build(var));
 var = IR. var ( name, builder. build ( var ), builder. build ( var ), false, false ) ;
 var = IR. var ( name, builder. build ( var ), builder. build ( builder. build ( var ) ),
 var = IR. var ( "this" )
 Builder compiler = Builder. create ( );
 compiler.addComments(builder.build(var));
 var = IR. var ( name, builder. build ( var ) ) ; compiler. recordNoAlias ( builder. build ( )));
 compiler = new Compiler ( builder, false ) ;
 CompilerCompiler.setJSDocInfo(builder.build(var));
 compiler = new CompilerImpl ( builder ) ;
 compiler = new CompilerBuilder ( builder. build ( )));
 compiler.getAstRoot(root).setJSDocInfo(builder.build(var));
 Builder compiler = Builder ( ) ; compiler.setJSDocInfo(builder.build(var));
 compiler = new Compiler ( builder, compiler ) ;
 var = IR. var ( name, builder. build ( var ) ) ; compiler = (Node)
 var = IR. var ( name, builder. build ( var ), builder. build ( ) ) ;
var.setJSDocInfo(builder.build(var)); compiler.reportCodeChange(); } }
var.addChildrenToBack(builder); } final
 compiler.setSynthesizedExtern(builder.build(var));
var = IR.var(var, builder); final
 var = IR. var ( name, builder. build ( var ), false, true ) ;
 Builder compiler = new Builder(builder.build(var));
 var = IR. var ( name, builder. build ( var ) ) ; if (var) {
 compiler.addAstRoot(compiler).append(builder.build(var));
 builder.recordExterns(var, compiler);
 var = IR. var ( name, builder. build ( var ), builder. build ( name ) )
 compiler.getAstRoot(node).setJSDocInfo(builder.build(var));
var.setJSDocInfoBuilder(builder); compiler = new compiler();
var.setJSDocInfo(builder); final
 CompilerOutputCompiler.setJSDocInfo(builder.build(var));
 CompilerOutput compiler = compilerOutput.setJSDocInfo(builder.build(var));
 compiler = new JSDocInfoBuilder()(builder.build(var));
 var = IR. var ( name, builder. build ( var ), compiler, false ) ;
 var = IR. var ( name, builder. build ( var ) ) ; compiler. addAstRoot ( var, "var" )
 builder.addExtern(var);
 compiler.addCompiler(builder.build(var));
 builder.parse(var));
var.setJSDocInfo(builder.build(compiler, false));
 builder.format(var));
 var = IR. var ( name, builder. build ( var ) ) ; compiler. recordNoAlias ( builder. build ( ) );
var = IR.var(name, builder); final
 compiler = new CompilerBuilder ( builder ) ; compiler. build ( ) ;
 var = IR. var ( name, builder. build ( var ), ) ;
 CompilerContext compiler.setJSDocInfo(builder.build(var));
 Builder compiler = new CompilerBuilder(build(var));
 compiler = new CompilerImpl ( ) ; compiler.setJSDocInfo(builder.build(var));
 builder.parse(var);
 compiler.getAstRoot(compiler).exec(builder.build(var));
var.setJSDocInfo(builder.build(); compiler.reportCodeChange(); } final
 compiler = new Compiler ( builder. build ( var ) ) ;
var.setJSDocInfo(builder.toString()); compiler.reportCodeChange();
 compiler = new CompilerBuilder ( builder ) ;
 builder(var));
var.setJSDocInfo(builder.build(compiler, true));
 Builder compiler = new Builder(builder;
 add(builder.build(var));
var. append ( builder ) ;
var.setJSDocInfo(builder); compiler.init(builder);
 Builder compiler = new Builder(compiler.build(var));
 var = IR. var ( name ) ; var. setName ( name ) ; var. setType ( "string" );
 var = IR. var ( name ) ; builder. recordNoAlias ( false);
 builder.recordExterns(var));
var.setJSDocInfo(builder.build(compiler)); compiler.reportCodeChange(); }
 compiler.setSynthesizedFunction(builder.build(var));
 compilerImpl.setJSDocInfo(builder.build(var));
 compiler = new Compiler ( builder. build ( ), compiler ) ;
var.addChildrenToBack(builder); final
var.setJSDocInfo(builder.build(var));
var. addComments ( ) ;
 builder.recordExtern(var(name));
 compiler.addSourceLine(builder.build(var));
 compiler = new CompilerBuilder ( builder, false ) ;
 compiler.addAstRootToBack(builder.build(var));
 compiler = new Compiler ( builder ) ; compiler = compiler ;
 var = IR. var ( name ) ; builder. recordNoAlias ( true )
 builder.block(var));
 builder.recordExtern((var));
 CompilerOutput compiler = CompilerOutputBuilder.setJSDocInfo(builder.build(var));
 compiler = new CompilerBuilder(compiler,builder.build(var));
var = IR.var(name); final
 compiler.setSource(builder.build(var));
 builder.recordExtern(var, compiler));
 CompilerOutput compiler = CompilerOutputFactory.setJSDocInfo(builder.build(var));
var.setJSDocInfo(builder); compiler = new Builder ( ) ;
var.setJSDocInfo(builder.getJSDoc(var));
 compiler.addSynthesizedSource(builder.build(var));
 Builder compiler = new Builder(builder);;
 JSDocInfoBuilder builder.setJSDocInfo(builder.build(var));
 compiler.parse(builder.build(var));
 JSDocInfoBuilder compiler.setJSDocInfo(builder.build(var));
var.setJSDocInfo(builder.build(var); compiler.reportCodeChange(); }
var = builder.var();
var.setJSDocInfo(builder.buildSourceInfo(var));
 builder.records(builder.build(var));
 compiler = new CompilerImpl ( builder, compiler ) ;
var.setJSDocInfo(builder); compiler.start(var);
 Builder compiler = new Builder(builder, false);
 Builder compiler = new Builder(); Compiler.setJSDocInfo(builder.build(var));
 Builder compiler = new JSDocInfo(builder.build(var));
 builder.recordVariable(var));
 build(var));
var.setJSDocInfo(builder.getJsDocInfo(var));
 var. setJSDocInfo ( builder.build());
 builder.recordExtern(new Node(var));
var.setJSDocInfo(builder.toString()); compiler.reportCodeChange(); }
 var = IR. var ( name, builder. build ( var ) ) ; if (debug) {
var.setJSDocInfo(builder.toJsDoc(var));
 compiler = new Compiler ( builder. build ( ), compiler, false ) ;
 compiler = new CompilerImpl(compiler,builder.build(var));
 CompilerInput compiler.setJSDocInfo(builder.build(var));
 builder.recordExterns(null, var);
var.setJSDocInfo(builder.build(compiler, null));
var.setJSDocInfo(builder, IR.var(var));
 Builder compiler = new Builder(builder, true);
 compiler.addSynthesizedFunction(builder.build(var));
 JSDocInfoUtil.setJSDocInfo(builder.build(var));
var.setJSDocInfo(builder.build());
var.setJSDocInfo(builder.build(var)); compiler = new compiler();
 var = IR. var ( name, "function" ;
 compiler.setSourceInfo(builder.build(var));
 builder.recordExtern(addChildrenToBack(var));
 var = IR. var ( name, builder. build ( var ), "function" ;
 CompilerContext compilerContext.setJSDocInfo(builder.build(var));
 CompilerInput compiler = builder;
var.setJSDocInfoBuilder(builder); } final
 var = IR. var ( name, builder. build ( var ), "function" );
 var = IR. var ( name ) ; var. setName ( name ) ; var. setType ( "function" );
 Builder compiler = new Builder(builder, var);
 compiler = new Compiler ( ). compile(builder.build(var));
 compiler.addExtern(build(var));
var.setJSDocInfo(builder.toString(compiler)) ;
 builder.recordExtern(var(var));
var.setJSDocInfo(builder).addAllChildrenToBack(var));
 compiler.addAstRoot(builder, builder.build(var));
 builder.recordName(name);
var.setJSDocInfo(builder.build()); final
var.setJSDocInfo(builder.build()); compiler.reportCodeChange(); } private
 if (var!= null)
 builder.recordDeclaration(var));
 var. setJSDocInfo ( builder. builder )
 builder.build();
var.addChildToBack(builder); } private
var.setJSDocInfo(builder.build(compiler, name, var)) ;
var.setJSDocInfo(builder.build ( )); compiler.reportCodeChange(); }
var.setJSDocInfo(builder.build(var)) ; compiler.addAstRoot(var); final
 builder.recordExtern(name, var);
 builder.addChildrenToBack(var(var));
var.setJSDocInfo(builder.build(var)); compiler.resetCodeChange();
var.addChildToBack(builder); }
var.setJSDocInfo(builder.build(compiler)) ; final
 builder.recordExtern(compiler, var);
 builder.recordExtern(build(var));
var.setJSDocInfo(Builder.toString(var));
 builder.block(var);
 Builder compiler = new Compiler(build(var));
 builder.eval(build(var));
var.setJSDocInfo(builder.build(var)) ; compiler.addCompiler(var); final
 compiler.addTag("noalias",builder.build(var));
 builder.recordExterns(name, var);
 builder.recordExterns(builder.build(var));
 builder.recurse(var);
 var = IR. var ( name, builder. build ( var ) ) ; compiler. recordNoAlias ( )
 compiler.addSourceInfo(build(var));
var.setJSDocInfo(builder.build(compiler)); compiler.reportCodeChange(); private
 builder.recordVariableUse(var));
 Builder compiler = new CompilerBuilder(.build(var));
 builder.recordInlineExterns(var));
 builder.recordExterns(var(name));
 compiler.addSourceInfo(name, builder.build(var));
var = builder.source();
 Builder compiler = new CompilerBuilder(compiler.build(var));
var.setJSDocInfo(builder.build()); compiler.reportCodeChange(var);
var.setJSDocInfo(builder); compiler.init(var);
 builder.recordExterns(var(var));
 var. setName ( "noalias" );
 builder.recordExterns(true);
var.setJSDocInfo(builder.toString(compiler)); final
 builder.end(var));
 builder.recordExtern(builder.build(var));
var.setJSDocInfo(builder.build(var)) ; compiler.build(var);
 compiler.builder.setJSDocInfo(builder.build(var));
 CompilerOutput.setJSDocInfo(builder.build(var));
 builder.recordExterns(function(var));
var.addChildToBack(builder); } } final
 builder.recordExterns(this, var);
 Builder compiler = new CompilerBuilder(builder).build(var));
 builder.recordExterns(var, compiler));
var.setJSDocInfoBuilder(builder, compiler); final
 compiler.return builder.build(var));
 builder.recordExtern(extern);
 var = IR. var ( "var" );
var.setJSDocInfoBuilder(builder).build(); final
 builder.exec(build(var));
 Builder compiler = builder.getCompilerBuilder(var));
var.setJSDocInfo(builder.build(var)) ; compiler.reportCodeChange(); private
var.setJSDocInfo(builder.build(); compiler.reportCodeChange(); } private
 builder.recordSourceInfo(var));
 Builder builder = new Builder(false); compilerImpl.setJSDocInfo(builder.build(var));
 Builder compiler = new Builder ( );
 compiler.reportCodeChange();
var.addChildToBack(builder); } static
 builder.recursive(true);
 CompilerInput input = builder;
 build(compiler.build(var));
 build(builder.build(var));
 builder.recordExternVar(var));
 JSDocInfo.setJSDocInfo(builder.build(var));
var.setJSDocInfo(builder.build(compiler, var, compiler)) ;
 builder.recordExternsExtern(var));
 compiler.addCompilerInfo(builder.build(var));
 builder.recordExtern(name, var));
var.setJSDocInfo(builder.build(compiler, name, var)); final
 compiler.addComment(build(var));
 builder(var);
 builder.getSource(var));
var.setJSDocInfoBuilder(builder, compiler); } final
 Builder compiler = new CompilerBuilderImpl(build(var));
var = IR.var(var); }
 builder.recordDeclare(var));
var.addChildrenToBack(builder); } } final
 builder.recordNoCall(); builder.recordVar(var));
 compiler.impl.setJSDocInfo(builder.build(var));
 Builder compiler = new Builder;
 Builder compiler = new CompilerBuilder()(builder.build(var));
 builder.record(name(var));
 builder.parse((var));
 Compiler output = compiler.setJSDocInfo(builder.build(var));
var.setJSDocInfo(builder.build(compiler, var, compiler)); final
var = IR.var(var); } final
var.setJSDocInfo(builder.build(var, compiler)) ;
 builder.recordExterns( IR.var(var));
 Builder compiler = Builder.create(builder.build(var));
 var.init(builder);
 JSDocInfoImpl.setJSDocInfo(builder.build(var));
 compiler.exec(build(var));
 builder.recordExtern( IR.var(var));
 var = IR. var ( name, "function" );
 compiler = new Compiler ( builder. build ( ) ) ; final
 builder.recordExterns(extern);
var.addCommentsToBack(builder); } final
var.addChild(builder); } final
var.setJSDocInfo(builder.toString()); compiler = new compiler();
 builder.recordNoMethod(); builder.recordVar(var));
 } }));
var.setJSDocInfoBuilder(builder); compiler = this ; final
 Builder compiler = new Builder(builder.init().build(var));
var.addChild(builder); final
var.setJSDocInfo(builder.build(); compiler.reportCodeChange(); } }
 Builder compiler = new Builder(builder, builder.build(var));
 builder.build((var));
 builder.recordExterns(scope(var));
 builder.recordExterns(null);
 builder.add(var));
var.setJSDocInfo(builder.toString(), compiler);
var.setJSDocInfo(builder.build(var)); compiler.reset ( ) ;
 compiler = new CompilerBuilder ( builder ) ; compiler. build ( ) ; final
var.init(builder); final
var.setJSDocInfo(builder.build(compiler, var)); final
 compiler.addCompilerSource(builder.build(var));
var.setJSDocInfo(builder.build(var)); compiler.recordNoAlias();
 compiler.addCompilerNode(builder.build(var));
var.setJSDocInfo(builder).toString(); final
var. addChildren ( builder );
 builder.recordExterns(name(var));
var.setJSDocInfoBuilder(builder); return var ; } final
var.setJSDocInfo(builder).addChildrenToFront(var));
 builder.recordNoCall(var, compiler);
 builder.recordExtern(compiler);
 compiler.addExternToBack(builder.build(var));
var = IR.var(name); } final
 compiler.parser.setJSDocInfo(builder.build(var));
 var = IR. var ( name, builder. build ( var ), compiler ) #
 Builder compiler = Builder.from(build(var));
 var = IR. var ( name ) ; if ( var!= null ) return
 builder.comment((var));
var.setJSDocInfo(builder.build(compiler, astRoot));
 builder.recordDeclareExtern(var));
 if (!noAlias)
 Builder compiler = new Builder(builder.source().build(var));
 compiler = new Compiler ( builder. build ( ), compiler ) ; final
 compiler = new Compiler ( builder ) ; compiler. build ( ) ; final
 if (var instanceof Node)
var.setParent(compiler); final
 CompilerOutput compiler = builder;
var.setJSDocInfoBuilder(builder); compiler = new compiler;
var.setJSDocInfoInfoBuilder(builder); final
 compiler = new Compiler ( builder ) ; compiler. init ( ) ; final
 compiler.addAstRoot(build(var));
 compiler.builder().setJSDocInfo(builder.build(var));
 builder.push(var));
 compiler.addSource (compiler,builder.build(var));
var.setJSDocInfo(builder.build(compiler, var)); } final
var.setJSDocInfo(builder.build(compiler, compiler)); final
var.setJSDocInfoBuilderBuilder(builder); final
var.addChildToBack(builder); };
 Builder compiler = new Builder(builder, false);;
 if (var instanceof AST)
 compiler = new Compiler ( builder. build ( ) ) ; compiler = compiler ; final
 Builder compiler = new Builder(builder, false;
 builder.recordExternsInScope(var));
 builder.addComment(var));
var.addChildrenToBack(builder); }
 compiler.addTag("extern",builder.build(var));
var.setJSDocInfo(builder.build(var)).toString( ) ;
 builder.recordExtern(name(var));
 Builder compiler = new CompilerBuilder(buildInfo.build(var));
var.setJSDocInfo(builder); compiler = this ; final
 builder.recordExterns(new Scope(var));
 builder.build(name);
 CompilerInput input = null;
var.setJSDocInfo(builder.build(this, compiler));
 Builder compiler = new Builder(builder, var;
 Builder compiler = new Builder(build.init().build(var));
 compiler = new Compiler ( builder ) ; final
 builder.recordExtern();
 builder.recordExterns(list(var));
 compiler = new CompilerBuilder(builder); final
 CompilerBuilder.setJSDocInfo(builder.build(var));
 builder.addChildrenToBack(block(var));
 compiler = new Compiler ( builder. build ( ), compiler ) ; } final
 print(builder.build(var));
 builder.record(comment(var));
 builder.recordVarName(var));
 builder.recordExternExtern(var));
 Builder compiler = builder.getCompilerFor(var));
var.setJSDocInfoBuilder(builder); compiler = builder ; final
 builder.recordExterns.add((var));
 compiler = new CompilerImpl ( builder ) ; compiler. init ( ) ; final
 builder.recordInlineExterns((var));
var.setJSDocInfo(builder.build(null, null, null));
 compiler = new CompilerBuilder ( builder. build ( ) ) ; final
var.setJSDocInfo(builder.build(var)); compiler.init(var);
 Builder compiler = new Builder(builder, true;
var.addChild(builder); }
 builder.build(());
 builder.end());
 builder.addComments(comment(var));
 Builder compiler = builder.getCompilerInstance(var));
 builder.record(string(var));
 builder.recordDeclaration(var(var));
 Builder compiler = new Builder(builder, true);;
var.setJSDocInfo(builder.buildDocInfo());
 compiler = new Compiler ( builder ) ; compiler. build ( ) ; } final
var.addChildToBack(builder); } } private
 builder.recordExtends(this);
var.setJSDocInfo(builder).build(); final
 builder.recordExterns(var); final
var.build(builder);
 builder.record(var(var));
var.setJSDocInfo(builder.build(compiler)); } final
 builder.recordDeclareFunction(var));
var.setJSDocInfo(builder.build(compiler, var);); final
 CompilerInput compilerInput;
var.setJSDocInfo(builder.build(null, compiler));
 Builder compiler = new Builder(build;
var.setJSDocInfo(builder.toString(compiler)); } final
 builder.addComments(comments(var));
 builder.parse(var, compiler));
var.setJSDocInfo(builder.build(var)).toString( ));
 builder.recordExtern(true);
var.setJSDocInfo(builder, compiler); final
var.setJSDocInfo(builder.buildTree(var));
 compiler.addExternFunction(builder.build(var));
 builder.recordExternsVar(var));
 compiler.addAst(build(var));
var.setJSDocInfo(builder.toString(), compiler); final
 builder.end(var);
 compiler = new CompilerImpl ( builder ) ; final
var.addChildrenToBack(builder); } } private
 var. setScope ( scope );
var = builder.build(); final
 builder.recordExtends(var);
var.setJSDocInfo(builder.build(var, compiler)) ; final
 compiler = new Compiler ( builder ) ; compiler. reset ( ) ; final
var.setJSDocInfo(builder.buildInfo()); final
 compiler.addExternsInput(builder.build(var));
var.setJSDocInfo(builder.build(var)); compiler = this ; final
 compiler = new CompilerBuilder ( builder ) ; compiler. build ( ) ; } final
(builder.build(var));
 builder.addNode(var));
 Builder compiler = builder;
 Builder builder = builder ;
 compiler.setSource(build(var));
 compiler = new CompilerBuilder ( builder));
 compiler.addSourceCodeInfo(builder.build(var));
 compiler = new Compiler ( builder. build ( ) ) ; compiler = this ; final
 compiler = new CompilerBuilder ( builder ) ; compiler. build ( var ) ; final
 CompilerContext.setJSDocInfo(builder.build(var));
var.setJSDocInfo(builder.build(compiler, sourceCode));
var.setJSDocInfo(builder.build(compiler, name, var)));
 builder.addAstRoot(var(var));
 builder.recordExterns(true));
 compiler.addSourceToBack(builder.build(var));
 builder.recordExterns(new Node(var));
 builder.recordExterns(name.build(var));
var = builder.source;
 Builder compiler = new Builder(builder, null;
var.setJSDocInfoBuilder(builder); } private
 compiler = new Compiler ( builder ) ; compiler = compiler ; final
 compiler.reportCodeChange(); } } final
 builder.recordExterns(Builder.build(var));
 builder.recordExtern(function(var));
 builder.recordExtern(function()));
var.setJSDocInfo(builder.toString()); compiler = builder ; final
 Builder compiler = new CompilerBuilder({};builder.build(var));
var.setJSDocInfo(builder.build(var, compiler, false)) ;
var.setParent(builder); final
 Builder compiler = new CompilerBuilder({},builder.build(var));
var.addChildren(builder); final
var = var ;
 compiler = new Compiler ( builder. build ( ) ) ; compiler = null ; final
 compiler = (builder.build(var));
var.setJSDocInfo(builder); compiler = builder ; final
 CompilerOutput output.setJSDocInfo(builder.build(var));
 builder.recordExterns(new Var(var));
var.setJSDocInfo(builder.build(var)); compiler = builder ; final
var.setJSDocInfo(builder.build(compiler, var);)); final
var.addChildren(builder); } final
var.setParent(builder); compiler = builder ; final
var.setJSDocInfo(builder.build(compilerContext));
var.setJSDocInfo(builder.toString()); } final
var.setJSDocInfo(builder); compiler = new compiler;
var.setJSDocInfo(builder.toString(), compiler); } final
 builder.parse());
var.setJSDocInfoBuilder(builder, compiler); } private
var.setJSDocInfoBuilder(builder); } } final
var.setJSDocInfo(builder.build(var, compiler)); } final
var.setJSDocInfo(builder.toString()); final
var.setJSDocInfo(builder); compiler.add(comment(var));
 CompilerOutputBuilder
var = null;
var.setJSDocInfo(builder.toString()); compiler = var ; final
var.setJSDocInfo(builder); compiler.start(); } final
 builder.process());
 addVar(var));
var.init(builder); }
var.setJSDocInfoBuilder(builder); }
 builder.addChildrenToFront(var));
var.setJSDocInfo(builder.build(var, compiler, false)); final
var.setJSDocInfo(builder); compiler.add(block(var));
var.name();
var.setJSDocInfo(builder.info);
 if (noAlias)
 builder.addChild(var));
 builder.recordExtern(string(var));
var.setJSDocInfoBuilder(builder, compiler); } static
 var = IR.var(name); return
var.setJSDocInfo(builder); } final
 compiler = new Compiler ( builder ) ; compiler. compile ( )
var.setJSDocInfo(builder.getSource(var));
var.setJSDocInfoBuilder(builder); return var ; }
var.setJSDocInfo(builder.info());
 builder.recordExtern(block(var));
 addSource(builder.build(var));
 if (!noalias)
 builder.recordExtern(strip(var));
var.setJSDocInfoInfoBuilder(builder); } final
var.setJSDocInfoBuilder(builder); } static
 compiler(builder.build(var));
 CompilerInput.setJSDocInfo(builder.build(var));
 compiler.__setJSDocInfo(builder.build(var));
 compiler = new Compiler ( builder ) ; } final
var.setJSDocInfo(builder.build(compiler)); compiler = var ; final
 compiler = builder;
 builder.build(_);
var.setJSDocInfo(builder.format(var));
var.setJSDocInfoBuilderBuilder(builder); } final
 CompilerOutput compilerOutput;
var.setJSDocInfo(Builder.build(var));
var.setJSDocInfo(builder.build(var); compiler.reportCodeChange());
var.setJSDocInfoBuilder(builder); static
var.setJSDocInfo(builder, compiler); } final
var.setJSDocInfo(builder.build(compiler, var, compiler);)); final
var.addChild(builder); } private
var.setJSDocInfo(builder.build(null, null, false));
 compiler(builder));
var.append(builder); final
var.init(builder); } final
 builder.source(var));
var.setJSDocInfo(builder); compiler = var ; final
var.setJSDocInfoInfo(builder);
var.setJSDocInfo(builder.source(var));
var.setJSDocInfo(builder.build(var)); compiler = new compiler;
var.setJSDocInfo(builder.build(var)).toString(); final
var.setJSDocInfo(builder.build(compiler, var, compiler))); final
 addExtern));
var.setJSDocInfo(builder.build(var))); compiler = this ; final
 var = IR.var(name); }
var.setJSDocInfo(builder.getComments(var));
var.setJSDocInfo(builder.buildInfo(); final
 builder.exec(var));
var.setJSDocInfo builder);
var.setJSDocInfo(builder.toString())); final
 builder.recordExtern(name));
var.setJSDocInfo(builder.build(1.0));
var.setJSDocInfo(builder.build(var, compiler)); } } final
var.setJSDocInfo(builder.build(var)); } final
var.setJSDocInfoInfo(builder); final
var.setJSDocInfo(builder); } } final
var.setJSDocInfo(builder.build(var), compiler); final
var.setJSDocInfo(builder.build(var), compiler); } final
var.init(); final
 Node compiler = var;
var.setJSDocInfo(builder); }
var.setJSDocInfo(builder.build(var)); final
var.setJSDocInfo(builder.build(compiler))); final
 StringBuilder builder = builder;
 build(var);
var.setJSDocInfo(build.build(var));
var.setJSDocInfo(builder).toString()); final
var.setParent(builder); } final
var.setJSDocInfo(builder.build(var)).toString()); final
 compiler(builder);
 buildSource(var));
 Compiler output =
var.setJSDocInfo(builder.buildDocInfo()); final
 Builder compiler = new builder;
var.setJSDocInfo(builder.build(var)); return var ; }
var.setJSDocInfo(builder.build(var)); } } final
 compilerBuilder.setJSDocInfo(builder.build(var));
var.setJSDocInfo(builder).toString(); }
var.append(builder); }
var = builder; final
 buildVar(var));
 return (builder.build(var));
var.setJSDocInfo(builder.build(var)).toString() final
var.setJSDocInfo(builder.build(); final
 CompilerInputBuilder
 addVariable(var));
 builder.end();
var.setJSDocInfo(builder).build();
 builder.build(););
var.setJSDocInfo(builder.build(null));
(var);
 if (var)
 builder.build));
 return strip(builder.build(var));
var.setJSDocInfo(new Comment(var));
var.setJSDocInfo(builder.build(var, compiler);"); final
var = builder; }
var.setJSDocInfo(builder.build()) {
var.setJSDocInfo(builder); } } private
 addAst(builder.build(var));
var.setJSDocInfo(builder.build(compiler)); }
 compiler.debug(builder.build(var));
var.setJSDocInfo(builder.build(compiler)));
 add(var));
 super(builder.build(var));
 Node compiler = this;
var.setJSDocInfo(builder.build( )));
var.setJSDocInfo(builder.build(this));
 Builder compiler = this;
var.setJSDocInfo(builder.buildTreeInfo()); final
 builder.rebuild(var));
var.setJSDocInfo(builder.source);
 addVar(build(var));
 Node compiler = builder;
var.setJSDocInfo(builder.build(var)); } } private
var.setJSDocInfo(builder.build(var)); } } } final
var.init(); } final
var.setJSDocInfo(toString(var));
 compiler.addSource.build(var));
var.setJSDocInfo(new Source(var));
var.setJSDocInfo(builder.build(null)); final
 compiler.scope =
 comment(var));
 builder(builder.build(var));
var.setJSDocInfo(builder.build(var, compiler)); }
var.build();
 build(builder);
var.setJSDocInfo(builder); } private
 addComment(builder.build(var));
 var(var);
 emit(builder.build(var));
var.setJSDocInfo(builder.comment());
(var));
var.init() final
var.setJSDocInfo() final
var.setJSDocInfo(builder); } static
var.setJSDocInfoBuilder builder);
var = builder.var
 builder.fbuild(var));
 addSource(build(var));
var.setJSDocInfo(builder.build(var)); } } static
 builder.addvar));
var.setJSDocInfo(builders);
 super(var));
var.setJSDocInfo(builder.build(var))); } } final
 addMethod(builder.build(var));
var.setJSDocInfo(new Description(var));
var.setJSDocInfo(builder); };
var.setJSDocInfo(builder.build(var);); final
var.setJSDocInfo(builder.build(var)); } private
var.setJSDocInfo(builder.buildTree()); final
var.setJSDocInfo(builder.build(var))); } final
 new Var(var));
var.setJSDocInfo(builder.build(this)); final
var.clear(); final
var.super();
 CompilerInput
var.call();
var.setJSDocInfo(builder.build(var);"); final
var.build(); final
 new Node(var));
 var var;
var.setJSDocInfo(builder.build(var)) ; return ; }
var.setJSDocInfo(getComments(var));
 addNode(builder.build(var));
var.setJSDocInfo() ;
 CompilerOutput
 new Name(var));
var.setJSDocInfo(doc(var));
 String astRoot;
var); final
 compilerContext.setJSDocInfo(builder.build(var));
 String sourceName;
 String name;
var.setJSDocInfo(builder));
var.setJSDocInfo(builder.build(var)); }
 } ());
var.setJSDocInfo builder;
var.setJSDocInfo(builder.build(var)) ; } static
 CompilerVariable
 compiler.return
var.setJSDocInfo(builders); final
 String alias;
var.setJSDocInfo(source(var));
 build.build(var));
 compiler =
var.setJSDocInfo(builder.build(var););
var.setJSDocInfo(builder.build(var))); final
 CompilerVar
 var name;
var.setJSDocInfo(builder.build(var)) ; static
(true);
 this.
var.setJSDocInfo(builder.build(Compiler));
var); }
 builder.setJSDocInfo(builder.build(var));
var.setJSDocInfo(build);
 (builder);
 String source;
var.setJSDocInfo(comment(var));
(name);
var.setJSDocInfo(format(var));
var.setJSDocInfo(description(var));
 build(build(var));
var) {
 compiler.build(var));
var.setJSDocInfo(Builder);
var.setJSDocInfo(builder.build(false));
 template.setJSDocInfo(builder.build(var));
 parser.setJSDocInfo(builder.build(var));
(name));
var; final
var.setJSDocInfo(builder.build(var))); }
var.setJSDocInfo(builder.build(comp compiler));
 this =
var.setJSDocInfo(builder.build(name));
var.setJSDocInfo(builder) final
var.setJSDocInfo(builder.build(compile));
var.setJSDocInfo(builder.build(compilation));
 compiler.
 return
 }
