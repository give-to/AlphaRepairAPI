if (gramps.isCall() && parent == gramps.getFirstChild()) {
if (gramps.isCall() && parent ==  gramps) {
if (gramps) {
 if (parent == gramps.getFirstChild()) {
if (gramps.isCall() && parent == gramps.getFirstChild())  { return; }
if (gramps.isCall()) {
if (gramps.isCall() && parent == gramps.getFirstChild())  { return; } else
if (gramps.isCall() && parent ) {
if (gramps.isCall() && parent ==  gramps) return;
if (gramps.isCall() && parent != null) {
if (gramps == null) return;
if (gramps)
 if (parent.isCall() && parent == gramps.getFirstChild()) {
if (gramps.isCall() && parent == gramps.getFirstChild())  { return; } } else {
 if (gramps.getFirstChild()) {
if (gramps == null) {
if (gramps.isCall() && parent == gramps.getFirstChild())  { return; } } else
 if (gramps.getLastChild()!== gramps.getFirstChild()) {
 if (gramps!== gramps.getFirstChild()) {
if (gramps == null) { return; } else
 if (gramps!= null&& parent == gramps.getFirstChild()) {
 if (gramps&& parent == gramps.getFirstChild()) {
if (gramps.isCall() && parent == gramps.getFirstChild() || parent == gramps.getLastChild()) {
 if (gramps == parent.getFirstChild()) {
if (gramps.isCall() && parent ==  gramps) { return; } } else {
if (gramps.isCall() && parent ==  gramps) { return; } else
if (gramps.isCall() && parent != gramps) {
 if (gramps!= null && (parent == gramps.getFirstChild()) {
if (gramps.isCall() &&  gramps) {
if  (gramps == null) { return; }
 if (gramps!= null) {
 if (parent.getFirstChild()) {
if (gramps.isCall() && parent ==  gramps) { return; } } else
if (gramps.isCall() && parent != null)
if (gramps.isCall() && parent == gramps.getFirstChild() || parent == gramps.getLastChild) {
 if (gramps!= null) if (parent == gramps.getFirstChild()) {
if (gramps.isCall() && parent == gramps.getFirstChild() || parent == gramps) {
 if (parent == gramps.isCall() && parent == gramps.getFirstChild()) {
 if (gramps.isBlock() && parent == gramps.getFirstChild()) {
 if (gramps!= null) { if(gramps.isCall() && parent == gramps.getFirstChild()) {
if  (gramps == null) return; else
 if (gramps!= null)) {
if (gramps.isCall() && parent ==  gramps) return; else
 if (gramps!= null && gramps.isCall() && parent == gramps.getFirstChild()) {
 if (gramps &&gramps.isCall() && parent == gramps.getFirstChild()) {
 if (gramps!= null) { if (parent == gramps.getFirstChild()) {
 if (gramps.getParent()!== gramps.getFirstChild()) {
if (gramps.isCall() && parent == gramps.getFirstChild() && parent == gramps.getLastChild()) {
 if (&& parent == gramps.getFirstChild()) {
if (gramps == null) { return; } } else
 if (gramps)) {
if (gramps.isCall() ) { return; } else
if (gramps.isCall() &&  gramps)
if (gramps.isCall() && parent ==  gramps) { return; }
if  (gramps == null) return; } else
 if (gramps.isBlock() && parent == gramps.getFirstChild()) { return; } else
 if (parent == gramps && gramps.isCall() && parent == gramps.getFirstChild()) {
 if (gramps.isBlock() && parent == gramps.getFirstChild()) { return; }
 if (isCall() && parent == gramps.getFirstChild()) {
 for (Node n : gramps.getChildren()) {
 if (n== gramps.getFirstChild()) {
 if (gramps.getLastChild!== gramps.getFirstChild()) {
 if (gramps.isBlock() && parent == gramps.getLastChild()) { return; } else
 if (n!== gramps.getFirstChild()) {
 if (gramps.isBlock() && parent == gramps.getLastChild()) {
 if (parent == gramps) { if (gramps.isCall() && parent == gramps.getFirstChild()) {
if (gramps!= null) { return; } else
 if (gramps.isCall() && parent == gramps.getFirstChild()) { return; } else
 if (gramps.isBlock() && parent == gramps.getLastChild()) { return; }
 if (gramps.isCall() && parent == gramps.getFirstChild()) { return; } } else
 if (gramps!= null) && parent == gramps.getFirstChild()) {
 if (gamps!= null && gramps.isCall() && parent == gramps.getFirstChild()) {
 if (gramps.isName() && parent == gramps.getFirstChild()) {
 if (gramps.isBlock() && parent == gramps.getFirstChild()) { return; } } else
if (gramps.isCall() && parent ==  gramps) return; } else
 if (gramps.isCall() && parent == gramps.getLastChild()) { return; } else
if (gramps.isCall() && parent == gramps.getNext()) { return; } else
 if (gramps!= null) return; if(gramps.isCall() && parent == gramps.getFirstChild()) {
if (gramps.isCall() && parent == gramps.getFirstChild() && parent == gramps.getLastChild) {
 if (gramps.isName() && parent == gramps.getFirstChild()) { return; } else
 if (gramps.isCall() && parent == gramps.getLastChild()) { return; } } else
 if (gramps.isBlock() && parent == gramps) return;
 if (gramps.isBlock() && parent == gramps.getFirstChild()) {
 if (gramps.isName() && parent == gramps.getFirstChild()) { return; }
 if (gramps.isCall() && parent == gramps).getFirstChild()) { return; } } else
if (gramps.isCall() && parent ==  gramps)) { return; } } else {
if (gramps) return;
 if (n == parent.getFirstChild()) {
 if (gramps.isCall() && parent == gramps.getFirstChild()) { return; }
if (gramps!= null) { return; } } else
 if (gramps.lastChild!== gramps.getFirstChild()) {
 if (gramps.isBlock() && parent == gramps.getLastChild()) { return; } } else
if (gramps.isCall() && parent == gramps.getFirstChild())  return;
 if (gramps == null) { return; } if (gramps) {
if  (gramps!= null) { return; }
 while (gramps.getLastChild()!== gramps.getFirstChild()) {
 if (gramps!= null && n == parent.getFirstChild()) {
if (gramps.isCall() && parent ==  gramps)) { return; } } else
 if (gramps.isName() && parent == gramps.getLastChild()) {
 if (gramps.isName() && parent == gramps.getLastChild()) { return; }
if (gramps.isCall() && parent == gramps.getNext()) { return; }
 if (gramps == null) { return; } } else {
 if (gramps!= parent.getFirstChild()) {
if (gramps.isCall() && parent == gramps.getFirstChild() && gramps.getNext().isName()) {
 if (gramps.isCall() && parent == gramps.getFirstChild()) { return; } } else {
 if (gramps.isName() && parent == gramps) return;
if (gramps.isCall() && parent == gramps.getParent()) { return; } } else {
 if (gramps.isBlock() && parent == gramps.getFirstChild()) return; else
 if (parent!== gramps.getFirstChild()) {
if (gramps.isCall() && parent ==  gramps)) { return; } else
if (gramps.isCall() && parent == gramps.getFirstChild())) { return; }
 if (gramps.isBlock() && parent == gramps.getFirstChild()) { return; } } else {
 if (gramps == null) { return; } if (gramps!= null) { return; } else
 if (gramps.isBlock() && parent == gramps.getFirstChild()) { } else
 if (parent.isName()) {
if (gramps.isCall() && parent == gramps.getLastChild()) { return; } else
 for (Node n : gramps.children()) {
if (gramps.isCall() ) { return; } } else
 if (parent == gramps && parent.isCall() && parent == gramps.getFirstChild()) {
if (gramps.isCall() && parent == gramps.getFirstChild() || parent == gramps.getNext().getNext) {
 if (gramps!= null) if(gramps.isCall() && parent == gramps.getFirstChild()) {
 if (gramps.isCall() && parent == gramps.getLastChild()) { return; } } else {
 if (gramps == null) { return; } if (gramps!= null) { return; }
 if (parent == gramps &&!gramps.isCall() && parent == gramps.getFirstChild()) {
 if (gramps == null) { return; } if (parent!= gramps) {
if (gramps.isCall() && parent == gramps.getLastChild()) { return; } } else
 if (parent!= null&& parent == gramps.getFirstChild()) {
if (gramps.isCall() && parent == gramps.getParent()) {
 if (gramps!= null) {
 if (gramps.isBlock() && parent == gramps.getLastChild()) return; else
 if (gramps.isBlock() && parent == gramps.getLastChild()) { return; } } else {
 if (gramps.getNext()!== gramps.getFirstChild()) {
 if (gramps!= null &&!gramps.isCall() && parent == gramps.getFirstChild()) {
 if (gramps.isBlock() && parent == gramps) return; else
if (gramps.isCall() && parent ==  gramps)) { return; }
 if (gramps.isName() && parent == gramps.getFirstChild()) return; else
 if (gramps.isBlock() && parent == gramps.getLastChild()) { } else
 if (parent == gramps) if (gramps.isCall() && parent == gramps.getFirstChild()) {
 if (gramps.isName() && parent == gramps.getFirstChild()) {
if (gramps.isCall() && parent .getLastChild() == gramps) {
if (gramps.isCall() && parent == gramps.getLastChild()) { return; }
if (gramps.isCall() && parent .getFirstChild() == gramps) {
if (gramps.isCall() && parent == gramps.getParent()) { return; } else
if (gramps.isCall() && parent == gramps.getFirstChild() || parent == gramps.getNext().getParent) {
 if (gramps.isName() && parent == gramps) return; else
 if (parent.isBlock() && parent == gramps.getFirstChild()) {
 if (gramps.isBlock() && parent == gramps.getLastChild())
 for (Node n : gramps.getFirstChild()) {
if (gramps.isCall(n)) { return; } } else {
 if (gramps == null) { return; } if (parent!= null) {
 if (grams && gramps.isCall() && parent == gramps.getFirstChild()) {
 if (gramps.isBlock() && parent == gramps.getFirstChild()) { else
 if (gramps.isCall() && parent == gramps).getFirstChild()) { return; } } else {
 if (gramps.isBlock() && parent == gramps) {
 if (gramps == null) { return; } if (gramps == n) { return; } else
 if (gramps.isBlock() && parent == gramps.getLastChild()) { else
 if (gramps!= null) { return; } if (parent == null) { return; } else
if  (gramps!= null) return;
 if (gramps.isCall() && parent == gramps.getFirstChild()) { return; } else { return; } } else
 if (gramps &&!gramps.isCall() && parent == gramps.getFirstChild()) {
if (gramps.isCall() && parent == gramps.getParent()) { return; } } else
if (gramps.isCall(n)) { return; }
 if (gramps.isBlock() && parent == gramps.getSecondChild()) {
 if (gramps!= null) { return; } if (parent == null) { return; }
 if (gramps!= null && gramps&& parent == gramps.getFirstChild()) {
 if (parent.getParent()== gramps.getFirstChild()) {
if (gramps.isCall() && parent == gramps.getFirstChild()) { return; } else { return; }
if (gramps.isCall() && parent == gramps.getFirstChild() || parent == gramps.getNext) {
 if (gramps.isCall() && parent == gramps.getLastChild()) { return; } else { return; } } else
 if (gramps == null) { return; } if (gramps == n) { return; }
if (gramps.isCall() && parent == gramps.getNext()) { return; } } else
if (gramps.isCall() && parent == gramps.getFirstChild())  { return; } else { return; } else
 if (gramps!= null && gramps.getFirstChild()) {
 if (gramps!= null) { return; } if (parent == null) { return; } } else
 if (gr) && parent == gramps.getFirstChild()) {
 if (gramps == null) { if (parent == gramps.getFirstChild()) {
if (gramps.isEmpty()) return;
 if (gramps.isCall() && parent == gramps.getFirstChild()) { return; } else { return; }
if (gramps.isCall(n)) { return; } else
 if (gamps!= null && parent.isCall() && parent == gramps.getFirstChild()) {
 if (n!= parent.getFirstChild()) {
 if (gramps.isName() && parent == gramps) {
 if (gamps!= null &&!gramps.isCall() && parent == gramps.getFirstChild()) {
 if (parent.isName() && parent == gramps.getFirstChild()) {
if (gramps.isCall() && parent == gramps.getFirstChild() && gramps.getNext().isName) {
 if (gramps == null || n == parent.getFirstChild()) {
 for (Node n : parent.getFirstChild()) {
 if (parent == gramps) { if (!gramps.isCall() && parent == gramps.getFirstChild()) {
 if (gramps.isAncestor() && parent == gramps.getFirstChild()) {
 if (gramps == null) return; if(gramps.isCall() && parent == gramps.getFirstChild()) {
if (gramps.isCall() && parent ==  null) {
 if (gramps!= null) return;
 if (gramps == null) { return; } if (parent == gramps) return;
 if (gramps!= null) { return; } } else {
 if (gramps == parent.getLastChild()) {
if (gramps.isCall() && parent == gramps.getFirstChild())) { return; } else
if (gramps.isCall() && parent == gramps.getFirstChild() || gramps.getNext().isName) {
if  (gramps!= null) return; } else
 if (gramps.isName() && parent == gramps.getLastChild()) { else
 if (gramps.isName() && parent == gramps.getFirstChild()) { else
 if (gramps == null) { return; } else
if  (gramps!= null) return; else
 while (gramps!= null) { if (parent == gramps.getFirstChild()) {
 if (gramps == null)) {
 if (n == gramps.isCall() && parent == gramps.getFirstChild()) {
 if (gramps!= null && parent!= null&& parent == gramps.getFirstChild()) {
if (gramps.isEmpty()) { return; } else
if (gramps.isCall() && parent == gramps.getFirstChild() || gramps.getNext().isName()) {
 if (gramps == null) { return; } if (gramps)
 if (gramps.isBlock() && parent == gramps.lastChild()) {
 if (gramps == null) { return; } else { return; } else
 if (gramps!= null) { return; } } else
 if (gramps!= null && parent.next() && parent == gramps.getFirstChild()) {
 if (gramps == parent.getFirstChild() && parent == gramps.getFirstChild()) {
 if (gramps == null) return; else{
 if (gramps == null) { return; } if (gramps!= null) { } else
 for (Node n : gramps) if (gramps.getFirstChild()) {
if (gramps.isName()) { return; } else
if (gramps.isEmpty()) { return; }
if (gramps.isCall(n)) { return; } } else
 if (gramps == null) { return; } if (parent == gramps) {
if (gramps.isCall() &&  n!= null) {
 if (gramps == null) { return; } else { return; }
if (gramps.isCall() && parent == gramps.getNext()) { return; } } else {
 if (gramps == null) { return; } } } else
 if (gramps!= gramps){
 while (gramps.getParent()!== gramps.getFirstChild()) {
 if (gramps == null) { return; } if (parent!= gramps) return;
 if (gramps.isCall() && parent == gramps.getFirstChild()) { return; } } else { else
 if (gramps == null) { return; } } else
if (gramps.isCall() && parent == gramps.getFirstChild() || parent == gramps.getNextChild()) {
 if (parent.getLastChild()== gramps.getFirstChild()) {
if (gramps.isCall() ) { return; }
if (gramps.isCall() && parent == gramps.getParent()) { return; }
 if (gramps.isBlock() && parent == gramps.getFirstChild()) { }
 if (gramps && n!== gramps.getFirstChild()) {
 if ( gramps == null ) { return ; } } else { return ; } } else
 if (gramps.isCall() && parent == gramps.getLastChild()) { return; } } else { return ; }
 if (gramps!= null) { return; } else
 if (.getFirstChild()) {
 if (gramps == null) return; if (parent!= gramps) {
 if (gramps.isCall() && parent == gramps.getFirstChild()) { return; } } else { return ; }
 if (gramps.getNext(n)== gramps.getFirstChild()) {
 if (gramps.isCall() && parent == gramps.getFirstChild()) { return; } } else { } else
 if ( gramps == null ) { return ; } if ( gramps!= null ) {
 if (gramps!= null && n!= parent.getFirstChild()) {
 if (gramps.isCall() && parent == gramps.getLastChild()) { return; } } else { else
if (gramps.isCall() && parent ==  gramps) { return; } else {
 if (gramps == null) return; if (parent == gramps) {
 if (gramps == null) { return; } if (n == parent) {
 if (gramps.isCall() && parent == gramps.getLastChild()) { return; } else { return; } else
if (gramps.isCall() && parent ==  gramps).getNext()) { return; }
 if (gramps.isCall() && parent == gramps.getFirstChild()) { return; } else { return; } else
if (gramps.isCall() && parent == gramps.getFirstChild() && parent == gramps.getLastChild(...)) {
if (gramps.isCall() ) { return; } } else {
 if (gramps!= null) { return; }
 if (gramps.isCall() && parent == gramps.getLastChild()) { return; } } else { } else
 while (gramps!= null) if (parent == gramps.getFirstChild()) {
if (gramps.isCall() && parent == gramps.getFirstChild() || parent == gramps.getParent) {
 if (gramps!= null && parent!= null) {
 if (parent == gramps || gramps.isCall() && parent == gramps.getFirstChild()) {
 if (gramps == parent.getLastChild() && parent == gramps.getFirstChild()) {
 if (gramps!= null && parent.isCall() && parent == gramps.getFirstChild()) {
 if (parent == gramps ||!gramps.isCall() && parent == gramps.getFirstChild()) {
if (gramps.isCall() && parent .getFirstChild()!= null) {
 if (grams.isEmpty()) {
 while (gramps!== gramps.getFirstChild()) {
if (gramps.isCall() ) return;
 if (parent == gramps) || (gramps.isCall() && parent == gramps.getFirstChild()) {
 if (gramps.isName()) {
 for (Node n : gramps) while (gramps.getFirstChild()) {
 if (gramps.isCall() && parent == gramps.getFirstChild()) { return; } } else { return ; } else
 if (gramps == gramps.getFirstChild()) {
 if (!gramps.getFirstChild()) {
 if (gramps.isBlock() && parent == gramps.getFirstChild()) { return; } } else { else
 if (gramps!= null) return; else{
 if (parent!= null){
 if (gramps == null || parent == parent.getFirstChild()) {
if (gramps.isCall() &&  gramps!= null) {
 if (gramps == null) { return; } } } else {
 if (gramps!= parent.getLastChild()) {
if (gramps.isCall() && parent != gramps) return;
if (gramps.isCall() && parent == gramps) { return; } else { return; }
if (gramps.isCall() && parent == gramps.getFirstChild() && parent == gramps.getNext().getParent) {
if (gramps == null) { return; } else {
 if (gramps == null) { return; } if (parent == gramps) { } else
 while (gramps!= null && (parent == gramps.getFirstChild()) {
 if (gramps.isBlock() && parent == gramps.getLastChild()) { return; } } else { else
if (gramps.isCall() )) { return; }
 if (gramps!= null && n!= null&& parent == gramps.getFirstChild()) {
 if (parent == parent.getFirstChild()) {
 if (gramps == null) { return; } if (parent == gramps) return; else
 if (gramps.isCall() && parent == gramps.getLastChild()) { return; } } else { return ; } else
if (gramps.getType() == Token.BLOCK) {
 if (gramps == null) { return; } else { return; } } else
 if ( gramps == null ) { return ; } if ( gramps == n ) {
 if (gramps == null) { return; return; } } else
if (gramps.isCall() &&  n!= gramps) {
if (gramps.isCall() && parent == gramps.getFirstChild()) { } else
 if (gramps!= null) { return; } else { return; } else
 if (gramps.isCall() && parent == gramps.getFirstChild()) { return; } } else { }
 if (gramps.isFirstChild() && parent == gramps.getFirstChild()) {
 for (Node n : gramps.nodes) {
if (gramps.isCall() && parent .getLastChild()) { return; } else
 while (gramps!= parent.getFirstChild()) {
if (gramps.isCall() && parent == gramps.getFirstChild()) { return; } else return; } else
 if (gramps.isBlock() && parent == gramps.getFirstChild()) { return; } } else { } else
if (gramps.isCall() && parent == gramps.getFirstChild() || parent == gramps.getLastChild(...)) {
if (gramps.isCall() && parent == gramps.getFirstChild())) { return; } } else
 if (gramps.isName() && parent == gramps).getNext(); else
 if (gramps == null || (parent == gramps.getFirstChild()) {
 while (gramps.getLastChild!== gramps.getFirstChild()) {
if (gramps.isCall() && parent == gramps.parent)
 if (gramps.getParentNode()!== gramps.getFirstChild()) {
if (gramps.isCall() && parent == gramps.getNext())) { return; }
if (gramps.isCall() )) { return; } else
 if (gramps == null) { return; } if (gramps!= null) return; else
 if ((gramps)) {
if (gramps.isName()) { return; }
if (gramps.isCall() && parent == gramps.getFirstChild() && parent!= gramps.getLastChild()) {
if (gramps.isCall() &&  gramps.isName()) { return; }
if (gramps.isCall() && parent == gramps.getFirstChild() || parent == gramps.getNext()) {
 if (gramps == null) { return; } } } } else
 if (grams == parent.getParent()) {
if (gramps.isEmpty()) { return; } } else
 if (gramps!= null) continue; if(gramps.isCall() && parent == gramps.getFirstChild()) {
if (gramps.isCall() && parent ==  gramps) return; } else {
 if (gramps.isCall() && parent == gramps.getLastChild()) { return; } else { return; } }
 if (n == gramps) { if (gramps.isCall() && parent == gramps.getFirstChild()) {
 for (Node n : grampsParent.getFirstChild()) {
 if (gramps == null) { return; } if (n!= parent) {
if (gramps.isCall() && parent .getFirstChild() == null) {
if (gramps.isCall() && parent .getLastChild()!= null) {
if (gramps.isName()) { return; } } else
 if (gramps.isExprResult() && parent == gramps.getFirstChild()) {
 if (gramps!= null && n.next() && parent == gramps.getFirstChild()) {
if (gramps.isCall() &&  gramps.isName()) {
if (gramps.isCall() )) { return; } } else
if (gramps.isCallable()) { return; } else
 if (gramps) if(gramps.isCall() && parent == gramps.getFirstChild()) {
 if (gramps && (parent == gramps.getFirstChild()) {
 if (gramps!== parent.getFirstChild()) {
 if (gramps!= gramps.getFirstChild()) {
 if (gramps.isEmpty())) {
 if (gramps == null) { if(gramps.isCall() && parent == gramps.getFirstChild()) {
 if (n == gramps &&!gramps.isCall() && parent == gramps.getFirstChild()) {
 while (gramps.getFirstChild()) {
 if (gramps!= null) { return; } } } else
 if (gramps.isName() && parent == gramps)) return; else
 if (gramps == null) { return; } else { } else
 while (gramps.lastChild!== gramps.getFirstChild()) {
if (gramps.isCall() && parent ==  gramps) return; else return; } else
if (gramps.isCall() && parent == gramps.getFirstChild() || gramps) {
 if (grams.isEmpty())) {
 if (grammar!== gramps.getFirstChild()) {
if (gramps == null) return; } else {
 if (gramps.isVoid() && parent == gramps.getFirstChild()) {
 if (gramps.isBlock() && parent == gramps).getNext(); else
 if (gramps.isBlock()) {
 if (gramps.isBlock()) { return; } } else
 if (gramps == null) returnelse{
if (gramps.isCall() && parent == gramps.getFirstChild() || parent == gramps.getParent()) {
 if ((gramps!= null) && parent == gramps.getFirstChild()) {
 if (gramps.isName() && parent == gramps).getNext(); }
 if (gramps == parent.getParent() && parent == gramps.getFirstChild()) {
 if (gramps == null) if (parent == gramps.getFirstChild()) {
 if (gramps!= null && n!= parent&& parent == gramps.getFirstChild()) {
 if (gramps.isBlock()) { return; } else
 if (parent == gramps) return; if(gramps.isCall() && parent == gramps.getFirstChild()) {
 if (()) {
if (gramps.isName()) { return; } } else {
if (gramps.isCall() &&  gramps.isIdentifier()) return;
 if (gramps.isBlock() && parent == gramps)) return; else
 if (gramps!= null && n!= null) {
 if (gramps!= null) return; else
 if (gramps.isBlock(() && parent == gramps.getFirstChild()) {
 if (gramps.isBlock() && parent == gramps).return; else
if (gramps.isCall() && parent == gramps.getFirstChild() && gramps!= null) {
if (gramps.isCall() && parent .getFirstChild() == parent) {
 if (gramps == null) { return; } } else { return ; } else
if (gramps.isCall() && parent .getLastChild() == parent) {
if (gramps.isCall() && parent == gramps.getFirstChild()) return; else
if (gramps.isCall() && parent == gramps.getFirstChild())  { return; } } else { return ; }
 if (gramps == null || gramps.getFirstChild()) {
 while (gramps && n!== gramps.getFirstChild()) {
 if (parent.getFirstChild()== gramps.getFirstChild()) {
 if (gramps.getNext().isCall() && parent == gramps.getFirstChild()) {
if (gramps.isCall() && parent == gramps.getFirstChild() || parent == gramps.getSecondChild()) {
 if (gramps!= null) && (parent == gramps.getFirstChild()) {
 if (parent gramps.isCall() && parent == gramps.getFirstChild()) {
 if (gramps &&gramps.getFirstChild()) {
 if (== gramps.getFirstChild()) {
 if (gramps == null) || (parent == gramps.getFirstChild()) {
 if (gamps && gramps.isCall() && parent == gramps.getFirstChild()) {
 while (gramps!= null &&parent == gramps.getFirstChild()) {
if (gramps.isCall(parent)) { return; } else
 if (gramps == null || gramps==gramps.getFirstChild()) {
 if (gramps) {
if (gramps.isCallNode()) { return; } } else
 if (gramps.isBlock() && (parent == gramps.getFirstChild()) {
 if (gramps.parent == gramps.getFirstChild()) {
if (gramps.isCall() && parent == gramps.getFirstChild() && parent == gramps.getParent()) {
 if (gramps!= null && gramps) {
if (gramps.isCallNode()) { return; } else
if (gramps.isCall() && parent == gramps.getFirstChild() && parent == gramps.getNext().getNext) {
if (gramps.isCall(parent)) { return; } } else {
if (gramps.isCall() && parent == gramps.getFirstChild())) { return; } } else {
 while (gramps.getNext(n)== gramps.getFirstChild()) {
 if (gramps.isBlockStatement() && parent == gramps.getFirstChild()) {
 if (n == gramps) if (gramps.isCall() && parent == gramps.getFirstChild()) {
if (gramps.isNull()) { return; } else
 if (gramps.next()!== gramps.getFirstChild()) {
 if ((gramps) && parent == gramps.getFirstChild()) {
 if (parent!= gramps) { if (gramps.isCall() && parent == gramps.getFirstChild()) {
 if (gramps == null) { return; } if (parent!= gramps) { }
 if (gramps == null) { return; return; } } else {
 parent = gramps. getFirstChild(); } else
if (gramps.isCall() && parent == gramps.getParent()) return;
 if (gramps.isBlock() && parent == null) {
 if (parent == gramps) if (parent.isCall() && parent == gramps.getFirstChild()) {
 if (parent == gramps || parent==gramps.isCall() && parent == gramps.getFirstChild()) {
 for (Node n : gramps.children().getFirstChild()) {
if (gramps.isCall() && parent == gramps.getLastChild()) return;
if (gramps.isCall() &&  n == parent) {
if (gramps.isCall() && parent == gramps.getFirstChild())) {
if (gramps.isCallable()) { return; }
 if (gramps) { return; }
 if (gramps) { return; } else
if  gramps {
 if ((gramps!= null)) {
 if (gramps.next() && parent == gramps.getFirstChild()) {
 if (parent!= gramps && gramps.isCall() && parent == gramps.getFirstChild()) {
if (gramps.isCall() &&  gramps.isName()) return;
 if (gramps) { if(gramps.isCall() && parent == gramps.getFirstChild()) {
if (gramps.isCall() ) return; else
 if (gramps.hasNext()&& parent == gramps.getFirstChild()) {
if (gramps.isCall(null)) { return; } else
 if (gramps == null && gramps.getFirstChild()) {
if (gramps.isCall() && parent .getFirstChild().isName()) return;
 if (.isCall() && parent == gramps.getFirstChild()) {
 if (parent.isBlock()) {
 if (gramps!= null && n==gramps.getFirstChild()) {
if (gramps.isCall() && parent == gramps.getFirstChild()) { return; } return; } else
if (gramps.isCall(null)) { return; } } else {
 for (Node n : gramps.parent.getFirstChild()) {
 if (parent == gramps || (gramps.isCall() && parent == gramps.getFirstChild()) {
if (gramps.isCall() && parent == gramps.getFirstChild()) { return; } } } else {
 if (gramps.getFirstChild().isCall() && parent == gramps.getFirstChild()) {
if (gramps.isCall(null)) { return; }
 for (Node n : gramps.parents().getFirstChild()) {
 if (parent!= gramps&& parent == gramps.getFirstChild()) {
if (gramps.isCall() && parent == gramps.getFirstChild() && parent!= null) {
 while (parent.getFirstChild()) {
 if (gramps == null) { return; } if (parent!= gramps) { else
if (gramps.isCall() ) return; } else
if (gramps.isCall() && parent == gramps.getFirstChild() || parent == gramps.parent) {
if (gramps.isCall() && parent == gramps.getFirstChild())  { return; } if (gramps) {
 if (n.getNext()== gramps.getFirstChild()) {
 if (gramps!= null) { } else{
if (gramps.isCall() && parent == gramps.getFirstChild()) { return; } else {
 if (gramps == Node.BLOCK) {
if (gramps.isCall() ) { return; } else { return; }
if (gramps.isCall() && parent == gramps.parent) {
if (gramps.isCall() && parent == gramps.getFirstChild() && parent == gramps.getNext()) {
 if (parent == gramps) if (!gramps.isCall() && parent == gramps.getFirstChild()) {
 if (gramps && n== gramps.getFirstChild()) {
 if (gramps!= null && parent.getFirstChild()) {
 if (gramps!= parent.getParent()) {
if (gramps.isEmpty()) { return; } } else {
if (gramps.isCall() && parent == gramps.getLastChild()) {
 if (gramps.getParent().isCall() && parent == gramps.getFirstChild()) {
 for (Node n : gramps.iter()) {
if (gramps.isCall() && parent ==  gramps).getFirstChild()) return;
if (gramps.isCall() && parent == gramps.getFirstChild() && parent!= gramps.getLastChild) {
 if (n == gramps ||!gramps.isCall() && parent == gramps.getFirstChild()) {
if (gramps.getType() == Token.FOR) {
if (gramps.isCallable()) { return; } } else
 if (gramps) { if (parent.getFirstChild()) {
 if (gramps == null) { return; } else { } } else
if  (grams) return;
 if (gramps.isLiteral() && parent == gramps.getFirstChild()) {
 if (gamps!= null &&!gamps.isCall() && parent == gramps.getFirstChild()) {
 while (gramps.isBlock() && parent == gramps.getFirstChild()) {
 if (g == parent.getFirstChild()) {
 if (gramps.isBlock() && parent == gramps) { else
 if (gramps && parent!== gramps.getFirstChild()) {
 if (gramps!= null) { return; } } else {
if (gramps.isCall() &&  n!= gramps) return;
 while (n!= parent.getFirstChild()) {
if (gramps.isCall() && parent == gramps.getFirstChild() || parent == gramps.getFirstChild(...)) {
 if (gramps == null) { return; } if (gramps!= null) { }
 if (gramps!= null && isBlock() && parent == gramps.getFirstChild()) {
 while (parent!= gramps) { if(gramps.isCall() && parent == gramps.getFirstChild()) {
 for (Node n = (Node)gramps.getFirstChild()) {
 if (gramps.getNext == parent.getFirstChild()) {
 parent = gramps ; } else
if (gramps.isCall() &&  gramps.isIdentifier()) {
 if (gramps!= null) return; } else
 while (n!= gramps &&!gramps.getFirstChild()) {
 if (gramps!= null && parent == parent.getFirstChild()) {
 if (n == gramps &&gramps.isCall() && parent == gramps.getFirstChild()) {
 if (parent == gramps && n.isCall() && parent == gramps.getFirstChild()) {
 if (grams.isVoid()) {
 if ((parent!= null) && parent == gramps.getFirstChild()) {
if (gramps.isCall() && parent == gramps.getNext()) {
if (gramps.isCall() && parent == gramps.getFirstChild() || parent == gramps.nextChild) {
 if (gramps.isName()) { return; }
 if (gramps.isExpr() && parent == gramps.getFirstChild()) {
if (gramps.isCall() && parent == gramps.getFirstChild() { return; } } else {
if (gramps.isCall() && parent == gramps.getFirstChild() && gramps.getNext().isName(...)) {
 if (gramps == null) { return; } } else {
if (gramps.isCall() && parent == gramps.parent()) {
 while (n == gramps ||!gramps.getFirstChild()) {
 while (gramps.isCall()) { return; } else
 for (Node n : gramps) if (!gramps.getFirstChild()) {
 if (gramps == Node.FOR) {
 if (parent == null ||gramps.isCall() && parent == gramps.getFirstChild()) {
if (gramps.isCall() && parent == gramps.getFirstChild() || parent == gramps.next) {
if (gramps.isCall() && parent == gramps.getFirstChild())) { } else
 if (parent!= null)) {
 if (gramps.isAncestor()) {
 if (gramps.isDefined() && parent == gramps.getFirstChild()) {
if (gramps.isCall() &&  n == gramps) return;
if (gramps.isCall() && parent == gramps) { return; } } } else {
 if (parent!= null) && parent == gramps.getFirstChild()) {
 if (grams!= null){
 if (parent == gramps &&!isCall() && parent == gramps.getFirstChild()) {
if (gramps.isNull()) { return; } } else {
if (gramps.isCall() && parent == gramps.getFirstChild() || parent == gramps.getSecondChild) {
 if (ggramps.isCall() && parent == gramps.getFirstChild()) {
 if (grams == null){
 while (parent!= gramps && (parent == gramps.getFirstChild()) {
 while (n.next()) {
if (gramps.isCall() && parent ==  null)
 if (gamps!= null&& parent == gramps.getFirstChild()) {
if (gramps.isCall() && parent .isName()) { return; }
 if (gramps == null ||parent == gramps.getFirstChild()) {
if (gramps.isCall() ) { return; } } } else
 if (n == gramps ||gramps.isCall() && parent == gramps.getFirstChild()) {
if (gramps.isCall(null)) { return; } } else
 for (Node n in gramps.getFirstChild()) {
if (gramps.isCall() &&  gramps.isBlock()) {
if (gramps.isNull()) { return; } } else
if (gramps.isCall() && parent == gramps.getFirstChild()) { return; } else { } else
 while (gramps!= null && parent.next() && parent == gramps.getFirstChild()) {
if (gramps.isCall() &&  n == gramps) {
 for (Node n : grampsNode.getFirstChild()) {
if (gramps.isCall() && parent == gramps.getLastChild()) { } else
 if (gramps.isBlock() ) {
if (gramps.isNull()) { return; }
if (gramps.isCallNode()) { return; } } else {
if (gramps.isCallable()) { return; } } else {
if (gramps.isCall() && parent == gramps) { return; } return; } else
 if (gramps!= null && parent == n&& parent == gramps.getFirstChild()) {
 if (grams.getNext == parent.getFirstChild()) {
 for (Node n : grampsChildren()) {
if (gramps.isBlock()) { return; } else
 if (gramps) && parent == gramps.getFirstChild()) {
if (gramps.isCall() && parent == gramps.getFirstChild() && gramps.getLastChild() == parent) {
if (gramps.isCallNode()) { return; }
if (gramps.isCall(parent)) { return; }
 if (parent == null ||parent == gramps.getFirstChild()) {
if (gramps.isCall() && parent == gramps.getFirstChild() && gramps.isName) {
 if (gramps.isFunction()&& parent == gramps.getFirstChild()) {
if (gramps.isCall() &&  gramps.isName())) {
 if (gramps.isBlock&& parent == gramps.getFirstChild()) {
if (gramps.isCall() &&  gramps.isName()) return; else
 if (parent == gramps || parent.isCall() && parent == gramps.getFirstChild()) {
 if (grams && (parent == gramps.getFirstChild()) {
if  (gramps == null) { } else
 if (groups.isCall() && parent == gramps.getFirstChild()) {
if (gramps.isCall() && parent == gramps.getFirstChild()) { return; } } } else
 if (grams && parent.isCall() && parent == gramps.getFirstChild()) {
 if (gramps.isName() && parent == gramps) { else
 if (gramps.isBlock()) return;
 if (n.isCall() && parent == gramps.getFirstChild()) {
 } else{
 if (parent.next()) {
if (gramps.isCall() && parent == gramps.getFirstChild() && parent == gramps.getParent) {
if (gramps.isCall() && parent == gramps) { return; } else { } else
 if (gramps.isExpression() && parent == gramps.getFirstChild()) {
 if () && parent == gramps.getFirstChild()) {
 if (grams!= null) && parent == gramps.getFirstChild()) {
 while (gramps.isCall() && parent == gramps.getFirstChild()) {
 if (() && parent == gramps.getFirstChild()) {
 if (gramps == null && parent.getFirstChild()) {
if (gramps.empty()) {
if (gramps.isCall() && parent .getLastChild() == gramps)) {
 while (gramps!= null) {
 if (gramps!= null) { } if(gramps.isCall() && parent == gramps.getFirstChild()) {
 if (gramps == null) return;{
 if (gramps!= null && n!= parent) {
if (gramps.isCall() &&  n!= parent) {
 if (n!= null&& parent == gramps.getFirstChild()) {
 if (gramps.isVoid()) {
 if (grams!= null) if(gramps.isCall() && parent == gramps.getFirstChild()) {
if (gramps.isCall() && parent ==  gramps)) return; else
if (gramps!= null) return; } else {
if (gramps.isCall() && parent == gramps.getFirstChild()) return; } else
 if (gramps.isNamed() && parent == gramps.getFirstChild()) {
if (gramps.isCall() && !gramps) {
 if (n.isName()) {
if (gramps.isCall(n)) { return; } } } else {
 if (gramps.isBlock() && parent == gramps) { }
 if (parent.parent!== gramps.getFirstChild()) {
 if (gramps.isBlock()) return; } else
 if (parent == null) if(gramps.isCall() && parent == gramps.getFirstChild()) {
if (gramps.isCall(n)) { return; } } } else
if (gramps.isBlock()) { return; }
if (gramps.isCall() && parent == gramps.getFirstChild() && gramps.getLastChild == parent) {
 if (gramps && parent.isCall() && parent == gramps.getFirstChild()) {
 if (gramps!= null) { try{
 if (gramps.isNode() && parent == gramps.getFirstChild()) {
 while (n!= null &&parent == gramps.getFirstChild()) {
 if (gramps.isBlock().getFirstChild()) {
if (gramps.isCall() &&  gramps.isIdentifier()) return; else
if (gramps.getType()!= Token.BLOCK) {
 if (!== gramps.getFirstChild()) {
 while (gramps.isEmpty() || (parent == gramps.getFirstChild()) {
if (gramps.isCall() && parent == gramps.getFirstChild() && gramps.getNext().isIdentifier) {
if (gramps.isCall(parent)) { return; } } else
if (gramps.isCall() && parent == gramps.getFirstChild() && gramps.isBlock()) {
 while (n!== gramps.getFirstChild()) {
 if (gramps!= -1&& parent == gramps.getFirstChild()) {
if (gramps.isCall() && parent == gramps.getFirstChild() && parent.getChildCount()++) {
if (gramps == null) return; return; } else
 if (gramps.isAscending() && parent == gramps.getFirstChild()) {
if (gramps.isCall(true)) { return; } } else {
 if (gamps.next() && parent == gramps.getFirstChild()) {
 if (gramps == null) { return; } else { } }
if (gramps.isCall() && parent == gramps.getFirstChild()) { return; } } else { } else
if (gramps.isCall() && parent == gramps.getFirstChild() && gramps.isName()) {
if (gramps.isCall() && parent ==  gramps).return; } else
 if (gamps.getNext( ).isCall() && parent == gramps.getFirstChild()) {
 while (n.next() && parent == gramps.getFirstChild()) {
if (gramps.isCall() && parent == gramps.getFirstChild() || parent == parent.getParent) {
 while (getFirstChild()) {
 if (gramps!= null && isName() && parent == gramps.getFirstChild()) {
if (gramps.isCall() && parent == gramps.getFirstChild())  { return; } else return; } else {
 while (parent!= gramps&& parent == gramps.getFirstChild()) {
if (gramps.isCall() ) { return; } } } else {
if (gramps.isCall() && parent == gramps.getFirstChild() || gramps.getLastChild() == parent) {
if (gramps.isCall() && parent == gramps.getFirstChild() && parent == gramps.getNext) {
 if (gramps.isBlock(n) && parent == gramps.getFirstChild()) {
 if (getFirstChild()) {
if (gramps.isCall() )) { return; } } else {
 if (gramps.isBlock()) return; else
 if (parentGramps.isCall() && parent == gramps.getFirstChild()) {
if (gramps.isCall() && parent == gramps.getFirstChild()) { return; } return; } else {
 if (gramps == null) { return; } else { }
 for (Node n=gramps.getFirstChild()) {
 if (gramps.isExprResult(() && parent == gramps.getFirstChild()) {
 if (gramps!= null &&!gramps) {
if (gramps.isCall() &&  gramps.isBlock()) return;
if (gramps.isCall() && parent ==  n) {
if (gramps.isCall() && parent .getFirstChild() == n)
if (gramps.isCall() &&  gramps.isName()) { } else
if (gramps.isCall() && parent == gramps.getFirstChild() || parent == gramps.call) {
 if (gramps.isParent().getFirstChild()) {
 for (Node n : gr.getFirstChild()) {
 if (g) {
if (gramps.isCall() && parent .isName())) {
 if (gramps!= null)
if (gramps!= gramps) { return; } else
 if (gramps!= null && strict&& parent == gramps.getFirstChild()) {
if (gramps.isCall(n)) { return; } else {
 while (n == parent.gramps.getFirstChild()) {
 if (n == parent &&gramps.isCall() && parent == gramps.getFirstChild()) {
 if (gramps!= null) { return; } }
 if (gramps.next(*) && parent == gramps.getFirstChild()) {
 if (parent.next() && parent == gramps.getFirstChild()) {
if (gramps.isBlock()) return;
 if (gr) {
 if (parent.isAncestor()) {
 if (ggramps == parent.getFirstChild()) {
if (gramps.isCall() && parent == gramps.getFirstChild() || parent == gramps.lastChild) {
if (gramps.isCall() &&  gramps.isIdentifier()) { } else
 while (gramps && n== gramps.getFirstChild()) {
 if (gramps.isName&& parent == gramps.getFirstChild()) {
if  (gramps == null) { return }
if (gramps.isCall() && parent ==  gramps) { } else
if (gramps.isEmpty()) return; else
if (gramps.empty()) return;
 if (gramps.isEmpty()) {
 if (gramps.node == parent.getFirstChild()) {
 if (gramps == null) { return; } else {
if (gramps.isCall() && parent == gramps.getFirstChild(parent)) { return; } else
 while (parent.isBlock() && parent == gramps.getFirstChild()) {
 if (gramps.child == parent.getFirstChild()) {
if  (gramps == null)
 while (gramps.isCall()) { return; }
 if (gramps == null ||(gramps.isCall() && parent == gramps.getFirstChild()) {
 if (gramps.isParentNode(n) && parent == gramps.getFirstChild()) {
 if (ggramps) {
 if (gramps == null) {
 if (parent == ggramps.isCall() && parent == gramps.getFirstChild()) {
if (gramps.isCall() && parent == gramps.getFirstChild() || parent == null) {
if (gramps.isCall() && parent == gramps.getFirstChild() { return; } } else
 if (grams.remove()) {
 if (gramps.isExprResult())) {
 if (gramps) { if (!parent.getFirstChild()) {
if (gramps.isCall() && parent ==  gramps)) { } else
 while (n!= null &&gramps.getFirstChild()) {
 if (gr)) {
 if (parent.isFunction()) {
 if (gramps) return; } else
 if (n!= gramps.isCall() && parent == gramps.getFirstChild()) {
 while (parent!= null) {
if (gramps.isCall() && parent == gramps.getFirstChild()) { return; } } else { else
 if ((gramps == null)) {
if (gramps.isCall() && parent == gramps) { return; } } else { } else
if (gramps.isCall() && parent == gramps.getFirstChild() || gramps.isBlock()) {
if (gramps.isCall() && parent .getLastChild()) { } else
if (gramps.isCall(n)) {
 if (gramps.isExpr(() && parent == gramps.getFirstChild()) {
if (gramps.isCall() ) { return; } } } } else
 for (Node n : (gramps.getFirstChild()) {
 if (grams.empty()) {
 if (gramps.isParentOf(n) && parent == gramps.getFirstChild()) {
 if (!.getFirstChild()) {
if (gramps.isCall() &&  n == gramps.getNext())) {
 if (gramps) return; else
if (gramps.isCall() && parent .getLastChild() == n)
 if (n == parent) if(gramps.isCall() && parent == gramps.getFirstChild()) {
 if (parent.getFirstChild==gramps.getFirstChild()) {
 if (n == parent.gramps.getFirstChild()) {
 if (grams!= null)) {
 for (Node n : grampsRoot.getFirstChild()) {
if (gramps.isCall() && parent == gramps) { return; } } else { else
if  (gramp) {
 while (parent.next() && parent == gramps.getFirstChild()) {
 while (gramps &&gramps.isCall() && parent == gramps.getFirstChild()) {
 if (!gramps){
if  (!gramps)
if (gramps.isCall() && parent .getFirstChild()==null)
if (gramps.isCall() && parent == gramps.getFirstChild())) return; else
if (gramps.isCall() && parent == gramps.getFirstChild())  { continue; } } else {
 if (gramps.isFunction()) {
if (gramps.isCall() && parent == gramps) { return; } return; } else {
if (gramps.isCall() && parent ==  n)
 if (grams.isLiteral()) {
 if (gramps!= GRAMP) {
 return; } else
if (gramps.isCall(true)) { return; } } else
 if (gramps.isLiteral()) {
 while (n== gramps.getFirstChild()) {
 if (gramps)
if (gramps.isCall() && parent == gramps.getFirstChild() && gramps.isBlock) {
 if (gramps.empty())) {
 if (hasNext()) {
 if (isBlock() && parent == gramps.getFirstChild()) {
 if (gramps) return;
if (grams == null) return;
if (gramps.isCall(n)) { } else
if (gramps.isCall() && parent == gramps.getFirstChild() && gramps.getNext!= null) {
if (gramps.isCall()  { return; } else
 for (Node n: (Node)gramps.getFirstChild()) {
 if (n == parent && parent.isCall() && parent == gramps.getFirstChild()) {
if (gramps.isCall() ) { return; } else { } else
 if (gramps.isBlock() && parent == gramps) else
if (gramps.isEmpty()) return; } else
 if (!parent.getFirstChild()) {
if  (!gramps) return; else
if (gramps.isCall() &&  gramps.block()) {
if (gramps.isCall() && parent == gramps.getFirstChild() && gramps.isName(...)) {
 while (parent.next()) {
 if (gramps!= null && recursive) {
 if (gramps == parent) {
 if (parent.isFunction() && parent == gramps.getFirstChild()) {
if (gramps.isCall() && parent .isFirstChild()) return;
 if (grams.next()) {
 while (gramps&& parent == gramps.getFirstChild()) {
if (gramps.isCall() && parent == gramps.getFirstChild(null)) { return; }
 if (gramps == GRAMP) {
 if (gramps.isName() && parent == gramps) else
 if (grams.isEmptyNode()) {
 while (gramps){
if (gramps.isCall() && parent == gramps.getFirstChild() || parent.getFirstChild == parent) {
if (gramps!= gramps) return; else
 if (gramp.getFirstChild()) {
 if (n == gramps.gramps.getFirstChild()) {
 if (n.next()) {
 if (grams.isEmpty(?)) {
if (gramps.isCall(n)) return;
 if (parent == null &&gramps.isCall() && parent == gramps.getFirstChild()) {
 if ((g)) {
if (gramps.isName()) return;
 if (gramps.isName(n)) {
 while (.getFirstChild()) {
 if (grams.hasNext().next()) {
 if (n == null ||gramps.isCall() && parent == gramps.getFirstChild()) {
 if (grams()) {
 if (parent!= gramps.isCall() && parent == gramps.getFirstChild()) {
if (gramps.isCall() ) { return; } } else { } else
if (gramps.isCall() && parent == gramps.getFirstChild() || gramps == null) {
 while (parent!= null&& parent == gramps.getFirstChild()) {
if (gramps.isCall() && parent ==  gramps).return; else
if (gramps.isCall() && parent == gramps.getNode()) {
if (gramp == null) {
 if (n.next() && parent == gramps.getFirstChild()) {
 if (gramps.isLiteral())) {
 if (gramps.isName(...)) {
if (gramps.isCall() && parent == gramps.getNext())) {
 if (gramps!= null) return; }
if (gramps.isNull()) return;
 if (gramps!= null &&(gramps.isCall() && parent == gramps.getFirstChild()) {
if (gramps.isCall() && parent == gramps.getFirstChild() && parent!= gramps) {
if (gramps.isCall() && parent == gramps.getFirstChild() && parent == gramps.parent) {
 if (gramps.isBlock(n)) {
 if (gramps.isParent.getFirstChild()) {
if (gramps.isCall(n)) { return; } } else { else
 if (gramps.isVoid())) {
if (gramps.isCall() && parent == gramps.getParent())) {
if (gramps.isCall() && parent == gramps.getFirstChild() || gramps.isName) {
if (gramps.isCall() ) { return; } else {
if (gramps.isName()) { } else
 for (Node n = parent.gramps.getFirstChild()) {
 if (gramp!= null) {
 while (hasNext()) {
if (gramps.isCall() && parent ==  gramps)) return;
if (gramps.isCall() && parent .isName()) {
if (gramps.isBlock()) { } else
if (gramps.isEmpty()) { return;
 while (n.isName()) {
 if (!gramps&& parent == gramps.getFirstChild()) {
 if (grams.isParent.getFirstChild()) {
if (gramps.isCall() && parent == gramps.getFirstChild() || parent == gramps2) {
 if (!gramps)) {
 if (grams.isEmpty(n)) {
if (gramps.isCall() && parent == gramps.getFirstChild(parent)) {
 if (n gramps.isCall() && parent == gramps.getFirstChild()) {
 while (gramps.parent == gramps.getFirstChild()) {
 if (n!= null)) {
 if (n == gramps &&gramps.getFirstChild()) {
if (gramps.isCall() && parent == gramps.getFirstChild() && parent == gramps) {
if (gramps.isCall() && parent == gramps.getFirstChild() || gramps.isBlock) {
 } else if(gramps.isCall() && parent == gramps.getFirstChild()) {
 if (gramps!= null{
 if (grams.isEmpty(...)) {
if (gramps.isCall() { return; } } else
 if (gramps++) {
 if (gramps instanceof Name) {
 while (gramps!= null) { }
if (gramps.isCall() && parent == gramps.getFirstChild() && parent.isName(...)) {
if (gramps.isCall() && parent ==  root) {
if (gramps.isCall(null)) return;
 if (n == gramps ||gramps.getFirstChild()) {
 if (!gramps) if(gramps.isCall() && parent == gramps.getFirstChild()) {
 if (isName() && parent == gramps.getFirstChild()) {
 if (() {
if (gramps.isCall() && parent ==  gramps) { return; } }
 while (hasNext() && parent == gramps.getFirstChild()) {
 if (gramps!= null) { else
 if ()) {
 if (gramps.isFunction&& parent == gramps.getFirstChild()) {
 if ((debug) && parent == gramps.getFirstChild()) {
if (gramps.isCall() && parent == gramps.getFirstChild() || parent == parent.parent) {
 if (parent == null&& parent == gramps.getFirstChild()) {
if  (gramp)
if (gramps.isCall(n)) return; else
if (gramps.isCall() && parent == gramps.getFirstChild() || parent == grampsNode) {
if (gramps.isCall() && parent == gramps)) { return; } } else { else
 parent = null ; } else
 while (&& parent == gramps.getFirstChild()) {
 if (gramps) while(gramps.isCall() && parent == gramps.getFirstChild()) {
if (gramps.isCall() ) return; } else {
 if (!isCall() && parent == gramps.getFirstChild()) {
if (gramps.isCall() && parent == gramps.getFirstChild(n)) {
if (gramps.isCall(parent)) { } else
 if (this.parent == gramps.getFirstChild()) {
if (gramps.isCall() && parent == gramps.getFirstChild() && parent == gramps.next) {
 if (!gramps.isCall() && parent == gramps.getFirstChild()) {
 if (parent.gramps.isCall() && parent == gramps.getFirstChild()) {
 while (n!= parent.gramps.getFirstChild()) {
 if (n == parent ||parent == gramps.getFirstChild()) {
if (gramps.isCall() && parent == gramps.getFirstChild()) { return;
if (gramps.isCall() && parent == gramps.next()) {
if (gramps.isCall() && parent == gramps) return; else return; } else { else
 if (n!= null) && parent == gramps.getFirstChild()) {
 while (parent.isCall() && parent == gramps.getFirstChild()) {
 if (n.getFirstChild()) {
 if (parent.empty() && parent == gramps.getFirstChild()) {
 if ((gr)) {
 while (!gramps.getFirstChild()) {
 if () {
if (gramps.isCall(parent)) return;
 return; } else if(gramps.isCall() && parent == gramps.getFirstChild()) {
 if (gramps instanceof Statement) {
if (gramps.isCall() && parent == gramps.getFirstChild())  { continue; } } else
if (gramps.isCall() ) { return; } } else { else
if (gramps.isCall() && parent == gramps.getFirstChild())  { return; } } else { }
 for (Node n: parent.gramps.getFirstChild()) {
if (gramps.isCall() && parent == gramps.getFirstChild()) { return; } else { }
 if (hasNext() && parent == gramps.getFirstChild()) {
if (gramps.isCall(n)) { return; } } else { }
 if (parent == null) && parent == gramps.getFirstChild()) {
 if (n!= null) {
if (gramps.isCall() && parent ==  gramps) continue;
if (gramps.isCall() &&  gramps.isIdentifier()) { else
if (gramps.isCall() &&  gramps)) {
if (gramps.isCall() )) { } else
if (gramps.isCall() && parent == gramps.getFirstChild() && parent.isName()) {
 if (gramps{
 if (gramps!= gramps)){
 if (g.next()) {
if (gramps.isCallable()) return;
if (gramps.isCall() && parent == gramps.getFirstChild() && gramps.isString) {
if (gramps.isCall() && parent == gramps.getFirstChild())) return;
 if (!) {
if (gramps.isCall() && parent == gramps.getFirstChild() && n!= null) {
if (gramps.isCallNode()) { } else
if (gramps.isCall() && parent == gramps.getFirstChild()) { else
 while (parent!== gramps.getFirstChild()) {
if (gramps.isCall() &&  gramps.isName()) { else
 if (n.gramps.isCall() && parent == gramps.getFirstChild()) {
if (gramps.isCall(parent)) { return; } } else { else
 if (parent&& parent == gramps.getFirstChild()) {
if (gramps.isCall() &&  gramps.isBlock()) { else
if (gramps.isCall() ) { return; } else { }
if (gramps.isCall(parent)) {
if (gramps.isCall() && parent == gramps.next) return;
 if (hasChildren()) {
 if ((gramps!== gramps.getFirstChild()) {
if (gramps.isCall() )) return;
if (gramps.isCall() && parent == gramps.getFirstChild(parent)) { } else
if (gramps.isCall() && parent == gramps.getFirstChild() && n == parent.next) {
if (gramps.isCallNode()) { return; } } else { else
if (gramps.isCall() && parent ==  gramps)) {
 parent = gramps. parent ; }
if (gramps.isCallable()) { } else
 if (gramp)) {
if (gramps.isCall(null)) {
if (gramps.isCall() && parent == gramps.getFirstChild() || n == gramps) {
 if (debug()) {
 if (!gramps.parent == gramps.getFirstChild()) {
if (gramps.isCall() && parent == gramps.next()) return;
if (gramps.isCall() )) return; else
 if (gramps) { else
if (gramps.isCall() )) {
if  (gramps) { else
if (gramps.isCallable()) { return; } } else { else
 if (isGramps)) {
if (gramps.isCallNode()) return;
if (gramps.isCall()  ) { } else
if (gramps.empty())
if (gramps.isCall() && parent == gramps.getFirstChild())  { break; } } else
 if (!.isCall() && parent == gramps.getFirstChild()) {
if (gramps.isCall() && parent == gramps.parent())
 if (debug() && parent == gramps.getFirstChild()) {
 } else if (parent == gramps.getFirstChild()) {
 if (ggramps)) {
if (gramps.isCall() && parent == gramps.getFirstChild(null)) { } else
 if (!getFirstChild()) {
if  (gramps &&
 if (!gramps &&gramps.isCall() && parent == gramps.getFirstChild()) {
if (gramps.isCall() && parent == gramps.getFirstChild() || parent == n) {
 if (!empty() && parent == gramps.getFirstChild()) {
 if (parent.next(() && parent == gramps.getFirstChild()) {
if (gramps.isCall() &&  gramps).
 if (gramps == null) continue{
if (gramps.length) {
if (gramps.isCall(n)) { return;
 if (hasChildren() && parent == gramps.getFirstChild()) {
 if (isName()) {
 parent = gramps ; }
 if (n.parent == gramps.getFirstChild()) {
if (gramps.isCall() && parent == gramps.getFirstChild() || n == parent) {
if (gramps.isCall() && parent ==  this) {
if (debug)
 if (g)) {
if (gramps.isCall() && parent == gramps.getFirstChild() && gramps.block) {
 while (true){
if (gramps.isCall() && parent == gramps.getFirstChild() || gramps == parent) {
if  (grams) {
 parent = null; } if(gramps.isCall() && parent == gramps.getFirstChild()) {
 if (g&& parent == gramps.getFirstChild()) {
 while (next() && parent == gramps.getFirstChild()) {
if (gramps.isCall() && parent .isFirstChild()) { else
if (gramps.isCall() && parent == gramps.getFirstChild() { return; } } else { else
if (gramps.isCall() && parent == gramps.getFirstChild() && n!= parent) {
if (gramps.isCall() && !gramps)
 if (grampFound) {
 if (!parent.isCall() && parent == gramps.getFirstChild()) {
if (gramps.isCall() && parent == gramps.getFirstChild() && parent.isName) {
 if (gramps==&& parent == gramps.getFirstChild()) {
 if (n&& parent == gramps.getFirstChild()) {
 if (g.getFirstChild()) {
if (gramps.isCall() && parent .getFirstChild()) { else
if (gramps.isCall() && parent == gramps.getFirstChild() || parent.isName) {
 if (if (parent == gramps.getFirstChild()) {
if (gramps.isCall() &&  gamps) {
if (gramps.isCall() && parent != null)) {
if (gramps.isCall() && parent == gramps.parent)) {
if (gramps.isCall() && parent == gramps.getFirstChild())  { return; } }
if (gramps.isCall() && parent == gramps.getFirstChild() || parent == parent) {
 if (debug) {
 while (!.getFirstChild()) {
if (gramps.isCall() && parent .isFirstChild()) { }
if (gramps.isCall() && parent ==  gramps) { }
 if (isFunction()) {
 } else { if(gramps.isCall() && parent == gramps.getFirstChild()) {
 if (grand) {
if (gramps!= null)
if (gramps.isCall() && parent ==  parent) {
 if ((grand)) {
 parent = null; }
if (gramps.isCall() && parent == gramps.getFirstChild())  return; } else {
 if (n) if(gramps.isCall() && parent == gramps.getFirstChild()) {
 while (n.getFirstChild()) {
 (parent.isCall() && parent == gramps.getFirstChild()) {
 while (next()) {
 return; } else {
 if (parent) if(gramps.isCall() && parent == gramps.getFirstChild()) {
if (gramps.isCall() && parent == gramps.self) {
if (gramps.isCall() && parent == gramps.getFirstChild() && n == parent) {
 while (true()) {
 while (continue()) {
 if gramps){
if (gramps.isCall() && parent == gramps.getFirstChild())  { continue; } else
 synchronized (lock()) {
if (gramps) return; else
 } if (gramps.isCall() && parent == gramps.getFirstChild()) {
 } else
if  (!gr)
 while (() && parent == gramps.getFirstChild()) {
 if (empty() && parent == gramps.getFirstChild()) {
 gramps.isCall() && parent == gramps.getFirstChild()) {
if (gramps.leaf()) {
 while (n&& parent == gramps.getFirstChild()) {
 if (eval() && parent == gramps.getFirstChild()) {
 if (!) && parent == gramps.getFirstChild()) {
if (gramps) continue;
 } else {
 } if (parent == gramps.getFirstChild()) {
 while (!getFirstChild()) {
if (gramps.leaf) {
 while (isCall() && parent == gramps.getFirstChild()) {
if (gramps.isCall() &&  gramps);
 if (true) if(gramps.isCall() && parent == gramps.getFirstChild()) {
 while (parent== gramps.getFirstChild()) {
 if parent.isCall() && parent == gramps.getFirstChild()) {
if  gramp {
if (gramps.isCall() && parent == gramps.getFirstChild() && parent == n) {
if (gramps.isCall() && parent == gramps.getFirstChild(n)) { else
if  gramps else
if (gramps.length)
if  (!)
 return; } if(gramps.isCall() && parent == gramps.getFirstChild()) {
 while ()) {
 while (true) && parent == gramps.getFirstChild()) {
 if (gramp) && parent == gramps.getFirstChild()) {
 if (null== gramps.getFirstChild()) {
if (gramps.isCall(...) {
if (gramps.isCall() && parent == gramps.getFirstChild(parent)) { else
if (gramps.isCall(n)) { else
if (gramps.isCall() &&  gramps else
 if (!() && parent == gramps.getFirstChild()) {
if (gramps.isCall() && parent == gramps.getFirstChild() || parent == root) {
if (gramps.isBlock())
if (gramps.isCall() && parent ==  root)
if (gramps.isCall() && parent ) return;
 if (null==parent == gramps.getFirstChild()) {
(function()) {
 if (gramps!= parent{
if (null)
if (gramps.isCall() && parent == gramps.getFirstChild())  { return }
 while (n.isCall() && parent == gramps.getFirstChild()) {
if (gramps.isCall() && parent ==  Gramps) {
if (gramps.isCall(...))
 while () && parent == gramps.getFirstChild()) {
 if (parents&& parent == gramps.getFirstChild()) {
if (gramps.isCall() &&  Gramps)
 } } else if(gramps.isCall() && parent == gramps.getFirstChild()) {
if (true)
 if (!(parent == gramps.getFirstChild()) {
if (gramps.isCall() && parent == gramps.getFirstChild())) { else
if (gramps.isCall() &&  } else
if (gramps.isCall() && parent == gramps.getFirstChild() && gramps) {
 while (== gramps.getFirstChild()) {
if (gramps.isCall() && parent == gramps.call())
 while (()) {
if (gramps.isCall() && parent == gramps.getFirstChild())  { continue; }
 while (!== gramps.getFirstChild()) {
if (gramps.isCall() && parent ==  parent)
if (gramps.isCall() && parent ==  gramps()) {
if (gramps.isCall(n)) { }
 if (*) {
if (gramps.isCall() && parent == gramps.getFirstChild())  continue;
if (gramps.isCall() && parent ==  this)
if (gramps.isCall() && parent )) {
 } } else{
 if if (parent == gramps.getFirstChild()) {
 return; }
if (gramps.isCall() && parent == gramps.getFirstChild())  break; } else
if (gramps.isCall() && parent == gramps.getFirstChild( ))
if (g)
if  (else
.next()) {
 if (!)) {
 if(grandparent == gramps.getFirstChild()) {
if (gramps).
if (gramps);
 } if (!gramps.isCall() && parent == gramps.getFirstChild()) {
 } } else
if (gramps.parent)
if (gramps.isCall() && parent == gramps.getFirstChild(...) {
if (gramps.isCall(null))
 while (!isCall() && parent == gramps.getFirstChild()) {
if (gramps.isCall() &&  true)
if (gramps.isCall()) { else
if (gramps.isCall() && parent == gramps.getFirstChild())  break;
if  (null
if (gramps.isCall() {
if (gramps.block)
 } else if (!(gramps.isCall() && parent == gramps.getFirstChild()) {
if (gramps.isCall() && parent!= gramps.getFirstChild()) {
if (gramps.isCall() && parent != null).
if (gramps.isCall() && parent == gramps.node)
if (gramps.isCall() && parent == gramps.next())
 while (!gramps.isCall() && parent == gramps.getFirstChild()) {
if (g);
if (gramps.isCall())
 } else { else
if (gramps.isCall() && parent == gramps.getFirstChild(...))
(while()) {
if (gramps.isCall() && parent == gramps.getFirstChild(parent))
 for (&& parent == gramps.getFirstChild()) {
if (gramps.null)
.parent()) {
 if (!&& parent == gramps.getFirstChild()) {
if (gramps.isCall() && parent == gramps.getFirstChild() || GRAMP) {
 if ((getFirstChild()) {
if (gramps.isCall) {
 if ((parent == gramps.getFirstChild()) {
 if (g{
 if (!parent == gramps.getFirstChild()) {
if (gramps.isCall() && parent ++) {
if (gramps.isCall() || parent == gramps.getFirstChild()) {
if (gramps.isCall() && parent == gramps.getFirstChild() && gremlin) {
 if (...{
if (gramps.isCall() && parent == gramps.getFirstChild()); {
if (gramps.isCall() && parent == gramps.getFirstChild() &&! recursive) {
if (gramps.isCall() && parent == gramps.getFirstChild() &&! ignore) {
if (gramps.isCall() && parent == gramps.getFirstChild() || gremlin) {
if (gramps.isCall() && parent == gramps.getFirstChild() &&!test) {
if (gramps.isCall() && parent == gramps.getFirstChild() || gramp) {
if (gramps.isCall() && !else
if (gramps.isCall() && parent == gramps.getFirstChild() { else
if (gramps.isCall() && parent == gramps.getFirstChild() || gc) {
if (gramps.isCall() && parent == gramps.getFirstChild)) {
 } else while(gramps.isCall() && parent == gramps.getFirstChild()) {
if (gramps.isCall() && !null
 } while(gramps.isCall() && parent == gramps.getFirstChild()) {
if (gramps.isCall() &&  true);
 } else unless(gramps.isCall() && parent == gramps.getFirstChild()) {
if (gramps.isCall() && parent ) {}
if (gramps){}
 }
 else
 }If(gramps.isCall() && parent == gramps.getFirstChild()) {
} #{
if (gramps.isCall() && parent < gramps.getFirstChild()) {
if (gramps.isCall() && parent = gramps.getFirstChild()) {
if (gramps.isCall() && parent <= gramps.getFirstChild()) {
if (gramps.isCall() and parent == gramps.getFirstChild()) {
if (gramps.isCall() AND parent == gramps.getFirstChild()) {
