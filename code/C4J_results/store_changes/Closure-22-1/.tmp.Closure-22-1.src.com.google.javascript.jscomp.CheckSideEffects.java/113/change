 if (ancestorType == Token.COMMA)
 if (Token.COMMA)
 if (type== Token.COMMA)
 if (an.getType()!== Token.COMMA)
 if (== Token.COMMA)
if (ancestorType ==  Token.BLOCK)
 if (an!== Token.COMMA)
 if (an.getType()!= Token.COMMA)
 if (type!= Token.COMMA)
 if (an.getType()== Token.COMMA)
 if (ancestorType!=Token.COMMA)
 if (isCOMMA)
if (ancestorType ==  Token.FOR)
if  (!an)
 if (an.getType!= Token.COMMA)
 if (ancestor == Token.COMMA)
 if (an.getType == Token.COMMA)
 if (an == null)
if (ancestorType == Token.COMMA) return;
if  (null == an)
 if (ancestor!= Token.COMMA)
 if (an.getType!== Token.COMMA)
if (ancestorType != Token.BLOCK)
if (ancestorType ==  Token.EXPR_BLOCK)
if (ancestorType != Token.FOR)
if (ancestorType != Token.EXPR_RESULT)
 if (an.getType()!= Node.Token.COMMA)
 if (ancestorType!== Token.COMMA)
 if (ancestType!=Token.COMMA)
if (ancestorType ==  Token.EXPR_RESULT) return;
 if (ancestorType!= Node.Token.COMMA)
 if (anType!= Token.COMMA)
 if (an.getType() == Node.Token.COMMA)
 if (COMMA)
 if (an!= gramps && ancestorType!== Token.COMMA)
 if (an!= null) {
 if (an!= null)
if (ancestorType == Token.COMMA) return; else
if (ancestorType  == null)
 if (an.getType(...)!== Token.COMMA)
if (ancestorType == Token.COMMA) return; if (an == gramps)
 if (an == parent.getFirstChild().getNext())
 if (an == null) {
if (ancestorType != Token.EXPR_FOR)
if (ancestorType ==  Token.EXPR_RESULT)
 if (an.getType() == Token.Token.COMMA)
 if (an.getType()!= Token.Token.COMMA)
 if (an == gramps) if(ancestorType == Token.COMMA)
 if (is Token.COMMA)
 if (an.type!= Token.COMMA)
 if (parentType!= Token.COMMA)
 if (an == gramps.ancestorType == Token.COMMA)
 if (an.getType() is not Token.COMMA)
 if (an == parent.getFirstChild().getNext().getNext())
 if (an.getNext().getType!== Token.COMMA)
 if (an.isBlank)
 if (an. getType() == Token.COMMA) continue; if (an. getType() == Token.BLOCK)
if (ancestorType != Token.EXPR_NAME)
 if (an == parent.getFirstChild().getNext()))
 if (orType!= Token.COMMA)
 if (anchorType== Token.COMMA)
 if (parentType!== Token.COMMA)
if (ancestorType == Token.COMMA) continue; if (an == gramps)
 if (an. getType() == Token.COMMA) continue; if (an. getType() == Token.BLOCK) {
 if (an == parent.getLastChild().getNext().getNext())
 if (ancType!== Token.COMMA)
if (ancestorType == Token.COMMA) { if (an == gramps)
 if (ancestType == Token.COMMA)
 if (an. isName ( ) ) { continue ; } if (an. isIdentifier ( ) ) { continue ; }
 if (ancestorType == Node.Token.COMMA)
 if (an. isIdentifier ( ) ) { ancestorType = an. getType ( ) ; }
 if (an.getType() + 1!== Token.COMMA)
 if (ancestor == null)
 if (an == parent.getLastChild().getNext())
if (an == parent.getFirstChild().getNext().getNext)
 if (an. isIdentifier ( ) ) { ancestorType = an. getType ( ) ;
 if (an == parent.getFirstChild()) { continue; }
 if (an.getType() == Token.FOR)
 if (an. getType() == Token.COMMA) continue; if (an. getType() == Token.FOR)
 if (an.getType().getType!=Token.COMMA)
 if (an == parent.getFirstChild().getNext())) {
if (ancestorType != Token.EXPR_BLOCK)
if (an == parent.getFirstChild().getNext)
if (ancestorType ==  Token.EXPR_RESULT) break;
 if (an. isName ( ) ) { return ; } if (an. isIdentifier ( ) ) { continue ; }
 if (an.getType().getType()== Token.COMMA)
 if (an.getType().getName()== Token.COMMA)
 if (an!= parent.getFirstChild().getNext())
if (ancestorType ==  Token.EXPR_NAME)
 if (ancestorType!= Token.Type.COMMA)
 if (ancestorType!= Token.TYPE.COMMA)
 if (an. getType() == Token.COMMA) continue; if (an. getType() == Token.STRING)
 if (!COMMA)
 if (an.COMMA)
 if (an == parent.getFirstChild()) { return; } else
 if (an == null || an.ancestorType == Token.COMMA)
if (ancestorType ==  Token.EXPR_FOR)
 if (an == parent.getFirstChild().getNext()) {
 if (an. getType() == Token.COMMA) continue; if (an. getType() == Token.STRING) {
 if (!an.getType() == Token.COMMA)
 if (an == parent.getFirstChild()) { return; } if (an == parent.getLastChild()) { return; }
 if ()
 if (an == null) if(ancestorType == Token.COMMA)
 if (null == ancestorType)
 if (an. isIdentifier ( ) ) { ancestorType = an. getType ( ) ; } else { continue;
if (ancestorType == Token.COMMA && ancestorType!= Token.BLOCK)
 if (an == null) { if (ancestorType == Token.COMMA)
if (an == parent.getLastChild().getNext().getNext)
 if (an == parent.getFirstChild()) { return; } if (an == parent.getLastChild()) { return; } else
 if (an. isIdentifier ( ) ) { ancestorType = an. getType ( ) ; } else
if (ancestorType ==  Token.EXPR_RESULT) continue;
 if (an. isName ( ) ) { ancestorType = an. getType ( ) ; } else { continue ; }
 if (an == parent.getFirstChild()) { return; } if (an == parent.getLastChild()) { continue; }
 if (an == parent) {
 if (can.getType()!== Token.COMMA)
 if (an. isIdentifier ( ) ) { ancestorType = an. getType ( ) ; break ; }
 if (an. isIdentifier ( ) ) { ancestorType = an. getType ( ) ; break ; } else
 if (an == n)
 if (an == n) if(ancestorType == Token.COMMA)
 if (an == parent.getLastChild()) { continue; }
 if (an == null) {
if (ancestorType == Token.COMMA && ancestorType!= Token.FOR)
 if (an == parent.getLastChild()) {
if (ancestorType == Token.EXPR_RESULT) return; else
 if (an. isIdentifier ( ) ) { ancestorType = an. getType ( ) ; continue ; }
 if (an!= null) { if(ancestorType == Token.COMMA)
 if (an.isExprResult())
 if (an == parent.getFirstChild()) continue;
 if (an == parent.getFirstChild()) { continue; } else
if (null == ancestorType || ancestorType == Token.BLOCK)
 if (an.getType() == Token.FOR) {
 if (an. isIdentifier ( ) ) { ancestorType = an. getType ( ) ; continue ; } else
 if (ancestorType.type== Token.COMMA)
 if (an == parent.getFirstChild()) {
 if (an!= parent) { if(ancestorType == Token.COMMA)
if (ancestorType ==  Token.EXPR_RETURN_VALUE)
 if (anType!= Token.BLOCK)
if (ancestorType ==  Token.EXPR_RETURN_TYPE)
 if (an == parent.getFirstChild()) { return; }
 if (an.getType(?)!== Token.COMMA)
 if (an!= gramps) { if(ancestorType == Token.COMMA)
 if (an. isName ( ) ) { ancestorType = an. getNext().getType(); }
 if (anType == BLOCK)
if (ancestorType == Token.COMMA) return; else break;
 if (ancestorType!= Token.NCOMMA)
 if (an == ancestorType)
 if (an == parent.getLastChild().getNext())) {
 if (an. isIdentifier ( ) ) { ancestorType = an. getType ( ) ; } } } else
 if (an. getType() == Token.COMMA) continue; if (an.getType() == Token.FOR
if (null == ancestorType || ancestorType == Token.FOR)
 if (an == parent.getLastChild()) { return; } else
 if (an. getType() == Token.COMMA) continue; if (an. getType() == Token.END)
 if (an == parent.getFirstChild() && ancestorType == 0)
 if (an. isName ( ) ) { ancestorType = an. getType ( ) ; } else { continue;
 if (an!= parent) {
 if (parent == ancestorType)
 if (type ==COMMA)
 if (an. isName ( ) ) { ancestorType = an. getType ( ) ; break ; } } else
 if (an.getType() == TokenType.COMMA)
 if (an == parent.getLastChild().getNext()) {
 if (an!= Token.BLOCK)
if (ancestorType == Token.COMMA && ancestorType == Token.FOR)
 if (parentType == Token.COMMA)
 if (an.getType() == ParentToken.COMMA)
 if (not Token.COMMA)
 if (an == parent.getLastChild())
if (an == parent.getFirstChild() || ancestorType == null)
 if (an.isBlock())
 if (an == parent.getFirstChild())
 if (an. isIdentifier ( ) ) { ancestorType = an. getType ( ) ; } } else
 if (!Token.COMMA)
 if (an == parent) if(ancestorType == Token.COMMA)
 if (an. isIdentifier ( ) ) { ancestorType = an. getNext ( ). type ;
if (ancestorType != Token.EXPR_RETURN)
 if (an ==COMMA)
 if (an == parent.getLastChild()) continue;
 if (ancestorType is not Token.COMMA)
 if (anType!= Token.FOR)
if (ancestorType == Token.COMMA) continue; if (an == n)
 if (an. isName ( ) ) { ancestorType = an. getType ( ) ; break ; } else
if (an == parent.getFirstChild().getNext(null)
 if (an == parent.getFirstChild()) {
 if (an == parent.getLastChild()) { continue; } else
 if (an == parent)
 if (an.getType() == NameToken.COMMA)
 if (ancType!= Token.COMMA)
 if (an. isIdentifier ( ) ) { ancestorType = an. getType ( ) ; break ; } } else
 if (an.getType() == BLOCK)
if (ancestorType ==  Token.UNKNOWN_TYPE)
 if (an.isName() ) { if(ancestorType == Token.COMMA)
 if (an == parent.getFirstChild().getParent())
 if (an == parent.getFirstChild() && ancestorType == null)
 if (an. isName ( ) ) { ancestorType = an. getNext ( ). type ;
if (ancestorType == Token.COMMA) continue; else
 if (an. isName ( ) ) { ancestorType = an. getType ( ) ; } } } else
if (ancestorType != Token.COMMA) return;
 if (an. isIdentifier ( ) ) { ancestorType = an. getType ( ) ; } else { continue }
 if (an == parent) {
 if (n == an.ancestorType == Token.COMMA)
 if (an == parent) { if (ancestorType == Token.COMMA)
if (an == parent.getLastChild().getNext)
if (null == an.getNext().getNext())
 if (an. isName ( ) ) { return ; } if (an. isIdentifier ( ) ) { return ; } } else
 if (an. getType() == Token.COMMA) continue; if (an.isCall()) {
if (ancestorType == Token.EXPR_RESULT) break; else
 if (an.getToken!= Token.COMMA)
if (ancestorType == Token.COMMA) continue; if (an == parent)
 if (an. getType() == Token.COMMA) continue; if (an.isCall() {
 if (an.isNotToken().COMMA)
 if (an!= parent.getFirstChild().getParent())
 if (ancestorType.COMMA)
 if (an == gramps &&ancestorType == Token.COMMA)
if (an == parent.getFirstChild() || ancestorType == 0)
if (ancestorType == Token.FOR && ancestorType!= Token.BLOCK)
 if (an. isName ( ) ) { ancestorType = an. getType ( ) ; } else
 if (an == parent.getLastChild()) { return; }
 if (an!= null) { if (an.getType() == Token.FOR)
 if ( ancestorType == 0) {
 if (an.getType() == NAME)
if  (null) {
 if (an.ancestorType == Token.COMMA)
if (ancestorType == Token.EXPR_RESULT) continue; else
 if (orType!== Token.COMMA)
 if (type == "COMMA)
if (null == ancestorType || ancestorType == BLOCK)
 if (an.isNull ( ))
 if (an.isEmpty()) { if(ancestorType == Token.COMMA)
 while (true) {
 if (an == parent.getFirstChild()) continue; else
 if (an. isName() && ancestorType == Token.STRING)
 if (an.isName ( ))
 if (an == n) {
if (ancestorType ==  Token.EXPR_RETURN)
if (ancestorType == Token.COMMA) return; if (an == n)
 if (an.isCall()) { if(ancestorType == Token.COMMA)
 if (an == null) return; if (ancestorType == Token.COMMA)
 if (parent == an) continue;
 if (type == :COMMA)
 if (an. isName ( ) ) { return ; } if (an. isIdentifier ( ) ) { continue ; } } else
 if (an == n.ancestorType == Token.COMMA)
if (an == parent.getLastChild().getNext(null)
if (ancestorType != Token.STRING)
 if (an == parent.getFirstChild()) { continue;
 if (an == gramps || (ancestorType == Token.COMMA)
 if (an!= null && an.ancestorType == Token.COMMA)
 if (an.isExprResult()) {
if (ancestorType == Token.COMMA) continue;
if (an.getType()!= Token.FOR)
 if (anType!= Token.NCOMMA)
 if (token.COMMA)
 if (an. isName() && ancestorType == Token.NAME) {
 if (null == an.ancestorType == Token.COMMA)
 if (an. isName() && ancestorType!= Token.STRING)
 if (an. isName() && ancestorType == Token.FOR)
 if (an.getType() == Token) {
 if (an. getType() == Token.COMMA) continue; if (an == parent)
 if (an == n)
 if (ancestorType == Token.NCOMMA)
 if (an!= null) continue;
 if (an.isIdentifier ( ))
 if (an.isName()) { continue; }
if (ancestorType ==  Token.EXPR_RESULT) {
 if (an == parent.getLastChild()) {
 if (an == null) continue; if(ancestorType == Token.COMMA)
 if (an!= null) { if (an == parent.getFirstChild()) continue;
 if (an == parent) continue; if(ancestorType == Token.COMMA)
 if (anType==Token.COMMA)
 if (type == UNCOMMA)
 if (can.getType()== Token.COMMA)
 if (ancestorType is!Token.COMMA)
if (ancestorType == Token.COMMA) return; else break; }
 if (can.isName()) { if (can.isCall()) {
 if (ancestorType == UNCOMMA)
 if (an. isName() && ancestorType == Token.UNKNOWN) continue;
 if (an == gramps && (ancestorType == Token.COMMA)
 if (parent == an) return;
 if (an. isName() && ancestorType!= Token.PARENT) continue;
 if (an == parent.getParent()) {
 if (an. getType() == Token.COMMA) continue; if (an == n)
 if (an!= null) if(ancestorType == Token.COMMA)
 if (an. isIdentifier ( ) ) { if (an.isCall() ) {
if (ancestorType  == 0)
 if (an ==Token.COMMA)
 if (an!= n) if(ancestorType == Token.COMMA)
 if (an. isName() && ancestorType == Token.PARENT) continue;
if (ancestorType == Token.COMMA) continue; if (an.isCall())
 if (parent == an) continue; if(ancestorType == Token.COMMA)
 if (an. isIdentifier ( ) ) { ancestorType = an. type ; } else
 if (an == null)
 if (an.isCall())
 if (an.getType()!=.COMMA)
 if (an == -1)
 if (an. isName() && ancestorType == Token.STRING) {
if (ancestorType == Token.COMMA) continue; else break; }
if (ancestorType == Token.COMMA) continue; if (an.isBlock())
 if (an == parent)
 if (an == parent) continue;
 if (an.isName()) { if (an.isComma()) {
 if (ancestorType == null ||ancestorType == Token.COMMA)
 if (an!= null) { if (an == parent.getLastChild()) continue;
if (ancestorType == Token.COMMA) { if (an.isBlock())
 if (an.isCall()) {
if (an.getType() == Token.FOR)
 if (an!= parent)
 if ( ancestorType == Token.BLOCK) {
if (ancestorType == Token.COMMA) break; else
 if (an.type!== Token.COMMA)
if (null == ancestorType || ancestorType == 0)
 if (an.isName (null)
 if (an == gramps && _ancestorType == Token.COMMA)
 if (an. isName() && ancestorType == Token.PAREN) {
 if (an.isName() ) {
 if (an.isEmpty())
 if (an == parent.getFirstChild()) return; } else
 if (an == parent.getFirstChild() || an == parent) {
 if (an.isName() && an.ancestorType == Token.COMMA)
 if (type ==.COMMA)
if (an == parent.getFirstChild().getNext(n)
 if (an == null) continue;
 if (null == ancestorType ||ancestorType == Token.COMMA)
 if (an. isName() && an. isName()!= Token.STRING)
 if (an == null) continue; else if(ancestorType == Token.COMMA)
if (ancestorType  == -1)
if (null == an.getNext().getNext)
 if (an!= null) { if (an.isCall() ) {
if (ancestorType ==  Token.EXPR_END)
if  (null === an)
 if (an == parent.getLastChild().ancestorType == Token.COMMA)
 if (an!= null) { if (an == parent.getFirstChild()) break;
 if (null) { if(ancestorType == Token.COMMA)
 if (an!= null) { if (an.isName() ) continue;
if (ancestorType == Token.FOR && ancestorType!= Token.NAME)
 if (an.isNotToken.COMMA)
 if (an == parent.getFirstChild().ancestorType == Token.COMMA)
if (an == parent.getFirstChild().next)
 if (an.isName() { if(ancestorType == Token.COMMA)
 if (null == an.getNext().next)
if (ancestorType != Token.UNIQUE)
if (ancestorType ==  Token.CLOSURE)
 if (!)
 if (an == gramps|ancestorType == Token.COMMA)
if (ancestorType == Token.COMMA) {
 if (false) if(ancestorType == Token.COMMA)
 if (null) {
if (ancestorType != Token.EXPR_RESULT) {
if (an.isName() && ancestorType == BLOCK)
 if (an.isName()) { if (an.isCall() ) {
 if (an.getType() == '(')
if (ancestorType ==  Token.EXPR_STMT)
if (an == parent.getLastChild().getNext(n)
if (an == parent.getFirstChild().getParent)
if (ancestorType == Token.EXPR_RESULT && an == parent)
if (ancestorType == Token.COMMA) { if (n == parent)
 if (an == this) {
 if (an. isIdentifier ( ) ) { ancestorType = an. nextType ; }
 if (an!= null) { if (an.getType() == Token) {
 if (parent == an) continue; else
 if (an.isName)
 if (anccestorType== Token.COMMA)
 if (an.getType() == ";")
if (ancestorType == Token.COMMA) { continue; }
!= Token.COMMA)
 if (an!= null) { if (an.getType() == Token.) {
if (ancestorType ==  Token.UNIQUE)
 if (anType == 0)
if (ancestorType == Token.COMMA) return; else break; else
 if (an.getType() == Token.FOR())
if (an.isName() && ancestorType == ":")
if (ancestorType != Token.NAME)
 if (an.isCall)
 if (type!=COMMA)
if (ancestorType == Token.EXPR_RESULT) return; } else
 if (an.isName() &&!ancestorType == Token.COMMA)
 if (an == parent.ancestorType == Token.COMMA)
if (ancestorType ==  Token.EXPR_RETURN) {
if (ancestorType == Token.COMMA) break;
 if (an == parent.getParent()); {
 if (type!== Token.COMMA)
 if (true) if(ancestorType == Token.COMMA)
if (ancestorType != Token.EXPR_RESULT) else
if (ancestorType == Token.COMMA && ancestorType == ' ')
if (ancestorType ==  Token.STRING)
if (ancestorType != Token.NODES)
if (ancestorType != Token.COMMA) {
if (ancestorType == Token.COMMA) return; } else
 if (anon.ancestorType == Token.COMMA)
 if (null an)
if (ancestorType ==  Token.NOSORT)
 while (true)
if (ancestorType  == BLOCK)
if (ancestorType == Token.COMMA && ancestorType!= Token.NAME)
 if (type!=.COMMA)
 if (an.isIdentifier(null)
 if (an == parent.getNext()&&ancestorType == Token.COMMA)
 if (!ancestorType== Token.COMMA)
 if (Type!= Token.COMMA)
 if (an.getType()!= NAME)
 if (true) {
if (ancestorType != Token.EXPR_RETURN) {
if (ancestorType == Token.COMMA) continue; else break; else
if (ancestorType != Token.NODATA)
if (ancestorType ==  Token.EXPR_RESULT) then
if (ancestorType == Token.COMMA && ancestorType == Token.NAME)
 if (an == null ||ancestorType == Token.COMMA)
if (ancestorType ==  Token.EXPR_RESULT) else
 if (null) if(ancestorType == Token.COMMA)
 if (an!= Token.COMMA)
 if (null Token.COMMA)
 if (null == (ancestorType == Token.COMMA)
if (ancestorType != Token.NODOC)
 if (continue)
 if (parent == an).getParent(); {
if (ancestorType == Token.COMMA) { return; } else
if (ancestorType  == Token.END)
if (ancestorType == Token.EXPR_RESULT) return; else {
 if (parent == an) return; else
 if (type == 0)
if (ancestorType  == Token.NAME)
 if (an == parent).getNext() { }
 if (an == parent).getNext(); else
if (ancestorType ==  Token.NODATA)
 if (nullAn)
if (ancestorType ==  Token.BRACE)
 if (parent == an).getParent(); else
 == Token.COMMA)
 if (skip)
 if (Node.COMMA)
if (null)
if (ancestorType ==  Token.NULL)
if (ancestorType == Token.EXPR_RESULT) break; else {
 if (ann) {
 if (a!== Token.COMMA)
if (ancestorType == Token.COMMA) return; else {
if  (...)
 if (ignore)
 if (an) {
 if (n.ancestorType == Token.COMMA)
 if (~Token.COMMA)
 if (Type.COMMA)
 if (null ancestor) if(ancestorType == Token.COMMA)
 if (not an)
 if (null || (ancestorType == Token.COMMA)
 if (an == null ||(ancestorType == Token.COMMA)
if (ancestorType ==  Token.USE)
if (ancestorType  == null) {
 if (n == an ||(ancestorType == Token.COMMA)
if (ancestorType == Token.)
if (ancestorType  ==)
if  (empty) {
 if (null a)
 if (!an.ancestorType == Token.COMMA)
if (ancestorType == Token.COMMA) { return;
 if (!isCOMMA)
 if (break)
if (ancestorType == Token.COMMA) break; else {
 if (n == an if(ancestorType == Token.COMMA)
if (empty)
if (ancestorType == Token.COMMA) continue; else {
 if (.COMMA)
if (ancestorType == Token.COMMA) { } else
 if (disabled)
 if (null).test(ancestorType == Token.COMMA)
 if (nullNode.ancestorType == Token.COMMA)
 if (null ||!ancestorType == Token.COMMA)
if (ancestorType  == NAME)
if (ancestorType ) {
if  (null) then
if (ancestorType  null)
 if (a.$ancestorType == Token.COMMA)
if (ancestorType  == NULL)
 if (! a)
 if (null&&ancestorType == Token.COMMA)
 if (continue)
if (ancestorType ==  Token.CLONE)
 if (null).if(ancestorType == Token.COMMA)
if (ancestorType  < 0)
 case Token.COMMA)
if (ancestorType == Token.COMMA) continue; else { }
if  (false)
 continue; if(ancestorType == Token.COMMA)
 if (Type== Token.COMMA)
if (ancestorType == Token.COMMA) return; else break();
 { if (ancestorType == Token.COMMA)
if (ancestorType == TokenBlock)
 if (notCOMMA)
 if (noCOMMA)
 if (null!=(ancestorType == Token.COMMA)
 if (!null&&(ancestorType == Token.COMMA)
 int i; if(ancestorType == Token.COMMA)
 if (a== Token.COMMA)
if (null ancestor)
 if (!(ancestorType == Token.COMMA)
 } if (ancestorType == Token.COMMA)
if (ancestorType == Token) {
 if (!== Token.COMMA)
 ++ i;
if (ancestorType == Token.NULL
if (ancestorType  == null
++n;
 if (null
if  (null
 ++ a;
if (ancestorType  empty)
if (ancestorType == Token.COMMA) then
if  (else
 if ($COMMA)
if (ancestorType ==  TEXT)
 if (=)
if (ancestorType == Token.))
 if (+)
if (ancestorType == Token.COMMA) else
 } else if(ancestorType == Token.COMMA)
 if (_COMMA)
 (type== Token.COMMA)
if (ancestorType == Token.COMMA)) {
 while (ancestorType == Token.COMMA)
 if ((== Token.COMMA)
 continue(); if(ancestorType == Token.COMMA)
 while (COMMA)
 while (Token.COMMA)
 if ($Token.COMMA)
 continue;; if(ancestorType == Token.COMMA)
 } else
 { else
 { }
if (ancestorType > Token.COMMA)
 else
if (ancestorType < Token.COMMA)
 } while(ancestorType == Token.COMMA)
 }
if (ancestorType <= Token.COMMA)
