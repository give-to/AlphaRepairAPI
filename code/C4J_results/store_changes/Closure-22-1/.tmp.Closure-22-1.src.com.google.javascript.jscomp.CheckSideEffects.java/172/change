 compiler.reportCodeChange();
 } else { addExtern ( ) ;
compiler. reportCodeChange ( ) ; }
compiler.reportCodeChange(); } else { addExtern ( ) ;
 } else { addExtern ( n ) ;
compiler. reportCodeChange ( addExtern ) ;
compiler.reportCodeChange() } else { addExtern();
 } else { addExtern(); compiler.reportCodeChange();
 } else { addExtern ( problemNodes )
 } else { addExtern(); }
 } else { compiler.reportCodeChange();
compiler. reportCodeChange ( ) ; return true ;
 } else { addExtern(); } compiler.reportCodeChange();
compiler. reportCodeChange ( ) ; return ;
compiler.reportCodeChange(); } else { addExtern(); }
compiler.reportCodeChange(); } else { removeExtern ( ) ;
 } else { removeExtern ( ) ;
compiler. reportCodeChange ( ) ; } }
compiler.reportCodeChange(); } else { return ; }
 addExtern);
 } else { removeExtern ( n ) ;
 } else { addExtern ( compiler, problemNodes ) ;
compiler. reportCodeChange ( ) ; return false ;
 } else { addExtern ( compiler, problemNodes )
 } else { removeExtern ( ) ; compiler.reportCodeChange();
 } else { addExtern ( compiler ) ;
 } else { addExtern ( problemNodes )
compiler.reportCodeChange() } else { addExtern ( compiler ) ;
compiler.reportCodeChange(); addExtern();
 else { addExtern ( n ) ;
 } else { addExtern ( problemNode ) ;
 } else { addExtern() { Node name = IR.name(PROTECTOR_FN).srcref();
compiler. reportCodeChange ( )
 } else { removeExtern ( problemNodes )
compiler = null ;
 } else { addExtern ( problemNodes ) ;
 } else { addExtern(); protectSideEffects();
 } else { addExtern() { Node name = IR. name(PROTECTOR_FN).srcref(compiler); }
compiler.reportCodeChange(); } return true ;
 } else { removeExtern(); } compiler.reportCodeChange();
 } else { addExtern() { Node name = IR. name(PROTECTOR_FN).srcref(compiler) ;
 } else { addExtern ( problemNodes);
compiler.reportCodeChange() } else { addExtern(); }
 } } else { addExtern ( ) ;
 } else { addExtern() { Node name = IR.name(PROTECTOR_FN).newChild();
 } else { addExtern ( compiler ) ; }
 } else { removeExtern(); }
compiler.reportCodeChange(n); compiler.reportCodeChange(n);
 } else { addExtern ( ) ;
compiler.reportCodeChange(); } else { addExtern = false ;
 else { addExtern ( ) ;
 } else { addExtern(); for ( Node n : problemNodes) { addExtern(n);
compiler. reportCodeChange ( ) ; } } }
compiler.reportCodeChange(); } else { addExtern(); {
 addExtern();
compiler.reportCodeChange() } else { removeExtern ( ) ;
compiler.reportCodeChange(); } else { removeExtern(); }
compiler. reportCodeChange ( removeExtern ) ;
 } else { removeExtern ( problemNodes ) ;
 } else { return ; }
 } else { addExtern() { Node name = IR.name(PROTECTOR_FN); Node var;
 } else { addExtern(); } else { addExtern(); } else { addExtern(); } else { addExtern();
 addExtern(); compiler.reportCodeChange();
 } else { removeExtern ( problemNodes )
compiler.reportCodeChange() } else { addExtern ( n ) ;
 } else { addExtern ( compiler, problemNode ) ;
 } else { addExtern ( compiler, n ) ;
compiler.reportCodeChange() } else { return ; }
compiler.reportCodeChange(); } return false ;
 } else { removeExtern ( ) ;
compiler.reportCodeChange() } else { removeExtern ( n ) ;
compiler.reportCodeChange(); } else { return false ;
compiler.reportCodeChange(); } return compiler ;
compiler.reportCodeChange(n); compiler. reportCodeChange ( ) ;
 } compiler.reportCodeChange();
compiler. reportError ( n, level ) ;
compiler.reportCodeChange(); } else { addExtern = true ;
 } else { addExtern() { Node name = IR.name(PROTECTOR_FN).newInstance();
 } else { addExtern(); for ( Node n : problemNodes) { compiler.add(n);
 else { addExtern(); } compiler.reportCodeChange();
compiler.reportCodeChange(); } return - 1 ;
compiler.reportCodeChange(); } else { addExtern ( )
compiler.reportCodeChange(); } else { return ;
 } else { addExtern(); for ( Node n : problemNodes) {
compiler. reportCodeChange ( true ) ;
compiler.reportCodeChange(); } else { addExtern() {
 } else { addExtern(); } else { addExtern(); } else { addExtern(); } if ( compiler!= null )
 } else { addExtern() { Node name = IR.name(PROTECTOR_FN).createChild();
compiler.reportCodeChange(n);
compiler = t ;
 removeExtern();
 } else { addExtern(); } } else { addExtern(); } } else { addExtern(); } } else {
 } else { addExtern(); } else { addExtern(); } else { addExtern(); } else {
 } else { removeExtern ( compiler, problemNodes )
compiler. reportCodeChange ( addExtern());
compiler.reportCodeChange() } else { addExtern ( )
 else { addExtern(); compiler.reportCodeChange();
 } else { addExtern(n); compiler.reportCodeChange();
 } else { addExtern(); } else { addExtern(); } if ( compiler. reportCodeChange ) {
 } else { addExtern(); } } else { addExtern(); } else { addExtern(); } } else {
compiler.reportCodeChange() } else { addExtern = false ;
 } else { addExtern(); for ( Node n : problemNodes) { compiler.exec(n);
 } else { removeExtern(problemNodes);
 } else { addExtern ( compiler ) ;
 } else { addExtern(compiler).reportCodeChange();
 } } else { compiler.reportCodeChange();
 } else { addExtern = false;
 } else { addExtern() { compiler.reportCodeChange();
 } else { addExtern(); for ( Node n : problemNodes) { Node replacement = n;
 } else { addExtern(); for ( Node n : problemNodes) { addExtern(); }
compiler.reportCodeChange() } else { removeExtern(); }
compiler. reportCodeChange ( false ) ;
 } else { removeExtern(compiler);
 } else { addExtern(); for ( Node n : problemNodes) { Node var = n;
compiler = this ;
compiler.reportCodeChange( n ) ; addExtern();
 } else { addExtern(); } else { addExtern(); } else { addExtern(); } if ( reportCodeChange )
 } else { addExtern(n, compiler);
 } else { addExtern ( n ) ;
compiler.reportCodeChange( n ) ; } else { addExtern();
 } else { addExtern(); } else { addExtern(); } else { addExtern(); } if (reportChanges)
 } else { addExtern(); } else { addExtern(); } else { addExtern(compiler);
 return true ;
 } else { addExtern(); } } else { addExtern(); } else { addExtern(); } if (reportChanges)
 addExtern();
compiler.reportCodeChange(n); compiler.reportCodeChange(); }
 } else { addExtern = false ; compiler.reportCodeChange();
compiler.reportCodeChange() } else { addExtern(); {
compiler.reportCodeChange(); } else { return true ;
 } else { addExtern(); removeExtern();
 } else { addExtern(); for ( Node n : problemNodes ) { Node n ++ ;
 } else { addExtern ( compiler, problemNames ) ;
 } else { addExtern(); for ( Node compiler : compilerList ) {
compiler.reportCodeChange() } else { return false ;
 } else { addExtern(null, null);
 } else { addExtern = true;
compiler. reportChange();
 } else { addExtern(); for ( Node compiler : compiler ) {
 } else { addExtern(); } else { addExtern(); } else { addExtern(); } } }
 } else { addExtern ( compiler, problemNodes, n ) ;
 } else { addExtern(); for ( Node n : problemNodes) { node = n;
 } else { addExtern ( compiler, problemNodes, level ) ;
 } else { addExtern ( compiler, problemNodes, 0 ) ;
 } else { addExtern(); } else { addExtern(); } else { addExtern(); } else { } }
 } else { addExtern(); for (Node n : nodes)
compiler.reportCodeChange( addExtern); }
 else { addExtern(compiler);
 if ( compiler!= null ) compiler.reportCodeChange();
 } else { addExtern(); return false;
 } else { removeExtern(); removeSideEffects();
 } else { addExtern(); } } else { addExtern(); } } else { addExtern(); } } }
 else { addExtern(); }
compiler.reportCodeChange( n ) ; } else { return ; }
compiler.reportCodeChange(); compiler.exit(1);
 } else { removeExtern ( n ) ;
compiler.reportCodeChange(); } else { return false ; }
 } else { addExtern(); for ( Node n : problemNodes ) { Node n -- ;
compiler = n ;
 } else { addExtern(n, false);
 else { addExtern ( n ) ;
 } else { addExtern ( compiler, problemNodes, ) ;
compiler.reportCodeChange( this. protectSideEffects ) ;
 removeExtern(); compiler.reportCodeChange();
compiler.reportCodeChange(); } } else { addExtern(); }
 } } else { addExtern(); }
 } else { addExtern(); for (Node compiler : compilerList)
 } else { addExtern(); } } else { addExtern(); } else { addExtern(); } } } }
compiler. reportCodeChange ( ) return ;
 } else { addExtern(); } else { addExtern(); } else { removeExtern(); } } }
 } else { addExtern(); for (Node compiler : compiler)
 } else { addExtern(); } } else { addExtern(); } } else { addExtern(); } } } }
 return addExtern();
 } else { addExtern(null); return;
 } else { addExtern(); for ( Node n : problemNodes) { }
 } else { addExtern(); for (CompilerInput compiler)
compiler.reportCodeChange(); } } else { return ; }
compiler.reportCodeChange() return true ;
compiler.exit();
 } else { addExtern(n, true);
 } else { addExtern = false ;
compiler.reportCodeChange(n); } else { addExtern(); }
 } else { addExtern(null);
 } return true ;
 } else { addExtern(n); return;
 addExtern(); } compiler.reportCodeChange();
 else { removeExtern ( ) ; compiler.reportCodeChange();
 } else { addExtern(); } else { addExtern(); } else { addExtern(); } else { } } }
 } else { addExtern = null;
compiler.reportCodeChange( ) ; removeExtern();
 } else { addExtern(); } } else { addExtern(compiler);
 } else { addExtern(); return true;
 } else { addExtern(); } } else { addExtern(); } } else {
 } else { removeExtern(); return false;
 } else { addExtern(); (n);
 } else { addExtern().reportCodeChange();
 removeExtern);
 else { addExtern(n, compiler);
 } else { addExtern(); } } else { addExtern(); } else { addExtern(); } } } ;
 else { removeExtern(n);
 } else { addExtern(); } } else { addExtern(); } } else { addExtern(); } } } ;
 } else { protectSideEffects ( n );
 } else { addExtern(); } else { addExtern(); } if (report) {
 } else { removeExtern(); } } else { removeExtern(); } } else {
compiler.reportCodeChange() return - 1 ;
 addExtern(); }
 compiler.reportCodeChange);
compiler.reportCodeChange() } return true ;
compiler.reportCodeChange() } else { return ;
 } else { addExtern(); } } else { addExtern(compiler); }
compiler. report ( ) ;
 } else { addExtern() compiler.reportCodeChange();
compiler.reportCodeChange() } else { return true ;
compiler.reportCodeChange() } } else { return ; }
 } else { removeExtern(); return true;
 else { compiler.reportCodeChange();
 else { addExtern ( ) ;
 } else { addExtern(); } else { addExtern(); } if (reportChanges)
 replaceExtern(n);
 else { addExtern(); protectSideEffects();
 return ; } else { compiler.reportCodeChange();
 removeExtern(); }
 } else { addExtern(); } } compiler.reportCodeChange();
 removeExtern();
compiler.reportCodeChange( ) ; addExtern(); }
 } else { addExtern(); for (CompilerInput input)
 } else { addExtern(n).reportCodeChange();
 else { addExtern = false;
compiler.reportCodeChange(n); } else { addExtern(); {
 } else { addExtern(false);
 return ; } } else { compiler.reportCodeChange();
compiler.reportCodeChange( n ) ; } return extern ;
 } else { addExtern(null, compiler) ;
 } else { return false ;
compiler ++ ;
 } else { addExtern(); } } else { addExtern(); } }
 return addExtern);
 addExtern;
compiler.reportCodeChange( ) ; addExtern ( )
compiler.reportCodeChange() } else { return false ; }
 } else { addExtern ( ) ; return;
 } else { addExtern ( compiler, problemNodes ) ; }
compiler. reportChanges();
compiler. reportCodeChange ; }
 else { addExtern(); return;
 } else { addExtern(null, );
 } else { addExtern(); for ( Node n : problemNodes) {...
 } else { removeExtern().reportCodeChange();
 addExtern ( compiler ) ;
 } else { addExtern(); } } else { addExtern(); } } }
compiler.reportCodeChange(addedExtern);
 return compiler.reportCodeChange();
 addExtern() { compiler.reportCodeChange();
compiler.reportCodeChange(); } else { return ; } }
 (n);
 } else { addExtern(); } } else { addExtern(); } } } }
 } else { addExtern ( ) ; break;
 } else { return addExtern();
compiler.reportCodeChange() } return false ;
compiler.reportCodeChange() return false;
 } return false ;
compiler.reset();
compiler. compile ( ) ;
compiler.reportCodeChange(n); compiler.reportCodeChange() }
 return addExtern;
 return compiler.reportCodeChange);
 } else { addExtern(null, compiler); }
 } else { removeExtern(); } } else { removeExtern(); } } } }
 } else { removeExtern(); removeExtern();
 } else { addExtern ( compiler, problemNodes ) ; } } }
 return false ;
 } else { addExtern(); }
 } else { addExtern ( compiler, problemNodes ) ; } }
compiler. optimize ( )
 } else { addExtern(); } } else { addExtern(); } } } } }
 compiler.reportCodeChange(););
compiler.reportCodeChange( n ) ; addExtern(); }
 } else { addExtern = compiler.reportCodeChange();
compiler.reportCodeChange() } } return compiler ;
 else { addExtern = true;
 } else { return ; } compiler.reportCodeChange();
 returnExtern;
compiler. commit ( ) ;
 } else { addExtern(); } else { addExtern(); } if (reportChanges){
 } else { removeExtern(); } } else { removeExtern(); } } } } }
compiler. reportCodeChange(); {
 return this ;
 return ; } compiler.reportCodeChange();
 else { removeExtern(); return;
compiler.reportCodeChange( n ) ; addExtern ;
compiler.reportCodeChange() } } return compiler ; }
 removeExtern;
 } } compiler.reportCodeChange();
 } else { removeExtern(); removeFunctions();
 return this ; }
 } else { return ; } }
 else { addExtern = false ;
compiler.reportCodeChange() } return compiler ;
 } else { addExtern compiler.reportCodeChange();
 else { addExtern(null);
 return compiler.reportCodeChange(););
 } else {
compiler.reportCodeChange( ) ; addExtern ;
 return ;
 } else { addExtern(compiler);reportCodeChange();
 addExtern(); return;
 } } } else { compiler.reportCodeChange();
 removeExtern(); break;
 addExtern(n);
 removeExtern(); return;
 return false ; compiler.reportCodeChange();
 } return this ; }
 compiler.reportCodeChange(_);
 } else { addExtern);
 return n ;
 return compiler.reportCodeChange(();
 returnExtern);
 } else { addExternNodes();
compiler.codeChange();
 } else { return removeExtern();
 addExtern(); break;
 } else { addExtern(); } } }
compiler.reportCodeChange() } else { } } }
 } } } ; compiler.reportCodeChange();
compiler = root ;
 } else { return; addExtern();
 } else { addExtern(); return build();
compiler.reportCodeChange() return 0;
 } else { addExtern(); removeNode();
 } else { addExtern(); removeProblem();
 } else { } addExtern();
compiler.resetCodeChange();
compiler.exit(); }
 removeExtern(n;
 return ; } } compiler.reportCodeChange();
 } }
compiler.reportCodeChange() } } } } }
 return ; compiler.reportCodeChange();
compiler.reportCodeChange() }
 compiler.exitNode();
compiler.commitCodeChange();
 removeExtern(); } }
 return "addExtern);
 addExtern(null);
compiler.reportCodeChange() } else { } }
 addExtern(); } else {
 } else { addExternInner();
compiler.resetCodeChange(); }
compiler.reportCodeChanges(); }
 } else { returnExtern;
 compiler.cleanUp();
 } } }
 } } ; compiler.reportCodeChange();
compiler.applyCodeChange();
 addExtern(); return compiler.reportCodeChange();
 } } } compiler.reportCodeChange();
 return removeExtern;
compiler.cleanCodeChange();
 } addExtern);
 return replacement;
 } else { addExternIfMissing();
 else { } addExtern();
 } return compiler.reportCodeChange();
compiler = n
 } else { addExtern()
 replaceExtern(null);
 addExtern(n).reportCodeChange();
compiler = null
 return extern;
 return removeExtern);
 } else { addExtern;
compiler = this
 addExtern; compiler.reportCodeChange();
compiler.reportCodeChange(n); }
 Compiler.reportCodeChange();
 } else compiler.reportCodeChange();
 return true ; compiler.reportCodeChange();
 addExtern(); }
 return compiler.exitNode();
compiler.reportCodeChange(this); }
 return compiler.codeChange();
 addExtern() compiler.reportCodeChange();
 replaceExtern(ns);
 } returnExtern);
compiler.reportCodeChange(6); }
compiler.debug();
 else { return false;
 addExtern(); } }
 return compiler.getOutput();
compiler.reportCodeChange(1);
compiler.reportCodeChange() } }
 } } else { return false;
 return true ; } return false;
compiler.break();
 } else addExtern();
 } else { return - 1;
 } else { return;
compiler.reset(); }
 removeProblem();
 addExtern ( ) {
compiler ; }
 returnExtern();
 addExtern(); return
 else { return true;
 return false;
 } (n);
 addProblem();
 return compiler.reportCodeChanges();
 addExtern;
 addOuter();
 return true ;
 addInclude();
 addExtern()
 } return ; } }
 } else { } }
 break ;
compiler.reportCodeChange( } } }
 return ; } } }
 } template.reportCodeChange();
 } } (n);
 else {
 } ;
 return replacement);
 n.reportCodeChange();
 } (this);
 (this);
 return n);
 addFix();
compiler.reportCodeChange() return();
 template.reportCodeChange();
 } parser.reportCodeChange();
 removeFunction();
compiler.reportCodeChange(n));
 return remove();
 replacement.reportCodeChange();
 } }
 node.reportCodeChange();
compiler.reportCodeChange()); }
 }
 } else
 else { template.reportCodeChange();
 } } template.reportCodeChange();
 else,
 return
