setJSDocInfo(jsDocInfo);
 append(jsDocInfo);
setJSDocInfo ( jsDocInfo ) ; }
setJSDocInfo(jsDocInfo, fileLevelComment);
setJSDocInfo(jsDoc);
setJSDocInfo ( jsDocInfo )
setJSDocInfo(jsDocInfo, license);
setJSDocInfo ( ) ;
setJSDocInfo(jsDocInfo, license); }
 jsDocInfo = null;
setJSDocInfo ( jsDocInfo ) ; return this ;
 return jsDocInfo ;
 jsDocInfo. append ( ) ;
setJSDocInfo ( )
setJSDocInfo ( jsDocInfo ) ; } }
setJSDocInfo ( jsDocInfo ) ; return this ; }
 jsDocInfo = null ; }
 this. jsDocInfo = jsDocInfo ; return this ;
 this. jsDocInfo = jsDocInfo ; return this ; }
setJSDocInfo(jsDocInfo, license, fileLevelComment);
setJSDocInfo(jsDocInfo, license + fileLevelComment);
 if (jsDocInfo!= null) {
 jsDocInfo = new JSDocInfo ( ) ;
setJSDocInfo ( info ) ;
 if ( jsDocInfo!= null ) { this.
 jsDocInfo = new JSDocInfo ( )
 this. jsDocInfo = jsDocInfo ;
setJSDocInfo ( jsDocInfo ) ; } } ;
 this. jsDocInfo = jsDocInfo ; } }
 jsDocInfo = new JSDocInfo ( license ) ;
 jsDocInfo. append ( license ) ;
setJSDocInfo ( jsDocInfo, license ) ; } }
 if (jsDocInfo!= null)
 this. jsDocInfo = jsDocInfo ; }
 this.jsDocInfo.append(jsDocInfo);
setJSDocInfo(jsDocInfo) ; return jsDocInfo ;
setJSDocInfo ( jsDocInfo ) ; return jsType ;
 this. jsDocInfo = info ;
 jsDocInfo = new JSDocInfo ( jsDocInfo )
 this. jsDocInfo = jsDocInfo
setJSDocInfo(jsDocInfo) return jsDocInfo ;
 jsDocInfo = ( JSDocInfo ) info ;
 this. jsDocInfo = new JSDocInfo(jsDocInfo);
 return jsDocInfo. getJsDocBuilder ( ) ;
 return jsDocInfo. append ( ) ;
 this. license = license ;
 jsDocInfo = new JSDocInfo ( jsDocInfo);
 return jsDocInfo. getJSDocInfo ( ) ;
 this.
setJSDocInfo(jsInfo);
setJSDocInfo(jsDocInfo, license); return jsDocInfo
 jsDocInfo. setLicense ( license ) ;
setJSDocInfo(jsDocInfo, false); }
 if ( jsDocInfo == null ) { return ; } this.
 this.jsInfo = info;
 jsDocInfo = jsDocInfo ;
setJSDocInfo ( jsDocInfo, false ) ;
 if ( jsDocInfo!= null ) { super.
setJSDocInfo(jsDocInfo) ; setJsDocBuilderForNode ( ) ;
 this. jsDocInfo = jsDocInfo ; } return this ;
setJSDocInfo ( jsDocInfo ) ; } return this ;
setJSDocInfo ( jsDocInfo, true ) ;
 if ( jsDocInfo == null ) { return null ; } jsDocInfo.
setJSDocInfo ( jsDocInfo, true ) ; }
setJSDocInfo(jsDocInfo, license); return this ;
 } else { jsDocInfo = ( JSDocInfo ) getProp ( JSDOC_INFO ) ;
 if ( jsDocInfo == null ) { return null ; } else { jsDocInfo.
 if ( jsDocInfo!= null ) { return ( JSDocInfo )
 this. license = license ; }
 if ( jsDocInfo == null ) { return null ; } this.
 jsDocInfo.append(this);
 if ( license == null ) { return null ; } if ( license!= null ) { license.
 this.append(jsDocInfo);
setJSDocInfo(jsDocInfo) return this ;
 if ( jsDocInfo == null ) { return null ; } if ( jsDocInfo instanceof JSDocInfo ) {
 if ( jsDocInfo == null ) { return null ; } else { return jsDocInfo.
 jsDocInfo = new JSDocInfo ( true ) ;
setJSDocInfo(jsDocInfo); return jsDocInfo
setJSDocInfo(jsDocInfo) ; getJsDocBuilderForNode ( ) ;
setJSDocInfo(jsDocInfo, license); return ;
 return jsDocInfo ; } } ;
setJSDocInfo(jsDocInfo) return jsDocInfo ; } } ;
 if ( jsDocInfo == null ) { return null ; } if ( jsDocInfo!= null ) { this.
setJSDocInfo(jsDocInfo) return jsDocInfo
 if ( license == null ) { return null ; } if ( license!= null ) {
 if ( jsDocInfo!= null ) { return ( JSDocInfo ) this.
 if ( license == null ) { return null ; } return license ;
 } else { jsDocInfo = new JSDocInfo ( license + fileLevelComment ) ; } jsDocBuilder.
 return jsDocInfo ; }
 } else { jsDocInfo = new JSDocInfo ( false ) ; } this.
 if ( jsDocInfo!= null ) { this. jsDoc.
 if (jsDocInfo) {
 if ( jsDocInfo!= null ) { return ( JSDocInfo ).
 if ( jsDocInfo == null ) { return null ; } else { return (JSDocInfo)
 if ( jsDocInfo == null ) { return null ; } if ( jsDocInfo!= null ) { jsDocInfo.
setJSDocInfo(jsDocInfo, license, fileLevelComment); }
setJSDocInfo(jsDocInfo, license, false);
 jsDocInfo. setLicense ( license )
 this. jsDocInfo = jsDocInfo ; } } ;
setJSDocInfo(jsDocInfo) ; getJsDocBuilderForNode ( )
setJSDocInfo(jsDocInfo, license); return jsDocInfo ;
 this. jsDocInfo = jsDocInfo ;
 if ( license == null ) { return null ; } if ( license!= "" ) { license.
 if ( jsDocInfo == null ) { return null ; } if ( jsDocInfo!= null ) { return this.
 this.addJsDoc(jsDocInfo);
 jsDocInfo = new JSDocInfo(_);
 if ( jsDocInfo == null ) { return null ; } if ( jsDocInfo instanceof JSDoc ) {
 } else { jsDocInfo = new JSDocInfo ( license ) ; } this.
 this.jsInfo.append(jsDocInfo);
 if ( jsDocInfo == null ) { return null ; } else { return jsDocInfo ; } this.
 } else { jsDocInfo = getJsDocInfo ( ) ; } this.
 if ( jsDocInfo!= null ) { JSDocInfo.
setJSDocInfo(jsDocInfo) return jsDocInfo ; }
 jsDocInfo = new JSDocInfo ( license )
 if (jsDocInfo!= null) this.
setJSDocInfo(jsDocInfo, license + ".");
setJSDocInfo(jsDocInfo, license + fileLevelComment); }
setJSDocInfo(jsDocInfo) return ( JSDocInfo )
 this.addDocInfo(jsDocInfo);
 jsDocInfo = ( JSDocInfo ) ;
 if ( license == null ) { return null ; } else { jsDocInfo.
 if ( jsDocInfo == null ) { return null ; } if ( jsDocInfo!= null ) { super.
setJSDocInfo(jsDocInfo, false); return jsDocInfo
 if ( jsDocInfo == null ) { throw new RuntimeException ( ) ; }
 if (jsDocInfo!= null) { node.
 if ( jsDocInfo == null ) { return null ; } if ( jsDocInfo!= null ) { return null ; } this.
 if ( jsDocInfo!= null ) { this. node.
 if (jsDocInfo!= null) { append(jsDocInfo);
 this.jsDocInfo = new Info(jsDocInfo);
setJSDocInfo(jsDocInfo, license, false); }
setJSDocInfo(jsDocInfo, license); return license ;
 if ( license == null ) { return null ; } if ( license!= "" ) {
 this. jsDocInfo = jsDocInfo ; return ( JSDocInfo ) this ; } public static void
 } else { jsDocInfo = new JSDocInfo ( license ) ; } if ( jsDocInfo!= null ) { return this.
 } else { jsDocInfo = new JSDocInfo ( license ) ; } if ( jsDocInfo!= null ) { return super.
setJSDocInfo(jsDocInfo) return jsDocInfo ; } return this ;
 } else { jsDocInfo = new JSDocInfo ( license ) ; } return ( JSDocBuilder )
 jsDocInfo.setComment(license);
 if ( jsDocInfo == null ) { return null ; } if ( jsDocInfo!= null ) { return null ; } return this.
 if ( jsDocInfo == null ) { return null ; } return this.
 } else { jsDocInfo = new JSDocInfo ( license + fileLevelComment ) ; } this. jsDocBuilder.
 this.jsDocInfo = jsInfo;
 this.jsDocInfo = (jsDocInfo);
 } else { jsDocInfo = new JSDocInfo ( license + fileLevelComment ) ; } jsDocInfo.
 jsDocInfo = ( JSDocInfo ) null
setJSDocInfo(jsDocInfo, jsType);
 if ( license == null ) { license = "";
 getJsDocBuilderForNode(jsDocInfo);
setJSDocInfo(jsDocInfo) this. jsDocInfo = info ;
 } else { jsDocInfo = new JSDocInfo ( license + fileLevelComment ) ; } this. jsDocInfo =
 jsDocInfo.setComments(comments);
 if ( jsDocInfo == null ) { return null ; } else { return this.
 } else { jsDocInfo = new JSDocInfo ( license ) ; } if ( jsDocInfo!= null ) { thisNode.
 if ( jsDocInfo!= null ) { return (JSDocBuilder)
 return jsDocInfo. getJsDocInfo ( )
 this.addInfo(jsDocInfo);
 if ( license == null ) { return null ; } if ( license!= "" ) { this.
 this. jsDocInfo = jsDocInfo ; return ( JSDocInfo ) this. jsDocInfo ;
 jsDocInfo.setComment(comment);
 this. jsDocInfo = jsDocInfo ; return ( JSDocInfo ) this. jsDocInfo.
 if ( jsDocInfo!= null ) { return null ; } this.
 if ( jsDocInfo == null ) { return null ; } if ( jsDocInfo!= null ) { this. info.
setJSDocInfo(jsDocInfo) ; return ( JSDocInfo )
setJSDocInfoProperty ( jsDocInfo ) ;
setJSDocInfo(jsDocInfo) ; return jsDocInfo ; } } ;
 getJsDocBuilderForNode ( )
 if ( jsDocInfo == null ) { throw new RuntimeException ( ) ;
 getJsDocInfo ( ) ;
setJSDocInfo(jsDocInfo, license); return jsDocInfo ; }
setJSDocInfo(jsDocInfo) ; getJsDocBuilder ( ) ;
 } else { jsDocInfo = new JSDocInfo ( license + fileLevelComment ) ; } this. jsDocInfo.
setJSDocInfo ( true ) ;
setJSDocInfo ( jsDocInfo ) ; return ;
 if (jsDocInfo!= null) { thisNode.
 getJsDocBuilderForNode);
 return (JSDocInfo) append(jsDocInfo);
 jsDocInfo = { };
 return (JSDocInfo) this.
setJSDocInfo(jsDocInfo, false); return jsDocInfo ;
 return append(jsDocInfo);
 this. jsDocInfo = new DocInfo(jsDocInfo);
 if ( jsDocInfo == null ) { return ; }
 if ( jsDocInfo!= null ) { this. info.
 this.append(license);
 jsDocInfo.append(document);
 if (jsDocInfo!= null) { this.jsDoc =
 } else { jsDocInfo = new JSDocInfo ( license + fileLevelComment ) ; this.
 this.addJsDocInfo(jsDocInfo);
 this.setDocInfo(jsDocInfo);
setJSDocInfo(jsDocInfo) return jsDocInfo ; } }
 setInfo(jsDocInfo);
 jsDocInfo.append(doc);
 if (jsDocInfo!= null) { currentNode.
 if ( jsDocInfo!= null ) { return this.
 jsDocInfo = new JSDocInfo;
setJSDocInfoProperty ( jsDocInfo )
setJSDocInfo(jsDocInfo, license); getJsDocInfo ( ) ;
setJSDocInfo(jsDocInfo());
 this.jsDocInfoappend(jsDocInfo);
 return jsDocInfo ; } }
setJSDocInfo(jsDocInfo) return jsDocInfo ; } return builder ;
 if (jsDocInfo!= null) { this.doc.
setJSDocInfo(jsDocInfo) ; setJsDocBuilderForNode ( )
 getJsDocBuilder(jsDocInfo);
 if (jsDocInfo)
 if (jsDocInfo!= null) { return
 jsDocBuilder.
setJSDocInfo ( js ) ;
 if ( jsDocInfo == null ) { return null ; } if ( jsDocInfo!= null ) { jsDocInfo =
setJSDocInfo(jsDocInfo) ; return jsDocInfo ; }
 jsDocInfo.append(_);
setJSDocInfo ( jsDocInfo
 this.jsDocInfoAdd(jsDocInfo);
setJSDocInfo(jsDocInfo, docInfo);
 getJsDocInfo ( )
setJSDocInfo(jsDocInfo) this. append ( ) ;
 if ( jsDocInfo == null ) { return null ; } else { jsDocInfo =
 if ( jsDocInfo!= null ) { this. info =
setJSDocInfo(jsDocInfo, license); return jsDocInfo ; } }
 jsDocInfo.setJSType(type);
 if ( jsDocInfo == null ) { return null ; } if ( jsDocInfo!= null ) { this. info =
 if ( jsDocInfo == null ) { return null ; } return super.
 if ( jsDocInfo == null ) { throw new RuntimeException ( ).
 this.appendJsDocInfo);
 this.setInfo(jsDocInfo);
setJSDocInfo(jsDocInfo, license); getJsDocInfo ( )
 return jsDocInfo ; } } return builder ;
 } else { jsDocInfo = new JSDocInfo ( license + fileLevelComment ) ; } return
 jsDocInfo.append(comment);
setJSDocInfo(jsDocInfo, false); setJsDocInfo ( ) ;
 this.jsDoc.append(jsDocInfo);
 jsDocInfo.setDocComment(license);
setJSDocInfo(jsDocInfo, license); getJsDocBuilder ( ) ;
 if ( license == null ) { return null ; } if ( license!= null ) { return
 jsDocInfo.setJSDoc(true);
 } else { jsDocInfo.
 } else { jsDocInfo.setInfo(jsDocInfo);
setJSDocInfo(jsDocInfo, license); return ( JSDocInfo )
 } else { jsDocInfo = new JSDocInfo ( license + fileLevelComment ) ; } this. jsDocBuilder =
 append(this);
setJSDocInfo(jsDocInfo) this. jsDocInfo = info
 return (JSDocInfo)
 } else { jsDocInfo =
 return new FileLevelJsDoc(jsDocInfo);
 } else { jsDocInfo = new JSDocInfo ( license + fileLevelComment ) ; } } public void append() { return
 } else { return (JSDocInfo)
setJSDocInfo(jsDocInfo) return jsDocInfo ; } } return builder ;
 this.jsDocInfo.addInfo(jsDocInfo);
setJSDocInfoProperty ( license ) ;
 jsDocInfo.setContent(content);
 this. append ( ) ;
 this. jsDocInfo = jsDocInfo ; } public void setJsDocInfo(...) { return
 this.docInfo = info;
setJSDocInfo(jsDocInfo, true, false);
 this.jsDocInfo = new JSInfo(jsDocInfo);
 this.addJsDocInfo);
 setLicense(license);
 return new FileLevelJsDocBuilder(jsDocInfo);
 if ( jsDocInfo == null ) { return null ; } else { return jsDocInfo ; } return
setJSDocInfo(docInfo);
 } else { jsDocInfo.append(jsDocInfo);
 jsDocInfo.append($);
 return jsDocInfo.license;
 jsDocInfo = new JSDocInfo($);
 jsDocInfo.setDescription(description);
 return (JSDocInfo) (jsDocInfo);
setJSDocInfo ( jsInfo )
setJSDocInfo(jsDocInfo) ; return jsDocInfo ; } return this ;
 this.jsType = license + " ";
 if ( jsDocInfo == null ) { return null ; } if ( jsDocInfo!= null ) { return null ; } return
setJSDocInfo(jsDocInfo) ; return jsDocInfo ; } } } ;
 this.jsDocInfo = jsDoc;
setJSDocInfo(jsDocInfo, - 1);
 jsDocInfo = null
setJSDocInfo(jsDocInfo2);
 } else { jsDocInfo = new JSDocInfo ( license ) ; } } public void append() { return
 if ( license == null ) { license = ";
 return (JSDocInfo) super.
 jsDocInfo.append(");
 this. jsDocInfo = jsDocInfo ; return ( JSDocInfo ) this ; } return
 if (setJsDocInfo)
 jsDocInfo = newInfo;
 this.jsType = new JS(license);
setJSDocInfo(jsDocInfo, license + "");
 } else { jsDocInfo = new JSDocInfo ( license + fileLevelComment ) ; } }
 } else { jsDocInfo = new JSDocInfo ( license + fileLevelComment ) ; } } public void init() { return
 if ( jsDocInfo == null ) { return null ; } if ( jsDocInfo!= null ) { return null ; } } return
 this. jsDocInfo = jsDocInfo ; } public void setJsDocInfo ( ) { return
 } else { jsDocInfo.setLicense(jsDocInfo);
 setDocInfo(jsDocInfo);
 append(doc);
 return (JSDocInfo) appendDocInfo(jsDocInfo);
 return (JSDocInfo) setProp(jsDocInfo);
 this. append ( )
 jsDocInfo = new JSDoc(false;
 return new JSDocBuilder(jsDocInfo);
 this.jsDocInfo.add(jsDocInfo);
 return jsDocInfo ; } } return this ;
 jsDocInfo.setDocInfo(true);
 jsDocInfo.setJsDoc(true);
setJSDocInfo(jsDocInfo, license); return jsdocInfo ;
 this.jsDocInfo().append(jsDocInfo);
setJSDocInfo(jsDocInfo, true, false, false); }
 } else { jsDocInfo.addChild(jsDocInfo);
setJSDocInfo(jsDocInfo, false, false);
 jsDocInfo.append(); return;
 this.jsType = license + ".";
 this.jsDocInfo = license;
setJSDocInfo(jsDocInfo) ; return getJsDocInfo(); }
 jsDocInfo.setJsDoc(this);
 this. jsDocInfo = jsDocInfo ; return ( JSDocInfo ) this ; } #
setJSDocInfo(jsDocInfo, jsDoc);
 this.appendInfo(jsDocInfo);
 this.append(license,jsDocInfo);
 this.jsDocInfo(jsDocInfo);
setJSDocInfo(jsDocInfo, license); getDocInfo ( ) ;
setJSDocInfo(jsDocInfo); return
 this.jsType = license ; return this;
 this.jsDocInfo = docInfo;
 this. jsDocInfo = jsDocInfo ; return ( JSDocInfo ) this ; } void
 this.appendDocInfo(jsDocInfo);
 if ( jsDocInfo!= null ) { return ( JSDocInfo ) this ;
 append(license);
setJSDocInfoProperties ( jsDocInfo )
 jsDocInfo = new Info ( );
setJSDocInfo(jsDocInfo, jdoc);
setJSDocInfo(jsDocInfo) ; setLicense ( license )
setJSDocInfo(jsDocInfo) return this ; } } ;
 return new Builder(jsDocInfo);
 return jsDocBuilder.
setJSDocInfo(jsDocInfo) ; return true ;
setJSDocInfo(jsDocInfo++);
setJSDocInfo ( jsDocInfo, license )
 this.append(this);
 jsDocInfo =
 return append(license);
setJSDocInfo(jsDocInfo, license); return ( JSDocInfo
setJSDocInfo(jsDocInfo, null);
 this. jsDocInfo =
 setLicense ( license )
setJSDocInfo(jsDocInfo, info);
setJSDocInfo(jsDocInfo.*);
 this.append(doc);
setJSDocInfo(jsDocInfo) ; return getThis ( ) ;
 append(js);
 this.jsDoc =
setJSDocInfo ( info )
 this.append()(jsDocInfo);
 return (JSDocInfo) *
 return (JSDocInfo) appendToNode(jsDocInfo);
 jsDocNode.
 this. jsDocBuilder =
 jsDocInfo = info;
 this.append(js);
setJSDocInfoProps ( info ) ;
setJSDocInfo ( jsDocInfo ;
setJSDocInfo(jsDocInfo..);
 add(jsDocInfo);
 return this;
 super. append(jsDocInfo);
setJSDocInfo ( info ;
 jsDocInfo = undefined;
 this.jsType =
 return jsType;
 } else { this.
 this. jsDocBuilder.
 addInfo(jsDocInfo);
setJSDocInfo(jsDocInfo) return null;
setJSDocInfo(jsDocInfo) return this
 this.jsInfo =
 append(true);
 this. append = append
 return license;
 append(jsDoc);
setJSDocInfo(); }
 if (jsDocInfo).
 appendJs(js);
 appendJsDoc(_);
setJSDocInfo(jsDocInfo) return true ;
 appendInfo(jsDocInfo);
 append(node,jsDocInfo);
setJSDocInfo = true ;
 append()(jsDocInfo);
 } this.
 } return this;
 append(this.jsDocInfo);
 return true;
 jsDocInfo++;
setJSDocInfo(jsDocInfo) return ;
setJSDocInfo(json);
 return this.
 this node.
 return null;
 jsInfo = info;
 appendInternal(jsDocInfo);
 license = "";
 jsInfo = null;
setJSDocInfo(sDocInfo);
 return false;
setJSDocInfo(JsDocInfo);
 license = license;
 license = null;
setJSDocInfo = true
setJSDocInfo(jsonDocInfo);
setJSDocInfo(this);
setJSDocInfo(jsDocInfo) this ;
setJSDocInfo(jdoc);
setJSDocInfo(jsDocInfo) return null
 })();
 super.
 return this);
 node.
setJSDocInfo(jDoc);
(license);
(this);
 this._
 insert(jsDocInfo);
 return (jsDocInfo);
setJSDocInfo(jsDocInfo) }
setJSDocInfo(jsDocInfo) return
 return
 write(jsDocInfo);
 }
