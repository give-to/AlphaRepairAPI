 jsdocBuilder.update();
stream = getStream ( ) ;
stream = getCurrentStream ( ) ;
 int current = stream.getCurrent();
stream = stream();
 token.update();
 int start = stream.getStart();
 int token = stream.getToken();
 int next = stream.next();
 int next = next();
 next();
 int current = stream.current();
 stream.update();
 int token = getToken();
 int current = getCurrent();
 this. currentStart = token. getStart ( ) ; this. currentEnd = token. getEnd ( ) ;
 this. currentStart = token. getStart ( ) ; this. currentEnd = token. end ( ) ;
 int start = getStart();
 this. currentStart = token. getStart ( ) ; this. currentEnd = token. getEnd ( ) ; final int next =
stream = this;
 int token = stream.current();
 int next =
stream = this.stream();
 int token = stream.token();
 this. currentStart = token. getStart ( ) ; this. currentEnd = token. getEnd ( ) ; final boolean next =
 this. currentStart = token. getCurrentStart ( ) ; this. currentEnd = token. getCurrentEnd ( ) ;
stream = getCurrent ( ) ;
 int next = stream.getNext();
stream = getInputStream ( ) ;
 this. currentStart = token. getStart ( ) ; this. currentEnd = token. end ;
 this.start = token.start; this.end = token.end; this.stream =
 int start = stream.start();
 int next = stream.update();
 this.start = token.info; this.end = token.end; this.token = token.token;
 this. currentStart = token. getStart ( ) ; this. currentEnd = token. getEnd ( ) ; final int update =
 this. currentStart = token. getStart ( ) ; this. currentEnd = token. getEnd ( ) ; final int current =
 InputStream stream = jsdocBuilder.update();
 this. currentStart = token. getStart ( ) ; this. currentEnd = token. getEnd ( ) ; final StreamUpdate update =
 this.start = token.start; this.end = token.end; this.stream = stream;
 this.start = token.start(); this.end = token.end; this.stream =
 Stream stream = getCurrentStream ( ) ; int next =
 int next = getNext();
 int current = stream.getCurrent(();
 this. currentStart = token. getStart ( ) ; this. currentEnd = token. getEnd ( ) ; int next =
 int token = stream.getToken(();
 this. currentStart = token. getStart ( ) ; this. currentEnd = token. getEnd ( ) ; final InputStream
 next(token);
stream = stream.getCurrent ( ) ;
 this.start = token.start(); this.end = token.end(); this.stream =
stream.getCurrent ( ) ;
 this.start = token.info; this.end = token.info; this.token = token.token;
 this. start = token. getStart ( ) ; this. end = token. getEnd ( ) ; final StreamUpdate update =
 this. currentStart = token. getStart ( ) ; this. currentEnd = token. getEnd ( ) ; final OutputStream
 this.start = token.start(); this.end = token.end(); this.update =
 int current = stream.getCurrentJSDoc();
 int stream = getStream();
 int current = stream.getCurrentLine();
 this. currentStart = token. getStart ( ) ; this. currentEnd = token. getEnd ( ) ; final StreamUpdate
stream = getCurrentStream ( )();
 this. currentStart = token. getStart ( ) ; this. currentEnd = token. getEnd ( ) ; final void
 this. currentStart = token. getStart ( ) ; this. currentEnd = token. getEnd ( ) ; final int current;
 this.start = token.start; this.end = token.end; this.streamUpdate =
 int start = stream.getStart(();
 this.start = token.start; this.end = token.end; this.currentLine = 0;
 stream.next();
 this. currentStart = token. getStart ( ) ; this. currentEnd = token ;
 int stream = (Stream) token);
 int next = stream.getNext(();
 this. currentStart = token. getStart ( ) ; this. currentEnd = token. getEnd ( ) ; final int
 this. currentStart = token. getStart ( ) ; this. currentEnd = token. getEnd ( ) ; final boolean
 int stream = jsdocBuilder.update();
 SourceStream stream = jsdocBuilder.update();
 this.start = token.info; this.end = token.info; this.token = token.info;
 int current = stream.getCurrentLine(();
 this. currentStart = token. getStart ( ) ; this. currentEnd = 0 ;
stream = currentStream();
 Stream stream = getCurrentStream ( ) ; final int next =
stream = stream.getCurrentStream ( ) ;
 this. currentStart = token. getStart ( ) ; this. currentEnd = end ;
 CurrentStream stream = jsdocBuilder.update();
 int stream = getStream(();
 String next = stream.getNextLine ( );
 this.currentStart = token.getStart(); this.currentEnd = token.getEnd(); this.
stream = this.getCurrentStream ( ) ;
 InputStream stream = this.getInputStream();
 this.start = token.start; this.end = token.end; this.currentStream =
 stream.reset();
 int token = stream.getCurrentToken();
 this.currentStart = token.getStart(); this.currentToken = token;
stream = this.stream;
 stream = new Stream();
 int next = stream.getNextJSDoc();
 stream = getCurrentStream ( ) ; int next =
 int current = current();
stream.start();
 InputStream stream = this.getInputStream(();
 this.start = token.start; this.end = token.end; this.currentLine =
 int current = stream.getCurrentPosition();
 int current = stream.getCurrentCharno();
stream = getCurrentStream ( ) ; final
stream = reader.getStream ( ) ;
stream = getCurrentStream ( token. info ) ;
 int token = stream.getStartToken();
stream = reader.getCurrentStream ( );
 stream = getCurrentStream ( ) ; final int next =
stream.setCurrent ( ) ;
 int current = stream.getCurrentPosition(();
 int next = stream.getNextLine(();
 int next = index();
 this. start = token. getStart ( ) ; this. end = token. getEnd ( ) ; stream = this. stream ; *
stream = getStream ( )();
 Stream stream = getCurrentStream ( ) ; int currentLine =
 this. start = token. getStart ( ) ; this. end = token. getEnd ( ) ; this. token = token ; *
 InputStream stream = (InputStream) (in);
 this. start = token. getStart ( ) ; this. end = token. getEnd ( ) ; stream = token. stream ; *
 int current = stream.getCurrentStartingPoint();
 Stream stream = getCurrentStream ( ) ; int currentPos =
 String current = stream.getCurrent ( );
 this. currentStart = token. getStart ( ) ; this. currentEnd = token. getEnd ( ) ; *
 int next = stream.getNextLineNumber(();
 Stream stream = this.getStream ( ) ;
 int stream = new Stream(token);
 Stream stream = getCurrentStream ( ) ; int currentIndex =
 SourceStream stream = token.stream;
 Stream stream = getCurrentStream ( ) ; stream.update();
 SourceStream stream = sourceStream.get ( );
 this.start = token.start; this.end = token.end; this.stream = stream();
 Stream stream = getCurrentStream ( ) ; int lineno =
 this.start = token.start; this.end = token.end; this.
 InputStream stream = (InputStream) token);
 int current = stream.getCurrent (current).update();
 this.currentStart = token.getStart(); this.currentEnd = token.end
 Stream stream = getCurrentStream ( ) ;
 String current = stream.getCurrentLine ( );
 CurrentStream stream = currentStream(); stream.update();
 String next = stream.getCurrentLine ( );
 int current = stream.getCurrentLineNumber();
 String next = stream.getNext ( );
 int current = stream.getCharno(();
 String next = stream.getNextToken ( );
 Stream stream = getStream ( ) ;
 this.start = token.info; this.end = token.end; this.token = token.token; *
 this.start = token.start; this.end = token.end; this =
 int start = stream.getStartLine();
 int current = stream.getCurrentPosition().update();
 Stream stream = getCurrentStream ( ) ; int next = - 1;
 int current = stream.getCurrentLine().update();
 int current = stream.getCurrentStartPosition();
 int current = stream.update();
 int token = stream.get ();
 int current = stream.getCurrentLineupdate();
 int stream = new Stream();
 stream = getCurrentStream ( ) ;
 String token = stream.getToken();
 CurrentStream stream = currentStream; stream.update();
 this.start = token.start; this.end = token.end; this.token = token; }
stream.setCurrent ( token ) ;
 this.currentStart = token.getStart(); this.currentEnd = token.end; *
 Stream stream = getStream ( ) ; int currentLine =
 this.start = token.info; this.end = token.end; this.next = token.next; *
 int start = stream.getPosition();
stream.getCharno() - 1 = 0;
 int start = stream.getStart;
 Stream stream = getCurrentStream ( ) ; int current = 0;
 String next = stream.getLine ( );
 String next = stream.getNextLine;
 String current = stream.getCurrentLine;
 int current = stream.getCurrent;
 int current = stream.getCurrentLine().current();
 int current = stream.getCurrentStartLine();
 int start = stream.getCurrentLine().start();
stream = this();
 int current = stream.getCurrent().update();
 this.start = token.info; this.end = token.info; this.
 InputStream stream = inputStream.update();
 int token = next();
 Stream stream = this.getCurrentStream ( ) ; int currentLine =
 this.start = token.info; this.end = token.info; this =
 stream = getCurrentStream ( ) ; int currentLine =
 stream = getStream(();
 int current = stream.getCurrentToken().update();
 int next = position();
stream = stream;
 Stream stream = getCurrentStream ( ) ; int currentStartPosition =
 InputStream stream = parser.update();
 int current = stream.getCurrentStartPosition().update();
 int current = stream.getCurrentStartupdate();
 InputStream stream = inputStream().update();
stream.updateCurrent ( ) ;
 int current = stream.getCurrentOffset().update();
 int stream = extract(token);
 final int next =
 SourceStream stream = this.stream;
 CurrentStream stream = CurrentStream.create().update();
stream.setCurrentLine ( 0 ) ;
 Stream stream = this.getStream (token);
 CurrentStream stream = currentStream.update();
 Stream stream = this.getStream (this);
 Stream stream = getStream ( ) ; stream. reset ( ) ; final int
 CurrentStream stream = currentStream; currentStream.update();
 Stream stream = getCurrentStream ( ) ; int current = current;
 int next = token.update();
 this. currentStart = token. start ; this. currentEnd = token. end ; stream = token. stream ; *
 CurrentStream stream = this.stream; stream.update();
 int current = stream.getCurrentPosition()().update();
stream = getCurrentStream ( ). stream ; final
 int current = stream.getPosition().update();
 int current = stream.current().update();
 CurrentStream stream = currentStream;
 Stream stream = this.stream; this.stream.update();
 int pos;
 Stream stream = currentStream ( ) ;
 int current = stream.getLastupdate();
 SourceStream stream = sourceStream ( );
 int start = stream.update();
stream = this.getCurrentStream ( ) ; final
 SourceStream stream = currentSourceStream;
 int current = stream.getupdate();
 final Stream stream = jsdocBuilder.update();
 int stream = currentStream().update();
 int stream = parser.update();
 int stream = tokenStream().update();
 Stream stream = this.getCurrentStream ( ) ; int currentStartPosition =
 Stream stream = getStream ( ) ; stream. reset ( ) ; final void
 int current = stream.getCurrentLine()().update();
 Stream stream = getCurrentStream ( ) ; final int
 Stream stream = this.getCurrentStream ( ) ; int currentStartPoint =
stream = source();
 final int next = stream.update();
stream.setCurrentLine ( 0 ) ; final
stream.updateCurrentLine ( ) ;
 Stream stream = getStream ( ) ; stream. reset ( ) ; final boolean
 String next = token.next();
 String next = token.next;
 Stream stream = this.stream.stream();
 stream = extract(token);
 Stream stream = token.stream(); next = stream.update();
 String stream = token.stream();
 Stream stream = this.stream.stream;
 int stream = tokenStream.update();
 String stream = this.stream();
 currentStart = token.start(); token.update();
stream = currentStream ; final
stream.setCurrentLine ( - 1 ) ;
stream = this ; final
 String line;
 final CharSequence next =
stream.getCharno() = 0; final
 next(stream);
 next().next();
 token = next();
stream.getCurrent ( )();
 Stream stream = this.stream; this.token.update();
stream.update() ; stream.setCurrent ( token ) ;
stream.getCharno() = -1; final
 Stream stream = getCurrentStream ( ) ; int next;
 currentStart = token.start; token.update();
 Stream stream = getCurrentStream ( ) ; final boolean
 while (true);
 stream = token.stream(); next =
 int start = token.start;
 CurrentStream stream = this.stream; this.update();
 CurrentStream stream = currentStream();
 Stream stream = getCurrentStream ( ) ; final void
 next(_);
 currentStart = token.start; stream.update();
 getPosition();
 int start = stream.start;
stream.update(0); stream.update(1); final
 CurrentStream stream = currentStream; CurrentStream.update();
 String stream = this.stream;
 Stream stream = getCurrentStream ( ) ; int next = - 1();
 JSdocBuilder.update();
stream = getCurrentStream ( token. info )();
 int index;
 setStart(token);
 Stream stream = getCurrentStream ( ) ; token.update();
 Stream stream = this.getCurrentStream ( ) ; int currentLine;
stream.update(0, 0, token.info); final
 Stream stream = getStream ( )();
stream.update() ; stream.setCurrentPosition(0); final
stream.getCharno() - 1 = 0();
stream.parse();
stream.update() ; stream.setCurrentLine(token); final
stream = currentStream;
 getStart();
stream.update(0, 0, 0, 0); final
stream.getCharno() = currentLine ; final
stream.getCurrentLine() ; final
 int current = stream.current;
 SourceStream stream = jsdocParser.update();
 Current stream = currentStream; stream.update();
 String next = stream.update();
stream.getCharno() += 1; final
 String next = token.string;
stream.update(1);
 int current = 0; current.update();
stream.update(0, 0, 0, -1); final
stream.update() ; stream.setCurrent (token); final
stream.update(token);
 int current = -1;
 int next = 0;
stream.setCurrentLine(token); final
stream.update() ; stream.setCurrentPosition(token); final
 String next = "";
stream.setCurrentPosition(0); final
 next(");
 final Stream stream = parser.update();
 getToken();
stream.update() ; stream.setCurrentStart(token); final
 int next(token);
 int currentLine = 0;
 int offset;
stream.getCharno() = 1; final
 String stream = token.stream;
 Stream stream = getCurrentStream ( token ) ; *
 setPosition(0);
stream.update(0, 0, 0, token); final
stream = stream ; final
stream.update(0); stream.update(0); final
 final CharStream next =
stream.getCharno() = 0; static
 String next =
stream.updateStartPosition(token.getStartPosition()); final
stream.setCurrentStartPosition(0); final
stream.update() ; stream.reset ( ) ; final
 int current = current; current.update();
stream.setCurrentLine ( 0 ) ; static
stream.update(0, 0, -1); final
 final String next = "";
 CurrentStream stream = currentParser.update();
stream.setCurrent ( token); final
 String next = null;
stream.updateStartPosition(0, token.info); final
stream.update(0, 0, 0, -1) ;
 CurrentStream stream = CurrentStream();
stream.setCurrentLine ( - 1); final
stream.update(0, 0, token); final
 CurrentStream stream = stream;
stream.updateCurrentPosition(0, -1); final
stream.updateStartPosition(0, -1); final
stream.update(0, token.info); final
stream.updateCurrentStartingPoint(token); final
stream.updateStartPosition(token.startPosition()); final
stream.update() ; stream.setLine (token); final
 int start;
stream.updateCurrentPosition(0, 0, token); final
stream.updateCurrentPosition(0, token.info); final
 int current =
 final int next = token.update();
stream.update(token.info); final
stream.update() + 1.0;
stream.updateCurrentPosition(0, 0, 0); final
stream.end();
 CurrentStream stream = this;
stream.next() ; final
stream.update() ; final
 int start = -1;
stream.updateCurrentLine (token); final
stream.updateStartPosition(0, startPosition); final
 String next = "" ; final
 final CurrentStream next =
stream.update(0, 0, 0); final
stream = currentStream(); final
stream.updateCurrentLineStart(token); final
stream.update() ; stream.getToken() ; final
stream.updateCurrentPosition(0, 0); final
 final boolean next =
stream.updateToCurrentLine(currentLine); final
stream.updateStartPosition(0, 0); final
 String next = token ; final
 final String next =
stream.updateStartPosition(0, token); final
 stream = token.stream(); next();
stream.updateCurrentStartingPoint(0); final
stream.update(0, -1); final
stream.update(0, 0, -1) ;
 final CharStream stream =
 final LineReader next =
 int current = currentToken.update();
 CurrentStartPoint startPoint =
stream.updateCurrentLine (token.info); final
stream.updateStartPosition(token.startPosition); final
 String next = token;
stream.updateCurrentStartingPoint(); final
 int next(stream);
stream.update(token.getStart()); final
 final int current =
 getCurrent();
 getStartPoint();
stream.updateCurrentStart(token); final
 final LineNumber next =
stream.updateCurrentPosition(0); final
 final int startPos;
stream.update(0, token.token); final
 CurrentStream stream = CurrentStream;
 int current = _update();
 CurrentStartPosition startPosition =
stream.update(currentStartingPoint); final
 int index =
 currentStartingPoint.update();
 stream = getCurrentStream ( )();
stream.update(0, token); final
stream.update(currentStart, token); final
stream.updateStart(token); final
stream.update() + 1.1;
stream.update() to update the current starting point. final
stream.update() + 1.5;
 next ( ) ; final
stream.reset ( )();
stream.update(token.startPosition()); final
stream.update(0, 0, -1); static
 JSDocBuilder.update();
stream.update() ; next(token); final
stream.updateCurrent (token); final
stream.update() ; next() ; final
 LineNumber line;
 final int pos;
stream.update() - 1 ; final
 currentStartPosition().update();
 int currentPos =
stream.update(token); final
stream.getPosition(); final
stream.update(0, 0); final
stream.update() ; stream.reset ( ) ; static
 next = token ; final
stream.update(0, 0, 0, -1) final
stream.updateCurrentStartingPoint(token); static
stream.update() to update the current position. final
 parser.update();
 next = null ; final
stream.update(0, 0, 0, -1)); final
 currentStartingPoint().update();
 currentToken.update();
 final int index;
stream.update() ; stream.getToken() ; static
 final String line;
 int startPos;
stream.updateCurrent ( )();
stream.update() + 1; final
stream.update(currentToken); final
stream.updateCurrentLineStart(token); static
stream.update(currentStartingPoint()); final
stream.update() to update the current token. final
stream.update() to update the current line. final
 String next = "" ; static
stream.updateCurrentPosition(); final
stream.updateCurrentLine (token); static
stream.update() to update the token. final
stream.updateToken(); final
 String current = token; final
 CurrentPosition.update();
stream.update() + 1.0; final
stream.update() to get the current line. final
 getPos();
 tokens.update();
stream.update(0, -1); static
stream.update(token.startPosition); final
stream.update() to get the new token. final
stream.update(0, 0, -1) final
 startPosition().update();
stream.update() ; next(token); static
stream.update(startPosition); final
stream.update ( )();
stream.update() to update the stream. final
stream.reset(); final
 startPosition.update();
 jsdocBuild.update();
 currentPosition.update();
stream.start(); final
 next (token); final
 LineNumberStream
stream.update(currentPosition); final
 current.update();
 next = next(); final
stream.updateStart(); final
stream.update(startPosition()); final
stream.update(currentToken()); final
stream.update(0); final
stream.parse(); final
stream.close(); final
 tokenInfo.update();
stream.update(token); static
stream.update() 1 ; final
stream.update(token());
 * * * final
stream.update(current); final
stream.updateLine();
stream.update(start); final
 currentStart.update();
stream; final
 currentPos.update();
stream.update() ; static
 * * * private
 * * final
 * * * static
stream.line
stream(); final
 * * private
stream.update() ; } final
stream.update() 1 ; static
 final int
 * * static
stream; static
 LineReader
stream.update() { final
stream++; final
stream.update()(); final
 final Stream
 final String
 final Reader
 * final
 final
 * static
 *
 * *
 int
 static
