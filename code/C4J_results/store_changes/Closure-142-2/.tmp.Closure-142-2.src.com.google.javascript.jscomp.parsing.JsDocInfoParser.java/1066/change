int lineno = stream.getLineno();
 stream.getLineno();
int lineno = stream.getLineno() + 1;
int  lineno = stream.getLine ( ) ;
int lineno  = stream.getLineNumber ( ) ;
int lineno  = stream.getLineNumber() + 1;
int  lineno = 0;
 int line = stream.getLineno();
 lineno= stream.getLineno();
int  lineno();
int  lineno = stream.lineno();
int lineno  = stream.getLineNo() + 1;
 stream.next();
int  line = stream.getLine ( ) ;
int lineno  = stream.getLineNumber() ; final
int  lineno = 0 ; final
 line=stream.getLineno();
int  line = stream.getLineNumber ( ) ;
int lineno = stream.getLineno() + 1 ; int next = 0 ;
 int lineno = _getLineno();
int lineno = stream.position();
int  lineno = stream.getLine(); final
int lineno = stream.getLineno( ) + stream.getOffset ( ) ;
int  lineno = 1;
 int lin = stream.getLineno();
 this. currentStart = stream. getCurrentStart ( ) ; this. currentEnd = stream. getCurrentEnd ( ) ;
 this. currentStart = stream. getCurrentStart ( ) ; this. currentEnd = stream. getEnd ( ) ;
 this. currentStart = token. getStart ( ) ; this. currentEnd = token. getEnd ( ) ; next ( ) ;
int lineno  = stream.getLineno() ; final
int lineno = stream.getLineno( ) ; stream. update ( lineno ) ;
int  lineno = token.line();
 this. currentStart = stream.getStart(); this. currentEnd = stream.getEnd(); this. currentToken = token.info();
 this. start = stream.getStart(); this. end = stream.getEnd(); this. next = stream.getNext ( ) ;
 this. currentStart = stream.getCurrentStart(); this. currentEnd = stream.getCurrentEnd(); this. next = null ;
 this. currentStart = stream.getCurrentStart(); this. currentEnd = stream.getCurrentEnd(); this. next = token ;
 this. currentStart = stream.getStart(); this. currentEnd = stream.getEnd(); this. currentToken = token ;
 this. currentStart = stream.getCurrentStart(); this. currentEnd = stream.getCurrentEnd(); this. next = next();
 this. currentStart = stream.getStart(); this. currentEnd = stream.getEnd(); this. next = null ;
 this. currentStart = stream.getStart(); this. currentEnd = stream.getEnd(); this. next = next();
 this. currentStart = stream.getStart(); this. currentEnd = stream.getEnd(); this. next = token ;
 this. currentStart = stream.getCurrentStart(); this. currentEnd = stream.currentEnd();
 if ( stream. isEnd ( ) ) { next ( ) ; } else { next ( ) ; }
 this. currentStart = stream.getStart(); this. currentEnd = stream.getEnd(); this. currentToken = token.info;
 if ( stream. isEnd ( ) ) { next ( ) ; } else { stream. update ( ) ; }
int  lineno = currentLine ; final
 if ( stream. isEnd ( ) ) { stream. reset ( ) ; return null ; }
int  lineno ; final
int lineno = stream.getLineno() + 1 ; int next = 1 ;
 this. currentStart = stream.getCurrentStart(); this. currentEnd = stream.getCurrentEnd(); this. next = next ;
int lineno =  stream.getLineNumber() + 1 ; final
 if ( stream. isEmpty ( ) ) return null ; next = stream. getNextToken ( ) ;
 if ( stream. isEnd ( ) ) { next ( ) ; } else { stream. reset ( ) ; }
 final int lineno = (int) stream.getLineno();
 if ( stream. isEmpty ( ) ) { return null ; } if ( stream. hasNext ( ) ) {
int lineno = stream.getLineno( ) + stream.getColumn ( ) ;
 this. currentStart = stream.getStart(); this. currentEnd = stream.getEnd(); this. currentToken = token.token();
 this. currentStart = stream. getCurrentStart ( ) ; this. currentEnd = stream. getCurrentEnd ( ) ; final
 next();
 if ( stream. isEnd ( ) ) { stream. reset ( ) ; return ; }
 this. currentStart = stream.getStart(); this. currentEnd = stream.getEnd(); this. next = next ;
 this. currentStart = stream.getStart(); this. currentEnd = stream.getEnd(); this. currentToken = token.token;
 if ( stream. isEmpty ( ) ) return null ; next = stream. next ( ) ; next ( ) ;
int  line = stream.getLineNumber() ; final
 this. currentStart = token. getStart ( ) ; this. currentEnd = token. getEnd ( ) ; final
 this. currentStart = stream.getCurrentStart(); this. currentLine = stream.currentLine();
 int lineno;
int  lineno = stream.line(); final
int lineno = stream.line();
 this. currentStart = stream.getStart(); this. currentEnd = stream.getEnd(); this. currentToken = token();
int lineno = stream.getLineno( ) ; stream. setLine ( 0 ) ;
 this.token = token.info; this.token = token.token;
 if ( stream. isEnd ( ) ) { stream. update ( ) ; return null ; }
 if ( stream. isEnd ( ) ) { stream. reset ( ) ; continue ; }
 stream.reset();
int lineno = stream.getLineNumber().toString() ; final
 this.currentStart = stream.getCurrentStart(); this.currentEnd = stream.currentEnd;
int  lineno = stream.lineno;
 this. currentStart = stream.getCurrentStart(); this. currentEnd = stream.getCurrentEnd(); this. next() ;
 int lineno =.getLineno();
int  lineeno = 0;
int lineno = stream.getLineno(); int next = stream.getNextLine();
 if ( stream. isEnd ( ) ) { next ( ) ; } else { stream. update ( ) ;
 if ( stream. isEmpty ( ) ) { return null ; } if ( stream. hasNext ( ) )
int  lineno = startLine ; final
 this.currentStart = stream.getCurrentStart(); this.token = token;
 int lineno=getLineno();
 if ( stream. isEnd ( ) ) { stream. reset ( ) ; next ( ) ; } final
int lineno = stream.getLineNumber(); int next = lineno;
int lineno =  stream.getLineno() + 1; final
 this. stream = stream. getCurrentStream ( ) ; this. next = stream. getNextStream ( ) ; final
int  lineeno();
 if ( stream. isEnd ( ) ) { next ( ) ; } else { next ( ) ; } final
 this. start = stream. getStart ( ) ; this. end = stream. getEnd ( ) ; next () {
int lineno = stream.getLineno(); int next = stream.getNext() ;
int lineno =  stream.getLineNumber().trim(); final
 int lineno = (int) (int)stream.getLineno();
int lineno = stream.getLineNumber(); int next = 0 ; final
int  lineeno = 0 ; final
int lineno = stream.getLineno(); int next = stream.nextLine();
 this.currentStart = stream.getCurrentStart(); this.currentEnd = token;
 final int lineno = stream.getLineno();
int  lineno = token.line;
 this. currentStart = stream.getCurrentStart(); this. currentToken = token ;
 next(token);
 this. currentStart = stream.getCurrentStart(); this. currentEnd = null ;
int lineno = stream.getLineno() + 1 ; stream. update ( 1 ) ;
int  lineno = stream.line; final
int lineno = stream.getLineno() + 1 ; int next = 0 ; final
 this.token = token.info; this.next = next();
 if ( stream. isEnd ( ) ) { stream. reset ( ) ; continue ; } final
 if ( stream. isEnd ( ) ) { next ( ) ; } else { next ( ) ; } }
 int lineno = stream.getLine(();
int lineno = stream.getLineno( ) ; int next = 0 ;
 this.token = token.info; this.token = token.token();
 int lineno = (int) stream.getLineno();
int  lineno = 1 ; final
 this.token = token.info; this.string = string;
 int lineno = stream.getLineNumber(();
 this.token = stream.getToken(); this.string = string;
 int line.getLineno();
 if (stream!= null) { int lineno= stream.getLineno();
 int lineno = stream.getCurrent ( ).getLineno();
 if ( stream. isEnd ( ) ) { stream. reset ( ) ; break ; } final
int lineno = stream.getLineno( ) + stream.position ( ) ;
 this.currentStart = stream.getCurrentStart(); this.next = next();
 if ( stream. isEmpty ( ) ) { return null ; } next = stream. next ( ) ; final
 int lineno = 0 ; int next = stream.getLineno();
 if ( stream. isEmpty ( ) ) return null ; next = stream. getNext ( ) ; final
 int lineno = stream.getCurrentLine().stream.getLineno();
int  lineno = stream.getLine()();
 if ( stream. isEmpty ( ) ) return null ; next = stream. next ( ) ; } final
 if ( stream. isEnd ( ) ) { next ( ) ; } else { stream. reset ( ) ; final
 lineeno = stream.getLineno();
 this.token = token.info; this.currentStart = token.start();
int lineno = stream.getLineno() + 1.0;
 this.token = token.info; this.currentStart = token.start;
 if ( stream. isEmpty ( ) ) { return null ; } next ( ) ; final
 inteno = stream.getLineno();
 this.token = token.info; this.next = next();
 if ( stream. isEnd ( ) ) { stream. setEnd ( ) ; } final
int  line = stream.getLine(); final
 if ( stream. isEnd ( ) ) { stream. reset ( ) ; } else {
 this.startPoint = stream.getStartPoint() + 1;
 int lineno = stream.getLineno(();
 this.token = token.info; this.string = string;
 stream.start();
int lineno = stream.getLineno( ) ; stream. update ( ) ; final
 final int lineno = jsdocBuilder.getLineno();
 this.token = token; this.string = string;
 int lineno = (int) token.stream.getLineno();
int lineno = stream.getLineno( ) ; int next = lineno ; final
 int lineno = stream.getSource ( ).getLineno();
 int lineno.getLineno();
 if ( stream. isEnd ( ) ) { next ( ) ; return null ; } else {
int lineno =  stream.getLineNumber( + 1); final
 final int lineno = (int) token.stream.getLineno();
int  lineno = token ; final
int lineno = stream.getLineno() - 1;
int lineno = stream.getLineNumber(); int next = lineno();
int lineno = stream.getLineNumber(); int next = 1 ; final
int lineno = stream.getLineno(); int next = 0 ; final
 int lineno = stream.getLineNr();
 this.currentStartPoint = stream.getStartPoint();
 this.startPoint = stream.getStartPoint();
 int lineno = stream.getStartLine().stream.getLineno();
 final int lineno = stream.getLine();
 this.token = token.info; this.next = null;
int lineno = stream.getLineno(); int next = lineno;
int lineno = stream.getLineno( ) ; stream. updateLine ( ) ; final
 int lineno = (int) stream.token.getLineno();
int lineno = streamPosition();
 this.token = token.info; this.next = true;
 this.token = token.info(); this.next = next();
 int lineno = (i18n)stream.getLineno();
 this.token = token.info; this.token = token.string;
int lineno = stream.getLineno(); int next = stream.getNext(); final
 final CharSequence next = stream.getNext();
int lineno = stream.getLineno() + (int) token;
 ++ stream.getLineno();
 this.token = stream.getToken(); this.string = string();
 this.token = token.info; this.next = null;
 final int lineno = (Integer) stream.getLineno();
int lineno = stream.getLineno() + 1 ; int next = - 1 ; final
 stream.close();
 int lineno = (int) this.stream.getLineno();
 next(_);
int lineno = stream.getLineno() + 1 ; int next = 1 ; final
 final int lineno = stream.getLineNumber;
 this.token = token.info; this.token = token.string();
 final int line = stream.getLineno();
int lineno = stream.getLineno() + 1 ; int next = token ; final
int lineno = stream.pos();
 int lineno = 0 ; int lineno= stream.getLineno();
 final int lineeno = (int)stream.getLineno();
 final int lineno = stream.token.getLineno();
 final CharSequence next = stream.next();
 final int lineno = stream.position();
 int lineno = stream.getLineNumber (*);
int lineno = stream.getLineno() + 1();
int lineno = stream.getLineno() + 1 ; int next = index ; final
 final int lineno = token.stream.getLineno();
 stream.update(token);
 int lineno = (int) stream.source.getLineno();
 final int lineno = token.info().getLineno();
 final int lineno = this.stream.getLineno();
 this.startPoint = stream.getStartPoint() ; final
int  lineeno ; final
int  lineno = 0 ; static
int lineno = stream.offset();
 this.token = token.info; this.token = token; final
 this.startPoint = stream.getStart() ;
 int lineno = (LineNumber) stream.getLineno();
 int lineno = stream.getCurrentLine().getLineno();
 final int lineno = currentStream.getLineno();
 final String line = stream.getLine ( );
 final int lineno = stream.info().getLineno();
 final char lineno = stream.getLineNumber;
 int line = stream.getLineNumber(();
 int lineno = (iStream) stream.getLineno();
 final int lineno = stream.lineno;
 int lineno = stream.getCurrentToken().getLineno();
 int lineno = stream.getLine().length();
 this.currentStart = stream.getCurrentStart() ; final
 this.token = token; this.string = string();
 this.currentStartPoint = stream.getStart() ;
 int lineno = stream.position(();
 int lineno = (iOffset) stream.getLineno();
int lineno = stream.getLineno() + 1; int colno;
 int lineno = stream.getLine (*);
 int lineno = getLine();
 this.token = token.info; this.next = next; final
 int lineno = stream.getLineNo();
 final int lineno = token.info.getLineno();
 final int lineno = (int) _stream.getLineno();
 final CharSequence next = stream.getCurrent();
 stream.seek(0);
 int line=getLineno();
int lineno = stream.getLineNumber().toString() ; static
 final int lineno = stream.lineNumber;
 final int lineno = stream.line();
 final int lineeno = jsdocBuilder.getLineno();
 int line = stream.line();
 int lineno = stream.position(*);
int lineno = stream.getLineno() + 1.0f ; final
 this.start = stream.getStart() ; final
int lineno = stream.getLineno(); int next = 1 ; final
int lineno = stream.getLineno( ) ; int next = token ; final
 LineNumber stream = (LineNumber) _stream.getLineno();
int lineno = stream.getLineNumber().trim() ; static
int lineno = stream.getLineno(); int next = lineno();
int lineno = stream.getLineno( ) + stream.getOffset(); final
 int lineno = 0 ; int next = _getLineno();
 final char lineno = stream.getLine();
 this.token = token; this.string = string; final
 int lineno = 0 ; int lineNo= stream.getLineno();
 int lineno = stream.getLineNumber1();
 Line lineno = stream.getLineno();
 int line = stream.getLine(();
 int lineno = jsdocBuilder.getLineno();
 final char lineno = stream.lineno;
 this.token = token; this.line = line; final
 int current = stream.getCurrent(); int newlineno = stream.getLineno();
 int line = stream.getCurrentLine();
int lineno  = currentLine();
 int next = stream.nextLine(); int nextlineno = stream.getLineno();
 int lineno = (lineno)stream.getLineno();
 int lineno = stream.getPosition();
 int current = stream.getCurrent(); int currentlineno = stream.getLineno();
 LineNumber lineno = stream.getLineno();
 int current = stream.getCurrent(); int nextlineno = stream.getLineno();
 this.currentStartPoint = token.info();
 if (stream!= null) {
 final int lineno = _stream.getLineno();
 final int lineno = currentToken.getLineno();
int lineno = streamOffset();
int lineno = stream.getLineno( + 1) ; final
 final Line lineno = stream.getLineno();
int  lineeno ;
 this.token = token; this.string = null;
 final int lineno = stream.position;
 stream.setStart(token);
 int current = stream.getCurrent(); int prevlineno = stream.getLineno();
 this.currentStart = stream.getCurrentStart(); final
 this.token = token; this.line = 0; final
 int stream.getLineno();
int lineno = streamLocation();
 final int line = stream.line();
 final int lineno = stream.line;
int lineno = stream.getLineno() + 1.5;
 this.currentStart = stream.getStart(); final
int lineno = streamPos();
int lineno = stream.getLineno().trim() ; final
 final int lineno = _getLineno();
int lineno = stream.getLineno( ) + 1 + 1 ; final
int lineno = streamLine();
 int lineno = (int) _stream.getLineno();
 final int lineno = 0;
int lineno = stream.getLineno( ) + 1.0 ; final
int lineno = stream.getLineno(); int next = currentLine ; final
 int lineno = 0; int prevlineno = stream.getLineno();
 int lineno = 0; int newlineno = stream.getLineno();
 int lineno = (int 0);
 final int lineno = startStream.getLineno();
 int lineeno = stream.line();
 final int lineno = getLine();
 final int lineno;
 stream.setCurrentLine(token);
 int lineno = 0; int nextlineno = stream.getLineno();
 final CharSequence next = stream.next;
 int line;
 final char lineno = stream.lineNumber;
 this.token = token; this.next = next; final
 final LineNumber lineno = stream.getLineno();
 final char lineno = stream.position;
 int lineno = 0; int oldlineno = stream.getLineno();
 final final int lineno = stream.getLineno();
int lineno = stream.getLineno() - stream.getOffset(); final
int lineno = stream.getLineno() + 1; int colno();
int lineno = stream.getLineno() + 1 ; int next = - 1 ; static
 int lineno = 0; int nlineno = stream.getLineno();
 this.currentStartPoint = token.info;
 int lineno = stream.token.getLineno();
 final int lineno = m_stream.getLineno();
 this.token = token; this.next = next(); final
 if (token!= null) {
 final int next = 0 ; final int oldlineno = stream.getLineno();
 stream.setLine(token);
 if (token == null) {
 stream.parse();
int lineno = stream.getLineno() + - 1 ; final
 if (stream!= null) { long lineno= stream.getLineno();
 int lineeno = (int)stream.getLineno();
 final int lineno = currentLine.getLineno();
 int lineno = current();
 stream.setPosition(0);
 this.currentStartPoint = stream.getStart(); final
 stream.update(0);
 this.token = token; this.string = final
 if (stream.isEmpty());
 int lineno = getLine(();
 final int lineno = (int) token.getLineno();
 final int lineno = stream.source.getLineno();
 final int next = 0 ; final int prevlineno = stream.getLineno();
 final int line = token.stream.getLineno();
 final int next = 0 ; final int newlineno = stream.getLineno();
 stream.setLine(0);
int lineno = stream.getLineno() + 1 ; int next = 0 ; final final
int lineno = stream.getLineno() + (int) token();
 final int lineno = - 1;
 long lineno=stream.getLineno();
 this.token = token.info; this.string++; final
 final char lineno = stream.line;
 if (stream!= null) { int lineeno= stream.getLineno();
 this.currentStart = stream.getStart(); final
 this.currentStart = currentStart ; final
 stream.seek(token);
 final int lineeno = stream.line;
 final int lin = stream.getLineno();
 stream.setPosition();
 final int next = 0 ; final int _lineno = stream.getLineno();
 this.pos = stream.getPosition(); final
 final int next = 0 ; final int nextlineno = stream.getLineno();
 this.startPoint = stream.getStart(); final
 this.token = token.info; final
 int line = stream.position();
 int next = 0;
 int line = 0;
 stream.setStart(0);
 int pos;
 int lineno = currentStream.getLineno();
 final LineNumber <int> lineno= stream.getLineno();
int lineno = stream.getLineno() + 1 ; int next = 0 ; final static
 this.token = token; this.string; final
 int next = stream.next();
 final int lineno ; int lineno= stream.getLineno();
 final lineeno = stream.getLineno();
 next(();
 final char lineno = - 1;
 this.token = token; this.string = string; static
 final int line = this.stream.getLineno();
int lineno  = token ;
int lineno = stream.getLineno(...) ;
int  next();
int  lineno ; static
 int lineno = position();
 final LineNumber <? > lineno= stream.getLineno();
 next(*);
 int lineno = token.stream.getLineno();
 int current = 0;
 final int lineno = currentLine;
 this.token = token; this.string++; final
int lineno = stream.line;
 this.currentStart = stream.start(); final
int lineno = stream.getLineno( + 1.0) ;
 final LineNumber <String> lineno= stream.getLineno();
 final int line = 0;
 final int lineno = 1;
 int lineno = next();
 int offset;
int lineno = stream.getLineno() + 1 ; int next ; final
 final JsDocLine oldlineno = stream.getLineno();
 int pos = 0;
 final char lineno = 0;
 this.token = token.token; final
int lineno = stream.getLineno( + 1.0); final
 final int lineeno = 0;
 int lineno = line();
 final int lineno = docstream.getLineno();
 this.currentStart = stream.start; final
 lin = stream.getLineno();
 final JsDocLineno jlineno = stream.getLineno();
 lineeno;
int lineno = stream.getLineno( + - 1); final
 this.currentStartingPoint = token; final
 int lineno = currentToken.getLineno();
 int pos=getLineno();
 int lineno = index();
 int next(token);
int  i;
 int index;
int lineno = stream.getLineno(1); final
 final JsDocLineno oldlineno = stream.getLineno();
 final int lineno ; int lineeno= stream.getLineno();
 stream.setCurrentStartPosition(token); final
 Line lineno;
 stream.setCurrentStartPoint(token); final
 int start = 0;
int lineno = stream.getLineno() - 1; final
 final long lineno = stream.getLineno();
int lineno = stream.getLineno(0); final
 int oldlineno = stream.getLineno();
int lineno = stream.getLineno(*) ;
int lineno = stream.getLineno() + 2;
 int lineno ++;
 if (update) {
 int lineno = _stream.getLineno();
 setPosition(0);
 update(token);
 stream.setCurrentStartPosition(0); final
 final JsDocLine _lineno = stream.getLineno();
 stream.setLineNumber(0); final
 final JsDocLine prevlineno = stream.getLineno();
int lineno = stream.index();
.next();
 final PosixLineNumber lineno= stream.getLineno();
 advance(token);
 stream.setCurrentPosition(token); final
 final JsDocLineno _lineno = stream.getLineno();
 next(stream);
 final JsDocLine jlineno = stream.getLineno();
 final char lineno = 1;
 stream.setCurrentPosition(0); final
 final int lineno ; lineno= stream.getLineno();
 stream.setCurrentLine(token); final
 if (debug) {
 this.start = stream.getStart()); final
 final JsDocLineno newlineno = stream.getLineno();
 final JsDocLineNumber jlineno = stream.getLineno();
 stream.next(););
 lineno =.getLineno();
 stream.getLineNumber() ; final
 stream.setCurrentStart(token); final
 advance(1);
 final JsDocLine newlineno = stream.getLineno();
 final int line = 1;
 if (stream!= null) { final
 int line = token.stream.getLineno();
 setStart(token);
 LineNumber lineno;
 final LineNumber < Integer > line= stream.getLineno();
 int line = 1;
int  line();
int lineno = stream.getLineno( - 1); final
 int lin.getLineno();
 stream.setCurrent (token); final
 int lineeno= stream.getLineno();
 if (stream!= null)
int  lineeno ; static
 int _lineno = stream.getLineno();
 final int pos;
 final int lineno = line *= stream.getLineno();
 if (continuation) {
 if (currentLine) {
 if (continued) {
 final int line, lineno= stream.getLineno();
 int newlineno = stream.getLineno();
 -- stream.getLineno();
 line = null;
 line += 1;
 if (continuous) {
 final int offset;
 { nextLine ( ) ; final
 if (stream!= null) final
int lineno = stream.getLineno() + 1; static
 int next = next();
 final CharSequence oldlineno = stream.getLineno();
 line += stream.getLineno();
 { next ( ) ; } final
 final int lineno *= stream.getLineno();
 token=stream.getLineno();
 if (token == null) final
 int current = 0 ; final
 } private LineNumber lineno; private
 int line = current();
 } private String next ( ) { final
 int next = 0 ; final
 line = "";
 getPosition();
 int next = current();
 int line = next();
 final int currentLineNo *= stream.getLineno();
 int next = index();
 } private LineNumber lineno ; final
 } private String nextLine() { final
 final int currentLineNo<= stream.getLineno();
 stream.getLineNumber() ; static
 final JsLine oldlineno = stream.getLineno();
 final int currentLineNo>= stream.getLineno();
 final int startLineNo *= stream.getLineno();
 final JsLinenolineno = stream.getLineno();
 int line =.getLineno();
 if (stream!= null) { static
 final LineNumber stream.lineno = stream.getLineno();
 stream.nextLine(); final
int lineno = stream.getLineno( )();
 final int current_lineno = stream.getLineno();
 final CharSequence newlineno = stream.getLineno();
 { nextLine ( ) ; }
 { line = currentLine(); final
 { line = currentLine(); }
 final LineNumber oldlineno = stream.getLineno();
 final int lineno == stream.getLineno();
 final int lineno ^= stream.getLineno();
 getToken();
 int prevlineno = stream.getLineno();
 final int stream.lineno = stream.getLineno();
 final final int oldlineno = stream.getLineno();
 getStart();
 final int old_lineno = stream.getLineno();
int lineno = stream.getLineno(2); final
 final int oldlineno = stream.getLineno();
 getCurrent();
int lineno = stream.getLineno(token); final
 break ; }
 line.getLineno();
 token.getLineno();
 int lineno *= stream.getLineno();
 final int _lineno = stream.getLineno();
int lineno  = 0
 final int newlineno = stream.getLineno();
 return ; final
 source.getLineno();
 return null;
int lineno = stream.getLineno() ; static
 final int prevlineno = stream.getLineno();
 break ; final
 return ; }
 final int lastlineno = stream.getLineno();
int lineno  = final
 int lineno>= stream.getLineno();
int lineno = stream.getLineno()); final
 ++ token.getLineno();
int lineno = stream.getLineno()(); final
 final
int lineno := stream.getLineno();
int lineno += stream.getLineno();
int lineno, stream.getLineno();
