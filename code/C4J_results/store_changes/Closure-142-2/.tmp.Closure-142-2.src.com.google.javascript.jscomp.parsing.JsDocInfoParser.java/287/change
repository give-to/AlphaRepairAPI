 token = preserveInfo.token;
 token = preserve.token;
token  = eatTokensUntilEOL(token);
token = preserveInfo.token; token = preserveInfo.token;
 token=token;
token = preserveInfo.token; token = preserve.token;
 token = eatTokensUntilEOL(); token= preserveInfo.token;
 token = fileLevelJsDocBuilder.token;
 token = preserveTokensUntilEOL(token;
 token = preserveInfo.token; token = preserve;
 token = preserveInfoInfo.token;
 token = preserveInfo.token token=preserveInfo.token;
 token = preserve ; token= preserveInfo.token;
token =  eatTokensUntilEOL(token, preserve);
 token = preserveToken ;
 token = preserveInfo.token; } token=preserveInfo.token;
 token = eatTokensUntilEOL(token);
 token = preserveInfo ;
 token = eatTokensUntilEOL(token); continue retry;
 token = preserveInfo.token; preserveInfo.token;
 token = fileLevelLicenseInfo.token;
 token = preserveInfo ; token= preserveInfo.token;
 token = eatTokensUntilEOL(); } token= preserveInfo.token;
 token = preserveInfo.token; token = "";
token = preserveInfo.token; token = fileOverview;
 token = preserveInfo.token; return token;
token = preserveInfo.token; token = preserveInfoInfo.token;
 token = eatTokensUntilEOL(token;
token  = eatTokensUntilEOL();
 token = eatTokensUntilEOL(token); }
 token = preserve ;
token  = eatTokensUntilOL(token);
 token = eatTokensUntilEOL(token); if (token == null) { parser.addWarning("msg.jsdoc.license");
 if ( preserveInfo!= null ) { parser. addWarning("msg.jsdoc.preserve", preserve); }
 else { parser. addWarning("msg.jsdoc.incompat.license", lineno);
 if ( preserveInfo!= null ) { parser. addWarning("msg.jsdoc.preserve"); }
 token = preserveInfo.token; yield token;
 token = preserveInfo.token; token = '';
 if ( preserveInfo!= null ) { parser. addWarning("msg.jsdoc.preserve");
 token = eatTokensUntilEOL();
token = preserveInfo.token; token = preserveInfo;
token = preserveInfo.token; token = preserveInfo.token.token;
 else { parser. addWarning("msg.jsdoc.incompat.license", lineno); }
 if ( preserveInfo!= null ) { parser. addWarning("msg.jsdoc.preserve", preserveInfo.string);
 if ( preserveInfo!= null ) { parser. addWarning("msg.jsdoc.preserve", stream.getLineno(), preserve);
 token = preserveInfo.token; token = _token;
 if ( preserveInfo!= null ) { parser. addWarning("msg.jsdoc.preserve.extra");
 else { parser. addWarning("msg.jsdoc.incompat.license", lineno, charno);
 token = preserveInfo.token.token;
 token = licenseInfo.preserveInfo.token;
 if ( preserveInfo!= null ) { parser. addWarning("msg.jsdoc.preserve", stream.getLineeno()); }
token = preserveInfo.token; token = preserveInfo.endToken;
 if ( token == null ) { parser. addWarning("msg.jsdoc.license");
 if ( preserveInfo!= null ) { parser. addWarning("msg.jsdoc.preserve, preserve); }
 else { parser. addWarning("msg.jsdoc.incompat.license", stream.getLineno(), charno); }
 else { parser.addWarning("msg.jsdoc.preserve");
 token = eatTokensUntilEOL(token); if (token!= preserveInfo.token)
 token = eatTokensUntilEOL(token); if (token == null) { parser.addWarning("msg.jsdoc.ignore");
token =  eatTokensUntilEOL(token).token();
token =  eatTokensUntilEOL(token.token);
 else { parser. addWarning("msg.jsdoc.incompat.preserve"); }
 else { parser. addWarning("msg.jsdoc.incompat.preserve");
 if ( preserveInfo!= null ) { parser. addWarning("msg.jsdoc.preserve", preserveInfo); }
 token = eatTokensUntilEOL(token).token;
 token = preserveInfo.token; token = token.token;
 token = eatTokensUntilEOL(token); if (token!= JsDocToken.EOL)
 if ( preserveInfo!= null ) { parser. addWarning("msg.jsdoc.license");
 token = preserveInfo.token; return token.token;
 else { parser.addWarning("msg.jsdoc.license");
 token = preserveInfo.preserveInfo.token;
 token = fileLevelJsDoc.token;
 if ( preserveInfo!= null ) { parser. addWarning("msg.jsdoc.preserve", stream.getLineno()); }
 else { parser. addWarning("msg.jsdoc.incompat.license", lineno, charno); continue retry;
 if ( token == null ) { parser. addWarning("msg.jsdoc.incompat.license");
 token = eatTokensUntilEOL(token); if (token!= JsDocToken.EOC) {
 if ( preserveInfo!= null ) { parser. addWarning ( "msg.jsdoc.preserve" )
 token = preserveInfo.info.token;
 if ( preserveInfo!= null ) { parser. addWarning("msg.jsdoc.preserve); }
 else { parser. addWarning("msg.jsdoc.incompat.license");
 token = preserveInfo.token; token=token;
 token = eatTokensUntilEOL(token); if (token!= JsDocToken.EOL) {
 token = eatTokensUntilEOL(token); if (token!= JsDocToken.EOC)
 token = eatTokensUntilEOL(token); continue retry; }
 token = preserveInfo.token; token = null;
 token = eatTokensUntilEOL(token); if (token == null) { parser.addWarning("no preserve"); }
 else { parser. addWarning("msg.jsdoc.incompat.license", lineno, charno); continue retry }
 token = eatTokensUntilEOL(token); if (token!= preserveInfo.token) {
 if ( preserveInfo!= null ) { parser. addWarning("msg.jsdoc.preserve, stream.getLineno(), preserve);
token  = eatTokensUntilNL(token);
 token = eatTokensUntilEOL(token); if (token == null) { parser.addWarning("no preserve");
 if ( token == null ) { parser. addWarning("msg.jsdoc.incompat.license"); }
token  = preserveTokensUntilEOL();
token = preserveInfo.token; token = eatTokensUntilOL(token);
token = preserveInfo.token; token = preserveToken;
 else { parser. addWarning("msg.jsdoc.preserve"); }
 token = eatTokensUntilEOL(token); if (token == null) { parser.addWarning("Unknown preserve");
 token = eatTokensUntilEOL(token); if (token == null) { parser.addWarning("msg.no preserve");
 token = preserve ; token = fileOverviewInfo.token;
 token = preserveInfo.token; token = restore.token;
 token = preserveInfo.token;
 else { parser. addWarning("msg.jsdoc.incompat.ignore", lineno);
 token = preserveInfo.endToken;
 token = eatTokensUntilEOL(token); if (token == null) { parser.addWarning("license");
 token = preserveInfo.token; token =!token;
 token = preserveInfo.token; token = "token;
 token = preserveInfo.token; break outer;
 token = parseTokensUntilEOL(); token=preserveInfo.token;
 else { parser.addWarning("msg.jsdoc.preserve.extra");
 token = eatTokensUntilEOL(token); if (token == null) { parser.addWarning("msg.jsdoc.license";
 else { parser. addWarning("msg.jsdoc.incompat.license", token);
 token = fileLevelLicenses.token;
token  = eatTokensUntilCLOSE(token);
token =  eatTokensUntilEOL(token, true);
 token = preserveInfo.token; token = :token;
 else { parser. addWarning("msg.jsdoc.incompat.preserve); }
token = preserveInfo.token; token = preserveInfo.eol;
 if ( preserveInfo!= null ) { parser. addWarning("msg.jsdoc.preserve", preserveInfo.string());
 token = fileOverviewInfo.token;
 else { parser. addWarning("msg.jsdoc.incompat.license", line); }
token = preserveInfo.token; token = preserveInfo.lineNumber;
 token = eatTokensUntilEOL(token); if (token == null) { parser.addWarning("msg.unknown"); }
 token = eatTokensUntilEOL(token); if (token == '\n')
token = preserveInfo.token
 token = "" ;
 token = eatTokensUntilEOL(token); if (token!= JsDocToken.END)
 token = preserveInfo.token + token;
 token = preserveInfo.extractionInfo.token;
token = preserveInfo.token(); token = preserveInfo.token;
 token = preserveInfo.string;
 token = eatTokensUntilEOL(token); continue retry; } else {
 token = preserveInfo.token; break ; }
 token = preserveInfo.token + 1;
 token = eatTokensUntilEOL(token); }
 else { parser. addWarning("msg.jsdoc.incompat.license"); }
 token = preserve ; } token=preserveInfo.token;
 token = eatTokensUntilEOL(token); if (token == null) { parser.addWarning("Unknown token");
 token = preserveInfo.token; continue parse;
 token = eatTokensUntilEOL(token); if (token == null) { parser.addWarning("msg.missing"); }
 token = eatTokensUntilEOL(); continue retry;
 else { parser.addWarning("msg.jsdoc.preserve"; }
 token = preserveInfo.string token= preserveInfo.token;
 token = preserveInfo.tokenEnd;
 token = fileLevelJsDocBuilderInfo.token;
 token = preserveInfo.token; break;
 token = fileSrcInfo.token;
token = preserveInfo.token; token = preserveInfo.string;
 else { parser.addWarning("msg.jsdoc.ignore");
 token = preserveInfo.descriptor.token;
 token = preserveInfo; } token= preserveInfo.token;
 token = eatTokensUntilPREFIX(token;
 else { parser. addWarning("msg.jsdoc.incompat.ignore");
 token = eatTokensUntilEOL(token); return retry; }
 token = preserveInfo.string; token= preserveInfo.token;
 if ( preserveInfo!= null ) { parser. addWarning("msg.jsdoc.preserve", preserveInfo.string");
token = preserveInfo.token; token = preserve.string;
 token = preserveInfo.token.preserveInfo.token;
 return token.token;
token = preserveInfo.token; token = preserve.token();
token = preserveInfo.token; token = preserveInfo.endToken();
 token = preserveInfo.token; charno= preserveInfo.token;
 token = preserveInfo ;
 token = eatTokensUntilEOL(token); continue retry();
 token = eatTokensUntilEOL; token= preserveInfo.token;
 token = preserveInfo.token; continue outer;
 token = preserveInfo.endLine;
 token = preserveInfo.token; continue ; }
 token = eatTokensUntilEOL(token); break ; default : break ; }
token  = eatTokenUntilEOL(token);
 token = eatTokensUntilSQUARE(token;
 token = eatTokensUntilEOL(token); return retry; } else {
token  = eatTokensUntilEOLToken();
 token = preserveInfo.tokenString;
 token = eatTokensUntilEOL(); }
 token = eatTokensUntilEOL(); continue retry; } else {
 token = fileReserveInfo.token;
 token = preserveInfo.token+preserveInfo.token;
 token = _token;
 else { token = preserveInfo.token; token= preserveInfo.token;
 else { parser.addWarning(preserve);
token  = preserve.token();
 else { parser. addWarning("msg.jsdoc.incompat.package");
 token = eatTokensUntilEOL(token); if (token!= JsDocToken.EOL) { } }
 token = licenseInfo.token+preserveInfo.token;
 token = eatTokensUntilEOL(); charno= preserveInfo.token;
token  = consumeTokensUntilEOL(token);
 else { parser.addWarning("no preserve"); }
 token = copyTokensUntilEOL(token;
 token = eatTokensUntilEOL(); continue retry; }
 else { parser. addWarning("msg.jsdoc.incompat.license";
 token = eatTokensUntilEOL(token); break ; default : break ; } }
 token = eatTokensUntilEOL(token, preserve);
 else { token = preserveInfo.string; token= preserveInfo.token;
 else { parser.addWarning("preserve");
token = preserveInfo.token; token = preserveInfo.token.next();
token  = preserveToken();
 token = preserveTokenUntilEOL(token;
 else { parser.addWarning("msg.jsdoc.preserve";
 if ( preserveInfo. token!= null ) {
token = preserveInfo.token; token = preserveInfo.token.end;
 token = preserve.token;
 token = preserveInfo.token; returnpreserveInfo.token;
 token = eatTokensUntilEOL(); return retry; }
 token = token.token;
 else { parser.addWarning("msg.jsdoc.license";
 else { parser.addWarning("license");
token = preserveInfo.token; if (!token)
 if ( preserveInfo!= null ) {
 token = eatTokensUntilEOL(token, preserve); }
 token = preserveInfo.endToken();
 token = '' ;
 else { token = preserveInfo.token; }
token = preserveInfo.token; token = preserveInfo.token.end();
 token = fileLicenseInfo.token;
 token = preserveInfo.endLine();
token = preserveInfoToken;
 token = eatTokensUntilEOL()+token;
 if ( preserveInfo. token!= null )
 token = licenseInfo.token token=preserveInfo.token;
 token = preserveInfo.token, token=preserveInfo.token;
 token = preserveInfo.token|preserveInfo.token;
 token = eatTokensUntilEOL(token); break; }
 if (token == null) {
token  = parseTokensUntilEOL();
 if ( preserveInfo!= null ) { break ; }
 else { parser.addWarning("missing preserve"); }
 token = ' ' ; token= preserveInfo.token;
token  = preserveInfo.token; token = preserve();
 token = eatTokensUntilEOL(); returntoken;
token  = eatTokensUntilEOLToken;
 token = fileLevelJsInfo.token;
 token = preserveInfo.token; --preserveInfo.token;
 token = preserveDescriptionInfo.token;
 token = preserveTokensUntilEOL_token;
 else { token = preserveInfo ; token= preserveInfo.token;
 token = fileOverviewInfo.preserveInfo.token;
 if ( preserveInfo!= null )
 token = eatTokensUntilEOL;
 else { } token=preserveInfo.token;
token  = preserveTokensUntilEOL;
token = preserveInfo.token; token = preserveInfo.token();
 token = preserveInfo.token();
 token = eatTokensUntilEOL(); }
 token = fileOverview;
 token = eatTokensUntilEOL(token); break;
token  = eatTokensUntilEOL(token));
 if ( preserve!= null )
 if ( preserveInfo. token ) {
 else { token = fileOverviewInfo.token;
 token = eatTokensUntilEOL(token); } }
 token = licenseLevelJsDocBuilder.token;
 token = null;
 token = licenseInfoInfo.token;
 return token;
token = preserveInfo.token; continue else:
 token = preserve.token();
 token = eatTokensUntilEOL; }
 token = fileLivescriptInfo.token;
 token = ' ' ;
 token = licenceInfo.preserveInfo.token;
 token ++;
 token = eatTokensUntilEOL(); else
 token = nexttoken;
token  = [];
 token += preserve ; token= preserveInfo.token;
 token = preserveInfo.token);
token = preserveInfo.token; continue else {
 token = license.token.preserveInfo.token;
 token = "" ;
 token = (StringNode)preserveInfo.token;
 token = preserveToken ;
 token = preserve(); token= preserveInfo.token;
token = preserveInfo.token.content;
token = preserveInfo.token.string;
 token = fileOverview.preserveInfo.token;
 token = endtoken;
 preserveInfo.token;
 token = "" ; token= preserveInfo.token;
 token = preserveInfo.subtoken;
token  = preserved.token;
 token = info.token;
 token = fileLevelJsDocInfo.token;
 yield token;
 token = preservedInfo.token;
 token =!token;
 token = license.token+preserveInfo.token;
 yield token.token;
 case STRING:
 token = licenseInfoToken.preserveInfo.token;
 token = preserveInfo();
token = preserveInfo.nextToken;
 token = preserveString;
 token = null;
token  = null
token = preserveInfo.lineNumber;
 token = preserve ;
 Token token = preserve. token;
 token += preserveInfo.token;
token = preserveInfo.token.token();
 token = preserve.string;
 token = restore.token;
 else { token=preserveInfo.token;
 token = preserve_token;
 token =!preserveInfo.token;
 token = reserveInfo.token;
token = preserveInfoToken();
 break ; } token= preserveInfo.token;
 token = reserve.token;
 token = license.preserveInfo.token;
 token = preserve().token;
 break ; }
 token = observeInfo.token;
token  = ;
 token = preserve += preserveInfo.token;
 return info.token;
 token = license_preserveInfo.token;
 token = preserve |= preserveInfo.token;
 break ; }
 tokenInfo.token;
 token = preserveToken= preserveInfo.token;
 token = preserve+preserveInfo.token;
 token = license+preserveInfo.token;
 case NAME:
 token --;
 } token= preserveInfo.token;
 token=.token;
 break; token= preserveInfo.token;
 token = _preserveInfo.token;
 case TEXT:
 token = unpreserveInfo.token;
 else { }
 token =...preserveInfo.token;
 return null;
 } } token= preserveInfo.token;
 } else {
token = preserveInfo.token; }
 String token= preserveInfo.token;
token = preserveInfo ; }
 else {
 token.token;
 token=\"token;
 token |= preserveInfo.token;
 token="token;
 else {
 break ;
 token ^= preserveInfo.token;
 else: token= preserveInfo.token;
 } }
 token="preserveInfo.token;
 token *= preserveInfo.token;
 else:
 else:
 token=\"preserveInfo.token;
token = preserveInfo.token; else
 } }
token = preserveInfo.token(); }
 else,
token = preserveInfo.token); }
 } else
 }
 else
 #
token -= preserveInfo.token;
token is preserveInfo.token;
