AbstractCommandLineRunner(PrintStream out, PrintStream err) {
AbstractCommandLineRunner(PrintStream out, err) {
AbstractCommandLineRunner(PrintStream out) {
AbstractCommandLineRunner(out, PrintStream err) {
(out, PrintStream err) {
AbstractCommandLineRunner() {
AbstractCommandLineRunner(PrintStream ) {
AbstractCommandLineRunner(PrintStream out, PrintStream err, CommandLineConfig) {
AbstractCommandLineRunner(PrintStream out, PrintStream err, CommandLine config) {
AbstractCommandLineRunner( this(System.out, System.err));
AbstractCommandLineRunner(CommandLineConfig) {
AbstractCommandLineRunner( this(System.out, System.err, err) {
AbstractCommandLineRunner(PrintStream out) { this(System.out, err);
AbstractCommandLineRunner(PrintStream out, PrintStream * err) {
AbstractCommandLineRunner(...) {
AbstractCommandLineRunner(PrintStream out, PrintStream err=null) {
AbstractCommandLineRunner(PrintStream out, PrintStream err) { this(System.out, err);
AbstractCommandLineRunner() { this(System.out, err);
AbstractCommandLineRunner( this(System.out, System.err) {
AbstractCommandLineRunner( this(System.out, err)) {
AbstractCommandLineRunner(PrintStream out,  err);
AbstractCommandLineRunner(PrintStream out, Writer err) {
AbstractCommandLineRunner() { this(System.out);
(out,err) {
AbstractCommandLineRunner(PrintStream out, PrintStream  err);
(System.out, PrintStream err) {
AbstractCommandLineRunner(CommandLineConfig config, PrintStream out, PrintStream err) {
AbstractCommandLineRunner() { this(System.err); }
AbstractCommandLineRunner(PrintStream out,  PrintStream err) { final CommandLineConfig
AbstractCommandLineRunner(PrintStream out, PrintStream err, config) {
AbstractCommandLineRunner(config, PrintStream out, PrintStream err) {
AbstractCommandLineRunner(PrintStream out) { this(System.out);
AbstractCommandLineRunner( this(System.out, System.err )) {
AbstractCommandLineRunner(PrintStream  output, PrintStream err) {
AbstractCommandLineRunner(PrintStream out, PrintStream err)  { this(System.out, err); }
AbstractCommandLineRunner(PrintStream out, PrintStream  err) { this(System.out);
AbstractCommandLineRunner(PrintStream out, PrintStream err) { this.runTimeStats = null;
AbstractCommandLineRunner(PrintStream out) { this(System.out); }
AbstractCommandLineRunner( this(System.err, System.out));
AbstractCommandLineRunner(PrintStream out) { this(System.out, out);
AbstractCommandLineRunner() { this(System.err, err);
AbstractCommandLineRunner(Config config, PrintStream out, PrintStream err) {
AbstractCommandLineRunner() { this(System.out); }
AbstractCommandLineRunner( this(System.in, System.err));
AbstractCommandLineRunner() { this(System.err);
AbstractCommandLineRunner(PrintStream out,  PrintStream err, CommandLineConfig config) {
AbstractCommandLineRunner(PrintStream out, PrintStream err, C config) {
AbstractCommandLineRunner(PrintStream out, String err) {
AbstractCommandLineRunner(Stream out, PrintStream err) {
AbstractCommandLineRunner( this(System, System.err));
AbstractCommandLineRunner(PrintStream out, PrintStream err, Configuration config) {
AbstractCommandLineRunner(CommandLine config) {
AbstractCommandLineRunner( this(System.out, System.err), err) {
AbstractCommandLineRunner(PrintStream out, int err) {
AbstractCommandLineRunner(PrintStream  err) { this(System.err); }
AbstractCommandLineRunner(PrintStream out) { this.out = out;
AbstractCommandLineRunner(PrintStream out,  err)
AbstractCommandLineRunner(PrintStream out, PrintStream  err) { this(System.out); }
AbstractCommandLineRunner( { this(System.out, err) {
AbstractCommandLineRunner(PrintStream  in, PrintStream err) {
 if (err) {
AbstractCommandLineRunner( this(System.out)) {
AbstractCommandLineRunner( this(System.out, System.err2) {
AbstractCommandLineRunner(PrintStream out, PrintStream  err)
AbstractCommandLineRunner( this(System.out, System.err);) {
AbstractCommandLineRunner(PrintStream out, PrintStream  err) { if (testMode) {
AbstractCommandLineRunner(PrintStream out, PrintStream err, Compiler compiler) {
AbstractCommandLineRunner( this(System.out, err));
AbstractCommandLineRunner(PrintStream ) { this(PrintStream) {
AbstractCommandLineRunner(PrintStream out, PrintStream err, C c) {
AbstractCommandLineRunner( this(System, System.err)) {
AbstractCommandLineRunner(PrintStream out, PrintStream err, A config) {
AbstractCommandLineRunner(PrintStream out, PrintStream err) { this(System.err, err);
AbstractCommandLineRunner(PrintStream out, PrintStream  err) { final CommandLineConfig config =
AbstractCommandLineRunner(PrintStream  err) { this(System.err);
AbstractCommandLineRunner(CommandLineConfig config) {
AbstractCommandLineRunner(PrintStream out, PrintStream  err) { this.runTimeStats(); }
 } ; return new CommandLineRunner ( config, outputCharset, outputCharset, runTimeStats ) { class
 } ; return new CommandLineRunner ( config, outputCharset, outputCharset, runTimeStats ) ; class
AbstractCommandLineRunner(PrintStream out) { this(System.out) {}
AbstractCommandLineRunner(CommandLine config, PrintStream out, PrintStream err) {
AbstractCommandLineRunner(PrintStream out, PrintStream err, InputStream inputCharset) {
 } ; return new CommandLineRunner ( config, outputCharset, outputCharset, runTimeStats ) ; } class
AbstractCommandLineRunner(PrintStream out) { this(System.out) {
 } { this.config = new CommandLineConfig(); this.out = System.out; this.err = System.err; }
AbstractCommandLineRunner(PrintStream ) { this(PrintStream) {}
AbstractCommandLineRunner(this, runTimeStats);
 } ; return new CommandLineRunner ( config, outputCharset, outputCharset, runTimeStats, compiler ) ; } class
AbstractCommandLineRunner(PrintStream out, PrintStream  err) { this(System.err);
 } ; return new CommandLineRunner ( config, outputCharset, outputCharset, outputCharset ) { class
(PrintStream out, PrintStream err) {
AbstractCommandLineRunner(PrintStream out,  PrintStream err) { final CommandLineConfig();
AbstractCommandLineRunner(PrintStream out, PrintStream  err) { this(System.err); }
AbstractCommandLineRunner( this(System.err)) {
AbstractCommandLineRunner(PrintStream out) { this.runTimeStats = null;
 } ; return new CommandLineRunner ( config, outputCharset, outputCharset, compiler ) { class
AbstractCommandLineRunner( this(System.out, System.err, out) {
 } ; return new CommandLineRunner ( config, outputCharset, outputCharset, outputCharset, compiler ) { class
AbstractCommandLineRunner(PrintStream out, PrintStream err) { this.runTimeStats = stats;
 } ; return new CommandLineRunner ( config, outputCharset, outputCharset, runTimeStats ) { public
AbstractCommandLineRunner(this) {
AbstractCommandLineRunner(PrintStream out,  PrintStream err) { final CommandLineConfig()
AbstractCommandLineRunner(PrintStream ) { this(PrintStream)
AbstractCommandLineRunner(PrintStream out, PrintStream err, String name) {
AbstractCommandLineRunner(PrintStream out,  PrintStream err) { final CommandLineConfig;
 } ; return new CompilerOptions ( config, outputCharset, outputCharset, runTimeStats ) { class
AbstractCommandLineRunner(PrintStream  err) {
 } ; return new CommandLineRunner ( config, outputCharset, outputCharset, compiler ) ; class
 } ; return new CommandLineRunner ( config, outputCharset, outputCharset ) ; } class
 } ; return new CommandLineRunner ( config, outputCharset, outputCharset, outputCharset ) { public
AbstractCommandLineRunner(PrintStream out, PrintStream  err) { this(System.out) {}
 } ; return new CommandLineRunner ( config, outputCharset, outputCharset, runTimeStats, compiler ) { public void
 (OutputStream out, PrintStream err) {
AbstractCommandLineRunner(PrintStream out, PrintStream  err) { this.this = this;
AbstractCommandLineRunner(PrintStream out, PrintStream  err) { this(System.out) {
AbstractCommandLineRunner(PrintStream out) { this.runTimeStats(); }
 } ; return new CommandLineRunner ( config, outputCharset, runTimeStats ) ; } class
 } { this.config = new CommandLineConfig(); this.out = System.out; this.err = System.err; public
 } ; return new CommandLineRunner ( config, outputCharset, outputCharset, runTimeStats ) { public void
AbstractCommandLineRunner() { this(config); }
 } ; return new CommandLineRunner ( config, outputCharset, runTimeStats, compiler, testMode ) ; class
 } ; return new CommandLineRunner ( config, outputCharset, runTimeStats ) { class
 } { this.config = new CommandLineConfig(); this.out = System.out; this.err = System.err; };
 } ; return new CommandLineRunner ( config, outputCharset, outputCharset, runTimeStats, compiler ) { private void
 } ; return new CommandLineRunner ( config, outputCharset, outputCharset ) { class
 } ; return new CommandLineRunner ( config, outputCharset, outputCharset, runTimeStats, compiler ) ; private void
 } ; return new CommandLineRunner ( config, outputCharset, outputCharset, outputCharset ) ; class
AbstractCommandLineRunner(PrintStream out,  PrintStream err) { final CommandLineConfigImpl
AbstractCommandLineRunner(PrintStream out, PrintStream err2) {
AbstractCommandLineRunner(PrintStream  err) { this(System.out);
 } ; return new CompilerOptions ( config, outputCharset, outputCharset, compiler ) { class
AbstractCommandLineRunner() { this(System.err) {}
 } { this.config = new CommandLineConfig(); this.out = System.out; this.err = System.err; class
 } ; return new CommandLineRunner ( config, outputCharset, runTimeStats, compiler ) { class
AbstractCommandLineRunner(PrintStream out, PrintStream err, CommandLineConfig this.config) {
 } ; return new CommandLineRunner ( config, outputCharset, runTimeStats ) ; class
AbstractCommandLineRunner(PrintStream out,  PrintStream err) { private final Configuration
AbstractCommandLineRunner() { this(System.out, err)
 } ; return new CommandLineRunner ( config, outputCharset, runTimeStats, compiler ) ; class
AbstractCommandLineRunner(PrintStream out,  PrintStream err) { private static void
 } ; return new CommandLineRunner ( config, outputCharset, outputCharset ) ; class
AbstractCommandLineRunner(config) {
 } ; return new CompilerOptions ( config, outputCharset, runTimeStats, testMode ) { class
AbstractCommandLineRunner(this, config) {
AbstractCommandLineRunner(PrintStream out,  PrintStream err) { return this; }
 } ; return new CommandLineRunner ( config, outputCharset, outputCharset, runTimeStats, class
AbstractCommandLineRunner() { this(CommandLineConfig) {
AbstractCommandLineRunner(PrintStream out, PrintStream err)  { this(System.out, err) {
AbstractCommandLineRunner(PrintStream out, PrintStream err)  { this(System.out, err) {}
 } { this.config = new CommandLineConfig(); this.out = out; this.err = err; } } else { class
AbstractCommandLineRunner(PrintStream  err) { this(System.err) {}
 } ; return new CompilerOptions ( config, outputCharset, runTimeStats, compiler ) { class
AbstractCommandLineRunner() { this(config);
AbstractCommandLineRunner( this(System.in, System.err) {
 } ; return new CommandLineRunner ( config, outputCharset, outputCharset, compiler ) { public
 public (PrintStream out, PrintStream err) {
AbstractCommandLineRunner(PrintStream out) { final CommandLineConfig config =
AbstractCommandLineRunner(PrintStream out,  PrintStream err) {\ private CommandLineConfig
AbstractCommandLineRunner() { this(CommandLineConfig) {}
AbstractCommandLineRunner(this.config, PrintStream out, PrintStream err) {
AbstractCommandLineRunner(this(System.out), System.err) {
 } ; return new CompilerOptions ( config, outputCharset, runTimeStats ) ; } class
AbstractCommandLineRunner(PrintStream out, PrintStream err)  { this(System.out, err); };
AbstractCommandLineRunner(PrintStream out,  PrintStream err) { private final void
 } ; return new CompilerOptions ( config, outputCharset, runTimeStats ) { class
AbstractCommandLineRunner(PrintStream out,  PrintStream err) { private final Config
 } ; return new CompilerOptions ( config, outputCharset, outputCharset, runTimeStats, class
AbstractCommandLineRunner(PrintStream out, PrintStream err, Appender out) {
AbstractCommandLineRunner(PrintStream out) { this.out = out; }
 } ; return new CommandLineRunner ( config, outputCharset, runTimeStats, compiler ) ; } private void
 if (out&&err) {
AbstractCommandLineRunner(Appendable out, PrintStream out, PrintStream err) {
AbstractCommandLineRunner( this(System, System.out));
AbstractCommandLineRunner(PrintStream ) { this(PrintStream) {} }
 } ; return new CommandLineRunner ( config, outputCharset, outputCharset, runTimeStats, function
AbstractCommandLineRunner(PrintStream ) { this(PrintStream);
 } ; return new CommandLineRunner ( config, outputCharset, outputCharset, runTimeStats ) {
 } ; return new CommandLineRunner ( config, out, err, runTimeStats ) ; } class
 } ; return new CommandLineRunner ( config, outputCharset, runTimeStats ) ; private void
AbstractCommandLineRunner(PrintStream out, PrintStream err, CommandLineConfig newCommandLineConfig) {
AbstractCommandLineRunner(PrintStream out, PrintStream err, InputStream in) {
AbstractCommandLineRunner(PrintStream out, PrintStream err, CmdLineConfig this.config) {
AbstractCommandLineRunner(PrintStream out,  PrintStream err) { static final void
AbstractCommandLineRunner() { this(system.out);
AbstractCommandLineRunner(PrintStream out, PrintStream error=null) {
 public
AbstractCommandLineRunner() { this(CommandLineConfig);
AbstractCommandLineRunner(PrintStream out, PrintStream err, CmdLineConfig config) {
AbstractCommandLineRunner(PrintStream out) { final CommandLineConfig config;
AbstractCommandLineRunner(PrintStream out) { this(System.err);
 } ; return new CommandLineRunner ( config, outputCharset, runTimeStats, compiler ) { public
 } ; return new CompilerOptions ( config, outputCharset, runTimeStats ) ; class
AbstractCommandLineRunner(this.config) {
AbstractCommandLineRunner(PrintStream out, PrintStream err) { this(System.out, err)
AbstractCommandLineRunner(PrintStream out, PrintStream in, err) {
AbstractCommandLineRunner(PrintStream out) { this(out) {
AbstractCommandLineRunner(config config, PrintStream out, PrintStream err) {
AbstractCommandLineRunner(PrintStream out, PrintStream err, AbstractCommandLineConfig config) {
 catch (err) {
AbstractCommandLineRunner(this(System.out, System err) {
AbstractCommandLineRunner() { this(config) {
AbstractCommandLineRunner(CommandLineConfig, PrintStream out, PrintStream err) {
AbstractCommandLineRunner(this.config, CommandLineConfig) {
 public PrintStream out, PrintStream err) {
 class CommandLineRunner(){
AbstractCommandLineRunner(PrintStream out, PrintStream err, RunTimeStats stats) {
AbstractCommandLineRunner(PrintStream out,  PrintStream err) { private void
AbstractCommandLineRunner(PrintStream out, PrintStream err, CommandLineConfig config, A compiler) {
AbstractCommandLineRunner(OutputStream out, PrintStream err) {
 private final CommandLineConfig config;{
AbstractCommandLineRunner(Writer out, PrintStream err) {
(String out, PrintStream err) {
AbstractCommandLineRunner( this(System.out, err)) {}
 public final CommandLineConfig config(){
 function(System.out, PrintStream err) {
AbstractCommandLineRunner(PrintStream out) { final CommandLineConfig();
AbstractCommandLineRunner(PrintStream out, PrintStream err, CommandLineConfig commandLineConfig) {
AbstractCommandLineRunner(PrintStream out) { this(out); }
AbstractCommandLineRunner(PrintStream out, OutputStream err) {
AbstractCommandLineRunner(PrintStream out,  PrintStream err) { return this; };
AbstractCommandLineRunner(this.config, AbstractCommandLineConfig) {
 public void init(out, PrintStream err) {
AbstractCommandLineRunner( this(System.out, err))
 public void configure(PrintStream out, PrintStream err) {
 } class CommandLineRunner(out,err) {
AbstractCommandLineRunner(this.config, new CommandLineConfig) {
AbstractCommandLineRunner(PrintStream out,  PrintStream err) { static void
AbstractCommandLineRunner(PrintStream out, PrintStream err, InputStream input, Compiler compiler) {
AbstractCommandLineRunner(static final CommandLineConfig config) {
 public final CommandLineRunner this(){
AbstractCommandLineRunner(this.config, function(err) {
AbstractCommandLineRunner(this.config, InputStream out, PrintStream err) {
 public final CommandLineRunner(){
 public void init(Stream out, PrintStream err) {
AbstractCommandLineRunner( this(config)) {
 public void configure(Stream out, PrintStream err) {
 public final PrintStream out, PrintStream err) {
 public void setup(Stream out, PrintStream err) {
AbstractCommandLineRunner(PrintStream out, PrintStream err) {}
AbstractCommandLineRunner(PrintStream out) { this(out) {}
AbstractCommandLineRunner(this(System.out, err) {
 private final PrintStream out, PrintStream err) {
AbstractCommandLineRunner() { this(config) {}
 public void setConfig(out, PrintStream err) {
AbstractCommandLineRunner( AbstractCommandLineConfig) {
(System.out System.err) {
 } ; return new CommandLineRunner ( config, runTimeStats, compiler ) ;
 } ; return new CompilerOptions ( ) { private final CommandLineConfig config;
 public void this(out, PrintStream err) {
(Out,err) {
AbstractCommandLineRunner(PrintStream out) { final CommandLineConfig;
 function(out,err) {
 (AbstractCommandLineRunner) {
 private final CommandLineConfig config(){
AbstractCommandLineRunner(PrintStream  output = null) {
AbstractCommandLineRunner( final InputStream in, Writer out, PrintStream err) {
 public void run(PrintStream out, PrintStream err) {
AbstractCommandLineRunner(this.config, CommandLineConfig, PrintStream out, PrintStream err) {
AbstractCommandLineRunner(PrintStream out, PrintStream err, AbstractCommandLineConfig) {
 public static PrintStream out, PrintStream err) {
 (RunTimeStats) {
 } ; private final CommandLineConfig(out,err) {
 } ; return new CompilerOptions ( config, runTimeStats, compiler ) {
AbstractCommandLineRunner(this.config) { if (test) {
 } ; return new CompilerOptions ( config, runTimeStats, compiler ) ;
 } ; return new CommandLineRunner ( config, runTimeStats ) ;
 public void setup(out, PrintStream err) {
AbstractCommandLineRunner( this(System.out));
AbstractCommandLineRunner(PrintStream out, PrintStream err, Config newCommandLineConfig()) {
 public void setup(PrintStream out, PrintStream err) {
 private final PrintStream(out, PrintStream err) {
AbstractCommandLineRunner(PrintStream this.out, PrintStream err) {
 public final CommandLineConfig(){
 } ; return new CommandLineRunner ( config, runTimeStats, compiler ) {
(System.out,err) {
AbstractCommandLineRunner( this(String, PrintStream out, PrintStream err) {
AbstractCommandLineRunner(config, RunTimeStats, PrintStream out, PrintStream err) {
 public void init(PrintStream out, PrintStream err) {
AbstractCommandLineRunner(PrintStream out) { this(err);
AbstractCommandLineRunner this(config) {
 public CommandLineRunner () {
(System, System.err) {
AbstractCommandLineRunner(PrintStreamWriter out, PrintStream err) {
AbstractCommandLineRunner(PrintStream out, PrintStream err, Config newCommandLineConfig) {
 public AbstractCommandLineRunner this(){
 } ; private final CommandLineConfig(System.out, PrintStream err) {
 }; static final CommandLineConfig this.config = new CommandLineConfig(config); static class
 public void run(PrintStream err) {
 } ; } public void enableTestMode ( boolean testMode ) { return testMode ; } class
AbstractCommandLineRunner(PrintStream out, PrintStream err); {
AbstractCommandLineRunner(this.config, System.err) {
(STDOUT out, PrintStream err) {
 public static (PrintStream out, PrintStream err) {
 public void setup(System.out, PrintStream err) {
AbstractCommandLineRunner(PrintStream out, PrintStream err, InputStream inputCharset;) {
 public CommandLineRunner(out,err) {
 } ; return new CommandLineRunner ( config, runTimeStats ) {
 public void init(System.out, PrintStream err) {
AbstractCommandLineRunner(PrintStream out, PrintStream err.*) {
AbstractCommandLineRunner(Appendable config, PrintStream out, PrintStream err) {
 }; static final CommandLineConfig this.config = new CommandLineConfig(config); public void
(Stream out, PrintStream err) {
AbstractCommandLineRunner(PrintStream out,  PrintStream err) { private final
AbstractCommandLineRunner(new CommandLineConfig(config, PrintStream out, PrintStream err) {
AbstractCommandLineRunner(PrintStream out,  PrintStream err) { static final
 } ; private final PrintStream out; private (PrintStream err) {
 public final PrintStream out(err) {
AbstractCommandLineRunner(Appendable out, PrintStream err) {
 } ; return new CommandLineRunner ( this, runTimeStats ) ;
 }; static final CommandLineConfig config = new CommandLineConfig(runTimeStats); class
 }; static final CommandLineConfig config = new CommandLineConfig(runTimeStats); public
 }; static void enableTestMode(Supplier<List<JSSourceFile>)
 } ; } private final CommandLineConfig config = new CommandLineConfig ( ) ; class
 } ; } public void enableTestMode( Supplier<List<JSSourceFile>>
 } ; return new CompilerOptions ( config, runTimeStats ) ;
 } ; return new CompilerOptions ( config, runTimeStats ) {
 } ; } public void enableTestMode( Supplier<List<JSSourceFile>)
AbstractCommandLineRunner(OutputStream this.out, PrintStream err) {
 public final
 }; static final CommandLineConfig this.config = new CommandLineConfig(config); private void
 }; static final CommandLineConfig this.config = new CommandLineConfig(config); static void
 } ; private final PrintStream out(PrintStream err) {
 } class CommandLine (out,err) {
AbstractCommandLineRunner(PrintStream out,  PrintStream err) { private static
AbstractCommandLineRunner(this, Appendable out, PrintStream out, PrintStream err) {
AbstractCommandLineRunner(this(CommandLineConfig) config, PrintStream out, PrintStream err) {
AbstractCommandLineRunner(this, CommandLineConfig config, PrintStream out, PrintStream err) {
 } public void configure(PrintStream out, PrintStream err) {
AbstractCommandLineRunner(PrintStream  output = null); {
 public CommandLineRunner this(){
 static final PrintStream (out, PrintStream err) {
 }else{
 } ; private final CommandLineConfig newCommandLineConfig(...) {
 }; static void enableTestMode(Supplier<List<JSSourceFile>>
AbstractCommandLineRunner(PrintStream out,  PrintStream err) { private
 } ; private final CommandLineConfig this.config;
 public static void configure(PrintStream out, PrintStream err) {
 } ; private final CommandLineConfig newCommandLineConfig ( ) {
 static void init(PrintStream out, PrintStream err) {
AbstractCommandLineRunner(this(CommandLineConfig config, PrintStream out, PrintStream err) {
AbstractCommandLineRunner(Output out, PrintStream err) {
 public final PrintStream (out, PrintStream err) {
 public void configure(System.out, PrintStream err) {
 } ; } public void enableTestMode( Supplier<List<CommandLineConfig>)
AbstractCommandLineRunner( final PrintStream this.out, PrintStream err) {
 }; static void enableTestMode(Supplier<List<CommandLineConfig>)
 public void this(PrintStream err) {
 public void start(PrintStream out, PrintStream err) {
 } private final CommandLineConfig(Stream out, PrintStream err) {
 } ; } private final CommandLineConfig config = new CommandLineConfig ( ) { class
 public final CommandLineRunner this(PrintStream out, PrintStream err) {
 public static void init(PrintStream out, PrintStream err) {
AbstractCommandLineRunner(PrintStream * out, PrintStream err) {
 public static final CommandLineRunner () {
AbstractCommandLineRunner(PrintStream out, error) {
AbstractCommandLineRunner(this.config, CommandLine config, PrintStream out, PrintStream err) {
 } private final PrintStream out(PrintStream err) {
 } ; private final CommandLineConfig config =
 public static CommandLineRunner(){
 public void (PrintStream out, PrintStream err) {
 this(PrintStream out, PrintStream err) {
 void this(out, PrintStream err) {
AbstractCommandLineRunner(PrintStream Out) {
AbstractCommandLineRunner(PrintStream out,  InputStream err) {
AbstractCommandLineRunner(PrintStream commandLineOut, PrintStream err) {
 } ; private final CommandLineConfig newCommandLineConfig = null;
AbstractCommandLineRunner( this(String, String, String, PrintStream err) {
 } ; private final CommandLineConfig(Stream out, PrintStream err) {
 public void configureCommandLineRunner(PrintStream out, PrintStream err) {
AbstractCommandLineRunner(this.config, CommandLineRunner, PrintStream out, PrintStream err) {
 public CommandLineRunner(PrintStream out, PrintStream err) {
AbstractCommandLineRunner(PrintStream out, PrintStream err, ConfigCommandLineConfig) {
 } public void configure(Stream out, PrintStream err) {
 } ; private final CommandLineConfig config(err) {
 } ; private final PrintStream (out,PrintStream err) {
AbstractCommandLineRunner( this(System.out)) {}
 } ; private CommandLineConfig this(out,PrintStream err) {
AbstractCommandLineRunner(this(String, String, String) {
 } ; public CommandLineRunner this(System.out, PrintStream err) {
 } ; return new CommandLineRunner ( runTimeStats ) ;
 } ; return new CommandLineRunner(out,err) {
AbstractCommandLineRunner(this.config);
 public static void this(out, PrintStream err) {
; static final CommandLineConfig this.config =
 public void init(PrintStream err) {
 } ; private final CommandLineConfig newCommandLineConfig();
 public static void init(Stream out, PrintStream err) {
 public CommandLineRunner this(PrintStream out, PrintStream err) {
 static final void this(PrintStream err) {
 } ; private final CommandLineConfig config;
 }; static final CommandLineConfig config = new CommandLineConfig ( ) ; class
 public AbstractCommandLineRunner(){
; private final CommandLineConfig commandLineConfig(){
 public void start(PrintStream err) {
(CommandLineConfig) {
 }; static final CommandLineConfig config = new CommandLineConfig ( ) { class
(err) {
AbstractCommandLineRunner(String out, PrintStream err) {
 } ; private final CommandLineConfig this.config =
 public static final PrintStream out(err) {
AbstractCommandLineRunner(PrintStream out, PrintStream err, AbstractCompiler compiler) {
 public void enableCommandLineRunner(PrintStream out, PrintStream err) {
 } private final PrintStream this(out, PrintStream err) {
AbstractCommandLineRunner(commandLineConfig) {
 } ; private final CommandLineConfig config = null ; private final
 } ; return new CommandLineRunner ( runTimeStats ) {
; static final CommandLineConfig this.config(){
AbstractCommandLineRunner(new CommandLineConfig(config) {
; static final CommandLineConfig this.config;
 } ; return new CommandLineRunner ( config, runTimeStats, compiler ) ; }
 } ; return new CommandLineRunner ( config, compiler ) ;
AbstractCommandLineRunner(static final CommandLineConfig) {
AbstractCommandLineRunner(PrintStream config out, PrintStream err) {
 public final PrintStream out(PrintStream err) {
 } private final CommandLineRunner this(PrintStream out, PrintStream err) {
 } private final CommandLineConfig this(out, PrintStream err) {
 static final void init(err) {
 } ; private final CommandLineConfig this(out, PrintStream err) {
 } ; private final CommandLineConfig(out, PrintStream err) {
AbstractCommandLineRunner(new CommandLineRunner(config, PrintStream out, PrintStream err) {
AbstractCommandLineRunner(this).config();
AbstractCommandLineRunner(this, new CommandLineConfig config, PrintStream out, PrintStream err) {
 } ; private final CommandLineRunner this(PrintStream out, PrintStream err) {
AbstractCommandLineRunner(new CommandLineConfig()) {
(System.out, *err) {
 public final CommandLineConfig(Stream out, PrintStream err) {
 }; static final CommandLineConfig config = new CommandLineConfig ( ) { public
 } ; private final CommandLineConfig(config){
; private final CommandLineConfig this.config(){
AbstractCommandLineRunner( final InputStream in, out, PrintStream err) {
 private final void init(){
 } ; private final PrintStream config; private (PrintStream err) {
; private final CommandLineConfig(config){
 }; static final CommandLineConfig config = new CommandLineConfig(config); public
 } ; return new CommandLineRunner ( config, compiler ) {
 } ; return new CompilerOptions ( config, runTimeStats, compiler ) ; }
AbstractCommandLineRunner(PrintStream out, PrintStream err)  { this(System) {
 } class CommandLineConfig(out,err) {
 public void this(PrintStream out, PrintStream err) {
AbstractCommandLineRunner(PrintStream  output) {
 } ; private final CommandLineConfig config = null ; private class
 } public void configure(System.out, PrintStream err) {
 }; static final CommandLineConfig config = new CommandLineConfig(config); class
AbstractCommandLineRunner() { this(config)
 public final CommandLineRunner(Stream out, PrintStream err) {
AbstractCommandLineRunner( this, runTimeStats ); {
 } ; private final PrintStream out(err) {
 } ; private CommandLineConfig this(Out,PrintStream err) {
 public final CommandLineRunner (() {
 } ; public CommandLineRunner(System.out, PrintStream err) {
AbstractCommandLineRunner(PrintStream  out, err) {}
 } ; private final CommandLineConfig this.config; public
 public void configureCommandLine(PrintStream out, PrintStream err) {
 } ; private final CommandLineRunner(System.out, PrintStream err) {
 public void start ( ){
; static final CommandLineConfig this = this;
 } ; } public void enableTestMode ( boolean testMode ) { class
 } ; public CommandLineRunner(out,err) {
AbstractCommandLineRunner(config, CommandLineConfig, PrintStream out, PrintStream err) {
 public final PrintStream (out,err) {
 static void this(PrintStream out, PrintStream err) {
AbstractCommandLineRunner(PrintStream out, PrintStream err, Config <? > config) {
 } public void setConfig(out, PrintStream err) {
 } ; private final CommandLineConfig configureTestMode(PrintStream out, PrintStream err) {
 } private final PrintStream (out,PrintStream err) {
 public static void setConfig(out, PrintStream err) {
 } ; private final CommandLineOutput(out,err) {
 } ; private AbstractCommandLineRunner this(){
 public final void init(err) {
AbstractCommandLineRunner( this(System.err));
 (CommandLineRunner) {
AbstractCommandLineRunner(this.config, function()) {
 } ; public final CommandLineConfig config =
 } ; private final CommandLineConfig configure(out, PrintStream err) {
 public final void configureCommandLine(PrintStream out, PrintStream err) {
 } public void init(System.out, PrintStream err) {
 public static final CommandLineRunner (() {
 } ; private final PrintStream this(out, PrintStream err) {
 } ; private final CommandLineConfig(Out,err) {
 } ; private final CommandLineConfig config(out, PrintStream err) {
 }; static final CommandLineConfig config = new CommandLineConfig(); public void
AbstractCommandLineRunner(this(String commandLineName, PrintStream err) {
 public void init(out,err) {
AbstractCommandLineRunner(this).config);
 } ; public CommandLineRunner this(Stream out, PrintStream err) {
 static final void (PrintStream err) {
(System.out, (err) {
AbstractCommandLineRunner(int numRUNs, PrintStream out, PrintStream err) {
 private CommandLineRunner(PrintStream out, PrintStream err) {
 Override(PrintStream out, PrintStream err) {
 } private final CommandLineConfig config;{
 }; static final CommandLineConfig config = new CommandLineConfig(); private final
(System.err) {
 } ; private final CommandLineConfig config;{
AbstractCommandLineRunner(PrintStream out, PrintStream err, CmdLineConfig configs) {
 }; static final CommandLineConfig config = new CommandLineConfig(); private void
 } ; private final CommandLineConfig this.config; private
 } private final CommandLineConfig config(){
 } ; private final CommandLineConfig out(err) {
 } public static final CommandLineRunner () {
 } ; private final CommandLineConfig(OutputStreamout, PrintStream err) {
 } ; public CommandLineConfig(out,err) {
 } ; private final CommandLineConfig config = null ; private void
 public void
AbstractCommandLineRunner(AbstractCommandLine config) {
 } private final CommandLineConfig config(out, PrintStream err) {
 } ; return new CommandLineRunner ( config, runTimeStats ) ; }
AbstractCommandLineRunner(this.config, function() {
 public final CommandLineConfig out(err) {
 } ; final CommandLineConfig this = this;{
 }; static final CommandLineConfig config = new CommandLineConfig(); public
; static final CommandLineConfig(config){
 public (out, PrintStream err) {
 } private final CommandLineConfig config) {
 } ; private final CommandLineConfig this.config; class
 static final CommandLineConfig config) {
 } ; private void enableCommandLineRunner(PrintStream out, PrintStream err) {
 static final CommandLineRunner () {
 } private final CommandLineOutput this(out, PrintStream err) {
AbstractCommandLineRunner(this, InputStream * out, PrintStream err) {
; private final CommandLineConfig config;{
; private final CommandLineConfig config(){
 } ; private final CommandLineConfig newConfig() {
 public CommandLineRunner (() {
 public static void init(err) {
 } private final CommandLineConfig () {
 public void setConfig(PrintStream out, PrintStream err) {
 } ; private final CommandLineConfig config = null ; class
AbstractCommandLineRunner(new CommandLineRunner()) {
AbstractCommandLineRunner(this, CommandLineConfig) {
 } ; private final CommandLineConfigCommandLineConfig) {
 public void setup() (PrintStream out, PrintStream err) {
 public void init ( ){
(Output out,err) {
 } ; private final CommandLineOutput this(out, PrintStream err) {
 } ; private final CommandLineConfig this.config = new
 public void start() (PrintStream out, PrintStream err) {
 } ; private final PrintStream out, (PrintStream err) {
AbstractCommandLineRunner(appendable out, PrintStream out, PrintStream err) {
AbstractCommandLineRunner(PrintStream out,  PrintStream err) {} {
(System, err) {
 } ; private final CommandLineConfig newCommandLineConfig;
 } ; private final CommandLineRunner configureTestMode(PrintStream out, PrintStream err) {
 } ; private final CommandLineConfig config = config ; private class
 static final void init(PrintStream err) {
 } ; return new CompilerOptions ( config, runTimeStats ) ; }
 }; static final CommandLineConfig config = new CommandLineConfig() {
 public final void configureTestMode(PrintStream out, PrintStream err) {
 } ; private final CommandLineConfig commandLineConfig(PrintStream out, PrintStream err) {
 } class CommandLineRunner(.out, PrintStream err) {
 } ; } private final CommandLineConfig config = null ; private final
 }. <DC> public void this(PrintStream out, PrintStream err) {
 } ; private void enableTestMode(PrintStream out, PrintStream err) {
 public void (out, PrintStream err) {
 } ; private final CommandLineConfig () {
 } ; private final CommandLineConfig config = null ; public final
 } ; private final CommandLineConfig createConfig() {
 } ; private final CommandLineConfig newCommandLineConfig =
 } ; final CommandLineRunner this = function(PrintStream out, PrintStream err) {
AbstractCommandLineRunner(appendable app, PrintStream out, PrintStream err) {
 } ; private final CommandLineConfig createConfig(PrintStream out, PrintStream err) {
 } ; return new CommandLineRunner ( this, runTimeStats ) ; }
 } private final void this(PrintStream err) {
 } ; private final PrintStream out, finalPrintStream err) {
 public Override public
 } private final CommandLineConfig config.{
 } ; } private final CommandLineConfig config = null ; private class
AbstractCommandLineRunner(this, System.err) {
AbstractCommandLineRunner(PrintStream out = null) {
 }; static final CommandLineConfig this.config = null; public
 public void (PrintStream err) {
(...) {
AbstractCommandLineRunner(PrintStream out, Print err) {
 } ; private final void configureTestMode(PrintStream out, PrintStream err) {
 } ; private void configureTestMode(PrintStream out, PrintStream err) {
 } ; private final void enableTestMode(PrintStream out, PrintStream err) {
AbstractCommandLineRunner(this).config;
 function this(out, PrintStream err) {
 } ; private final PrintStream output; (PrintStream err) {
AbstractCommandLineRunner(PrintStream out, PrintStream err, CommandLineConfig configs) {
 } ; private final CommandLineConfig this.config();
; static final CommandLineConfig this.config();
 } ; private final void this(PrintStream err) {
 } private final void configureTestMode(PrintStream out, PrintStream err) {
AbstractCommandLineRunner(config, Appender out, PrintStream out, PrintStream err) {
 } ; public final CommandLineConfig config;
 } ; private final CommandLineRunner doRun(PrintStream out, PrintStream err) {
 } ; private final CommandLineConfig config) {
 } ; private static final CommandLineConfig () {
 } ; final CommandLineConfig this = function(PrintStream out, PrintStream err) {
AbstractCommandLineRunner(PrintStream this, out, PrintStream err) {
 } ; public static final CommandLineConfig () {
 public (PrintStream err) {
 public void run(){
 } ; private final CommandLineConfig newCommandLineConfig(...) {}
 }; static final CommandLineConfig this.config = null; class
 }. <DC> public void setup(PrintStream out, PrintStream err) {
 } private final PrintStream out, finalPrintStream err) {
 } ; private final CommandLineConfig createConfig(() {
 } ; } private final CommandLineConfig config = null ; private void
 } ; public static final CommandLineRunner () {
 } ; private final CommandLineConfig config; public
 } ; private final CommandLineConfig newCommandLineConfig {
 } ; private final CommandLineConfig (() {
AbstractCommandLineRunner(PrintStream commandLineConfig, PrintStream err) {
 } public static final CommandLineRunner (() {
 public PrintStream setOutput(PrintStream err) {
AbstractCommandLineRunner(this.config)
 public void setOutput(PrintStream err) {
 } ; private final CommandLineConfig config(){
 private final void init(PrintStream out, PrintStream err) {
 } ; private final CommandLineConfig config:
AbstractCommandLineRunner(this).config =
 public AbstractCommandLineRunner(PrintStream out, PrintStream err) {
 if (!err) {
 } ; private final CommandLineConfig this.config:
 } ; private final CommandLineConfig config ; private class
 public static CommandLineRunner(PrintStream out, PrintStream err) {
 } ; private void setConfig(PrintStream err) {
 } ; private final void enableCommandLineRunner(PrintStream out, PrintStream err) {
 public final void this(PrintStream err) {
 } private final void init(PrintStream err) {
 } ; private static void enableTestMode(PrintStream out, PrintStream err) {
 } ; private final void init(PrintStream err) {
 } ; private final CommandLineConfig config ; class
 } ; private final CommandLineConfig config ; private final
 } ; private final CommandLineConfig config; private
 } ; final CommandLineConfig config = function(PrintStream out, PrintStream err) {
 public synchronized (PrintStream out, PrintStream err) {
 } ; final CommandLineConfig config = new Configuration(PrintStream out, PrintStream err) {
 } ; private final CommandLineConfig configure() (PrintStream out, PrintStream err) {
AbstractCommandLineRunner(config, CommandLine config, PrintStream out, PrintStream err) {
(this) {
 } ; private final CommandLineConfig newCommandLineConfig()
 } class CommandLineRunner(...out, PrintStream err) {
AbstractCommandLineRunner( this, config ) ;
 private final
AbstractCommandLineRunner(Appender out, PrintStream out, PrintStream err) {
 public final void setConfig(PrintStream out, PrintStream err) {
 public static void this(PrintStream err) {
 synchronized (out, PrintStream err) {
 } ; private final CommandLineRunner = new
 public static void setConfig(PrintStream out, PrintStream err) {
 } ; private final PrintStream this.(out, PrintStream err) {
 } ; final CommandLineRunner this = this(PrintStream out, PrintStream err) {
 public static final void
 (TestMode) {
 } ; private final CommandLineConfig commandLineRunner(PrintStream out, PrintStream err) {
 if (test) {
 public final void setup() (PrintStream out, PrintStream err) {
 synchronized (PrintStream err) {
 function(out, PrintStream err) {
 } ; private final AbstractCommandLineRunner this; public
 } ; private void enableTestMode() void
 } private final CommandLineConfig this(PrintStream out, PrintStream err) {
AbstractCommandLineRunner(Output out) {
AbstractCommandLineRunner(PrintStream out = null);
AbstractCommandLineRunner(Appender app, PrintStream out, PrintStream err) {
 } ; private final CommandLineConfig config ; private void
 }; static final CommandLineConfig this = new static { }
 } ; private void enableTestMode(); public
 } ; public void enableTestMode() void
 } ; private final CommandLineRunner extends
 if (out, PrintStream err) {
AbstractCommandLineRunner(PrintStream  out, err); {
 } ; private final CommandLineRunner class
 } ; private final AbstractCommandLineRunner this; class
AbstractCommandLineRunner(PrintStream out = null); {
 } ; private final CommandLineRunner new
 } ; private void enableTestMode(); void
 catch (PrintStream err) {
AbstractCommandLineRunner(PrintStream out, boolean err) {
 public final void
AbstractCommandLineRunner(ConfigConfig config, PrintStream out, PrintStream err) {
 private (PrintStream out, PrintStream err) {
AbstractCommandLineRunner(Runner runner) {
 } ; private final CommandLineRunner implements
AbstractCommandLineRunner(PrintStream  out, err):
 public static void this(PrintStream out, PrintStream err) {
 public synchronized (PrintStream err) {
AbstractCommandLineRunner(InputStream out, PrintStream err) {
 } ; final void enableTestMode(PrintStream out, PrintStream err) {
 public void start(); public
 } ; private final CommandLineRunner public
(config) {
AbstractCommandLineRunner(PrintStream out, PrintStream  err):
 public final (PrintStream err) {
 public void start() public
 } private void enableTestMode(PrintStream out, PrintStream err) {
 public void setup(){
 void init(PrintStream err) {
AbstractCommandLineRunner(PrintStream  out) {}
 } ; final CommandLineRunner = function(PrintStream out, PrintStream err) {
AbstractCommandLineRunner(Configuration config, PrintStream out, PrintStream err) {
 void this(PrintStream out, PrintStream err) {
 static final void(){
()(PrintStream err) {
(Object config) {
 public static void run(PrintStream out, PrintStream err) {
 class
 public this(PrintStream out, PrintStream err) {
 public void init(); public
AbstractCommandLineRunner(PrintStream  out) { private
AbstractCommandLineRunner(PrintStream ) {}
AbstractCommandLineRunner(this) {}
 public void start() throws
AbstractCommandLineRunner(PrintStream out,  PrintStream err); { private
(out|err) {
AbstractCommandLineRunner(PrintStream out,  Err) {
 public Override protected
 } ; private CommandLineRunner new
 } ; private final CommandLineRunner
 public static void setUp(PrintStream out, PrintStream err) {
 } ; public static void setConfig(PrintStream out, PrintStream err) {
 public static void
 private void
 public class
AbstractCommandLineRunner(STDOUT out, PrintStream err) {
 Override () {
 } ; <DC> public
 }. <DC> public
 } ; private CommandLineRunner class
AbstractCommandLineRunner(Object config) {
 } ; private Class < A >
 if (testing) {
()(PrintStream out, PrintStream err) {
 } ; private CommandLineRunner extends
 }. <DC> function
 synchronized (PrintStream out, PrintStream err) {
AbstractCommandLineRunner(PrintStream out,  OutputStream err) { private
(Out, PrintStream err) {
 }. <DC> void
AbstractCommandLineRunner(...) {}
 public void init(); private
 public final static void
 } ; <DC> function
 } ; private final void configureConsole(PrintStream out, PrintStream err) {
AbstractCommandLineRunner(PrintStream out,  InputStream err) { {
AbstractCommandLineRunner(config) {}
 void run(PrintStream out, PrintStream err) {
AbstractCommandLineRunner() {}
 } private final void setConfig(PrintStream out, PrintStream err) {
AbstractCommandLineRunner(this);
 public Override void
AbstractCommandLineRunner() { private
 } private final void setupConsole(PrintStream out, PrintStream err) {
AbstractCommandLineRunner(String command) {
 } ; private void setupConsole(PrintStream out, PrintStream err) {
 } private void
 } private final void configureConsole(PrintStream out, PrintStream err) {
AbstractCommandLineRunner(PrintStream out, PrintStream  err): {
((out, PrintStream err) {
AbstractCommandLineRunner(PrintStream out, PrintStream  err)) {
AbstractCommandLineRunner(PrintStream ...) {
 public static final
AbstractCommandLineRunner(String name) {
AbstractCommandLineRunner(PrintStream  out);
AbstractCommandLineRunner(PrintStream out); {
 static }else{
AbstractCommandLineRunner(StringBuilder out, PrintStream err) {
AbstractCommandLineRunner(PrintStream out, PrintStream out) {
 } private class
AbstractCommandLineRunner(PrintStream out, PrintStream  err) {\ private
 static final else{
AbstractCommandLineRunner(PrintStream out, PrintStream  err) {\};
AbstractCommandLineRunner(String name, PrintStream out, PrintStream err) {
AbstractCommandLineRunner(PrintStream out, PrintStream  err {
AbstractCommandLineRunner(PrintStream out, PrintStream in) {
AbstractCommandLineRunner(out) {
; } else{
 private
AbstractCommandLineRunner(Config, PrintStream out, PrintStream err) {
AbstractCommandLineRunner(PrintStream out)) {
 static final #{
AbstractCommandLineRunner(PrintStream out, PrintStream err, options) {
AbstractCommandLineRunner(this, PrintStream out, PrintStream err) {
 } finally{
 function
AbstractCommandLineRunnerImpl {
AbstractCommandLineRunner(Out, PrintStream err) {
AbstractCommandLineRunner(Config) {
AbstractCommandLineRunner(PrintStream out, PrintStream err, compiler) {
()->{
()else{
AbstractCommandLineRunnerImpl()
AbstractCommandLineRunner(PrintStream out, PrintStream err, configuration) {
 super(PrintStream out, PrintStream err) {
 static(PrintStream out, PrintStream err) {
AbstractCommandLineRunner(PrintStream out, PrintStream err,...) {
AbstractCommandLineRunner(app, PrintStream out, PrintStream err) {
AbstractCommandLineRunner(Output, PrintStream err) {
AbstractCommandLineRunner(in, PrintStream err) {
AbstractCommandLineRunner(PrintStream out, out) {
