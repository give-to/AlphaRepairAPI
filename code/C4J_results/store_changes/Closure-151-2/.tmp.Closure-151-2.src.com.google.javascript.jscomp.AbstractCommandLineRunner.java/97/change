private Supplier<List<JSSourceFile>> externsSupplierForTesting = null;
private Supplier<List<JSSourceFile>>  externsSupplier;
private Supplier<List<JSSourceFile> externsSupplier = null;
private Supplier<List<JSSourceFile>>  externsSupplier = null;
 private List<JSSourceFile>> externsSupplierForTesting = null;
private Supplier<List<JSSourceFile> externsSupplier;
 private Supplier<JSSourceFile>> externsSupplierForTesting = null;
 List<JSSourceFile>> externsSupplierForTesting = null;
 private Supplier<String>> externsSupplierForTesting = null;
 private Supplier<List<String>> externsSupplierForTesting = null;
 private supplier<List<JSSourceFile>> externsSupplierForTesting = null;
private Supplier<List<JSSourceFile>> externs;
 private Supplier<String>externsSupplierForTesting = null;
 private Supplier<List<JSSourceFile> externsSupplierForTesting = null;
private Supplier<List<String>> externs;
 private Supplier<List<JSSourceFile>> modulesSupplierForTesting = null;
private Supplier supplier;
 private Supplier<>externsSupplierForTesting = null;
private Supplier<List<JSSourceFile>> externsSupplierForTesting =  null; private boolean modulesSupplier = false;
 private Supplier<List<JSSourceFile>> inputsSupplierForTesting = null;
 private Supplier<String, String> externsSupplierForTesting = null;
 private Supplier<externsSupplierForTesting = null;
 private Supplier<List<JSSourceFile>> sourcesSupplierForTesting = null;
 private Supplier<>> externsSupplierForTesting = null;
 private SupplierList<JSSourceFile>> externsSupplierForTesting = null;
private Supplier<List<JSSourceFile>>;
 private Supplier<List<JSSourceFile>> inputSupplierForTesting = null;
private Supplier<List<JSSourceFile>> externsSupplierForTesting  = null; private boolean testMode;
private Supplier<List<String>> externsSupplier;
 private Supplier<List<Extern>> externsSupplierForTesting = null;
 private Supplier>> externsSupplierForTesting = null;
private Supplier<List<JSSourceFile>> externsSupplierForTesting  = null; private PrintStream out = null;
private Supplier<List<JSSourceFile>> externsSupplierForTesting  = null; private boolean debug = false;
private SupplierExternsSupplier;
 private Supplier<List<ExternFile>> externsSupplierForTesting = null;
private Supplier<List<JSSourceFile>> externsSupplierForTesting  = null; private String outputCharset;
 private Supplier<List<JSSourceFile>> sourcesSupplier = null;
 public Supplier<List<JSSourceFile>> externsSupplierForTesting = null;
 private Supplier<List<ExecutableFile>> externsSupplierForTesting = null;
private SupplierSupplier;
 private Supplier<List<JSModule>> modulesSupplierForTesting = null;
 private Supplier<List<ExternalFile>> externsSupplierForTesting = null;
private Supplier externsSupplier
 private Supplier<List<JSSourceFile>> filesSupplier = null;
 private Supplier<PrintStream> out=null;
private Supplier<List<JSSourceFile>> externsSupplierForTesting  = null; private PrintStream err = null;
 private ArrayList<JSSourceFile>> externsSupplierForTesting = null;
private Supplier<List<JSSourceFile>>  externsSupplier = nullForTesting;
 private Supplier<List<JSSourceFile>> externsSupplier = null; private boolean testMode;
private Supplier externsSupplier;
private Supplier<List<String, String>> externsSupplier;
private Supplier<List<Externs>> externsSupplier;
private Supplier<List<JSSourceFile>> externsSupplierForTesting =  null; private boolean modulesSupplier = true;
 private Supplier<List<List<JSSourceFile>> externsSupplierForTesting = null;
 private Supplier<String, String> config= null;
 private Supplier<List<JSSource>>externsSupplierForTesting = null;
 private Supplier<List<Extension>> externsSupplierForTesting = null;
 private Supplier<List<JSSourceFile>> modulesSupplierForTesting = null; private boolean testMode;
 private Supplier<List<JSSourceFile>> modulesSupplier = null; private Supplier<JSModule> modulesSupplier;
 private String outputCharset= null;
 private Supplier<List<JSSourceFile>> inputSupplier = null;
private Supplier<List<JSSourceFile>> externalSupplier;
 private Supplier<List<JSSourceFile>> inputsSupplier = null;
private Supplier<List> externs;
 private Supplier<?> externsSupplierForTesting = null;
private Supplier<List<JSSourceFile> externs;
 private PrintStream out = System.out;
 private Supplier<List<JSSrcFile>> externsSupplierForTesting = null;
private SupplierExternsSupplier = null;
private Supplier<List<String, String>> externs;
 private Supplier<List<JSSourceFile>> modulesSupplierForTesting = null; private testMode;
 private Supplier<List<JSSourceFile>> sourcesSupplierForTesting = null; private boolean testMode;
 private Supplier<List<JSSourceFile>> externsSupplier = null; private String modulesSupplier;
 public Supplier<List<JSSourceFile> externsSupplierForTesting = null;
private Supplier<List<JSSourceFile>> externsSupplierForTesting = null; private Supplier <System> = null;
 private Supplier<PrintStream> System.out;
 private Supplier<<JSSourceFile>> externsSupplierForTesting = null;
private Supplier<List<JSSourceFile>> externsSupplierForTesting  = null; private String modules = null;
private Supplier<List<JSSourceFile> externsSupplier = nullForTesting;
 private Supplier externs= null;
private Supplier<List<JSSourceFile>> externsSupplierForTesting  = null; private boolean tests = false;
 private Supplier<CommandLineConfig>externsSupplierForTesting = null;
 private List<String>> externsSupplierForTesting = null;
 private Supplier<List<JSSourceFile>> externsSupplier = null; private testMode;
 private Supplier<List<JSModule>> modulesSupplierForTesting = null; private boolean testMode;
 private Supplier<List<JSSourceFile>> sourcesSupplier = null; private boolean modulesSupplier = false;
 private OutputStream outputStream = non-null;
 private Supplier<List<JSSourceFile>> srcsSupplierForTesting = null; private boolean modulesSupplier = false;
 private Supplier<List<JModule>>externsSupplierForTesting = null;
 private Supplier<String, String>> externsSupplierForTesting = null;
 private String externsSupplier=null;
 private Supplier<List<JSHort>> externsSupplierForTesting = null;
 private Supplier<List<CommandLine>> externsSupplierForTesting = null;
 private Supplier<List<Module>> externsSupplierForTesting = null;
 private Supplier<List<JSSourceFile>> externsSupplier = null; private boolean tests = false;
private Supplier<List<JSSourceFile>> externsSupplierForTesting  = null; private boolean debug = true;
 private Supplier<List<JSSourceFile>> modulesSupplier = null; private Supplier<JSModule> modulesProvider = null;
 static class AbstractCommandLineRunner() { this(System.out, System.err);
 private Supplier<List<JSSourceFile>> externsSupplier = null; private boolean testMode();
 private Supplier<List<CommandLineFile>> externsSupplierForTesting = null;
 private Supplier<List<Externs>> externsSupplierForTesting = null;
 static class AbstractCommandLineRunner() { this(System.out, System.err); }
 private PrintStream out = non-null;
 static class AbstractCommandLineRunner() { this(System.out, System.err, testMode); }
 private Supplier<List<JSSourceFile>> modulesSupplierForTesting = null; private boolean debug = false;
 private?> externsSupplierForTesting = null;
 private Supplier<List<JSModule>> modulesSupplierForTesting;
 private Supplier<List<JSSourceFile>> modulesSupplierForTesting = null; private boolean testMode();
 private Supplier<List<File>> externsSupplierForTesting = null;
private Supplier<List<JSSourceFile>>  externsSupplier = nullFor testing;
 private Supplier<List<JSSourceFile>> modulesSupplierForTesting = null; static testMode;
 private Supplier<List<JSSourceFile>> sourcesSupplierForTesting = null; private testMode;
 private Supplier<String> externs= null;
 private Supplier<List<JSSourceFile>> externsSupplierSupplier = null; private testMode;
 private Supplier<List<JSSourceFile>> modulesSupplierForTesting = null; public boolean testMode;
 private Supplier<List<JSModule>>externsSupplierForTesting = null;
private Supplier<String, String> externsSupplier;
 private Supplier<List<string>> externsSupplierForTesting = null;
 private Supplier<List<JSSourceFile>> modulesSupplier = null; private Supplier<JSModule> moduleSupplier;
 private Supplier<PrintStream> out *= null;
private Supplier<List<JSSourceFile>> externsSupplierForTesting  = null; public boolean testMode;
 private OutputStream out = non-null;
 private Supplier<String> config= null;
 private Supplier<List<JSSourceFile>> modulesSupplierForTesting = null; private boolean test = true;
 private Supplier<List<JSSourceFile>> sourcesSupplier = null; private boolean modulesSupplier = null;
 private Supplier<List<JSSourceFile>> modulesSupplierForTesting = null; private TestMode;
 private Supplier<List<JSSourceFile>> sourcesSupplierForTesting = null; private boolean testMode();
 private Supplier<List<JSSourceFile>> modulesSupplierForTesting = null; private boolean debugMode = false;
 private Supplier<List<JSSourceFile>> modulesSupplierForTesting = null; private boolean test = false;
 private Supplier<List<JSSourceFile>> srcsSupplierForTesting = null; private boolean modulesSupplier = null;
 private Supplier<List<JSSource>externsSupplierForTesting = null;
 private Supplier<List<JSSourceFile>> externsSupplier = null ; private boolean test;
 private Supplier<List<JSSourceFile>> srcsSupplierForTesting = null; private Supplier <System> = null;
 private Supplier<JSSourceFile> sourcesSupplier = null;
 private boolean externs = false;
private Supplier<List<JSSourceFile>> externsSupplierForTesting  = null; private boolean testMode();
 private Supplier<Extern>> externsSupplierForTesting = null;
 private Supplier<List<Executable>> externsSupplierForTesting = null;
 private Supplier<List<JSSourceFile>> sourcesSupplierForTesting = null; static testMode;
 private Supplier<List<JSModule>> modulesSupplier = null;
private Supplier<List<JSSourceFile>> externsSupplierForTesting  = null; private boolean testing = false;
 private Supplier<System.err> err=null;
 private Supplier<Object> config= null;
 private Supplier<List<JSSourceFile>> modulesSupplierForTesting = null; private String outputCharset;
 private Supplier<ExternalModule>> externsSupplierForTesting = null;
 private Supplier<List<JSSrcFile> externsSupplierForTesting = null;
 private Supplier<List<JSModule>> modulesSupplierForTesting = null; private boolean testMode();
 private Supplier<List<JSFile>> externsSupplierForTesting = null;
 private Supplier<PrintStream out = non-null;
 private <B> externsSupplierForTesting = null;
private Supplier<List<JSSourceFile>> extern;
private Supplier<List<JSSourceFile>> externsSupplierForTesting  = null; private testMode;
private Supplier<List<JSSourceFile>> externsSupplierForTesting  = null; static boolean testMode;
private Supplier supplier = null;
 private Supplier<List<JSSourceFile>> externsSupplier = null ; private boolean testing;
 private PrintStream out = null;
 private List<String> externsSupplierForTesting = null;
 private Supplier<String, String> supplier= null;
private Supplier<List<JSSourceFile>> externsSupplier
private Supplier<List<JSSourceFile>> externsSupp;
 private Supplier<String, PrintStream> externsSupplierForTesting = null;
private Supplier<List<JSSourceFile> externsSupplier = nullFor testing;
 private Supplier<List<JSSourceFile>> sourcesSupplier;
 private Supplier<List<JSSourceFile>> modulesSupplierForTesting = null; private boolean testMode = true;
private Supplier<List<Externs> externsSupplier;
 private Supplier<List<Extern> externsSupplierForTesting = null;
 private Supplier<List<JSModule>> modulesSupplier;
 private Supplier _externsSupplierForTesting = null;
 static class AbstractCommandLineRunner(PrintStream out, PrintStream err) {
private Supplier<List<File>> externs;
 private <A> externsSupplierForTesting = null;
 private Supplier<List<String, String> externsSupplierForTesting = null;
 static class AbstractCommandLineRunner() { this(System.out, System.err, testMode); };
 private Supplier<List<String, String>>externsSupplierForTesting = null;
private Supplier<List<Externs>> externalSupplier = null;
 private Supplier<List<JSSourceFile>> modulesSupplierForTesting = null; private boolean debugMode = true;
private Supplier<List<JSSourceFile>> = null;
 private Supplier<String, String> providers= null;
 private Supplier<String, String> outputMap= null;
private  boolean exitCodeReceiver = false;
 private Supplier<PrintStream> out =!null;
 private PrintStream err = non-null;
 private Supplier<List<JSHort> externsSupplierForTesting = null;
 private Supplier<String, List<JSSourceFile>> externsSupplierForTesting = null;
 private String outputCharset;
 private Supplier<List<JSScriptFile>> externsSupplierForTesting = null;
 private Supplier<CommandLineConfig> configs= null;
 private Supplier<List<ExternalFile> externsSupplierForTesting = null;
 private List<JSSourceFile> sourcesSupplier = null;
 private void testMode = true; private Supplier<List<JSSourceFile>> externsSupplierForTesting = null;
 private Supplier<List>externsSupplierForTesting = null;
 private Supplier<Object>externsSupplierForTesting = null;
 private Supplier<List<ExecutableFile> externsSupplierForTesting = null;
 private Supplier<T>externsSupplierForTesting = null;
private Supplier externalSupplier = null;
 private Supplier<Extension>> externsSupplierForTesting = null;
 static class AbstractCommandLineRunner() { this(System.out, System.err); };
 private Supplier<String, Supplier<JSSourceFile>> externsSupplierForTesting = null;
 private Supplier<PrintStream> this=null;
 private Supplier<PrintStream out> non-null;
private Supplier externs;
 private Supplier<List<Extern,JSSourceFile>> externsSupplierForTesting = null;
 private Supplier<System.err> err!= null;
 private Supplier<JSSource>externsSupplierForTesting = null;
 private Supplier<String, String> outputProvider= null;
 private Supplier<PrintStream> err=null;
 private Map<String, String, String, String, String, String, String, String, String, String, String, String>
 private Supplier<ExternalList<JSSourceFile>> externsSupplierForTesting = null;
 private PrintStream err=null;
 private Supplier<Object>> externsSupplierForTesting = null;
 private final Supplier<List<JSSourceFile>> externsSupplierForTesting = null;
 private Supplier<JModule>externsSupplierForTesting = null;
private  PrintStream out = new PrintStream ( ) ;
 private Supplier> externsSupplierForTesting = null;
 private Supplier<String> outputCharset;
 private Supplier<List<JSModule>> modulesSupplierForTesting = null; private boolean testOutput;
 private boolean debugMode = false;
 public Supplier<String, String> externsSupplierForTesting = null;
 private Supplier<String, String> outputFormat= null;
 private Supplier<A> config= null;
 private Supplier<A> externsSupplierForTesting = null;
 static class AbstractCommandLineRunner() { this(System.out, System.err); } static class
 private Map<String, String, String, String, String, String, String, String, String, String, String, String;
 private OutputStream out=null;
 private PrintStream out = null ; private PrintStream err = null ; private testMode ;
 private Supplier<Module>externsSupplierForTesting = null;
 private Supplier<List<JSModule>> modulesSupplierForTesting = null; private boolean testMode++;
private Supplier<List<String> externs;
 private void testMode = true; private supplier<List<JSSourceFile>> externsSupplierForTesting = null;
 private Supplier<String, Object>externsSupplierForTesting = null;
 static class AbstractCommandLineRunner() { this(System.out, System.err); } }
 private Supplier outputSupplier= null;
 private Supplier.externsSupplierForTesting = null;
 private Supplier<List<JSSourceFile>> inputFiles;
 private PrintStream out = null ; private PrintStream err = null ; private TestMode;
 private PrintStream out = null ; private PrintStream err = null ; private void init();
private Supplier<List<JSSourceFile>> externsProvider;
 private Supplier<List<Extension> externsSupplierForTesting = null;
 static class AbstractCommandLineRunner() { this(System.out, System.err); } };
 private Supplier<PrintStream> externsSupplierForTesting = null;
 private PrintStream out = null ; private PrintStream err = null ; private boolean testMode ;
 private Supplier<CommandLine> externsSupplierForTesting = null;
private Supplier<List<>();
 private SupplierExterns= null;
private Supplier<List<JSSourceFile>> sources;
 private Supplier<String> externs;
private Supplier<List<JSSourceFile>> externsSupplierForTesting  = null; static testMode;
private  boolean debug = false;
 private void testMode = true; private Supplier<JSSourceFile>> externsSupplierForTesting = null;
private Supplier<List<JSSourceFile>> exps;
 private PrintStream outputStream = null;
private Supplier<System> System.out;
 private CommandLineRunner this; private Supplier<List<JSSourceFile>> externsSupplierForTesting = null;
 private OutputStream outputStream = null;
 static class AbstractCommandLineRunner() { this(System.out, System.err); } static {
 private Supplier#externsSupplierForTesting = null;
private Supplier<List<String>>;
private Supplier<List<JSSourceFile>> out = null;
 private Supplier<List<JSSourceFile>> modulesSupplier = null; private
private  void main() {
 static class AbstractCommandLineRunner() { this(System.out, err);
 private Supplier<List<JSScriptFile> externsSupplierForTesting = null;
 private final Supplier<String,List<JSSourceFile>> externsSupplierForTesting = null;
 private Supplier<String> out= null;
 private Supplier<String> plugins= null;
 private boolean externs= null;
 private Supplier<ExternalModule>externsSupplierForTesting = null;
 private Supplier<List<JSSourceFile>> externsSupplier = null ; private static final
 private Supplier<List<Extern|JSSourceFile>> externsSupplierForTesting = null;
 private Supplier<ExternalFile>externsSupplierForTesting = null;
 private Supplier<Tuple<JSSourceFile>> externsSupplierForTesting = null;
 private OutputStream err = non-null;
private Supplier<List<JSSourceFile> externalFiles = null;
private Supplier<List<JSSourceFile>> externsSupplierForTesting  = null; private TestMode;
 private Supplier<PrintStream> output=null;
 private Supplier<TestRunner>externsSupplierForTesting = null;
private SupplierExternsSupplier
private Supplier<List<JSSourceFile> = null;
 private Supplier<CommandLineConfig, List<JSSourceFile>> externsSupplierForTesting = null;
 static void testMode = true ; private Supplier<List<JSSourceFile>> externsSupplierForTesting = null;
private Supplier<String, String> externs;
 private Supplier<List<JSSourceFile>> modulesSupplier = null; private Supplier<JSModule> modulesSupplier ; }
 private Supplier<String,?> externsSupplierForTesting = null;
private Supplier<List<JSSourceFile>>  externsSupplier = nullForTesting();
 private Supplier<PrintStream> out==null;
 private Supplier<List<JSSourceFile>> inputsSupplier = null; private
 private Supplier<String> outputBuffer= null;
 private Supplier<PrintStream> printStream;
 private Supplier<Lazy<JSSourceFile>> externsSupplierForTesting = null;
 private Map<String, String, String> map<String, String, String> map<String, String, String> {};
 private Supplier<ExternalFile>> externsSupplierForTesting = null;
private Supplier<List<JSSourceFile>> externsSupplier = null; private
 private Supplier<System> System.out;
 static class AbstractCommandLineRunner() { this(System.out, System); }
private Supplier<List<JSSourceFile>> external = null;
private  boolean exitCodeReceiver = true;
 private CommandLineConfig this; private Supplier<List<JSSourceFile>> externsSupplierForTesting = null;
 static class AbstractCommandLineRunner() { this(System.out, null);
 private Supplier<String> outputProvider= null;
 private Supplier<String> _externsSupplierForTesting = null;
 private Supplier<StringList<JSSourceFile>> externsSupplierForTesting = null;
private Supplier<List<JSSourceFile> externsProvider = null;
 private Supplier<B> externsSupplierForTesting = null;
private Supplier<List<JSSourceFile>>  externsSupplier = nullFor testing.
 private Map<String, String, String> map<String, String, String> map<String, String, String> {} private
 private PrintStream outputCharset;
 private Supplier<List<JSSourceFile>> sourcesSupplier = null; private
 private Supplier<String><List<JSSourceFile>> externsSupplierForTesting = null;
 private Supplier<PrintStream> System.err;
 private PrintStream out; private err=null;
private Supplier<System> system;
 private PrintStream out = (void)null;
 private String err = non-null;
 private Supplier<string>> externsSupplierForTesting = null;
private Supplier externsProvider;
private Supplier<List<JSSourceFile> externsSupplier = nullForTesting();
 private #externsSupplierForTesting = null;
 private void testMode = true;
 private Supplier<List<JSSourceFile>> providers;
 private Supplier<String, String> outputProvider;
 private Optional<String>> externsSupplierForTesting = null;
 static class AbstractCommandLineRunner() { this(System.out, null); }
 private Supplier<String, String> List<JSSourceFile>> externsSupplierForTesting = null;
 private void testMode = true;
 private PrintStream out = new Writer ( );
 private Supplier<List<JSSourceFile>> filesSupplier = null; private
 private Supplier<List<JSSourceFile>> externsSupplier = null ; static
 private Supplier<List<JSSourceFile>> modulesSupplierForTesting = null ; } ;
private Supplier<List<JSSourceFile>>  externSSupplier = null;
private Supplier<List<JSSourceFile> externsSupplier = nullFor testing.
private Supplier<List<JSSourceFile> externsSupplier();
private Supplier<List<External> external = null;
 private PrintStream out = null;;
 private Supplier<List<Exec>> externsSupplierForTesting = null;
 private static Supplier<List<JSSourceFile>> externsSupplierForTesting = null;
 private Set<String>> externsSupplierForTesting = null;
private Supplier<List<JSSourceFile> externalSupplier;
 private Supplier<String> inputProvider= null;
private Supplier<List> config;
 private OutputStream err=null;
private Supplier<List<JSSourceFile>> externsSupplier();
 private Supplier<System> System = null;
 private void testMode = true; privatelier<List<JSSourceFile>> externsSupplierForTesting = null;
 private Supplier<Module>> externsSupplierForTesting = null;
private Supplier<List<String>> plugins;
 private Supplier<Integer>> externsSupplierForTesting = null;
 private Supplier<ProcessFile>> externsSupplierForTesting = null;
 private PrintStream out = (Stream)null;
private Supplier<Exception> exceptionSupplier;
private Supplier<Config> config;
private Supplier<System> systemSupplier;
 static class AbstractCommandLineRunner() { this(System.out) ; }
 private Supplier defaultSupplier= null;
private Supplier<List<JSSourceFile>> externalFiles;
private Supplier<List<JSSourceFile>>  externsProvider = null;
 private Supplier<XList<JSSourceFile>> externsSupplierForTesting = null;
 private <>> externsSupplierForTesting = null;
 private Supplier<string, List<JSSourceFile>> externsSupplierForTesting = null;
private Supplier<List<JSSourceFile> external = null;
private Supplier<List<JSSourceFile>> externsSupplierForTesting  = null; private boolean test;
private Supplier<List<JSSourceFile> out = null;
 private PrintStream out =!null;
 private Supplier[]externsSupplierForTesting = null;
 private Supplier[],externsSupplierForTesting = null;
 private Supplier<PrintStream> super=null;
 private private Supplier<List<JSSourceFile>> externsSupplierForTesting = null;
 private Supplier<JList<JSSourceFile>> externsSupplierForTesting = null;
 private PrintStream output = null;
 private void testMode = true; supplier<List<JSSourceFile>> externsSupplierForTesting = null;
 private Supplier<PrintStream> out = null;
 private String externs= null;
 private final Supplier<String, Supplier<JSSourceFile>> externsSupplierForTesting = null;
 private final Supplier<List<List<JSSourceFile>> externsSupplierForTesting = null;
 private void testMode = true; private List<JSSourceFile>> externsSupplierForTesting = null;
 private OutputStream out =!null;
 private Supplier<String, String> modulesSupplier;
private Supplier<List<JSSourceFile> externSSupplier = null;
 private PrintStream out = null ; private PrintStream err = null ; private static final
 private final Supplier<List<Extern,JSSourceFile>> externsSupplierForTesting = null;
private Supplier<List<JSSourceFile> externalSupplier = null;
 private void setup ( ) { private Supplier<JSSourceFile>> externsSupplierForTesting = null;
 private static private Supplier<List<JSSourceFile>> externsSupplierForTesting = null;
 private <<>> externsSupplierForTesting = null;
private Supplier<List> plugins;
 private PrintStream out, PrintStream err;;
 private Supplier<List<JSModule>> modulesSupplier = null; private
 static class AbstractCommandLineRunner() { this(System.out, System); };
 private Supplier<List<ExternsJSSourceFile>> externsSupplierForTesting = null;
 static class AbstractCommandLineRunner(PrintStream out, PrintStream err) {}
 static Supplier<List<JSSourceFile>> externsSupplierForTesting = null;
private Supplier<List>();
 private Supplier<System> systemSupplier;
 private Supplier<List<JSModule>> modulesSupplierForTesting();
private Supplier out = null;
private Supplier<List<JSSourceFile>> externsSupplierForTesting = null; private Supplier <List<String>();
 private void init ( ) { private Supplier<JSSourceFile>> externsSupplierForTesting = null;
private Supplier externalSupplier;
 private String outputCharset = "";
 static class AbstractCommandLineRunner() { this(System.out, null); };
 private Supplier<String>, List<JSSourceFile>> externsSupplierForTesting = null;
 private final Supplier<PrintStream, List<JSSourceFile>> externsSupplierForTesting = null;
private Supplier<List<External> externalSupplier;
 private boolean test;
 static private Supplier<List<JSSourceFile>> externsSupplierForTesting = null;
 static void testMode = true ; private supplier<List<JSSourceFile>> externsSupplierForTesting = null;
private Supplier<List<String>> modules;
private Supplier<List<JSSourceFile> outputSupplier = null;
private  boolean exitCodeReceiver = null;
private Supplier<List<JSSourceFile>> externsSupplier; private
 private Supplier<List<JSSourceFile>> modulesSupplier; private
private Supplier<List<String>> providers;
private Supplier<List<JSSourceFile> externsSupplier = null; static
 private void setup ( ) { private supplier<List<JSSourceFile>> externsSupplierForTesting = null;
private Supplier<List<JSSourceFile>> externsSupplierForTesting = null; private Supplier <List<String>;
private Supplier<List<File>> files;
private SupplierExternsSupplier();
 private <String>> externsSupplierForTesting = null;
 private boolean test = true;
 private Supplier<String, String> outputMap;
 private boolean debugMode = false; private supplier<List<JSSourceFile>> externsSupplierForTesting = null;
 private String outputChars= null;
 private PrintStream err =!null;
 private String output=null;
 private Optional<String> externsSupplierForTesting = null;
private  boolean testOutput = false;
private Supplier<PrintStream out, PrintStream err>();
 private void setup ( ) { private SupplierList<JSSourceFile>> externsSupplierForTesting = null;
 private static void testMode = true; private supplier<List<JSSourceFile>> externsSupplierForTesting = null;
 private Supplier<List<JSSourceFile>> sourcesSupplier; private
 private Supplier<>, List<JSSourceFile>> externsSupplierForTesting = null;
 private final Supplier<List<Extern|JSSourceFile>> externsSupplierForTesting = null;
private Supplier<PrintStream out, PrintStream err> {
 private boolean debug = false;
 private final Supplier<string, List<JSSourceFile>> externsSupplierForTesting = null;
 private PrintStream outputStream;
 private String outputFile=null;
 private Supplier<List<JSSourceFile>> inputsSupplier; private
 private OutputStream out = _null;
private Supplier<PrintStream out, PrintStream err>;
private Supplier<List> providers;
 private void testMode = true; private InternalSupplier<List<JSSourceFile>> externsSupplierForTesting = null;
private Supplier<List<JSSourceFile>> files;
 private static final Supplier<String,List<JSSourceFile>> externsSupplierForTesting = null;
 private Supplier<List<JSSourceFile>> files = null; private
 private Thread thread=null;
 private boolean exit=null;
 private Supplier<System> System.err;
 private final List<JSSourceFile,List<JSSourceFile>> externsSupplierForTesting = null;
 private void setupTestMode() { private Supplier<JSSourceFile>> externsSupplierForTesting = null;
 private config= null;
 private void testMode = true; private ISupplier<List<JSSourceFile>> externsSupplierForTesting = null;
private SupplierSupplier supplier;
private Supplier<List> sources;
private Supplier<List<JSSourceFile>> externs();
 private Supplier<List<JSSourceFile>> inputFiles();
 private Supplier<PrintStream, List<JSSourceFile>> externsSupplierForTesting = null;
 private boolean debugMode = false; private void main() {
 private Provider.externsSupplierForTesting = null;
 private System.null;
private Supplier<List<JSSourceFile>>  externalSupplier = null;
 private >>>>> externsSupplierForTesting = null;
 private final Supplier1<List<JSSourceFile>> externsSupplierForTesting = null;
 private Supplier<List<JSModule>> modulesSupplier; private
private Supplier<List<JSSourceFile>> providers;
private Supplier<List<JSSourceFile>> externsSupplierForTesting =  null; private String outputCharset; private
private Supplier<List<JSSourceFile>> plugins;
 private boolean test = false;
 private Supplier<List<JSModule>> modulesSupplier();
private Supplier<List<JSSourceFile> output = null;
 private final Supplier<JList<JSSourceFile>> externsSupplierForTesting = null;
 private void testMode = true; private AbstractSupplier<List<JSSourceFile>> externsSupplierForTesting = null;
 private Collection<String> externsSupplierForTesting = null;
 privatelier<List<JSSourceFile>> externsSupplierForTesting = null;
private Supplier config;
private Supplier<List<String>> externsSupplier; private
 private void exit=null;
 private void testMode = false;
private Supplier<List> supplier;
 private Supplier<ProcessFile> externsSupplierForTesting = null;
private Supplier<List<String>> dependencies;
private  boolean debug = true;
 public void main() {
 private boolean debugMode = false; private InternalSupplier<List<JSSourceFile>> externsSupplierForTesting = null;
 private void shutdown = true;
 private void testMode = true; private PrivateSupplier<List<JSSourceFile>> externsSupplierForTesting = null;
private Supplier<String, String> externsSupplier();
 static private Supplier<JSSourceFile>> externsSupplierForTesting = null;
 private final Supplier2<List<JSSourceFile>> externsSupplierForTesting = null;
private Supplier<List<JSSourceFile>> externsSupp,
private Supplier<List<JSSourceFile> plugins;
private Supplier externsSupp;
 private int exitCode;
 private Supplier1<List<JSSourceFile>> externsSupplierForTesting = null;
private  void init ( ) {
private Supplier<System> System = null;
 private static final Supplier<List<JSSourceFile>> externsSupplierForTesting = null;
 private boolean debugMode = false; private boolean debugMode;
private  testMode;
 private <List<JSSourceFile>> externsSupplierForTesting = null;
private Supplier<Object> config;
private SupplierSupplier supplierSupplier;
 private final Supplier<Tuple<JSSourceFile>> externsSupplierForTesting = null;
 private Supplier<Groups<JSSourceFile>> externsSupplierForTesting = null;
private  PrintStream out = new PrintStream ( ) {
 public SupplierList<JSSourceFile>> externsSupplierForTesting = null;
 private SupplierSet<JSSourceFile>> externsSupplierForTesting = null;
 private boolean debug = false; privateSupplier<List<JSSourceFile>> externsSupplierForTesting = null;
private Supplier<List<JSSourceFile> sources;
 private void init ( ) { supplier<List<JSSourceFile>> externsSupplierForTesting = null;
 private Provider<List<JSSourceFile>> externsSupplierForTesting = null;
private Supplier<String> config;
private Supplier<PrintStream out, PrintStream err> {};
 private boolean debug;
private Supplier<List<>;
 private void testMode = true; PrivateSupplier<List<JSSourceFile>> externsSupplierForTesting = null;
private Supplier<System> this;
 private final Supplier<Integer,List<JSSourceFile>> externsSupplierForTesting = null;
 private boolean testing;
 private String externName= null;
 private void main() {
 static void testMode = true ; supplier<List<JSSourceFile>> externsSupplierForTesting = null;
 private Supplier<List<JSSourceFile>> providers();
 private boolean debugMode;
private Supplier<PrintStream out, PrintStream err> {} }
 private void testMode(); private supplier<List<JSSourceFile>> externsSupplierForTesting = null;
 private boolean test=null;
private Supplier<List<JSSourceFile> externsSupplier; }
 private Collection<JSSourceFile>> externsSupplierForTesting = null;
private Supplier<List<JSSourceFile>>
private Supplier<List<JSSourceFile>> externsSupplier ; static
 private static final Supplier1<List<JSSourceFile>> externsSupplierForTesting = null;
 private static final Supplier2<List<JSSourceFile>> externsSupplierForTesting = null;
private Supplier<List<JSSourceFile>> supplier;
 private final SupplierProvider<List<JSSourceFile>> externsSupplierForTesting = null;
 private void _externsSupplierForTesting = null;
 private boolean debug = true;
 private static final Supplier<JList<JSSourceFile>> externsSupplierForTesting = null;
 private String commandName= null;
 public Supplier<JSSourceFile>> externsSupplierForTesting = null;
 public void run() {
 private String outputCharset = '';
private Supplier<PrintStream out, PrintStream err;>
 private static final Supplier<List<List<JSSourceFile>> externsSupplierForTesting = null;
private SupplierExternsSupplier = null; private
 private void setup ( ) { private Factory<List<JSSourceFile>> externsSupplierForTesting = null;
 private boolean testMode;
private Supplier<List<JSSourceFile>>  outSupplier = null;
 non-null;
 private final Supplier<String><List<JSSourceFile>> externsSupplierForTesting = null;
 static void testMode() { privateSupplier<List<JSSourceFile>> externsSupplierForTesting = null;
 private PrintStream out = System.err;
private  void main();
 private boolean testOutput;
 static void testMode = true ; private static privateSupplier<List<JSSourceFile>> externsSupplierForTesting = null;
private  void run() {
private Supplier<null>
private Supplier<List<String>();
private Supplier<List<JSSourceFile>> externsSupplierForTesting  = null; private null;
private Supplier<List<String>>();
 private String outputDir= null;
 private Provider#externsSupplierForTesting = null;
 private void shutdown;
 private boolean debugMode = false; private boolean debugMode();
 private void testMode = true ; private static privateSupplier<List<JSSourceFile>> externsSupplierForTesting = null;
 private Supplier<PrintStream out = null;>
 private Supplier<List.<JSSourceFile>> externsSupplierForTesting = null;
 private void exitCode;
private Supplier<List<String> externs;>
 static void testMode = true ; private static PrivateSupplier<List<JSSourceFile>> externsSupplierForTesting = null;
 private <> externsSupplierForTesting = null;
 private Object _externsSupplierForTesting = null;
private Supplier externsSupplier; private
 private PrintStream out = non=null;
private Supplier<B>
 private static final SupplierProvider<List<JSSourceFile>> externsSupplierForTesting = null;
 private String outputPath= null;
private SupplierExternsSupplier; private
 private boolean debugMode = false; private void main() {}
private Supplier<String, String> externs();
 private String exitCode= null;
 private final Supplier<Gist<JSSourceFile>> externsSupplierForTesting = null;
 private void init(); private Supplier<List<JSSourceFile>> externsSupplierForTesting = null;
 private void testMode = true ; private static PrivateSupplier<List<JSSourceFile>> externsSupplierForTesting = null;
 private <T> externsSupplierForTesting = null;
 private void init() { private supplier<List<JSSourceFile>> externsSupplierForTesting = null;
private Supplier<L>
private SupplierSupplier();
private Supplier<List<JSSourceFile>> externsSupplierForTesting = null; private Supplier <System> = null();
 private List<List<JSSourceFile>> externsSupplierForTesting = null;
private  String outputCharset = null; private
private Supplier<List<String>> externs; private
 private final void testMode; privateSupplier<List<JSSourceFile>> externsSupplierForTesting = null;
 private void main() { privateSupplier<List<JSSourceFile>> externsSupplierForTesting = null;
 static void testMode = true ; private final ISupplier<List<JSSourceFile>> externsSupplierForTesting = null;
 private List<string>> externsSupplierForTesting = null;
 private Factory<List<JSSourceFile>> externsSupplierForTesting = null;
private Supplier<List>;
 private void main;
 private this;
 private <String> externsSupplierForTesting = null;
 private boolean nonnull;
 private void run() {
 private Supplier.<List<JSSourceFile>> externsSupplierForTesting = null;
 private Provider <externsSupplierForTesting = null;
private Supplier<String, String> patternSupplier; private
private Supplier<List<String>;
 private void private Supplier<List<JSSourceFile>> externsSupplierForTesting = null;
private  boolean exitCodeReceiver = false; private
 private String prefix= null;
private Supplier<List<String>>
private Supplier<List<JSSourceFile> providers;
 private String name= null;
 private <?>> externsSupplierForTesting = null;
private  PrintStream out = new PrintStream ( ) {}
private Supplier<List<JSSourceFile>> externs
private Supplier<List<JSSourceFile> externsSupplier ; private
 private final SupplierSupplier<List<JSSourceFile>> externsSupplierForTesting = null;
 private InternalSupplier<List<JSSourceFile>> externsSupplierForTesting = null;
private Supplier<List<JSSourceFile>> externsSupplierForTesting  = null; private static final
private Supplier<List<JSSourceFile> externsSupplier ; static
 private Publisher<List<JSSourceFile>> externsSupplierForTesting = null;
 private String devnull;
private Supplier<List<String>> args = null; private
 private void testMode; privateSupplier<List<JSSourceFile>> externsSupplierForTesting = null;
private Supplier<List<JSSourceFile> extern;
 private void init() { privatelier<List<JSSourceFile>> externsSupplierForTesting = null;
 private final CommandLineConfigSupplier<List<JSSourceFile>> externsSupplierForTesting = null;
 private void testMode(); privateSupplier<List<JSSourceFile>> externsSupplierForTesting = null;
 private final boolean testMode ; privateSupplier<List<JSSourceFile>> externsSupplierForTesting = null;
private Supplier<List<Exception>> exceptions = null; private
 private Supplier<System> System.out; private
 private String command= null;
private Supplier<List<JSSourceFile> externsSupplier = null); static
private Supplier<List<JSSourceFile>>();
 private <Array>> externsSupplierForTesting = null;
private Supplier<List<JSSourceFile>>  externsSupplier = null. private
private  boolean exitCodeReceiver = true; private
private SupplierExternsSupplier = null();
 private <B>> externsSupplierForTesting = null;
private Supplier<PrintStream> out = null; private
 private Supplier.<JSSourceFile>> externsSupplierForTesting = null;
private  String outputCharset = " " ; }
 private String _null;
 private ProcedureList<JSSourceFile>> externsSupplierForTesting = null;
 private static final CommandLineConfigSupplier<List<JSSourceFile>> externsSupplierForTesting = null;
private  void main() {}
 private boolean debug = false; PrivateSupplier<List<JSSourceFile>> externsSupplierForTesting = null;
private Supplier<String> outputCharset; private
private SupplierExternsSupp;
 private synchronized Supplier<List<JSSourceFile>> externsSupplierForTesting = null;
 private void testMode = true; }
private Supplier<List<JSSourceFile> externs; }
private Supplier<List<String>> argsSupplier; private
 private void testMode = testMode ; }
 private void testMode = true();
private Supplier<List<JSSourceFile>>  externsSupplier = {}; private
private Supplier<List<JSSourceFile> externsSupplier = null. };
private Supplier<null;
 private void main();
 private ISupplier<List<JSSourceFile>> externsSupplierForTesting = null;
private Supplier<Config>();
 private SuppList<JSSourceFile>> externsSupplierForTesting = null;
 private Object _null;
private  String outputCharset; private
 private void main() {}
 Collection<JSSourceFile>> externsSupplierForTesting = null;
private  void main()
private Supplier<List<JSSourceFile> modules;
private Supplier<List<JSSourceFile> supplier;
private Supplier<System> System.out; private
private Supplier<List<JSSourceFile>> externsSupplierForTesting  = null; static static final
private  boolean debugMode = false; private
private Supplier<Exception> exceptionSupplier; private
 private AbstractSupplier<List<JSSourceFile>> externsSupplierForTesting = null;
 private static final ISupplier<List<JSSourceFile>> externsSupplierForTesting = null;
private Supplier<List list;
private  void testMode = true; private
 private ProcedureSupplier<List<JSSourceFile>> externsSupplierForTesting = null;
 private AbstractList<JSSourceFile>> externsSupplierForTesting = null;
 private void main() { PrivateSupplier<List<JSSourceFile>> externsSupplierForTesting = null;
 private Optional> externsSupplierForTesting = null;
private SupplierExternsSupplier ; static
private Supplier<List<JSSourceFile>> externsSupplierForTesting  = null; private static;
private  void testMode = true();
 private?>> externsSupplierForTesting = null;
 private ListexternsSupplierForTesting = null;
 private void main() {Supplier<List<JSSourceFile>> externsSupplierForTesting = null;
private  void this();
private Supplier<Exception> exceptionSupplier; static
private Supplier<T>
 private Set<JSSourceFile>> externsSupplierForTesting = null;
 private void testMode = false; }
 private void main()
private  boolean testOutput = false; private
 private List.<JSSourceFile>> externsSupplierForTesting = null;
private Supplier<List<String>> args; private
private  void run() {}
 private static final CompilerSupplier<List<JSSourceFile>> externsSupplierForTesting = null;
private Supplier<List<String>
 private (<> externsSupplierForTesting = null;
private Supplier<System> system = null; static
 private void run();
 private static final ProcedureSupplier<List<JSSourceFile>> externsSupplierForTesting = null;
private Supplier<List<JSSourceFile>> externsSupplierForTesting  = null ; static final
 private CommandLineConfigSupplier<List<JSSourceFile>> externsSupplierForTesting = null;
 static void main()
 Set<JSSourceFile>> externsSupplierForTesting = null;
 public void main() { }
 private final CommandLineRunnerSupplier<List<JSSourceFile>> externsSupplierForTesting = null;
private Supplier<List<String>> names; private
private Supplier<List<JSSourceFile>> externsSupplierForTesting  = null; private
 private ThreadGroup threadGroup = null ; }
 static private SupplierList<JSSourceFile>> externsSupplierForTesting = null;
private  boolean exitCode = false; private
private Supplier<String>();
 private static final InternalSupplier<List<JSSourceFile>> externsSupplierForTesting = null;
 private ProcessorSupplier<List<JSSourceFile>> externsSupplierForTesting = null;
private Supplier<List<String>> dependencies; private
 static void main();
private Supplier<List<String>> output; private
private Supplier<System> System.err; static
 private LexternsSupplierForTesting = null;
private Supplier this;
private Supplier<List<JSSourceFile> out = null; }
private Supplier<Config>;
private Supplier<List<String>> commands; private
private Supplier<List<Integer>
 private final ISupplier<List<JSSourceFile>> externsSupplierForTesting = null;
private Supplier<List<JSSourceFile>> externsSupplierForTesting  = null ; static static
private Supplier<List<JSSourceFile>> externsSupplierForTesting  = [ ] ; static
private Supplier<L>();
private Supplier<ListList;
 private void main() privateSupplier<List<JSSourceFile>> externsSupplierForTesting = null;
 private StringexternsSupplierForTesting = null;
 return true;
private Supplier<List<JSSourceFile>> externsSupplierForTesting  = null ; static
 private static final ConfigSupplier<List<JSSourceFile>> externsSupplierForTesting = null;
 static config= null;
private Supplier<List<JSSourceFile> externalSupplier; }
private Supplier<List<JSSourceFile>;
 private P> externsSupplierForTesting = null;
private Supplier<String>;
 supplier<JSSourceFile>> externsSupplierForTesting = null;
 private options= null;
 private final InternalSupplier<List<JSSourceFile>> externsSupplierForTesting = null;
private Supplier<Config> config; private
 private this= null;
private Supplier<List<JSSourceFile> externs
private Supplier<System> this; private
 private!= null;
 private final ProcedureSupplier<List<JSSourceFile>> externsSupplierForTesting = null;
private Supplier<List> list; private
 private config;
private Supplier<List<JSSourceFile> = null);
private SupplierSupplier
 return false;
private  static final
private Supplier<System> system; private
 private final ProcessorSupplier<List<JSSourceFile>> externsSupplierForTesting = null;
private Supplier<System> System; static
private Supplier<Object> config; private
private Supplier<List> sources; private
private Supplier<List> output; private
 protected #externsSupplierForTesting = null;
private Supplier<List> dependencies; private
private  static {
 static #null;
 public List<JSSourceFile>> externsSupplierForTesting = null;
 protected List<JSSourceFile>> externsSupplierForTesting = null;
 protected <<>> externsSupplierForTesting = null;
private Supplier<List<JSSourceFile>>> externsSupplierForTesting = null;
 private null;
 private Deflier<JSSourceFile>> externsSupplierForTesting = null;
 private Deflier<List<JSSourceFile>> externsSupplierForTesting = null;
private Supplier<List> input; private
 static!null;
private  abstract;
 Private List<JSSourceFile>> externsSupplierForTesting = null;
private Supplier<List<JSSourceFile>> externsSupplierForTesting  = nil;
 private Complier<JSSourceFile>> externsSupplierForTesting = null;
private Supplier<List<JSSourceFile>> externsSupplierForTesting  = null. private
 static *null;
private  abstract };
private Supplier<List<JSSourceFile>> externsSupplierForTesting ; private
private Supplier<List<JSSourceFile>> externsSupplierForTesting = null, private static
 non=null;
private  abstract class
private Supplier<List<JSSourceFile>> externsSupplierForTesting  ; static
private Supplier<List<JSSourceFile>> externsSupplierForTesting =  null);private
 };
private Supplier<List<JSSourceFile>> externsSupplierForTesting =  false;
private Supplier<List<JSSourceFile>> externsSupplierForTesting =  null);
private Supplier<List<JSSourceFile>> externsSupplierForTesting =  null, static
private Supplier<List<JSSourceFile>>, externsSupplierForTesting = null;
 { static
private Supplier<List<JSSourceFile>> externsSupplierForTesting . private
private Supplier<List<JSSourceFile>> externsSupplierForTesting , static
private Supplier<List<JSSourceFile[]> externsSupplierForTesting = null;
 static
 }
private Supplier<ListOfJSSourceFile>> externsSupplierForTesting = null;
private Supplier(List<JSSourceFile>> externsSupplierForTesting = null;
private Supplier<List<JSSourceFile>> externsSupplierForTesting == null;
private Supplier<List<JSSourceFile>> externsSupplierForTesting := null;
private Supplier<List<JSSourceFile>> externsSupplierForTesting, null;
