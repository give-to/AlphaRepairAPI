return createRecordTypeFromNodesInternal(
return  createFromTypeNodesInternal(
return  createFromTypeNodes(
return  create(
return createRecordTypeFromNodesInternal(createFromTypeNodesInternal(
 createFromTypeNodes(
 createDefaultObjectUnion(
 createFromTypeNodesInternal(
return  createRecordType(
return  createFromTypeNodesInternal(n,
return  createType(
 return createDefaultObjectUnion(
return createRecordTypeFromNodesInternal( createFromTypeNodes(),
return  createFromTypeNodes(this,
return  createFromTypeNodesInternal(this,
return createRecordTypeFromNodesInternal(createFromTypeNodes(
return  createFromTypeNodesInternal( (String)
return  createFromTypeNodes(n,
 createRecordType(
return  createFromTypeNodesInternal(null,
 return createFromTypeNodesRecursive(
 return createRecordTypeFromNodes( n.getFirstChild(), sourceName, scope );
return createRecordTypeFromNodes(this,
return  createFromTypeNodes(null,
 return createRecordTypeFromNodes( n.getFirstChild(), sourceName, scope).restrictByNotNullOrUndefined();
 return createRecordTypeFromNodes(n.getFirstChild(), sourceName);
return  createFromTypeNodesInternal(record,
 return this.createRecordTypeFromNodes(
 return createRecordTypeFromNodes( n.getFirstChild(), sourceName, scope); default:
return  createFromTypeNodesInternal( (Node)
 return createFromTypeNodesInternal( n.getFirstChild(), sourceName, scope).restrictByRecordType();
return createRecordTypeFromNodesInternal(n,
 return createRecordTypeFromNodes( n.getFirstChild(), sourceName, scope).restrictByNullOrUndefined();
 createFromTypeNodesInternal(n,
 createFromTypeNodes(n,
return createRecordTypeFromNodesInternal(this,
 return createRecordTypeFromNodesInternal( n.getFirstChild(), sourceName, scope).restrictByNullOrUndefined();
 return createRecordTypeFromNodes( n.getFirstChild(), sourceName, scope).restrictByNonNullOrUndefined();
return  createFromTypeNodes(record,
 return JSType.createRecordTypeFromNodes(
 return createRecordTypeFromNodes(n.getFirstChild(), scope);
 return createFromTypeNodesInternalInternal(
return createRecordTypeFromNodesInternal(createFromTypeNodes(this),
return  createFromTypeNodesInternal( (int)
return createRecordTypeFromNodesInternal(CreateFromTypeNodesInternal(
 return createRecordTypeFromNodes( n.getFirstChild(), sourceName, scope) ; case Record type.
return createRecordTypeFromNodesInternal(createFromTypeNodes(n),
return  createFromTypeNodesInternal( (Object)
 return createRecordTypeFromNodes( n.getFirstChild(), sourceName, scope).restrictByRecordType();
 return createRecordTypeFromNodes( n.getFirstChild(), sourceName, scope).restrictByType();
 return createRecordTypeFromNodes( n.getFirstChild(), sourceName, scope); else
 return createFromTypeNodesInternal( n.getFirstChild(), sourceName, scope).recordType();
 return createRecordTypeFromNodesInternal( n.getFirstChild(), sourceName, scope); default:
 return createRecordTypeFromNodes( n.getFirstChild(), sourceName, scope).restrictByRecord();
 return createRecordTypeFromNodes( n.getFirstChild(), sourceName, scope); }
 createFromTypeNodes(this,
return createRecordTypeFromNodesInternal( createFromTypeNodesInternal(),
 return createRecordTypeFromNodes(n.getFirstChild, scope);
 return createFromTypeNodesInternal( n.getFirstChild(), sourceName, scope).restrictByRecord
return createRecordTypeFromNodesInternal(createFromTypeNode(
 return createRecordTypeFromNodes( n.getFirstChild(), sourceName, scope).restrictByName();
 return createFromTypeNodesInternal( (RecordType)
 return createRecordTypeFromNodes( n.getFirstChild(), sourceName, scope).restrictBy();
return createRecordTypeFromNodesInternal( createFromTypeNodes
 return createRecordTypeFromNodes ( n. getFirstChild(), sourceName, scope ) ; case Token.RR:
 return createRecordTypeFromNodes( n.getFirstChild(), sourceName, scope).restrictByNullOrUndefined(); else
 return createRecordTypeFromNodes( n.getFirstChild(), sourceName, scope); case Record:
 return createFromTypeNodesInternal(Record.class,
 return createFromTypeNodesInternal(createType(
 return createRecordTypeFromNodes( n.getFirstChild(), sourceName, scope).restrictByRecord
 return createRecordTypeFromNodes( n.getFirstChild(), sourceName, scope).restrictByNullOrUndefined(); }
return createRecordTypeFromNodesInternal(createFromTypeNodes(this,
return createRecordTypeFromNodesInternal(createFromTypeNodes(null),
 return createRecordTypeFromNodes(n.getFirstChild(), sourceName); else
return createRecordTypeFromNodesInternal(CreateFromTypeNodes(
 return createFromTypeNodesInternal( n.getFirstChild(), sourceName, scope).record type.
 return createRecordTypeFromNodes( n.getFirstChild(), sourceName, scope).recordType();
return createRecordTypeFromNodesImpl(createFromTypeNodesInternal(
return createRecordTypeFromNodesInternal(createFromTypeNodes(n,
 return createRecordTypeFromNodes(n.getFirstChild(), sourceName); }
 return createRecordTypeFromNodes( n.getFirstChild(), sourceName, scope); case Record type:
 return createRecordTypeFromNodes( n.getFirstChild(), sourceName, scope).restrictByNotNullOrUndefined
 return createRecordTypeFromNodes( n.getFirstChild(), sourceName, scope).restrictByNotNullOrUnknown();
 return createRecordTypeFromNodesInternal( n.getFirstChild(), sourceName, scope).restrictBy();
 return createRecordTypeFromNodes( n.getFirstChild(), sourceName, scope).restrictByNullOrUndefined
return createRecordTypeFromNodesInternal( createFromTypeNode(),
 return _createRecordTypeFromNodes(
 return createFromTypeNodesInternalRecursive(
 return createFromTypeNodesRecordType(
 return createRecordTypeFromNodes(n, sourceName, scope); default:
 return createFromTypeNodesInternal( n.getFirstChild(), sourceName, scope).restrictByRecord type.
 return createFromTypeNodesInternal(createRecord(
 return createRecordTypeFromNodes ( n. getFirstChild(), sourceName, scope ) ; case Token.RRV:
 createFromTypeNodes(null,
 return createRecordTypeFromNodes ( n. getFirstChild(), sourceName, scope ).restrictByNull ( ) ;
 return createRecordTypeFromNodes( n.getFirstChild(), sourceName, scope).restrictByNullOrUndefined;
 return createFromTypeNodesRecordsInternal(
 return createFromTypeNodesRecords(
 return createFromTypeNodesInternal( n.getFirstChild(), sourceName, scope).restrictByRecordType()
return createRecordTypeFromNodesInternal( (String)
 return createRecordTypeFromNodes(n, sourceName, scope); else
 return createRecordTypeFromNodesInternal( n.getFirstChild(), sourceName, scope).restrictByRecordType(); }
 return createFromTypeNodesInternal(Record.TYPE,
 CreateFromTypeNodesInternal(
return  createCustomObjectUnion(
 return createRecordTypeFromNodes( n.getFirstChild(), sourceName, scope).restrictByRecordType(); else
 If (n.getFirstChild!= null)
 return createRecordTypeFromNodes( n.getFirstChild(), sourceName )
 JSType.createRecordTypeFromNodes(
return createRecordTypeFromNodesInternal(this, n,
 createFromTypeNodesInternal(createRecordType(
 return createRecordTypeFromNodes( n.getFirstChild(), sourceName, scope).restrictByRecordType(); }
return createRecordTypeFromNodes(n,
 return createDefaultObjectUnion(createRecordTypeFromNodes(
 createFromTypeNodesRecursive(
 if (n.getFirstChild()!= null) {
return createRecordTypeFromNodesInternal( (Record)
return createRecordTypeFromNodesInternal( (Node)
 return createFromTypeNodesInternal(createUnion(
 If (n.getFirstChild!= null) {
 return createFromTypeNodesInternal(this).createRecordTypeFromNodes(
 createFromTypeNodesInternal(createType(
 return createFromTypeNodesInternal.recurse(
 return super.createRecordTypeFromNodes(
 If (n.getFirstChild()!= null) {
return createRecordTypeFromNodesInternal( (RecordType)
 If (n.getFirstChild) { return null; }
 return createFromTypeNodesInternal().create(
 return createFromTypeNodesImplicit(
 createFromTypeNodesInternalInternal(
 return createFromTypeNodesInternal.rec(
 createDefaultObjectUnion().createRecordTypeFromNodes(
return createRecordTypeFromNodesInternal(Record.class,
 return createFromTypeNodesInternal().createRecordTypeFromNodes(
 If (n.getFirstChild() == Node.RECORD)
return  createRecord(
return  createFromTypeInternal(
 If (n.getFirstChild) is a record type
 return createDefaultObjectUnion().createRecordTypeFromNodes(
 If (n.getFirstChild()!= null)
 CreateFromTypeNodes(
 createType(
 If (n.getFirstChild() == Token.RECORD)
 createDefaultObjectUnion( RecordType.createRecordTypeFromNodes(
 createCustomObjectUnion(
return  createCRLType(
 return createDefaultObjectUnion(this).createRecordTypeFromNodes(
 If (n.getFirstChild() is a record type)
 If (n.getFirstChild) { return record type }
 If (n.getFirstChild()!= null) return null;
 If (n.getFirstChild() is not null) {
 If (n.getFirstChild) { return record type; }
 createDefaultObjectUnion(createRecordTypeFromNodes(
 If (n!= null) {
return  createRecordTypeInternal(
 if (record!= null)
 If (n.getFirstChild() is not nullable)
return  createFromTypeNodesInternal(*
 return createDefaultObjectUnion( RecordType.createRecordTypeFromNodes(
 If (n.getFirstChild) {
 if (record == null)
 If (n.isRecordType ( ))
return createRecordTypeFromNodesInternal(null,
 If (n.getFirstChild)!= null,
 return createFromTypeNodes(this).createRecordTypeFromNodes(
 createDefaultObjectUnion( this ).createRecordTypeFromNodes(
 If (recordType!= null) {
 return createFromTypeNodesInternal(super.createRecordTypeFromNodes(
 if (recordType!= null) {
return  createCustomType(
 If (n.hasFirstChild!= null)
 If (n.getFirstChild()) {
 return JSTypes.createRecordTypeFromNodes(
 createRecordTypeFromNodesInternal().createRecordTypeFromNodes(
 If (n.getFirstChild == null)
 If (n.getFirstChild) { return record type. }
 Create a new object union. if ( n. isRecord ( ) )
 if (n.isRecord() {
 If (n.getFirstChild) is a Record type
 If (n.isRecordType (n))
 return createFromTypeNodesInternal(super).createRecordTypeFromNodes(
 createFromTypeNodesRecordType(
 If (n.getFirstChild) is nullable,
 createRecordTypeFromNodesInternal(createRecordTypeFromNodes(
 If (n.getFirstChild) == null,
 If (n.getFirstChild)!= null {
 if (n.isRecordType())
 return RecordType.createRecordTypeFromNodes(
 If (n.isRecordType() {
 return createRecordType ( sourceName ).createRecordTypeFromNodes(
 createRecordTypeInternal(
 If (n == null) return null;
return createRecordTypeFromNodesInternal(record_type,
 Not nullable
return  createToTypeNodesInternal(
 return createRecordTypeFromNodesInternal().createRecordTypeFromNodes(
 Create a new object union. if ( n. hasChildren ( ) )
 If (n.isRecord() {
 return createDefaultObjectUnion(.createRecordTypeFromNodes(
 JSType result=createRecordTypeFromNodes(
 createCustomType(
 If (n.isRecord (n))
return createRecordTypeFromNodesInternal(Record.TYPE,
 Create a new object union. if (n.hasFirstChild()) {
return  createCustomTypeNodesInternal(
 If (recordType!= null)
 If (record!= null)
 If (record == null)
return  createDefaultType(
 createDefaultType(
 Create a new object union. if (n.isRecordType() {
createRecordUnion(
return  createNewTypeNodesInternal(
return createRecordTypeFromNodes(null,
return  createFromTypeNodesImpl(
return  createObjectUnion(
return  createCollectionType(
 createRecordType().createRecordTypeFromNodes(
 Create a new object union. if (n.isRecordType() )
createRecord(
 case Token.REC:
 return createCustomStructuredType(
 Not nullable.
 case Token.RR:
 If (n == recordType)
 createDefaultRecordUnion(
return  createCustomTypeNodes(
 If not nullable
 if (rec == null)
 If (recordType == null)
createUnion(
return  createCustomType(this,
return  createUnion(
return  createStruct(
return  createCRLVType(
 If (n.isRecord())
 return cls.createRecordTypeFromNodes(
 createObjectUnion(
 If not nullable,
 return builder.createRecordTypeFromNodes(
 case Token.REF:
 JSTypes.createRecordTypeFromNodes(
 return Caster.createRecordTypeFromNodes(
 Default object union
 case Token.REG:
 Default object union.
 If nullable
 return super().createRecordTypeFromNodes(
 Nullable
return  createObject(
 super.createRecordTypeFromNodes(
 Not nullable!
 Default to object union
 nullable
 Default type.
 Default:
recurse(
 return!createRecordTypeFromNodes(
 return.createRecordTypeFromNodes(
return  parse(
 Default object unions
return  convert(
 Default type
return  read(
 Default.
return createRecordTypeFromNodesImpl(
 Default
return createRecordTypeFromNodesExternal(
 Optional
return createRecordTypeFromNodesStandard(
 {
