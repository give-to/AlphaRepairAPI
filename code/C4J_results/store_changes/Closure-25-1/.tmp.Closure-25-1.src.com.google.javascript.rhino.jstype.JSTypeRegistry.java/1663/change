return  builder ;
return  fieldType ;
return builder. build ( ) ;
return builder ; }
return builder. getType ( ) ;
 else { builder. addProperty ( fieldName, fieldType, fieldNameNode ) ;
 else { builder. addProperty ( fieldName, fieldType, fieldNameNode ) ; }
return  new RecordTypeBuilder ( builder, scope ) ;
return builder.build ( ) ; } } ;
 else { builder. addProperty ( fieldName, fieldType, fieldNameNode. getString ( ) ) ;
return  new RecordTypeBuilder ( builder ) ;
return  new RecordType ( builder ) ;
return builder. toJS ( ) ;
 return fieldType ; }
return builder. build ( ) ; } return null ; }
 else { builder. addProperty ( fieldName, fieldType, fieldNameNode. getString ( ) ) }
return  new RecordType ( builder, scope ) ;
 return builder ; } }
return builder. asType ( ) ;
 else { builder. addProperty ( fieldName, fieldType, fieldNameNode ) ; } } return builder. build ( ) ;
return  new RecordType ( builder )
return builder. toJSType ( ) ;
 else { builder. addProperty ( fieldName, fieldType, fieldNameNode ) }
 else { builder. addProperty ( fieldName, fieldType, fieldNameNode. getString ( ) ) ; }
 } ;
return  new RecordTypeBuilder ( builder ) ; }
 return builder ; } } ;
 } return builder. build ( ) ;
 else { builder. addProperty ( fieldName, fieldType, sourceName ) ;
return builder.buildRecordTypeFromNodes(n, scope);
 else { builder. addProperty ( fieldName, fieldType, fieldNameNode, scope ) ; }
 else { builder. addProperty ( fieldName, fieldType, fieldNameNode. get ( ) ) ;
return builder.build ( ) ; } } return null ; }
 else { builder. addProperty ( fieldName, fieldType, fieldNameNode ) ; } }
return builder.build ( ). getType ( ) ;
return builder. build ( ) ; }
return  new RecordType ( builder, scope ) ; }
 } return builder ; }
return builder. toJavaType ( ) ;
return builder.toString ( ) ;
 } return builder. getType ( ) ;
 else { builder. addProperty ( fieldName, fieldType ) ;
 else { builder. addProperty ( fieldName, fieldType, fieldNameNode ) ; } return builder. build ( ) ;
return builder. build ( ) ; } } return null ;
return builder. build ( ) ; } return null ;
return builder. build ( ) ; } } ) ;
 else { builder. addProperty ( fieldName, fieldType, fieldNameNode ) ; } } }
return builder. createRecordType ( ) ; } } ;
 else { builder. addField ( fieldName, fieldType, fieldNameNode ) ; }
 else { builder. addProperty ( fieldName, fieldType, fieldName ) ;
return builder. create ( ) ; } } ;
 else { builder. addProperty ( fieldName, fieldType, fieldNameNode. get ( ) ) }
return builder. createRecordType ( ) ; }
 else { builder. addProperty ( fieldName, fieldType, fieldNameNode. getString ( ), scope ) ; }
return builder. build ( ) ; } } ) ; }
return builder. toJSObject ( ) ;
 else { builder. addProperty ( fieldName, fieldType, fieldName ) ; }
return builder.buildRecordType ( ) ; } } ;
 else { builder. addProperty ( fieldName, fieldType, fieldNameNode. getFirstChild ( ) ) ; }
return  new RecordType ( builder ) ; }
 else { builder. addProperty ( fieldName, fieldType, fieldNameNode. getFirstChild ( sourceName ) ) ; } }
 else { builder. addProperty ( fieldName, fieldType, fieldNameNode. getString ( ), sourceName ) ; } }
 return builder ; } ;
return builder.buildRecordType ( ) ; } return null ; }
 } return builder ; } ;
 else { builder. addProperty ( fieldName, fieldType, n ) ;
 else { builder.addProperty(fieldName, fieldType, fieldNameNode.getString()); } }
 else { builder. addProperty ( fieldName, fieldType, fieldNameNode ) ; } } } }
 else { builder. addProperty ( fieldName, fieldType, fieldNameNode. getString ( ), scope ) ; } }
 else { builder. addProperty ( fieldName, fieldType, fieldNameNode. getNextChild ( ) ) ; } } }
 else { builder. addProperty ( fieldName, fieldType, fieldNameNode. getFirstChild ( ) ) ; } } }
 else { builder. addProperty ( fieldName, fieldType, n ) ; }
 else { builder. addProperty ( fieldName, fieldType, sourceName ) }
 else { builder. addProperty ( fieldName, fieldType, fieldNameNode, scope ) ; } }
return builder. create ( ) ;
return builder. create ( ). build ( ) ;
 else { builder. addProperty ( fieldName, fieldType, fieldNameNode. getNextChild ( ), sourceName ) ; } }
return builder. createRecordType ( ) ; } ;
return builder.build( ). toJS ( ) ;
return  new RecordTypeBuilder ( builder ) ; } ;
return builder.build ( ) ; } return null ; } ;
return builder.build ( ). build ( ) ;
return builder.build( ). toJSType ( ) ;
 else { builder. addProperty ( fieldName, fieldType, fieldNameNode. getFirstChild ( ) ) ; } }
 } return builder. asType ( ) ;
return builder.build( ). asType ( ) ;
 else { builder. addField ( fieldName, fieldType ) ;
return builder.buildRecordType ( ) ;
 else { builder. addProperty ( fieldName, fieldType, scope ) ;
 else { builder. addProperty ( fieldName, fieldType, fieldNameNode. getNextChild ( ) ) ; } } } }
return builder. createRecordType ( ) ; } }
return builder.build() ( n, sourceName, scope ) ; }
 else { builder. addProperty ( fieldName, fieldType, fieldNameNode. getFirstChild ( ) ) ; } } } }
return builder. toJS ( ) ; }
return builder. build ; }
 else { builder. addProperty ( fieldName, fieldType, node ) ; }
 else { builder. addProperty ( fieldName, fieldType, fieldNameNode. getString ( ) ) ; } } }
 else { builder. addProperty ( fieldName, fieldType, fieldNameNode. getString ( ), scope ) ; } } } }
return builder. build ( ) ; } } } ) ;
 else { builder. addProperty ( fieldName, fieldType, null ) ;
 else { builder. addProperty ( fieldName, fieldType, nodeNameNode ) ; } }
return  new RecordTypeBuilder ( builder ) ; } }
 else { builder. addProperty ( fieldName, fieldType, fieldNameNode. getNextChild ( ) ) ; } } } } }
 } return builder. toJS ( ) ;
 else { builder. addProperty ( fieldName, fieldType, fieldNameNode. getString ( ) ) ; } } } } }
 else { builder.addProperty(fieldName, fieldType); }
 else { builder. addProperty ( fieldName, fieldType ) }
 else { builder. addProperty ( fieldName, fieldType, fieldNameNode ) ; } return builder. build ( ) }
return builder. build ( ) ; } }
 return fieldType ; } }
return builder. build ( )
 else { builder. addProperty ( fieldName, fieldType, nodeNameNode ) ; } } }
return builder.createRecordTypeFromNodes(n);
 builder.build();
 else { builder. addProperty ( fieldName, fieldType, fieldNameNode. getNextChild ( ) ) ; } } } } ;
 else { builder. addProperty ( fieldName, fieldType, fieldNameNode. getFirstChild ( ) ) ; } } } } }
return builder.buildRecordType ( n, scope ) ; } }
 else { builder. addProperty ( fieldName, fieldType, fieldNameNode. getNextChild ) ; } }
return builder. build ( ) ; } ;
 else { builder. addProperty ( fieldName, fieldType, fieldNameNode ) ; } } } } }
 else { builder. addProperty ( fieldName, fieldType, n ) }
 else { builder. addProperty ( fieldName, fieldType, fieldNameNode, scope ) ; } } }
return builder.build ( ). type ; }
 } return builder ; } } ;
 } return builder ; } }
return builder.buildType ( ) ;
return builder.toJavaType ( ) ; } } ;
return builder.build( ). toJSObject ( ) ;
 else { builder. addProperty ( fieldName, fieldType, fieldNameNode ) ; } return fieldType ; } }
return builder.build( ) ; } } return null ; } ;
 else { builder. addProperty ( fieldName, null ) ;
return builder.toRecordType ( ) ; } } ;
return  new RecordTypeBuilder ;
 else { fieldType = null;
return  Builder. create ( ) ;
return builder.buildRecordType ( ) ; } } ) ;
 else { builder. addProperty ( fieldName, fieldType, scope ) }
 return builder. toJSV ( ) ;
return builder.build ( ) ; } } ; }
return builder.buildRecordType ( n, scope ) ; } ;
 return builder.toString());
 else { builder. addProperty ( fieldName, n ) ;
 return new RecordTypeBuilder(builder).build();
return builder.buildRecordType ( ) ; }
 else { builder. addProperty ( fieldName, fieldType, fieldNameNode ) ; } } return builder ; } }
return builder.buildRecordType ( ) ; } }
return builder.build( ) ; } } return recordType ; }
 else { builder. addField ( fieldName, fieldType ) }
return builder.build ( ). type ;
 else { builder. addProperty ( fieldName, fieldType, fieldNameNode ) ; } } } } ; }
return builder.build ( sourceName ) ;
 else { builder. addField ( fieldName, n ) ;
 return new RecordTypeBuilder() builder.build();
return builder.build(n.getFirstChild(), sourceName);
return  new RecordType ( builder ) ; } ;
return builder.toJSType ( scope ) ;
 else { builder. addField ( fieldName, fieldType ) ; }
return builder.build() ( n, scope ) ; } return null ;
 } return builder ;
return builder.buildRecordType ( ) ; } } ; }
return builder.buildRecordType ( ) ; } } } ) ;
return builder.build ( ) ; } return null ; } }
return  builder. create ( ) ; } ;
 else { builder. addProperty ( fieldName, fieldType, fieldNameNode ) ; } } } else { }
return builder.toJavaType ( ) ; } return null ;
return builder.build() ( n ) ; } } return null ; }
return  ( JSType ) ;
return builder.build( ). getType ; }
 else { builder. addProperty ( fieldName, fieldType, fieldNameNode ) ; } } return null ; }
return builder.build ( sourceName ) ; }
return builder.toJavaType ( ) ; }
 } return new RecordTypeBuilder(builder).build();
 else { fieldType = getUnknownType();
return builder.build() ( n, scope ) ; } } ;
return builder.toJavaType ( ) ; } }
 else { builder. addProperty ( fieldName, fieldType, fieldNameNode ) } }
 return new RecordType ( ) ;
 else { builder. addField ( fieldName );
return builder.build() ( n, scope, sourceName ) ;
 else { builder.addField(fieldType);
 return recordType ; }
return builder.toJSType ( ) ; }
return builder.build( ). toJS ( ) ; } } ;
return builder.toJavaType ( ) ; } ;
return builder. make ( ) ;
 else { builder. addProperty ( fieldName ) ; }
 else { builder. addProperty ( fieldName, null ) }
 return new RecordType ( builder ).build();
return builder.toJavaType ( ) ; } } ) ;
return builder. recordType ;
 else { builder.addProperty(fieldName, fieldType); } }
 return builder ; } return null;
 else { builder. addField ( fieldName ) ; }
 else { builder. addProperty ( fieldName, fieldType, fieldNameNode ) ; } } } } } ; }
 } return builder. build ( ) ;
 else { builder. addProperty ( fieldNameNode ) ;
return builder.build() ( n ) ; } return null ; }
return builder.build ( scope ) ;
 else { builder.addProperty(fieldNameNode);
 return builder. build ( ) ;
return builder.build( ) ; } } ; return null ;
 return builder.toRecordType());
return builder.toString ( ) ; }
return builder.build() ( n, scope ) ; } } ) ;
return builder.buildTree ( ) ;
 return builder. getType ( ));
 else { builder.addField(n, scope);
return builder.build() ( n ) ; } return null ; } ;
 return builder. build ( ) ; } return builder.build();
 builder.toString();
 return builder. build ( ));
 else { builder.addProperty(n, scope);
 else { builder. addField ( n );
 return new RecordType(n, builder);
return builder.build( ) ; } } return null ; } }
return builder.build( scope, n ) ;
 return type ; }
return builder.build() ; } } ; return recordType ; }
 return new RecordTypeBuilder(builder, scope).build();
return  new RecordTypeBuilder();
return builder.build() ; } return new RecordTypeBuilder ;
return builder.toRecordType ( ) ; } } ; }
return builder.build( ) ; return null ;
 return builder. build ( ) ; } else {
return  builder. type ;
 else { builder. addField ( fieldType ) ; }
 return new RecordTypeBuilder().build();
 return builder. toString ( ) + ".build();
 return new RecordTypeBuilder(builder)#build();
 return new RecordType() builder.build();
 return recordTypeBuilder.build();
 return new RecordTypeBuilder(builder.build();
 else { builder. add ( fieldNameNode );
 } return new RecordTypeBuilder() builder.build();
 else { builder. add ( fieldType );
return builder.build( ). toJS ( ). type ; }
 return new Record(builder);
return builder. getType ; }
return builder. getType ( )
 else { fieldType = getDefaultType();
 } return new RecordTypeBuilder().build();
return builder.build() ; } } ; return recordTypeBuilder ;
return builder.build() ; } } ; return recordType ;
 else { builder. addField ( fieldName ) ;
 else { fieldType = getUnknownFieldType();
 return newRecordTypeBuilder.build();
 return builder ; } } return null;
return builder.createRecordTypeFromNodes(n); }
 return builder.toJson();
return builder.toString ( ) ; } }
 return fieldType.build();
 return new RecordTypeBuilder();.build();
 return new RecordType(builder.build();
return builder.build() ; } } return recordTypeBuilder ;
 } return builder. build ( ) ; } }
 else { builder. addProperty ( fieldName ) ;
return builder.record;
 return builder.toString(););
 } }
 return (RecordTypeBuilder)builder.build();
 else { builder.addProperty(fieldTypeNode);
return builder.build() ; } } return type ; }
 return new RecordType ( builder, scope, n);
return builder.buildType ( ) ; } }
 return builder. toString ( ) + ").build();
 return builder. toString ( ) + "().build();
 return builder.toType();
 return (RecordType) builder.build();
 else { builder. add ( fieldType ) ; }
 return builder. getType ( ) ; };
 return new RecordType(builder, n);
 return builder.toTree();
return builder.build(n.getFirstChild(), sourceName); }
 else { builder. addProperty ( fieldNameNode ) }
 return builder. toString ( ) + " ".build();
 return new RecordTypeBuilder ( builder ) ; }.build();
return builder.build() ; return null ; }
 }
 else { return builder.build();
 return builder. toType ( ));
 return new RecordTypeBuilder ( builder ) { }.build();
 return builder. build ( ) ; } } ;
return builder.build().toJSObject(n);
 return builder. build ( ) ; } }
 } return builder.toString();
 } return newRecordTypeBuilder.build();
 return builder. build ( ) ; ";
 return new RecordTypeBuilder(builder)().build();
 return new RecordTypeImpl() builder.build();
 return new RecordTypeBuilder ( builder )builder.build();
 else { builder. addField ( n ) ; }
 } return builder ; } return null;
return builder.build(n.getLastChild(), sourceName); }
 else { fieldType = getNullType();
return builder.toJavaType ( ) ; } } }
 return builder ; } } );
 else { fieldType = getEmptyType();
 return new RecordTypeImpl(builder.build();
 } return new RecordTypeBuilder(builder.build();
 return builder. build ( ) ; });
 return new RecordTypeBuilder);
 return builder. build ( ) ; } return super.build();
 else { return fieldType.build();
 return builder. toString ( ) + "();
 return build ; } return null;
 return new Type(builder);
 return builder. toJSSType();
return builder.build() ; } } } ;
 return (Type) builder.build();
 return builder. getRecordTypeImpl();
 return builder. toJS ( ) ; };
 return new RecordTypeBuilder(builder); builder.build();
 } return builder. build ( ) ; } ;
 return builder. getType ( ) ; ";
 return builder ; } return templateType;
 return new RecordTypeBuilder ( builder ).builder.build();
 return new RecordType ( builder )builder.build();
 return builder. build ( ) ; } } }
 return builder. toString ( ). trim();
 return builder. getRecordTypeInternal();
 } } ;
 return RecordTypeBuilder.build();
 return builder. build ( ) ; break;
 else { builder. addField ( fieldName ) }
 return builder(scope);
 return new RecordTypeBuilder().builder.build();
 return getType(builder);
 return new RecordTypeBuilder(builder)->build();
 return new RecordType(n, scope);
 return build(builder);
 return JSType.builder.build();
 } } return builder.build();
 return builder. build ( ) ; } }.build();
 return builder. getType ( ) ; }();
 } return RecordTypeBuilder.build();
 } return builder. build ( ) ; }
 return JSType(builder.build();
return builder.build() ; } } } ; }
 return new RecordType ( this )builder.build();
 return builder. getType ( ).build();
 builder.build(scope);
 return builder. build ( ) { }.build();
 } return builder ; } } return null;
 return RecordTypeBuilder.builder.build();
 } return new RecordTypeBuilder().builder.build();
 return create(builder);
 else { return null;
 return builder ; } } ; return null;
 return new RecordType ( ) {
 return builder ; } } return false;
 } return recordTypeBuilder.build();
 } return templateType;
 else { builder.build();
 return (T) builder.build();
 return builder. build ( ) ; }
 return new RecordType ( ) ;
 return builder ; } } return this;
 return builder. build ( ) ; }.build();
 } return builder. build ( ) }
return builder.build(this);
 return fieldNameNode;
return builder.build(n, sourceName); }
 builder.endTree();
return builder.build( ) ; } } }
 builder.buildType();
 return builder. build ( ) }
 builder.getType();
 } } } ;
 return builder. build ( ) ; } #builder.build();
 return fieldType ; };
return builder. result ;
 return builder. build ( ) ; } } #builder.build();
 return builder; });
 } return builder. build(); } } ;
return builder.build(n);
 return builder. toJS ( ) ;();
 return builder(n);
 return (builder);
return builder.build() return null ; }
 } return builder. build(); } } }
 else { return fieldType;
 } return new RecordTypeBuilder ( builder ) #builder.build();
return builder.build() return null ;
 return builder. toString ( ) ; } }();
return builder.type();
return builder.build() + scope;
 return builder. toJS ( ) ; } }();
 return builder ; return null;
 return new RecordType ( builder ) ; } #builder.build();
 return builder. getType ( ) ; } }();
 return builder. build(); } } ; }
 return builder. build ( ) ; #builder.build();
return  recordType ;
 return templateType;
 return builder. build ( ) ; }.init();
 } return new RecordType ( builder ) #builder.build();
 break ;
 return new RecordType ( builder ) ; #builder.build();
 } ) ;
 return builder.getTypebuild();
 } return new RecordTypeBuilder ( ) ; #builder.build();
 } } }
 } builder.build();
return builder.toString()();
 return fieldType.builder.build();
 break ; }
return builder.build()();
 builder.record();
 return ;
return builder.build() return n ;
 return builder ; } #build();
 return fieldType ; } }
 } return recordType.build();
 return this.builder.build();
 (this);
 return builder ; } } ;
 return builder ; }.build();
 return builder.build(); else
.build();
 return "Record "+builder.build();
return builder.build(scope); }
 builder.complete();
 return fieldType);
 (n);
 return builder ; } }
.getTree();
 builder.init();
 else return builder.build();
 return recordType.build();
 return fieldType#build();
return builder.build(n); }
 else { continue;
 } (n);
 ;
 } (this);
 return null ; } }
 return builder ; #build();
 (builder);
 else { break;
return builder.buildRecord();
 return "Record",builder.build();
 return fieldType ; }
 return "Record "builder.build();
 return type.builder.build();
 } } }
 } } } }
 } } ;
 return this;
 return build.build();
 return type_builder.build();
 } } } ;
 } return builder ; }
return builder.build(this); }
 } } } ; }
 return null;
 } {
 return builder#build();
return  type ;
 } } ; }
 } }.build();
 }.build();
 return builder ; }
 return null ; }
 return type=builder.build();
 return builder();
 } }
 } ; }
.get();
 return this_builder.build();
 } #build();
..build();
 else { }
.init();
 return build();
return builder.build()"; }
.endbuild();
 }
return builder.build()(); }
 return this.build();
return builder. }
return builder. ;
 else } }
 ; }
 else #builder.build();
