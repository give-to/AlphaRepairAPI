RecordTypeBuilder builder = new  RecordTypeBuilder(this);
RecordTypeBuilder builder = new RecordTypeBuilder ( ) ;
RecordTypeBuilder builder  = null ;
RecordTypeBuilder builder = new RecordTypeBuilder(this). build ( ) ;
RecordTypeBuilder builder = new  RecordTypeBuilderImpl(this);
RecordTypeBuilder builder = new  Builder ( ) ;
RecordTypeBuilder  builder ;
RecordTypeBuilder builder = new  RecordTypeBuilder ( scope ) ;
RecordTypeBuilder builder = new RecordTypeBuilder(sourceName);
RecordTypeBuilder builder = new  RecordType(this);
RecordTypeBuilder builder  = new RecordTypeBuilder ( )
RecordTypeBuilder builder = new RecordTypeBuilder(sourceName, scope);
 RecordType builder=new RecordTypeBuilder(this);
RecordTypeBuilder builder  = RecordTypeBuilder();
 RecordTypeBuilder rbuilder = new RecordTypeBuilder(this);
RecordTypeBuilder builder = new RecordTypeBuilder(this). build ( scope ) ;
RecordTypeBuilder builder = new RecordTypeBuilder(n, scope);
 RecordType builder = createRecordTypeBuilder(this);
 JSType recordType = null ;
 JSType recordType = createFromTypeNodesInternal(n, sourceName, scope);
RecordTypeBuilder Builder builder = new RecordTypeBuilder ( ) ;
 return createRecordTypeBuilder(this);
RecordTypeBuilder builder = new  Builder(this);
RecordTypeBuilder builder = new RecordTypeBuilder(this). build ( sourceName ) ;
RecordTypeBuilder builder = new  RecordTypeBuilder ( scope, sourceName ) ;
RecordTypeBuilder builder = new  RecordTypeBuilder(); builder.init(this);
 JSType recordType = null ; try {
RecordTypeBuilder Builder builder = new RecordTypeBuilderBuilder();
RecordTypeBuilder BuilderBuilder = new RecordTypeBuilder ( ) ;
 JSType recordType = new RecordType(this);
 return createFromTypeNodesInternal(n, sourceName, scope);
RecordTypeBuilder builder =  new RecordTypeBuilder ( scope, n ) ;
 RecordType recordType = createRecordTypeBuilder(this);
 JSType recordType = new RecordType ( ) ;
 JSType recordType = createFromTypeNodesInternal ( n, sourceName, scope ) ; if ( recordType == null ) {
RecordTypeBuilder builder = new RecordTypeBuilder(this, n, scope);
RecordTypeBuilder Builder builder = RecordTypeBuilderBuilder();
 Node fieldTypeNode = n. getFirstChild ( 0 ) ;
 JSType recordTypeBuilder = createRecordTypeBuilder(this);
 JSType recordTypeBuilder = scope.createRecordTypeBuilder(this);
 JSType recordType = new RecordType ( scope ) ;
 Builder builder= new RecordTypeBuilder(this);
 JSType recordType = createRecordTypeBuilder(this);
RecordTypeBuilder builder  = new RecordTypeBuilderBuilder ( scope ) ;
RecordTypeBuilder builder  = new RecordTypeBuilder ( ;
 Node fieldTypeNode = n. getFirstChild ( ) ;
 return new RecordType(this);
 return new JSType(this);
RecordTypeBuilder builder = new  RecordTypeBuilder().withScope(this);
RecordTypeBuilder  recordTypeBuilder = null ;
 JSType builder = createRecordTypeBuilder(this);
 JSType recordType = new JSType(this);
RecordTypeBuilder builder  = new RecordTypeBuilder ( n ) ;
RecordTypeBuilder builder = new  RecordTypeBuilder(); builder.super(this);
 JSType recordType = createFromTypeNodesInternal ( n ) ;
RecordTypeBuilder BuilderBuilder = new RecordTypeBuilderBuilder();
 synchronized(this);
 JSType recordType = createFromTypeNodesInternal ( n, sourceName, scope ) ; if ( recordType!= null ) {
 JSType recordType = new RecordType ( sourceName ) ;
 JSType recordType = createFromTypeNodesInternal(this, sourceName, scope);
 Node fieldTypeNode = n. getFirstChild ( "type" )
 RecordType recordTypeBuilder = createRecordTypeBuilder(this);
RecordTypeBuilder builder = new  RecordTypeBuilder(); builder.build(this);
RecordTypeBuilder builder  = new RecordType ( ) ;
 JSType recordType = null;
 JSType recordType = createFromTypeNodesInternal ( n, sourceName, scope ) ; return recordType ;
 Node fieldTypeNode = n. getFirstChild ( sourceName ) ;
 JSType record = null ;
RecordTypeBuilder builder  = RecordTypeBuilder ;
 JSType recordType = createFromTypeNodesInternal ( n, sourceName, scope ) ; if (recordType) {
 JSType recordType = JSType null ;
 JSType recordType = createNewRecordType(this);
 RecordType recordType = null ;
 RecordType recordType = new RecordType(this);
 final RecordTypeBuilder builder=new RecordTypeBuilder(this);
 JSType recordType = createFromTypeNodesInternal(n, sourceName, scope); final
RecordTypeBuilder builder = new RecordTypeBuilder(this). build ( n ) ;
 JSType recordType = createRecordType(this);
 JSType recordTypeBuilder = scope.getRecordTypeBuilder(this);
 final RecordTypeBuilder recordTypeBuilder= new RecordTypeBuilder(this);
 JSType recordType = createFromTypeNodesInternal ( n, sourceName, scope ) ; JSType recordType = null ;
 Node fieldTypeNode = n. getFirstChild ( ' ' ) ;
RecordTypeBuilder builder  = recordTypeBuilder ;
 RecordType recordType = new RecordType ( ) ;
RecordTypeBuilder Builder builder = RecordTypeBuilder. builder ;
 Node fieldTypeNode = n. next ( );
 Node fieldTypeNode = n. getFirstChild ( ) ; try {
 return createFromTypeNodesInternal(n,this);
RecordTypeBuilder builder =  new RecordTypeBuilder ( sourceName ) ; }
 JSType recordType = createFromTypeNodes ( ) ;
 JSType recordType = createFromTypeNodesInternal(n, sourceName), scope);
 JSType recordType = new RecordType ( scope, sourceName ) ;
RecordTypeBuilder Builder builder = null ;
 JSType recordType = createFromTypeNodesInternal ( n, sourceName, scope ) ; if (debug) {
 Node fieldTypeNode = n. getNext ( ) ;
RecordTypeBuilder  recordTypeBuilder = new RecordTypeBuilder();
RecordTypeBuilder builder = new RecordTypeBuilder(this, sourceName, scope);
 JSType recordType = createFromTypeNodesInternal(n, sourceName, scope); }
 RecordType recordType = null ; try {
RecordTypeBuilder builder = new RecordTypeBuilder ( scope ). build ( ) ;
 JSType recordTypeBuilder = new StaticRecordTypeBuilder(this);
RecordTypeBuilder Builder builder = new Builder ( ) ;
 JSType recordTypeBuilder = new SimpleRecordTypeBuilder(this);
 JSType recordType = new RecordTypeImpl ( ) ;
 JSType recordType = createFromTypeNodesInternal(n, sourceName, scope) ; RecordTypeBuilder builder = null;
 JSType recordType = new RecordType ( )
RecordTypeBuilder builder = new RecordTypeBuilder ( scope ). build ( sourceName ) ;
RecordTypeBuilder builder  = createRecordTypeBuilder ( ) ;
 JSType recordType = JSType. Unknown ;
 return createFromTypeNodesInternal(this);
 RecordTypeBuilder builder = new RecordTypeBuilder(this); builder.addRequiredParams(this); builder.addScope(scope);
 Node fieldTypeNode = n. getFirstChild ( Node. TYPE ) ;
 JSType recordType = createFromTypeNodesInternal(n, sourceName, scope); return recordType; }
 JSType recordType = createFromTypeNodesInternal(n, sourceName, scope); };
 JSType recordTypeBuilder = scope.new RecordTypeBuilder(this);
 JSType recordType = createFromTypeNodesInternal(n, sourceName); final
 JSType recordType = new RecordType ( ) ;
 RecordTypeBuilder recordType= new RecordTypeBuilder(this);
 return new FunctionBuilder(this);
RecordTypeBuilder builder = new RecordTypeBuilder(n, scope, null);
 JSType recordType = new RecordType ( sourceName ) ; }
 return createFromTypeNodes(this);
 Node fieldTypeNode = n. getFirstChild ( ). firstChild ;
 RecordType builder = getRecordTypeBuilder(this);
RecordTypeBuilder builder = new  RecordTypeBuilder ( ) ; String fieldName ;
 Node fieldTypeNode = n. getFirstChild ( scope ) ;
 JSType recordType = createFromRecordType(this);
 final RecordTypeBuilder recordType=new RecordTypeBuilder(this);
 JSType recordType = RecordType(this);
 JSType returnType = null ; try {
 RecordType recordType = RecordType. Unknown ;
 RecordType recordType = RecordType(this);
 JSType fieldType = null ;
RecordTypeBuilder builder = new RecordTypeBuilder ( scope. get ( ) ) ;
 JSType recordType = JSType;
RecordTypeBuilder builder = new  RecordTypeBuilder(new Scope(this);
 JSType recordType = createRecordType ( scope ) ;
RecordTypeBuilder Builder builder = new BuilderBuilder();
RecordTypeBuilder builder = new RecordTypeBuilder ( ) ; builder. build ( n ) ;
 JSType recordType = createFromTypeNodesInternal();
RecordTypeBuilder builder = new RecordTypeBuilder(this); builder. build ( sourceName ) ;
 JSType recordType = createFromTypeNodesInternal(n, sourceName, scope); return recordType; };
 JSType recordType = createFromTypeNodesInternal ( n, sourceName, scope ) ; return recordType };
RecordTypeBuilder builder = new RecordTypeBuilder ( ) ; builder. init ( scope ) ;
 return createFromTypeNodes(n,this);
 JSType recordType = createFromTypeNodesInternal ( n, sourceName, scope ) ; } final
 final RecordTypeBuilder builder = new RecordTypeBuilder(this); final
 final RecordTypeBuilder<JSType> builder= new RecordTypeBuilder(this);
RecordTypeBuilder builder = new RecordTypeBuilder ( scope. getScope ( ) ) ;
RecordTypeBuilder builder = new RecordTypeBuilder(this). withScope ( scope ) ;
 RecordTypeBuilder recordTypeBuilder = (Builder)new RecordTypeBuilder(this);
 Node fieldTypeNode = n. getFirst ( ) ;
 return createFromTypeNodesInternal(n);
 JSType recordTypeBuilder = getRecordTypeBuilder(this);
 JSType recordTypeBuilder = (Type)new RecordTypeBuilder(this);
 JSType recordType = createFromTypeNodesInternal(n, sourceName); }
RecordTypeBuilder builder = new RecordTypeBuilder ( scope ). build ( n ) ;
RecordTypeBuilder builder = new RecordTypeBuilder(this) ; Builder builder. build ( sourceName ) ;
 JSType recordType = createJSType(this);
RecordTypeBuilder builder = new RecordTypeBuilder ( ) ; Builder builder. build ( ) ;
 RecordTypeBuilder recordTypeBuilder = null;
 JSType recordTypeBuilder = new DefaultRecordTypeBuilder(this);
 JSType recordType = createFromTypeNodesInternal(n, scope); final
 JSType recordType = null ; if (recordType) {
 return createFromTypeNodes(n);
RecordTypeBuilder builder = new RecordTypeBuilder ( ) ; String fieldName = null ;
 JSType recordTypeBuilder=new RecordTypeBuilder(this);
RecordTypeBuilder builder = new RecordTypeBuilder ( ) ; builder. build ( scope ) ;
RecordTypeBuilder builder = new RecordTypeBuilder(this); builder. setScope ( scope ) ;
RecordTypeBuilder builder = new RecordTypeBuilder(n, sourceName, scope);
RecordTypeBuilder builder =  new RecordTypeBuilder ( sourceName, scope )
 Node fieldTypeNode = n. getFirstChild ( ) ; }
 JSType recordType = createFromTypeNodesInternal(n, sourceName), scope;
 final RecordType recordType = createRecordTypeBuilder(this);
 JSType recordType = createFromTypeNodesInternal(n, sourceName, scope); return recordType();
 RecordType recordType = new RecordType ( )
 JSType recordType = null ; if (debug) {
RecordTypeBuilder builder = new  RecordTypeBuilder().withParent(this);
 return createRecordType(scope);
 JSType recordType = createFromTypeNodesInternal ( n, sourceName, scope ) ; return recordType ; } final
RecordTypeBuilder BuilderBuilder = null ;
 JSType recordType = createRecordTypeInternal(this);
RecordTypeBuilder builder = new  RecordTypeBuilder ( scope ). build ( )
 JSType recordType = null ; }
 RecordType recordTypeBuilder = scope.createRecordTypeBuilder(this);
 JSType recordType = createNewType ( ) ;
 JSType type = new JSType(this);
 RecordType record = new RecordType(this);
 final RecordType builder=new RecordTypeBuilder(this);
RecordTypeBuilder builder = new  RecordTypeBuilder().scope(this);
RecordTypeBuilder builder = new RecordTypeBuilder(this) ; Builder builder. setScope ( scope ) ;
RecordTypeBuilder builder = new RecordTypeBuilder(this, sourceName);
 JSType recordType = createFromTypeNodesInternal(n, sourceName, scope));
 JSType recordType = createFromTypeNodesInternal(this, sourceName, scope); final
 RecordType recordTypeBuilder = getRecordTypeBuilder(this);
RecordTypeBuilder builder = new  RecordTypeBuilder(); builder.builder(this);
 final RecordType recordType = new RecordType(this);
 JSType record = new RecordType(this);
RecordTypeBuilder builder = new RecordTypeBuilder(n, scope, true);
 JSType recordType = createFromTypeNodesInternal(n, scope); }
RecordTypeBuilder builder = new RecordTypeBuilder ( ). build ( scope ) ;
 final RecordType recordTypeBuilder = createRecordTypeBuilder(this);
 JSType recordType = createFromTypeNodesInternal(n, sourceName, scope); } private
 JSType RecordTypeBuilder builder = null;
RecordTypeBuilder builder = new RecordTypeBuilder(n, scope, false);
RecordTypeBuilder builder = new RecordTypeBuilder(this); builder. init ( sourceName ) ;
 JSType recordType = createFromTypeNodesInternal ( n, sourceName, scope ) ; if ( recordType ) final
 final RecordTypeBuilder rbuilder = new RecordTypeBuilder(this);
 JSType type = new RecordType(this);
 RecordType rbuilder = new RecordTypeBuilder(this);
 JSType recordType = createFromTypeNodesInternal ( n, sourceName, scope ) ; if ( recordType == null ) final
 RecordTypeBuilder builder = new RecordTypeBuilder ( ) ;
RecordTypeBuilder builder  = getRecordTypeBuilder ( ) ;
 JSType fieldType;
 RecordType recordType = create(this);
 RecordType recordType = createNewRecordType(this);
 RecordType recordType=new RecordTypeBuilder(this);
 JSType result = null ;
 JSType recordType = new RecordType ( ;
 JSType type = null ;
 RecordType recordType = new JSType(this);
 final RecordTypeBuilder recordTypeBuilderBuilder= new RecordTypeBuilder(this);
 RecordType recordTypeBuilder = scope.getRecordTypeBuilder(this);
 JSType recordType=new RecordTypeBuilder(this);
 JSType recordType = new RecordType ( this ) ;
 JSType recordType = createFromTypeNodesInternal(this, sourceName); final
 RecordType recordType = createRecordType(this);
 JSType result = new JSType(this);
 JSType recordType = create(this);
RecordTypeBuilder builder = new RecordTypeBuilder(this); builder. build ( scope ) ;
 JSType recordType = createFromTypeNodesInternal ( n, sourceName, scope ) ; } } final
 JSType recordType = createFromTypeNodesInternal ( n, sourceName, scope ) ; if ( recordType ) }
 JSType recordType = JSType ; }
 RecordType recordTypeBuilder = new SimpleRecordTypeBuilder(this);
 JSType recordType = createFromTypeNodesInternal(n, sourceName, scope); }; final
RecordTypeBuilder builder = new RecordTypeBuilder(this) ; Builder builder. build ( scope ) ;
RecordTypeBuilder builder = new RecordTypeBuilder(n, scope, this);
RecordTypeBuilder builder = new  RecordTypeBuilder().setScope(this);
 return createFromTypeNodesInternal(n, sourceName, scope); } final
 JSType recordType;
 RecordTypeBuilder builder = new RecordTypeBuilder(new RecordTypeBuilder(this);
 Node fieldTypeNode = n. getFirstChild;
 JSType recordType = RecordType. Unknown;
 JSTypeBuilder<JSType> builder= new RecordTypeBuilder(this);
RecordTypeBuilder builder = new  RecordTypeBuilder().withOwner(this);
RecordTypeBuilder builder = new RecordTypeBuilder(this, scope);
RecordTypeBuilder builder = new  Builder ( )
 JSType recordTypeBuilder = (Builder)new RecordTypeBuilder(this);
 RecordType recordTypeBuilder = new StaticRecordTypeBuilder(this);
 final JSType recordTypeBuilder = new SimpleRecordTypeBuilder(this);
RecordTypeBuilder builder = new RecordTypeBuilder ( ) ; Builder builderBuilder = null ;
 JSType recordType = createFromTypeNodesInternal(n, sourceName, scope) ; RecordTypeBuilder builder = null);
 RecordType recordType = getRecordTypeBuilder(this);
 JSType recordType = createFromTypeNodesInternal(n, sourceName);
 JSType recordType = createFromTypeNodesInternal(n, scope) ;
 JSType recordType = newType(this);
 JSType returnType = null;
 final JSType recordTypeBuilder = new StaticRecordTypeBuilder(this);
RecordTypeBuilder builder = new  RecordTypeBuilderWrapper(this);
 JSType recordType = createFromTypeNodesInternal(n, sourceName, scope) ; RecordTypeBuilder builder = null,
RecordTypeBuilder builder = new RecordTypeBuilder(this). build ( sc ) ;
 return createFromTypeNodesInternal(n, sourceName, scope;
 JSType recordType = getRecordTypeBuilder(this);
 JSType recordType = createFromTypeNodesInternal(this, scope); final
RecordTypeBuilder builder = new RecordTypeBuilder(this) ; Builder builder. build ( n ) ;
 JSType RecordTypeBuilder recordType=new RecordTypeBuilder(this);
 JSType fieldTypeNode = null;
 JSType recordType = createFromTypeNodesInternal(this, sourceName); }
 final JSType recordTypeBuilder= new RecordTypeBuilder(this);
 JSType recordType = new RecordTypeImpl;
RecordTypeBuilder builder = new RecordTypeBuilder(this); builder. build ( sourceName ) ; }
 JSType builder = getRecordTypeBuilder(this);
RecordTypeBuilder builder = new  RecordTypeBuilderImplImpl(this);
 RecordTypeBuilder _builder = new RecordTypeBuilder(this);
 JSType recordType = createFromTypeNodesInternal(null, sourceName); final
RecordTypeBuilder builder = new RecordTypeBuilder(this) ; RecordTypeBuilder builder. build ( ) ;
 RecordType recordType = RecordType. OTHER ;
 RecordType recordType = new Record(this);
RecordTypeBuilder builder = new RecordTypeBuilder(this); builder. setSource ( sourceName ) ;
 return createNewRecordType(this);
 final RecordTypeBuilder RecordTypeBuilder builder= new RecordTypeBuilder(this);
RecordTypeBuilder builder = new RecordTypeBuilder ( scope ) ; String fieldName ;
 return createFromTypeNodesInternal(n, sourceName, scope); } private
RecordTypeBuilder builder = new RecordTypeBuilder(this) ; builder. setScope ( scope ) ; }
 return createRecordType(n, scope);
 RecordTypeBuilder builder = new RecordTypeBuilder(this); final
 final RecordTypeBuilder<JSType builder= new RecordTypeBuilder(this);
 Builder builder = createRecordTypeBuilder(this);
 return createFromTypeNodesInternal(n, sourceName, scope) ; }
 return createRecordType(n);
RecordTypeBuilder builder  = NewRecordTypeBuilder ( ) ;
 final RecordTypeBuilder recordTypebuilder = new RecordTypeBuilder(this);
RecordTypeBuilder builder =  new RecordTypeBuilder ( sourceName ) ; {
 String fieldName = null;
RecordTypeBuilder builder = new RecordTypeBuilder(this) ; RecordTypeRecord recordTypeRecord ;
 JSTypeBuilder<RecordType> builder= new RecordTypeBuilder(this);
 return createFromTypeNodesInternal(n, sourceName, scope,
 return createRecordTypeFromNodes(n);
 return createFromTypeNodesInternal(n, sourceName, scope());
RecordTypeBuilder builder = new RecordTypeBuilder(this) ; try {
RecordTypeBuilder builder = new  RecordTypeBuilder().with(this);
RecordTypeBuilder builder = new RecordTypeBuilder ( scope ). build ( ) ; }
 RecordType type = RecordType(this);
 final RecordTypeBuilder recordBuilder= new RecordTypeBuilder(this);
RecordTypeBuilder  recordTypeBuilder ;
 RecordTypeBuilder builder = null; RecordType builder= new RecordTypeBuilder(this);
 JSType result = create(this);
 JSType recordType = createFromTypeNodesInternal(n); }
 RecordTypeBuilder builder = new RecordTypeBuilder(this); }
 final RecordTypeBuilder.RecordTypeBuilder builder= new RecordTypeBuilder(this);
 RecordType result = createRecordTypeBuilder(this);
 return createFromTypeNodesInternal(n, sourceName, scope); }; final
RecordTypeBuilder builder = new RecordTypeBuilder(this); builder. add ( sourceName ) ;
 RecordType ret= new RecordTypeBuilder(this);
 scope.scope(this);
 JSType recordType = UNKNOWN;
 JSType recordType = RecordType;
RecordTypeBuilder builder  = new RecordTypeBuilder ( scope )
 final RecordTypeBuilder < RecordType> builder= new RecordTypeBuilder(this);
RecordTypeBuilder builder = new  RecordTypeBuilder().super(this);
 JSType recordType = createFromTypeNodesInternal(n, sourceName, scope); } } }
 RecordType record = RecordType(this);
 final RecordTypeBuilder JSType rbuilder = new RecordTypeBuilder(this);
RecordTypeBuilder builder = new RecordTypeBuilder(n, sourceName);
 final JSType recordTypeBuilderBuilder= new RecordTypeBuilder(this);
 JSType builder=new RecordTypeBuilder(this);
 JSType RecordTypeBuilder builder=new RecordTypeBuilder(this);
 RecordType _builder = new RecordTypeBuilder(this);
RecordTypeBuilder builder = new RecordTypeBuilder(this); builder. setSourceName ( n ) ;
 RecordType type=new RecordTypeBuilder(this);
 JSType returnType = null ; }
 return createFromTypeNode(n);
 scope.add(this);
 final RecordTypeBuilder record_builder = new RecordTypeBuilder(this);
 RecordTypeBuilder recordBuilder= new RecordTypeBuilder(this);
 final RecordTypeBuilder builder = new RecordTypeBuilder(this); static
 RecordTypeBuilder builder = new RecordTypeBuilder(this); } } else {
 RecordTypeBuilder rt= new RecordTypeBuilder(this);
 final RecordTypeBuilder recordType_builder = new RecordTypeBuilder(this);
 String fieldName = sourceName;
 JSType type = null;
 return createFromTypeNodesInternal(n, sourceName, scope) ; };
 final RecordTypeBuilder RecordTypeBuilder= new RecordTypeBuilder(this);
 JSType fieldTypeNode;
 RecordType r = RecordType(this);
 RecordType recordType = null ; }
 final RecordTypeBuilder recordType.builder = new RecordTypeBuilder(this);
 Record builder=new RecordTypeBuilder(this);
 final RecordTypeBuilder rt= new RecordTypeBuilder(this);
RecordTypeBuilder builder = new RecordTypeBuilder(scope); builder = builder ;
 RecordTypeBuilder builder = new RecordTypeBuilder(this); static
 JSType recordType = new RecordTypeBuilder(this); final
RecordTypeBuilder builder = new RecordTypeBuilder(this); builder = builder ;
 if (n!= null) {
RecordTypeBuilder builder = new  RecordTypeBuilderInternal(this);
 Node fieldTypeNode = n.getNext(();
RecordTypeBuilder builder = new RecordTypeBuilder(this). withScope ( scope ) ; }
 final RecordTypeBuilder builder = new RecordTypeBuilder(this); private
RecordTypeBuilder builder = new RecordTypeBuilder(this, scope); return builder ;
 JSType recordType = null; final
 final RecordTypeBuilder typeBuilder=new RecordTypeBuilder(this);
 return new RecordType(n, scope);
 RecordTypeBuilder builder = new RecordTypeBuilder (this);
 RecordType type = createRecordTypeBuilder(this);
 final RecordTypeBuilder JSType _builder = new RecordTypeBuilder(this);
 return createNewFunctionBuilder(this);
 return scope.createRecordTypeBuilder(this);
RecordTypeBuilder  builderBuilder ;
 RecordType result=new RecordTypeBuilder(this);
 final RecordTypeBuilder RecordType.builder = new RecordTypeBuilder(this);
RecordTypeBuilder builder = new  RecordTypeBuilder ( scope ). build ( ;
 String fieldName;
RecordTypeBuilder builder = new RecordTypeBuilder(this). build ( sourceName ) ; }
 JSType recordType = null ; try { final
 final RecordTypeBuilder builder = null; final
 return create(this);
 RecordType record = null;
 return new RecordType(sourceName);
 JSType type = JSType;
 final RecordTypeBuilder recordTypeBuilderImpl= new RecordTypeBuilder(this);
 JSType returnType;
RecordTypeBuilder  recordType ;
 RecordBuilder rbuilder = new RecordTypeBuilder(this);
 RecordTypeBuilder typebuilder = new RecordTypeBuilder(this);
 JSType recordType = new RecordType ( ) {
 RecordType result = create(this);
 JSType recType = null;
 JSType fieldTypeNode = fieldType;
 return createNewRecordType(scope);
 Node n = n.getNext(sourceName);
 return createRecordType(this);
 JSType recordType = jstype;
 return new RecordTypeBuilder(); Builder builder= new RecordTypeBuilder(this);
 final RecordTypeBuilder RecordType_builder = new RecordTypeBuilder(this);
 return new SimpleRecordTypeBuilder(this);
 RecordTypeBuilder builder = new RecordTypeBuilder(this).build(); } final
 return JSType recordTypeBuilder= new RecordTypeBuilder(this);
RecordTypeBuilder Builder builderBuilder ;
 RecordTypeBuilder retbuilder = new RecordTypeBuilder(this);
 return createRecordType(sourceName);
 JSType recordType = EMPTY;
 RecordTypeBuilder builder = new RecordTypeBuilder(this, scope); } final
 final RecordTypeBuilder rtb= new RecordTypeBuilder(this);
 RecordTypeBuilder builder = new RecordTypeBuilder(this).build(); } private
 RecordTypeBuilder builder = new RecordTypeBuilder(this, scope); } private
 JSType fieldType = null ; }
 final RecordTypeBuilder _builder = new RecordTypeBuilder(this);
 return createFromTypeInternal(n);
 RecordType r= new RecordTypeBuilder(this);
 return new RecordType(scope);
RecordTypeBuilder builder = new RecordTypeBuilder(this). build ( ) ; }
RecordTypeBuilder builder = new RecordTypeBuilder(scope); return builder ;
 final RecordTypeBuilder rtbuilder = new RecordTypeBuilder(this);
 if (debug) {
RecordTypeBuilder builder = new RecordTypeBuilder(this). build ( )
 final RecordTypeBuilder recordTypeBuilder.builder = new RecordTypeBuilder(this);
 RecordTypeBuilder tbuilder = new RecordTypeBuilder(this);
 Node n = n.getFirstChild(0);
RecordTypeBuilder builder  = new RecordTypeBuilder ( sourceName ) {
 String sourceName = new String(sourceName);
 RecordTypeRecord builder=new RecordTypeBuilder(this);
RecordTypeBuilder builder = new RecordTypeBuilder(SourceName, scope);
 scope.init(this);
 Node fieldTypeNode = n.getNext(*);
RecordTypeBuilder builder = new  RecordBuilder(this);
RecordTypeBuilder  builder = new RecordTypeBuilder ( scope ) {
 RecordTypeBuilder builder = null; this.builder = new RecordTypeBuilder(this);
 RecordTypeBuilder recordbuilder = null; Record typebuilder = new RecordTypeBuilder(this);
RecordTypeBuilder builder = new RecordTypeBuilder(this).withSourceName(sourceName) ;
 JSType recordTypeBuilder = scope#new RecordTypeBuilder(this);
 RecordType = createRecordTypeBuilder(this);
 JSType builder = null; RecordType _builder = new RecordTypeBuilder(this);
 JSType <RecordType> rbuilder = new RecordTypeBuilder(this);
 return FunctionBuilder(this);
 String sourceName = getSourceName(n);
 super.create(scope);
 JSType recordTypeNode = null; final
 RecordTypeBuilder ret= new RecordTypeBuilder(this);
 JSType fieldTypeNode = nullNode;
 return createRecordTypeFromNode(n);
 scope.push(this);
 return createFromTypeNodesInternal(scope);
 RecordType type = create(this);
 return new RecordType(();
 FieldType fieldType = FieldType;
 RecordTypeBuilder result= new RecordTypeBuilder(this);
 JSType recordTypeBuilder = scope||new RecordTypeBuilder(this);
 JSType recordType = JT null;
 JSType builder = null; RecordType.builder = new RecordTypeBuilder(this);
 return createFromTypeNodes(scope);
 boolean found = false;
RecordTypeBuilder  builder = new RecordTypeBuilder(scope); }
 var builder=new RecordTypeBuilder(this);
RecordTypeBuilder builder = new RecordTypeBuilder(null, scope);
 return create(scope);
RecordTypeBuilder builder = new  RecordsTypeBuilder ( ) ;
 JSType builder = null; RecordTypeBuilderbuilder = new RecordTypeBuilder(this);
RecordTypeBuilder builder  = new RecordTypeBuilder(this); } }
 super.create(n);
 RecordType builder2= new RecordTypeBuilder(this);
 RecordTypeBuilder builder = null; final
 return new MethodBuilder(this);
RecordTypeBuilder  recordTypeBuilder = null ; }
 String name = null;
 return new StaticRecordTypeBuilder(this);
 JSType builder = null; this.builder = new RecordTypeBuilder(this);
 scope.setScope(scope);
 Builder builder = getRecordTypeBuilder(this);
 if (useBuilder) {
 String fieldName = "unknown";
 RecordTypeBuilder recordTypeBuilder = null; final
 scope. enter(this);
RecordTypeBuilder builder = new RecordTypeBuilder(this) ; String fieldName ;
 JSType returnType = null ; try { final
 JSType RecordTypeBuilder builder = null; final
 RecordType builderbuilder = new RecordTypeBuilder(this);
 final RecordTypeBuilder type_builder = new RecordTypeBuilder(this);
 RecordTypeBuilder builder = new RecordTypeBuilder().new RecordTypeBuilder(this);
RecordTypeBuilder builder = new  CreateRecordTypeBuilder(this);
 return null;
RecordTypeBuilder Builder = null ;
RecordTypeBuilder builder = new RecordTypeBuilder(this). buildBuilder();
 final RecordTypeBuilder record.builder = new RecordTypeBuilder(this);
RecordTypeBuilder builder  = recordTypeBuilder ; }
 if (recordType) {
 RecordType builder.RecordTypeBuilder(this);
 final RecordTypeBuilder jbuilder = new RecordTypeBuilder(this);
 RecordTypeBuilder recordTypebuilder = new RecordTypeBuilder(this);
RecordTypeBuilder Builder builder ;
RecordTypeBuilder builder = new RecordTypeBuilder ( ) ; String fieldName ; }
RecordTypeBuilder builder = new  DefaultRecordTypeBuilder(this);
 String type = null;
RecordTypeBuilder builder = new RecordTypeBuilder(this).withTypeOfThis(thisType); }
RecordTypeBuilder builder  = RecordTypeBuilder ; }
RecordTypeBuilder builder = new RecordTypeBuilder(this) ; RecordTypeRecord record = null ; }
 scope.addScope(this);
 final RecordTypeBuilder cbuilder = new RecordTypeBuilder(this);
 int index = 0;
 RecordType bbuilder = new RecordTypeBuilder(this);
 Builder rbuilder = new RecordTypeBuilder(this);
RecordTypeBuilder builder = new  Builder ( ;
RecordTypeBuilder builder  = null ; }
 if (hasType) {
 if (!scope) {
RecordTypeBuilder builder = new RecordTypeBuilder(this). build ( ;
RecordTypeBuilder builder = new RecordTypeBuilder(this); return builder ;
 if (isConstructor)
 boolean found;
 builder = createRecordTypeBuilder(this);
 if (!builder) {
 String name = "";
 JSType recordType ; final
RecordTypeBuilder builder = new RecordTypeBuilder(this).withNodes(n); }
RecordTypeBuilder builder = new RecordTypeBuilder(this).withSourceName(sourceName); }
RecordTypeBuilder builder = new RecordTypeBuilder(this, sourceName, scope));
RecordTypeBuilder builder = new RecordTypeBuilder(this).withScope(scope); } }
 Record record=new RecordTypeBuilder(this);
RecordTypeBuilder builder = new  RecordsTypeBuilderImpl(this);
RecordTypeBuilder builder = new RecordTypeBuilder(this, sourceName, scope); }
 JSType newType(this);
 return new DefaultRecordTypeBuilder(this);
 scope(this);
RecordTypeBuilder builder = new RecordTypeBuilder(ns, scope);
RecordTypeBuilder builder = new RecordTypeBuilder(this, sourceName); }
RecordTypeBuilder builder = new RecordTypeBuilder(this), scope);
 new Scope(this);
 String name;
 if (n!= null) final
 debug(n);
RecordTypeBuilder builder = new RecordTypeBuilder(n, sourceName); }
 int fieldIndex;
RecordTypeBuilder builder = new RecordTypeBuilder(this). build ( sourceName ) {
RecordTypeBuilder builder  = newBuilder ;
 if (region) { final
 return create(n);
 return new DynamicRecordTypeBuilder(this);
RecordTypeBuilder builder = new RecordTypeBuilder(this).withSource(sourceName); } }
RecordTypeBuilder builder  = builder ; }
 return new MethodType(this);
RecordTypeBuilder builder = new RecordTypeBuilder(this). build ( scope ) {
RecordTypeBuilder builder = new RecordTypeBuilder(this, scope); }
RecordTypeBuilder builder = new RecordTypeBuilder(this) { } ;
 return getRecordTypeBuilder(this);
RecordTypeBuilder builder  = this ;
 setScope(this);
 int fieldCount;
 boolean hasType;
 if (debug) final
 Builder _builder = new RecordTypeBuilder(this);
 boolean result;
 return newRecordTypeBuilder(this);
 synchronized(scope);
 trace(this);
 String type;
 super(this);
RecordTypeBuilder builder = new RecordTypeBuilder(n, scope); }
 return null ; } final
RecordTypeBuilder  builder ; {
 String fieldType;
RecordTypeBuilder builder  = ;
 synchronized(lock);
 synchronized(n);
RecordTypeBuilder builder = new RecordTypeBuilder(SourceName);
 clearScope(scope);
RecordTypeBuilder builder = new RecordTypeBuilder(this), scope); }
RecordTypeBuilder builder = new RecordTypeBuilder(this, sourceName) {
 StringBuilderbuilder = new RecordTypeBuilder(this);
 Builder b= new RecordTypeBuilder(this);
 Builder ret= new RecordTypeBuilder(this);
 Record typebuilder = new RecordTypeBuilder(this);
 String builder= new RecordTypeBuilder(this);
RecordTypeBuilder builder = new  TypeBuilder(this);
RecordTypeBuilder builder  = null
 try { final
 return clone(this);
RecordTypeBuilder builder  = scope ;
RecordTypeBuilder builder = new RecordTypeBuilder(null);
RecordTypeBuilder builder = new  FunctionBuilder(this);
RecordTypeBuilder builder = new Instance();
RecordTypeBuilder builder = new RecordTypeBuilder(this), scope;
RecordTypeBuilder builder = new RecordTypeBuilder(this) ; }
 return null);
RecordTypeBuilder builder = new  MethodBuilder(this);
RecordTypeBuilder builder  = builder ;
 builder=new RecordTypeBuilder(this);
 return this; }
 return null; }
RecordTypeBuilder  builder();
 return null; };
RecordTypeBuilder  result ;
 return buildRecordTypeBuilder(this);
 String name);
RecordTypeBuilder builder = new RecordTypeBuilder(SOURCEName);
 return factory(this);
RecordTypeBuilder builder = new  RecordsTypeBuilder(this);
RecordTypeBuilder  record ;
 return this; };
RecordTypeBuilder builder = new RecordTypeBuilder(sourceName)); }
 final
 return asRecordTypeBuilder(this);
RecordTypeBuilder builder = new RecordTypeBuilder(thisType);
 String fields);
 return ();
 return this);
RecordTypeBuilder builder = new  recordTypeBuilder(this);
RecordTypeBuilder builder = new  RecTypeBuilder(this);
RecordTypeBuilder builder = new RecordTypeBuilder(n); }
RecordTypeBuilder builder = new RecordTypeBuilder(this) { }
RecordTypeBuilder builder = new RecordTypeBuilder(this)); }
 builder(new RecordTypeBuilder(this);
RecordTypeBuilder builder = new RecordTypeBuilder(scope)); }
RecordTypeBuilder builder = new RecordTypeBuilder(this) {
RecordTypeBuilder builder = new RecordTypeBuilder(this)) ;
RecordTypeBuilder builder = new RecordTypeBuilder(this)();
 builder:new RecordTypeBuilder(this);
RecordTypeBuilder builder = new RecordTypeBuilder(name);
 static
RecordTypeBuilder builder = new Instance(this);
RecordTypeBuilder builder = new  builder(this);
RecordTypeBuilder builder = new  Factory(this);
RecordTypeBuilder builder := new RecordTypeBuilder(this);
RecordTypeBuilder builder: new RecordTypeBuilder(this);
