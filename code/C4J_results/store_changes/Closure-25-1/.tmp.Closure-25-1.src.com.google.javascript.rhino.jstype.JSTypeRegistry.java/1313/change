 return createRecordType(this, properties);
return new RecordType(properties);
return new  RecordType(this, properties);
 return createRecordType(properties);
return new RecordType(this, properties, implicitPrototype);
 return createRecordType(null, properties);
 return create(properties);
 return new PrototypeRecordType(this, properties);
return new RecordType(null, this, properties);
 return createRecordType(null, null, properties);
 return create(this, properties);
return new RecordType(this, null, properties);
return new  Record(this, properties);
return new RecordType(this, properties, null);
return new RecordType(this, null, implicitPrototype);
 return createRecordType(null, null, null, properties);
return new RecordType(null, null, implicitPrototype);
return new RecordType(null, null, properties);
 return createRecordType ( properties )
return new RecordType(returnType, properties);
 return createRecordType();
 return createRecordType(null, null, properties;
return new RecordType(null, null, this, properties);
 return createRecord(properties);
return new RecordType(this, null, properties, implicitPrototype);
return  properties ;
 return createRecordType(null), properties;
 return createRecord(this, properties);
 if (properties!= null) {
return new Record ;
 return recordType ;
return new RecordType(null, null, properties, implicitPrototype);
 return createRecordType ( properties ) ; }
return new RecordType(null, null, null, properties);
 return createRecord(null, properties);
 return new PrototypeRecordType(null,this, properties);
 return properties);
return new  RecordType ( properties )
return new  RecordType ( properties ) ; }
return new RecordType(null, properties);
 return createRecord ( properties )
 if (prettyPrint) {
 return createRecordType(null, null, implicitPrototype);
return new RecordType(this,  null, null, properties, implicitPrototype);
return new RecordType(this, null, null, implicitPrototype);
return new RecordType(this, properties, implicitPrototype); }
 return createRecordType(returnType, properties);
 return null, properties);
 return new PrototypeRecordRecordType(this, properties);
 return createRecordType() properties;
 return createRecordType ( properties, null ) ;
return new  RecordType ( ) ;
return new RecordType(this, properties, null, implicitPrototype);
 return createRecordType ( null, properties ) ; }
 return createRecordType ( null, null, properties )
 return createRecordType(new PrototypeRecordType(this, properties);
return new RecordType(null, null, null, implicitPrototype);
return new  RecordType ( properties, null ) ;
return new RecordType(this, null, properties, implicitPrototype); }
 return createRecordType(null, recordType,properties);
 return createRecordType ( properties, implicitPrototype )
 return createRecordType(null, properties;
 return createRecordType ( properties, null )
 return createRecordType(null, recordProperty);
 return createRecordType(null, null), properties;
 return createRecordType ( null, null, properties ) ; }
 return createRecordType(null, null, null, null, null, null, null, null, null, null, null, null);
return new RecordType(null, null, properties); }
return new  RecordType ( )
 return createRecordType ( null, null, implicitPrototype )
 return (properties);
return new RecordType(null, null, recordProperty);
 return createRecordType;
 return (RecordType)new RecordType(this, properties);
 return createRecordType(null, recordType);
return new RecordType(this, null, properties); }
 return createRecordType(null, null, null, null, null, null, null, null, null, null, null); }
return new RecordType(this, null, null, properties);
 return createRecordType(null, null, _properties);
 return createRecordType(recordType,properties);
return new RecordType(this, null, recordProperty);
return new RecordType ;
return new  RecordType ( properties, null )
 return createRecordType(null, null,this, properties);
 return new PrototypeRecordType(null, properties);
 return createRecordType ( this, null, properties ) ;
return new  RecordType ( this, properties ) ; }
 return createRecordType(properties;
return new RecordType(this, properties). build ( ) ;
 return createRecordType ( null, properties, null ) ;
 if (properties) {
return new  RecordType ( properties, implicitPrototype )
 if (properties instanceof RecordProperty) {
return new  RecordType ( properties, implicitPrototype);
 return createRecordType(null, null, null, null, null, null, null, null, null, null, null) ;
 return createRecordType, properties);
return new RecordType(this, properties, newImplicitProto);
 return createRecordType ( null, properties, implicitPrototype )
 return createRecordTypeImpl(properties);
 return createRecord ( ) ;
 if (properties instanceof Record) {
 return createRecordType(null, null, properties); } public RecordType properties() {
 return createRecordType ( null, properties, null )
return new RecordType(this, properties, null, implicitPrototype); }
 return createRecordType(null,this, properties);
 return createRecordType(null, null, null, null, null, null, null, null, null, null, properties); }
 return createRecordType(this, null, null, properties);
 return createRecordType(null, null, null, null, null, null, null, null, null, null, null); } else
return new RecordType(null, null, null, this, properties);
return new  RecordType ( null, properties ) ; }
 return new RecordType(null, null, null, null, null, null, null, null, null, null, null); } else
 return new RecordType(createRecordType(this, properties);
return new RecordType ( this, properties, implicitPrototype )
 return createRecordType ( null, properties )
 return (Record) properties;
 return createRecordType(null, null, recordType);
 return new PrototypeRecordTypeRecords(this, properties);
return new RecordType ( this, null, properties, null ) ;
 return createRecordType(null, null, null, null, null, null, null, null, null, null, properties) ;
 return new RecordType(this, properties); } else {
 return new RecordType(null, null, properties;
 return createRecordType(Properties);
 return new RecordType(this, null, properties); } public RecordType properties() {
 if (properties instanceof Map) {
return new RecordType(this, properties) ; return this ;
 return new RecordType(new PrototypeRecordType(this, properties);
 return createRecordType(recordType, null, properties);
 return createRecordType(records, properties);
 return new PrototypeRecordTypeImpl(this, properties);
return new RecordType ( null, null, properties, null ) ;
 return createRecordType(this, null, properties;
 return createRecordType(null, record properties);
 return new PrototypeRecordTypeRecordType(this, properties);
 return createRecordType(this, properties); } else {
return new RecordType(this, properties, null, implicitPrototype, null);
 return createRecordType(this, null, properties); } public RecordType properties() {
return new RecordType(this,  null, properties, implicitPrototype, null);
 return createRecordType(null, null, null;
 return createRecordType(null, null, properties); } else {
 if (properties instanceof RecordType)
 return (RecordType) new PrototypeRecordType(this, properties);
 return createRecordType(null, null, properties); } public RecordType() {
return new  RecordTypeImpl ( properties ) ;
 return (RecordType) properties;
 return createRecordType(null, null,new RecordType(this, properties);
 return createRecordType(properties..);
 return createRecordType(null, properties);;
 return createRecord(, properties);
 return createRecordType(new RecordType(this, properties);
 return createRecordType(null, null, null, null, null, null, null, null, null, null, null); } ;
 return createRecordType(null, returnType, properties);
 return createRecordTypeWithProperties(this, properties);
 return new RecordType(this, properties); } public RecordType properties() {
 return createRecordType(null, null, null, null, null, null, null, null, null, null, null) {
 return createRecordType(RecordType.this, properties);
return new RecordType(this, properties, implicitPrototype); return createRecordType();
 return createRecordType(propertiesMap);
 return (RecordType) createRecordType(this, properties);
return new RecordType(this, name, properties, implicitPrototype);
 return createRecordType(null, recordName,properties);
 return createRecordType(null, null, *properties);
 return createRecordTypeInternal(properties);
return new RecordType(this, properties). withRecordType ( implicitPrototype ) ;
 return new PrototypeRecordsType(this, properties);
 return createRecordType(this, null, properties); } else {
 return createRecordType(this, properties)||new RecordType(this, properties);
 return createRecordType(null, recordType.properties);
 return createRecordType(properties, null;
 return createRecordType(null, null, properties); } public RecordType record {
 return createRecordType(null, null, properties); } public RecordType createRecord() {
 return createRecordType(null, null, properties); } public RecordType recordType() {
 return createRecordType(null, null, properties); } else { return createRecordType(null, null, properties); }
return new RecordType(this, properties) ; return RecordType ;
 return createRecordType(RecordType.JSON, properties);
 return new PrototypeRecordTypeRecording(this, properties);
 return new RecordType(null, createRecordType(this, properties);
 create(this, properties);
 return createRecordType(null, null, properties); } public RecordType createRecordType() {
 return new RecordType(this).withProperties(this, properties);
 return new PrototypeRecordType(new Record(this, properties);
 if (properties instanceof Properties) {
 return createRecordType(this, properties); createRecordType(this, properties);
return new RecordType(this, null, null, properties); }
 return createRecordType(this, properties).createRecordType(this, properties);
return new RecordType(this, properties, implicitPrototype, null);
return new RecordType(this, properties, null, implicitPrototype, prettyPrint);
 return recordType(properties);
 return createRecordType(properties)? : createRecordType(this, properties);
 return createRecordType(null, properties, implicitPrototype);
return new RecordType(null, properties, implicitPrototype);
return new  RecordType ( properties, this ) ;
return new RecordType(null, null, recordType);
 return new RecordType(this, null, properties); } public RecordType() {
 return createRecordType(null, null, properties, implicitPrototype); }
return new RecordType(this, recordProperty);
 return createRecordType(this), properties;
 return createRecordType(null) properties;
 return new RecordType(this, null, properties); } public RecordType record {
return new RecordType(null, null, properties, recordType);
 return RecordType ;
 return createRecordType(properties.*);
return new RecordType(this, properties, implicitPrototype); } return recordType ;
 return createRecordType(records, null, properties);
 return createRecordType(null),new RecordType(this, properties);
 return createRecordType(null, null, properties); } else { return createRecordType ( null, null, properties ) }
 return createRecordType(null, null, properties); } else { return createRecordType(null, properties); }
 if (properties instanceof RecordType) {
return new RecordType(null, null, null, properties); }
 return createRecordType(properties) || createRecordType(this, properties);
return new RecordType(this, null, properties), implicitPrototype);
 return createRecordType(null), createRecordType(this, properties);
return new RecordType(this, properties). withRecordType ( recordType ) ;
 return createRecordType(records);
 return createRecordType(null, null, properties); }
 return createType(null, properties);
 return createRecordType(null, properties, implicitPrototype); }
return new RecordType(this, properties, implicitPrototype); return recordType ;
 return new RecordType(this, null, properties); } public RecordType createRecord() {
 return createRecordType(RecordType.class, properties);
 return new RecordType(null, null, properties); } else { return createRecordType(null, null, properties); }
return new  RecordType ( properties, ) ;
 return new PrototypeRecordObjectType(this, properties);
 return createRecordType(null, null, properties, implicitPrototype);
 return createRecordType(null, null, properties); } public RecordType record() {
return new RecordType(null, null, properties); return recordType ;
 return createRecord({, properties);
 return new RecordType(null, null, properties); } public RecordType createRecord() {
 return createRecordType(null, null, properties); } else { return createRecordType(null, null, properties);
 return createRecordType(null, null, null, properties); } else { return createRecordType(null, null, null);
 return createRecordType(null,new RecordType(this, properties);
 return createRecordType(null, new RecordProperty(this, properties);
return new RecordType(this, properties, implicitPrototype); return RecordType ;
 return createRecordType(null, null, properties); } else { return createRecordType(null, null); }
return new RecordType(this, null, properties); return createRecordType();
 if (debug) {
 return new RecordType(this, properties); } public RecordType() {
 return new RecordType(this, properties);new RecordType(this, properties);
 return new RecordType(null, null, properties); } else { return createRecordType ( null, null, properties ) }
return new RecordType(this,  null, null, properties); return recordType ;
 return createRecordType(this, null, properties); } public RecordType createRecord() {
 return createRecordType(null, properties); } else {
return new RecordType(this, null, properties, recordType);
 if (properties instanceof RecordProperties) {
 return createRecordType(this, properties);new RecordType(this, properties);
 return RecordType. class;
 return createRecordType(this, null), createRecordType(this, properties);
return new  RecordTypeImplicit ( properties )
return new RecordType(this, null, null, recordProperty);
 return new Record(properties);
 return new RecordType(this).withRecordType(this, properties);
 return createRecordTypeImpl(this, properties);
 if (properties.length > 0) {
return new RecordType(this, properties) ; return null ;
 return createRecordType(null, null, properties); } else { return createRecordType ( null, properties ) }
 if (properties.size > 0) {
 return new RecordType(this, createRecordProperty(this, properties);
 return createRecordType(null, null, null, properties); } public RecordType createRecordType() {
 return (Type)new RecordType(this, properties);
 return new Record(null, properties);
 return createRecordType(null, this, null, properties);
 return new RecordType(this, properties).createRecordType(this, properties);
 return createRecordType(null, null, properties); } else { super. createRecordType ( properties ) ;
 if (properties instanceof RecordPropertyMap) {
 return createRecordType(null, null),new RecordType(this, properties);
 return createRecordType(null, null, null, properties); } else { return createRecordType(null, null); }
 return new RecordType(this, properties)new RecordType(this, properties);
return new RecordType(this, properties). withRecordsNode(recordsNode);
 return createRecordType(this) || createRecordType(this, properties);
return new RecordType(this, null, null, properties); return type ;
 return new RecordType(null, null, properties); } else { return createRecordType(null, properties); }
 return createRecordType(null, null, properties); } else { return createRecordType(properties); }
 return createRecordType(null, null, implicitPrototype); }
return new RecordType(this, name, implicitPrototype);
return new RecordType(this,  null, null, properties); return RecordType ;
 return (RecordType) this.new RecordType(this, properties);
 return createRecordType(null, null, properties); } else { public RecordType createRecordType() {
return new RecordType(this, properties). withRecordType ( recordType )
 return createRecordType(properties...);
return new RecordType(this, properties, null, implicitPrototype); return type ;
 return new RecordType(null), new Record(this, properties);
 return createRecordType()(properties);
 return createRecord ( properties, );
 if (properties!= null) return properties;
return new RecordType(this, properties, implicitPrototype); } return null ;
 return (RecordType) super.new RecordType(this, properties);
 return createRecordType(null, null, properties); } else { return createRecordType(null, properties);
 return createRecordType(null, null, properties); } else { return createRecordType(null, null);
return new RecordType(this, properties) ; return recordType ;
return new RecordType(this, properties) ; return record ;
 return createRecordType(null, null, properties); } else { if (properties instanceof RecordProperty) {
 return new RecordType(null, RecordProperty.this, properties);
 return createRecordType(null, _properties);
return new RecordType(this, properties). withRecordsNode(records);
 return new RecordType(new RecordProperty(this, properties);
 return createRecordType(null, null, properties); } else { return createRecordType(null, null, properties); } else
return new RecordType(this, properties). withRecordType ( returnType ) ;
 return createRecordType(null, null, properties); } else if (properties instanceof Record) {
return new RecordType(this, null, null, properties); return null;
 return createRecordType(this, properties)|new RecordType(this, properties);
 return createRecordType(null, null, null, properties); } public RecordType createRecord ( ) {
return new RecordType(null, null, properties); return null;
return new RecordType(null, null, properties, null); }
 return createRecordType(new PrototypeRecordType(),this, properties);
 return createRecordType(null, null, properties); } else { return createRecordType(null, null, properties); } }
 if (!prettyPrint)
 return createRecordType(new RecordProperty(this, properties);
 return createRecordType(RecordType)this, properties);
 return createRecordType(null, null, properties, implicitPrototype); } else
return new RecordType(this, properties). withRecord ( ) ;
 return recordType ( );
return new  Record ( ) ;
 return new PrototypeRecordType(new RecordType(this, properties);
 return createRecordType(null, null, properties); } public RecordType {
 return createRecordType(null, null, properties); } else { return createRecordType ( ) ;
 recordType=new RecordType(this, properties);
 return createRecordType(null, properties, implicitPrototype); } else
 return createRecordType(Properties).createRecordType(this, properties);
return new RecordType(this, null, properties, null); }
 return createRecordType(this, properties); } else
return new RecordType(this, properties). withRecordType ( ) ;
 return createRecordType(null, properties)||new RecordType(this, properties);
 return createType ( ) ;
return new RecordType(this, properties). withRecord ( this ) ;
 return createRecordType(null, null, properties); } else { public RecordType createRecord ( ) {
return new RecordType(this, properties) ; } return null ;
 return createType ( properties )
return new RecordType(this, properties). withRecord ( record ) ;
return new RecordType(this, properties). withRecordType ( record ) ;
 return createRecordType(null, null, properties); } else if (properties instanceof Properties) {
 return createRecordType(this, null, properties); }
return new RecordType(null, properties, null);
 return new RecordType(this),new RecordType(this, properties);
return new RecordType(this, properties) ; } return recordType ;
return new RecordType(this, null, null, this, properties);
return new RecordType(null, null, record properties);
 return new RecordType(this, properties); } else
 return new RecordType(this, properties); } public RecordType record() {
return new RecordType(null, recordProperty);
 return createRecordType(Properties)new RecordType(this, properties);
 return createRecordType(null, null, properties); } else if (properties instanceof Map) {
 return create(null, properties);
 return createRecordType(null, null, properties); } else { if (properties!= null) {
 return createRecordType(properties)||new RecordType(this, properties);
return new  Record ( properties )
return new RecordType(this, properties, null, implicitPrototype); return this ;
return new RecordType(null, null, recordTypes);
 return createRecordType(this, properties); }
 return createRecordType(this, null, properties); } else
return new RecordType(this, properties) ; } return RecordType ;
 return createRecordRecordType(this, properties);
 return createRecordType(new PrototypeRecordType)this, properties);
 return new PrototypeRecordType().createRecordType(this, properties);
 if (properties.isEmpty(?)) {
 return new RecordType(this).createRecordType(this, properties);
 return new RecordType(null), createRecordType(this, properties);
return new RecordType(this, null, recordType);
 if (properties instanceof RecordTypes)
 return createRecordType(null).createRecordType(this, properties);
 return createType(properties);
 return createRecordType(null, null, properties); } else
 return createRecordType(null, null, properties); } else { return createRecordType(null, properties); } else
return new RecordType(this, properties, recordType);
return new RecordType(this, properties, newImplicitType);
 return createRecordType(); properties;
 return createRecordTypeInternal(this, properties);
 return createRecordObjectType(this, properties);
return new RecordType(this, null, properties); return recordType ;
 return createRecordType(null, null, properties); } else { return createRecordType(null, properties); } }
 return (RecordTypeImpl)new RecordType(this, properties);
 return new RecordTypeImpl(null, properties);
 return recordType = properties;
 return createRecordType(null, null, properties); } else { return createRecordType(); }
 return createType(this, properties);
return new RecordType(this, properties, parameterTypes);
 return recordType(null, properties);
 return RecordType. Record;
 if (PrettyPrint) {
return new RecordType(this, properties) ; } return this ;
 return createRecordTypeFromMap(this, properties);
return new RecordType(this) ;
 return createRecordType(null, null, properties, null); }
 return createRecordType(ObjectType.this, properties);
 return createConstructorTypeWithRecordType(this, properties);
 return new RecordType(this, properties); }
 return new PrototypeRecordType(this.this, properties);
 return new PrototypeRecordTypeRecorder(this, properties);
return new RecordType(this, properties). withRecordType ( this )
return new RecordType(this, properties). withRecordsNode(recordTypes);
 return new RecordType(null).create(this, properties);
 return new PrototypeRecordType(null).create(this, properties);
 RecordType=new RecordType(this, properties);
 return defineRecordType(null, null, properties);
 return createRecordTypeWithProperty(this, properties);
 if (lastVarArgs) {
return new RecordType(this, properties, properties, implicitPrototype);
 return createConstructorTypeForRecordType(this, properties);
 if (record) {
 return createRecordType(Properties).new RecordType(this, properties);
 return createRecordType(null, properties); } else
 record(this, properties);
 return new PrototypeRecordType(null), record(this, properties);
 if (prettyprint) {
 return createRecordType(*properties);
 return createRecordType(null, properties, implicitPrototype); } }
 return createRecordType(null, properties, implicitPrototype); } ;
 return createRecordType(null, properties)|new RecordType(this, properties);
 return new RecordType(this.properties);
 return recordType(this, properties);
return new RecordType(this, properties, implicitPrototype); return this ;
return new RecordType(this, properties). withRecordType ( record )
 return new PrototypeRecordType(new)RecordType(this, properties);
 if (prettyPrint)
return new RecordType(this, recordType);
return new RecordType(this, properties, implicitPrototype); return type ;
 if (record)
return new RecordType(this, name, properties);
return new RecordType(this, properties) ; return createRecordType();
return new RecordType(this, properties) ; } else { return null ; } }
 return (ObjectType)new RecordType(this, properties);
return new RecordType(properties, recordType);
 if (properties.length) {
 return new RecordType(this)||new RecordType(this, properties);
 return createRecord, properties);
return new RecordType(this, properties, false, implicitPrototype);
return new RecordType(this, properties). withRecord ( record )
 if (!properties.empty()) {
return new RecordType(this, properties).withRecordType(newRecordType); }
 return createRecord($, properties);
return new RecordType(this, null, record properties);
 return CreateRecordType ( properties ) ;
 return (RecordType) createNativeRecordType(this, properties);
 return null + properties;
 return createPrototypeRecordType(this, properties);
 return create ( properties )
return new RecordType(this, properties), implicitPrototype);
 return createRecordType(this, properties); } ;
 return createRecordType(null, null, properties); } ;
 return (Object)new RecordType(this, properties);
 return this. record;
 return (T)new RecordType(this, properties);
return new  RecordType ( {
 return createRecordType(this, null, properties); } ;
return new RecordType(this, returnType, properties);
 return createRecordType(this, properties); } }
 return (RecordType) createAnonymousRecordType(this, properties);
 create(null, properties);
 return createConstructorForRecordType(this, properties);
 return (null, properties);
 return create ( ) ;
return new RecordType(this, properties, implicitProotype); }
 return createRecordType(Properties):new RecordType(this, properties);
 return new PrototypeRecordType().new RecordType(this, properties);
 return new RecordType(_);
 return createTypedRecordType(this, properties);
return new RecordType(recordType, properties);
 return (RecordType) (new RecordType(this, properties);
return new RecordType(this, properties, 0, implicitPrototype);
 return createRecordType(record, properties);
return new RecordType(this, null, recordTypes);
return new RecordType(this, properties) return record ;
return new  PrototypeRecordFieldType(this, properties);
 return new PrototypeRecordType()new RecordType(this, properties);
 return createProtoRecordType(this, properties);
 return (RecordType)RecordType(this, properties);
return new  RecordType(new RecordType(this, properties);
 return RecordType.new RecordType(this, properties);
return new  RecordType(null), create(this, properties);
return new  PrototypeRecordTypeProperties(this, properties);
 if (debug)
return new RecordType(records, properties);
return new RecordType(createRecordType(null, this, properties);
 return properties. record;
return new RecordType(this, properties), implicitPrototype); }
return new RecordType(RecordType.class, this, properties);
 return createSerializedRecordType(this, properties);
 return (Record) createRecordType(this, properties);
 return createConstructorWithRecordType(this, properties);
return new RecordType(null, record properties);
return new RecordType(this, properties) ; return type ;
 return recordType=new RecordType(this, properties);
 return null;
 return createRecord(_);
return new RecordType(null, this, null, properties);
 if (!debug)
 return record(this, properties);
return new RecordType(this, properties, recordTypes);
return new RecordType(this, null, undefined, properties);
 return createConstructorTypeRecordType(this, properties);
return new RecordType(this, this, properties);
return new RecordType(RecordProperty. class, this, properties);
 return createConstructorTypeFromRecordType(this, properties);
return new RecordType(this, properties, returnType);
return new  RecordTypeImpl ( properties )
return new RecordType(recordType, null, properties);
 RecordType(new RecordType(this, properties);
return new RecordType(this, properties, newImplicitPrototype);
return new RecordType(RecordType.JSON, this, properties);
return new RecordType(Properties);
 Record type=new RecordType(this, properties);
 return new Record, properties);
 return createObjectType().createRecordType(this, properties);
return new RecordType(this, properties, null); }
return new RecordType(this, properties) return type ;
return new RecordType(new RecordBuilder(null, this, properties);
 return null);
 return { } ;
 return (record, properties);
return new RecordType(this, null, this, properties);
return new RecordType(this, properties, implicitType);
return new RecordType(this, properties, implicitPrototype); } }
return new RecordType(RecordType.JSON, properties);
return new RecordType(null, 0, null, properties);
 return recordType);
return new RecordType(null, null, null);
 if (properties)
return new RecordType(this, properties, explicitPrototype);
return new RecordType(this, recordName, properties);
return new RecordType(records, null, properties);
return new RecordType(records.class, this, properties);
 record(properties);
 return $(properties);
return new RecordType(this, properties), null;
return new RecordType(returnType, this, properties);
return new RecordType(properties), null;
return new RecordType(this); }
 create(properties);
return new RecordType(this, name, null, properties);
return new RecordType(this, properties, null, parameterTypes);
return new RecordType(this, properties, newImplicitClass);
 RecordType.new RecordType(this, properties);
 return defineRecordType(properties);
return new RecordType(records);
 return constructRecordType(properties);
 return getRecordType(properties);
return new RecordType(this, record properties);
return new RecordType(this, this.name, this, properties);
return new RecordType(propertiesMap);
return new RecordType(properties..);
return new RecordType(this, records); }
return new RecordType(this, properties, implicitProotype);
return new RecordType(this, properties, false);
return new RecordType(this, properties, implicitPrototypeName);
return new RecordType(this, properties, implicitPrototype2);
 return record(properties);
 return createSerializableRecordType(this, properties);
 return (record);
return new RecordTypeImpl ( ) ;
return new  ProtoRecordType(this, properties);
return new RecordType(properties.*);
return new RecordType ( ;
 boolean recordType();
 return defineRecordType(this, properties);
return new  RecordRecordType(this, properties);
return new RecordType(RecordType, this, properties);
return new RecordType(this, properties), null);
return new RecordType(this, Record properties);
return new RecordType(this, properties, true);
 super(properties);
 return this);
return new Type ;
 return constructRecordType(this, properties);
return new RecordType(properties); *
 return recreateRecordType(this, properties);
 } return null;
 return this;
return new RecordType ( properties ;
return new  CreateRecordType(this, properties);
return new RecordType(name, properties);
return new  LegacyRecordType(this, properties);
return new RecordType(null, null);
 record = properties;
 return build(this, properties);
 return (this, properties);
 return this, properties);
 return records(this, properties);
 (null, properties);
return new RecordType(0, null, this, properties);
 return createRecordTypes(properties);
return new RecordType(0.0, this, properties);
return new RecordType(this, properties, paramTypes);
return new RecordType(this, null, null);
return new RecordType(recordType, this, properties);
 return build(properties);
return new RecordType(this), properties);
 return type(this, properties);
return new RecordType(0, 0, this, properties);
 write(this, properties);
 return createNewRecordType(this, properties);
 records(this, properties);
 return createNativeRecordType(this, properties);
 (this, properties);
 return records(properties);
 createRecord(properties);
return new  record ;
 return null ;
return new RecordType(this, null);
return new RecordType(name, null, properties);
return new RecordType(classLoader, this, properties);
return  record ;
return new RecordType(this, properties) {} ;
return new RecordType(records, this, properties);
return new RecordType(this, properties) { }
 return this ;
 return "new RecordType(this, properties);
 return record ;
 return *new RecordType(this, properties);
return new RecordType(this); *
return new RecordType(this, property);
 return {};
 return property;
return new RecordType(this, properties); ;
return new RecordType(this, properties) {} }
return new RecordType(this, properties, null, null);
 return property);
 createRecord(this, properties);
 * returnnew RecordType(this, properties);
return new RecordType(this, properties) ; public
return new RecordType(className, properties);
return new RecordType(recordName, properties);
 type=new RecordType(this, properties);
return new RecordType(this, properties, undefined, null);
return new RecordType(this) {}
 * *
return new RecordType(this)) ;
return new  RecordsType(this, properties);
return new  recordType(this, properties);
return new RecordType(this,  props);
return new RecordType(property);
return new RecordType(this, properties)); }
 return getRecordType(this, properties);
 return buildRecordType(this, properties);
return new RecordType(record, properties);
return new RecordType(this, properties, 0);
return new  Type(this, properties);
return new  RecordTypes(this, properties);
 * {
return new RecordType(this, properties, this);
 *
return new  Records(this, properties);
return new RecordType(id, properties);
return new RecordType(0, this, properties);
return new RecordType(NULL, this, properties);
 {
return new RecordType(null);
