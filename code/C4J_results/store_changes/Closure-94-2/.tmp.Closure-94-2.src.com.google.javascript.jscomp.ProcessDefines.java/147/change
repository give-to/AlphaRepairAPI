 compiler.report(JSError.make(UNKNOWN_DEFINE_WARNING, unknownDefine));
compiler.report(JSError.make(unknownDefine));
compiler.report(JSError.make(defineName, unknownDefine));
compiler.report(unknownDefine);
 compiler.addToDebugLog(UNKNOWN_DEFINE_WARNING, unknownDefine));
 compiler.addToDebugLog("UNKNOWN_DEFINE_WARNING, unknownDefine));
 changed = true;
 compiler.reportError(JSError.make(UNKNOWN_DEFINE_WARNING, unknownDefine));
compiler.report(JSError.make(defineName, UNKNOWN_DEFINE_WARNING, unknownDefine));
compiler.report(JSError.make(UNKNOWN_DEFINE_WARNING, defineName));
 compiler.addToDebugLogWarning(UNKNOWN_DEFINE_WARNING, unknownDefine));
 compiler.addToDebugLog(JSError.make(UNKNOWN_DEFINE_WARNING, unknownDefine));
 compiler.reportWarning( Messages.make(UNKNOWN_DEFINE_WARNING, unknownDefine));
compiler.report(JSError.UnknownDefine);
compiler.reportCodeChange();
 compiler.addToDebugLog(unknownDefine));
compiler.report(JSError unknownDefine);
compiler.report(JSError.make(UNKNOWN_DEFINE_WARNING, unknownDefine, defineName));
 compiler.addToDebugLog(defineName, unknownDefine));
 compiler.addToDebugLog(" "+unknownDefine));
 compiler.getReport ( ).report(JSError.make(UNKNOWN_DEFINE_WARNING, unknownDefine));
 compiler.addToDebugLog(make(UNKNOWN_DEFINE_WARNING, unknownDefine));
 compiler.addToDebugLog(format(UNKNOWN_DEFINE_WARNING, unknownDefine));
 compiler.addToDebugLog(MessageFormat.make(UNKNOWN_DEFINE_WARNING, unknownDefine));
 compiler.reportUnknownDefine;
compiler.report(JSError.make(UNKNOWN_DEFINE_WARNING, unknownDefine, unusedReplacements));
 if (changed) {
 compiler.report(JSError.make(UNKNOWN_DEFINE_WARNING, unknownDefine)); } if (changed) {
compiler.report(unknownDefine); }
compiler.report(JSError.UnknownUnknownDefine);
compiler.report(JSError.makeUnknownDefine());
 compiler.report(JSError.make(UNKNOWN_DEFINES, unknownDefine)); } else {
compiler.report(unknownDefine, unknownDefine);
 warn(UNKNOWN_DEFINE_WARNING, unknownDefine));
 compiler.addToDebugLog(.make(UNKNOWN_DEFINE_WARNING, unknownDefine));
compiler.report(JSErrorUnknownDefine);
 compiler.report(JSError.make(UNKNOWN_DEFINES, unknownDefine)); } if (changed) {
 if (changed)
 compiler.report(JSError.make(UNKNOWN_DEFINES, unknownDefine)); } for (String unknownWarning)
 compiler.addDebugLog("UNKNOWN_DEFINE_WARNING, unknownDefine));
compiler.report(JSError.make(unknownDefine, defineName));
compiler.report(JSError.make(unknownDefine, unknownDefine));
 compiler.report(JSError.make(UNKNOWN_DEFINE_WARNING, unknownDefine)); } for (String define)
 compiler.report(JSError.make(UNKNOWN_DEFINES, unknownDefine)); } } else {
 compiler. addToDebugLog ( unknownDefine ) ; compiler. reportCodeChange ( ) ;
 compiler.report(JSError.make(UNKNOWN_DEFINES, unknownDefine)); } for (Warning unknown) {
 compiler. report ( JSError.make(UNKNOWN_DEFINES, unusedReplacements));
 compiler.warn(UNKNOWN_DEFINE_WARNING, unknownDefine));
 compiler.reportCodeChange(JSError.make(UNKNOWN_DEFINE_WARNING, unknownDefine));
 compiler.addToDebugLogError(JSError.make(UNKNOWN_DEFINE_WARNING, unknownDefine));
 if (!changed)
 compiler.reportContext.report(JSError.make(UNKNOWN_DEFINE_WARNING, unknownDefine));
 compiler.report(JSError.make(UNKNOWN_DEFINE_WARNING, unknownDefine)); } } else {
 changed =
 compiler.addToDebugLog("Adding unknown define " + unknownDefine);
 compiler.addToDebugLog("Unknown define");
 compiler.addToDebugLog("Warning",JSError.make(UNKNOWN_DEFINE_WARNING, unknownDefine));
 compiler. report ( JSError.make(UNKNOWN_DEFINES, unknownDefine)); }
 compiler. report ( JSError.make(UNKNOWN_DEFINES, unknownDefine));
 compiler.addToDebugLog(formatMessage(UNKNOWN_DEFINE_WARNING, unknownDefine));
 if changed {
 compiler.report(JSError.make(UNKNOWN_DEFINE_WARNING, unusedReplacements, unknownDefine));
 compiler.addToDebugLog(unknownDefine);
 compiler.report(JSError.make(UNKNOWN_DEFINE_WARNING, unknownDefine)); } for (String undefined)
 compiler.reportUnknownDefine);
 compiler.addToDebugLog(format.format(UNKNOWN_DEFINE_WARNING, unknownDefine));
 compiler.addToDebugLog("Unknown define").report(JSError.make(UNKNOWN_DEFINE_WARNING, unknownDefine));
compiler.report(JSError.make(UNKNOWN_DEFINE_WARNING, unknownDefine)) ; } return changed ;
 compiler.addToDebugLog("Adding unknown define " + defineName);
 compiler.reportJSError.make(UNKNOWN_DEFINE_WARNING, unknownDefine));
 compiler. report ( JSError.make(UNKNOWN_DEFINE_WARNING, unusedReplacements)); }
 compiler.report(JSError.make(UNKNOWN_DEFINES_WARNING));
 compiler.addToDebugLog("");
 compiler.addToDebugLog(unknownDefinition);
 compiler.reportCodeError(JSError.make(UNKNOWN_DEFINE_WARNING, unknownDefine));
compiler.report(JSError.UnknownDefineUnknownDefine);
 compiler. addToDebugLog ( unknownDefine ) ; compiler. reportCodeChange ( ) ; }
 compiler.addToDebugLog("Adding unknown define " + unknownDefine); }
compiler.report(JSError.make(UNKNOWN_DEFINE_WARNING, unknownDefineName));
 compiler.addToDebugLog("Unknown define");
 compiler.report(JSError.make(Unknown_DEFINES_WARNING));
 compiler. report ( JSError.make(UNKNOWN_DEFINES, unusedReplacements)); }
 compiler.addToDebugLog("Adding "+unknownDefine));
 compiler.addToDebugLog(); compiler.report(JSError.make(UNKNOWN_DEFINE_WARNING, unknownDefine));
 compiler.addToDebugLog().report(JSError.make(UNKNOWN_DEFINE_WARNING, unknownDefine));
 compiler. addToDebugLog ( unknownDefine ) ; compiler. addToDebugLog ( unknownDefine. trim ( ) ) ;
 compiler.warn(unknownDefine));
 compiler. addToDebugLog ( unknownDefine ) ; compiler. addToDebugLog ( unknownDefine ) ;
compiler.report(JSError.make(unknownDefine)) ; }
 compiler.addToDebugLog("Ignoring unknown define " + unknownDefine);
 compiler.addToDebugLog(InternalJSError.make(UNKNOWN_DEFINE_WARNING, unknownDefine));
compiler.reportUnknownDefine();
 compiler.addToDebugLog("Unknown define.");
 if ( unknownDefine!= null ) { compiler. reportCodeChange ( unknownDefine ) ; }
 compiler.addToDebugLog(message(UNKNOWN_DEFINE_WARNING, unknownDefine));
 compiler.addToDebugLog(formatWarning(UNKNOWN_DEFINE_WARNING, unknownDefine));
 compiler.addToDebugLog("Ignoring unknown define " + defineName);
 compiler.addToDebugLog(Format.format(UNKNOWN_DEFINE_WARNING, unknownDefine));
compiler.report(JSError.make(UNKNOWN_DEFINE_WARNING, unknownDefine)) ; } compiler. reportCodeChange ( ) ;
 compiler.addToDebugLog("Adding " +JSError.make(UNKNOWN_DEFINE_WARNING, unknownDefine));
compiler.report(unknownDefine, unknownDefine); }
 compiler.addToDebugLog("Unknown definition.");
 compiler.addToDebugLog(Instance.make(UNKNOWN_DEFINE_WARNING, unknownDefine));
 compiler.addToDebugLog("Ignoring unknown define " + unknownDefine); }
 compiler.addToDebugLog("Error: " + unknownDefine);
 compiler.reportWarning(make(UNKNOWN_DEFINE_WARNING, unknownDefine));
 compiler. addToDebugLog ( unknownDefine, unknownDefine ) ; compiler. reportCodeChange ( ) ;
 compiler.report(JSError.make(UNKNOWN_DEFINE_WARNING, unknownDefine)); } } else { {
 compiler.addToDebugLog("Found unknown define " + unknownDefine);
 compiler.report(JSError.make(UNKNOWN_DEFINE_WARNING, unknownDefine)); } } else { return
 compiler.addToDebugLog(new Warning(UNKNOWN_DEFINE_WARNING, unknownDefine));
 compiler.context.report(JSError.make(UNKNOWN_DEFINE_WARNING, unknownDefine));
 compiler.addToDebugLog("Unknown define " + unknownDefine);
 compiler.reportCodeChange;
 compiler.reportCodeChange(unknownDefine;
 compiler.addToDebugLog("Unused define " + unknownDefine);
 compiler. report ( JSError.make(UNKNOWN_DEFINES_WARNING)); }
 compiler.addToDebugLog("Error: " + unknownDefine + "");
 compiler.report(JSError.make(UNKNOWN_DEFINES)); }
 compiler.reportUnknownDefine(unknownDefine;
 compiler.reportWarning(JSError.make(UNKNOWN_DEFINE_WARNING, unknownDefine));
 compiler.addToDebugLog(unknownDefine;
 compiler.addToDebugLog(String.make(UNKNOWN_DEFINE_WARNING, unknownDefine));
 compiler.addToDebugLog("Unknown define " + defineName);
 compiler. addToDebugLog ( unknownDefine ) ; compiler. addToDebugLog ( unknownDefine ) ; } return changed ;
compiler.report(Unknown_DEFINES, unknownDefine);
compiler.reportChange();
 compiler. addToDebugLog ( unknownDefine ) ; compiler. reportChange ( ) ;
compiler.report(JSError.makeUnknown (unknownDefine));
compiler.report(unknownDefine
 compiler.addToDebugLog("Unused define " + defineName);
 compiler.addToDebugLog(report.report(JSError.make(UNKNOWN_DEFINE_WARNING, unknownDefine));
compiler.report(JSError.make(unknownDefine), unknownDefine);
 if ( unknownDefine!= null ) { compiler. reportCodeChange ( unknownDefine ) ; } } return changed ;
 compiler.addToDebugLog("Adding unknown define " + define);
 compiler.addToDebugLog("Error: " + unknownDefine); }
 compiler.addToDebugLog("Adding: ", unknownDefine));
compiler.report(JSError.make(UNKNOWN_DEFINE_WARNING, unknownDefine)) ; compiler.exit(1);
 compiler. addToDebugLog ( unknownDefine ) ; } compiler. reportCodeChange ( ) ;
 compiler.addToDebugLog(report).report(JSError.make(UNKNOWN_DEFINE_WARNING, unknownDefine));
 compiler.addToDebugLog("Unknown define!");
 if ( unknownDefine!= null ) { compiler. reportCodeChange ( unknownDefine ) ; } } }
 compiler.report(unknownDefine);
compiler.report(JSError.make(UNKNOWN_DEFINE_WARNING,  unknownDefine), unknownDefine));
 compiler.addToDebugLog(warnings.UNKNOWN_DEFINE_WARNING, unknownDefine));
 compiler.reportCodeChange(unknownDefine));
 compiler.addToDebugLog("Found unknown define " + unknownDefine); }
 compiler.report(JSError.make(UNKNOWN_DEFINES, unknownDefine)); } } else { return
 if ( unknownDefine!= null ) { compiler. addToDebugLog("Overriding unknown definition " + unknownDefine);
 compiler.addToDebugLog("Adding "+(unknownDefine));
 compiler.addToDebugLog(Warn.UNKNOWN_DEFINE_WARNING, unknownDefine));
compiler.report(unknownDefinition);
 compiler.report(JSError.make(UNKNOWN_DEFINES, unknownDef));
 compiler.addToDebugLog("Ignoring unknown definition " + unknownDefine);
 compiler.addToDebugLog("Unknown define ", unknownDefine));
 compiler.report(JSError.make(UNKNOWN_DEFINES)) ;
 if ( unknownDefine!= null ) { compiler. addToDebugLog("Overriding unknown definition " + defineName);
compiler.report(JSError.make(UNKNOWN_DEFINE_WARNING,  unknownDef));
 compiler.report(JSError.make(UNKNOWN_DEFINES, unknownDefinition));
compiler.report(JSError.make(UNKNOWN_DEFINE_WARNING, unknownDefine, unknownDefine));
 compiler.addToDebugLog("Unknown definition").report(JSError.make(UNKNOWN_DEFINE_WARNING, unknownDefine));
 if ( unknownDefine!= null ) { compiler. addToDebugLog ( unknownDefine ) ; } }
compiler.report(JSError.make(unknownDefine, UNKNOWN_DEFINE_WARNING, unknownDefine));
 compiler.reportUnknown (unknownDefine));
compiler.report(JSError.make(UNKNOWN_DEFINE_WARNING,  unknownDefine), unknownDefine);
 compiler.addToDebugLog(unknownDefine);
 compiler.addToDebugLog("Warning");
compiler.reportUnknownDefine ( unknownDefine ) ;
 compiler.addToDebugLog("Unknown definition");
 compiler.addToDebugLog("Unknown define "+unknownDefine));
 if ( unknownDefine!= null ) { compiler. addToDebugLog("Overriding unknown define " + defineName);
compiler. addToDebugLog ( unknownDefine )
compiler. reportCodeChange ( unknownDefine ) ;
 compiler.addToDebugLog("Adding "(JSError.make(UNKNOWN_DEFINE_WARNING, unknownDefine));
 if ( unknownDefine!= null ) { compiler. reportCodeChange ( unknownDefine, unknownDefine ) ; }
 compiler.addToDebugLog("Ignoring unknown define");
 compiler.addToDebugLog("Adding unknown define " + unknownDefine + "");
 compiler.report(Unknown_DEFINES);
compiler.report(JSError.make(UNKNOWN_DEFINE_WARNING, unknownDefine, null));
 if ( unknownDefine!= null ) { compiler. reportCodeChange ( unknownDefine. toString ( ) ) ;
 compiler. addToDebugLog ( unknownDefine ) ; } compiler. pop ( ) ;
 compiler. addToDebugLog ( unknownDefine ) ; } compiler. reportCodeChange ( )
 compiler. addToDebugLog ( unknownDefine ) ; compiler. exit ( ) ; }
compiler.report(JSError.UnknownDefine, unknownDefine ) ;
 compiler.addToDebugLog("Adding ", unknownDefine));
 compiler.report(); compiler.report(JSError.make(UNKNOWN_DEFINE_WARNING, unknownDefine));
compiler.report(JSError.make(UNKNOWN_DEFINE_WARNING, unknownDefine)) ; compiler.reportCodeChange(); }
 compiler.report(JSError.make(UNKNOWN_DEFINES, unknownDefine)); } else { return
 compiler.report( Messages.make(UNKNOWN_DEFINE_WARNING, unknownDefine));
 compiler.addToDebugLog("Ignoring unknown define " + define);
 compiler.addToDebugLog(MessageBuilder.make(UNKNOWN_DEFINE_WARNING, unknownDefine));
 compiler.reportWarning(Warn.make(UNKNOWN_DEFINE_WARNING, unknownDefine));
 if ( unknownDefine!= null ) { compiler. reportCodeChange ( unknownDefine ) ; changed = true ;
 compiler.writer().report(JSError.make(UNKNOWN_DEFINE_WARNING, unknownDefine));
 compiler.addToDebugLog("Error: " + defineName);
 compiler. addToDebugLog ( unknownDefine ) ; compiler. reportBug ( ) ;
 compiler.addToDebugLog("Adding " +(UNKNOWN_DEFINE_WARNING, unknownDefine));
 if ( unknownDefine!= null ) { compiler. reportCodeChange ( unknownDefine ) ; } changed = true ;
compiler.reportCodeChange(); }
 compiler.report(unknownDefine); }
 compiler.addToDebugLog(message.make(UNKNOWN_DEFINE_WARNING, unknownDefine));
 compiler. addToDebugLog ( unknownDefine ) ; compiler. addToDebugLog ( "" ) ;
 compiler.addToDebugLog(DEBUG_UNKNOWN_DEFINE_WARNING, unknownDefine));
 compiler.report(JSError.make(UNKNOWN_DEFINES, unknownDefine)); } } else { {
compiler.reportCodeChange(unknownDefine
 compiler.addWarning(UNKNOWN_DEFINE_WARNING, unknownDefine));
 compiler.addToDebugLogmake(UNKNOWN_DEFINE_WARNING, unknownDefine));
compiler.report(JSError.make(UNKNOWN_DEFINE_WARNING,  unknownDefine)) ; }
 compiler.addToDebugLog(CJSError.make(UNKNOWN_DEFINE_WARNING, unknownDefine));
 compiler.addToDebugLog("Adding define ", unknownDefine));
compiler.report(Unknown_DEFINES, unknownDefine
 compiler.addToDebugLog().reportError(JSError.make(UNKNOWN_DEFINE_WARNING, unknownDefine));
 compiler.addToDebugLog("Unknown definition");
compiler.reportCodeChange ( unknownDefine ) ; }
 compiler.addToDebugLog(unknownDefinition));
compiler.reportCodeChange(comment);
 compiler. addToDebugLog ( unknownDefine ) ; compiler. addToDebugLog ( unknownDefine ) ; changed = true ;
 compiler. report ( JSError.make(UNKNOWN_DEFINES, unknownDefine)); } else
 compiler.addToDebugLog("".make(UNKNOWN_DEFINE_WARNING, unknownDefine));
 compiler. addToDebugLog ( unknownDefine ) ; } compiler. reportCodeChange ( ) ; }
 compiler.report(JSError.make(UNKNOWN_DEFINES, unusedReplacements, unknownDef));
 compiler. addToDebugLog ( unknownDefine. toString ( ), unknownDefine )
 if ( unknownDefine!= null ) { compiler. reportCodeChange ( unknownDefine ) ; } } return true ;
compiler.reportUnknownDefine(unknownDefine
 compiler. addToDebugLog ( unknownDefine ) ; compiler. addToDebugLog ( unknownDefine. trim ( ) )
 compiler.addToDebugLogWarning(JSError.make(UNKNOWN_DEFINE_WARNING, unknownDefine));
 compiler.addToDebugLog("Adding "(UNKNOWN_DEFINE_WARNING, unknownDefine));
 compiler.reportUnknownDefine(unknownDefine));
 compiler.addToDebugLog("Unknown definition!");
 compiler.reportUnknownDefinition(unknownDefine));
 compiler.addToDebugLog().addError(JSError.make(UNKNOWN_DEFINE_WARNING, unknownDefine));
 compiler.addToDebugLog(format(unknownDefine));
 compiler. addToDebugLog ( unknownDefine ) ; compiler. addToDebugLog ( unknownDefine ) ; compiler = null ;
 compiler.addToDebugLog("Error: " + unknownDefine + ".");
compiler.report(JSError.make(unknownDefine, unusedReplacements)) ;
 compiler.addToDebugLog("Invalid define ", unknownDefine));
 compiler.addToDebugLog(info, unknownDefine));
 if ( unknownDefine!= null ) { compiler. reportCodeChange ( unknownDefine ) ; } else { break ; } }
 if ( unknownDefine!= null ) { compiler. reportCodeChange ( unknownDefine ) ; } } } }
 compiler.warning(UNKNOWN_DEFINE_WARNING, unknownDefine));
 compiler.addToDebugLog("Warning").report(JSError.make(UNKNOWN_DEFINE_WARNING, unknownDefine));
 compiler.addToDebugLog("Unknown define " + define);
compiler.report(JSError.UnknownDefinitionUnknownDefine);
 compiler.addToDebugLog("Unknown define warning");
compiler. addToDebugLog ( unknownDefine
 compiler. addToDebugLog ( unknownDefine ) ; compiler. reportCodeChange ( unknownDefine )
 compiler.addToDebugLog("Adding unknown define(UNKNOWN_DEFINE_WARNING, unknownDefine));
 compiler.report(JSError.make(UNKNOWN_DEFINE_ERROR)) ;
 compiler. addToDebugLog ( unknownDefine ) ; compiler. addToDebugLog ( null ) ;
 if ( unknownDefine!= null ) { compiler. reportCodeChange ( unknownDefine ) ; break ; }
 compiler.addToDebugLog(new Error(UNKNOWN_DEFINE_WARNING, unknownDefine));
 compiler.reportWarning(MessageFormat.make(UNKNOWN_DEFINE_WARNING, unknownDefine));
 if (!changed) {
 compiler.addToDebugLog( Messages.make(UNKNOWN_DEFINE_WARNING, unknownDefine));
 if ( unknownDefine!= null ) { compiler. addToDebugLog ( unknownDefine ) ; } } }
 compiler. addToDebugLog ( unknownDefine ) ; compiler. reportCodeChange ( ) ; } }
 if (unknownDefine) {
 compiler.reportUnknown(define);
 compiler.logWarning("UNKNOWN_DEFINE_WARNING, unknownDefine));
 compiler.addToDebugLog("Unknown ", unknownDefine));
 compiler.addToDebugLog(warning(UNKNOWN_DEFINE_WARNING, unknownDefine));
compiler.reportCodeChange(unknownDefinition);
 compiler.report(JSError.make(UNKNOWN_DEFINES); }
 compiler.addToDebugLog("Adding unknown definition " + define);
 compiler.addToDebugLog(WARNING_UNKNOWN_DEFINE_WARNING, unknownDefine));
 compiler.addToDebugLog(Builder.make(UNKNOWN_DEFINE_WARNING, unknownDefine));
 compiler.addToDebugLog(format, unknownDefine));
 compiler.addToDebugLog(unknowndefine);
 compiler.reportWarning(.make(UNKNOWN_DEFINE_WARNING, unknownDefine));
 compiler.addToDebugLogString(unknownDefine));
compiler.report(JSError.make(UNKNOWN_DEFINE_WARNING, unknownDefine)) ; changed = true ;
 compiler.addToDebugLog("Unknown definition."));
 compiler.addToDebugLog.warning(UNKNOWN_DEFINE_WARNING, unknownDefine));
 compiler.addToDebugLog(SimpleJSError.make(UNKNOWN_DEFINE_WARNING, unknownDefine));
compiler.reportUnknownDefine ( unknownDefine ) ; }
 compiler.reportWarning(UNKNOWN_DEFINE_WARNING, unknownDefine));
 compiler.addToDebugLog("Adding unknown define");
 compiler.addToDebugLog(Message.make(UNKNOWN_DEFINE_WARNING, unknownDefine));
 compiler. addToDebugLog ( unknownDefine, unknownDefine ) ; changed = true ;
 compiler.addToDebugLog("Warning", Messages.make(UNKNOWN_DEFINE_WARNING, unknownDefine));
 compiler.addToDebugLog(unknownDefinition);
 compiler.debugLog().report(JSError.make(UNKNOWN_DEFINE_WARNING, unknownDefine));
 compiler.addToDebugLog(new Error(JSError.make(UNKNOWN_DEFINE_WARNING, unknownDefine));
 compiler.addDebugLog(UNKNOWN_DEFINE_WARNING, unknownDefine));
 compiler.addToDebugLog("Unknown defines").report(JSError.make(UNKNOWN_DEFINE_WARNING, unknownDefine));
 compiler.reportUnknownDefinition(unknownDefinition);
compiler.report(JSError.make(UNKNOWN_DEFINE_WARNING, unknownDefine, unknownDefine, unknownDefine));
compiler.report(JSError.make(unknownDefine, unknownDefine)) ; }
 compiler.addToDebugLog.warning(JSError.make(UNKNOWN_DEFINE_WARNING, unknownDefine));
 compiler.addToDebugLog(__UNKNOWN_DEFINE_WARNING, unknownDefine));
 compiler.reportWarning(Warnings.make(UNKNOWN_DEFINE_WARNING, unknownDefine));
 if ( unknownDefine!= null ) { compiler. reportCodeChange ( unknownDefine ) ; } else { break ; }
 compiler.addToDebugLogW(UNKNOWN_DEFINE_WARNING, unknownDefine));
 compiler.reportMissing(unknownDefine));
 if ( unknownDefine!= null ) { compiler. reportCodeChange ( unknownDefine ) ; } } } return compiler ;
 compiler.addToDebugLog(Warn.make(UNKNOWN_DEFINE_WARNING, unknownDefine));
compiler.report(JSError.make(unknownDef));
 throw unknownDefine;
 if ( unknownDefine!= null ) { compiler. addToDebugLog("Overriding unknown definition"); }
 compiler.reportCodeChange(); compiler.reportError(JSError.make(UNKNOWN_DEFINE_WARNING, unknownDefine));
compiler.report(JSError.Unknown);
 compiler.addToDebugLog(warn(UNKNOWN_DEFINE_WARNING, unknownDefine));
 compiler.getReporting ( ).report(JSError.make(UNKNOWN_DEFINE_WARNING, unknownDefine));
 compiler.addToDebugLog(UNUNKNOWN_DEFINE_WARNING, unknownDefine));
 compiler.warn(make(UNKNOWN_DEFINE_WARNING, unknownDefine));
 compiler.addToDebugLog("Unknown definition"));
 compiler.addToDebugLog("Unknown definition " + define);
 compiler. addToDebugLog ( unknownDefine, unknownDefine ) ; } return changed ;
 compiler.addToDebugLog(Warning.JSError.make(UNKNOWN_DEFINE_WARNING, unknownDefine));
compiler.report(JSError.make(UNKNOWN_DEFINE_WARNING, unknownDefine)); compiler. reportCodeChange ( ) ;
compiler.report(JSError.make(UNKNOWN_DEFINE_WARNING, unknownDefine, unknownDefineName));
compiler.report(JSError.make(UNKNOWN_DEFINE_WARNING, unknownDefine)); compiler. report ( unknownDefine ) ;
 compiler.addToDebugLog("Unknown "+unknownDefine));
compiler.report(JSError.Unknown (unknownDefine));
 compiler.addToDebugLog("add "+unknownDefine));
compiler.report(comment);
 compiler. addToDebugLog ( unknownDefine ) ; compiler. addToDebugLog ( unknownDefine. trim ( )));
compiler. reportCodeChange ( unknownDefine )
compiler.report(JSError.make(UNKNOWN_DEFINE_WARNING, unknownDefine + ": " + defineName));
 compiler.addToDebugLog("missing "+unknownDefine));
 compiler.addToDebugLog("Ignoring unknown definition");
compiler.report(JSError.UnknownDefine, unknownDefine ) ; }
 compiler.addToLog("UNKNOWN_DEFINE_WARNING, unknownDefine));
 compiler.reportUnknownDefinitionUnknownDefine;
 compiler.report(JSError.make(UNKNOWN_DEFINE_WARNING)) ;
 if ( unknownDefine!= null ) { compiler. addToDebugLog("Overriding unknown define"); }
 compiler. addToDebugLog ( unknownDefine ) ; compiler. addToDebugLog ( unknownDefine ) ; } } }
 compiler. addToDebugLog ( unknownDefine ) ; compiler. addToDebugLog ( unknownDefine ) ; } } } }
 compiler.addToDebugLog("missing ", unknownDefine));
 compiler.reportMissingUnknownDefine;
compiler.report(JSError.make(unknownDefine, compiler.addToDebugLog("Unknown define")));
 compiler.addToDebugLog("Warning"+JSError.make(UNKNOWN_DEFINE_WARNING, unknownDefine));
compiler.report(JSError.make(UNKNOWN_DEFINE_WARNING)) ;
compiler.report(JSError.make(UNKNOWN_DEFINE_WARNING, unknownDefine, unknownDefine, unusedReplacements));
 compiler.addToDebugLog("",unknownDefine));
 compiler.addToDebugLogln(unknownDefine));
 compiler.addToDebugLog(unknown");
 compiler.report(JSError.make(UNKNOWN_DEFINES)) }
compiler.report(JSError.make(unknownDefine, compiler.addToDebugLog(unknownDefine));
 compiler.addToLog(UNKNOWN_DEFINE_WARNING, unknownDefine));
 compiler.reportTextChange(unknownDefine));
 compiler.addToDebugLog().warning(JSError.make(UNKNOWN_DEFINE_WARNING, unknownDefine));
 compiler.addToDebugLogUnknownDefine;
 compiler.addToDebugLog("Adding " +(JSError.make(UNKNOWN_DEFINE_WARNING, unknownDefine));
 compiler.addToDebugLog(comment);
 compiler.addToDebugLog().error(JSError.make(UNKNOWN_DEFINE_WARNING, unknownDefine));
 compiler.addToDebugLog().make(UNKNOWN_DEFINE_WARNING, unknownDefine));
compiler.report(JSError.makeJSError ( unknownDefine ));
 compiler.addToDebugLog(true).report(JSError.make(UNKNOWN_DEFINE_WARNING, unknownDefine));
 compiler.addToDebugLog(unknownDef);
 compiler.addToDebugLog("Warning"); compiler.report(JSError.make(UNKNOWN_DEFINE_WARNING, unknownDefine));
compiler.report(JSError.UnknownDefine ( unknownDefine ) ) ;
 compiler.addToDebugLog("Unknown define"));
 compiler.addToDebugLog(unknownDefine.report(JSError.make(UNKNOWN_DEFINE_WARNING, unknownDefine));
compiler.reportCodeChange(Unknown_DEFINES);
 compiler.addToDebugLog("Unknown define",JSError.make(UNKNOWN_DEFINE_WARNING, unknownDefine));
 compiler.addToDebugLog("Ignoring unknown define: ");
 compiler.report(Unknown_DEFINE);
 compiler.addToDebugLog(unknowndefine));
compiler.reportCodeChange(Unknown_DEFINES); }
compiler.report(JSError.make(UNKNOWN_DEFINE_WARNING, unknownDefine, ""));
compiler.addToDebugLog("Unknown " + define");
 compiler.addToDebugLog("Unknown define."));
compiler.report(JSError.make(UNKNOWN_DEFINE_WARNING, unknownDefine), unknownDefine, unknownDefine ) ;
 compiler.addToDebugLog(" " +JSError.make(UNKNOWN_DEFINE_WARNING, unknownDefine));
compiler.report(JSError.make(unknownDefinition));
 compiler.addToDebugLog(unknownDef);
compiler.report(JSError.make(UNKNOWN_DEFINE_WARNING,  unknownDefine), unknownDefine); }
 compiler.getReportContext ( ).report(JSError.make(UNKNOWN_DEFINE_WARNING, unknownDefine));
 compiler.reportCodeChange(); }
compiler.report(JSError.make(unknownDefine), unknownDefine); }
 compiler.addToDebugLog("Invalid ", unknownDefine));
compiler.report(JSError.make(UNKNOWN_DEFINE_WARNING, unknownDefine)) ; } compiler. report ( ) ;
 compiler.addToDebugLog("Adding definition ", unknownDefine));
 compiler.addToDebugLog(def, unknownDefine));
compiler.report(JSError.make(UNKNOWN_DEFINE_WARNING, unknownDefine, unknownReplacements));
compiler.report(JSError.UnknownUnknownDefineUnknownDefine);
 compiler.addToDebugLog(warnings.make(UNKNOWN_DEFINE_WARNING, unknownDefine));
 compiler.reportUnknown (unknownDefinition);
 compiler.addWarning(make(UNKNOWN_DEFINE_WARNING, unknownDefine));
 compiler.comment(unknownDefine));
 compiler.addToDebugLog("Using "+(unknownDefine));
 compiler.reportUnknownDefine(unknown");
 compiler.addToDebugLog(Text.make(UNKNOWN_DEFINE_WARNING, unknownDefine));
compiler.report(Unknown_DEFINES); }
 compiler. addToDebugLog ( unknownDefine, unknownDefine ) ; } compiler = null ;
 compiler.addToDebugLogger("UNKNOWN_DEFINE_WARNING, unknownDefine));
compiler.report(unknownDefine, compiler.addToDebugLog(UNKNOWN_DEFINE_WARNING, unknownDefine));
 compiler. addToDebugLog ( unknownDefine, unknownDefine ) ; } } }
 compiler.addToDebugLog("Missing define").report(JSError.make(UNKNOWN_DEFINE_WARNING, unknownDefine));
compiler.report(JSError.UnknownUnknownDefinitionUnknownDefine);
compiler.report(JSError.make(UNKNOWN_DEFINE_WARNING, unknownDefine, unknownDefine, defineName));
 compiler.addToDebugLog(_UNKNOWN_DEFINE_WARNING, unknownDefine));
 if (missingDefine) {
 compiler.addToDebugLog("Unused define ");
 reportError(JSError.make(UNKNOWN_DEFINE_WARNING, unknownDefine));
 compiler.addToDebugLog(" " + Messages.make(UNKNOWN_DEFINE_WARNING, unknownDefine));
 compiler.exception.report(JSError.make(UNKNOWN_DEFINE_WARNING, unknownDefine));
 compiler.addToDebugLog("Adding " +make(UNKNOWN_DEFINE_WARNING, unknownDefine));
 compiler.reportCodeChange( Messages.make(UNKNOWN_DEFINE_WARNING, unknownDefine));
 compiler.reportCodeChange(changed);
compiler.reportUnknown ( unknownDefine
 compiler.addToDebugLog(null).report(JSError.make(UNKNOWN_DEFINE_WARNING, unknownDefine));
 compiler.addToDebugLog("Adding: "+unknownDefine));
compiler.report(JSError.make(UNKNOWN_DEFINE_WARNING,  unknownDefine, unusedReplacements)); }
 compiler.reportUnknown (unknownDefine);
 compiler.addToDebugLog(comment);
 compiler.logWarning(UNKNOWN_DEFINE_WARNING, unknownDefine));
compiler.report(JSError.makeUnknownDefine ( unknownDefine ));
compiler.report(JSError.make(UNKNOWN_DEFINE_WARNING, unknownDefine)); compiler. reportError ( unknownDefine )
compiler.report(JSError.make(UNKNOWN_DEFINE_WARNING, unknownDefine), unknownDefine ) ; } return changed ;
 compiler.addToDebugLog("Unknown");
compiler.report(JSError.make(unknownDefine, compiler.getLocation ( )));
compiler.report(JSError.makeUnknownDefine);
 compiler.addWarning( Messages.make(UNKNOWN_DEFINE_WARNING, unknownDefine));
 compiler.addToDebugLog.warn(JSError.make(UNKNOWN_DEFINE_WARNING, unknownDefine));
compiler.report(JSError.make(UNKNOWN_DEFINE_WARNING, unknownDefine)) ; } compiler. reportError ( ) ;
 compiler.addToDebugLog(messageFactory.make(UNKNOWN_DEFINE_WARNING, unknownDefine));
compiler.report(unknownDefine); compiler.exit(1);
 compiler.addToDebugLog(" " + IR.make(UNKNOWN_DEFINE_WARNING, unknownDefine));
compiler.reportUnknownDefine(unknownDefinition);
 compiler.reportCodeChange(); compiler.report.report(JSError.make(UNKNOWN_DEFINE_WARNING, unknownDefine));
 compiler.addToDebugLog(null,JSError.make(UNKNOWN_DEFINE_WARNING, unknownDefine));
compiler.report(JSError.make(unknownDefine, compiler.addToDebugLog("Unknown definition")));
 compiler.report (unknownDefine));
 compiler.addToDebugLog("_UNKNOWN_DEFINE_WARNING, unknownDefine));
compiler.report(JSError.make(UNKNOWN_DEFINE_WARNING), unknownDefine
compiler.exit();
 compiler. addToDebugLog ( unknownDefine, unknownDefine ) ; } compiler. break ;
 compiler.exception().report(JSError.make(UNKNOWN_DEFINE_WARNING, unknownDefine));
 compiler.addToDebugLogError(UNKNOWN_DEFINE_WARNING, unknownDefine));
compiler.report(JSError.make(UNKNOWN_DEFINE_WARNING, unknownDefine)); compiler. report ( UnknownDefine ) ;
compiler.report(Unknown_DEFINES);
compiler.report(JSError.make(unknownDefine, undefinedDefine));
 compiler.addToDebugLog(LJSError.make(UNKNOWN_DEFINE_WARNING, unknownDefine));
compiler.addToDebugLog("Unknown " + define);
compiler.report(JSError.make(UNKNOWN_DEFINE_WARNING, unknownDefine, compiler.getTypeRegistry().getNativeType()));
 compiler.addToDebugLog()).report(JSError.make(UNKNOWN_DEFINE_WARNING, unknownDefine));
 addWarning(UNKNOWN_DEFINE_WARNING, unknownDefine));
compiler.report(JSError.make(unknownDefineName));
 compiler.reportUnknown(unknownDefinition));
compiler.report(JSError.make(UNKNOWN_DEFINE_WARNING, unknownDefine)) ; } compiler. reportCodeChange ( )
 compiler.addDebugLog(make(UNKNOWN_DEFINE_WARNING, unknownDefine));
compiler.report(unknownDefine, null);
 compiler.addToDebugLog("warning(UNKNOWN_DEFINE_WARNING, unknownDefine));
 compiler.addToDebugLog Messages.make(UNKNOWN_DEFINE_WARNING, unknownDefine));
 compiler.addToDebugLog(Errors.make(UNKNOWN_DEFINE_WARNING, unknownDefine));
compiler.report(JSError.make(UNKNOWN_DEFINE_WARNING, unknownDefine, unknownDefine.getName()));
compiler.report(unknownDefine, unknownValue);
compiler.report(JSError.make(UNKNOWN_DEFINE_WARNING, unknownDefine, unknownDefine.toString()));
compiler.report(JSError.make(UNKNOWN_DEFINE_WARNING), unknownDefine);
 compiler.getContext ( ).report(JSError.make(UNKNOWN_DEFINE_WARNING, unknownDefine));
 compiler.addToDebugLog(CaughtJSError.make(UNKNOWN_DEFINE_WARNING, unknownDefine));
 compiler.addToDebugLog warning(UNKNOWN_DEFINE_WARNING, unknownDefine));
compiler.report(JSError.make(UNKNOWN_DEFINE_WARNING, unknownDefine, compiler.addToDebugLog("Unknown define")));
compiler.report(JSError.make(unknownDefine, compiler.getTypeRegistry().getUnknownType()));
 compiler.reportMissingUnknownDefine);
 compiler.error().report(JSError.make(UNKNOWN_DEFINE_WARNING, unknownDefine));
compiler.report(JSError.make ( unknownDefine )));
 compiler.addToDebugLog("Warning" +(JSError.make(UNKNOWN_DEFINE_WARNING, unknownDefine));
 compiler.reportCodeChange(unknown");
 compiler.addToDebugLog("").make(UNKNOWN_DEFINE_WARNING, unknownDefine));
 compiler.addToDebugLog(MessageContext.make(UNKNOWN_DEFINE_WARNING, unknownDefine));
 compiler.reportWarning(unknownDefine));
compiler.report(JSError.make(UNKNOWN_DEFINE_WARNING, unknownDefine, unknownDefine.getValue()));
 throw (JSError.make(UNKNOWN_DEFINE_WARNING, unknownDefine));
compiler.report(JSError.make(unknownDefine, null));
compiler.report(JSError.make(unknownDefine, compiler.addToDebugLog(unknownDefine))));
 compiler.reportJSError(JSError.make(UNKNOWN_DEFINE_WARNING, unknownDefine));
 compiler.getErrorReport ( ).report(JSError.make(UNKNOWN_DEFINE_WARNING, unknownDefine));
compiler.report(JSError.make(UNKNOWN_DEFINE_WARNING, unknownDefine.toLowerCase() )));
compiler.report(JSError.make(UNKNOWN_DEFINE_WARNING, unknownDefine, unusedReplacements, null));
compiler.report(JSError.make(UNKNOWN_DEFINE_WARNING, unusedReplacements, unknownDefine));
 compiler.reportCodeChange(); compiler.logError(JSError.make(UNKNOWN_DEFINE_WARNING, unknownDefine));
 if (ignoreUnknownDefine)
compiler.report(JSError.make(unknownDefine, compiler.getTypeRegistry().getType()));
compiler.report(JSError.make(UNKNOWN_DEFINE_WARNING,  unknownDefine, unknownDefine)) ; }
compiler.report(JSError.make(UNKNOWN_DEFINE_WARNING, unknownDefine, unusedReplacements, compiler));
compiler.report(JSError.make(unknownDefine.toString(), unknownDefine));
 compiler.reportUnknown(define));
 compiler.addToDebugLog("CODE_UNKNOWN_DEFINE_WARNING, unknownDefine));
compiler.report(JSError.make (UnknownDefine));
 compiler.getTypeRegistry( ).report(JSError.make(UNKNOWN_DEFINE_WARNING, unknownDefine));
 compiler.warn("UNKNOWN_DEFINE_WARNING, unknownDefine));
compiler.report(JSError.make(unknownDefine, compiler.addToDebugLog("Unknown " + name));
 compiler.addToDebugLog((unknownDefine));
 if ( unknownDefine!= null ) { compiler. reportCodeChange ( unknownDefine ) ; } } } } } }
 compiler.report(unknownDefinition));
 compiler.addToDebugLog("Adding unknown define " + unknownDefine + ");
 compiler.writeWarning(UNKNOWN_DEFINE_WARNING, unknownDefine));
compiler.report(JSError.UnknownDefineUnknownDefine); }
 compiler.errors.report(JSError.make(UNKNOWN_DEFINE_WARNING, unknownDefine));
compiler.report(JSError.make(unknownDefine, compiler.addToDebugLog("Unknown " + define));
compiler.report(JSError.UnknownDefinition (unknownDefine));
 compiler.reportCodeChange(unknownDefinition;
compiler.reportCodeChange( unknownDefine + " " );
compiler.report(JSError.make(UNKNOWN_DEFINE_WARNING, unknownDefine)) ; changed = true ; }
 compiler.addToDebugLog.make(UNKNOWN_DEFINE_WARNING, unknownDefine));
 compiler.reportCodeChange(); compiler.context.report(JSError.make(UNKNOWN_DEFINE_WARNING, unknownDefine));
 compiler.reportUnknown(defineName));
compiler.report(JSError.UnknownDefine: unknownDefine); }
compiler.reportUnknownDefinition(unknownDefine
compiler.report(JSError.make(UNKNOWN_DEFINE_WARNING, unknownDefine, unknownDefine, null));
compiler.report(JSError.make(UNKNOWN_DEFINE_WARNING, unknownDefine)) ; compiler.reportError ( unknownDefine);
compiler.report(JSError.make(UNKNOWN_DEFINE_WARNING, unknownDefine.toString() )));
compiler.report(JSError.make(UNKNOWN_DEFINE_WARNING, unknownDefine, compiler.addToDebugLog(unknownDefine));
 reportWarning( Messages.make(UNKNOWN_DEFINE_WARNING, unknownDefine));
compiler.report(unknownDefine + '\n');
compiler.report(JSError.make(UNKNOWN_DEFINE_WARNING, unknownDefine, compiler.addToDebugLog("Unknown " + name));
 compiler.addToDebugLog("Ignoring _UNKNOWN_DEFINE_WARNING, unknownDefine));
compiler.report(JSError.make(UNKNOWN_DEFINE_WARNING, unknownDefine, compiler.addToDebugLog("Unknown definition detected")));
compiler.report(unknownDefine, unknownDefines);
 compiler.addToDebugLog("Warning:"(JSError.make(UNKNOWN_DEFINE_WARNING, unknownDefine));
 compiler.reportUnknownDefine(...);
 compiler.report(UnknownDefine);
 compiler.ignoreUnknownDefine;
 compiler.addToDebugLog("Unknown define:"(JSError.make(UNKNOWN_DEFINE_WARNING, unknownDefine));
 compiler.addToDebugLog(plugin, unknownDefine));
 compiler.addToDebugLog("Adding unknown define " + unknownDefine + "";
 compiler.addToWarning(make(UNKNOWN_DEFINE_WARNING, unknownDefine));
 compiler.addToDebugLog(EJSError.make(UNKNOWN_DEFINE_WARNING, unknownDefine));
compiler.report(JSError.make(UNKNOWN_DEFINE_WARNING, unknownDefine )));
compiler.report(JSError.make(UnknownDefine, unknownDefine));
compiler.reportWarning();
compiler.report(JSError.make(UNKNOWN_DEFINE_WARNING, unknownDefine))();
compiler.report(JSError.UnknownDefineUnknown (unknownDefine));
 compiler.addToDebugLog("Unknown define " + define());
 compiler.error(JSError.make(UNKNOWN_DEFINE_WARNING, unknownDefine));
compiler.report(Unknown_DEFINES + defineName);
compiler.report(JSError.make(UNKNOWN_DEFINE_WARNING, unknownDefine, "Unknown define " + name));
compiler.report(JSError.make(UNKNOWN_DEFINE_WARNING, unknownDefine, compiler.addToDebugLog("Unknown define warning")));
 compiler.addToDebugLog(Report.report(JSError.make(UNKNOWN_DEFINE_WARNING, unknownDefine));
compiler.report(JSError.make(unknownDefine + ": " + defineName));
compiler.reportCodeChange( unknownDefine + ' ' );
 compiler.getCurrent ( ).report(JSError.make(UNKNOWN_DEFINE_WARNING, unknownDefine));
compiler.report(missingDefine, compiler.addToDebugLog(UNKNOWN_DEFINE_WARNING, unknownDefine));
compiler.report(JSError.make(unknownDefine, unknownDefineName));
 compiler.addToDebugLog(block, unknownDefine));
compiler.report(JSError.make(UNKNOWN_DEFINE_WARNING, unknownDefine)); compiler. reportError ( ) ; }
compiler.report(JSError.make(UNKNOWN_DEFINE_WARNING, unknownDefine)) ; compiler.exit(0);
compiler.report(JSError.UnknownUnknownDefine); }
compiler.report(JSError.make(unknownDefine, unusedReplacements)) ; }
 compiler.addToDebugLog(comment));
compiler.report(JSError.UnknownUnknownDefinition); }
 compiler.reportUnknownDefinition(unknownDefinition;
 compiler.reportCodeError(InternalJSError.make(UNKNOWN_DEFINE_WARNING, unknownDefine));
compiler.report(JSError.make(UNKNOWN_DEFINE_WARNING, unknownDefine, unknownDefine.toLowerCase() )));
 compiler.addToDebugLog("Replacing (UNKNOWN_DEFINE_WARNING, unknownDefine));
 compiler.reportCodeChange( ).report(JSError.make(UNKNOWN_DEFINE_WARNING, unknownDefine));
 compiler.reportUnknownUnknownDefine;
 compiler.logToDebugLog("UNKNOWN_DEFINE_WARNING, unknownDefine));
 compiler.reportUnknownDefine(missing);
 compiler.reportUnknown (unknown");
compiler.report(JSErrorUnknownDefinition);
 compiler.reportUnknownDefinition(define);
 compiler.getError ( ).report(JSError.make(UNKNOWN_DEFINE_WARNING, unknownDefine));
compiler.report(JSError.make(UNKNOWN_DEFINE_WARNING, unknownDefine, unusedReplacements, false));
compiler.report(new IllegalArgumentException(String.format(UNKNOWN_DEFINE_WARNING, unknownDefine));
compiler.report(JSError.makeError ( unknownDefine ) ) ; }
compiler.report(JSError.make(unknownDefine, compiler.addToDebugLog("Unknown")));
compiler.reportBug ( unknownDefine
compiler.report(JSError.make(unknownDefine, unknownDefineParent));
 compiler.reportWarning(String.make(UNKNOWN_DEFINE_WARNING, unknownDefine));
compiler.report(JSError.make(UNKNOWN_DEFINE_WARNING), unknownDefine));
compiler.reportChanges();
compiler.report(JSError.make(UNKNOWN_DEFINE_WARNING, unknownDefine)) ; } compiler.exit();
compiler.report(JSError.unknownDefine);
compiler.report(JSError.make(unknownDefine, undefinedDefines));
compiler.report(JSError.make(unknownDefine, unknownDefine.getPath ( )));
compiler.report(JSError.make(UNKNOWN_DEFINE_WARNING, unknownDefine, compiler.addToDebugLog("Unknown " + define));
compiler.report(JSError.make(unknownDefine, unknownDefine.toString ( )));
 compilerContext.report(JSError.make(UNKNOWN_DEFINE_WARNING, unknownDefine));
compiler.report(unknownDefine + ".");
 compiler.report(unknowndefine));
 compiler.addToDebugLog warn(UNKNOWN_DEFINE_WARNING, unknownDefine));
compiler.report(JSError.make(missingDefine, defineName));
compiler.report(JSError.make(unknownDefine, compiler.addToDebugLog("Unknown defines")));
 compiler.getReport()().report(JSError.make(UNKNOWN_DEFINE_WARNING, unknownDefine));
compiler.report(JSError.make(UNKNOWN_DEFINE_WARNING, unknownDefine, unusedReplacementsString));
 compiler.reportError( Messages.make(UNKNOWN_DEFINE_WARNING, unknownDefine));
compiler.report(JSError.make(unknownDefine, unknownReplacements));
 compiler.debug().report(JSError.make(UNKNOWN_DEFINE_WARNING, unknownDefine));
compiler.report(JSError.makeUnknownDefinition());
compiler.report(JSError.make(UNKNOWN_DEFINE_WARNING, unknownDefine)) ; compiler.exit(1); }
compiler.reportCodeChange( unknownDefine + ".");
compiler.report(JSError.make(unknownDefine + ": " + compiler.getLocation()));
 throw unknownDefine);
compiler.report(unknownDefine); compiler.exit(0);
compiler.reportUnknownDefinition();
 compiler.reportWarning( Message.make(UNKNOWN_DEFINE_WARNING, unknownDefine));
compiler.report(JSError.make(unknownDefine, compiler.addToDebugLog(info))));
compiler.report(JSError.make(unknownDefine, "Unknown define"));
compiler.report(JSError.make(unknownDefine, unknownDefine, null));
 compiler.reportMissing(unknownDefinition));
compiler.report(JSError.make(UNKNOWN_DEFINE_WARNING, unknownDefine)); compiler.exitCodeChange();
compiler.report(JSError.makeError ( unknownDefine ));
compiler.report(JSError.make(UNKNOWN_DEFINE_WARNING, unknownDefine + "."));
compiler.report(JSError.make(UNKNOWN_DEFINE_WARNING, unknownDefine, compiler));
compiler.report(JSError.make(unknownDefine, unknownDefine.getString ( )));
compiler.report(JSError.UnknownDefine unknownDefine);
compiler.reportCodeChange(missing);
compiler.report(unknownDefine, compiler.formatMessage(UNKNOWN_DEFINE_WARNING, unknownDefine));
compiler.report(JSError.make(unknownDefine, compiler.getLocation ())));
compiler.report(JSError.make(UNKNOWN_DEFINE_WARNING, unknownDefine)) ; compiler.reportCodeChange(); } }
 compiler.reportUnknown(unknown);
compiler.report(JSError.make(unknownDefine, unknownDefine, unknownDefineParent));
compiler.report(unknownDef);
compiler.report(UnknownDefine); }
compiler.report(JSError.make(UNKNOWN_DEFINE_WARNING, unknownDefine, unusedReplacements, compiler.getLocation()));
compiler.report(JSError.make(UNKNOWN_DEFINE_WARNING, unknownDefine), null); }
compiler.report(JSError.make(UNKNOWN_DEFINE_WARNING, unknownDefine, compiler.addToDebugLog("Unknown definition")));
 compiler.addToDebugLog(", unknownDefine));
compiler.report(unknownDefine), null);
 compiler.reportSourceChange(unknownDefine));
compiler.report(JSError.make(unknownDefine, defineName, UNKNOWN_DEFINE_WARNING, unknownDefine));
 compiler.addToDebugLog()(JSError.make(UNKNOWN_DEFINE_WARNING, unknownDefine));
compiler.addToDebugLog("Adding unknown definition.");
compiler.report(JSError.makeUnknown());
 unknownDefine += "";
 unknownDefine = null;
compiler.report(JSError.make(UNKNOWN_DEFINE_WARNING, unknownDefine, unknownDefine)); } return changed ;
compiler.report(JSError.make(UNKNOWN_DEFINE_WARNING, unknownDefine.getString ())));
compiler.report(JSError.make(UNKNOWN_DEFINE_WARNING, unknownDefinition));
 compiler.logWarning(make(UNKNOWN_DEFINE_WARNING, unknownDefine));
 compiler.ignoreNode(unknownDefine));
compiler.report(JSError.make(unknownDefine, unusedReplacements, UNKNOWN_DEFINE_WARNING, unknownDefine));
 compiler.addToDebugLogs(JSError.make(UNKNOWN_DEFINE_WARNING, unknownDefine));
compiler.reportUnknownDefine(); }
 compiler.reportUnusedDefinition(unknownDefine));
 compiler.reportUnknown(missing);
compiler.report(JSError.make(UNKNOWN_DEFINE_WARNING, unknownDefine)) ; compiler.exit(); }
 compiler.errors().report(JSError.make(UNKNOWN_DEFINE_WARNING, unknownDefine));
compiler.report(JSError.make(unknownDefine, compiler.getCurrentLocation()));
compiler.report(JSError.make(UNKNOWN_DEFINE_WARNING, unknownDefine, unknownDefine.toString(), unknownDefine));
compiler.report(JSError.make(UNKNOWN_DEFINE_WARNING, unknownDefine.getName()));
 compiler.warn(Text.make(UNKNOWN_DEFINE_WARNING, unknownDefine));
compiler.report(unknownDefine, unknownDefine); } }
compiler.report(JSError.make(UnknownDefineError. class, unknownDefine));
compiler.report(JSError.make(UNKNOWN_DEFINE_WARNING, unknownDefine, unknownDefineParent));
compiler.report(JSError.make(UNKNOWN_DEFINE_WARNING, unknownDefine, unusedReplacements.keys(), unknownDefine));
 compiler.warning("UNKNOWN_DEFINE_WARNING, unknownDefine));
compiler.report(JSError.make(unknownDefine, unknownDefine)); } }
compiler.report(JSError.make(UNKNOWN_DEFINE_WARNING, unknownDefine)) ; compiler.exitCodeChange(); }
 if (ignoreUnknownDefines)
 compiler.reportInternalError(JSError.make(UNKNOWN_DEFINE_WARNING, unknownDefine));
 compiler.reportUnknown (unknown));
compiler.report(JSError.make(UNKNOWN_DEFINE_WARNING, unknownDefine)) ; compiler.addToDebugLog(comment);
 compiler.reportCodeChange);
compiler.report(JSError.make(unknownDefine, this));
compiler.report(unknownDefine + " ");
compiler.report(JSError.make(unknownDefine + ": " + compiler));
compiler.report(JSError.makeUnknown (unknownDef));
compiler.report(JSError.UnknownDefinition);
compiler.report(JSError.make(UNKNOWN_DEFINE_WARNING, unknownDefine), unknownDefine, null ) ;
compiler.report(JSError.UNKNOWN);
compiler.report(JSError.make(unknownDefine))();
 reportWarning(UNKNOWN_DEFINE_WARNING, unknownDefine));
 compiler.reportCaughtException(JSError.make(UNKNOWN_DEFINE_WARNING, unknownDefine));
compiler.report(JSError.make(unknownDefine, unknownDefine.toLowerCase() )));
 compiler.reportError(InternalJSError.make(UNKNOWN_DEFINE_WARNING, unknownDefine));
compiler.report(JSError.makeJSErrorUnknownDefine); }
 compiler.report(Context.make(UNKNOWN_DEFINE_WARNING, unknownDefine));
compiler.report(JSError.make(UNKNOWN_DEFINE_WARNING, unknownDefineString));
 warning(UNKNOWN_DEFINE_WARNING, unknownDefine));
compiler.report(JSError.UnknownUnknownDefine());
 addWarning( Messages.make(UNKNOWN_DEFINE_WARNING, unknownDefine));
compiler.report(JSError.makeUnknownDefine ( unknownDefine )));
 compiler.reportCodeError(CJSError.make(UNKNOWN_DEFINE_WARNING, unknownDefine));
 compiler.reportCaughtError(JSError.make(UNKNOWN_DEFINE_WARNING, unknownDefine));
compiler.report(JSError.make(UNKNOWN_DEFINE_WARNING, unknownDefine, unknownDefine.getValue));
compiler.report(JSError.make(UNKNOWN_DEFINE_WARNING, unknownDefine, this));
 compiler.addUnknownDefine;
 compiler.warning(make(UNKNOWN_DEFINE_WARNING, unknownDefine));
 compiler.reportCodeChange(report.report(JSError.make(UNKNOWN_DEFINE_WARNING, unknownDefine));
compiler.report(JSError.make(UNKNOWN_DEFINE_WARNING, unknownDefine, false));
compiler.report(JSError.make(unknownDefine.toString ( )));
 report.make(UNKNOWN_DEFINE_WARNING, unknownDefine));
 compiler.reportWarnings(UNKNOWN_DEFINE_WARNING, unknownDefine));
 compiler.reportUnknown (defineName, unknownDefine));
compiler.report(JSError.make(unknownDefine, definitionName));
 compiler.getCurrentReport().report(JSError.make(UNKNOWN_DEFINE_WARNING, unknownDefine));
compiler.report(JSError.make(UnknownDefine, defineName));
compiler.report(new IllegalArgumentException(UNKNOWN_DEFINE_WARNING, unknownDefine));
compiler.report(JSError.make(unknownDefineString));
compiler.report(JSError.make(UNKNOWN_DEFINE_WARNING, unknownDefine, unusedReplacements, unknownDefine));
 unknownDefine = "";
compiler.report(JSError.UnknownDefine (UnknownDefine)) ; }
compiler.report(JSError.make(UNKNOWN_DEFINE_WARNING, unknownDefine)) ; compiler.exit();
compiler.report(JSError.make(unknownDefine, unknownDefine.getString ())));
compiler.report(JSError.make(UNKNOWN_DEFINE_WARNING,  unknownDefine, unknownDefine)); } }
 compiler.add (defineName, unknownDefine));
compiler.report(JSError.makeUnknown ( unknownDefine )));
compiler.report(JSError.make(UNKNOWN_DEFINE_WARNING, unknownDefine, unknownDefine.getName));
compiler.report(JSError::UnknownUnknownDefine);
 compiler.reportWarning(Warning.JSError.make(UNKNOWN_DEFINE_WARNING, unknownDefine));
compiler.report(JSError.UnknownDefine); }
compiler.report(JSError.make(UNKNOWN_DEFINE_WARNING, unknownDefine, definitionName));
 compiler.error(UNKNOWN_DEFINE_WARNING, unknownDefine));
 compiler.reportWarning( messages.make(UNKNOWN_DEFINE_WARNING, unknownDefine));
compiler.report(JSError.make(UNKNOWN_DEFINE_WARNING, unknownDefine, unknown_DEFINES));
compiler.report(JSError.make(unknownDefine, compiler));
compiler.report(unknownDefine, compiler.createWarnings(UNKNOWN_DEFINE_WARNING, unknownDefine));
 compiler.reportUnknownReplacement(unknownDefine));
 add(unknownDefine));
 compiler.report(unknownDef));
compiler.report(JSError.make(UNKNOWN_DEFINE_WARNING, unknownDefine, unknownDefine.toString().toString()));
 compiler.getReportFactory ( ).report(JSError.make(UNKNOWN_DEFINE_WARNING, unknownDefine));
 compiler.warn(unknownDefinition));
 compiler.reportError(CaughtJSError.make(UNKNOWN_DEFINE_WARNING, unknownDefine));
compiler.report(JSError.make(UNKNOWN_DEFINE_WARNING, unknownDefine)) ; compiler.exit(0); }
compiler.report(JSError.make(UNKNOWN_DEFINE_WARNING, unknownDefine)) ; } compiler = null ;
 compiler.warning(unknownDefine));
 unusedReplacements = null;
compiler.report(JSError.makeUnknownDefineUnknownDefine); }
 compiler.warnings(UNKNOWN_DEFINE_WARNING, unknownDefine));
 compiler.exceptions().report(JSError.make(UNKNOWN_DEFINE_WARNING, unknownDefine));
 compiler.reportExpectedWarning(JSError.make(UNKNOWN_DEFINE_WARNING, unknownDefine));
 compiler.reportExpectedError(JSError.make(UNKNOWN_DEFINE_WARNING, unknownDefine));
 compiler.report ( ).report(JSError.make(UNKNOWN_DEFINE_WARNING, unknownDefine));
 compiler.addWarningMessage(UNKNOWN_DEFINE_WARNING, unknownDefine));
 compiler.reportMissingDefinition(unknownDefine));
compiler.report(JSError.make(UNKNOWN_DEFINE_WARNING, unknownDefine)) ; compiler.addToDebugLog(changed);
compiler.report(JSError.make(unknownDefine, unknownDefine, unknownDefine.message));
compiler.report(JSError, unknownDefine);
compiler.reportBug ( ) ;
compiler.report(JSError.make(unknownDefine, ""));
compiler.report(JSError.make(unknownDefine, unknownDefine.message));
compiler.report(JSError.make(unknownDefine, unknownValue));
compiler.report(JSError.make(unknownDefine, compiler.getCurrentLine ( )));
compiler.report(JSError.makeUnknownDefine); }
 compiler.reportWarning(InternalJSError.make(UNKNOWN_DEFINE_WARNING, unknownDefine));
 compiler.reportWarningImpl(UNKNOWN_DEFINE_WARNING, unknownDefine));
compiler.report(JSError.make(unknownDefine + ": " + compiler.location));
compiler.report(JSError.make(unknownDefine, unknownDefine.line));
compiler.report(JSErrorUnknownDefine); }
compiler.report(JSError.make(UNKNOWN_DEFINE_WARNING,  unknownDefine, unusedReplacements)); } }
 compiler.getCurrentContext().report(JSError.make(UNKNOWN_DEFINE_WARNING, unknownDefine));
compiler.report(unknownDefine, compiler.createSyntaxWarning(UNKNOWN_DEFINE_WARNING, unknownDefine));
 addUnknownDefine);
compiler.report(JSError.make(unknownDefine, unknownDefineLocation));
compiler.report(JSError.make(UNKNOWN_DEFINE_WARNING,  unknownDefine), unknownDefine); } }
compiler.report(JSError.UnknownDefine, unknownDefine, null);
compiler.report(JSError.make(UNKNOWN_DEFINE_WARNING, unknownDefine, unusedReplacements[0]));
compiler.report(JSError.make(UNKNOWN_DEFINE_WARNING, unknownDefine, unknownDefine, unusedReplacements)); }
 compiler.reportUnknownDefinition);
compiler.report(JSError.make(unknownDefine, unusedReplacements, unknownDefine));
 compiler.report.report(JSError.make(UNKNOWN_DEFINE_WARNING, unknownDefine));
 compiler.error(unknownDefine));
compiler.report(JSError.make(UNKNOWN_DEFINE_WARNING, unknownDefine, unknownDefine.getString ())));
 compiler.warn(unknowndefine));
 compiler.getReport()).report(JSError.make(UNKNOWN_DEFINE_WARNING, unknownDefine));
 compiler.addWarning(unknownDefine));
compiler.report(JSError.make(UNKNOWN_DEFINE_WARNING, unknownDefine, unknownDefine.toString() )));
compiler.report(JSError.make(UNKNOWN_DEFINE_WARNING, unknownDefine, compiler.addToDebugLog(info))));
compiler.report(JSError.make(unknownDefine, context));
 compiler.reportSourceWarning(JSError.make(UNKNOWN_DEFINE_WARNING, unknownDefine));
compiler.report(JSError.make(unknownDefine, compiler.getSourceLocation ( )));
compiler.report(JSError.make(UNKNOWN_DEFINE_WARNING, unknownDefine)) ; } } return compiler ;
 compiler.reportUnknownLine(unknownDefine));
compiler.report(JSError.make(UNKNOWN_DEFINE_WARNING, unknownDefine)) ; } }
 compiler.warn(JSError.make(UNKNOWN_DEFINE_WARNING, unknownDefine));
 compiler.addReplacement(format, unknownDefine));
 compiler.addError(def, unknownDefine));
 throw Messages.make(UNKNOWN_DEFINE_WARNING, unknownDefine));
compiler.report(JSError.make(UNKNOWN_DEFINE_WARNING, unknownDefine, unknownDefine, unknownDefineName));
 compiler.report(Report.make(UNKNOWN_DEFINE_WARNING, unknownDefine));
compiler.report(JSError.make(unknownDefineName, unknownDefine));
compiler.report(Format.formatMessage(UNKNOWN_DEFINE_WARNING, unknownDefine));
 compiler.reportWarning(UNUNKNOWN_DEFINE_WARNING, unknownDefine));
compiler.report(JSError.make(UNKNOWN_DEFINE_WARNING + unknownDefine));
 compiler.addWarningf(UNKNOWN_DEFINE_WARNING, unknownDefine));
compiler.report(new IllegalArgumentException(formatMessage(UNKNOWN_DEFINE_WARNING, unknownDefine));
compiler.report(JSError.UnknownDefine());
 compiler.ignore(define);
compiler.report(JSError.UnknownDefineUnknownDefinition); }
compiler.report(JSError.make(UNKNOWN_DEFINE_WARNING, unknownDefine, null)); }
 changed = changed ||
 compiler.reportError().report(JSError.make(UNKNOWN_DEFINE_WARNING, unknownDefine));
compiler.report(JSError.make(UNKNOWN_DEFINE_WARNING, unknownDefine, unknownDefine.getString ( )));
 unknownDefine ++;
compiler.report ( ) ;
compiler.report(JSError.make(unknowndefine));
compiler.report(JSError.make(UNKNOWN_DEFINE_WARNING, unknownDefine)) ; } } }
 compiler.warn(Context.make(UNKNOWN_DEFINE_WARNING, unknownDefine));
 compiler.reportLocalError(JSError.make(UNKNOWN_DEFINE_WARNING, unknownDefine));
compiler.report(JSError.make(unknownDefine + ": " + compiler.name));
compiler.report(unknownDefine, compiler.getCustomMessage(UNKNOWN_DEFINE_WARNING, unknownDefine));
compiler.report(JSError.make(UNKNOWN_DEFINE_WARNING, unknownDefine)) ; } return true ;
 compiler.addComment(unknownDefine));
compiler.report(unknownDefine, compiler.createWarningMessage(UNKNOWN_DEFINE_WARNING, unknownDefine));
 compiler.addToDebugmake(UNKNOWN_DEFINE_WARNING, unknownDefine));
 compiler.disreport(JSError.make(UNKNOWN_DEFINE_WARNING, unknownDefine));
compiler.report(JSError.make(missingDefine, unusedReplacements, UNKNOWN_DEFINE_WARNING, unknownDefine));
compiler.report(JSError.make(unknownDefine, null, UNKNOWN_DEFINE_WARNING, unknownDefine));
 warn(unknownDefine));
 compiler.reportUnusedString(unknownDefine));
 compiler.reportWarningmake(UNKNOWN_DEFINE_WARNING, unknownDefine));
compiler.report(JSError.make(UNKNOWN_DEFINE_WARNING, unknownDefine, unknownDefine.toLowerCase()+));
 if (ignoreUnknowns)
 compiler.addToErrorLog(UNKNOWN_DEFINE_WARNING, unknownDefine));
compiler.report(unknownDefine, compiler.message(UNKNOWN_DEFINE_WARNING, unknownDefine));
 compiler.addToDebugLog("";
 compiler.analyzer.report(JSError.make(UNKNOWN_DEFINE_WARNING, unknownDefine));
 compiler.throw(unknownDefine));
 JSError.report(JSError.make(UNKNOWN_DEFINE_WARNING, unknownDefine));
compiler.report(JSError.make(UNKNOWN_DEFINE_WARNING), unknownDef);
compiler.report(unknownDefine, compiler.getWarningMessage(UNKNOWN_DEFINE_WARNING, unknownDefine));
compiler.report(UnknownDefine);
 compiler.exceptions.report(JSError.make(UNKNOWN_DEFINE_WARNING, unknownDefine));
compiler.report(JSError.make(Unknown_DEFINES, UNKNOWN_DEFINE_WARNING, unknownDefine));
 changed = false;
 if (switch) {
compiler.report(JSError.make(UnknownDefineError. class, UNKNOWN_DEFINE_WARNING, unknownDefine));
compiler.report(JSError.make(UNKNOWN_DEFINE_WARNING, unknownDefine, compiler.getLocation()));
compiler.report(JSError.make(UnknownDefineException. class, unknownDefine));
compiler.report(JSError.make(unknownDefine, compiler.getLocale ( ), unknownDefine));
compiler.report(Format.format(UNKNOWN_DEFINE_WARNING, unknownDefine));
compiler.report(unknownDefine, errorHandler);
compiler.report(JSError.make(Unknown_DEFINE_ERROR, UNKNOWN_DEFINE_WARNING, unknownDefine));
compiler.report(JSError.make(missingDefine, unknownDefine));
compiler.report(JSError.make(UNKNOWN_DEFINE_WARNING, unknownDefine)) ; } compiler. reportCodeChange(); }
 compiler.warnings().make(UNKNOWN_DEFINE_WARNING, unknownDefine));
 ignoreUnknownDefine;
compiler.report(JSError.make(UNKNOWN_DEFINE_WARNING, unknownDefine))); }
 compiler.reportError(unknownDefine));
 compiler.errors(...).report(JSError.make(UNKNOWN_DEFINE_WARNING, unknownDefine));
compiler.report(JSError.make(UNKNOWN_DEFINE_WARNING,  undefined));
compiler.report(unknownDefine, compiler.getMessageContext(UNKNOWN_DEFINE_WARNING, unknownDefine));
compiler.report(JSError.make(UNKNOWN_DEFINE_WARNING, unknownDefine, unusedReplacements, defineName));
 compiler.report(missing);
 if (compiler)
compiler.report(JSError.make(UNKNOWN_DEFINE_WARNING, unknownDefineLocation));
compiler.report(JSError.make(unknownDefine, compiler.getCodeLocation ( ), unknownDefine));
compiler.report(JSError.UNKNOWNDEFINE);
 compiler.addWarning(JSError.make(UNKNOWN_DEFINE_WARNING, unknownDefine));
compiler.debug();
compiler.report(formatMessage(UNKNOWN_DEFINE_WARNING, unknownDefine));
compiler.report(new JSTypeWarning(UNKNOWN_DEFINE_WARNING, unknownDefine));
compiler.report(JSError.make(unknownDefine, defineName, unknownDefine));
compiler.reportWarning(warning);
 compiler.report(report.report(JSError.make(UNKNOWN_DEFINE_WARNING, unknownDefine));
 compiler.addToDebugLog('UNKNOWN_DEFINE_WARNING, unknownDefine));
 return Messages.make(UNKNOWN_DEFINE_WARNING, unknownDefine));
 return false;
compiler.report(unknownDefine), null;
compiler.report(JSError.make(JSError.CODE_ERROR, UNKNOWN_DEFINE_WARNING, unknownDefine));
compiler.report(JSError.make(UnknownDefineError, unknownDefine));
compiler.report(JSError.make(JSError.UNKNOWN_ERROR, UNKNOWN_DEFINE_WARNING, unknownDefine));
compiler.report(JSError.make(JSError.make(unknownDefine, UNKNOWN_DEFINE_WARNING, unknownDefine));
compiler.report(JSError.make(unknownDefine)) ; } }
compiler.report(unknownDefine, Messages.format(UNKNOWN_DEFINE_WARNING, unknownDefine));
 compiler.addReplacement(def, unknownDefine));
compiler.report(JSError.UnknownDefineUnknown) ;
compiler.report(unknownDefine, compiler.createSyntaxError(UNKNOWN_DEFINE_WARNING, unknownDefine));
 compiler.addToDebugLog(, unknownDefine));
 compiler.reportWarningWithText(UNKNOWN_DEFINE_WARNING, unknownDefine));
compiler.report(JSError.make(unknownDefine.String ( ), unknownDefine));
compiler.report(JSError.make(UNKNOWN_DEFINE_WARNING, unknownDefine + "!"));
compiler.reportCodeChange(unknownDefine); } }
compiler ++ ;
compiler.report(JSError.UnknownDefine: unknownDefine); } }
 if (errorEnabled) {
compiler.report(JSError.make(unknownDefine, compiler.getCurrentLocation ( ), unknownDefine));
compiler.report(JSError.make(Unknown_DEFINE_WARNING, UNKNOWN_DEFINE_WARNING, unknownDefine));
compiler.report(JSError.make(JSError.CODE_INTERNAL, UNKNOWN_DEFINE_WARNING, unknownDefine));
compiler.reportWarning(comment);
compiler.report(JSError.make(UnknownDEFINES, unknownDefine));
 compiler.logWarning(JSError.make(UNKNOWN_DEFINE_WARNING, unknownDefine));
compiler.report(JSError.make(UNKNOWN_DEFINE_WARNING, unknownDefine)) ; compiler.exitCode(); }
compiler.report(unknownDefine, new ProblemMessage(UNKNOWN_DEFINE_WARNING, unknownDefine));
 compiler.warn(define));
 compiler.addError(JSError.make(UNKNOWN_DEFINE_WARNING, unknownDefine));
compiler.report(JSError.make(UnknownDefine.getName(), unusedReplacements, unknownDefine));
compiler.report(JSError.make(unknownDefine.String ( ), UNKNOWN_DEFINE_WARNING, unknownDefine));
compiler.report(JSError.UnknownDefinitionUnknownDefine());
compiler.report(JSError.make(unknownDefine, compiler.getSourceLocation ( ), unknownDefine));
compiler.report(JSError.make(JSError.DIFFERENT_ERROR, UNKNOWN_DEFINE_WARNING, unknownDefine));
compiler.report(JSError.make(JSError.NON_NONE, UNKNOWN_DEFINE_WARNING, unknownDefine));
compiler.report(JSError.make(JSError.DIFFERENT_WARNING, UNKNOWN_DEFINE_WARNING, unknownDefine));
compiler.report(unknownDefine) ; } } }
 compiler.warnings.make(UNKNOWN_DEFINE_WARNING, unknownDefine));
compiler.report(JSError.make(UnknownDefine.getName ( ), UNKNOWN_DEFINE_WARNING, unknownDefine));
 throw new Error(make(UNKNOWN_DEFINE_WARNING, unknownDefine));
compiler.report(JSError.make(UnknownDefine.class, UNKNOWN_DEFINE_WARNING, unknownDefine));
 compiler.replace(def, unknownDefine));
 compiler.reportable.report(JSError.make(UNKNOWN_DEFINE_WARNING, unknownDefine));
compiler.report(unknownDefine, compiler.format(UNKNOWN_DEFINE_WARNING, unknownDefine));
compiler.report(JSError.make(UNKNOWN_DEFINE_WARNING, unknownDefine, "Unknown define"));
compiler.report(JSError.make(UnknownDefine. class, unknownDefine));
compiler.report(JSError.make(UnknownDEFINES, UNKNOWN_DEFINE_WARNING, unknownDefine));
compiler.report(JSError.make(JSError.NON_ERROR_WARNING, UNKNOWN_DEFINE_WARNING, unknownDefine));
compiler.report(JSError.make(UnknownDefine.class, null, UNKNOWN_DEFINE_WARNING, unknownDefine));
compiler.report(new IllegalArgumentException().withMessage(UNKNOWN_DEFINE_WARNING, unknownDefine));
compiler.report(JSError.make(JSError.NON_ERROR, UNKNOWN_DEFINE_WARNING, unknownDefine));
 reportWarning(make(UNKNOWN_DEFINE_WARNING, unknownDefine));
compiler.report(JSError.make(unknown_define));
compiler.report(JSError.make(JSError.NON_ERROR_ERROR, UNKNOWN_DEFINE_WARNING, unknownDefine));
compiler.report(JSError.make(JSError.CORE_ERROR, UNKNOWN_DEFINE_WARNING, unknownDefine));
compiler.report(JSError.make(unknown"));
compiler.report(missingDefine, new Problem(UNKNOWN_DEFINE_WARNING, unknownDefine));
compiler.report(unknownDefine, Messages.message(UNKNOWN_DEFINE_WARNING, unknownDefine));
 unusedReplacements -= unknownDefinition;
compiler.report(JSError.make(UnknownDefine.NAME, unknownDefine));
 console.log(define));
compiler.report(compiler.formatMessage(UNKNOWN_DEFINE_WARNING, unknownDefine));
compiler.report(JSError.make(unknownDefineName, UNKNOWN_DEFINE_WARNING, unknownDefine));
 report(JSError.make(UNKNOWN_DEFINE_WARNING, unknownDefine));
compiler.report(unknownDefine, unknownDefine));
compiler.report(JSError.make(JSError.make(null), null, UNKNOWN_DEFINE_WARNING, unknownDefine));
 console.log(UNKNOWN_DEFINE_WARNING, unknownDefine));
 compiler.warn(missing));
compiler.report(JSError.make(unknownDefineLocation));
 log.warning(UNKNOWN_DEFINE_WARNING, unknownDefine));
 if (ignoreUnknownDefinition)
compiler.report(JSError.make(unknownDefine, "{"));
compiler.report(JSError.make(unknownDefine.getString ( ), unknownDefine));
compiler.reportError();
compiler.reportMissingDefinition();
compiler.report(new JSTypeExpression(UNKNOWN_DEFINE_WARNING, unknownDefine));
compiler.report(new IllegalStateException(UNKNOWN_DEFINE_WARNING, unknownDefine));
 compiler.report(comment));
compiler.report(JSError.make(UNKNOWN_DEFINE_WARNING, unknownDefine, unknownDefine)); } } }
compiler.report(JSError.make(unknownDefineWarning, UNKNOWN_DEFINE_WARNING, unknownDefine));
compiler.report(JSError.make(JSError.CODE_WARNING, UNKNOWN_DEFINE_WARNING, unknownDefine));
compiler.report(JSError.make(UNKNOWN_DEFINE_WARNING, unknownDefine)) ; return null;
compiler.report(JSError.make(UnknownDefineWarning, UNKNOWN_DEFINE_WARNING, unknownDefine));
compiler.report(JSError.make(JSError.NOSON, UNKNOWN_DEFINE_WARNING, unknownDefine));
 compiler.reportWarning( format(UNKNOWN_DEFINE_WARNING, unknownDefine));
compiler.report(JSError.make(UNKNOWN_DEFINE_WARNING, unknownDefine)) ; compiler.exit(); } }
compiler.report(JSError.make(UNKNOWN_DEFINE_WARNING, unknownDefine)) ; break ; }
compiler.report(JSError.make(UnknownDefine.class, "", UNKNOWN_DEFINE_WARNING, unknownDefine));
 compiler.reportWmake(UNKNOWN_DEFINE_WARNING, unknownDefine));
compiler.report(JSError.make(unknown_defines, unknownDefine));
compiler.report(JSError.make(UNKNOWN_DEFINE_WARNING), null);
compiler.println();
compiler.report(JSError.make(UnknownDefineError.make(defineName), unknownDefine));
compiler.report(JSError.make(unknownDefine.message, UNKNOWN_DEFINE_WARNING, unknownDefine));
compiler.report(JSError.make(UnknownDefine, UNKNOWN_DEFINE_WARNING, unknownDefine));
compiler.report(unknownDefine, compiler.formatWarning(UNKNOWN_DEFINE_WARNING, unknownDefine));
compiler.report(unknownDefine, compiler.formatString(UNKNOWN_DEFINE_WARNING, unknownDefine));
 ignoreUnknownDefine);
 unknownDefine.remove();
 compiler.log(UNKNOWN_DEFINE_WARNING, unknownDefine));
compiler.report(JSError.make(UnknownDefine.NAME, UNKNOWN_DEFINE_WARNING, unknownDefine));
compiler.report(JSError.make(UnknownDefineWarning. class, UNKNOWN_DEFINE_WARNING, unknownDefine));
compiler.report(JSError.make(UNKNOWN_DEFINE_WARNING, unknownDefine)); compiler.stop(); }
compiler.report(JSError.make(unknownDefine.length ( ), unknownDefine));
compiler.report(Compiler.formatMessage(UNKNOWN_DEFINE_WARNING, unknownDefine));
 report(make(UNKNOWN_DEFINE_WARNING, unknownDefine));
 compiler.writer.report(JSError.make(UNKNOWN_DEFINE_WARNING, unknownDefine));
compiler.report(JSError.make(UNKNOWN_DEFINE_WARNING, unknownDefine)); changed = false ;
 logWarning("UNKNOWN_DEFINE_WARNING, unknownDefine));
 compiler.err.report(JSError.make(UNKNOWN_DEFINE_WARNING, unknownDefine));
 add(unknownDefinition));
 addWarning( messages.make(UNKNOWN_DEFINE_WARNING, unknownDefine));
 log.make(UNKNOWN_DEFINE_WARNING, unknownDefine));
 compiler.ignore(def, unknownDefine));
compiler.report(JSError.make(UNKNOWN_DEFINE_WARNING, unknownDefine), unknownDefine, null); }
 compiler.addComment(def, unknownDefine));
compiler.report(JSError.make(UNKNOWN_DEFINE_WARNING, unknownDefine, unknown_defines));
compiler.report(JSError.make(JSError.make(null, null, UNKNOWN_DEFINE_WARNING, unknownDefine));
 compiler.log(JSError.make(UNKNOWN_DEFINE_WARNING, unknownDefine));
compiler.warn();
compiler.report(JSError.make(CaughtException.make(defineName), unknownDefine));
compiler.report(JSError.make(UNKNOWN_DEFINE_WARNING,  unknownDef);
 addWarning(make(UNKNOWN_DEFINE_WARNING, unknownDefine));
compiler.report(format.format(UNKNOWN_DEFINE_WARNING, unknownDefine));
 printWarning(UNKNOWN_DEFINE_WARNING, unknownDefine));
 changed ||
compiler.report(JSError.make(CODE_ERROR, UNKNOWN_DEFINE_WARNING, unknownDefine));
compiler.report(JSError.make(UnknownDefinitionError. class, unknownDefine));
compiler.report(JSError.make(UNKNOWN_DEFINE_WARNING,  undefinedDefine));
compiler.report(JSError.make(compiler, "Unknown definition: " + name, unknownDefine));
compiler.report(JSError.make(JSError.NON_NODE, UNKNOWN_DEFINE_WARNING, unknownDefine));
compiler.report(JSError.make(UNKNOWN_DEFINE_WARNING, unknownDefine) + ".");
compiler.report(JSError.make(UnknownDefineError.class, null, UNKNOWN_DEFINE_WARNING, unknownDefine));
compiler.report(JSError.make(UnknownDefine.getName(), defineName, unknownDefine));
compiler.report(JSError.Unexpected);
compiler.report(JSError.make(UNKNOWN_DEFINE_WARNING, unknownDefine)); return false;
 compiler.replace(name, unknownDefine));
compiler.report(missingDefine); }
 compiler.replaceNode(root, unknownDefine));
compiler.report(JSError.make(JSError.ERROR_WARNING, UNKNOWN_DEFINE_WARNING, unknownDefine));
compiler.report(JSError.make(unknown));
 throw unexpectedDefine));
 warn(define));
compiler.report(JSError.make(compiler, "Unknown define: " + name, unknownDefine));
 return messages.make(UNKNOWN_DEFINE_WARNING, unknownDefine));
 throw MessageException.make(UNKNOWN_DEFINE_WARNING, unknownDefine));
compiler.report(JSError.make(missingDefineName));
compiler.report(formatWarning(UNKNOWN_DEFINE_WARNING, unknownDefine));
 compiler.replaceNode(node, unknownDefine));
 compiler.ignore(null, unknownDefine));
 addNode(unknownDefine));
 compiler.throw(JSError.make(UNKNOWN_DEFINE_WARNING, unknownDefine));
 throwError(JSError.make(UNKNOWN_DEFINE_WARNING, unknownDefine));
 compiler.replace(define, unknownDefine));
 warn(make(UNKNOWN_DEFINE_WARNING, unknownDefine));
 compiler.errreport(JSError.make(UNKNOWN_DEFINE_WARNING, unknownDefine));
 compiler.logError(JSError.make(UNKNOWN_DEFINE_WARNING, unknownDefine));
compiler.report(new ProblemMessage(UNKNOWN_DEFINE_WARNING, unknownDefine));
compiler.report(JSError.make(compiler, "Unknown definition " + name, unknownDefine));
 warn(unknowndefine));
 ignore unknownDefine;
compiler.report(UnknownDefine.formatMessage(UNKNOWN_DEFINE_WARNING, unknownDefine));
 boolean changed =
compiler.report(JSError.make(unknownDefine.toString(), null, unknownDefine));
 addDefine);
compiler.report(JSError.Unexpected());
 replace(parser, unknownDefine));
compiler.report(JSError.make(UnknownDefinitionException. class, unknownDefine));
compiler.report(JSError.makeUnknownDefinition);
compiler.report(JSError.make(UNKNOWN_DEFINE_WARNING, unknownDefine)) ; } compiler.exit(); }
compiler.report(JSError.UnknownDefinition); }
 reportWarning( messages.make(UNKNOWN_DEFINE_WARNING, unknownDefine));
compiler.report(JSError.makeNewInstance());
compiler.reportBug(); }
 throw new RuntimeException(JSError.make(UNKNOWN_DEFINE_WARNING, unknownDefine));
 MessageFormat.make(UNKNOWN_DEFINE_WARNING, unknownDefine));
compiler.report(new Problem(UNKNOWN_DEFINE_WARNING, unknownDefine));
compiler.report(JSError.make(UnknownDefine.getName() + ":", unknownDefine));
 add(unknownDef));
compiler.report(UnknownDefine.getMessage(UNKNOWN_DEFINE_WARNING, unknownDefine));
 addError(JSError.make(UNKNOWN_DEFINE_WARNING, unknownDefine));
 throw MessageFormat.make(UNKNOWN_DEFINE_WARNING, unknownDefine));
compiler.report(JSError.make(UnknownDEFINITION, unknownDefine));
 warn(unknownDefinition));
compiler.report(new SyntaxError(UNKNOWN_DEFINE_WARNING, unknownDefine));
compiler.report(JSError.ERROR);
compiler.report(new SyntaxWarning(UNKNOWN_DEFINE_WARNING, unknownDefine));
compiler.report(JSError.make(definedDefine, unknownDefine));
compiler.report(JSError.make(UnknownDefine.class, null, unknownDefine));
compiler.report(JSError.make(missingDefine, UNKNOWN_DEFINE_WARNING, unknownDefine));
 throw warning(UNKNOWN_DEFINE_WARNING, unknownDefine));
 changed &&
compiler.report(JSError.make( "Unknown definition " + name, unknownDefine));
 compiler.misreport(JSError.make(UNKNOWN_DEFINE_WARNING, unknownDefine));
compiler.report(JSError.make(UNKNOWN_DEFINE_WARNING,  unknown));
compiler.report(JSError.make(UnknownDefineError.class, null, unknownDefine));
 throw exception(JSError.make(UNKNOWN_DEFINE_WARNING, unknownDefine));
compiler.report(JSError.make(UnknownDefine.class, "", unknownDefine));
compiler.report(new JSTypeError(UNKNOWN_DEFINE_WARNING, unknownDefine));
compiler.report(JSError.make(UnknownDefineError.class, "", unknownDefine));
compiler.report(JSError.make(UnknownDefine.getName() + "", unknownDefine));
compiler.report(JSError.make(...));
compiler.report(JSErrorUnknownDefinition());
compiler.report(UnknownDefine.getText(UNKNOWN_DEFINE_WARNING, unknownDefine));
compiler.report(JSErrorUnknownDefine());
compiler.report(JSError.make(UNKNOWN_DEFINE_WARNING)) ; }
compiler.report(message(UNKNOWN_DEFINE_WARNING, unknownDefine));
 compiler.unreport(JSError.make(UNKNOWN_DEFINE_WARNING, unknownDefine));
compiler.report(JSError.makeUnknown);
 addString(unknownDefine));
 replace(info, unknownDefine));
compiler.report(JSError); }
 add(missing));
compiler.report(Format.formatString(UNKNOWN_DEFINE_WARNING, unknownDefine));
 report(Context.make(UNKNOWN_DEFINE_WARNING, unknownDefine));
compiler.report(JSError.make(UNKNOWN_DEFINE_WARNING, unknownDefine, undefinedDefine));
 compiler.warning(JSError.make(UNKNOWN_DEFINE_WARNING, unknownDefine));
compiler.report(UnknownDefinition);
 addNode(parser, unknownDefine));
compiler.report(JSError.make(UNKNOWN_DEFINE_WARNING))();
compiler.report(JSError.make(UNKNOWN_DEFINE_WARNING,  name));
compiler.report(new RuntimeWarning(UNKNOWN_DEFINE_WARNING, unknownDefine));
compiler.report(JSError.makeUnknownName());
compiler.report(JSError.make(unknownReplacements, unknownDefine));
 add(parser, unknownDefine));
compiler.report(JSError.UnknownDefine");
compiler.report(new ProblemReport(UNKNOWN_DEFINE_WARNING, unknownDefine));
compiler.report(JSError.make(missing));
compiler.report(JSError.make(UNKNOWN_DEFINE_WARNING, UnknownDefine));
compiler.report(JSError.make(CaughtException.make(defineName)), unknownDefine));
compiler.report(JSError unsupportedDefine);
compiler.report(JSError.make(UNKNOWN_DEFINE_WARNING,  unknownDef))
 add(comment));
compiler.report(JSError.makeNew());
compiler.report(missingDefine);
compiler.report(unknowndefine);
compiler.report(JSError.make(errorDefine, unknownDefine));
 replace(def, unknownDefine));
 throw compiler.make(UNKNOWN_DEFINE_WARNING, unknownDefine));
compiler.report(unknown);
compiler.report(JSError.Nil);
compiler.report(JSError.makeUnknownInstance());
compiler.report(JSError.make(?));
 add(null));
 error(JSError.make(UNKNOWN_DEFINE_WARNING, unknownDefine));
 add(unknown));
 return null;
compiler.report(JSError.makeDefault());
 warn(define);
 logWarning(UNKNOWN_DEFINE_WARNING, unknownDefine));
 ignoreUnknown(define);
 reportUnknown(define);
compiler.report(JSError.make(missingDefine));
 warn(Context.make(UNKNOWN_DEFINE_WARNING, unknownDefine));
compiler.report(null);
 reportWarning(JSError.make(UNKNOWN_DEFINE_WARNING, unknownDefine));
 replaceChild(info, unknownDefine));
compiler.report(JSErrorUnknown);
 add(, unknownDefine));
compiler.report(JSError error);
 throwException(JSError.make(UNKNOWN_DEFINE_WARNING, unknownDefine));
 appendNode(parser, unknownDefine));
 addDefinition(parser, unknownDefine));
 replaceNode(info, unknownDefine));
compiler.report(JSError.make(null, null, UNKNOWN_DEFINE_WARNING, unknownDefine));
 ignored = true;
compiler.report(JSError.make(comment));
 add(comment);
compiler.report(JSError.make(UNKNOWN_DEFINE_WARNING,  this));
 throw MessageFactory.make(UNKNOWN_DEFINE_WARNING, unknownDefine));
 addComment(unknownDefine));
compiler.report(JSError.make(UNKNOWN_DEFINE_WARNING,  ""));
compiler.report(JSErrorUnknownDef);
compiler.report(JSError.make(defineName));
compiler.report(JSError.make(define));
 replace(, unknownDefine));
 addText(unknownDefine));
compiler.report(JSError.make(UNKNOWN_DEFINE_WARNING, unknownDefine, unknownReplacement));
compiler.report(JSError.NEW);
compiler.report(JSError.make(UNKNOWN_DEFINE_WARNING,  unknownDefine))
 warning(unknownDefine));
 override(parser, unknownDefine));
compiler.report(JSError.make(unknownDefine))
 add(missing);
 addDefinition(unknownDefine));
 throw.make(UNKNOWN_DEFINE_WARNING, unknownDefine));
 log(unknownDefine));
compiler.report(JSErrorException);
 changed += true;
compiler.report(JSError.make(UNKNOWN_DEFINE_WARNING, definitionName));
 throw null;
compiler.report(JSError.make(UNKNOWN_DEFINE_WARNING,  missingDefine));
compiler.report(JSError.make(UNKNOWN_DEFINE_WARNING, unknownDefine) + ""); }
 return true;
compiler.report(JSError) ;
 add(null);
 replace(unknownDefine));
compiler++();
compiler.report(JSError.Internal);
compiler.report(warnings(UNKNOWN_DEFINE_WARNING, unknownDefine));
compiler.report(JSError.make(UNKNOWN_DEFINE_WARNING, unknownDefine)); break;
 assert false;
 return IR.make(UNKNOWN_DEFINE_WARNING, unknownDefine));
compiler.report(JSError.makeInstance());
 append(, unknownDefine));
 clear());
 warn("UNKNOWN_DEFINE_WARNING, unknownDefine));
 add({, unknownDefine));
 if changed )
compiler.report(JSError.make(UnknownDefinitionWarning, UNKNOWN_DEFINE_WARNING, unknownDefine));
compiler --;
compiler.report(JSError.make(this, UNKNOWN_DEFINE_WARNING, unknownDefine));
compiler.report(JSError.make(UNKNOWN_DEFINE_WARNING), null));
 if changed.
 warn(JSError.make(UNKNOWN_DEFINE_WARNING, unknownDefine));
compiler.report(JSError.WARNING);
 if changed =
compiler.report(format(UNKNOWN_DEFINE_WARNING, unknownDefine));
 add(", unknownDefine));
 reportContext.report(JSError.make(UNKNOWN_DEFINE_WARNING, unknownDefine));
 changed +=
 warning());
compiler.report(warning);
 warning("UNKNOWN_DEFINE_WARNING, unknownDefine));
 clear();
 error(UNKNOWN_DEFINE_WARNING, unknownDefine));
compiler.report(JSError.make(UNKNOWN_DEFINE_WARNING, unknownDefine)) ; return ;
 warning("));
 ignore();
compiler++; }
compiler.report(warning(UNKNOWN_DEFINE_WARNING, unknownDefine));
compiler.report(JSError.make(UNKNOWN_DEFINE_WARNING, unknownDefine, definedName));
compiler.report(JSError.make(null, UNKNOWN_DEFINE_WARNING, unknownDefine));
 compilerImpl.report(JSError.make(UNKNOWN_DEFINE_WARNING, unknownDefine));
 (break);
 compilerHelper.report(JSError.make(UNKNOWN_DEFINE_WARNING, unknownDefine));
 compilerException.report(JSError.make(UNKNOWN_DEFINE_WARNING, unknownDefine));
 (null);
 clear("));
 add());
 (ignore);
compiler.report(JSError.make(UNKNOWN_DEFINE_WARNING, undefinedDefinition));
 change =
compiler.report(JSError.make(UNKNOWN_DEFINE_WARNING, unusedDefine));
compiler.report(JSError.make(error, unknownDefine));
compiler.report(JSError.make(illegalDefine));
compiler.report(JSError.make(UNKNOWN_DEFINE_WARNING, undefinedName));
compiler.report(JSError.make(CODE, UNKNOWN_DEFINE_WARNING, unknownDefine));
compiler.report(JSError.make(define, UNKNOWN_DEFINE_WARNING, unknownDefine));
compiler.report(JSError.make(UNKNOWN_DEFINE_WARNING, define));
compiler.report(JSError.make(unknownName, UNKNOWN_DEFINE_WARNING, unknownDefine));
compiler.report(JSError.make(UNKNOWN_DEFINE_WARNING, unknownDefine, "{"));
compiler.report(JSError.make(format, unknownDefine));
compiler.report(JSError.make(definitionName, unknownDefine));
compiler.report(JSError.make(definedName, unknownDefine));
compiler.report(JSError.make(error, UNKNOWN_DEFINE_WARNING, unknownDefine));
compiler.report(JSError.make(UNKNOWN_DEFINE_WARNING, null));
compiler.report(JSError.make(ERROR, UNKNOWN_DEFINE_WARNING, unknownDefine));
compiler.report(JSError.make(UNKNOWN_DEFINE_WARNING, unknownDefine)"); }
compiler.report(JSError.make(unknownValue, UNKNOWN_DEFINE_WARNING, unknownDefine));
compiler.report(JSError.make(info, unknownDefine));
compiler.report(JSError.make(def, unknownDefine));
compiler.report(JSError.make(null, unknownDefine));
compiler.report(JSError.make(error));
 reporter.report(JSError.make(UNKNOWN_DEFINE_WARNING, unknownDefine));
compiler.report(Message(UNKNOWN_DEFINE_WARNING, unknownDefine));
compiler.report(JSError.make(1, UNKNOWN_DEFINE_WARNING, unknownDefine));
compiler.report(JSError.make(define, unknownDefine));
compiler.report(JSError.make(UNKNOWN_DEFINE_WARNING, unknownDefine)) } }
compiler.report(JSError.make(defName, unknownDefine));
 report.report(JSError.make(UNKNOWN_DEFINE_WARNING, unknownDefine));
 context.report(JSError.make(UNKNOWN_DEFINE_WARNING, unknownDefine));
 compilation.report(JSError.make(UNKNOWN_DEFINE_WARNING, unknownDefine));
 return
 throw
