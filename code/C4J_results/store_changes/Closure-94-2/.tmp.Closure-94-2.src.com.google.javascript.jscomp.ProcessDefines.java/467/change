RefInfo(Ref ref, name) {
RefInfo(Ref ref, Name name) {
RefInfo(Ref ref) {
RefInfo(Ref ref, Name ) {
RefInfo(Ref ) {
RefInfo(ref, Name name) {
RefInfo(this, Ref ref, Name name) {
RefInfo(Ref ref,  name);
RefInfo(DefineInfo info, Ref ref, Name name) {
RefInfo this = RefInfo {
RefInfo this = RefInfo ( ) ;
 if (name) {
RefInfo this = RefInfo. create ( ) ;
 private static DefineInfo(Ref ref, Name name) {
 synchronized(Ref ref, Name name) {
 synchronized(Name name) {
 public DefineInfo(ref, Name name) {
RefInfo this = RefInfo. newInstance ( ) ;
 public DefineInfo(Name name) {
 public DefineInfo(Node ref){
 public DefineInfo(Ref ref, name){
RefInfo(this) {
RefInfo(Ref ref, Name  name) { this.name = name;
 public static DefineInfo(ref, Name name) {
 private static DefineInfo(ref, Name name) {
 public Info(Ref ref, Name name) {
RefInfo(Ref ref, Name  name) { this.refInfo = info;
RefInfo(ref, name) {
RefInfo(Ref ref, Name name)  { this.name = name; } else {
 public static DefineInfo(Ref ref, Name name) {
 public
 this.ref = ref; this.name = name; this.name = ref.name; public
 public DefineInfo(ref){
 this.ref = ref; this.name = name; return this.ref ; } private static class
 private static void setRefInfo(Ref ref, Name name) {
RefInfo(Ref ref name) {
 this.ref = ref; this.name = name; return this.ref ; } private class
RefInfo(Ref ref, Name  name) { this.info = info;
 public RefInfo(Ref ref, Name name) {
RefInfo this = new RefInfo();
RefInfo this = RefInfo ( name, ref ) ;
 public DefineInfo(Ref ref, Name name) {
RefInfo(Ref ref, Name  name) { this.ref = name;
 public DefineInfo(Node ref, name){
 this.ref = ref; this.name = name; this.name = ref.name; class
RefInfo(Ref ref, Name  name) { this.refName = name;
 public DefineInfo(){
 private DefineInfo(ref, Name name) {
 this.ref = ref; this.name = name; this.name = name; } private static class
 public RefInfo(ref, Name name) {
RefInfo this = RefInfo. new ( ) ;
 this.ref = ref; this.name = name; return this.ref ; } class
 this.ref = ref; this.name = name; return this.ref ; } public static class
RefInfo(Ref Ref ref, name) {
 this.ref = ref; this.name = name; this.name = ref.name; public void
RefInfo(this, name) {
RefInfo(Ref ref, Name name)  { this.refName = ref.name;
RefInfo(Node ref) {
RefInfo(Ref ref, Name name) { this.refName = refName;
 this.ref = ref; this.name = name; this.name = ref.name; private class
 this.ref = ref; this.name = name; this.name = name; public
RefInfo(DefineInfo ref, Name name) {
 this.ref = ref; this.name = name; this.name = ref.name; } private class
 this.ref = ref; this.name = name; this.name = ref.name; } private static class
RefInfo(Ref ref, Name  name) { this.refs = null;
 public DefineInfo(Ref ref){
 public DefineInfo this(){
 this.ref = ref; this.name = name; this.name = ref.name; public final
 this.ref = ref; this.name = name; return this.ref ; private class
 this.ref = ref; this.name = name; this.name = name; public void
 private static void setDefineInfo(Ref ref, Name name) {
 this.ref = ref; this.name = name; this.name = ref.name; private static class
RefInfo(Ref ref, Name name) { return
 this.ref = ref; this.name = name; this.name = ref.name; } public class
RefInfo(Ref ref, Name name, NodeTraversal t) {
RefInfo(Ref ref, final Name name) {
 public static DefineInfo(Name name) {
 private DefineInfo(Ref ref, Name name) {
 this.ref = ref; this.name = name; this.name = ref.name; private static void
 public DefineInfo(Node ref name){
 private void setRefInfo(Ref ref, Name name) {
 this.ref = ref; this.name = name; this.name = name; private class
 this.ref = ref; this.name = name; this.name = name; public final
 this.ref = ref; this.name = name; this.name = this.ref.name; public void
 public DefineInfo(Ref ref, Name) {
 this.name = name; this.ref = ref; this.name = name; this.refInfo = new
 this.ref = ref; this.name = name; this.name = this.ref.name; public
 this.ref = ref; this.name = name; this.name = name; class
RefInfo(Ref ref,  Name name) { if (name) {
 this.name = name; this.ref = ref; this.name = name; public void
 public RefInfo(Name name) {
RefInfo(Ref ref, Name name) { this.refInfo = refInfo;
 public static void setRefInfo(Ref ref, Name name) {
RefInfo(Ref Ref ref, Name name) {
 public DefineInfo(Ref){
 this.name = name; this.ref = ref; this.name = name; this.ref = ref; } private static class
 synchronized(this) {
 final if (name) {
RefInfo(Ref ref, Name name)  { this.ref = ref; } else {
 this.ref = ref; this.name = name; public
RefInfo this = RefInfo ( name = name ) ;
 public DefineInfo(Ref this.ref, Name name) {
 public DefineInfo ref, Name name) {
 private void setDefineInfo(Ref ref, Name name) {
 this.ref = ref; this.name = name; return this.ref ; public class
 public DefineInfo(Node ref, Name) {
 this.name = name; this.ref = ref; this.name = name; this.ref = ref; public void
 public DefineInfo(Node ref, Name name) {
 this.ref = ref; this.name = name; } private static class
RefInfo(ref, name, function(this) {
 this.ref = ref; this.name = name; this.name = this.ref.name; private class
RefInfo(Ref ref,  name) { if (name) {
RefInfo(Ref ref, Name name) { this.refInfo = RefInfo();
RefInfo(Ref ref,  name) { this.info = info;
 this.ref = ref; this.name = name; this.name = this.ref.name; } private static class
 public static void setDefineInfo(Ref ref, Name name) {
 public DefineInfo(Node ref) { return
 this.ref = ref; this.name = name; this.name = this.ref.name; private static void
 this.ref = ref; this.name = name; this.name = ref.name; this.refInfo = new
 this.ref = ref; this.name = name; this.name = this.ref.name; } private class
 private DefineInfo(Ref ref, name){
 private void setRefInfo(Name name) {
 public DefineInfo(RefInfo info) {
 this.ref = ref; this.name = name; this.name = this.ref.name; } public class
 this.ref = ref; this.name = name; this.name = ref.name; this.name = name; public void
 this.name = name; this.ref = ref; this.name = name; this.ref = ref.ref; public void
 this.ref = ref; this.name = name; this.refInfo = new
RefInfo(Ref ref, Name  name) { ref.name = name;
 this.name = name; this.ref = ref; this.name = name; this.ref = ref; private static void
 this.ref = ref; this.name = name; this.name = ref.name; this.name = name; } private class
 this.name = name; this.ref = ref; this.name = name; this.ref = ref; } private class
 public final
 private void setRefInfo(RefInfo ref, Name name) {
 this.ref = ref; this.name = name; this.name = ref.name; this.name = name; public
RefInfo this = RefInfo ( ) {
 this.ref = ref; this.name = name; } public static class
RefInfo this = RefInfo. empty ( ) ;
RefInfo(Ref ref,  Name name) { if ( ref!= null )
 this.name = name; this.ref = ref; this.name = name; this.ref = ref.ref; } private class
 this.name = name; this.ref = ref; this.name = name; this.ref = ref; private class
RefInfo this = RefInfoImpl ( ) ;
 this.ref = ref; this.name = name; this.name = name; this.ref = ref; public
 private void setRef(Ref ref, Name name) {
 this.name = name; this.ref = ref; this.name = name; this.ref = ref.ref; private static void
 this.name = name; this.ref = ref; this.name = name; this.ref = ref; } public class
 this.ref = ref; this.name = name; this.name = this.ref.name; private static class
 public (Ref ref, Name name) {
RefInfo(Ref ref) { this.info = info;
 this.name = name; this.ref = ref; this.name = name; this.ref = ref.ref; private static class
 public DefineInfo(Ref *ref, Name name) {
 public static ReferenceInfo(Ref ref, Name name) {
 private DefineInfo(Node ref, name){
RefInfo(Ref ref,  Name name) { if (ref) {
 public static DefineInfo(Ref *ref, Name name) {
 this.ref = ref; this.name = name; public final
 private void setRefInfo(DefineInfo info, Name name) {
RefInfo(Ref ref,  name) { if ( ref!= null )
RefInfo this = RefInfo. create ( name ) ;
RefInfo(Ref ref) { this.ref = ref.ref;
 this.ref = ref; this.name = name; this.name = ref.name; this.name = name; private static class
 public static DefineInfo ref, Name name) {
RefInfo(Ref ref, Name name) { this.refInfo = RefInfo;
 private static DefineInfo(Name name) {
RefInfo(Ref ref, Name name, Define this) {
 this.name = name; this.ref = ref; public
 public DefineInfo(Ref ref name){
RefInfo(ref, name); if (ref!= null) {
 private DefineInfo(Name name) {
 public DefineInfo(Ref ref) { return
 this.name = name; this.ref = ref; } private static class
 this.ref = ref; this.name = name; public void
RefInfo(Ref  this) { this.info = info;
 final Name this.name; if (ref.name) {
 private static DefineInfo(Ref *ref, Name name) {
 private void setRef(Name name) {
 public ReferenceInfo(Name name) {
 public DefineInfo(NodeRef ref){
 private void setRefInfo(ref, Name name) {
 this.ref = ref; this.name = name; } else { public class
 private void setDefineInfo(ref, Name name) {
 private static DefineInfo ref, Name name) {
 this.ref = ref; this.name = name; private class
 final Name name = ref. name ( ) ;
 this.name = name; this.ref = ref ; public void
 final Name name; private static void setRefInfo(Ref ref, Name name) {
 this.ref = ref; this.name = name; } else { private class
 final Name name ; if (ref!= null) {
RefInfo(ref, name, function (ref) {
 this.ref = ref; this.name = name; public class
RefInfo this = RefInfo ( name ) ;
 this.ref = ref; } private static class
 this.ref = ref; this.name = name; public static void
 this.ref = ref; this.name = name; class
 public static DefineInfo(Ref this.ref, Name name) {
 public DefineInfo(RefRef ref){
 private void setDefineInfo(Ref *ref, Name name) {
 public Define(ref, Name name) {
 private static defineInfo(Ref ref, Name name) {
 this.ref = ref; this.name = name; private static class
 public static DefineInfo init(ref, Name name) {
 this.ref = ref; this.name = name; private static void
RefInfo(Ref ref) { this.name = name;
 public DefineInfo(name){
 final Name name; final Name name ; final Ref this = this ;
 this.ref = ref; this.name = name; } else { public void
RefInfo this = RefInfo ;
RefInfo(Ref ref) { if ( ref!= null )
 public info(Ref ref, Name name) {
RefInfo(Node node, Ref ref, Name name) {
 private static DefineInfo init(ref, Name name) {
RefInfo(Ref  name) { this.name = name;
 public ReferenceInfo(ref, Name name) {
RefInfo(Ref ref) { this.refRefRef = ref;
RefInfo(Ref ref) { this.refInfo = info;
 private defineInfo(ref, Name name) {
RefInfo(Ref ref,  Name name) { if (ref)
 public DefineInfo(RefInfo this.ref, Name name) {
 if (ref) {
 private void setRef(Ref ref) {
 public DefineInfo(RefInfo ref){
RefInfo(ref, name, t) {
 this.ref = ref; this.name = name; } public static final void
 public DefineInfo(this){
 private static DefineInfo(RefInfo ref, Name name) {
 this.name = name; this.ref = ref; public static void
 private static void setRefAndName(Ref ref, Name name) {
 public Ref(ref, Name name) {
 public DefineInfo(Ref ref, Node node, Name name) {
 final Name name; public DefineInfo(ref, Name name) {
 this.ref = ref; } public static class
RefInfo(Ref  this) { this.name = name;
 public DefineInfo(Ref,Name name) {
 this.ref = ref; this.name = name; this.refInfo = class
RefInfo this = {
RefInfo(Ref ref, Name name, Name name) {
 public DefineInfo(Ref ref) { synchronized(Ref ref, Name name) {
 final Name name; private static DefineInfo(Ref ref, Name name) {
RefInfo(Ref ref, Name name) { {
 this.name = name; this.ref = ref; private static void
RefInfo this = this ;
 this.ref = ref; this.name = name; } public static final class
 public static RefInfo(ref, Name name) {
 public DefineInfo(DefineInfo info) {
 public DefineInfo(Ref ref, Ref,Name name) {
 private static void setRef(Ref ref, Name name) {
RefInfo(this, Ref ref, name, Name name) {
 final Name name; public static void setRefInfo(Ref ref, Name name) {
 synchronized () {
RefInfo(Ref ref, Name name, DefineInfo this) {
 private static void setRefInfo(ref, Name name) {
 this.ref = ref; this.name = name; this.ref ; public void
RefInfo(Define info, Ref ref, Name name) {
 public Reference(ref, Name name) {
RefInfo this = RefInfo ( name ) {
 public DefineInfo(Ref ref, Name _name) {
 public DefineInfo setRef(Name name) {
 private static DefineInfo info(Ref ref, Name name) {
 final Name name; public DefineInfo(Name name) {
RefInfo(this, DefineInfo info, Ref ref, Name name) {
 if (ref.name) {
 this.name = name; } private static class
RefInfo(Ref  name) {
 public static DefineInfo(RefInfo ref, Name name) {
RefInfo(Ref ref, Name name)  { this.refInfo = ref.info;
 final Name this.name; private void associate(Ref ref, Name name) {
 private DefineInfo(ref){
 final Name name; public static DefineInfo(Ref ref, Name name) {
RefInfo(Ref  this, Name name) {
 final Name name; public static DefineInfo(ref, Name name) {
 private static DefineInfo create(Ref ref, Name name) {
 public def(ref, Name name) {
RefInfo(name) {
 this.ref = ref; this.name = name; this.ref ; private class
RefInfo(Ref  this, Name name) { return
 this.ref = ref; this.name = new
 public static void associate(Ref ref, Name name) {
 public DefineInfo(Reference ref){
RefInfo(this, name);
 final Name name; private static DefineInfo(ref, Name name) {
 public Info(ref, Name name) {
 this.ref = ref; this.name = name class
RefInfo(Ref ref, Name name) { this.refInfo = RefInfo {
 public DefineInfo(Ref ref, NodeName name) {
 private DefineInfo(){
 private void setInfo(Ref ref, Name name) {
 private void setRefInfo(Ref ref) {
 this.ref = ref; this.name = name; this.info = { new
 public static def(Ref ref, Name name) {
 private (Ref ref, Name name) {
 private static void associate(Ref ref, Name name) {
RefInfo(Ref ref, Name  name) { this.info = info
 public DefineInfo(Ref ref, Ref.Name name) {
 public DefineInfo info(){
 private DefineInfo(Node ref){
 public DefineInfo(Ref ref, Name newname) {
RefInfo(Ref ref) { this.ref = ref;
 public DefineInfo(Ref ref, Name name, Name name) {
RefInfo(Ref Ref ref name) {
RefInfo this = RefInfo ( name, ref ) {
 private void setDefineInfo(Ref this.ref, Name name) {
 this.name = name; } public static class
 if (ref!= null) {
 private this.name; public DefineInfo(ref, Name name) {
 private void setRefInfo(DefineInfo ref, Name name) {
RefInfo(Ref ref) { if ( ref ) {
 public void setRef(Name name) {
 private Name name; private Name name; private Ref ref;
 public DefineInfo(Ref ref, Name *name) {
 final Name name; private void setDefineInfo(Ref ref, Name name) {
 public static void setRefAndName(Ref ref, Name name) {
 private DefineInfo this(){
 final Name name; public DefineInfo(name) {
 public DefineInfo(Node name){
 public DefineInfo(Ref ref, DefineName name) {
 final Name this.name; public void associate(Ref ref, Name name) {
RefInfo(Ref ref, name, Name name) {
RefInfo this = refInfo ( ) ;
RefInfo() {
RefInfo(Ref ref, Name name, ReferenceInfo info) {
 private void setRefInfo(RefInfo ref info, Name name) {
 private static DefineInfo defInfo(Ref ref, Name name) {
RefInfo(Ref Ref ref, Name) {
 this.name = name; this.ref = ref class
 public DefineInfo setRefInfo(Name name) {
 final Name this.name; public final
RefInfo(Ref  name) { this.info = info;
 final Name name ; if (ref) {
 private void associate(Ref ref, Name name) {
 public DefineInfo init(Name name) {
 final Name name; if (name) {
RefInfo(Ref ref, Name name, DefineInfo info) {
RefInfo(Ref ref,  Name name) { this = info ;
 private Name name; private Name name; private Ref this;
 public def(Ref ref, Name name) {
 private void setRefInfo(Ref *ref, Name name) {
RefInfo(Ref ref, Name name, this) {
RefInfo(ref, name); if (ref!= name) {
 public static DefineInfo create(Ref ref, Name name) {
 public void init(){
RefInfo(ref, name) { if(this) {
RefInfo(Ref ref, Name  name) { this.refInfo();
 private void setRefInfo(RefInfo info, Name name) {
 this.ref = ref; return this.ref ; class
RefInfo(ref, name) { if (name) {
RefInfo(Ref ref, NamedName name) {
 final Name this.name; private static void
 final Name this.name; public
 public DefineInfo this = RefInfo {
RefInfo(Ref ref, Name name, RefInfo info) {
 final Name name; final Name name; final Ref ref;
RefInfo this = RefInfo. new ;
 final Name this.name; public static void
 public RefInfo(Node ref) {
RefInfo(Ref ref, Name name, File file) {
 final Name this.name; public Info(Ref ref, Name name) {
RefInfo(Ref  name) { this.refInfo = info;
RefInfo(Ref ref,  Name name) { this.name =
RefInfo isAssignable = false ;
 public RefInfo(Ref ref) {
 private Ref this; public Ref(Name name) {
 public static DefineInfo(name) {
 final Name name ; if (ref.name) {
 public ReferenceInfo(Ref ref, Name name) {
RefInfo(ref) {
 final Name this.name; public static
 public DefineInfo(Name refname) {
 this.ref = ref; this.name = class
RefInfo(Ref ref, Name name, NodeTraversal) {
RefInfo(Ref ref, Name name, RefInfo this) {
 private Ref this; public Reference(Name name) {
 private Name name; private Name name;
 public DefineInfo(Ref ref, RefOrName name) {
 final Name this; private static void associate(Ref ref, Name name) {
 this.ref = ref; } private class
RefInfo(DefineInfo this.ref, Ref ref, Name name) {
 public DefineInfo(Node ref, Ref,Name name) {
RefInfo this = RefInfo ( ) { return
 public Ref(Ref ref, Name name) {
RefInfo(Ref name, ref) {
RefInfo(Ref Ref ref) {
 private static DefineInfo(Node ref ref, Name name) {
 synchronized(this.lock) {
 this.ref = ref; this.name; public final
 private static class
RefInfo(this.ref, this.name) {
 final Name name; final Name name; final Ref ref; {
RefInfo(Ref ref, Name name, Node node) {
 final Name name; final Name name; final RefRef ref;
 private Name name; private Ref this;
RefInfo(ref, name) { if(ref) {
 public DefineInfo(Ref ref, NamedName name) {
RefInfo(Ref ref, Name  name) { this = this ;
 public Define ref, Name name) {
 Reference ref, Name name) {
 public DefineInfo(Node ref, NodeName name) {
 final Name name; private static void associate(Ref ref, Name name) {
RefInfo(defineInfo(Ref ref, Name name) {
 final Name name; public DefineInfo(ref) {
 public DefineInfo(Ref ref, name name) {
RefInfo(this.ref, name); } else {
RefInfo(Ref ref, name) { if (this) {
 public static Info(Ref ref, Name name) {
 private Ref this; synchronized(Name name) {
 public DefineInfo(DefineInfo *ref, Name name) {
 public DefineInfo(RefInfo name) {
 final Name this.name; public info(Ref ref, Name name) {
RefInfo(Ref ref,  name) { if(ref)
RefInfo(this.ref, name, t) {
 public DefineInfo(Node ref) { *
 public Reference(Name name) {
RefInfo(defines, Define info, Ref ref, Name name) {
 public DefineInfo(Ref ref, ProvidedName name) {
 final Name this.name; private static class
 final Name name ; final Name name ; final Name name ; } {
 this.ref = ref; } public static final class
RefInfo(Ref ref, Name this.name) {
RefInfo(ref, Name name, t) {
 this.name = name; public final
 final Name this.name; private static
 final Name this; private static void setRef(Ref ref, Name name) {
 private static DefineInfo () {
 this.ref = ref; this.name ; public void
 public static DefineInfo init(Name name) {
 this.name = name; } private class
 private static Info(Ref ref, Name name) {
RefInfo this = RefInfo ( name ) { return
 final Name name; final if (name) {
RefInfo(Ref ref,  Name name) { return {
 final Name name; public RefInfo(Name name) {
RefInfo(Ref ref, Name name name) {
 private static void setRefWithName(Ref ref, Name name) {
 final Name this.name; private final
 final Name name; public DefineInfo(this) {
 final Name this.name; private void init(Ref ref, Name name) {
RefInfo(defines, DefineInfo, Ref ref, Name name) {
 final Name name ; final Name name ; final Name name ; } ;
 this.ref = ref; this.name; public
 this.name = name; } public static final class
RefInfo(ref, name) { return
 public DefineInfo(Ref ref) { *
 private Name name; private Name name; private Ref ref; {
 final Name name ; final Name name ;
RefInfo this = new RefInfo {
 if(ref, Name name) {
 public static void
 synchronized(refInfo) {
 final Name name; private static void setRef(Ref ref, Name name) {
RefInfo(Ref  this, Name name) { this = name;
RefInfo(Ref ref, Name name, RefInfo(Ref ref) {
 (Ref ref, Name name) {
RefInfo this = RefInfo ( name ) { {
 synchronized(this.ref) {
 private RefInfo(ref, Name name) {
RefInfo(Ref ref, String name) {
 this.ref; public final
 public DefineInfo (() {
 synchronized(refs) {
 synchronized(ref, Name name) {
RefInfo this = refInfo ;
 final Name name; public final
 final Name name = name;
 final Name name; final Name name; final RefRef ref {
RefInfo this = RefInfo ( ) { {
RefInfo(Ref ref,  Name name) { return info;
 private ReferenceInfo(ref, Name name) {
RefInfo(defineInfo(this, Ref ref, Name name) {
 public DefineInfo name(){
RefInfo(Ref ref,  Name name) { return void {
RefInfo(Ref ref, Name  name) { this.defines;
 private DefineInfo this.{
 private void setDefineInfoImpl(Ref ref, Name name) {
RefInfo(Node ref, name) {
RefInfo(ref, name, function () {
 final Name this; public void associate(Ref ref, Name name) {
RefInfo(Ref Ref, Name) {
 private Name name; private Ref ref;
 private void setRefAndName(Ref ref, Name name) {
RefInfo(Ref ref, Name initialName, Name name) {
RefInfo this = info ;
 public DefineInfo this() { return
RefInfo(defineInfo(Node node, Ref ref, Name name) {
 final Name name; final Ref this ; private void
 public RefInfo { public
 final Name name ; private static class
 public void initialize(){
 final Name name; } {
RefInfo(RefInfo ref) {
 public DefineInfo(Ref ref, Name name)
 final Name name if (name) {
RefInfo(ref, name) { {
 (ref ref, Name name) {
RefInfo = new RefInfo();
RefInfo(ref, Name(name) {
RefInfo(Ref  this) { this.info = info
 final synchronized(Name name) {
RefInfo(this, ref, name) { return
RefInfo(defineInfo ref, Name name) {
 public DefineInfo(Ref, Name (name) {
 private void setRefInfoAssignable(Ref ref, Name name) {
RefInfo(this, name) { return
 final if (ref) {
RefInfo(this.ref) { this.info =
RefInfo(Ref ref, NodeTraversal t) {
RefInfo(Ref this.ref, Name name) {
 final Name this.name; public synchronized(Ref ref, Name name) {
RefInfo this = RefInfo { {
 private void init(){
 final Name this ; private static class
 public DefineInfo(Ref ref, Stringname) {
RefInfo(this, RefRef(ref, Name name) {
 private void setRefInfoAssociates(Ref ref, Name name) {
RefInfo(this.ref) { this.info = info
 final Name this.name; private
 this.name; public final
RefInfo(this.ref) { this.refInfo();
 public DefineInfo(Name *name) {
RefInfo(Ref ref, Node node, Name name) {
 public DefineInfo(Ref ref, Name) {}
RefInfo(Ref  ref, name) { return
RefInfo(ref, name, info) {
RefInfo(Ref  ref) { return
RefInfo(Ref ref,  Name name) { return void(){
RefInfo(ref, Name, name) {
 private Ref this; private RefInfo(Name name) {
RefInfo this = new RefInfo ;
 public Ref ref, Name name) {
RefInfo(Ref ref, Named name) {
RefInfo(Ref ref, Name name, RefInfo(Ref name) {
 final Name this ; private void setRef(Ref ref, Name name) {
 private void setRef(name) {
 final Name name ; } else {
 final if (Name name) {
RefInfo(this.ref) { this.refInfo =
 final Name name ; public void
RefInfo(DefineInfo, Ref ref, Name name) {
 final Name name; synchronized this.name) {
 public static class
 final Name name; synchronized (name) {
RefInfo(Ref ref, Name name, NodeTraversal * t) {
 public void init(Name name) {
RefInfo(ref, name); } else {
 public DefineInfo this) {
RefInfo(DefineInfo thisInfo, Ref ref, Name name) {
RefInfo(defineInfo info, Ref ref, Name name) {
RefInfo(Ref ref, Name  name) { this = {
RefInfo(this, Ref, Ref ref, Name name) {
 final Reference ref, Name name) {
RefInfo(Node ref name) {
RefInfo(Ref Ref) {
 public RefInfo() public
RefInfo(Ref  this, Name name) { {
 final Ref ref, Name name) {
 public void set(Name name) {
RefInfo(this.ref) { this.ref = null
RefInfo(RefInfo ref, Name name) {
RefInfo(Ref ref, Name name, t) {
RefInfo(this.ref, name) { return
RefInfo(Ref ref, Name name, info) {
RefInfo(this.ref, name) { {
RefInfo(Ref ref, Name Name name) {
 synchronized (name) {
 final Name name = null;
RefInfo(RefInfo name) {
RefInfo(DefineInfo.class, Ref ref, Name name) {
RefInfo(Ref refName) {
RefInfo(Ref ref, Name name, RefInfo(Ref) this) {
RefInfo(DefineInfo this, Ref ref, Name name) {
 final Name name; final Ref ref; {
RefInfo(Ref ref, Name name, String name) {
RefInfo(DefineInfo * ref, Name name) {
RefInfo(Ref ref, Name name, RefInfo(Ref ref name) {
RefInfo(this.ref) { this.info = {
RefInfo(Ref ref ref, Name name) {
 public void
 private void initialize(){
 public static Reference(Name name) {
 final synchronized (name) {
 final void set(name) {
RefInfo(Ref * ref, Name name) {
RefInfo(Ref ref, Name name) {}
 public RefName name(){
RefInfo(Ref ref, Name  name) { this: {
RefInfo this = Info {
 synchronized this.(name) {
RefInfo(Ref ref, Name name, String description) {
RefInfo(this, name); } else {
 private void setReference(Name name) {
 public DefineInfo this = RefInfo();
RefInfo(RefInfo info) {
RefInfo(Ref ref, NameNameName name) {
RefInfo this. {
RefInfo(ref, Name name, Name name) {
RefInfo this = RefInfo { }
RefInfo(Ref ref, Name name) { * {
 public DefineInfo(Node ref) {}
 private RefInfo(Ref ref, Name name) {
RefInfo(...) {
 public static void(){
 private void init(Ref ref, Name name) {
 public static final void
RefInfo(Define ref, Name name) {
RefInfo(DefineInfo ref info, Name name) {
RefInfo(this.ref, this.name); {
 } { public static void
RefInfo(Ref ref, Name name, Node traversal t) {
 public info(ref, Name name) {
RefInfo(Ref ref, String name, Name name) {
RefInfo(Ref ref, Name name) {} {
 synchronized this) {
 final Name name; {
RefInfo(Ref  name) { this.name = name; }
 private Name name; {
RefInfo(Ref ref,  name)
 private Info(Ref ref, Name name) {
RefInfo(DefineInfoDefine, Ref ref, Name name) {
RefInfo(Ref ref,  NamedName name) { return
RefInfo(Ref ref, Name name, NodeTraversal t t) {
 public RefInfo abstract new
 public class
RefInfo(Ref ref) { this.name;
 private static void
RefInfo(Ref ref, Name name, ReferenceInfo(Ref ref) {
 ref ref, Name name) {
RefInfo(Ref ref, Name name, RefInfo(Ref) info) {
RefInfo(ref, name name) {
RefInfo this = new();
 public static ReferenceInfo(name) {
RefInfo(Ref  ref) { {
RefInfo(Ref  ref, name) {}
RefInfo(Ref ref,  name) { return void {
RefInfo(Ref ref, Name name) {} { return
RefInfo(Ref ref, Name * name) {
RefInfo(Node ref) { return
 final Name name synchronized (name) {
RefInfo(Ref Name) {
RefInfo this = { {
 private static final void
RefInfo(Ref ref,  Node name) { return
 } { private static class
RefInfo(Node name) {
RefInfo(Name this.name, Ref ref, Name name) {
RefInfo(Ref ref, Name name, DefineInfo thisInfo) {
 private synchronized(Ref ref, Name name) {
RefInfo(Ref  this) { this.name; }
 public static Reference(name) {
 if (ref!=name) {
 if(!name) {
RefInfo(DefineInfo, name, Ref ref, Name name) {
 final Name name; } { {
RefInfo(Ref  this) { this.info = {
RefInfo(this) { return
 if (Name name) {
RefInfo(Ref ref,  Node name) {
RefInfo(Ref ref, Name name, NodeTraverse t) {
RefInfo(Define this, Ref ref, Name name) {
 private class
RefInfo(this);
 static synchronized(Ref ref, Name name) {
 { public void
 private Name name; return
RefInfo(defines, t, Ref ref, Name name) {
 public static void{
RefInfo(Ref ref, Name  name) * { return
RefInfo(Node ref node, Name name) {
 final String name; {
RefInfo(This this, Ref ref, Name name) {
RefInfo this; {
RefInfo(Ref ref, Name node name) {
RefInfo(ref) { return
RefInfo(Ref ) { return
 public static
 Ref ref, Name name) {
 } else{
RefInfo(Ref ref, name)) {
 if () {
 public DefineInfo this() {}
 private this; public
RefInfo(Ref ref, Name  name) { return {}
RefInfo(Ref ref,  Name);
 private this static class
RefInfo(self this, Ref ref, Name name) {
 Reference (, Name name) {
 final void(){
RefInfo(ThisDefine, Ref ref, Name name) {
 public { public void
RefInfo(Ref ref, Name name, Define info) {
RefInfo(This.ref, Ref ref, Name name) {
 private info(Ref ref, Name name) {
 public this(){
 (ref, Name name) {
RefInfo(Ref ref,  Name)
 public (ref, Name name) {
RefInfo(Name name) {
 { }else{
 if(Ref ref, Name name) {
RefInfo struct {
RefInfo(ref ref, Name name) {
RefInfo(Ref ref, Name Name) {
RefInfo(Ref ref, Name  name); { return
RefInfo(Node ref, Name name) {
RefInfo { return
RefInfo { {
RefInfo(Self self, Ref ref, Name name) {
RefInfo(Ref ref, name name) {
RefInfo(self self, Ref ref, Name name) {
RefInfo(Ref ref, Name  name); {
RefInfo(Ref ref, Name  name)) {
RefInfo this = {}
RefInfo(Reference ref, Name name) {
RefInfo(Ref )) {
RefInfo(this)
 private
 final if(Ref ref, Name name) {
RefInfo(Ref ref)) {
RefInfo(Ref ref, Name )) {
RefInfo(Ref ref, Name ) {}
 class
RefInfo(Ref ) {}
 } `{
RefInfo(Ref ref, Name  name);
RefInfo(Ref ()) {
RefInfo(Ref ): {
RefInfo(Ref ref) {}
RefInfo(Ref ref, Name name, File f) {
 }(){
RefInfo(Ref ref, Name name); { {
 synchronized (_Name name) {
RefInfo(Def ref, Name name) {
RefInfo(Ref ref, Name name)  {{ {
RefInfo(Ref ref); {
RefInfo(Ref ref, Name name, node) {
RefInfo(Ref, Name name) {
RefInfo(Ref ref, Name name, parent) {
 final
 protected
RefInfo(self, Ref ref, Name name) {
 use(Ref ref, Name name) {
RefInfo(Ref ref, Name name)  {} return
RefInfo(name, Ref ref, Name name) {
 function(Ref ref, Name name) {
 switch(Ref ref, Name name) {
RefInfo(This, Ref ref, Name name) {
RefInfo(reference, Name name) {
RefInfo(Ref ref, names) {
RefInfo(def, Name name) {
