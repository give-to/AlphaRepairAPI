Ref ref = refInfo.ref;
Ref ref =  refInfo;
 RefInfo ref= refInfo.ref;
Ref Ref ref = refInfo.ref;
 ref =refInfo.ref;
 RefInfo refInfo= refInfo.ref;
 RefRef refInfo=ref;
Ref Ref ref = refInfo;
 RefRef = refInfo.ref;
 Node ref = refInfo.ref.node;
 Ref refInfo=ref;
Ref ref = refInfo.ref; if (refInfo!= null) {
 return; }
 RefInfo ref.ref = refInfo.ref;
 RefRef ref = refInfo; RefRef ref= refInfo.ref;
 Ref ref = ref.ref;
 Node ref = refInfo.refNode;
 RefRef ref = refInfo.ref.ref;
 RefRef ref = (RefRef)refInfo.ref;
 return; }
 RefRef ref = refInfo; Ref ref= refInfo.ref;
Ref Name ref = refInfo.ref;
 RefRef ref = refInfo.refInfo.ref;
Ref ref  = n;
Ref Info refInfo = refInfo.refInfo;
 Node ref = refInfo.ref;
Ref ref  = refInfo.refInfo.ref;
 RefRef ref = refInfo; Ref refInfo.ref;
 RefInfo ref = refInfo.name.ref;
 RefRef ref = (Ref)refInfo.ref;
 RefInfo ref = (Ref)refInfo.ref;
Ref ref = refInfo.ref; if (refInfo!= null)
 Node ref = refInfo.refInfo.ref;
 RefRef ref = refInfo.name.ref;
 Reference ref= refInfo.ref;
 Node ref = refInfo.refInfo.node;
Ref ref  = parent;
Ref ref  = refInfo.ref.ref;
 ref = ref.ref;
 RefRef ref = ref.ref;
Ref ref = refInfo.ref; Ref name = refInfo.name;
Ref Ref ref = null;
 RefInfo ref = ref.node.ref;
 RefRef ref = ref; Ref ref= refInfo.ref;
 RefInfo ref = (Reference)refInfo.ref;
 RefRef ref = refInfo; Ref = ref.ref;
 Node ref = refInfo;
 RefRef ref = refInfo.refRef;
 Reference refInfo=ref;
 RefRef ref = refInfo.refref;
Ref ref = refInfo.ref; if (ref!= null) {
Ref ref  = refInfo.ref.node;
Ref ref =  refInfo.ref; if (refInfo)
Ref Reference ref = refInfo.ref;
 Node ref = ref.node;
 RefInfo ref = (RefInfo)refInfo.ref;
 RefInfo ref = nodeRefInfo.ref;
Ref ref = refInfo.ref; if (refInfo) {
 Ref = ref.ref;
 RefRef ref = RefRef refInfo.ref;
Ref Name refInfo = refInfo;
 RefRef ref = refInfo; Node ref= refInfo.ref;
 Ref ref = n.ref;
 assert ref.ref;
 ReferenceRef = refInfo.ref;
 RefInfo ref = refInfo; Ref refInfo.ref;
Ref ref = refInfo.ref; RefName name = refInfo.name;
Ref Info ref = refInfo.refInfo;
 RefInfo ref = refInfo.ref.ref;
 RefRef ref = refInfo.ref.node;
 RefInfo ref = refInfo.node.ref;
 RefRef ref = RefRefs refInfo.ref;
 RefRef ref = (RefRef) n.ref;
 Node refParent = refInfo.refParent;
 RefRef ref = refInfo; ref = ref.ref;
 RefRef ref = RefRef.refInfo.ref;
 RefInfo ref = refInfo.refInfo.ref;
 refInfo = refInfo; } Ref refInfo.ref;
 return false; } if (refInfo!= null) {
 RefRef ref = refInfo.ref; Lref = refInfo.ref;
Ref ref =  allRefInfo.get(n);
Ref ref =  refInfo.name.getRef ( ) ;
Ref ref = refInfo.ref; RefName name = ref.name;
Ref Name ref = refInfo;
 RefRef ref = RefRefImpl refInfo.ref;
 RefInfo ref = RefInfo.name.ref;
 RefRef ref = null; ref= refInfo.ref;
 return false;
 RefRef ref = ref; ref= refInfo.ref;
Ref ref  = refInfo.reference;
 RefRef ref = refInfo; Reference ref= refInfo.ref;
 RefReference ref = refInfo.ref.ref;
 ReferenceRef ref = refInfo.ref;
Ref ref = refInfo.name; if (ref!= null)
 RefRef ref = (RefRef)ref;
 Node ref = refInfo; RefInfo ref= refInfo.ref;
 Node ref = n;
 Ref ref = refInfo.ref; Node ref= refInfo.ref;
 Node ref = refInfo.ref; Node ref= refInfo.ref;
 RefRef ref = ref; Node ref= refInfo.ref;
 return false; } if ( refInfo == null ) { return false ; } if ( refInfo!= null ) {
 RefRef ref = refInfo.ref.ref = refInfo.ref;
 RefRef ref = refInfo; ref= refInfo.ref;
 Node ref = refInfo.node;
 RefInfo ref = RefInfoImpl refInfo.ref;
 if (refInfo.ref == refInfo.name) { return; }
 RefInfo ref = (RefInfo)ref;
 RefReference ref = refInfo; Ref ref=refInfo.ref;
 Node ref = parent;
 return ; } if ( refInfo == null ) { return ; } switch ( refInfo. type ) { case NAME :
 RefInfo ref = n.ref;
Ref ref =  refInfo.ref; if (ref) {
 Node ref = refInfo.name.refNode;
Ref ref = refInfo.ref; RefName refName = ref.name;
 return ; } if ( refInfo == null ) { return ; } if ( refInfo!= null ) { return ; }
 return ; } if ( refInfo == null ) { return ; } switch ( refInfo. type ) { case CALL :
Ref Name refInfo = ref;
 Node ref = refInfo.ref; Ref=refInfo.ref;
 return false; } if ( refInfo == null ) { return false ; } if ( refInfo!= null ) { return true ; }
 RefInfo ref = Ref ref= refInfo.ref;
Ref ref  = (Ref) refInfo;
 if (refInfo.name!= null) {
 Node refParent = refInfo.parent;
 if (refInfo.ref!= refInfo.name) { return; }
 Ref ref = refInfo.ref; Ref ref= refInfo.ref;
Ref Ref ref = parent;
 continue; } if ( refInfo == null ) { return false ; } if ( refInfo!= null ) {
 Ref refInfo.ref;
Ref ref = refInfo.ref; Ref name = refInfo.ref;
 Ref reference = refInfo.ref;
 RefNode ref = refInfo.ref;
Ref Info refInfo = refInfo.refInfo();
 RefRef ref = RefRef; ref=refInfo.ref;
 if (refInfo.ref == null) { return false; }
 RefRef ref = RefRefsRefInfo.ref;
 RefInfo ref.node= refInfo.ref;
 ReferenceInfo ref = refInfo.ref;
Ref ref = refInfo.ref; Node valParent = n.parent;
 RefRef ref = refInfo.declaration.ref;
 if (refInfo.ref!= null) { refInfo.ref = parent; }
 DefineRef ref = refInfo.ref;
 RefRef ref = RefRef. create(refInfo.ref;
 throw new IllegalArgumentException(refInfo); }
 RefRef ref = refInfo.ref; lref = refInfo.ref;
 RefRef ref = n.ref;
 if (refInfo == null) { return; }
 Node ref = refInfo.ref.node.ref;
 Reference ref = n.ref;
 if (refInfo.ref!= null) { refInfo.ref = parent;
 RefRef ref = refInfo.fref;
 ReferenceRef ref = ref.ref;
 RefRef ref = refInfo.rref;
 RefRef ref = (Reference)refInfo.ref;
 RefRef ref = refInfo; Node lref = refInfo.ref;
 ReferenceRef refInfo=ref;
 RefRef ref = RefRef.Ref)refInfo.ref;
Ref Info ref = refInfo;
 RefInfo refInfo.ref = refInfo.ref;
 ReferenceRef ref = refInfo.refRef;
 if (refInfo.ref == refInfo.name) { return; } }
 throw new IllegalArgumentException("Invalid define"); }
 return false; } if ( refInfo == null ) { return false ; } if ( refInfo!= null ) { return false ; }
 Reference ref = ref.ref;
 return ; } if ( refInfo == null ) { return ; } if ( refInfo instanceof Reference ) {
 RefInfo refInfo=ref;
 throw new IllegalArgumentException(n); }
 if (refInfo.ref == refInfo.name) { return false; } }
 RefRef ref = refInfo; Ref refref = refInfo.ref;
 RefInfo refInfo = parent.ref = refInfo.ref;
 RefRefRef ref = (Ref)refInfo.ref;
 RefRef ref = refInfo.ref.refInfo.ref;
 return ; } if ( refInfo == null ) { return ; } if ( refInfo instanceof RefInfo ) {
 RefRef ref = RefRef. get(refInfo.ref;
 if (refInfo.ref!= null) { refInfo.ref = null;
 if (refInfo!= null) {
Ref Ref ref = n;
 RefRef ref = ref; Reference ref= refInfo.ref;
 throw new IllegalArgumentException("Invalid definition"); }
 return ; } if ( refInfo == null ) { return ; } if ( refInfo instanceof Ref ) {
Ref ref = refInfo.ref; if (ref!= null)
Ref ref Info = parent;
 Reference ref = refInfo.ref.node;
 throw new IllegalArgumentException(parent); }
Ref Ref ref = refInfo.ref();
 RefRef ref = refInfo; Lref = refInfo.ref;
 RefRef ref = refInfo.ref; Nameref = refInfo.ref;
 RefInfo ref = * refInfo.ref;
 throw new IllegalArgumentException(refInfo); }
 throw new IllegalArgumentException("Invalid define"); }
 return false; } if ( refInfo == null ) { return false ; } if (refInfo) {
Ref Ref ref;
 return false; } if ( refInfo == null ) { return false ; } if ( refInfo instanceof RefInfo ) {
 return false; } if (refInfo instanceof Reference) {
 return ; } if ( refInfo == null ) { return ; } if ( parent == null ) { throw new RuntimeException ( ) ;
 RefRef refInfo = (Ref)refInfo.ref;
 throw refInfo; }
Ref ref =  allRefInfo.get(ref);
Ref Info ref;
 if (refInfo.ref!= null) { refInfo.ref = ref;
 if (refInfo.name == null) return;
 throw new IllegalArgumentException("Unknown define"); }
 if (refInfo.ref == refInfo.name) { return true; } }
 RefInfo(Node)ref = refInfo.ref;
Ref ref  = null;
 RefInfo ref = ()refInfo.ref;
 throw new IllegalArgumentException(); }
 RefInfo refInfo.name.ref = refInfo.ref;
 RefInfo ref = ref; ref= refInfo.ref;
 throw new IllegalArgumentException("null"); }
 RefRef ref.ref;
 return ; } if ( refInfo == null ) { return ; } if ( parent == null ) { throw new RuntimeException ( ) }
 throw new IllegalArgumentException(null); }
 RefRef ref = refInfo.reference;
 ReferenceRef ref = refInfo;
Ref Name ref = n;
 RefRef ref=ref;
 return false; } if (refInfo instanceof Ref) {
 throw new IllegalArgumentException(n); }
 RefInfo refref = refInfo.ref;
 throw new IllegalArgumentException(null); }
Ref ref  = refInfo.ref();
 RefInfo<Name>ref = refInfo.ref;
 RefNode ref = (Ref)refInfo.ref;
 RefInfo ref = ref.refInfo.ref;
Ref Info.
 return ; } if ( refInfo == null ) { return ; } if ( parent == null ) { throw new RuntimeException ( " }
 RefDefineRef refInfo=ref;
Ref ref Info = refInfo;
 RefInfo ref = refInfo2.ref;
 Ref ref = node.ref;
 RefRef ref = refInfo.ref; Noderef = refInfo.ref;
 RefRef ref = refInfo.ref; Stringref = refInfo.ref;
 RefRef ref = Ref ref= refInfo.ref;
 if (refInfo.name) {
Ref Ref ref = refInfo.ref; final
 RefRef ref = ()refInfo.ref;
 refInfo.ref;
 RefRef ref = refInfo; Ref lref = refInfo.ref;
 throw new IllegalArgumentException("No define found"); }
 RefRef ref = refInfo.ref = refInfo.ref;
 RefInfo ref = refInfo; Ref refref = refInfo.ref;
 RefRef ref.ref=refInfo.ref;
Ref ref  = RefInfo.ref;
 Node ref = ref.ref;
Ref Ref ref = refInfo.ref.ref();
 RefInfo(Name)ref = refInfo.ref;
Ref ref = refInfo.ref; Ref valParent = null;
 return false; }
 RefInfo(String)ref = refInfo.ref;
Ref ref  = refInfo.refInfo.ref();
 return false; } if ( refInfo == null ) { return false ; } if ( refInfo!= null ) { return true ; } final
 RefInfo refInfo = lref = refInfo.ref;
 return false; } if ( refInfo == null ) { return false ; } if ( refInfo!= null ) { return true ; } }
 RefRef <? > ref= refInfo.ref;
 return false; } if (refInfo instanceof RefInfo)
 RefDefine ref=refInfo.ref;
Ref Info ref = refInfo.refInfo();
 return ; } if ( refInfo == null ) { return ; } if ( parent == null ) { return ; } } }
 return false; } if ( refInfo == null ) { return false ; } if ( parent == null ) { return false ; } } }
 if (refInfo.ref == null) { return false; } final
 RefInfo refInfo = ref.ref = refInfo.ref;
 return ; } if ( refInfo == null ) { return ; } if ( refInfo!= null ) { return ; } } }
 refInfo = parent; } Ref refref = refInfo.ref;
 throw new IllegalArgumentException("Invalid define instruction"); }
 refInfo = parent.refInfo;
 if (refInfo.ref == refInfo.name) { return; } } final
 return false; } if ( refInfo == null ) { return false ; } if ( parent == n ) { return true ; } } }
 if (refInfo.ref == refInfo.name) { return false; } };
 Node refInfo = parent;
 throw new IllegalArgumentException("No define information"); }
 RefInfo refRef=refInfo.ref;
 if (refInfo.ref == refInfo.name) { return false; } } }
Ref ref  = refInfo.ref; final
 if (refInfo.ref!= refInfo.name) return false; final
 if (refInfo.ref == refInfo.name) { return false; } } final
 return false; } if ( refInfo == null ) { return false ; } if ( refInfo!= null ) ;
 return ; } if ( refInfo == null ) { return ; } if ( refInfo!= null ) { final
 return false; }
 RefRef ref = RefRefs.refInfo.ref;
 return false; } if ( refInfo == null ) { return false ; } if ( refInfo!= null ) final
 if (refInfo.ref == null) { return false; } }
Ref ref  = refInfo.ref.ref();
 RefInfo ref = refInfo; Refref = refInfo.ref;
 return ; } if ( refInfo == null ) { return ; } if ( parent == n ) { return ; } } }
 RefInfo ref = parent.ref = refInfo.ref;
 throw new IllegalArgumentException("No define""); }
 if (refInfo.ref!= refInfo.name) return; final
 RefRef ref = refInfo; lref = refInfo.ref;
Ref Ref refInfo;
 continue; } if ( refInfo == null ) { return false ; } if ( refInfo!= null ) { final
Ref ref Info = this;
 RefInfo ref = ref.ref = refInfo.ref;
 refInfo = parent; } Refref = refInfo.ref;
 RefRef ref = RefRef= refInfo.ref;
 RefRef ref; Ref ref= refInfo.ref;
Ref ref = refInfo.ref; if (refInfo!= null) { final
 if (refInfo!= refInfo) {
 return ; } if ( refInfo == null ) { return ; } if ( parent == null ) { return ; } } } }
 return ; } if ( refInfo == null ) { return ; } if ( refInfo == null ) { return ; } } }
 return false; } if ( refInfo == null ) { return false ; } if ( refInfo!= null ) { return false ; } final
 if (refInfo.ref == null) { return false; } } final
 RefRef ref = lrefInfo.ref;
 return false; } if ( refInfo!= null ) { return true ; } return false ; } }
 continue; } if ( refInfo == null ) { return false ; } if ( refInfo!= null ) ;
 if (refInfo.ref == null) { return; } final
 return false; } if ( refInfo == null ) { return false ; } if ( refInfo instanceof RefInfo ) ;
 Reference ref = parent;
 return ; } if ( refInfo == null ) { return ; } if ( parent == null ) { return ; } } } ;
Ref ref = refInfo.ref; if (refInfo!= null).
 return false; } if ( refInfo == null ) { return false ; } if ( refInfo instanceof Ref ) { final
 return false; } if (refInfo!= null) { final
 if (refInfo.ref!= refInfo.name) { final
 throw new IllegalStateException(n); }
Ref ref  = refInfo.refInfo; final
 if (refInfo.ref == refInfo.name) return; final
 throw new IllegalStateException(this); }
 if (refInfo.ref == null) { return true; } final
 return ; } if ( refInfo == null ) { return ; } if ( parent == n ) { return ; } } } }
 Node refInfo=ref;
 RefInfo refInfo; Refref = refInfo.ref;
Ref ref =  refInfo.ref; if (refInfo).
 RefInfo refInfo = _ref = refInfo.ref;
 return false; } final
 throw new IllegalArgumentException(); } final
 refInfo = parent.refInfo();
Ref Name refInfo = refInfo();
 if (refInfo.ref == refInfo.name) { return false; } } } }
 if (refInfo.ref!= null) { return; } }
 return false; } if (refInfo.ref) { final
 RefDeclaration ref= refInfo.ref;
 Ref ref=ref;
 Reference ref = n;
Ref ref Info = refInfo.refInfo; final
Ref ref = refInfo.ref; if (refInfo!= null);
 if (refInfo.ref == refInfo.name) { return ; } } } }
 throw new IllegalStateException(); } final
Ref ref = refInfo.refInfo.node;
 return false; } }
 return false; } if (refInfo!= null) { return true; } } } ;
 return false; } if (refInfo) { final
Ref Reference ref = refInfo.ref; final
 RefInfo refRefInfo= refInfo.ref;
 RefNodeRef ref= refInfo.ref;
 if (refInfo.name == null) return; final
 Ref = n.ref;
 return false; } if ( refInfo == null ) { return false ; } if ( refInfo ) ;
Ref ref Info = refInfo.refInfo; } }
Ref ref Info = refInfo.refInfo; } final
Ref ref =  parent.ref;
 return false; } if ( refInfo == null ) { return false ; } if ( refInfo ) final
 RefInfo cref = refInfo.ref;
Ref ref  = refInfo.ref.ref; final
 throw new RuntimeException(); } final
 return false; } if ( refInfo == null ) { return false ; } if (refInfo) {}
 throw new IllegalArgumentException(); } final
 if (refInfo.name) { final
 RefInfo _ref = refInfo.ref;
 return false; } if (refInfo!= null) { return true ; } } } } }
 return false; } if ( refInfo!= null ) { return true ; } } } } } }
 if (refInfo!= null) { return; } }
 RefInfo lref = refInfo.ref;
 RefInfo rref = refInfo.ref;
 ReferenceInfo ref.ref= refInfo.ref;
 return true; }
 return false; } if (refInfo!= null) { return true ; } } } } ;
 return true; }
 return true;
 Ref ref.ref;
Ref ref Info = refInfo.refInfo(); } final
 Ref refref = refInfo.ref;
 return false; } if ( refInfo!= null ) { return true ; } } } ) ; }
 return false; } if ( refInfo!= null ) { return true ; } } } } } ;
Ref ref = refInfo.name; if (ref!= null).
Ref Ref ref = refInfo; final
 return false; } if ( refInfo!= null ) { return true ; } } } else { final
Ref ref  = refInfo.refInfo.ref; final
 refInfo=ref;
 return true; } }
Ref ref Info = refInfo.refInfo(); } }
 RefNode refInfo= refInfo.ref;
Ref ref = refInfo.name.getRef(parent); final
 if (refInfo!= null) { final
 throw new IllegalArgumentException(); } }
 throw new IllegalArgumentException(null); };
 if (refInfo!= null) { return; } final
 throw new IllegalArgumentException(n); };
Ref ref = refInfo.name; if (ref!= null);
Ref ref =  refInfo();
 DefineInfo refref = refInfo.ref;
 return false; } final
 return false; } }
 throw new IllegalArgumentException("null"); };
 throw new RuntimeException(); } final
 refInfo = parent.ref; }
 Node valParent;
 Reference ref=ref;
Ref Name ref = refInfo; final
 throw new IllegalStateException(); } }
 DefineInfo lref = refInfo.ref;
 throw new RuntimeException(); } }
 assert refInfo;
 throw new IllegalArgumentException(); } }
 return this; }
Ref ref =  refInfo.ref; return; } }
 return this; }
Ref ref  = this;
 throw new IllegalArgumentException(); };
Ref ref =  refInfo.ref; return; } final
 ref = n.ref;
 return false; } } }
Ref ref =  refInfo.ref.refInfo; final
 return true; } final
 return true; } }
 RefRef refref;
Ref ref  = (Ref) refInfo();
 RefInfo node.ref = refInfo.ref;
 return false; } } }
 DefineInfo rref = refInfo.ref;
Ref ref Info;
 return false; } } };
Ref ref  = refInfo; final
 return; } final
 throw new RuntimeException(); } }
Ref ref = refInfo.ref; if (ref!= null).
 throw new IllegalStateException(""); } final
 return false; } } };
 continue; }
 ref=ref;
 return true; } } }
 return true; } } }
 return true; } } };
 Ref refref;
Ref ref = refInfo.ref; return true; } }
Ref ref = refInfo.ref; return false; } }
 Ref _ref = refInfo.ref;
 return; } final
Ref  ref = final
 return true; } final
 return null; } final
 return refInfo ; } } }
 Node refInfo= refInfo.ref;
 return true; } } };
 NodeRef ref= refInfo.ref;
 return; } }
 return; } }
 return false; } } } }
 reference=ref;
 return refInfo ; } } };
 String fullName;
 return this; } } }
 return false; } } }; final
 return true; } } } }
Ref ref =  parent.ref();
 return };
 assert parent.ref;
 Node refParent;
 return false; } } } }
 delete ref.ref;
Ref  info;
Ref ref = refInfo.node;
Ref ref  = new
 Ref.ref = refInfo.ref;
Ref ref =  referenceInfo;
 return; };
 assert true;
 return ref.ref;
 Reference refref;
 Ref rref = refInfo.ref;
 Ref.ref;
Ref Info <
 return; };
Ref Info final
 return null;
Ref ref = refInfo.refInfo;
 try {
Ref ref = refInfo.reference; final
Ref ref = refInfo.ref(); final
Ref ref =  refInfo);
 assert!parent;
Ref ref = refInfo.ref); final
 Ref=refInfo.ref;
 reference =refInfo.ref;
 ref :=refInfo.ref;
Ref ref Info();
 return } }
 Object ref= refInfo.ref;
 Link ref= refInfo.ref;
Ref ref = refInfo.refInfo();
 } }
 final
 } final
 try:
Ref ref = refInfo; }
Ref ref = refInfo(); final
Ref ref = refInfo.;
Ref ref := refInfo.ref;
Ref ref: refInfo.ref;
Ref ref += refInfo.ref;
