 if (!jsdocBuilder.recordDefineType(type)) {
 if (!recordDefineType(type)) {
if (jsdocBuilder.recordDefineType(type)) {
 case RETURN:
 if (!define(type)) {
 if (!jsdocBuilder.define(type)) {
if (define(type)) {
if (!jsdocBuilder) {
 if (!docBuilder.recordDefineType(type)) {
if (jsdocBuilder.recordDefine(type)) {
 case RETURN: if (!jsdocBuilder.recordDefineType(type)) {
if (jsdocBuilder.define(type)) {
if (!jsdocBuilder.recordDefine()) {
 case RETURN:{
if (!jsdocBuilder.recordDefineType(type))
 if (!recordDefine(type)) {
 case RETURN: if (!docBuilder.recordDefineType(type)) {
 if (!jsdocBuilder.recordDefine(type)) {
 if (!jsdocBuilder.recorddefine)) {
if (!jsdocBuilder.recordDefineType(type, lineno)) {
 if (!jsdocBuilder.define)) {
 if (!jsdocBuilder.recordDefinition(type)) {
if (!jsdocBuilder.define)
if (!jsdocBuilder.recordDefine(define)) {
if (jsdocBuilder.recordDefineThisType(type)) {
if (!jsdocBuilder.recorddefine()) {
if (!jsdocBuilder.recordDefineType()) {
 if (!jsdocBuilder.record(define)) {
if (recordDefine(type)) {
 case RETURN: case THIS: case TYPEDEF:
 case THIS: case TYPEDEF:
 if (!builder.recordDefineType(type)) {
 if (!jsdocBuilder.recordDefinition(definition)) {
if (jsdocBuilder.recordDefinition(type)) {
 case THIS: if (!jsdocBuilder.define(type)) {
 default:
 case THIS: case TYPEDEF:
 case THIS:{
 if (!recordDefinition(type)) {
if (!jsdocBuilder.define) {
 if (!jsdocBuilder.recordType(type)) {
 if (!jsdocBuilder.recordDefinition)) {
if (jsdocBuilder.recordType(type)) {
 case RETURN: case THIS: case TYPE: case TYPEDEF:
 case THIS: case TYPE: case TYPEDEF:
 case RETURN: if (!builder.recordDefineType(type)) {
if (!jsdocBuilder.recordDefineType(type) ||!jsdocBuilder.recordType(type) {
 case THIS: case TYPEDEF:{
 case THIS: case RETURN:
if (!jsdocBuilder.recordDefineType(type) &&!jsdocBuilder.recordThisType(type) {
 case THIS: if (!docBuilder.recordDefineType(type)) {
if (!jsdocBuilder.recordDefineType(type) ||!jsdocBuilder.recordThisType(type) {
if (!jsdocBuilder.recordDefine(defines)) {
 case RETURN: case THIS: if (!jsdocBuilder.recordDefineType(type)) {
 case RETURN: case THIS:
 case RETURN: case THIS: case TYPE:
if (!jsdocBuilder.recordDefinition()) {
 case RETURN: if (!recordDefine(type)) {
if (!jsdocBuilder.recordDefineType(type) &&!jsdocBuilder.recordType(type) {
 case THIS: case TYPEDEF: skipEOLs();
 if (!parser.recordDefineType(type)) {
if (jsdocBuilder.recordDefinesThisType(type)) {
 case RETURN: if (!jsdocBuilder.recordDefine(type)) {
if (!jsdocBuilder.recordDefineType(type) &&!jsdocBuilder.recordReturnType(type) {
 if (!jsdocBuilder.recorddefine(type)) {
 case RETURN: case THIS: case TYPE: case TYPEDEF: skipEOLs();
 case THIS: if (!jsdocBuilder.record(type)) {
if (!jsdocBuilder.recordDefineType(type)) { continue retry;
 case THIS: case TYPE: case TYPEDEF:
if (!jsdocBuilder.recordDefineType(type) ||!jsdocBuilder.recordReturnType(type) {
 if (!jsdocBuilder.recordDefine)) {
 case THIS: if (!jsdocBuilder.define) {
 case THIS: case TYPE: if!jsdocBuilder.recordDefineType(type)) {
 case THIS: case TYPE: if (!jsdocBuilder.recordDefineType(type)) {
 case THIS: case TYPE: if (!docBuilder.recordDefineType(type)) {
if (!jsdocBuilder.recordDefine(define(type))) {
 case THIS: if (!jsdocBuilder.recordDefineType(type)) {
 case THIS: case TYPE: case TYPEDEF: skipEOLs();
 case RETURN: if (!jsdocBuilder.recordDefine()) {
 case TYPEDEF:{
 case RETURN: case COMPAT:
 case RETURN: case THIS: case TYPE: case COMPATIBLE:
 case THIS: case TYPEDEF: skipEOL(token);
 case THIS: case TYPE: case TYPEDEF: default:
if (!jsdocBuilder.recordDef(definition)) {
 if (!type)) {
 case THIS: case TYPEDEF: default:
 case RETURN: case THIS: case TYPE: case TYPEDEF
 case RETURN: case THIS: case TYPE: case TYPEDEF: switch (annotation) { case DEFINE:
if (!jsdocBuilder.recordDefine(definition)) {
 if (!recordType(type)) {
 case THIS: case TYPE: case TYPEDEF: {
 case RETURN: case THIS: case TYPE: switch (type) { case DEFINE:
 case RETURN: if (!jsdocBuilder.recorddefine()) {
if (!jsdocBuilder.recordDefineType(type)) { break; } else {
 case RETURN: if (!jsdocBuilder.define) {
 case RETURN: case THIS: case COMPAT:
 case RETURN: if (!jsdocBuilder.recordDefine(define)) {
 case RETURN: if (!parser.recordDefineType(type)) {
 case RETURN: case THIS: case TYPE: case TYPEDEF: default:
if (!jsdocBuilder.recordDefines()) {
 case RETURN: case THIS: case TYPEDEF: switch (annotation) { case DEFINE:
if (!jsdocBuilder.recordDef(type)) {
 case RETURN: if (!jsdocBuilder.recordDefine(type)) {
 case THIS: case TYPE: case TYPEDEF: skipEOL(token);
 case THIS: if (!jsdocBuilder.recordtype)) {
 case THIS: case TYPE: case COMPATIBLE:
 case THIS: case RETURN:{
 case RETURN: case THIS: case TYPEDEF: switch (type) { case DEFINE:
 case THIS: case TYPEDEF::{
if (!jsdocBuilder.recordDefineType(type) ||!jsdocBuilder.recordReturnType) {
 case THIS: case TYPEDEF: if (!jsdocBuilder.define()) {
 case RETURN: if (!jsdocBuilder.recordDefineType(type)) { break; }
if (jsdocBuilder.recordDefineReturnType(type)) {
 case THIS: case TYPEDEF: case TYPE:
 case RETURN: case THIS: case TYPE: case TYPEDEF: switch (annotation) { default:
 if (!jsdocBuilder.recordDescription(description)) {
 case RETURN: case THIS: case TYPE: case TYPEDEF: break;
if (!jsdocBuilder.define()) {
 case THIS: case RETURN: case TYPEDEF:
 case RETURN: case THIS: case TYPE: case TYPEDEF: case NEW:
 case RETURN: if (!jsdocDocBuilder.recordDefineType(type)) {
 case RETURN: case THIS: case TYPE: case TYPEDEF: switch (type) { default:
 case RETURN: case THIS: case TYPE: case TYPEDEF: switch (type) { case DEFINE:
if (!jsdocBuilder.recordDefine(defineType)) {
 case RETURN: case THIS: case TYPEDEF
 case THIS: case TYPE: case TYPEDEF: default:
 case RETURN: case THIS: case TYPE: case TYPEDEF: switch (annotation) { case define:
 case RETURN: case THIS: case TYPE: case TYPEDEF: case COMPAT:
 case RETURN: case THIS: case TYPE: case TYPEDEF: case BC:
if (jsdocBuilder.recordDefine()) {
 case RETURN: if (!jsdocBuilder.recorddefine(type)) {
 case TYPEDEF:
 case RETURN: case THIS: switch (type) { case DEFINE:
 case THIS: case TYPEDEF{
 case RETURN: case THIS: case TYPE: case TYPEDEF: switch (type) {
 case RETURN: case THIS: case TYPE: switch (type) { default:
 if (!jsdocBuilder.record(type)) {
 case THIS: case TYPEDEF: skipEOLs();
 case RETURN: case THIS: case TYPE: case COMPAT:
 case RETURN: case THIS: case TYPE: case TYPEDEF: switch (define) {
 switch (jsdocBuilder.recordDefine(type)) {
 case RETURN: case THIS: case TYPEDEF: skipEOLs();
 case THIS: case TYPEDEF: default:
 case RETURN: if (!jsdocBuilder.define()) {
 case RETURN: if (!jsdocBuilder) {
 case RETURN: case THIS: case TYPE: case TYPEDEF: switch (annotation) { case MAKE:
 case THIS: if (type == null) {
 if (!jsdocBuilder.recordtype)) {
 case RETURN: case THIS: case TYPEDEF: switch (annotation) { case DEFININE:
 case RETURN: if (!jsdocBuilder.recorddefine)) {
 case RETURN: case THIS: case TYPE: case TYPEDEF: switch (type) { case define:
if (!jsdocBuilder.recordDefineType(type)) { parser.skipEOLs();
 case RETURN: case THIS: case TYPE: case TYPEDEF: switch (annotation) { case DEFININE:
 if (!jsdocBuilder.recordDescription(type)) {
 case RETURN: case THIS: case TYPE: case TYPEDEF: switch (annotation) { case CONFIG:
 case RETURN: break; if(!jsdocBuilder.recordDefineType(type)) {
 if (!jsdocBuilder.recorddefineType(type)) {
 case RETURN: case THIS: case TYPE: case TYPEDEF: case CLASS:
 case RETURN: if (!jsdocBuilder.recordDefine(type))
 case RETURN: if (!jsdocBuilder.recordDefinition(definition)) {
if (jsdocBuilder.recordDefine(type) && recordType(type)) {
 case RETURN: if (!jsdocBuilder.define)) {
 case RETURN: case THIS: case TYPE: case TYPEDEF: switch (type) { case CONFIG:
 case RETURN: case THIS: case TYPE: switch (type) { case define:
 case RETURN: case THIS: case TYPEDEF: switch (type) { default:
if (jsdocBuilder.recordDefineAndReturnType(type)) {
 case RETURN: if (!jsdocBuilder.recordDefineType(type)) { continue; }
 case RETURN: case THIS:{
 case RETURN: case THIS: { if (!jsdocBuilder.recordDefineType(type)) {
 case RETURN: case THIS: case TYPEDEF: case TYPE:
 case RETURN: case THIS: case TYPEDEF: default:
if (!jsdocBuilder.recordDefineType(type) { parser.recordType(type); }
if (jsdocBuilder.recordThisType(type)) {
 case RETURN: case TYPEDEF:
 case RETURN: if (type == null) {
 case RETURN: if (!jsdocBuilder.recordDef(type)) {
 case RETURN: case THIS: case TYPEDEF: switch (type) { case define:
if (jsdocBuilder.recordDefineIncompatType(type)) {
 if (!jsdocBuilder.recordDef)) {
 case RETURN: if (define) {
 case RETURN: case THIS: case TYPEDEF: switch (annotation) { case MAKE:
 case RETURN: case THIS: case TYPE: case TYPEDEF: switch (type) { case DEFINE: case RETURN:
 case RETURN: case THIS: case TYPE: default:
 case RETURN: case THIS: case TYPE: switch (type) { case TYPE:
 case RETURN: case THIS: case COMPATIBLE:
 case RETURN: case THIS: case TYPEDEF: switch (annotation) { case define:
 if (jsdocBuilder.recordDefine)) {
 default :{
 if (!jsdocBuilder.recordDefine(type)) { continue retry;
if (!jsdocBuilder.recordDefine(description)) {
 case RETURN: if (!jsdocBuilder.recordDef(definition)) {
 switch (jsdocBuilder.recordDefineType(type)) {
 case RETURN: case THIS: case TYPEDEF: switch (annotation) { case DEFINE: default:
 case RETURN: case THIS: case TYPE: case TYPEDEF: switch (type) { case DEFININE:
 case THIS: if (jsdocBuilder.define) {
if (!jsdocBuilder.recordDefine(definitionNode)) {
 case THIS: case RETURN: if(!jsdocBuilder.recordDefineType(type)) {
if (!jsdocBuilder.recordDefines(defines)) {
if (!jsdocBuilder.recordDefineType(type)) { parser.recordType(type); }
 case RETURN: case THIS: case TYPEDEF: switch (annotation) { case DEFINE: case THIS:
 case RETURN: case THIS: if!jsdocBuilder.recordDefineType(type)) {
if (!jsdocBuilder.recorddefine(define)) {
if (!jsdocBuilder.recordDefineType(type), lineno) {
if (define)
 case THIS: case TYPE: if (define) {
 case RETURN: if (!jsdocBuilder.recordDefine(define))
 case RETURN: case THIS: case TYPE: case TYPEDEF: switch (annotation) { case DEFINE: case THIS:
 case THIS: case TYPEDEF: case RETURN:
if (jsdocBuilder.recordDefine(type) || recordType(type)) {
 case REPLACE: if (!jsdocBuilder.recordDefineType(type)) {
if (jsdocBuilder.recordDefine(type).recordReturnType(type)) {
 case RETURN: if (!jsdocBuilder.recordDefine(definition)) {
 case RETURN: if (!documentBuilder.recordDefineType(type)) {
 if (!jsdocBuilder.recordThisType(type)) {
 case RETURN: case THIS: case TYPE: case TYPEDEF: case RECORD:
 if (jsdocBuilder.define)) {
if (!jsdocBuilder.recordDefine(definer)) {
 case RETURN: case THIS: case TYPE: case TYPEDEF: switch (annotation) { case DEFINE: default:
if (!jsdocBuilder.recordDefineType(type) || (!jsdocBuilder.recordThisType(type) {
if (!jsdocBuilder.recordDefineType(type)) { break; }
 if (type)) {
if (recordDefinition(type)) {
 if (!jsdocBuilder.recordDescription)) {
 case RETURN: if (!jsdocBuilder.recordDefine(define)) {
if (jsdocBuilder.recordDefinition(definition)) {
 case THIS: if (!recordDefineType(type)) {
 case THIS: case TYPEDEF: break;
 case RETURN: case THIS: case TYPE: case TYPEDEF: switch (annotation) { case DFININE:
 case RETURN: case THIS: switch (type) { case define:
if (!jsdocBuilder.recordDefineType(type) ||!jsdocBuilder.recordThisType) {
 case RETURN: case THIS: default: if(!jsdocBuilder.recordDefineType(type)) {
if (jsdocBuilder.recordDefine(type) || recordReturn(type)) {
 case RETURN: if (_docBuilder.recordDefineType(type)) {
 case RETURN: if (!jsdocBuilderImpl.recordDefineType(type)) {
 case THIS: case TYPEDEF
 case THIS: case TYPE: case RETURN:
if (!jsdocBuilder.recordDefineType(type), token) {
 case RETURN: if (!recordThisType(type)) {
if (jsdocBuilder.recordDefine(type) || recordThis(type)) {
 case RETURN: case THIS: case TYPE: case TYPEDEF: switch (annotation) { case Define: case Return:
 case THIS: case TYPE: case TYPEDEF
 if (!recordDefinition(definition)) {
if (define) {
 case RETURN: case THIS: case TYPE: case TYPEDEF: switch (annotation) { case DIFINE:
 case RETURN: if (if (!jsdocBuilder.recordDefineType(type)) {
if (!jsdocBuilder.recordDefineType(type) &&!jsdocBuilder.recordReturnType) {
if (!jsdocBuilder.recordDefineType(type)) { parser.addWarning(type); }
 case RETURN: if (docBuilder.recordDefineType(type)) {
 case RETURN: case THIS: case TYPE: case TYPEDEF: switch (type) { case DEFINE: case THIS:
 case RETURN: case THIS: break; if(!jsdocBuilder.recordDefineType(type)) {
 case THIS: if (type!= null) {
if (!jsdocBuilder.recordDefine(define(type)) {
 case RETURN: case THIS: case TYPE: case RECORD:
 case RETURN: case THIS: case TYPE: case TYPEDEF: switch (annotation) { case Define: default:
 case THIS: case TYPEDEF: skipEOLs(); }
 if builder.recordDefineType(type)) {
 case RETURN: case THIS: case TYPE: case TYPEDEF: {
 case RETURN: if jsdocBuilder.recordDefineType(type)) {
 case RETURN: case TYPE:
 case THIS: case TYPE: case TYPEDEF: skipEOLs(); }
if (!jsdocBuilder.recordDefineType(type) || (!jsdocBuilder.recordType(type) {
 case RETURN: case THIS: case TYPE: case TYPEDEF: switch (annotation) { case DEFINE: case TYPE:
 case THIS: case TYPEDEF: case TYPE: {
if (jsdocBuilder.recordDefine(type) && define(type)) {
if (jsdocBuilder.recordDefine(...) && recordType(type)) {
 default : if(!jsdocBuilder.recordDefineType(type)) {
 if (builder.recordDefineType(type)) {
 if (!jsdocDefine(type)) {
 case RETURN: case THIS: case TYPEDEF: break;
 case THIS: if (!jsdocDocBuilder.recordDefineType(type)) {
 case THIS: case TYPE: case TYPEDEF: default: {
 case RETURN: if (!define) {
 if (!jsdocBuilderImpl.recordDefineType(type)) {
 case RETURN::{
 case RETURN: if (null==jsdocBuilder.recordDefineType(type)) {
 case THIS: case TYPE: case TYPEDEF: break; }
 case THIS: case TYPE: { if (!jsdocBuilder.recordDefineType(type)) {
if (jsdocBuilder.recordDefineWithReturnType(type)) {
if (!jsdocBuilder.recordDefineType(type)) { parser.recordDefine(type);
 case THIS: case TYPE: case RETURN: {
 if (jsdocBuilder.recorddefine)) {
if (!jsdocBuilder.recordDefineType(type) ||!jsdocBuilder.recordReturn(type) {
 break; if(!jsdocBuilder.recordDefineType(type)) {
 case THIS: case TYPE: default :{
 case RETURN: case THIS: case TYPE: case TYPEDEF: if (!jsdocBuilder.recordDefine(type)) {
if (!jsdocBuilder.recordDefineType(type) || jsdocBuilder.recordThisType(type) {
if (!jsdocBuilder.recordDefineType(type)) { parser.skipEOL(token);
if (!jsdocBuilder.recordDefineType(type)) { if (DEBUG) {
 if (!defines.record(type)) {
 case RETURN: if (definition!= null) {
if (!jsdocBuilder.recordDefineType(type) &&!jsdocBuilder.recordReturn(type) {
if (!jsdocBuilder.recordDefineType(type)) { parser.skipEOL(); }
if (jsdocBuilder.recorddefineType(type)) {
if (!jsdocBuilder.recordDefineType(type, token)) {
 case RETURN: case THIS: default:
 if (!(type)) {
 if (!jsdoc.define) {
 case THIS: if (!recordDefine(type)) {
if (!jsdocBuilder.recordDefineType(type) &&!jsdocBuilder.recordThis(type) {
if (!jsdocBuilder.recordDefine(type)) { break; }
if (!jsdocBuilder.recordDefineType(type) ||!jsdocBuilder.recordType(type)) {
 case THIS: if (!jsdocBuilder){
 if (!define(token)) {
if (jsdocBuilder.recordDefinesType(type)) {
if (!jsdocBuilder.recordDefineType(type)) { parser.skipEOLs(); }
 case RETURN: if (type!= null) {
 case RETURN: if (define!= null){
if (!jsdocBuilder.recordDefineType(type)) { if (debug) {
if (!jsdocBuilder.recordDefineType(type) || (!jsdocBuilder.recordReturnType) {
 if (!defineThisType(type)) {
 case THIS: case TYPEDEF) {
if (!jsdocBuilder.recordDescription()) {
if (!jsdocBuilder.recordDefineType(type) &&!jsdocBuilder.recordUseType(type) {
 case RETURN: if (!define(token) {
 if (!jsdocBuilder2.recordDefineType(type)) {
 case THIS: case TYPEDEF: case TYPE:
 if (type == null) {
if (!jsdocBuilder.recordDefineType(type) { parser.recordDefine(type);
 if (!jsdoc.define(type)) {
if (jsdocBuilder.recordDef(definition)) {
 case RETURN: if (builder.recordDefineType(type)) {
 if (!defineType(type)) {
if (!jsdocBuilder.recordDefineType(type)) { parser.recordDefineType();
 case RETURN: switch (type) { if(!jsdocBuilder.recordDefineType(type)) {
 if (!recordThisType(type)) {
 case RETURN: case COMPATIBLE:
if (jsdocBuilder.recordDef(type)) {
 case RETURN: default: if(!jsdocBuilder.recordDefineType(type)) {
if (!jsdocBuilder.recordDefineType(type) &&!jsdocBuilder.recordDescription(description) {
 case TYPEDEF::{
if (!jsdocBuilder.recordDefine())
if (jsdocBuilder.recorddefine()) {
if (!jsdocBuilder.recordDefineType(type) || jsdocBuilder.recordThisType(type)) {
if (!jsdocBuilder.recordDefineType(type) ||!jsdocBuilder.recordDescription(description) {
if (jsdocBuilder.recordDefineInCompat(type)) {
 case RETURN: if (define &&!jsdocBuilder.recordDefineType(type)) {
 case RETURN: switch (type) {
 case RETURN: case TYPE: if(!jsdocBuilder.recordDefineType(type)) {
 case THIS: case RETURN: default: if(!jsdocBuilder.recordDefineType(type)) {
 case THIS: case TYPE: case TYPEDEF: {
if (!jsdocBuilder.recordDefineType(type) &&!jsdocBuilder.recordType(type)) {
if (jsdocBuilder.recordDescription(type)) {
if (!jsdocBuilder.recordDefineType(type)) { if (define) {
 case THIS: case TYPE:
if (!jsdocBuilder.recordDefineType(type) &&!jsdocBuilder.recordThisType) {
 if (!jsdocDefines()) {
if (!jsdocBuilder.recordDefineType(define)) {
 if (!defineDefines(type)) {
 case THIS: if (!jsdocBuilderImpl.recordDefineType(type)) {
if (!jsdocBuilder.recordDefineType(type) { continue retry;
 if (!defineDefine(type)) {
if (!jsdocBuilder.recordDefineType(type)) { parser.recordDefine(); }
 case RETURN: case THIS: case TYPE: case TYPEDEF: switch (annotation) { case DEFINE: }
 case TYPE:
 case RETURN: case THIS: case TYPE: case TYPEDEF: break; } }
 case THIS: case TYPEDEF: skipEOL(token); }
if (jsdocBuilder.recordDefineTernaryType(type)) {
if (!jsdocBuilder.recordDefines)) {
 case RETURN: default:
 case THIS: if (!jsdocBuilder2.recordDefineType(type)) {
 case RETURN: case THIS: case TYPE: case TYPEDEF: switch (annotation) { case DEFINE: {
 if (!jsdocDefine()) {
if (type!= null) {
if (!jsdocBuilder.recordDefineType(type)) { parser.skipEOOLs();
if (!jsdocBuilder.recordDefineType(type)) { type = "unknown" ;
 if (!recordDescription(type)) {
 if (!jsdoc.Builder.recordDefineType(type)) {
 case THIS: case TYPE: default:
 case RETURN: case THIS: case TYPE:
 case THIS: if (define) {
if (jsdocBuilder.recordDefines()) {
 case THIS: case TYPEDEF: default: {
 case RETURN: if (!jsdocBuilder)){
if (jsdocBuilder.recordDefineInThisType(type)) {
 default: if (!docBuilder.recordDefineType(type)) {
if (jsdocBuilder.recordDefinitionType(type)) {
 case RETURN: case THIS::{
 case THIS: case TYPEDEF::::{
 if (!definer.record(type)) {
if (!jsdocBuilder.recordDefineType(type) { parser.skipEOLs();
 case THIS: break; if(!jsdocBuilder.recordDefineType(type)) {
if (!jsdocBuilder.recordDefineType(type, lineno++)) {
if (!jsdocBuilder.recordDefineType(type) { parser.addWarning(type); }
if (jsdocBuilder.recordDefine(type) || define(type)) {
 case THIS:
 case THIS: case TYPEDEF: break; }
 case THIS: case TYPEDEFIN:{
if (!jsdocBuilder.recordDefineType(type) ||!jsdocBuilder.recordType) {
 switch { if (!jsdocBuilder.recordDefineType(type)) {
if (jsdocBuilder.recordDefines(type)) {
 case THIS: case RETURN::{
 case RETURN: case THIS: break;
if (!jsdocBuilder.recordDefineType(type)) { if (!debug) {
 case THIS: case RETURN: { if (!jsdocBuilder.recordDefineType(type)) {
if (!jsdocBuilder.recordDefineType(type) || (type == null) {
if (jsdocBuilder.recordDefineWithType(type)) {
 if (!jsdocBuilder(define)) {
if (!jsdocBuilder.recordDefineType(type)) { if (defines) {
 case THIS: case TYPEDEF: {
 if (!recordDescription(description)) {
 case RETURN: if (defines) {
if (!jsdocBuilder.recordDefineType(type) { break; } else {
if (!jsdocBuilder.recordDefineType(type), token)) {
if (definition!= null) {
if (!jsdocBuilder.recordDefineType(type) { parser.skipEOLs(); }
 case TYPE: if (!jsdocBuilder.recordDefineType(type)) {
if (parser.recordDefine(type)) {
if (!jsdocBuilder.recordDefineType(type))  { parser.addWarning("define") }
 case RETURN: if (!recordDefineType(type)) {
if (jsdocBuilder.recordDefineInCompatType(type)) {
if (jsdocBuilder.recordDefineInline(type)) {
 case MAKE: if (!jsdocBuilder.recordDefineType(type)) {
 case RETURN: if builder.recordDefineType(type)) {
if (jsdocBuilder.recordDefine(type) && defined(type)) {
 case RETURN: if (debug) {
if (!jsdocBuilder.recordDefineType(type) && type!= JsDocToken.LC) {
if (!jsdocBuilder.recordDefineType(type))  { parser.addWarning("define") ;
if (jsdocBuilder.recordDefine(type) && validate(type)) {
if (!jsdocBuilder.recordDefineType(type)) { type = "default" ;
 case RETURN: if (define&&jsdocBuilder.recordDefineType(type)) {
if (!jsdocBuilder.recordDefineType(type) && type!= JsDocToken.BANG) {
if (jsdocBuilder.recordDefinition()) {
if (!jsdocBuilder.recordDefineType(type) { token = eatTokensUntilEOL(); }
 if (!recordDef(type)) {
 case THIS: if (!recordType(type)) {
 if (!recorddefine(type)) {
 case THIS: default :{
if (!jsdocBuilder.recordDefineType(type) || type == null) {
 if (!recordDefinition(description)) {
 case RETURN: if!builder.recordDefineType(type)) {
 if (_docBuilder.recordDefineType(type)) {
if (!jsdocBuilder.recordDefineType(type) { parser.recordDefineType();
 if (!jsdocBuilder.recordDefinesType(type)) {
if (!jsdocBuilder.recordDefineType(type))  { parser.addWarning("define"); }
if (!jsdocBuilder.recordDefineType(type)) { continue retry; }
if (!jsdocBuilder.recordDefineType(type) { parser.addWarning("define") }
 case RETURN: if (!.recordDefineType(type)) {
 if (!documentBuilder.recordDefineType(type)) {
if (!jsdocBuilder.recordDefineType(type)) { if (debugMode) {
 switch (jsdocBuilder.define(type)) {
 case THIS: case TYPEDEF: }
if (!jsdocBuilder.recordDefineType(type) &&!jsdocBuilder.recordType(type))) {
 case THIS::{
if (jsdocBuilder.recordDefinedType(type)) {
if (jsdocBuilder.recordFunction(type)) {
if (!jsdocBuilder.recordDefineType(type) || (!jsdocBuilder.recordThisType) {
 case THIS: case TYPE: case TYPEDEF: skipEOL(token));
 case THIS) {
if (!jsdocBuilder.recordDefineType(type) { parser.skipEOL(); }
if (!isDefined(type)) {
 if (!define(token) {
 case RETURN: break;
if (!jsdocBuilder.recordDefineType)) {
if (DEBUG) {
 if (!recordDefines(type)) {
 if (!jsdocBuilder.recordDefinition(!jsdocBuilder.recordDefineType(type)) {
if (cssdocBuilder.recordDefineType(type)) {
 case RETURN: { if (!jsdocBuilder.recordDefineType(type)) {
if (!jsdocBuilder.recordDefineType(type) { parser.recordType(type);
if (!parser.recordDefine()) {
if (!jsdocBuilder.recordDefineType(type, line, token)) {
 case RETURN: default:{
if (!jsdocBuilder.recordDefineType(type) ||!jsdocBuilder.recordReturnDescription) {
if (isDefined(type)) {
 if (docBuilder.recordDefineType(type)) {
 case THIS: case TYPE:{
 case NEW: if (!jsdocBuilder.recordDefineType(type)) {
 case THIS: default: if(!jsdocBuilder.recordDefineType(type)) {
if  (!jsdocBuilder).define()) {
 case RETURN: if!jsdocBuilder.recordDefineType(type)) {
 case ITEM: case THIS:
 case RETURN: if (!debug) {
 case THIS: case TYPE: break; if(!jsdocBuilder.recordDefineType(type)) {
 case RETURN: if (!!jsdocBuilder.recordDefineType(type)) {
if (typeNode!= null) {
if (!jsdocBuilder.recordDefineType(type))  { token = eatTokensUntilEOL(); }
 case RETURN: case MAKE:
if (!jsdocBuilder.recordDefineType(type) ||!jsdocBuilder.recordDescription) {
 case COMPATIBLE:
if (!jsdocBuilder.recordDefineType(type) || (!jsdocBuilder.recordType) {
 case THIS: case TYPE: default: if(!jsdocBuilder.recordDefineType(type)) {
 case RETURN: case THIS: break if (!jsdocBuilder.recordDefineType(type)) {
 if (!jsdocBuilder.recordType(!jsdocBuilder.recordDefineType(type)) {
if (parseDefines(token)) {
if  (!type) {
if (!jsdocBuilder.recordDefineType(type) { parser.addWarning("define") ;
if (isDefined(typeNode)) {
if  (!debug) {
 if jsdocBuilder.recordDefineType(type)) {
if (parser.skipEOLs()) {
if  (!jsdocBuilder) break;
if (define!= null) {
if (parser!= null) {
 if (!jsdoc.recordDefineType(type)) {
 if (!define(type) {
if  (!jsdocBuilder).define {
 case RETURN: ifBuilder.recordDefineType(type)) {
 if (!jsdoc.define)){
if (!jsdocBuilder.recordDefineType(type) { parser.recordDefine(); }
if (recordType(type)) {
 if parser.recordDefineType(type)) {
if  (!DEBUG) {
if  (!define) {
if (recordDefineType(type)) {
if (debug) {
if (isDefine(type)) {
 if (!recordDefine)) {
if (!jsdocBuilder.recordDefineType(type) { parser.addWarning("Unknown type"); }
if (!jsdocBuilder.recordDefineType(type) { parser.addWarning("unknown type"); }
if (jsdocBuilder.recordDefineInCompoundType(type)) {
if (!jsdocBuilder.recordDefineType(type))  { parser.addWarning("Unknown type"); }
 if (!.recordDefineType(type)) {
 case ITEM: if(!jsdocBuilder.recordDefineType(type)) {
if (!jsdocBuilder.recordDefineType(type) ||!jsdocBuilder.recordThis) {
if (!jsdocBuilder.recordDefine(type)) { continue; }
if (parseDefine(token)) {
if (!jsdocBuilder.recordDefineType(type, charno)) {
if (jsdocBuilder.recordDefineInCompiledCode(type)) {
if (define == true) {
 case RETURN: case THIS: : if(!jsdocBuilder.recordDefineType(type)) {
if (!jsdocBuilder.recordDefineType(type, lineno2)) {
 if (!createDefineNode(type)) {
if (!jsdocBuilder.recordDefineType(type, parser)) {
if (!jsdocBuilder.recordDefineType(type, skipEOL)) {
if (!jsdocBuilder.recordDefineType(type) &&!jsdocBuilder.recordDefine) {
if (!jsdocBuilder.recordDefineType(type) &&!jsdocBuilder.recordReturnDescription) {
if  (!jsdocBuilder)) {
 case THIS: if!jsdocBuilder.recordDefineType(type)) {
if (parseDefines(token))) {
 if (!cssdocBuilder.define(type)) {
 ifBuilder.recordDefineType(type)) {
 if (!definer.recordType(type)) {
 if (!record(type)) {
 case MAKE:
if (!jsdocBuilder.recordDefineType(type))) {
if (!jsdocBuilder.recordDefineType(type) || (!jsdocBuilder.recordDescription) {
 if (define(token)) {
if (!jsdocBuilder.recordDefineType(type) ||!isDefined(type) {
 case THIS: { if(!jsdocBuilder.recordDefineType(type)) {
if (!jsdocBuilder.recordDefineType(returnType)) {
if (!jsdocBuilder.recordDefineType(type)) { if (!debug)
 case THIS: case TYPE: (!jsdocBuilder.recordDefineType(type)) {
if (typeNode == null) {
if (!jsdocBuilder.recordDefineType(type)) { continue retry();
if (cssdocBuilder.define(type)) {
 case RETURN: if () {
 jsdocBuilder.recordDefineType(type)) {
if (recordThisType(type)) {
if (!jsdocBuilder.recordDefineType(type)) { continue; }
 case INCOMAT:
if (!jsdocBuilder.recordDefineType(type) || type == "define") {
if (!jsdocBuilder.recordDefineType(type) &&!jsdocBuilder.recordType) {
 case NEW:
 if (define)) {
if  (!jsdocBuilder).define()
 if (if (!jsdocBuilder.recordDefineType(type)) {
if (!jsdocBuilder.recordDefineType(type) && type!= JsDocType) {
 case RETURN: if ((!jsdocBuilder.recordDefineType(type)) {
 if (warn) {
 if (type == null)) {
 case INSTALLEDEF:
if  (!define)
 if ((type)) {
 if ()) {
if (!jsdocBuilder.recordDefineType(type) ||!isDefine(type) {
if (!jsdocBuilder.recordDefineType(type) || (typeNode == null) {
if (defines) {
if (!jsdocBuilder.recordDefineType(type) || strict) {
if (!jsdocBuilder.recordDefineType(type) && type == "define") {
if (!type == null) {
if (!jsdocBuilder.recordDefineType(type) && type!= JsDoc.define) {
if (!jsdocBuilder.recordDefineType(type) &&!jsdocBuilder.recordDescription) {
if (!jsdocBuilder.recordDefineType(type) { type = "unknown" ;
 if () {
 case THIS: case TYPE) {
if (!jsdocBuilder.recordDefineType(type)) { break; } else
 if (!recordDefinitionType(type)) {
if (!jsdocBuilder.recordDefineType(type) && type!= JsDoc.TYPE) {
if (!jsdocBuilder.recordDefineType(type) && type!= JsToken.LC) {
 case THIS: case RETURN: {
if (!jsdocBuilder.recordDefineType(type) &&!isDefined(type) {
if (!jsdocBuilder.recordDefineType(type) { if (debug) {
if (definer.recordType(type)) {
if (!jsdocBuilder.recordDefineType(type) { type = "default" ;
if (!jsdocBuilder.recordDefineType(type) && (typeNode!= null) {
if (!jsdocBuilder.recordDefineType(type) { if (DEBUG) {
 if (!define)) {
if (definition) {
if (!jsdocBuilder.recordDefineType(type) ||!jsdocBuilder.debug) {
if  (!defines) {
if (!jsdocBuilder.recordDefineType(type) || DEBUG) {
if (!jsdocBuilder.recordDefineType(type) || (!jsdocBuilder.record) {
 { if(!jsdocBuilder.recordDefineType(type)) {
if (!jsdocBuilder.recordDefineType(type) || type.length == 0) {
if (!jsdocBuilder.recordDefineType(type));
if  (!DEBUG)
if (jsdocBuilder.record(type)) {
if (definition == null) {
if (!jsdocBuilder.recordDefineType(this, type)) {
if (!jsdocBuilder.recordDefineType(type) &&!isDefine(type) {
if (!jsdocBuilder.recordDefineType(type, lineNumber)) {
 case CONFIG:
if (!jsdocBuilder.recordDefineType(type) { continue retry; }
if  (!debug)
if (!jsdocBuilder.recordDefineType(type) || (define == false) {
 if(null==jsdocBuilder.recordDefineType(type)) {
if (define!= true) {
if (!jsdocBuilder.recordDefineType(type, lineNo)) {
 if (!)) {
if (!jsdocBuilder.recordDefineType(type) && typeNode!= null) {
if (!jsdocBuilder.recordDefineType(type) ||!define) {
if (!jsdocBuilder.recordDefineType(type) || (typeNode == null)) {
 if (!debug)) {
if (!jsdocBuilder.recordDefineType(type) && (type!= null) {
if (DEBUG)
 if (!recordFunction(type)) {
if (!jsdocBuilder.recordDefineType(type) { break; }
if (!definition) {
if (!jsdocBuilder.recordDefineType(type) && (type == null) {
 if (defineWarning) {
if (docBuilder.recordDefinition(type)) {
if  (!define()) {
 if (debug)) {
if (!jsdocBuilder.recordDefineType(type)))
 case RETURN::::{
if (!jsdocBuilder.recordDefineType(type) && (typeNode == null) {
 if (warn)) {
if (!jsdocBuilder.recordDefineType(type) && (typeNode!= null)) {
if (recordDefines(type)) {
if (!jsdocBuilder.recordDefineType(type) || (type!= null) {
if (!jsdocBuilder.recordDefineType(type) || (define == true) {
 if (supertype)) {
if (!jsdocBuilder.recordDefineType(type) && typeNode == null) {
if (!jsdocBuilder.recordDefineType(defineType)) {
if (!jsdocBuilder.recordDefineType(type) && type == null) {
 if (()) {
if (!jsdocBuilder.recordDefineType(type) && type!= null) {
if (!jsdocBuilder.recordDefineType(type) && type!= JsDocToken) {
 case RECORDING:{
if (!jsdocBuilder.define())
 if (returntype)) {
if (!jsdocBuilder.recordDefineType(type, true)) {
 if defined(type)) {
if (!jsdocBuilder.recordDefineType(type) || (define!= null) {
if (!jsdocBuilder.recordDefineType(type) ) break;
 case ITEM: { if(!jsdocBuilder.recordDefineType(type)) {
 case RETURN: {
 if (DEBUG)) {
if (!jsdocBuilder.recordDefineType(type) && skipEOL) {
 if (!definition(type)) {
if (debug)
 case TYPE:{
if (!jsdocBuilder.recordDefineType(type) && token == null) {
if (!jsdocBuilder.recordDefineType())) {
 case THIS: default::{
if (!jsdocBuilder.recordDefineType(type))  { break;
 if (istype)) {
if (!jsdocBuilder.define") {
 case THIS: : if(!jsdocBuilder.recordDefineType(type)) {
 if (defines)) {
 if (decline) {
 if (!defined(type)) {
 if (declare) {
 if (!defines)) {
if (!returnType) {
if (!jsdocBuilder.recordDefineType(type) &&!isDefineType) {
 if (defineWarning)) {
if (!jsdocBuilder.recordDefineType(definer)) {
 case RETURN...{
 if (!) {
if (definitionNode) {
 case NEW:{
 case REPLACE:
if (!jsdocBuilder.recordDefineType(type) ||!isDefine) {
if (parseDefineType(type)) {
if (!jsdocBuilder.recordDefineType(type) || skipEOL) {
if (!jsdocBuilder.recordDefineType(type) ||!define)
if (!jsdocBuilder.recordDefineType(type) ||!isDefined) {
if (!jsdocBuilder.recordDefineType(type) || type == ".") {
if (!jsdocBuilder.recordDefineType(type) { return null; }
if  DEBUG {
 case REPLACE:{
if (!jsdocBuilder.recordDefineType(defines)) {
 case COMPAT:
if (defines. contains(type)) {
if (!jsdocBuilder.recordDefineType(type) ||!defines) {
if (!jsdocBuilder.recordDefineType(type))  { return null; }
if (recordDescription(type)) {
if (!jsdocBuilder.recordDefineType(type) ||!define {
if (parseDefineNode(type)) {
if (!jsdocBuilder.recordDefineType(type) && type == "{") {
 if (!!jsdocBuilder.recordDefineType(type)) {
if (!jsdocBuilder.recordDefineType(type) { continue retry();
if (!jsdocBuilder.recordDefineType(type)) { return
if (createDefineNode(type)) {
if (!jsdocBuilder.recordDefineType(type) && token!= null) {
 case RETURN: else
if  debug {
if (recordDef(type)) {
if (recorddefineType(type)) {
if (!jsdocBuilder.recordDefineType(type) || type!= null) {
if (!definition)
 switch (()) {
 case THIS: if if(!jsdocBuilder.recordDefineType(type)) {
 if!jsdocBuilder.recordDefineType(type)) {
if (!jsdocBuilder.recordDefineType(Type)) {
 default::{
 case REURN:
if (recordDefinitionType(type)) {
 switch (!jsdocBuilder.recordDefineType(type)) {
if (!jsdocBuilder.recordDefineType(type) &&!typeNode.optional) {
 if (_jsdocBuilder.recordDefineType(type)) {
if (!jsdocBuilder.recordDefineType(typeNode)) {
if (!jsdocBuilder.recordDefineType(...) {
if (!jsdocBuilder.recordDefineType(type) { continue; }
if (!jsdocBuilder.recordDefineType(type) ) continue;
if (!jsdocBuilder.recordDefineType(type)) break; else
 case RECORD: {
if (!jsdocBuilder.recordDefineType(type)) break; }
 break;
if (definition)
if  debugging {
 break; } if(!jsdocBuilder.recordDefineType(type)) {
if  defined {
if (!return)
 if define(type)) {
if (!jsdocBuilder.recordDefineType(name)) {
 case (!jsdocBuilder.recordDefineType(type)) {
 break if(!jsdocBuilder.recordDefineType(type)) {
 if ((!jsdocBuilder.recordDefineType(type)) {
 ifParser.recordDefineType(type)) {
 case THIS if(!jsdocBuilder.recordDefineType(type)) {
 if (&&!jsdocBuilder.recordDefineType(type)) {
if (!jsdocBuilder.recorddefine())
if (test)
 case NEW) {
if (!jsdocBuilder.recordDefineType(type) &&! debug) {
if (!jsdocBuilder.recordDefineType(type) ||! debug) {
if (recordFunction(type)) {
if (!jsdocBuilder.recordDefineType(type) &&! strict) {
if (!jsdocBuilder.recordDefineType(type) &&! ignore) {
 if (.recordDefineType(type)) {
if (!jsdocBuilder.recordDefineType(type) ||! strict) {
if (!jsdocBuilder.recordDefineType(type) || (debug) {
if (!jsdocBuilder.recordDefineType(type) ||! recursive) {
if (!jsdocBuilder.recordDefineType(type) || (DEBUG) {
if (!jsdocBuilder.recordDefineType(type) && skipComments) {
if (!jsdocBuilder.define))
if (!jsdocBuilder.recordDefineType(type) &&! recursive) {
if (!jsdocBuilder.recordDefineType(") {
if (!jsdocBuilder.define")
if (!jsdocBuilder.recordDefineType) {
 case:
if (!jsdocBuilder.recordDefineType(type))  { } else
 if if(!jsdocBuilder.recordDefineType(type)) {
if (!jsdocBuilder.recordDefineType(type) ) break();
 case NEVER{
if (!jsdocBuilder.recordDefineType() {
 case :{
 if ($type)) {
 if (!(!jsdocBuilder.recordDefineType(type)) {
if (!jsdocBuilder.) {
if (!jsdocBuilder.recordDefineType") {
if (!jsdocBuilder.recordDefineType(type))  { {
if  DEBUG:
if (!jsdocBuilder). {
 if (_!jsdocBuilder.recordDefineType(type)) {
if (!jsdocBuilder.recordDefineType(type) {
 if (_recordDefineType(type)) {
if (!jsdocBuilder.recordDefineType(type")) {
if (defined(type)) {
if (definition(type)) {
 {
if (require(type)) {
if (def(type)) {
 else
if (!jsdocBuilder.recordDefineType(this)) {
if (unjsdocBuilder.recordDefineType(type)) {
if (...jsdocBuilder.recordDefineType(type)) {
 }
